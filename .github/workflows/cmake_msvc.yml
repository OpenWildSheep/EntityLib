name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        BUILD_TYPE: [Debug, Release]
        cppstd: [17, 20]
        
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} -DCMAKE_CXX_STANDARD=${{matrix.cppstd}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.BUILD_TYPE}} --target EntLibAPIGenerator
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.BUILD_TYPE}} --target UpdateSchemas

    - name: Merge UnitTest Schemas
      run: "build/Release/UpdateSchemas" -o build/Schemas -e DemoSchemas/EditionComponents.json,DemoSchemas/Scene-schema.json -r DemoSchemas/RuntimeComponents.json

    - name: Generate EntGen API
      run: "build/Release/EntLibAPIGenerator" -s build/Schemas -d build/EntGen -r EntLibAPIGenerator/resources

    - name: Build Unit tests
      run: cmake --build build --config Release --target TestEntityDLL

    - name: Run Unit tests
      working-directory: ${{github.workspace}}/Test
      run: "../build/Release/TestEntityDLL"
