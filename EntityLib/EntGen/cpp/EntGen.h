
// /!\ This code is GENERATED! Do not modify it.

#pragma once

#include <EntityLib.h>
#include "EntGenHelpers.h"

namespace Ent
{
    namespace Gen
    {
        struct variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_; // Union
        struct variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_; // Union
        struct variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_; // Union
        struct variant_ZoneCylinderShape_ZoneMeshShape_; // Union
        struct variant_Pasta_Easing_Curve_string_; // Union
        struct variant_MeshShape_ShapeSphere_ShapeBox_; // Union
        struct variant_EntityRef_NavMeshArea_; // Union
        struct usePerception;
        struct tryGrasp;
        struct sPhysicsShapeSphere;
        struct sPhysicsShapeMesh;
        struct sPhysicsShapeCylinder;
        struct sPhysicsShapeCapsule;
        struct sJointFixedDesc;
        struct sJointBallDesc;
        struct resetCreatureRequest;
        struct jumpPower;
        struct isPerceivableForEnemies;
        struct isPerceivable;
        struct eventStringHash;
        struct enableSynchronization;
        struct computePitchAngle;
        struct allowedTypesItem;
        struct WindTurbulenceType; // enum
        enum class WindTurbulenceTypeEnum
        {
            radial,
            swirlcw,
            swirlccw,
            WindTurbulenceType_COUNT,
        };
        struct WaveRenderingType; // enum
        enum class WaveRenderingTypeEnum
        {
            Mesh,
            WaveRenderingType_COUNT,
        };
        struct Walkability;
        struct VegetationData;
        struct VegetationDataList;
        struct sPhysicsShapeBox;
        struct sEnvStamp;
        struct retiming;
        struct WaveRendererProperties;
        struct WaveProperties;
        struct sJointUniversalDesc;
        struct sJointSwingTwistDesc;
        struct sJointSliderDesc;
        struct sJointHingeDesc;
        struct ConditionalRigidityAttribute_Range;
        struct VariantAllowed;
        struct UnionObjectArrayItem;
        struct TypedValue;
        struct TransitionNeighborData;
        struct TrailUVUnwrappingMode; // enum
        enum class TrailUVUnwrappingModeEnum
        {
            TailToHead,
            SnakeHeadToTail,
            TrailUVUnwrappingMode_COUNT,
        };
        struct TrailRenderingType; // enum
        enum class TrailRenderingTypeEnum
        {
            Cross,
            Billboard,
            Patches,
            Mesh,
            TrailRenderingType_COUNT,
        };
        struct TrailRenderingSides; // enum
        enum class TrailRenderingSidesEnum
        {
            SideA,
            SideB,
            BothSides,
            TrailRenderingSides_COUNT,
        };
        struct TrailRenderingAttribute; // enum
        enum class TrailRenderingAttributeEnum
        {
            Horizontal,
            Vertical,
            Frontal,
            TrailRenderingAttribute_COUNT,
        };
        struct TrailRendererProperties;
        struct TrackedEntitiesItem;
        struct TestPropertyDefaultValues;
        struct TestPropertyDefaultValues2;
        struct Terrain_TerrainMeta;
        struct TargetCollision;
        struct TagsList;
        struct TaggedSDF;
        struct TagInfo;
        struct TagDB;
        struct SyncTempoMode; // enum
        enum class SyncTempoModeEnum
        {
            None_,
            OnGrid,
            OnBeat,
            OnBar,
            OnEnterCue,
            OnExitCue,
            OnCustomCue,
            OnSwitchTransition,
            SyncTempoMode_COUNT,
            SyncTempoMode_FIRST,
        };
        struct UIMusic;
        struct StyleMode; // enum
        enum class StyleModeEnum
        {
            default_,
            stick,
            sword,
            do_,
            hammer,
            knife,
            squirrel,
            lush,
            StyleMode_COUNT,
        };
        struct StunData;
        struct StickToGround;
        struct SpeedScaleXY;
        struct SpeedMode; // enum
        enum class SpeedModeEnum
        {
            speed0,
            speed1,
            speed2,
            speed3,
            speed4,
            SpeedMode_COUNT,
        };
        struct SpeedModeMax;
        struct SpeedFastMinDuration;
        struct Specie; // enum
        enum class SpecieEnum
        {
            auroch,
            bear,
            babybear,
            catfish,
            eagle,
            elk,
            fox,
            giantbear,
            human,
            cannibal,
            babyhuman,
            horse,
            ibex,
            rabbit,
            rat,
            ram,
            raven,
            schmetre,
            seagull,
            snake,
            spermwhale,
            squirrel,
            stag,
            toad,
            trout,
            wildboar,
            babyboar,
            wolf,
            shark,
            dolphin,
            whale,
            goddess,
            clothboots,
            clothbrace,
            clothhelmet,
            clothskirt,
            clothtorso,
            clothbody,
            weapon,
            outfit,
            drivable,
            fruit,
            darkstone,
            destructible,
            environment,
            regeneration,
            insect,
            Specie_COUNT,
        };
        struct SpawningParameter;
        struct SoundOpportunityRangeDescription;
        struct SoundOcclusionData;
        struct SoundManager_BiomeSoundBank;
        struct SoundEventMapping;
        struct SoundEmissionStrength; // enum
        enum class SoundEmissionStrengthEnum
        {
            none,
            low,
            medium,
            high,
            SoundEmissionStrength_COUNT,
        };
        struct soundEmissionStrength;
        struct SoftCollisionGD_VegetationDetectionParameters;
        struct SmoothScaleComponentInput_Parameters;
        struct Size; // enum
        enum class SizeEnum
        {
            tiny,
            small,
            medium,
            big,
            enormous,
            Size_COUNT,
        };
        struct ShowdownSpeciesAudioData;
        struct ShowdownLayerInfo;
        struct ShowdownLayerData;
        struct ShowdownMusic;
        struct ShootSequenceData;
        struct ShootData;
        struct SetOfObjectItem;
        struct SeedPatchData;
        struct SeedPatchDatas;
        struct SeedPatchDataList;
        struct ScriptPathAndDataSet;
        struct ScaleFactor;
        struct ScaleConverter;
        struct RuntimeMode; // enum
        enum class RuntimeModeEnum
        {
            None_,
            Container,
            Compound,
        };
        struct RigidbodyScalingSpeed;
        struct RigidbodyScaleMultiplier;
        struct RigidBodyUserData;
        struct RigidBodyUserDataLedges;
        struct RigidBodyUserDataImpact;
        struct RigidBodyMeshNavigation;
        struct FluidRigidbodyUserData;
        struct RevivedData;
        struct ReviveSide; // enum
        enum class ReviveSideEnum
        {
            neutral,
            sacred,
            cursed,
            ReviveSide_COUNT,
        };
        struct ResponsiblePointer_GameEffect_; // Union
        struct sGameEffectTemplate;
        struct ResponsiblePointer_CineEvent_; // Union
        struct ResponsiblePointer_AnalyticsObserverInterface_;
        struct ResponsiblePointer_ActorState_; // Union
        struct SpawnState;
        struct RespawnState;
        struct RenderManager_DepthOfFieldConfig;
        struct RegenerationManager_EnergyAreaSetting;
        struct RegenSwitchBehavior; // enum
        enum class RegenSwitchBehaviorEnum
        {
            CrossFade,
            CrossMetamorphosis,
            SequentialMetamorphosis,
            InterruptibleSequentialMetamorphosis,
        };
        struct RegenField; // enum
        enum class RegenFieldEnum
        {
            energy,
            absorption,
            RegenField_COUNT,
        };
        struct RegenAreaTransitionSettings;
        struct TransitionSettings;
        struct ReflectionTools_EnumSchema;
        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods;
        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData;
        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember;
        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency;
        struct ReflectionTools_FlatBufferSchemaDependenciesExporter;
        struct ReflectionTools_ClassReflectionSchema;
        struct ReflectionTools_ReflectionSchema;
        struct ReflectionMethodParameter;
        struct ReflectionMethod;
        struct ReflectionEnum;
        struct ReflectionClass;
        struct ReflectionDb;
        struct ReflectedMaterialGroup;
        struct ReflectedMaterialGroupVector;
        struct ReflectedDetailMaterial;
        struct ReflectedDetailMaterialVariants;
        struct ReflectedDetailMaterialBank;
        struct RecastNavmeshGenerationParameters;
        struct sPhysicsJointDesc;
        struct sPhysicShape;
        struct sRigidBodyDesc;
        struct Transform3D;
        struct ProjectileShooterData;
        struct ProjectileData;
        struct ProgressSoundEventData;
        struct PrimitiveShape;
        struct ShapeSphere;
        struct ShapeBox;
        struct PrimitiveData;
        struct PrimitiveColliderType; // enum
        enum class PrimitiveColliderTypeEnum
        {
            Undefined,
            Sphere,
            Box,
            Capsule,
            Cylinder,
            Mesh,
            PrimitiveColliderType_COUNT,
        };
        struct PredictionBehaviorDuration;
        struct PredictionBehaviorData;
        struct Precision; // enum
        enum class PrecisionEnum
        {
            full,
            half,
            quarter,
            eighth,
            sixteenth,
            highest,
            lowest,
        };
        using Position = Ent::Gen::Tuple<Ent::Gen::Int, Ent::Gen::Int, Ent::Gen::Float, Ent::Gen::Float, Ent::Gen::Float>; // Tuple
        struct constraintPlaneWorldPosition;
        struct ProjectileTrajectory;
        struct PlayRatio;
        struct PhysicsMaterial;
        struct PhysicsLayer; // enum
        enum class PhysicsLayerEnum
        {
            Default,
            Ground,
            Static,
            Raycast,
            Trigger,
            Walkable,
            Camera,
            ClimbEdge,
            Kinematic,
            Ragdoll,
            Projectile,
            Hit,
            MotionConstraint,
            Heal,
            Body,
            Fluid,
            Hitable,
            PhysicsGPE,
            Interactable,
            Creature,
            Debris,
            None_,
            All,
            PHYSICLAYER_COUNT,
        };
        struct PhysicsEffectsManager_PhysicsLimits;
        struct PerceiverComponentInput_usePerception;
        struct Pasta_Easing_Curve; // enum
        enum class Pasta_Easing_CurveEnum
        {
            Linear,
            EaseInSin,
            EaseInQuad,
            EaseInCubic,
            EaseInQuart,
            EaseInQuint,
            EaseInExp,
            EaseOutSin,
            EaseOutQuad,
            EaseOutCubic,
            EaseOutQuart,
            EaseOutQuint,
            EaseOutExp,
            EaseInoutSin,
            EaseInoutQuad,
            EaseInoutCubic,
            EaseInoutQuart,
            EaseInoutQuint,
            EaseInoutExp,
            EaseInCirc,
            EaseOutCirc,
            EaseInoutCirc,
            EaseOutElastic,
            Count,
        };
        struct RadiusChange;
        struct Parameters;
        struct OwnershipModuleDebugWindow; // enum
        enum class OwnershipModuleDebugWindowEnum
        {
            Tree,
            Settings,
            In_Game_Debug_Data,
            OwnershipModuleDebugWindow_COUNT,
        };
        struct Game_OwnershipDebugger;
        struct OutfitPieceType; // enum
        enum class OutfitPieceTypeEnum
        {
            OutfitPieceType_NONE,
            Head,
            Torso,
            Skirt,
            Boots,
            Brace,
            Body,
            Hair,
            OutfitPieceType_COUNT,
        };
        struct OutfitPiece;
        struct Orientation;
        struct Online;
        struct Object_MaxActivationLevel; // enum
        enum class Object_MaxActivationLevelEnum
        {
            Created,
            InWorld,
            Loading,
            Started,
        };
        struct NavMeshTag; // enum
        enum class NavMeshTagEnum
        {
            Lush,
            Corrupted,
            Spirit,
            NonSpirit,
            NavMeshTag_COUNT,
        };
        struct NavMeshCapability; // enum
        enum class NavMeshCapabilityEnum
        {
            Walk,
            SwimShallow,
            SwimDeep,
            LongJump,
            HighJump,
            EdgeWalk,
            TunnelCross,
            Jump,
            WallRun,
            WaterFall,
            Climb,
            UnderwaterTunnelCross,
            NavMeshCapability_COUNT,
        };
        struct MusicCategory;
        struct MoveCapacityData_OrientationSpeed;
        struct MountableSnapLine_ControlPoint;
        struct MountableData;
        struct MinReviveRatio;
        struct MinRespawnDistance;
        struct MinDistanceToRespawnPosition;
        struct MeshesItem;
        struct RUNTIME_LODsItem;
        struct MeshNavigationAllowedMode; // enum
        enum class MeshNavigationAllowedModeEnum
        {
            Never,
            PlayerOnly,
            Always,
            MeshNavigationAllowedMode_COUNT,
        };
        struct MeshNavigationBehaviorData;
        struct MaxActivationLevel; // enum
        enum class MaxActivationLevelEnum
        {
            Created,
            InWorld,
            Loading,
            Started,
        };
        struct VolumeConstraintDataGD;
        struct Game_MacroNavMeshStamper;
        struct PointCloudInstanceDataResource;
        struct PointCloudChunk;
        struct MapOfObjectItem_A;
        struct Manager_EntityID;
        struct Manager;
        struct WorldManager;
        struct WaveManager;
        struct WaterManager;
        struct VisualManager;
        struct VegetationManager;
        struct TrailManager;
        struct TerrainManager;
        struct SyncTempoManager;
        struct StreamingManager;
        struct SpatialMapManager;
        struct ShamanVisionManager;
        struct SensorManager;
        struct Scheduler;
        struct SceneManager;
        struct ResourceDebugger;
        struct ReloadManager;
        struct RegionManager;
        struct RPCServerManager;
        struct RPCMarshallingTests;
        struct QualityManager;
        struct PlayerManager;
        struct PhysicsEffectsManager;
        struct PestoManager;
        struct PerceptionManager;
        struct ParticleManager;
        struct NavMeshManager;
        struct LoadSaveManager;
        struct LightManager;
        struct InputManager;
        struct InfoboardManager;
        struct HeightMapManager;
        struct GroundTypeManager;
        struct GameMasterManager;
        struct GameEffectManager;
        struct FluidManager;
        struct FluidGameplayQueriesManager;
        struct FightManager;
        struct EventManager;
        struct EnvironmentManager;
        struct EntityManager;
        struct DialogManager;
        struct BoidsManager;
        struct BillboardManager;
        struct BehaviorManager;
        struct AnimalManager;
        struct ActorManager;
        struct ActionStateManager;
        struct LocomotionMode; // enum
        enum class LocomotionModeEnum
        {
            standup,
            quadstandup,
            crouch,
            prone,
            swim,
            ride,
            fly,
            dive,
            fall,
            cinematic,
            ridden,
            riddenfly,
            fight,
            clamber,
            buried,
            count,
        };
        struct MoveCapacityData_ReachSpeed;
        struct ListItem;
        struct LightType; // enum
        enum class LightTypeEnum
        {
            Omni,
            Hemi,
            Spot,
            Dir,
            LightType_Count,
        };
        struct Light;
        struct LightAttackData;
        struct lightAttackData;
        struct LedgePositionInfo;
        struct JumpHeightMultiplier;
        struct IsActive;
        struct Invincible;
        struct InventoryTags; // enum
        enum class InventoryTagsEnum
        {
            outfit,
            item,
            default_,
            lush,
            corrupted,
            soul,
            disguise,
            soulfreedflying,
            soulfreednormal,
            InventoryTags_COUNT,
        };
        struct TaggedEntityRef;
        struct InterpolationMethod; // enum
        enum class InterpolationMethodEnum
        {
            Spline,
            BSpline,
            InterpolationMethod_COUNT,
        };
        struct TrailProperties;
        struct Interactor;
        struct InputCollisionBehaviorData;
        struct InertiaTensor;
        struct ImpactAndSolidityData;
        struct ID;
        struct PhysicsReplicateData;
        struct HotSpotType; // enum
        enum class HotSpotTypeEnum
        {
            all,
            none,
            back,
            beam,
            bite,
            biter,
            breakablestrong,
            breakableweak,
            camera,
            center,
            grab,
            head,
            heal,
            ride,
            root,
            snap,
            slot,
            spawnlife,
            shoot,
            take,
            takehandle,
            vertebra,
            respawnslot,
            HotSpotType_COUNT,
        };
        struct PickableDistributorComponentData;
        struct HotspotData;
        struct HitWallEnvironmentData;
        struct HitWallData;
        struct HitType; // enum
        enum class HitTypeEnum
        {
            HitInstant,
            HitPoison,
            HitType_COUNT,
        };
        struct HitStyle; // enum
        enum class HitStyleEnum
        {
            None_,
            Bite,
            Light,
            Medium,
            Big,
            Eject,
            EjectFar,
            Fall,
            Impact,
            HitStyle_COUNT,
        };
        struct HeadCollisionBehaviorData;
        struct GrowingState; // enum
        enum class GrowingStateEnum
        {
            invalid,
            nogrow,
            growing,
            grown,
            manualgrow,
            degrowing,
            GrowingState_COUNT,
        };
        struct GroupAvoidanceEnum; // enum
        enum class GroupAvoidanceEnumEnum
        {
            lush,
            corrupted,
            tiny,
            small,
            medium,
            big,
            enormous,
            GroupAvoidanceEnum_COUNT,
        };
        struct VelocityObstaclesManager;
        struct GroundTypeData;
        struct GrasperInteractionData;
        struct GraspableInteractionData;
        struct GraspType; // enum
        enum class GraspTypeEnum
        {
            Bite,
            Grab,
            Hold,
            GraspType_COUNT,
        };
        struct GraspResistanceData;
        struct GeometryStamper;
        struct SkinnedPhysMeshStamper;
        struct MeshStamper;
        struct GameTimeInMs;
        struct GameProfile;
        struct GameSoftCollisionData;
        struct GameSnapData;
        struct GameSlopeData;
        struct GameShamanVisionData;
        struct GameReviveData;
        struct GameRespawnData;
        struct GamePropelData;
        struct GameParryData;
        struct GamePadSpeedBehaviorData;
        struct GamePadNavigationData;
        struct GameLODData;
        struct GameInfoDB;
        struct GameImmersionData;
        struct GameFlyData_FlyUp;
        struct GameFlyData_FlyDown;
        struct GameFlyData_Flap;
        struct GameFlyData_Dive;
        struct GameFlyData_Centrifugal;
        struct GameFlyData;
        struct GameFluidData_HeightThreshold;
        struct GameFluidData;
        struct GameFeetCatchUpData;
        struct GameEdgeData;
        struct GameDeathData;
        struct GameClockManager_TimeOfDay;
        struct GameClockManager_GameDate;
        struct GameClockManager;
        struct GameBiteData;
        struct GameBeamSnapData;
        struct GPEType; // enum
        enum class GPETypeEnum
        {
            BendTree,
            Geyser,
            PossessFlocking,
            Bridge,
            GPEType_COUNT,
        };
        struct FurProperties;
        struct FreezeData;
        struct ForceMultiplier;
        struct ForceBlendInReachRequired;
        struct ForceBlendIn;
        struct FluidVolumeComponentGD_SimulationParameters;
        struct FluidVolumeComponentGD_HeightMapData;
        struct FluidVolumeComponentGD_FluidVolumeData;
        struct FluidType; // enum
        enum class FluidTypeEnum
        {
            water,
            lava,
            mud,
            FluidType_COUNT,
        };
        struct ImmersedBehaviorData;
        struct FluidData;
        struct FloatRange;
        struct SmallActorSpawnRuleData;
        struct SmallActorSpawnPointData;
        struct SoundOpportunitiesConfig;
        struct FadeDuration;
        struct FadeDelay;
        struct FactionSpecieRelationData;
        struct FactionRelationData;
        struct FactionData;
        struct FactionManager;
        struct EventMusic;
        struct MusicManager;
        struct EventCameraData;
        struct EntityStateStaffOwnedVertebras_Inputs;
        struct EntityStateSet;
        struct PlayerState;
        struct EntityStateMotionConstrained_Inputs;
        struct EntityStateManageChildEntityPool_Inputs;
        struct EntityStateIncapacitated_Inputs;
        struct EntityStateChargeMode_EntityStateChargeModeInputs;
        struct EntityLODData;
        struct EntityID;
        struct EnergyValue; // enum
        enum class EnergyValueEnum
        {
            corrupted_strong,
            corrupted,
            lush,
            lush_strong,
        };
        struct VegetationPCloudData;
        struct RegenData;
        struct EnergySideData;
        struct EnergySide; // enum
        enum class EnergySideEnum
        {
            none,
            lush,
            corrupted,
            EnergySide_COUNT,
        };
        struct ReviveEnergyComponentInput_EnergySide;
        struct EntityStateRevive_Inputs;
        struct EntityStateCreatureHatching_Inputs;
        struct EnergySideEvent;
        struct EnergyIntensity; // enum
        enum class EnergyIntensityEnum
        {
            normal,
            strong,
            COUNT,
        };
        struct RegenerationManager;
        struct EnergyPoolGD_EnergyArea;
        struct EndPosition;
        struct Enabled;
        struct EDITOR_Mesh;
        struct EDITOR_LODsItem;
        struct DisplaceNoiseListItem;
        struct DisableFluid;
        struct DeltaTimeFactor;
        struct DebugManager_PlayerState;
        struct DebugManager_ComponentID;
        struct DebugDisplayFlags;
        struct DebugManager;
        struct DamagesInstant;
        struct DamageGauge;
        struct CreatureTypeData;
        struct CreatureProfile__CreatureProfileFact;
        struct CreatureProfile;
        struct CreatureDangerousness;
        struct ConstrainedMoveContextInput;
        struct ConstrainedInputData;
        struct ConditionalRigidityAttribute_RigidityParameter;
        struct ConditionalRigidityAttribute_Attributes;
        struct ComponentInputBase;
        struct ComponentInputEmpty;
        struct ComponentInput;
        struct WallRunComponentInput;
        struct VelocityObstacleComponentInput;
        struct UnifiedPhysicsDataComponentInput;
        struct SpiritAnimalShrineComponentInput;
        struct SoundEmitterComponentInput;
        struct SoftCollisionComponentInput;
        struct SmoothScaleComponentInput;
        struct ScriptComponentInput;
        struct ReviveEnergyComponentInput;
        struct RespawnabilityComponentInput;
        struct RagdollComponentInput;
        struct PhysicsImpactMakerComponentInput;
        struct PhysicsComponentInput;
        struct PerceiverComponentInput;
        struct PerceivableComponentInput;
        struct OutfitWearerComponentInput;
        struct MountIKControllerComponentInput;
        struct LifeComponentInput;
        struct InteractorComponentInput;
        struct InteractableGPEComponentInput;
        struct GrasperComponentInput;
        struct GraspableComponentInput;
        struct FluidComponentInput;
        struct EnergySpoutComponentInput;
        struct CreatureAIComponentInput;
        struct CinematicComponentInput;
        struct ChargedJumpComponentInput;
        struct CharacterControllerComponentInput;
        struct BreakableComponentInput;
        struct BeamTargetComponentInput;
        struct AttackTriggerComponentInput;
        struct AttackComponentInput;
        struct AnimationTransformDriverComponentInput;
        struct ComponentGD;
        struct WildObject;
        struct WallRunGD;
        struct VoxelSimulationGD;
        struct VolumeConstraintGD;
        struct VisualGD;
        struct VelocityObstacleGD;
        struct UnifiedPhysicsDataGD;
        struct TriggerEventCameraGD;
        struct TransformGD;
        struct TestUnion;
        struct TestTagsList;
        struct TestSetOfObject;
        struct TestEntityRef;
        struct TestDefaultValues;
        struct TestCreature;
        struct TestArrays;
        struct TerrainSurfaceObject;
        struct TerrainGD;
        struct TeamGD;
        struct SystemicCreature;
        struct StreamingLocatorGD;
        struct StreamableUnitGD;
        struct StickToTerrain;
        struct StaticObjectGD;
        struct StaffVertebrasGD;
        struct SpiritAnimalsHolderGD;
        struct SpiritAnimalShrineGD;
        struct SpiritAnimalGD;
        struct SoundOpportunityComponentGD;
        struct SoundEmitterGD;
        struct SoundAreaGD;
        struct SoulRespawnOpportunityGD;
        struct SoftCollisionGD;
        struct SmoothScaleComponentGD;
        struct SideMapGateGD;
        struct ShapeshiftStatueGD;
        struct ShamanVisionGD;
        struct ShamanItemGD;
        struct SensorVoxelsGD;
        struct SensorControllerGD;
        struct SeedPatch;
        struct ScriptComponentGD;
        struct ReviveEnergyGD;
        struct RespawnabilityGD;
        struct RespawnPlaceGD;
        struct RegenerableVegetationGD;
        struct RegenSwitcherGD;
        struct RagdollGD;
        struct QuickCreatureSwitchGD;
        struct ProtoComponentGD;
        struct ProjectileShooterGD;
        struct PlayerComponentGD;
        struct PickableDistributorComponentGD;
        struct PickableComponentGD;
        struct PhysicsTriggerGD;
        struct PhysicsMeshProviderGD;
        struct PhysicsMeshDeformerGD;
        struct PhysicsImpactMakerGD;
        struct PhysicsGD;
        struct PhysicsDataGD;
        struct PerceiverGD;
        struct PerceivableGD;
        struct OutfitWearerGD;
        struct OutfitGD;
        struct NotVisibleInSubscene;
        struct NetworkNode;
        struct NetworkLink;
        struct NetGD;
        struct NavMeshActivatorGD;
        struct MultiThumbnail;
        struct MounterGD;
        struct MountableGD;
        struct MountIKControllerGD;
        struct MissionHolderGD;
        struct MeshNavigationInfosGD;
        struct Mesh;
        struct LifeComponentGD;
        struct LDPrimitive;
        struct ItemHolderGD;
        struct InventoryGD;
        struct InterestPointGD;
        struct InteractableGPEGD;
        struct InfoboardRegistererGD;
        struct IncapacitateComponentGD;
        struct HotspotsGD;
        struct HitTriggerGD;
        struct HeightObj;
        struct HeightMapComponentGD;
        struct HealthAreaGD;
        struct HealerGD;
        struct HealTriggerGD;
        struct HealPumpGD;
        struct GroundTypeSamplerGD;
        struct GrasperGD;
        struct GraspableGD;
        struct GameEffectSpawnerGD;
        struct FurComponentGD;
        struct FluidVolumeComponentGD;
        struct FluidViewGD;
        struct FluidGD;
        struct FluidFXEntitySpawnerGD;
        struct FireSensorGD;
        struct EventTriggerGD;
        struct EventHandlerGD;
        struct EnvStampGD;
        struct EnergySpoutGD;
        struct EnergySideSwitcherGD;
        struct EnergyPoolGD;
        struct EnergyNetworkListenerGD;
        struct EnergyDrainGD;
        struct EnergyCrookGD;
        struct DummyComponentGD;
        struct DiveAttackGD;
        struct DistanceTriggerGD;
        struct FightDistanceTriggerGD;
        struct DebugGridGD;
        struct CustomThumbnail;
        struct CreatureUIGD;
        struct ConstrainedMoveGD;
        struct ConnectorGD;
        struct ComponentWithProtoCodeGD;
        struct ClothAnimationGD;
        struct ChildEntityPoolComponentGD;
        struct CharacterPlatformGD;
        struct CameraDataGD;
        struct BreakableGD;
        struct BittenGD;
        struct AttackTriggerGD;
        struct AssemblyGD;
        struct AnimationTransformDriverGD;
        struct AnimationPlaylistGD;
        struct AnimationPhysicsChainConstraintsGD;
        struct AnimationModelGD;
        struct AnimationHitsConstraintsGD;
        struct Component; // Union
        struct Object_Components; // union_set
        struct GameEffect;
        struct WindTurbulenceEffect;
        struct ShakeEffect;
        struct RepulseEffect;
        struct RegenEffect;
        struct FollowerCallEffect;
        struct FluidEffect;
        struct CallForHelpEffect;
        struct BeamEffect;
        struct BeamDetectionEffect;
        struct Components; // union_set
        struct UIMessage;
        struct UIManager;
        struct SoundManager;
        struct OnlineDebugger_BandwidthWindow_BandwithLimit;
        struct OnlineDebugger_BandwidthWindow;
        struct LightComponentGD;
        struct GradientColor;
        struct EditorManager;
        struct BoidsGD;
        struct Collider;
        struct Codec;
        struct Zlib;
        struct Lz4Fast;
        struct ClimbEdgeData_LedgeData;
        struct ClimbEdgeData;
        struct ClassMemberRef;
        struct ComponentSignalRef;
        struct ComponentMethodRef;
        struct Connection;
        struct CinematicUpdateType; // enum
        enum class CinematicUpdateTypeEnum
        {
            none,
            Internal,
            Pesto,
            CinematicUpdateType_COUNT,
        };
        struct CinematicSlot;
        struct Sequence;
        struct CinematicGD;
        struct CineEvent;
        struct CineEventTrigger;
        struct CineEventTriggerPlaySound;
        struct CineEventTriggerPlaySequence;
        struct CineEventTriggerGameStateChange;
        struct CineEventTriggerEventHandlerPost;
        struct CineEventTriggerDisplayUIMessage;
        struct CineEventTest;
        struct CineEventTestIsCanceled;
        struct CineEventTestInput;
        struct CineEventTestEndCurrentSequence;
        struct CineEventTestCurrentGameState;
        struct CharacterControllerSlideData;
        struct CharacterControllerGroundNormalData;
        struct CharacterControllerClamberData;
        struct CarryMode; // enum
        enum class CarryModeEnum
        {
            carryno,
            carrylight,
            CarryMode_COUNT,
        };
        struct CapabilitiesAndTags;
        struct ZoneStamper;
        struct OffMeshLink;
        struct NavMeshStamperGD;
        struct CanTakeHit;
        struct CreatureComponentInput;
        struct CameraType; // enum
        enum class CameraTypeEnum
        {
            NONE,
            Death,
            Editor,
            Event,
            Free,
            ThirdPerson,
            ThirdPersonFollow,
            ThirdPersonAim,
            ThirdPersonClamber,
            MotionConstraint,
            OnSpline,
            OnBones,
            TopView,
            EntitySwap,
            SightConstraint,
            Locked,
            Pan,
            CameraType_COUNT,
        };
        struct CameraSetterGD;
        struct CameraSoundEvent;
        struct CameraShakeData;
        struct ExplosionEffect;
        struct CameraFreeData;
        struct CameraEditorData;
        struct CameraManager;
        struct BoneStartPoint;
        struct InteractorGD;
        struct BoneAnimation;
        struct BoidSpeedMaxData;
        struct BoidGoalMode; // enum
        enum class BoidGoalModeEnum
        {
            none,
            parent,
            home,
            BoidGoalMode_COUNT,
        };
        struct BlendShapeAnimation;
        struct AnimationIntermediateFormat;
        struct BiteData;
        struct BiomeSoundBank_sBiomeEnv;
        struct BiomeSoundBank_sBiomeSound;
        struct BiomeSoundBank_sBiomeSFX;
        struct BiomeSoundBank;
        struct BillboardRenderingType; // enum
        enum class BillboardRenderingTypeEnum
        {
            Cross,
            CameraFacingQuad,
            Mesh,
            BillboardRenderingType_COUNT,
        };
        struct BillboardRenderingSides; // enum
        enum class BillboardRenderingSidesEnum
        {
            SideA,
            SideB,
            BothSides,
            BillboardRenderingSides_COUNT,
        };
        struct BillboardRenderingAttribute; // enum
        enum class BillboardRenderingAttributeEnum
        {
            Horizontal,
            Vertical,
            Frontal,
            BillboardRenderingAttribute_COUNT,
        };
        struct BillboardCameraFacingQuadType; // enum
        enum class BillboardCameraFacingQuadTypeEnum
        {
            AroundAxis,
            AroundCenter,
            NotFacingCamera,
            BGELikeShaft,
            BillboardCameraFacingQuadType_COUNT,
        };
        struct BillboardRendererProperties;
        struct BillboardProperties;
        struct BehaviorTypedValue;
        struct BehaviorScriptData;
        struct CreatureAIGD;
        struct BeamStaffMode; // enum
        enum class BeamStaffModeEnum
        {
            Off,
            Searching,
            Creature,
            InteractingGPE,
            Item,
            PickUp,
            Hatching,
            SetRespawnPlaceAsCheckpoint,
            SetSavePoint,
            EnableSpiritShrine,
            Any,
            BeamStaffMode_COUNT,
        };
        struct BeamTargetGD;
        struct BaseParameters;
        struct Hit;
        struct AutoRotationType; // enum
        enum class AutoRotationTypeEnum
        {
            None_,
            _2D,
            _3D,
            AutoRotationType_COUNT,
        };
        struct AttitudeMode; // enum
        enum class AttitudeModeEnum
        {
            normal,
            injured,
            dead,
            aggressive,
            groggy,
            bitten,
            charge,
            AttitudeMode_COUNT,
        };
        struct AttackType; // enum
        enum class AttackTypeEnum
        {
            Normal,
            Backward,
            Charged,
            JumpOnto,
            Bite,
            Stomp,
            Dive,
            AttackType_COUNT,
        };
        struct AttackPositionRetimingData_SpecieRetimingCoeff;
        struct AttackPositionRetimingData;
        struct AttackPhysicsForceData;
        struct AttackImpactData;
        struct AttackData;
        struct AttackDamageData;
        struct GameAttackData;
        struct GameManager;
        struct AreaNavigation;
        struct PathFinderGD;
        struct Archetype; // enum
        enum class ArchetypeEnum
        {
            flying,
            swimming,
            quadripede,
            bipede,
            item,
            structure,
            activator,
            Archetype_COUNT,
        };
        struct AnimationTreeConstraintsGD_GrowData;
        struct AnimationTreeConstraintsGD_ForceData;
        struct AnimationTreeConstraintsGD_BendData;
        struct AnimationTreeConstraintsGD;
        struct AnimationSpace; // enum
        enum class AnimationSpaceEnum
        {
            bonespace,
            rootspace,
        };
        struct AnimationModelComponentInput_StyleMode;
        struct AnimationModelComponentInput_SpeedMode;
        struct AnimationModelComponentInput_LocomotionMode;
        struct AnimationModelComponentInput_CarryMode;
        struct AnimationModelComponentInput_AttitudeMode;
        struct AnimationMode; // enum
        enum class AnimationModeEnum
        {
            absolute,
            additive,
        };
        struct AnimationGenericConstraintsGD;
        struct AnimationLegsConstraints_SlopeOffsetInfo;
        struct AnimationLegsConstraintsGD;
        struct AnimationEventsGeneratorGD_TrackedBone;
        struct AnimationEventsGeneratorGD;
        struct AnimTagTimelineTransition; // enum
        enum class AnimTagTimelineTransitionEnum
        {
            beginning,
            copy,
            reverse,
            AnimTagTimelineTransition_COUNT,
        };
        struct AnimTag; // enum
        enum class AnimTagEnum
        {
            none,
            apex,
            forward,
            forwardright,
            right,
            backwardright,
            backward,
            backwardleft,
            left,
            forwardleft,
            regular,
            alignedregular,
            goofy,
            alignedgoofy,
            top,
            bottom,
            up,
            upforward,
            upward,
            down,
            downforward,
            downward,
            in_,
            out,
            horizontal,
            vertical,
            count,
        };
        struct MoveCapacityData_AnimTagTransitionGroup;
        struct MoveCapacityData_AnimTagTimelineTransitionItem;
        struct MoveCapacityData_AnimTagTimelineTransitionTable;
        struct MoveCapacityData;
        struct DirectionSync;
        struct DirectionSyncData;
        struct AnimationManager;
        struct AnimationModelComponentInput_AnimTag;
        struct AnimMirroringSpecData;
        struct AnimMirroringData;
        struct AnimationControllerGD;
        struct AnimAdditionalTag; // enum
        enum class AnimAdditionalTagEnum
        {
            none,
            small,
            light,
            medium,
            big,
            enormous,
            menace,
            variant1,
            variant2,
            variant3,
            variant4,
            variant5,
            variant6,
            variant7,
            variant8,
            variant9,
            variant10,
            variant11,
            variant12,
            variant13,
            variant14,
            variant15,
            variant16,
            variant17,
            variant18,
            variant19,
            variant20,
            ejected,
            ejectedfar,
            plunge,
            lateralplunge,
            aerialplunge,
            waterfall,
            bounce,
            AnimAdditionalTag_COUNT,
        };
        struct AttackChargedData;
        struct StrongAttackData;
        struct strongAttackData;
        struct AnalyticsManager_MongoDBConnection;
        struct AnalyticsManager;
        struct AirControlData;
        struct CharacterControllerFallData;
        struct CharacterControllerGD;
        struct AerialAttackData;
        struct AttackComponentGD_AerialAttackData;
        struct AttackComponentGD;
        struct AdditionnalTag;
        struct ActorStates; // union_set
        struct Object;
        struct UnitTestComponent;
        struct Entity;
        struct SubScene;
        struct Scene;
        struct ActorStateTeleport_Inputs;
        struct ActorStateTeleportWhileMovingInputs;
        struct ActorStateFlockingChangingParams_Params;
        struct ActorStateArbiterDecision; // enum
        enum class ActorStateArbiterDecisionEnum
        {
            CancelCurrent,
            Coexist,
            RejectNew,
            Specific,
            Wait,
            ArbiterDecision_COUNT,
        };
        struct ActorState;
        struct EntityStateWaterfallEndJump;
        struct EntityStateWallRunJump;
        struct EntityStateWallRunDrop;
        struct EntityStateWallRun;
        struct EntityStateWaitToJumpAgain;
        struct EntityStateUseAsActiveCheckpoint;
        struct EntityStateUndergroundCavity;
        struct EntityStateTryUnmount;
        struct EntityStateTriggerBeamTargetEvent;
        struct EntityStateTreeTurretTargeting;
        struct EntityStateTreeSwitchTransition;
        struct EntityStateTreeMetamorphosisUsingScale;
        struct EntityStateTreeMetamorphosis;
        struct EntityStateTooDeep;
        struct EntityStateTakeDamageOnMount;
        struct EntityStateStrongAttackJumped;
        struct EntityStateStrongAttackCharging;
        struct EntityStateStrongAttackCharged;
        struct EntityStateStrongAttack;
        struct EntityStateStrafeDodge;
        struct EntityStateStickedLand;
        struct EntityStateStalactiteReadyToFall;
        struct EntityStateStalactiteFallen;
        struct EntityStateStaffVertebrasAutoRefill;
        struct EntityStateStaffOwnedVertebras;
        struct EntityStateSpiritShrineEnabled;
        struct EntityStateSpiritShrineDisabled;
        struct EntityStateSpiritAttacked;
        struct EntityStateSpiritAttack;
        struct EntityStateSpiritAnimalSoulForm;
        struct EntityStateSpiritAnimalFleshForm;
        struct EntityStateSpiritAnimalBeingCalled;
        struct EntityStateSpeedLimiter;
        struct EntityStateSoftCollide;
        struct EntityStateSnappedToHatchingTarget;
        struct EntityStateSlowMotion;
        struct EntityStateShootHatchingEnergy;
        struct EntityStateSetSavePoint;
        struct EntityStateSavePointActivated;
        struct EntityStateRevive;
        struct EntityStateRespawnability;
        struct EntityStateRespawn;
        struct EntityStateReserveMountSlots;
        struct EntityStateRegainCapacity;
        struct EntityStateRecoverLand;
        struct EntityStateReadyToGiveOrder;
        struct EntityStateRaise;
        struct EntityStatePrepareToHoldingOnToNavigationMesh;
        struct EntityStatePlungeLand;
        struct EntityStatePlayer;
        struct EntityStatePickableDistributor;
        struct EntityStatePhysicsMove;
        struct EntityStatePhysicsIdle;
        struct EntityStateParryCooldown;
        struct EntityStateParry;
        struct EntityStateParried;
        struct EntityStateOrientedDrift;
        struct EntityStateOrderingAttack;
        struct EntityStateMoveOnOffMeshLink;
        struct EntityStateMotionConstrainedLand;
        struct EntityStateMotionConstrained;
        struct EntityStateMineScaling;
        struct EntityStateMineRespawning;
        struct EntityStateMeditateToInteract;
        struct EntityStateMask;
        struct EntityStateManageChildEntityPool;
        struct EntityStateLateralLand;
        struct EntityStateLateralDodge;
        struct EntityStateJustStarted;
        struct EntityStateJumpHeightMultiplier;
        struct EntityStateInteractedGPE;
        struct EntityStateInjured;
        struct EntityStateInconvertible;
        struct EntityStateIncapacitated;
        struct EntityStateInVertebraeArea;
        struct EntityStateImmersedJump;
        struct EntityStateHoldingStaffVertebras;
        struct EntityStateHitWall;
        struct EntityStateHintNone;
        struct EntityStateHintLight;
        struct EntityStateHintFull;
        struct EntityStateHideOut;
        struct EntityStateHideIn;
        struct EntityStateHide;
        struct EntityStateGroundedJump;
        struct EntityStateGrasp;
        struct EntityStateGrabbedOut;
        struct EntityStateGrabbedIn;
        struct EntityStateGrabbed;
        struct EntityStateGrabOut;
        struct EntityStateGrabIn;
        struct EntityStateGrabAttack;
        struct EntityStateGrab;
        struct EntityStateForceCanBeTargeted;
        struct EntityStateFastRun;
        struct EntityStateFallSafe;
        struct EntityStateFallInjured;
        struct EntityStateFallDying;
        struct EntityStateFall;
        struct EntityStateFailingOrder;
        struct EntityStateExtraLife;
        struct EntityStateEnergySpoutState;
        struct EntityStateEnergySide;
        struct EntityStateEnergyRootHatching;
        struct EntityStateEnergyRootAbortHatching;
        struct EntityStateEjectedLand;
        struct EntityStateDodgeCooldown;
        struct EntityStateDisplayHatchingCost;
        struct EntityStateDisguise;
        struct EntityStateDisabledVertebrae;
        struct EntityStateDisablePerceptionRequest;
        struct EntityStateDeathLand;
        struct EntityStateDamageLand;
        struct EntityStateCreatureProfile;
        struct EntityStateCreatureHatching;
        struct EntityStateControlGPE;
        struct EntityStateConstrainedMove;
        struct EntityStateConstrainedInput;
        struct EntityStateCombat;
        struct EntityStateCollectVertebrae;
        struct EntityStateClimbWaterfallImpulse;
        struct EntityStateClimbWaterfall;
        struct EntityStateClassicLand;
        struct EntityStateClassicDodge;
        struct EntityStateCinematicReady;
        struct EntityStateCinematicCompleted;
        struct EntityStateChargingJump;
        struct EntityStateChargedJump;
        struct EntityStateChargeMode;
        struct EntityStateCanNotBePerceived;
        struct EntityStateCallAndMountSpiritAnimal;
        struct EntityStateBridgeBeingControlled;
        struct EntityStateBridgeAttracted;
        struct EntityStateBridgeAttached;
        struct EntityStateBreakableEntire;
        struct EntityStateBreakableBroken;
        struct EntityStateBreakableBreaking;
        struct EntityStateBounceLand;
        struct EntityStateBounce;
        struct EntityStateBoidsHomePos;
        struct EntityStateBittenDefense;
        struct EntityStateBitten;
        struct EntityStateBiteOut;
        struct EntityStateBiteIn;
        struct EntityStateBiteAttack;
        struct EntityStateBite;
        struct EntityStateBeingOnSpike;
        struct EntityStateBeingOnSlope;
        struct EntityStateBeingLinked;
        struct EntityStateBeingInReeds;
        struct EntityStateBeingBlockedByVine;
        struct EntityStateBackwardLand;
        struct EntityStateBackwardDodge;
        struct EntityStateAttitudeGroggy;
        struct EntityStateAttackDive;
        struct EntityStateAskStaffGuide;
        struct EntityStateApplyExtraLife;
        struct EntityStateAirControl;
        struct EntityStateAimAt;
        struct EntityStateAerialJump;
        struct EntityStateAboutToBeHatched;
        struct ActorStateTryUpgradeShamanStaff;
        struct ActorStateTryEquipShamanStaff;
        struct ActorStateTeleportWhileMoving;
        struct ActorStateTeleportToTarget;
        struct ActorStateTeleport;
        struct ActorStateTaunting;
        struct ActorStateStopAttitudeAggressive;
        struct ActorStateSpeedMultiplier;
        struct ActorStateSoulWaitingToRespawn;
        struct ActorStateSoulRespawn;
        struct ActorStateSlope;
        struct ActorStateSleeping;
        struct ActorStateSkeletonPartPickUpState;
        struct ActorStateSkeletonPartPickUpRequest;
        struct ActorStateSink;
        struct ActorStateShootingFlow;
        struct ActorStateShapeshift;
        struct ActorStateShamanItemPartState;
        struct ActorStateShamanItemLiving;
        struct ActorStateSendMission;
        struct ActorStateScreaming;
        struct ActorStateRequestingWaiting;
        struct ActorStateRequestingHealing;
        struct ActorStateRecover;
        struct ActorStateReactingLava;
        struct ActorStatePossessGPE;
        struct ActorStatePossessFlocking;
        struct ActorStateNavigationMesh;
        struct ActorStateMovingSwim;
        struct ActorStateMovingStandUp;
        struct ActorStateMovingRide;
        struct ActorStateMovingProne;
        struct ActorStateMovingFly;
        struct ActorStateMovingFall;
        struct ActorStateMovingDive;
        struct ActorStateMovingClamber;
        struct ActorStateMoveAlongBezier;
        struct ActorStateMeetingLava;
        struct ActorStateLosingOxygen;
        struct ActorStateLeavingLava;
        struct ActorStateInvincible;
        struct ActorStateIKConstraint;
        struct ActorStateHoldingItem;
        struct ActorStateHitEnergyWall;
        struct ActorStateHeld;
        struct ActorStateHasNoBody;
        struct ActorStateForceAgainstSlope;
        struct ActorStateFluidSlowDown;
        struct ActorStateFlockingRigidbodyBeingActive;
        struct ActorStateFlockingLiving;
        struct ActorStateFlockingIndividualSpawning;
        struct ActorStateFlockingChangingParams;
        struct ActorStateFlockingAttackFlocking;
        struct ActorStateExitingFly;
        struct ActorStateEnergyShooting;
        struct ActorStateDucking;
        struct ActorStateDodge3D;
        struct ActorStateDisabledOut;
        struct ActorStateDisabledIn;
        struct ActorStateDisabled;
        struct ActorStateDead;
        struct ActorStateCreature;
        struct ActorStateConvertWithFlow;
        struct ActorStateChargeSpendLife;
        struct ActorStateChangeEnergySide;
        struct ActorStateCatapultedLand;
        struct ActorStateCatapulted;
        struct ActorStateCallingFollower;
        struct ActorStateBuried;
        struct ActorStateBittenShaked;
        struct ActorStateBittenRegenerated;
        struct ActorStateBiteJumpOut;
        struct ActorStateBiteEntityLiving;
        struct ActorStateBendingTree;
        struct ActorStateBendingConstraint;
        struct ActorStateBeingRided;
        struct ActorStateBeingOnPossessedGPE;
        struct ActorStateBeingOnMount;
        struct ActorStateBeingOnGroundFromImmersed;
        struct ActorStateBeingOnGround;
        struct ActorStateBeingInAir;
        struct ActorStateBeingImmersedFromOnGround;
        struct ActorStateBeingImmersedFromInAir;
        struct ActorStateBeingImmersed;
        struct ActorStateBehaviorState;
        struct ActorStateAttitudeAggressive;
        struct ActorStateApplyHit;
        struct ActorStateAnsweringCall;
        struct ActorStateAlive;
        struct ActorStateAimCharge;
        struct ActionWait;
        struct ActionUnmount;
        struct ActionTriggerStandUp;
        struct ActionTriggerShamanVisionExit;
        struct ActionTriggerCrouch;
        struct ActionTopView;
        struct ActionTalk;
        struct ActionTakeOff;
        struct ActionStrafeTurn;
        struct ActionStrafe;
        struct ActionStop;
        struct ActionStartRun;
        struct ActionSlide;
        struct ActionShootBeam;
        struct ActionShamanVision;
        struct ActionScaleRider;
        struct ActionRise;
        struct ActionRiderStance;
        struct ActionReviveMaskEffect;
        struct ActionRagdoll;
        struct ActionQuadStandUpStateOut;
        struct ActionQuadStandUpStateIn;
        struct ActionQuadStandUpState;
        struct ActionPushed;
        struct ActionPropelled;
        struct ActionPlayAnim;
        struct ActionPatinate;
        struct ActionPathfindAndMove;
        struct ActionOutfitSpecialState;
        struct ActionOrientMount;
        struct ActionMoveTo;
        struct ActionMoveProjectile;
        struct ActionMove;
        struct ActionMountReception;
        struct ActionLookAt;
        struct ActionLandingMount;
        struct ActionLand;
        struct ActionJumpOnto;
        struct ActionJump;
        struct ActionIncarnated;
        struct ActionIncarnate;
        struct ActionIdle;
        struct ActionHit;
        struct ActionFlyUp;
        struct ActionFlyFlap;
        struct ActionFlyDown;
        struct ActionFlyDive;
        struct ActionFlyCrash;
        struct ActionDrop;
        struct ActionDrift;
        struct ActionDrawWeaponState;
        struct ActionDrawWeapon;
        struct ActionDrawAttention;
        struct ActionDodge;
        struct ActionDisableAndFollow;
        struct ActionDigUpTreasure;
        struct ActionDecelerate;
        struct ActionCollapse;
        struct ActionClimbEdge;
        struct ActionClamberRise;
        struct ActionClamberMove;
        struct ActionClamberLand;
        struct ActionClamberJumpOff;
        struct ActionClamberJump;
        struct ActionClamberDropOff;
        struct ActionCinematic;
        struct ActionChosen;
        struct ActionChangeRidingSpot;
        struct ActionChangeMount;
        struct ActionCentrifugal;
        struct ActionCallForHelp;
        struct ActionBrake;
        struct ActionBittenState;
        struct ActionBiteOut;
        struct ActionBiteIn;
        struct ActionBite;
        struct ActionAttackStomp;
        struct ActionAttackJumpOnto;
        struct ActorCategory; // enum
        enum class ActorCategoryEnum
        {
            CATEGORY_All,
            CATEGORY_Action,
            CATEGORY_AnimationLegConstraint,
            CATEGORY_ActionAttack,
            CATEGORY_Attitude,
            CATEGORY_Context,
            CATEGORY_Control,
            CATEGORY_ActionCosmetic,
            CATEGORY_ActionDamage,
            CATEGORY_ActionDefault,
            CATEGORY_ActionDie,
            CATEGORY_Environment,
            CATEGORY_Fall,
            CATEGORY_ActionGrab,
            CATEGORY_ActionGrasp,
            CATEGORY_ActionBite,
            CATEGORY_Hint,
            CATEGORY_LookAt,
            CATEGORY_ActionJump,
            CATEGORY_ActionLand,
            CATEGORY_Life,
            CATEGORY_Locomotion,
            CATEGORY_ActionMove,
            CATEGORY_Persistent,
            CATEGORY_Purgatory,
            CATEGORY_ActionSlide,
            CATEGORY_ActionStop,
            CATEGORY_ActionStrafe,
            CATEGORY_Transition,
            CATEGORY_Trigger,
            CATEGORY_ActionWingFlutter,
            CATEGORY_Health,
            CATEGORY_HealthAlive,
            CATEGORY_HealthDead,
            CATEGORY_KnockedOut,
            CATEGORY_EntitySwitchTransition,
            CATEGORY_EnergyRoot,
            CATEGORY_EnergySpout,
            CATEGORY_Energy,
            CATEGORY_GPE,
            CATEGORY_SpiritAnimal,
            CATEGORY_Hatching,
            CATEGORY_Respawn,
            CATEGORY_Save,
            CATEGORY_Cinematic,
            CATEGORY_Loading,
            CATEGORY_NoCategory,
        };
        struct ConditionalRigidityAttribute_Conditions;
        struct ConditionalRigidityAttribute;
        struct AnimationTailConstraintsGD;
        struct ActorAbility; // enum
        enum class ActorAbilityEnum
        {
            landing,
            crouch,
            fly,
            ride,
            dive,
            stinky,
            ActorAbility_COUNT,
        };
        struct ActionTurn_Inputs;
        struct ActionTurn;
        struct ActionStateArbiter_StateStateDecision;
        struct ActionStateArbiter_StateStateDecisionPass;
        struct ActionStateArbiter_StateOrderPass;
        struct ActionStateArbiter_StateCategoryDecision;
        struct ActionStateArbiter_StateCategoryDecisionPass;
        struct ActionStateArbiter_StateAllDecisionPass;
        struct ActionStateArbiter_CategoryStateDecision;
        struct ActionStateArbiter_CategoryStateDecisionPass;
        struct ActionStateArbiter_CategoryOrderPass;
        struct ActionStateArbiter_CategoryCategoryDecision;
        struct ActionStateArbiter_PairDecisionPass;
        struct ActionStateArbiter_CategoryCategoryDecisionPass;
        struct ActionStateArbiter_CategoryAllDecisionPass;
        struct ActionStateArbiter_AllStateDecisionPass;
        struct ActionStateArbiter_AllCategoryDecisionPass;
        struct ActionStateArbiter_AllAllDecisionPass;
        struct ActionStateArbiter;
        struct ActionStackFilter;
        struct ActionStackFilterRide;
        struct ActionShakeOffInputs;
        struct ActionShakeOff;
        struct ActionMode; // enum
        enum class ActionModeEnum
        {
            noaction,
            attack,
            attackjump,
            attackcharged,
            attackpush,
            attackjumponto,
            bite,
            biteattack,
            stun,
            collapse,
            throw_,
            respawn,
            incarnate,
            incarnated,
            hit,
            hitwall,
            hitjump,
            landing,
            landingfail,
            landingcatapult,
            landingrecover,
            landingdamage,
            landingdying,
            landinggrip,
            landingtree,
            jumpmount,
            fallin,
            landingmount,
            soul,
            mountreception,
            changeridingspot,
            goingtomountstate,
            mount,
            unmount,
            flap,
            flystop,
            flapfast,
            turn,
            turnfromspeed0,
            turnfromspeed1,
            turnfromspeed2,
            turnfromspeed3,
            jump,
            jumpoff,
            doublejump,
            jumpcharging,
            jumpcharged,
            longjump,
            bounce,
            regenerate,
            drift,
            wait,
            chosen,
            revive,
            revivemaskeffect,
            shakeoff,
            convert,
            drop,
            landingdrop,
            dropoff,
            start,
            reachspeed3,
            strafe,
            strafeturn,
            slide,
            slope,
            forceagainstslope,
            patinate,
            climb,
            call,
            callanswer,
            scream,
            grab,
            grabattack,
            grabbed,
            grabbedin,
            grabbedout,
            taunt,
            sink,
            shoot,
            reload,
            stop,
            rise,
            centrifugal,
            climbedgehead,
            climbedgehips,
            climbedgefoot,
            jumpedge,
            catapult,
            sleep,
            head,
            chest,
            ascendpurgatory,
            purgatory,
            stung,
            riderstance,
            drawweapon,
            levitate,
            levitatemove,
            aim,
            wallrun,
            wallrunjump,
            wallrundrop,
            strongattackcharging,
            strongattackcharged,
            strongattack,
            aimcharge,
            aimcharged,
            aimflow,
            shootcharged,
            shootchargedlight,
            shootchargedmedium,
            shootchargedbig,
            emptyshoot,
            attackstomp,
            requestwait,
            requestheal,
            quadstandupin,
            standupin,
            diguptreasure,
            swimin,
            swimlanding,
            duck,
            recover,
            happy,
            underground,
            spawn,
            unspawn,
            dance,
            askstaffguide,
            hintfull,
            hintlight,
            hintnone,
            hatching,
            dying,
            followerorder,
            ultimateattack,
            ultimateattacked,
            parry,
            failingorder,
            settingrespawnplace,
            romlookat,
            emoteshame,
            emotecrazy,
            emotetaunt,
            emoteproud,
            emotemenace,
            emotehello,
            emoteimpatience,
            ActionMode_COUNT,
        };
        struct InGameCameraParams;
        struct InGameCameraObservationParams;
        struct InGameCameraData;
        struct ChargedJumpAnimation;
        struct ChargedJumpGD;
        struct BoidParams;
        struct AnimationModelComponentInput_ActionMode;
        struct AnimationModelComponentInput;
        struct AnimTags;
        struct ActionEmote;
        struct ActionAimProjectile;
        struct ActionAttack_AttackOutputs;
        struct ActionAttack;
        struct AbilityData;
        struct ActorGD;
        struct ProjectileGD;
        struct CreatureGD;
        struct ClothGD;
        struct AaMode; // enum
        enum class AaModeEnum
        {
            Fxaa,
            Smaa,
            None_,
            AaMode_Count,
        };
        struct RenderManager_RenderConfig;
        struct RenderManager;
        struct AIOrderType; // enum
        enum class AIOrderTypeEnum
        {
            AIOrderType_None,
            follow,
            attack,
            stay,
            heal,
            transhumance,
            changemode,
            readytoattack,
            AIOrderType_COUNT,
        };
        struct AIContextSlot;
        struct AIContextGD;
        struct AIAggroInitAndDecValue;
        struct AIKnowledgeManager;
        struct ActorStateStack;
        struct AnalyticsFPS;
        struct AnalyticsInGameViewer;
        struct AnalyticsObserverInterface;
        struct AnimationGDData;
        struct AnimationTreeConstraintsGD_BendSoundEventData;
        struct AudioEventData;
        struct BehaviorPesto;
        struct CheatCodeReplication;
        struct ClassRef;
        struct CloudsGenerator;
        struct ConditionalRigidityAttribute_ActorStateName;
        struct ContactActor;
        struct Edge;
        struct EntityArchive_MetaData;
        struct EntityGD;
        struct EntityGDRef;
        struct FadeEffect;
        struct GRC;
        struct GVoxelVolumeCollection;
        struct IMatchMakerApi;
        struct IOnlineApi;
        struct InputController;
        struct MeshNavigationBehavior;
        struct MeshShape;
        struct NavMeshArea; // enum
        enum class NavMeshAreaEnum
        {
            Hole,
            Ground,
            ShallowWater,
            DeepWater,
            Beach,
            Special,
            NavMeshArea_COUNT,
        };
        struct NetRoot;
        struct OutfitFadeParameter;
        struct OwnershipModule;
        struct PhysicsNetworker;
        struct PlayerManagerDebugger;
        struct PointCloud;
        struct RagdollSetupData;
        struct ReplicaReplay;
        struct SceneNode;
        struct SceneNodeGraph;
        struct Sensor;
        struct SmallActorSpawnRuleExchangeData;
        struct StateGauge;
        struct Team_PlayerData;
        struct TextureGroundTypeMap;
        struct TextureHeightMap;
        struct Timer;
        struct TravelParams;
        struct VegetationVisibilityDistanceCategory;
        struct VisualResourceBuildData;
        struct ZoneCylinderShape;
        struct ZoneMeshShape;
        struct sBiomeSFXResult;
        struct sBiomeSoundResult;
        struct sJointMotorDesc;
        using Vector4 = PrimArray<Ent::Gen::Float>;
        using Vector3i = PrimArray<Ent::Gen::Int>;
        using Vector3 = PrimArray<Ent::Gen::Float>;
        using Vector2 = PrimArray<Ent::Gen::Float>;
        using ThumbPath = Ent::Gen::String;
        using Quat = PrimArray<Ent::Gen::Float>;
        using Matrix44 = PrimArray<Ent::Gen::Float>;
        using Matrix43 = PrimArray<Ent::Gen::Float>;
        using Matrix33 = PrimArray<Ent::Gen::Float>;
        using Color = PrimArray<Ent::Gen::Float>;
        using Matrix22 = PrimArray<Ent::Gen::Float>;
        using Matrix32 = PrimArray<Ent::Gen::Float>;
        using StringHash = Ent::Gen::String;

        struct variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_ : Base // Union
        {
            variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "eastl::variant<eastl::string,bool,s32,float,Vector2,Vector3,Position,eastl::vector<eastl::string>,eastl::vector<bool>,eastl::vector<s32>,eastl::vector<float>,eastl::vector<Vector2>,eastl::vector<Vector3>,eastl::vector<Position>>";
            char const* getType() const;
            std::optional<Ent::Gen::String> string() const;
            Ent::Gen::String setstring() const;
            std::optional<Ent::Gen::Bool> bool_() const;
            Ent::Gen::Bool setbool_() const;
            std::optional<Ent::Gen::Int> s32() const;
            Ent::Gen::Int sets32() const;
            std::optional<Ent::Gen::Float> float_() const;
            Ent::Gen::Float setfloat_() const;
            std::optional<Ent::Gen::Vector2> Vector2() const;
            Ent::Gen::Vector2 setVector2() const;
            std::optional<Ent::Gen::Vector3> Vector3() const;
            Ent::Gen::Vector3 setVector3() const;
            std::optional<Ent::Gen::Position> Position() const;
            Ent::Gen::Position setPosition() const;
            std::optional<PrimArray<Ent::Gen::String>> stringVec() const;
            PrimArray<Ent::Gen::String> setstringVec() const;
            std::optional<PrimArray<Ent::Gen::Bool>> boolVec() const;
            PrimArray<Ent::Gen::Bool> setboolVec() const;
            std::optional<PrimArray<Ent::Gen::Int>> s32Vec() const;
            PrimArray<Ent::Gen::Int> sets32Vec() const;
            std::optional<PrimArray<Ent::Gen::Float>> floatVec() const;
            PrimArray<Ent::Gen::Float> setfloatVec() const;
            std::optional<Array<Ent::Gen::Vector2>> Vector2Vec() const;
            Array<Ent::Gen::Vector2> setVector2Vec() const;
            std::optional<Array<Ent::Gen::Vector3>> Vector3Vec() const;
            Array<Ent::Gen::Vector3> setVector3Vec() const;
            std::optional<Array<Ent::Gen::Position>> PositionVec() const;
            Array<Ent::Gen::Position> setPositionVec() const;
        };

        struct variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_ : Base // Union
        {
            variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "eastl::variant<eastl::string,bool,s32,float,EntityRef,Vector2,Vector3,Position,eastl::vector<eastl::string>,eastl::vector<bool>,eastl::vector<s32>,eastl::vector<float>,eastl::vector<EntityRef>,eastl::vector<Vector2>,eastl::vector<Vector3>,eastl::vector<Position>>";
            char const* getType() const;
            std::optional<Ent::Gen::String> string() const;
            Ent::Gen::String setstring() const;
            std::optional<Ent::Gen::Bool> bool_() const;
            Ent::Gen::Bool setbool_() const;
            std::optional<Ent::Gen::Int> s32() const;
            Ent::Gen::Int sets32() const;
            std::optional<Ent::Gen::Float> float_() const;
            Ent::Gen::Float setfloat_() const;
            std::optional<Ent::Gen::EntityRef> EntityRef() const;
            Ent::Gen::EntityRef setEntityRef() const;
            std::optional<Ent::Gen::Vector2> Vector2() const;
            Ent::Gen::Vector2 setVector2() const;
            std::optional<Ent::Gen::Vector3> Vector3() const;
            Ent::Gen::Vector3 setVector3() const;
            std::optional<Ent::Gen::Position> Position() const;
            Ent::Gen::Position setPosition() const;
            std::optional<PrimArray<Ent::Gen::String>> stringVec() const;
            PrimArray<Ent::Gen::String> setstringVec() const;
            std::optional<PrimArray<Ent::Gen::Bool>> boolVec() const;
            PrimArray<Ent::Gen::Bool> setboolVec() const;
            std::optional<PrimArray<Ent::Gen::Int>> s32Vec() const;
            PrimArray<Ent::Gen::Int> sets32Vec() const;
            std::optional<PrimArray<Ent::Gen::Float>> floatVec() const;
            PrimArray<Ent::Gen::Float> setfloatVec() const;
            std::optional<PrimArray<Ent::Gen::EntityRef>> EntityRefVec() const;
            PrimArray<Ent::Gen::EntityRef> setEntityRefVec() const;
            std::optional<Array<Ent::Gen::Vector2>> Vector2Vec() const;
            Array<Ent::Gen::Vector2> setVector2Vec() const;
            std::optional<Array<Ent::Gen::Vector3>> Vector3Vec() const;
            Array<Ent::Gen::Vector3> setVector3Vec() const;
            std::optional<Array<Ent::Gen::Position>> PositionVec() const;
            Array<Ent::Gen::Position> setPositionVec() const;
        };

        struct variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ : Base // Union
        {
            variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "eastl::variant<s32,float,bool,eastl::string,Vector2,Vector3,Quat,Position>";
            char const* getType() const;
            std::optional<Ent::Gen::Int> s32() const;
            Ent::Gen::Int sets32() const;
            std::optional<Ent::Gen::Float> float_() const;
            Ent::Gen::Float setfloat_() const;
            std::optional<Ent::Gen::Bool> bool_() const;
            Ent::Gen::Bool setbool_() const;
            std::optional<Ent::Gen::String> string() const;
            Ent::Gen::String setstring() const;
            std::optional<Ent::Gen::Vector2> Vector2() const;
            Ent::Gen::Vector2 setVector2() const;
            std::optional<Ent::Gen::Vector3> Vector3() const;
            Ent::Gen::Vector3 setVector3() const;
            std::optional<Ent::Gen::Quat> Quat() const;
            Ent::Gen::Quat setQuat() const;
            std::optional<Ent::Gen::Position> Position() const;
            Ent::Gen::Position setPosition() const;
        };

        struct variant_ZoneCylinderShape_ZoneMeshShape_ : Base // Union
        {
            variant_ZoneCylinderShape_ZoneMeshShape_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "eastl::variant<ZoneCylinderShape,ZoneMeshShape>";
            char const* getType() const;
            std::optional<Ent::Gen::ZoneCylinderShape> ZoneCylinderShape() const;
            Ent::Gen::ZoneCylinderShape setZoneCylinderShape() const;
            std::optional<Ent::Gen::ZoneMeshShape> ZoneMeshShape() const;
            Ent::Gen::ZoneMeshShape setZoneMeshShape() const;
        };

        struct variant_Pasta_Easing_Curve_string_ : Base // Union
        {
            variant_Pasta_Easing_Curve_string_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "eastl::variant<Pasta::Easing::Curve,eastl::string>";
            char const* getType() const;
            std::optional<Ent::Gen::Pasta_Easing_Curve> Pasta_Easing_Curve() const;
            Ent::Gen::Pasta_Easing_Curve setPasta_Easing_Curve() const;
            std::optional<Ent::Gen::String> string() const;
            Ent::Gen::String setstring() const;
        };

        struct variant_MeshShape_ShapeSphere_ShapeBox_ : Base // Union
        {
            variant_MeshShape_ShapeSphere_ShapeBox_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "eastl::variant<MeshShape,ShapeSphere,ShapeBox>";
            char const* getType() const;
            std::optional<Ent::Gen::MeshShape> MeshShape() const;
            Ent::Gen::MeshShape setMeshShape() const;
            std::optional<Ent::Gen::ShapeSphere> ShapeSphere() const;
            Ent::Gen::ShapeSphere setShapeSphere() const;
            std::optional<Ent::Gen::ShapeBox> ShapeBox() const;
            Ent::Gen::ShapeBox setShapeBox() const;
        };

        struct variant_EntityRef_NavMeshArea_ : Base // Union
        {
            variant_EntityRef_NavMeshArea_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "eastl::variant<EntityRef,NavMeshArea>";
            char const* getType() const;
            std::optional<Ent::Gen::EntityRef> EntityRef() const;
            Ent::Gen::EntityRef setEntityRef() const;
            std::optional<Ent::Gen::NavMeshArea> NavMeshArea() const;
            Ent::Gen::NavMeshArea setNavMeshArea() const;
        };

        struct usePerception : HelperObject // Object
        {
            usePerception(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct tryGrasp : HelperObject // Object
        {
            tryGrasp(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct sPhysicsShapeSphere : HelperObject // Object
        {
            sPhysicsShapeSphere(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sPhysicsShapeSphere";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float radius() const;
        };

        struct sPhysicsShapeMesh : HelperObject // Object
        {
            sPhysicsShapeMesh(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sPhysicsShapeMesh";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String path() const;
        };

        struct sPhysicsShapeCylinder : HelperObject // Object
        {
            sPhysicsShapeCylinder(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sPhysicsShapeCylinder";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float length() const;
            Ent::Gen::Float radius() const;
        };

        struct sPhysicsShapeCapsule : HelperObject // Object
        {
            sPhysicsShapeCapsule(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sPhysicsShapeCapsule";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float length() const;
            Ent::Gen::Float radius() const;
        };

        struct sJointFixedDesc : HelperObject // Object
        {
            sJointFixedDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sJointFixedDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct sJointBallDesc : HelperObject // Object
        {
            sJointBallDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sJointBallDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct resetCreatureRequest : HelperObject // Object
        {
            resetCreatureRequest(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct jumpPower : HelperObject // Object
        {
            jumpPower(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct isPerceivableForEnemies : HelperObject // Object
        {
            isPerceivableForEnemies(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct isPerceivable : HelperObject // Object
        {
            isPerceivable(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct eventStringHash : HelperObject // Object
        {
            eventStringHash(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::String val() const;
        };

        struct enableSynchronization : HelperObject // Object
        {
            enableSynchronization(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct computePitchAngle : HelperObject // Object
        {
            computePitchAngle(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct allowedTypesItem : HelperObject // Object
        {
            allowedTypesItem(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct WindTurbulenceType : EnumPropHelper<WindTurbulenceType, WindTurbulenceTypeEnum> // Enum
        {
            using Enum = WindTurbulenceTypeEnum;
            using PropHelper<WindTurbulenceType, Enum>::operator=;
            WindTurbulenceType(Ent::Node* _node): EnumPropHelper<WindTurbulenceType, Enum>(_node) {}
            static constexpr char schemaName[] = "WindTurbulenceType";
            static constexpr char const* enumToString[] = {
                "radial",
                "swirlcw",
                "swirlccw",
                "WindTurbulenceType_COUNT",
            };
        };
        inline char const* toString(WindTurbulenceTypeEnum value)
        {
            if(size_t(value) >= std::size(WindTurbulenceType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return WindTurbulenceType::enumToString[size_t(value)];
        }
        inline char const* toInternal(WindTurbulenceTypeEnum value) { return toString(value); }
        template<> inline WindTurbulenceTypeEnum strToEnum<WindTurbulenceTypeEnum>(char const* value)
        {
            return static_cast<WindTurbulenceTypeEnum>(details::indexInEnum(value, WindTurbulenceType::enumToString));
        }

        struct WaveRenderingType : EnumPropHelper<WaveRenderingType, WaveRenderingTypeEnum> // Enum
        {
            using Enum = WaveRenderingTypeEnum;
            using PropHelper<WaveRenderingType, Enum>::operator=;
            WaveRenderingType(Ent::Node* _node): EnumPropHelper<WaveRenderingType, Enum>(_node) {}
            static constexpr char schemaName[] = "WaveRenderingType";
            static constexpr char const* enumToString[] = {
                "Mesh",
                "WaveRenderingType_COUNT",
            };
        };
        inline char const* toString(WaveRenderingTypeEnum value)
        {
            if(size_t(value) >= std::size(WaveRenderingType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return WaveRenderingType::enumToString[size_t(value)];
        }
        inline char const* toInternal(WaveRenderingTypeEnum value) { return toString(value); }
        template<> inline WaveRenderingTypeEnum strToEnum<WaveRenderingTypeEnum>(char const* value)
        {
            return static_cast<WaveRenderingTypeEnum>(details::indexInEnum(value, WaveRenderingType::enumToString));
        }

        struct Walkability : HelperObject // Object
        {
            Walkability(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct VegetationData : HelperObject // Object
        {
            VegetationData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VegetationData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String GRCPath() const;
            Ent::Gen::String Name() const;
            Ent::Gen::PrimitiveSet<char const*> Tags() const;
            Ent::Gen::String VisibilityDistanceCategory() const;
            Ent::Gen::String _comment() const;
        };

        struct VegetationDataList : HelperObject // Object
        {
            VegetationDataList(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VegetationDataList";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::VegetationData> Data() const;
            Ent::Gen::String _comment() const;
        };




        struct sPhysicsShapeBox : HelperObject // Object
        {
            sPhysicsShapeBox(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sPhysicsShapeBox";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 size() const;
        };

        struct sEnvStamp : HelperObject // Object
        {
            sEnvStamp(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sEnvStamp";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AffectCoverage() const;
            Ent::Gen::Bool AffectFogColor() const;
            Ent::Gen::Bool AffectFogDensity() const;
            Ent::Gen::Bool AffectFogFalloff() const;
            Ent::Gen::Bool AffectFogHeight() const;
            Ent::Gen::Bool AffectPull() const;
            Ent::Gen::Bool AffectType() const;
            Ent::Gen::Bool AffectWetness() const;
            Ent::Gen::Int AtlasID() const;
            Ent::Gen::Vector3 FogColor() const;
            Ent::Gen::Bool IsCloud() const;
            Ent::Gen::Vector3 PositionOffset() const;
            Ent::Gen::Float Rotation() const;
            Ent::Gen::Float Size() const;
            Ent::Gen::Float Strength() const;
            Ent::Gen::String _comment() const;
        };

        struct retiming : HelperObject // Object
        {
            retiming(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Vector3 val() const;
        };

        struct WaveRendererProperties : HelperObject // Object
        {
            WaveRendererProperties(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WaveRendererProperties";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int BonesGridHeight() const;
            Ent::Gen::Int BonesGridWidth() const;
            Ent::Gen::Int BonesIgnoreOffset() const;
            Ent::Gen::String MaterialPath() const;
            Ent::Gen::String MeshPath() const;
            Ent::Gen::Int NbMeshInstances() const;
            Ent::Gen::Int NbQuads() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::Vector3 Scale() const;
            Ent::Gen::String _comment() const;
        };

        struct WaveProperties : HelperObject // Object
        {
            WaveProperties(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WaveProperties";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Duration() const;
            Ent::Gen::Float IntervalBetweenWaveFronts() const;
            Ent::Gen::Bool Looping() const;
            Ent::Gen::Float Luminosity() const;
            Ent::Gen::String LuminosityCurvePath() const;
            Ent::Gen::Float LuminosityVariability() const;
            Array<Ent::Gen::WaveRendererProperties> RenderingProperties() const;
            Ent::Gen::WaveRenderingType RenderingType() const;
            Ent::Gen::Int Width() const;
            Ent::Gen::String _comment() const;
        };


        struct sJointUniversalDesc : HelperObject // Object
        {
            sJointUniversalDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sJointUniversalDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector2 angleSwing1() const;
            Ent::Gen::Vector2 angleSwing2() const;
        };

        struct sJointSwingTwistDesc : HelperObject // Object
        {
            sJointSwingTwistDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sJointSwingTwistDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector2 swingAngle() const;
            Ent::Gen::Vector2 twistAngle() const;
        };

        struct sJointSliderDesc : HelperObject // Object
        {
            sJointSliderDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sJointSliderDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 direction() const;
            Ent::Gen::Vector2 distance() const;
        };

        struct sJointHingeDesc : HelperObject // Object
        {
            sJointHingeDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sJointHingeDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector2 angle() const;
            Ent::Gen::Vector3 axis() const;
        };

        struct ConditionalRigidityAttribute_Range : HelperObject // Object
        {
            ConditionalRigidityAttribute_Range(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::Range";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector2 Range() const;
            Ent::Gen::String _comment() const;
        };

        struct VariantAllowed : HelperObject // Object
        {
            VariantAllowed(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct UnionObjectArrayItem : HelperObject // Object
        {
            UnionObjectArrayItem(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ Union() const;
            Ent::Gen::String _comment() const;
        };

        struct TypedValue : HelperObject // Object
        {
            TypedValue(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TypedValue";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Alias() const;
            Ent::Gen::String Reference() const;
            Ent::Gen::variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_ Value() const;
            Ent::Gen::String _comment() const;
        };

        struct TransitionNeighborData : HelperObject // Object
        {
            TransitionNeighborData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TransitionNeighborData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::Int> Backward() const;
            PrimArray<Ent::Gen::Int> Forward() const;
            Ent::Gen::Float TangentSize() const;
            Ent::Gen::String _comment() const;
        };

        struct TrailUVUnwrappingMode : EnumPropHelper<TrailUVUnwrappingMode, TrailUVUnwrappingModeEnum> // Enum
        {
            using Enum = TrailUVUnwrappingModeEnum;
            using PropHelper<TrailUVUnwrappingMode, Enum>::operator=;
            TrailUVUnwrappingMode(Ent::Node* _node): EnumPropHelper<TrailUVUnwrappingMode, Enum>(_node) {}
            static constexpr char schemaName[] = "TrailUVUnwrappingMode";
            static constexpr char const* enumToString[] = {
                "TailToHead",
                "SnakeHeadToTail",
                "TrailUVUnwrappingMode_COUNT",
            };
        };
        inline char const* toString(TrailUVUnwrappingModeEnum value)
        {
            if(size_t(value) >= std::size(TrailUVUnwrappingMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return TrailUVUnwrappingMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(TrailUVUnwrappingModeEnum value) { return toString(value); }
        template<> inline TrailUVUnwrappingModeEnum strToEnum<TrailUVUnwrappingModeEnum>(char const* value)
        {
            return static_cast<TrailUVUnwrappingModeEnum>(details::indexInEnum(value, TrailUVUnwrappingMode::enumToString));
        }

        struct TrailRenderingType : EnumPropHelper<TrailRenderingType, TrailRenderingTypeEnum> // Enum
        {
            using Enum = TrailRenderingTypeEnum;
            using PropHelper<TrailRenderingType, Enum>::operator=;
            TrailRenderingType(Ent::Node* _node): EnumPropHelper<TrailRenderingType, Enum>(_node) {}
            static constexpr char schemaName[] = "TrailRenderingType";
            static constexpr char const* enumToString[] = {
                "Cross",
                "Billboard",
                "Patches",
                "Mesh",
                "TrailRenderingType_COUNT",
            };
        };
        inline char const* toString(TrailRenderingTypeEnum value)
        {
            if(size_t(value) >= std::size(TrailRenderingType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return TrailRenderingType::enumToString[size_t(value)];
        }
        inline char const* toInternal(TrailRenderingTypeEnum value) { return toString(value); }
        template<> inline TrailRenderingTypeEnum strToEnum<TrailRenderingTypeEnum>(char const* value)
        {
            return static_cast<TrailRenderingTypeEnum>(details::indexInEnum(value, TrailRenderingType::enumToString));
        }

        struct TrailRenderingSides : EnumPropHelper<TrailRenderingSides, TrailRenderingSidesEnum> // Enum
        {
            using Enum = TrailRenderingSidesEnum;
            using PropHelper<TrailRenderingSides, Enum>::operator=;
            TrailRenderingSides(Ent::Node* _node): EnumPropHelper<TrailRenderingSides, Enum>(_node) {}
            static constexpr char schemaName[] = "TrailRenderingSides";
            static constexpr char const* enumToString[] = {
                "SideA",
                "SideB",
                "BothSides",
                "TrailRenderingSides_COUNT",
            };
        };
        inline char const* toString(TrailRenderingSidesEnum value)
        {
            if(size_t(value) >= std::size(TrailRenderingSides::enumToString))
                throw std::runtime_error("Wrong enum value");
            return TrailRenderingSides::enumToString[size_t(value)];
        }
        inline char const* toInternal(TrailRenderingSidesEnum value) { return toString(value); }
        template<> inline TrailRenderingSidesEnum strToEnum<TrailRenderingSidesEnum>(char const* value)
        {
            return static_cast<TrailRenderingSidesEnum>(details::indexInEnum(value, TrailRenderingSides::enumToString));
        }

        struct TrailRenderingAttribute : EnumPropHelper<TrailRenderingAttribute, TrailRenderingAttributeEnum> // Enum
        {
            using Enum = TrailRenderingAttributeEnum;
            using PropHelper<TrailRenderingAttribute, Enum>::operator=;
            TrailRenderingAttribute(Ent::Node* _node): EnumPropHelper<TrailRenderingAttribute, Enum>(_node) {}
            static constexpr char schemaName[] = "TrailRenderingAttribute";
            static constexpr char const* enumToString[] = {
                "Horizontal",
                "Vertical",
                "Frontal",
                "TrailRenderingAttribute_COUNT",
            };
        };
        inline char const* toString(TrailRenderingAttributeEnum value)
        {
            if(size_t(value) >= std::size(TrailRenderingAttribute::enumToString))
                throw std::runtime_error("Wrong enum value");
            return TrailRenderingAttribute::enumToString[size_t(value)];
        }
        inline char const* toInternal(TrailRenderingAttributeEnum value) { return toString(value); }
        template<> inline TrailRenderingAttributeEnum strToEnum<TrailRenderingAttributeEnum>(char const* value)
        {
            return static_cast<TrailRenderingAttributeEnum>(details::indexInEnum(value, TrailRenderingAttribute::enumToString));
        }

        struct TrailRendererProperties : HelperObject // Object
        {
            TrailRendererProperties(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TrailRendererProperties";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::TrailRenderingAttribute Attribute() const;
            Ent::Gen::String MaterialPath() const;
            Ent::Gen::String MeshPath() const;
            Ent::Gen::Int NbMeshInstances() const;
            Ent::Gen::Int NbQuads() const;
            Ent::Gen::Int NbTrailPointsBetweenFrontQuads() const;
            Ent::Gen::Int NbVertices() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::Vector2 RandomAxialRotationAmplitude() const;
            Ent::Gen::Float RandomUVOffset() const;
            Ent::Gen::TrailRenderingSides Sides() const;
            Ent::Gen::String _comment() const;
        };

        struct TrackedEntitiesItem : HelperObject // Object
        {
            TrackedEntitiesItem(Ent::Node* _node): HelperObject(_node) {}
            
        
        };


        struct TestPropertyDefaultValues : HelperObject // Object
        {
            TestPropertyDefaultValues(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestPropertyDefaultValues";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int A() const;
            Ent::Gen::Int B() const;
            Ent::Gen::String _comment() const;
        };

        struct TestPropertyDefaultValues2 : HelperObject // Object
        {
            TestPropertyDefaultValues2(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestPropertyDefaultValues2";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::TestPropertyDefaultValues propertyWithDefault2() const;
            Ent::Gen::TestPropertyDefaultValues propertyWithDefault3() const;
        };

        struct Terrain_TerrainMeta : HelperObject // Object
        {
            Terrain_TerrainMeta(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Terrain::TerrainMeta";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String DataPath() const;
            Ent::Gen::Float HeightScaleMeters() const;
            Ent::Gen::String Material() const;
            Ent::Gen::Float RegionWidthMeters() const;
            Ent::Gen::Bool RimTerrain() const;
            Ent::Gen::Float SkirtScale() const;
            Ent::Gen::Float TexelsPerMeter() const;
            Ent::Gen::String _comment() const;
        };

        struct TargetCollision : HelperObject // Object
        {
            TargetCollision(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TargetCollision";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int count() const;
        };

        struct TagsList : HelperObject // Object
        {
            TagsList(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TagsList";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::PrimitiveSet<char const*>> Tags() const;
            Ent::Gen::String _comment() const;
        };

        struct TaggedSDF : HelperObject // Object
        {
            TaggedSDF(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TaggedSDF";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float MaxTagDistance() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::variant_MeshShape_ShapeSphere_ShapeBox_ Shape() const;
            Ent::Gen::String Tag() const;
            Ent::Gen::String _comment() const;
        };

        struct TagInfo : HelperObject // Object
        {
            TagInfo(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TagInfo";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int AudioWeight() const;
            Ent::Gen::String _comment() const;
        };

        struct TagDB : HelperObject // Object
        {
            TagDB(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TagDB";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::TagInfo> TagInfoTable() const;
            Ent::Gen::String _comment() const;
        };

        struct SyncTempoMode : EnumPropHelper<SyncTempoMode, SyncTempoModeEnum> // Enum
        {
            using Enum = SyncTempoModeEnum;
            using PropHelper<SyncTempoMode, Enum>::operator=;
            SyncTempoMode(Ent::Node* _node): EnumPropHelper<SyncTempoMode, Enum>(_node) {}
            static constexpr char schemaName[] = "SyncTempoMode";
            static constexpr char const* enumToString[] = {
                "None",
                "OnGrid",
                "OnBeat",
                "OnBar",
                "OnEnterCue",
                "OnExitCue",
                "OnCustomCue",
                "OnSwitchTransition",
                "SyncTempoMode_COUNT",
                "SyncTempoMode_FIRST",
            };
        };
        inline char const* toString(SyncTempoModeEnum value)
        {
            if(size_t(value) >= std::size(SyncTempoMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return SyncTempoMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(SyncTempoModeEnum value) { return toString(value); }
        template<> inline SyncTempoModeEnum strToEnum<SyncTempoModeEnum>(char const* value)
        {
            return static_cast<SyncTempoModeEnum>(details::indexInEnum(value, SyncTempoMode::enumToString));
        }

        struct UIMusic : HelperObject // Object
        {
            UIMusic(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "UIMusic";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String MusicType() const;
            Ent::Gen::String SkillTree() const;
            Ent::Gen::SyncTempoMode SynchronizationMode() const;
            Ent::Gen::String _comment() const;
        };

        struct StyleMode : EnumPropHelper<StyleMode, StyleModeEnum> // Enum
        {
            using Enum = StyleModeEnum;
            using PropHelper<StyleMode, Enum>::operator=;
            StyleMode(Ent::Node* _node): EnumPropHelper<StyleMode, Enum>(_node) {}
            static constexpr char schemaName[] = "StyleMode";
            static constexpr char const* enumToString[] = {
                "default",
                "stick",
                "sword",
                "do",
                "hammer",
                "knife",
                "squirrel",
                "lush",
                "StyleMode_COUNT",
            };
        };
        inline char const* toString(StyleModeEnum value)
        {
            if(size_t(value) >= std::size(StyleMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return StyleMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(StyleModeEnum value) { return toString(value); }
        template<> inline StyleModeEnum strToEnum<StyleModeEnum>(char const* value)
        {
            return static_cast<StyleModeEnum>(details::indexInEnum(value, StyleMode::enumToString));
        }

        struct StunData : HelperObject // Object
        {
            StunData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StunData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int damageHitBig() const;
            Ent::Gen::Int damageHitBite() const;
            Ent::Gen::Int damageHitEject() const;
            Ent::Gen::Int damageHitEjectFar() const;
            Ent::Gen::Int damageHitLight() const;
            Ent::Gen::Int damageHitMedium() const;
            Ent::Gen::Int malus() const;
            Ent::Gen::Float orientHitBig() const;
            Ent::Gen::Float orientHitEject() const;
            Ent::Gen::Float orientHitEjectFar() const;
            Ent::Gen::Float orientHitLight() const;
            Ent::Gen::Float orientHitMedium() const;
            Ent::Gen::Float recoverTime() const;
            Ent::Gen::Int resistance() const;
            Ent::Gen::Float stunTime() const;
        };

        struct StickToGround : HelperObject // Object
        {
            StickToGround(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StickToGround";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String BoneNameEnd() const;
            Ent::Gen::String BoneNameStart() const;
            Ent::Gen::String _comment() const;
        };

        struct SpeedScaleXY : HelperObject // Object
        {
            SpeedScaleXY(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct SpeedMode : EnumPropHelper<SpeedMode, SpeedModeEnum> // Enum
        {
            using Enum = SpeedModeEnum;
            using PropHelper<SpeedMode, Enum>::operator=;
            SpeedMode(Ent::Node* _node): EnumPropHelper<SpeedMode, Enum>(_node) {}
            static constexpr char schemaName[] = "SpeedMode";
            static constexpr char const* enumToString[] = {
                "speed0",
                "speed1",
                "speed2",
                "speed3",
                "speed4",
                "SpeedMode_COUNT",
            };
        };
        inline char const* toString(SpeedModeEnum value)
        {
            if(size_t(value) >= std::size(SpeedMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return SpeedMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(SpeedModeEnum value) { return toString(value); }
        template<> inline SpeedModeEnum strToEnum<SpeedModeEnum>(char const* value)
        {
            return static_cast<SpeedModeEnum>(details::indexInEnum(value, SpeedMode::enumToString));
        }

        struct SpeedModeMax : HelperObject // Object
        {
            SpeedModeMax(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::SpeedMode val() const;
        };

        struct SpeedFastMinDuration : HelperObject // Object
        {
            SpeedFastMinDuration(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct Specie : EnumPropHelper<Specie, SpecieEnum> // Enum
        {
            using Enum = SpecieEnum;
            using PropHelper<Specie, Enum>::operator=;
            Specie(Ent::Node* _node): EnumPropHelper<Specie, Enum>(_node) {}
            static constexpr char schemaName[] = "Specie";
            static constexpr char const* enumToString[] = {
                "auroch",
                "bear",
                "babybear",
                "catfish",
                "eagle",
                "elk",
                "fox",
                "giantbear",
                "human",
                "cannibal",
                "babyhuman",
                "horse",
                "ibex",
                "rabbit",
                "rat",
                "ram",
                "raven",
                "schmetre",
                "seagull",
                "snake",
                "spermwhale",
                "squirrel",
                "stag",
                "toad",
                "trout",
                "wildboar",
                "babyboar",
                "wolf",
                "shark",
                "dolphin",
                "whale",
                "goddess",
                "clothboots",
                "clothbrace",
                "clothhelmet",
                "clothskirt",
                "clothtorso",
                "clothbody",
                "weapon",
                "outfit",
                "drivable",
                "fruit",
                "darkstone",
                "destructible",
                "environment",
                "regeneration",
                "insect",
                "Specie_COUNT",
            };
        };
        inline char const* toString(SpecieEnum value)
        {
            if(size_t(value) >= std::size(Specie::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Specie::enumToString[size_t(value)];
        }
        inline char const* toInternal(SpecieEnum value) { return toString(value); }
        template<> inline SpecieEnum strToEnum<SpecieEnum>(char const* value)
        {
            return static_cast<SpecieEnum>(details::indexInEnum(value, Specie::enumToString));
        }

        struct SpawningParameter : HelperObject // Object
        {
            SpawningParameter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SpawningParameter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String EntityName() const;
            Ent::Gen::Float MinimumDepth() const;
            Ent::Gen::Float PeriodRandomness() const;
            Ent::Gen::Float SpawningPeriod() const;
            Ent::Gen::String State() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundOpportunityRangeDescription : HelperObject // Object
        {
            SoundOpportunityRangeDescription(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundOpportunityRangeDescription";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ChunkSize() const;
            Ent::Gen::Float EDITOR_SelectionProbabilityFactor() const;
            Ent::Gen::Float MaxDistance() const;
            Ent::Gen::String PCloudPath() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundOcclusionData : HelperObject // Object
        {
            SoundOcclusionData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundOcclusionData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float OcclusionMaxRatioAdjustRate() const;
            Ent::Gen::Float OcclusionMaxThickness() const;
            Ent::Gen::Float OcclusionRatioAdjustRateFactor() const;
            Ent::Gen::Float OcclusionSphereCastRadius() const;
            Ent::Gen::Float OcclusionSphereCastVerticalOffset() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundManager_BiomeSoundBank : HelperObject // Object
        {
            SoundManager_BiomeSoundBank(Ent::Node* _node): HelperObject(_node) {}
            
        
        };

        struct SoundEventMapping : HelperObject // Object
        {
            SoundEventMapping(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundEventMapping";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::String> Explicit() const;
            Ent::Gen::PrimitiveSet<char const*> Ignored() const;
            Ent::Gen::Map<char const*, Ent::Gen::String> Prefixed() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundEmissionStrength : EnumPropHelper<SoundEmissionStrength, SoundEmissionStrengthEnum> // Enum
        {
            using Enum = SoundEmissionStrengthEnum;
            using PropHelper<SoundEmissionStrength, Enum>::operator=;
            SoundEmissionStrength(Ent::Node* _node): EnumPropHelper<SoundEmissionStrength, Enum>(_node) {}
            static constexpr char schemaName[] = "SoundEmissionStrength";
            static constexpr char const* enumToString[] = {
                "none",
                "low",
                "medium",
                "high",
                "SoundEmissionStrength_COUNT",
            };
        };
        inline char const* toString(SoundEmissionStrengthEnum value)
        {
            if(size_t(value) >= std::size(SoundEmissionStrength::enumToString))
                throw std::runtime_error("Wrong enum value");
            return SoundEmissionStrength::enumToString[size_t(value)];
        }
        inline char const* toInternal(SoundEmissionStrengthEnum value) { return toString(value); }
        template<> inline SoundEmissionStrengthEnum strToEnum<SoundEmissionStrengthEnum>(char const* value)
        {
            return static_cast<SoundEmissionStrengthEnum>(details::indexInEnum(value, SoundEmissionStrength::enumToString));
        }

        struct soundEmissionStrength : HelperObject // Object
        {
            soundEmissionStrength(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::SoundEmissionStrength val() const;
        };

        struct SoftCollisionGD_VegetationDetectionParameters : HelperObject // Object
        {
            SoftCollisionGD_VegetationDetectionParameters(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoftCollisionGD::VegetationDetectionParameters";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String BoneName() const;
            Ent::Gen::Vector3 BoneOffset() const;
            Ent::Gen::Float Radius() const;
            PrimArray<Ent::Gen::String> VegetationTagList() const;
            Ent::Gen::String _comment() const;
        };

        struct SmoothScaleComponentInput_Parameters : HelperObject // Object
        {
            SmoothScaleComponentInput_Parameters(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SmoothScaleComponentInput::Parameters";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Scale() const;
            Ent::Gen::Float Time() const;
            Ent::Gen::String _comment() const;
        };

        struct Size : EnumPropHelper<Size, SizeEnum> // Enum
        {
            using Enum = SizeEnum;
            using PropHelper<Size, Enum>::operator=;
            Size(Ent::Node* _node): EnumPropHelper<Size, Enum>(_node) {}
            static constexpr char schemaName[] = "Size";
            static constexpr char const* enumToString[] = {
                "tiny",
                "small",
                "medium",
                "big",
                "enormous",
                "Size_COUNT",
            };
        };
        inline char const* toString(SizeEnum value)
        {
            if(size_t(value) >= std::size(Size::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Size::enumToString[size_t(value)];
        }
        inline char const* toInternal(SizeEnum value) { return toString(value); }
        template<> inline SizeEnum strToEnum<SizeEnum>(char const* value)
        {
            return static_cast<SizeEnum>(details::indexInEnum(value, Size::enumToString));
        }

        struct ShowdownSpeciesAudioData : HelperObject // Object
        {
            ShowdownSpeciesAudioData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShowdownSpeciesAudioData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String AudioCategory() const;
            Ent::Gen::String Species() const;
            Ent::Gen::String _comment() const;
        };

        struct ShowdownLayerInfo : HelperObject // Object
        {
            ShowdownLayerInfo(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShowdownLayerInfo";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float CoolDown() const;
            Ent::Gen::String DistanceRTPC() const;
            Ent::Gen::Bool Loop() const;
            Ent::Gen::String Name() const;
            Ent::Gen::String Priority() const;
            Ent::Gen::String UninvolvedDistanceRTPC() const;
            Ent::Gen::String _comment() const;
        };

        struct ShowdownLayerData : HelperObject // Object
        {
            ShowdownLayerData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShowdownLayerData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ShowdownLayerInfo Attacked() const;
            Ent::Gen::ShowdownLayerInfo Danger() const;
            Ent::Gen::ShowdownLayerInfo Detected() const;
            Ent::Gen::ShowdownLayerInfo Suspected() const;
            Ent::Gen::String _comment() const;
        };

        struct ShowdownMusic : HelperObject // Object
        {
            ShowdownMusic(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShowdownMusic";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AfterEpicCoolDown() const;
            Ent::Gen::Float CloseRange() const;
            Ent::Gen::Float CoolDownBeforeStop() const;
            Ent::Gen::String EventsPrefix() const;
            Ent::Gen::Int IntensityCountMax() const;
            Ent::Gen::Float IntensityCountRatio() const;
            Ent::Gen::Float IntensityDistanceRatio() const;
            Ent::Gen::String IntensityRTPC() const;
            Ent::Gen::ShowdownLayerData Layers() const;
            Ent::Gen::String MostSignificantCreatureDistanceRTPC() const;
            Ent::Gen::Float MusicSourceAnchorRadius() const;
            Ent::Gen::Float MusicSourceDamping() const;
            Ent::Gen::Float PlayerInvolvedScoreFactor() const;
            Ent::Gen::Float PlayerUninvolvedDistanceFactor() const;
            Ent::Gen::String RTPC_2D3D() const;
            Ent::Gen::String RTPC_PlayersInFight() const;
            Ent::Gen::String ShowdownBlueSideState() const;
            Ent::Gen::String ShowdownMusBank() const;
            Ent::Gen::String ShowdownMusState() const;
            Ent::Gen::String ShowdownNeutralSideState() const;
            Ent::Gen::String ShowdownRedSideState() const;
            Ent::Gen::String ShowdownSideState() const;
            Ent::Gen::String ShowdownTypeState() const;
            Ent::Gen::Float SmoothDistanceRTPCs() const;
            Ent::Gen::Float SmoothTime() const;
            Array<Ent::Gen::ShowdownSpeciesAudioData> SpeciesToAudioCategory() const;
            Ent::Gen::SyncTempoMode SynchronizationMode() const;
            Ent::Gen::String _comment() const;
        };

        struct ShootSequenceData : HelperObject // Object
        {
            ShootSequenceData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShootSequenceData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Param() const;
            Ent::Gen::String Type_() const;
            Ent::Gen::String _comment() const;
        };

        struct ShootData : HelperObject // Object
        {
            ShootData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShootData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String ammoName() const;
            Ent::Gen::Float anticipationImprecision() const;
            Ent::Gen::Bool canShoot() const;
            Ent::Gen::Int chargeTierCount() const;
            Ent::Gen::Float gravity() const;
            Ent::Gen::Float lifeCost() const;
            Ent::Gen::Float lifeCostCharged() const;
            Ent::Gen::Float maxChargeDuration() const;
            Ent::Gen::Float maxShootDistance() const;
            Ent::Gen::Float minDelayBetweenShots() const;
            Ent::Gen::Bool randomAngleShoot() const;
            Ent::Gen::Float shootMaxAngle() const;
            Ent::Gen::Float shootSpeed() const;
            Ent::Gen::Float zoneImprecision() const;
        };

        struct SetOfObjectItem : HelperObject // Object
        {
            SetOfObjectItem(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String Name() const;
            Ent::Gen::String Value() const;
            Ent::Gen::String _comment() const;
        };

        struct SeedPatchData : HelperObject // Object
        {
            SeedPatchData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SeedPatchData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float NoiseBlur() const;
            Ent::Gen::Float NoiseContrast() const;
            Ent::Gen::Bool NoiseInvert() const;
            Ent::Gen::String NoiseName() const;
            Ent::Gen::Float NoiseOffsetX() const;
            Ent::Gen::Float NoiseOffsetY() const;
            Ent::Gen::Float NoiseOpacity() const;
            Ent::Gen::Float NoisePosition() const;
            Ent::Gen::Float NoiseSizeX() const;
            Ent::Gen::Float NoiseSizeY() const;
            Ent::Gen::String SeedName() const;
            Ent::Gen::String _comment() const;
        };

        struct SeedPatchDatas : HelperObject // Object
        {
            SeedPatchDatas(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SeedPatchDatas";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::SeedPatchData> DataMap() const;
            Ent::Gen::String _comment() const;
        };

        struct SeedPatchDataList : HelperObject // Object
        {
            SeedPatchDataList(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SeedPatchDataList";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::SeedPatchData> Data() const;
            Ent::Gen::String _comment() const;
        };

        struct ScriptPathAndDataSet : HelperObject // Object
        {
            ScriptPathAndDataSet(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ScriptPathAndDataSet";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AutoLaunch() const;
            Ent::Gen::Map<char const*, Ent::Gen::TypedValue> DataMap() const;
            Ent::Gen::String NickName() const;
            Ent::Gen::String Path() const;
            Array<Ent::Gen::ScriptPathAndDataSet> SpawnDataSets() const;
            Ent::Gen::String _comment() const;
        };

        struct ScaleFactor : HelperObject // Object
        {
            ScaleFactor(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct ScaleConverter : HelperObject // Object
        {
            ScaleConverter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ScaleConverter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::variant_Pasta_Easing_Curve_string_ easing() const;
            Ent::Gen::Vector2 in_() const;
            Ent::Gen::String inText() const;
            Ent::Gen::Vector2 out() const;
            Ent::Gen::String outText() const;
        };

        struct RuntimeMode : EnumPropHelper<RuntimeMode, RuntimeModeEnum> // Enum
        {
            using Enum = RuntimeModeEnum;
            using PropHelper<RuntimeMode, Enum>::operator=;
            RuntimeMode(Ent::Node* _node): EnumPropHelper<RuntimeMode, Enum>(_node) {}
            
            static constexpr char const* enumToString[] = {
                "None",
                "Container",
                "Compound",
            };
        };
        inline char const* toString(RuntimeModeEnum value)
        {
            if(size_t(value) >= std::size(RuntimeMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return RuntimeMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(RuntimeModeEnum value) { return toString(value); }
        template<> inline RuntimeModeEnum strToEnum<RuntimeModeEnum>(char const* value)
        {
            return static_cast<RuntimeModeEnum>(details::indexInEnum(value, RuntimeMode::enumToString));
        }

        struct RigidbodyScalingSpeed : HelperObject // Object
        {
            RigidbodyScalingSpeed(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct RigidbodyScaleMultiplier : HelperObject // Object
        {
            RigidbodyScaleMultiplier(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct RigidBodyUserData : HelperObject // Object
        {
            RigidBodyUserData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RigidBodyUserData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct RigidBodyUserDataLedges : HelperObject // Object
        {
            RigidBodyUserDataLedges(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RigidBodyUserDataLedges";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::RigidBodyUserData Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RigidBodyUserDataImpact : HelperObject // Object
        {
            RigidBodyUserDataImpact(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RigidBodyUserDataImpact";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::RigidBodyUserData Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RigidBodyMeshNavigation : HelperObject // Object
        {
            RigidBodyMeshNavigation(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RigidBodyMeshNavigation";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::RigidBodyUserData Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidRigidbodyUserData : HelperObject // Object
        {
            FluidRigidbodyUserData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidRigidbodyUserData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::RigidBodyUserData Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RevivedData : HelperObject // Object
        {
            RevivedData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RevivedData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float NonCreatureConvertRatio() const;
            Ent::Gen::Float ReviveSinAmplitude() const;
            Ent::Gen::String _comment() const;
        };

        struct ReviveSide : EnumPropHelper<ReviveSide, ReviveSideEnum> // Enum
        {
            using Enum = ReviveSideEnum;
            using PropHelper<ReviveSide, Enum>::operator=;
            ReviveSide(Ent::Node* _node): EnumPropHelper<ReviveSide, Enum>(_node) {}
            static constexpr char schemaName[] = "ReviveSide";
            static constexpr char const* enumToString[] = {
                "neutral",
                "sacred",
                "cursed",
                "ReviveSide_COUNT",
            };
        };
        inline char const* toString(ReviveSideEnum value)
        {
            if(size_t(value) >= std::size(ReviveSide::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ReviveSide::enumToString[size_t(value)];
        }
        inline char const* toInternal(ReviveSideEnum value) { return toString(value); }
        template<> inline ReviveSideEnum strToEnum<ReviveSideEnum>(char const* value)
        {
            return static_cast<ReviveSideEnum>(details::indexInEnum(value, ReviveSide::enumToString));
        }

        struct ResponsiblePointer_GameEffect_ : Base // Union
        {
            ResponsiblePointer_GameEffect_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "ResponsiblePointer<GameEffect>";
            char const* getType() const;
            std::optional<Ent::Gen::BeamDetectionEffect> BeamDetectionEffect() const;
            Ent::Gen::BeamDetectionEffect setBeamDetectionEffect() const;
            std::optional<Ent::Gen::BeamEffect> BeamEffect() const;
            Ent::Gen::BeamEffect setBeamEffect() const;
            std::optional<Ent::Gen::CallForHelpEffect> CallForHelpEffect() const;
            Ent::Gen::CallForHelpEffect setCallForHelpEffect() const;
            std::optional<Ent::Gen::ExplosionEffect> ExplosionEffect() const;
            Ent::Gen::ExplosionEffect setExplosionEffect() const;
            std::optional<Ent::Gen::FluidEffect> FluidEffect() const;
            Ent::Gen::FluidEffect setFluidEffect() const;
            std::optional<Ent::Gen::FollowerCallEffect> FollowerCallEffect() const;
            Ent::Gen::FollowerCallEffect setFollowerCallEffect() const;
            std::optional<Ent::Gen::RegenEffect> RegenEffect() const;
            Ent::Gen::RegenEffect setRegenEffect() const;
            std::optional<Ent::Gen::RepulseEffect> RepulseEffect() const;
            Ent::Gen::RepulseEffect setRepulseEffect() const;
            std::optional<Ent::Gen::ShakeEffect> ShakeEffect() const;
            Ent::Gen::ShakeEffect setShakeEffect() const;
            std::optional<Ent::Gen::WindTurbulenceEffect> WindTurbulenceEffect() const;
            Ent::Gen::WindTurbulenceEffect setWindTurbulenceEffect() const;
            std::optional<Ent::Gen::GameEffect> GameEffect() const;
            Ent::Gen::GameEffect setGameEffect() const;
        };

        struct sGameEffectTemplate : HelperObject // Object
        {
            sGameEffectTemplate(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sGameEffectTemplate";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String BoneName() const;
            Ent::Gen::ResponsiblePointer_GameEffect_ Effect() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::String _comment() const;
        };

        struct ResponsiblePointer_CineEvent_ : Base // Union
        {
            ResponsiblePointer_CineEvent_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "ResponsiblePointer<CineEvent>";
            char const* getType() const;
            std::optional<Ent::Gen::CineEventTestCurrentGameState> CineEventTestCurrentGameState() const;
            Ent::Gen::CineEventTestCurrentGameState setCineEventTestCurrentGameState() const;
            std::optional<Ent::Gen::CineEventTestEndCurrentSequence> CineEventTestEndCurrentSequence() const;
            Ent::Gen::CineEventTestEndCurrentSequence setCineEventTestEndCurrentSequence() const;
            std::optional<Ent::Gen::CineEventTestInput> CineEventTestInput() const;
            Ent::Gen::CineEventTestInput setCineEventTestInput() const;
            std::optional<Ent::Gen::CineEventTestIsCanceled> CineEventTestIsCanceled() const;
            Ent::Gen::CineEventTestIsCanceled setCineEventTestIsCanceled() const;
            std::optional<Ent::Gen::CineEventTriggerDisplayUIMessage> CineEventTriggerDisplayUIMessage() const;
            Ent::Gen::CineEventTriggerDisplayUIMessage setCineEventTriggerDisplayUIMessage() const;
            std::optional<Ent::Gen::CineEventTriggerEventHandlerPost> CineEventTriggerEventHandlerPost() const;
            Ent::Gen::CineEventTriggerEventHandlerPost setCineEventTriggerEventHandlerPost() const;
            std::optional<Ent::Gen::CineEventTriggerGameStateChange> CineEventTriggerGameStateChange() const;
            Ent::Gen::CineEventTriggerGameStateChange setCineEventTriggerGameStateChange() const;
            std::optional<Ent::Gen::CineEventTriggerPlaySequence> CineEventTriggerPlaySequence() const;
            Ent::Gen::CineEventTriggerPlaySequence setCineEventTriggerPlaySequence() const;
            std::optional<Ent::Gen::CineEventTriggerPlaySound> CineEventTriggerPlaySound() const;
            Ent::Gen::CineEventTriggerPlaySound setCineEventTriggerPlaySound() const;
        };

        struct ResponsiblePointer_AnalyticsObserverInterface_ : HelperObject // Object
        {
            ResponsiblePointer_AnalyticsObserverInterface_(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ResponsiblePointer<AnalyticsObserverInterface>";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct ResponsiblePointer_ActorState_ : Base // Union
        {
            ResponsiblePointer_ActorState_(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "ResponsiblePointer<ActorState>";
            char const* getType() const;
            std::optional<Ent::Gen::ActionAimProjectile> ActionAimProjectile() const;
            Ent::Gen::ActionAimProjectile setActionAimProjectile() const;
            std::optional<Ent::Gen::ActionAttack> ActionAttack() const;
            Ent::Gen::ActionAttack setActionAttack() const;
            std::optional<Ent::Gen::ActionAttackJumpOnto> ActionAttackJumpOnto() const;
            Ent::Gen::ActionAttackJumpOnto setActionAttackJumpOnto() const;
            std::optional<Ent::Gen::ActionAttackStomp> ActionAttackStomp() const;
            Ent::Gen::ActionAttackStomp setActionAttackStomp() const;
            std::optional<Ent::Gen::ActionBite> ActionBite() const;
            Ent::Gen::ActionBite setActionBite() const;
            std::optional<Ent::Gen::ActionBiteIn> ActionBiteIn() const;
            Ent::Gen::ActionBiteIn setActionBiteIn() const;
            std::optional<Ent::Gen::ActionBiteOut> ActionBiteOut() const;
            Ent::Gen::ActionBiteOut setActionBiteOut() const;
            std::optional<Ent::Gen::ActionBittenState> ActionBittenState() const;
            Ent::Gen::ActionBittenState setActionBittenState() const;
            std::optional<Ent::Gen::ActionBrake> ActionBrake() const;
            Ent::Gen::ActionBrake setActionBrake() const;
            std::optional<Ent::Gen::ActionCallForHelp> ActionCallForHelp() const;
            Ent::Gen::ActionCallForHelp setActionCallForHelp() const;
            std::optional<Ent::Gen::ActionCentrifugal> ActionCentrifugal() const;
            Ent::Gen::ActionCentrifugal setActionCentrifugal() const;
            std::optional<Ent::Gen::ActionChangeMount> ActionChangeMount() const;
            Ent::Gen::ActionChangeMount setActionChangeMount() const;
            std::optional<Ent::Gen::ActionChangeRidingSpot> ActionChangeRidingSpot() const;
            Ent::Gen::ActionChangeRidingSpot setActionChangeRidingSpot() const;
            std::optional<Ent::Gen::ActionChosen> ActionChosen() const;
            Ent::Gen::ActionChosen setActionChosen() const;
            std::optional<Ent::Gen::ActionCinematic> ActionCinematic() const;
            Ent::Gen::ActionCinematic setActionCinematic() const;
            std::optional<Ent::Gen::ActionClamberDropOff> ActionClamberDropOff() const;
            Ent::Gen::ActionClamberDropOff setActionClamberDropOff() const;
            std::optional<Ent::Gen::ActionClamberJump> ActionClamberJump() const;
            Ent::Gen::ActionClamberJump setActionClamberJump() const;
            std::optional<Ent::Gen::ActionClamberJumpOff> ActionClamberJumpOff() const;
            Ent::Gen::ActionClamberJumpOff setActionClamberJumpOff() const;
            std::optional<Ent::Gen::ActionClamberLand> ActionClamberLand() const;
            Ent::Gen::ActionClamberLand setActionClamberLand() const;
            std::optional<Ent::Gen::ActionClamberMove> ActionClamberMove() const;
            Ent::Gen::ActionClamberMove setActionClamberMove() const;
            std::optional<Ent::Gen::ActionClamberRise> ActionClamberRise() const;
            Ent::Gen::ActionClamberRise setActionClamberRise() const;
            std::optional<Ent::Gen::ActionClimbEdge> ActionClimbEdge() const;
            Ent::Gen::ActionClimbEdge setActionClimbEdge() const;
            std::optional<Ent::Gen::ActionCollapse> ActionCollapse() const;
            Ent::Gen::ActionCollapse setActionCollapse() const;
            std::optional<Ent::Gen::ActionDecelerate> ActionDecelerate() const;
            Ent::Gen::ActionDecelerate setActionDecelerate() const;
            std::optional<Ent::Gen::ActionDigUpTreasure> ActionDigUpTreasure() const;
            Ent::Gen::ActionDigUpTreasure setActionDigUpTreasure() const;
            std::optional<Ent::Gen::ActionDisableAndFollow> ActionDisableAndFollow() const;
            Ent::Gen::ActionDisableAndFollow setActionDisableAndFollow() const;
            std::optional<Ent::Gen::ActionDodge> ActionDodge() const;
            Ent::Gen::ActionDodge setActionDodge() const;
            std::optional<Ent::Gen::ActionDrawAttention> ActionDrawAttention() const;
            Ent::Gen::ActionDrawAttention setActionDrawAttention() const;
            std::optional<Ent::Gen::ActionDrawWeapon> ActionDrawWeapon() const;
            Ent::Gen::ActionDrawWeapon setActionDrawWeapon() const;
            std::optional<Ent::Gen::ActionDrawWeaponState> ActionDrawWeaponState() const;
            Ent::Gen::ActionDrawWeaponState setActionDrawWeaponState() const;
            std::optional<Ent::Gen::ActionDrift> ActionDrift() const;
            Ent::Gen::ActionDrift setActionDrift() const;
            std::optional<Ent::Gen::ActionDrop> ActionDrop() const;
            Ent::Gen::ActionDrop setActionDrop() const;
            std::optional<Ent::Gen::ActionEmote> ActionEmote() const;
            Ent::Gen::ActionEmote setActionEmote() const;
            std::optional<Ent::Gen::ActionFlyCrash> ActionFlyCrash() const;
            Ent::Gen::ActionFlyCrash setActionFlyCrash() const;
            std::optional<Ent::Gen::ActionFlyDive> ActionFlyDive() const;
            Ent::Gen::ActionFlyDive setActionFlyDive() const;
            std::optional<Ent::Gen::ActionFlyDown> ActionFlyDown() const;
            Ent::Gen::ActionFlyDown setActionFlyDown() const;
            std::optional<Ent::Gen::ActionFlyFlap> ActionFlyFlap() const;
            Ent::Gen::ActionFlyFlap setActionFlyFlap() const;
            std::optional<Ent::Gen::ActionFlyUp> ActionFlyUp() const;
            Ent::Gen::ActionFlyUp setActionFlyUp() const;
            std::optional<Ent::Gen::ActionHit> ActionHit() const;
            Ent::Gen::ActionHit setActionHit() const;
            std::optional<Ent::Gen::ActionIdle> ActionIdle() const;
            Ent::Gen::ActionIdle setActionIdle() const;
            std::optional<Ent::Gen::ActionIncarnate> ActionIncarnate() const;
            Ent::Gen::ActionIncarnate setActionIncarnate() const;
            std::optional<Ent::Gen::ActionIncarnated> ActionIncarnated() const;
            Ent::Gen::ActionIncarnated setActionIncarnated() const;
            std::optional<Ent::Gen::ActionJump> ActionJump() const;
            Ent::Gen::ActionJump setActionJump() const;
            std::optional<Ent::Gen::ActionJumpOnto> ActionJumpOnto() const;
            Ent::Gen::ActionJumpOnto setActionJumpOnto() const;
            std::optional<Ent::Gen::ActionLand> ActionLand() const;
            Ent::Gen::ActionLand setActionLand() const;
            std::optional<Ent::Gen::ActionLandingMount> ActionLandingMount() const;
            Ent::Gen::ActionLandingMount setActionLandingMount() const;
            std::optional<Ent::Gen::ActionLookAt> ActionLookAt() const;
            Ent::Gen::ActionLookAt setActionLookAt() const;
            std::optional<Ent::Gen::ActionMountReception> ActionMountReception() const;
            Ent::Gen::ActionMountReception setActionMountReception() const;
            std::optional<Ent::Gen::ActionMove> ActionMove() const;
            Ent::Gen::ActionMove setActionMove() const;
            std::optional<Ent::Gen::ActionMoveProjectile> ActionMoveProjectile() const;
            Ent::Gen::ActionMoveProjectile setActionMoveProjectile() const;
            std::optional<Ent::Gen::ActionMoveTo> ActionMoveTo() const;
            Ent::Gen::ActionMoveTo setActionMoveTo() const;
            std::optional<Ent::Gen::ActionOrientMount> ActionOrientMount() const;
            Ent::Gen::ActionOrientMount setActionOrientMount() const;
            std::optional<Ent::Gen::ActionOutfitSpecialState> ActionOutfitSpecialState() const;
            Ent::Gen::ActionOutfitSpecialState setActionOutfitSpecialState() const;
            std::optional<Ent::Gen::ActionPathfindAndMove> ActionPathfindAndMove() const;
            Ent::Gen::ActionPathfindAndMove setActionPathfindAndMove() const;
            std::optional<Ent::Gen::ActionPatinate> ActionPatinate() const;
            Ent::Gen::ActionPatinate setActionPatinate() const;
            std::optional<Ent::Gen::ActionPlayAnim> ActionPlayAnim() const;
            Ent::Gen::ActionPlayAnim setActionPlayAnim() const;
            std::optional<Ent::Gen::ActionPropelled> ActionPropelled() const;
            Ent::Gen::ActionPropelled setActionPropelled() const;
            std::optional<Ent::Gen::ActionPushed> ActionPushed() const;
            Ent::Gen::ActionPushed setActionPushed() const;
            std::optional<Ent::Gen::ActionQuadStandUpState> ActionQuadStandUpState() const;
            Ent::Gen::ActionQuadStandUpState setActionQuadStandUpState() const;
            std::optional<Ent::Gen::ActionQuadStandUpStateIn> ActionQuadStandUpStateIn() const;
            Ent::Gen::ActionQuadStandUpStateIn setActionQuadStandUpStateIn() const;
            std::optional<Ent::Gen::ActionQuadStandUpStateOut> ActionQuadStandUpStateOut() const;
            Ent::Gen::ActionQuadStandUpStateOut setActionQuadStandUpStateOut() const;
            std::optional<Ent::Gen::ActionRagdoll> ActionRagdoll() const;
            Ent::Gen::ActionRagdoll setActionRagdoll() const;
            std::optional<Ent::Gen::ActionReviveMaskEffect> ActionReviveMaskEffect() const;
            Ent::Gen::ActionReviveMaskEffect setActionReviveMaskEffect() const;
            std::optional<Ent::Gen::ActionRiderStance> ActionRiderStance() const;
            Ent::Gen::ActionRiderStance setActionRiderStance() const;
            std::optional<Ent::Gen::ActionRise> ActionRise() const;
            Ent::Gen::ActionRise setActionRise() const;
            std::optional<Ent::Gen::ActionScaleRider> ActionScaleRider() const;
            Ent::Gen::ActionScaleRider setActionScaleRider() const;
            std::optional<Ent::Gen::ActionShakeOff> ActionShakeOff() const;
            Ent::Gen::ActionShakeOff setActionShakeOff() const;
            std::optional<Ent::Gen::ActionShamanVision> ActionShamanVision() const;
            Ent::Gen::ActionShamanVision setActionShamanVision() const;
            std::optional<Ent::Gen::ActionShootBeam> ActionShootBeam() const;
            Ent::Gen::ActionShootBeam setActionShootBeam() const;
            std::optional<Ent::Gen::ActionSlide> ActionSlide() const;
            Ent::Gen::ActionSlide setActionSlide() const;
            std::optional<Ent::Gen::ActionStartRun> ActionStartRun() const;
            Ent::Gen::ActionStartRun setActionStartRun() const;
            std::optional<Ent::Gen::ActionStop> ActionStop() const;
            Ent::Gen::ActionStop setActionStop() const;
            std::optional<Ent::Gen::ActionStrafe> ActionStrafe() const;
            Ent::Gen::ActionStrafe setActionStrafe() const;
            std::optional<Ent::Gen::ActionStrafeTurn> ActionStrafeTurn() const;
            Ent::Gen::ActionStrafeTurn setActionStrafeTurn() const;
            std::optional<Ent::Gen::ActionTakeOff> ActionTakeOff() const;
            Ent::Gen::ActionTakeOff setActionTakeOff() const;
            std::optional<Ent::Gen::ActionTalk> ActionTalk() const;
            Ent::Gen::ActionTalk setActionTalk() const;
            std::optional<Ent::Gen::ActionTopView> ActionTopView() const;
            Ent::Gen::ActionTopView setActionTopView() const;
            std::optional<Ent::Gen::ActionTriggerCrouch> ActionTriggerCrouch() const;
            Ent::Gen::ActionTriggerCrouch setActionTriggerCrouch() const;
            std::optional<Ent::Gen::ActionTriggerShamanVisionExit> ActionTriggerShamanVisionExit() const;
            Ent::Gen::ActionTriggerShamanVisionExit setActionTriggerShamanVisionExit() const;
            std::optional<Ent::Gen::ActionTriggerStandUp> ActionTriggerStandUp() const;
            Ent::Gen::ActionTriggerStandUp setActionTriggerStandUp() const;
            std::optional<Ent::Gen::ActionTurn> ActionTurn() const;
            Ent::Gen::ActionTurn setActionTurn() const;
            std::optional<Ent::Gen::ActionUnmount> ActionUnmount() const;
            Ent::Gen::ActionUnmount setActionUnmount() const;
            std::optional<Ent::Gen::ActionWait> ActionWait() const;
            Ent::Gen::ActionWait setActionWait() const;
            std::optional<Ent::Gen::ActorStateAimCharge> ActorStateAimCharge() const;
            Ent::Gen::ActorStateAimCharge setActorStateAimCharge() const;
            std::optional<Ent::Gen::ActorStateAlive> ActorStateAlive() const;
            Ent::Gen::ActorStateAlive setActorStateAlive() const;
            std::optional<Ent::Gen::ActorStateAnsweringCall> ActorStateAnsweringCall() const;
            Ent::Gen::ActorStateAnsweringCall setActorStateAnsweringCall() const;
            std::optional<Ent::Gen::ActorStateApplyHit> ActorStateApplyHit() const;
            Ent::Gen::ActorStateApplyHit setActorStateApplyHit() const;
            std::optional<Ent::Gen::ActorStateAttitudeAggressive> ActorStateAttitudeAggressive() const;
            Ent::Gen::ActorStateAttitudeAggressive setActorStateAttitudeAggressive() const;
            std::optional<Ent::Gen::ActorStateBehaviorState> ActorStateBehaviorState() const;
            Ent::Gen::ActorStateBehaviorState setActorStateBehaviorState() const;
            std::optional<Ent::Gen::ActorStateBeingImmersed> ActorStateBeingImmersed() const;
            Ent::Gen::ActorStateBeingImmersed setActorStateBeingImmersed() const;
            std::optional<Ent::Gen::ActorStateBeingImmersedFromInAir> ActorStateBeingImmersedFromInAir() const;
            Ent::Gen::ActorStateBeingImmersedFromInAir setActorStateBeingImmersedFromInAir() const;
            std::optional<Ent::Gen::ActorStateBeingImmersedFromOnGround> ActorStateBeingImmersedFromOnGround() const;
            Ent::Gen::ActorStateBeingImmersedFromOnGround setActorStateBeingImmersedFromOnGround() const;
            std::optional<Ent::Gen::ActorStateBeingInAir> ActorStateBeingInAir() const;
            Ent::Gen::ActorStateBeingInAir setActorStateBeingInAir() const;
            std::optional<Ent::Gen::ActorStateBeingOnGround> ActorStateBeingOnGround() const;
            Ent::Gen::ActorStateBeingOnGround setActorStateBeingOnGround() const;
            std::optional<Ent::Gen::ActorStateBeingOnGroundFromImmersed> ActorStateBeingOnGroundFromImmersed() const;
            Ent::Gen::ActorStateBeingOnGroundFromImmersed setActorStateBeingOnGroundFromImmersed() const;
            std::optional<Ent::Gen::ActorStateBeingOnMount> ActorStateBeingOnMount() const;
            Ent::Gen::ActorStateBeingOnMount setActorStateBeingOnMount() const;
            std::optional<Ent::Gen::ActorStateBeingOnPossessedGPE> ActorStateBeingOnPossessedGPE() const;
            Ent::Gen::ActorStateBeingOnPossessedGPE setActorStateBeingOnPossessedGPE() const;
            std::optional<Ent::Gen::ActorStateBeingRided> ActorStateBeingRided() const;
            Ent::Gen::ActorStateBeingRided setActorStateBeingRided() const;
            std::optional<Ent::Gen::ActorStateBendingConstraint> ActorStateBendingConstraint() const;
            Ent::Gen::ActorStateBendingConstraint setActorStateBendingConstraint() const;
            std::optional<Ent::Gen::ActorStateBendingTree> ActorStateBendingTree() const;
            Ent::Gen::ActorStateBendingTree setActorStateBendingTree() const;
            std::optional<Ent::Gen::ActorStateBiteEntityLiving> ActorStateBiteEntityLiving() const;
            Ent::Gen::ActorStateBiteEntityLiving setActorStateBiteEntityLiving() const;
            std::optional<Ent::Gen::ActorStateBiteJumpOut> ActorStateBiteJumpOut() const;
            Ent::Gen::ActorStateBiteJumpOut setActorStateBiteJumpOut() const;
            std::optional<Ent::Gen::ActorStateBittenRegenerated> ActorStateBittenRegenerated() const;
            Ent::Gen::ActorStateBittenRegenerated setActorStateBittenRegenerated() const;
            std::optional<Ent::Gen::ActorStateBittenShaked> ActorStateBittenShaked() const;
            Ent::Gen::ActorStateBittenShaked setActorStateBittenShaked() const;
            std::optional<Ent::Gen::ActorStateBuried> ActorStateBuried() const;
            Ent::Gen::ActorStateBuried setActorStateBuried() const;
            std::optional<Ent::Gen::ActorStateCallingFollower> ActorStateCallingFollower() const;
            Ent::Gen::ActorStateCallingFollower setActorStateCallingFollower() const;
            std::optional<Ent::Gen::ActorStateCatapulted> ActorStateCatapulted() const;
            Ent::Gen::ActorStateCatapulted setActorStateCatapulted() const;
            std::optional<Ent::Gen::ActorStateCatapultedLand> ActorStateCatapultedLand() const;
            Ent::Gen::ActorStateCatapultedLand setActorStateCatapultedLand() const;
            std::optional<Ent::Gen::ActorStateChangeEnergySide> ActorStateChangeEnergySide() const;
            Ent::Gen::ActorStateChangeEnergySide setActorStateChangeEnergySide() const;
            std::optional<Ent::Gen::ActorStateChargeSpendLife> ActorStateChargeSpendLife() const;
            Ent::Gen::ActorStateChargeSpendLife setActorStateChargeSpendLife() const;
            std::optional<Ent::Gen::ActorStateConvertWithFlow> ActorStateConvertWithFlow() const;
            Ent::Gen::ActorStateConvertWithFlow setActorStateConvertWithFlow() const;
            std::optional<Ent::Gen::ActorStateCreature> ActorStateCreature() const;
            Ent::Gen::ActorStateCreature setActorStateCreature() const;
            std::optional<Ent::Gen::ActorStateDead> ActorStateDead() const;
            Ent::Gen::ActorStateDead setActorStateDead() const;
            std::optional<Ent::Gen::ActorStateDisabled> ActorStateDisabled() const;
            Ent::Gen::ActorStateDisabled setActorStateDisabled() const;
            std::optional<Ent::Gen::ActorStateDisabledIn> ActorStateDisabledIn() const;
            Ent::Gen::ActorStateDisabledIn setActorStateDisabledIn() const;
            std::optional<Ent::Gen::ActorStateDisabledOut> ActorStateDisabledOut() const;
            Ent::Gen::ActorStateDisabledOut setActorStateDisabledOut() const;
            std::optional<Ent::Gen::ActorStateDodge3D> ActorStateDodge3D() const;
            Ent::Gen::ActorStateDodge3D setActorStateDodge3D() const;
            std::optional<Ent::Gen::ActorStateDucking> ActorStateDucking() const;
            Ent::Gen::ActorStateDucking setActorStateDucking() const;
            std::optional<Ent::Gen::ActorStateEnergyShooting> ActorStateEnergyShooting() const;
            Ent::Gen::ActorStateEnergyShooting setActorStateEnergyShooting() const;
            std::optional<Ent::Gen::ActorStateExitingFly> ActorStateExitingFly() const;
            Ent::Gen::ActorStateExitingFly setActorStateExitingFly() const;
            std::optional<Ent::Gen::ActorStateFlockingAttackFlocking> ActorStateFlockingAttackFlocking() const;
            Ent::Gen::ActorStateFlockingAttackFlocking setActorStateFlockingAttackFlocking() const;
            std::optional<Ent::Gen::ActorStateFlockingChangingParams> ActorStateFlockingChangingParams() const;
            Ent::Gen::ActorStateFlockingChangingParams setActorStateFlockingChangingParams() const;
            std::optional<Ent::Gen::ActorStateFlockingIndividualSpawning> ActorStateFlockingIndividualSpawning() const;
            Ent::Gen::ActorStateFlockingIndividualSpawning setActorStateFlockingIndividualSpawning() const;
            std::optional<Ent::Gen::ActorStateFlockingLiving> ActorStateFlockingLiving() const;
            Ent::Gen::ActorStateFlockingLiving setActorStateFlockingLiving() const;
            std::optional<Ent::Gen::ActorStateFlockingRigidbodyBeingActive> ActorStateFlockingRigidbodyBeingActive() const;
            Ent::Gen::ActorStateFlockingRigidbodyBeingActive setActorStateFlockingRigidbodyBeingActive() const;
            std::optional<Ent::Gen::ActorStateFluidSlowDown> ActorStateFluidSlowDown() const;
            Ent::Gen::ActorStateFluidSlowDown setActorStateFluidSlowDown() const;
            std::optional<Ent::Gen::ActorStateForceAgainstSlope> ActorStateForceAgainstSlope() const;
            Ent::Gen::ActorStateForceAgainstSlope setActorStateForceAgainstSlope() const;
            std::optional<Ent::Gen::ActorStateHasNoBody> ActorStateHasNoBody() const;
            Ent::Gen::ActorStateHasNoBody setActorStateHasNoBody() const;
            std::optional<Ent::Gen::ActorStateHeld> ActorStateHeld() const;
            Ent::Gen::ActorStateHeld setActorStateHeld() const;
            std::optional<Ent::Gen::ActorStateHitEnergyWall> ActorStateHitEnergyWall() const;
            Ent::Gen::ActorStateHitEnergyWall setActorStateHitEnergyWall() const;
            std::optional<Ent::Gen::ActorStateHoldingItem> ActorStateHoldingItem() const;
            Ent::Gen::ActorStateHoldingItem setActorStateHoldingItem() const;
            std::optional<Ent::Gen::ActorStateIKConstraint> ActorStateIKConstraint() const;
            Ent::Gen::ActorStateIKConstraint setActorStateIKConstraint() const;
            std::optional<Ent::Gen::ActorStateInvincible> ActorStateInvincible() const;
            Ent::Gen::ActorStateInvincible setActorStateInvincible() const;
            std::optional<Ent::Gen::ActorStateLeavingLava> ActorStateLeavingLava() const;
            Ent::Gen::ActorStateLeavingLava setActorStateLeavingLava() const;
            std::optional<Ent::Gen::ActorStateLosingOxygen> ActorStateLosingOxygen() const;
            Ent::Gen::ActorStateLosingOxygen setActorStateLosingOxygen() const;
            std::optional<Ent::Gen::ActorStateMeetingLava> ActorStateMeetingLava() const;
            Ent::Gen::ActorStateMeetingLava setActorStateMeetingLava() const;
            std::optional<Ent::Gen::ActorStateMoveAlongBezier> ActorStateMoveAlongBezier() const;
            Ent::Gen::ActorStateMoveAlongBezier setActorStateMoveAlongBezier() const;
            std::optional<Ent::Gen::ActorStateMovingClamber> ActorStateMovingClamber() const;
            Ent::Gen::ActorStateMovingClamber setActorStateMovingClamber() const;
            std::optional<Ent::Gen::ActorStateMovingDive> ActorStateMovingDive() const;
            Ent::Gen::ActorStateMovingDive setActorStateMovingDive() const;
            std::optional<Ent::Gen::ActorStateMovingFall> ActorStateMovingFall() const;
            Ent::Gen::ActorStateMovingFall setActorStateMovingFall() const;
            std::optional<Ent::Gen::ActorStateMovingFly> ActorStateMovingFly() const;
            Ent::Gen::ActorStateMovingFly setActorStateMovingFly() const;
            std::optional<Ent::Gen::ActorStateMovingProne> ActorStateMovingProne() const;
            Ent::Gen::ActorStateMovingProne setActorStateMovingProne() const;
            std::optional<Ent::Gen::ActorStateMovingRide> ActorStateMovingRide() const;
            Ent::Gen::ActorStateMovingRide setActorStateMovingRide() const;
            std::optional<Ent::Gen::ActorStateMovingStandUp> ActorStateMovingStandUp() const;
            Ent::Gen::ActorStateMovingStandUp setActorStateMovingStandUp() const;
            std::optional<Ent::Gen::ActorStateMovingSwim> ActorStateMovingSwim() const;
            Ent::Gen::ActorStateMovingSwim setActorStateMovingSwim() const;
            std::optional<Ent::Gen::ActorStateNavigationMesh> ActorStateNavigationMesh() const;
            Ent::Gen::ActorStateNavigationMesh setActorStateNavigationMesh() const;
            std::optional<Ent::Gen::ActorStatePossessFlocking> ActorStatePossessFlocking() const;
            Ent::Gen::ActorStatePossessFlocking setActorStatePossessFlocking() const;
            std::optional<Ent::Gen::ActorStatePossessGPE> ActorStatePossessGPE() const;
            Ent::Gen::ActorStatePossessGPE setActorStatePossessGPE() const;
            std::optional<Ent::Gen::ActorStateReactingLava> ActorStateReactingLava() const;
            Ent::Gen::ActorStateReactingLava setActorStateReactingLava() const;
            std::optional<Ent::Gen::ActorStateRecover> ActorStateRecover() const;
            Ent::Gen::ActorStateRecover setActorStateRecover() const;
            std::optional<Ent::Gen::ActorStateRequestingHealing> ActorStateRequestingHealing() const;
            Ent::Gen::ActorStateRequestingHealing setActorStateRequestingHealing() const;
            std::optional<Ent::Gen::ActorStateRequestingWaiting> ActorStateRequestingWaiting() const;
            Ent::Gen::ActorStateRequestingWaiting setActorStateRequestingWaiting() const;
            std::optional<Ent::Gen::ActorStateScreaming> ActorStateScreaming() const;
            Ent::Gen::ActorStateScreaming setActorStateScreaming() const;
            std::optional<Ent::Gen::ActorStateSendMission> ActorStateSendMission() const;
            Ent::Gen::ActorStateSendMission setActorStateSendMission() const;
            std::optional<Ent::Gen::ActorStateShamanItemLiving> ActorStateShamanItemLiving() const;
            Ent::Gen::ActorStateShamanItemLiving setActorStateShamanItemLiving() const;
            std::optional<Ent::Gen::ActorStateShamanItemPartState> ActorStateShamanItemPartState() const;
            Ent::Gen::ActorStateShamanItemPartState setActorStateShamanItemPartState() const;
            std::optional<Ent::Gen::ActorStateShapeshift> ActorStateShapeshift() const;
            Ent::Gen::ActorStateShapeshift setActorStateShapeshift() const;
            std::optional<Ent::Gen::ActorStateShootingFlow> ActorStateShootingFlow() const;
            Ent::Gen::ActorStateShootingFlow setActorStateShootingFlow() const;
            std::optional<Ent::Gen::ActorStateSink> ActorStateSink() const;
            Ent::Gen::ActorStateSink setActorStateSink() const;
            std::optional<Ent::Gen::ActorStateSkeletonPartPickUpRequest> ActorStateSkeletonPartPickUpRequest() const;
            Ent::Gen::ActorStateSkeletonPartPickUpRequest setActorStateSkeletonPartPickUpRequest() const;
            std::optional<Ent::Gen::ActorStateSkeletonPartPickUpState> ActorStateSkeletonPartPickUpState() const;
            Ent::Gen::ActorStateSkeletonPartPickUpState setActorStateSkeletonPartPickUpState() const;
            std::optional<Ent::Gen::ActorStateSleeping> ActorStateSleeping() const;
            Ent::Gen::ActorStateSleeping setActorStateSleeping() const;
            std::optional<Ent::Gen::ActorStateSlope> ActorStateSlope() const;
            Ent::Gen::ActorStateSlope setActorStateSlope() const;
            std::optional<Ent::Gen::ActorStateSoulRespawn> ActorStateSoulRespawn() const;
            Ent::Gen::ActorStateSoulRespawn setActorStateSoulRespawn() const;
            std::optional<Ent::Gen::ActorStateSoulWaitingToRespawn> ActorStateSoulWaitingToRespawn() const;
            Ent::Gen::ActorStateSoulWaitingToRespawn setActorStateSoulWaitingToRespawn() const;
            std::optional<Ent::Gen::ActorStateSpeedMultiplier> ActorStateSpeedMultiplier() const;
            Ent::Gen::ActorStateSpeedMultiplier setActorStateSpeedMultiplier() const;
            std::optional<Ent::Gen::ActorStateStopAttitudeAggressive> ActorStateStopAttitudeAggressive() const;
            Ent::Gen::ActorStateStopAttitudeAggressive setActorStateStopAttitudeAggressive() const;
            std::optional<Ent::Gen::ActorStateTaunting> ActorStateTaunting() const;
            Ent::Gen::ActorStateTaunting setActorStateTaunting() const;
            std::optional<Ent::Gen::ActorStateTeleport> ActorStateTeleport() const;
            Ent::Gen::ActorStateTeleport setActorStateTeleport() const;
            std::optional<Ent::Gen::ActorStateTeleportToTarget> ActorStateTeleportToTarget() const;
            Ent::Gen::ActorStateTeleportToTarget setActorStateTeleportToTarget() const;
            std::optional<Ent::Gen::ActorStateTeleportWhileMoving> ActorStateTeleportWhileMoving() const;
            Ent::Gen::ActorStateTeleportWhileMoving setActorStateTeleportWhileMoving() const;
            std::optional<Ent::Gen::ActorStateTryEquipShamanStaff> ActorStateTryEquipShamanStaff() const;
            Ent::Gen::ActorStateTryEquipShamanStaff setActorStateTryEquipShamanStaff() const;
            std::optional<Ent::Gen::ActorStateTryUpgradeShamanStaff> ActorStateTryUpgradeShamanStaff() const;
            Ent::Gen::ActorStateTryUpgradeShamanStaff setActorStateTryUpgradeShamanStaff() const;
            std::optional<Ent::Gen::EntityStateAboutToBeHatched> EntityStateAboutToBeHatched() const;
            Ent::Gen::EntityStateAboutToBeHatched setEntityStateAboutToBeHatched() const;
            std::optional<Ent::Gen::EntityStateAerialJump> EntityStateAerialJump() const;
            Ent::Gen::EntityStateAerialJump setEntityStateAerialJump() const;
            std::optional<Ent::Gen::EntityStateAimAt> EntityStateAimAt() const;
            Ent::Gen::EntityStateAimAt setEntityStateAimAt() const;
            std::optional<Ent::Gen::EntityStateAirControl> EntityStateAirControl() const;
            Ent::Gen::EntityStateAirControl setEntityStateAirControl() const;
            std::optional<Ent::Gen::EntityStateApplyExtraLife> EntityStateApplyExtraLife() const;
            Ent::Gen::EntityStateApplyExtraLife setEntityStateApplyExtraLife() const;
            std::optional<Ent::Gen::EntityStateAskStaffGuide> EntityStateAskStaffGuide() const;
            Ent::Gen::EntityStateAskStaffGuide setEntityStateAskStaffGuide() const;
            std::optional<Ent::Gen::EntityStateAttackDive> EntityStateAttackDive() const;
            Ent::Gen::EntityStateAttackDive setEntityStateAttackDive() const;
            std::optional<Ent::Gen::EntityStateAttitudeGroggy> EntityStateAttitudeGroggy() const;
            Ent::Gen::EntityStateAttitudeGroggy setEntityStateAttitudeGroggy() const;
            std::optional<Ent::Gen::EntityStateBackwardDodge> EntityStateBackwardDodge() const;
            Ent::Gen::EntityStateBackwardDodge setEntityStateBackwardDodge() const;
            std::optional<Ent::Gen::EntityStateBackwardLand> EntityStateBackwardLand() const;
            Ent::Gen::EntityStateBackwardLand setEntityStateBackwardLand() const;
            std::optional<Ent::Gen::EntityStateBeingBlockedByVine> EntityStateBeingBlockedByVine() const;
            Ent::Gen::EntityStateBeingBlockedByVine setEntityStateBeingBlockedByVine() const;
            std::optional<Ent::Gen::EntityStateBeingInReeds> EntityStateBeingInReeds() const;
            Ent::Gen::EntityStateBeingInReeds setEntityStateBeingInReeds() const;
            std::optional<Ent::Gen::EntityStateBeingLinked> EntityStateBeingLinked() const;
            Ent::Gen::EntityStateBeingLinked setEntityStateBeingLinked() const;
            std::optional<Ent::Gen::EntityStateBeingOnSlope> EntityStateBeingOnSlope() const;
            Ent::Gen::EntityStateBeingOnSlope setEntityStateBeingOnSlope() const;
            std::optional<Ent::Gen::EntityStateBeingOnSpike> EntityStateBeingOnSpike() const;
            Ent::Gen::EntityStateBeingOnSpike setEntityStateBeingOnSpike() const;
            std::optional<Ent::Gen::EntityStateBite> EntityStateBite() const;
            Ent::Gen::EntityStateBite setEntityStateBite() const;
            std::optional<Ent::Gen::EntityStateBiteAttack> EntityStateBiteAttack() const;
            Ent::Gen::EntityStateBiteAttack setEntityStateBiteAttack() const;
            std::optional<Ent::Gen::EntityStateBiteIn> EntityStateBiteIn() const;
            Ent::Gen::EntityStateBiteIn setEntityStateBiteIn() const;
            std::optional<Ent::Gen::EntityStateBiteOut> EntityStateBiteOut() const;
            Ent::Gen::EntityStateBiteOut setEntityStateBiteOut() const;
            std::optional<Ent::Gen::EntityStateBitten> EntityStateBitten() const;
            Ent::Gen::EntityStateBitten setEntityStateBitten() const;
            std::optional<Ent::Gen::EntityStateBittenDefense> EntityStateBittenDefense() const;
            Ent::Gen::EntityStateBittenDefense setEntityStateBittenDefense() const;
            std::optional<Ent::Gen::EntityStateBoidsHomePos> EntityStateBoidsHomePos() const;
            Ent::Gen::EntityStateBoidsHomePos setEntityStateBoidsHomePos() const;
            std::optional<Ent::Gen::EntityStateBounce> EntityStateBounce() const;
            Ent::Gen::EntityStateBounce setEntityStateBounce() const;
            std::optional<Ent::Gen::EntityStateBounceLand> EntityStateBounceLand() const;
            Ent::Gen::EntityStateBounceLand setEntityStateBounceLand() const;
            std::optional<Ent::Gen::EntityStateBreakableBreaking> EntityStateBreakableBreaking() const;
            Ent::Gen::EntityStateBreakableBreaking setEntityStateBreakableBreaking() const;
            std::optional<Ent::Gen::EntityStateBreakableBroken> EntityStateBreakableBroken() const;
            Ent::Gen::EntityStateBreakableBroken setEntityStateBreakableBroken() const;
            std::optional<Ent::Gen::EntityStateBreakableEntire> EntityStateBreakableEntire() const;
            Ent::Gen::EntityStateBreakableEntire setEntityStateBreakableEntire() const;
            std::optional<Ent::Gen::EntityStateBridgeAttached> EntityStateBridgeAttached() const;
            Ent::Gen::EntityStateBridgeAttached setEntityStateBridgeAttached() const;
            std::optional<Ent::Gen::EntityStateBridgeAttracted> EntityStateBridgeAttracted() const;
            Ent::Gen::EntityStateBridgeAttracted setEntityStateBridgeAttracted() const;
            std::optional<Ent::Gen::EntityStateBridgeBeingControlled> EntityStateBridgeBeingControlled() const;
            Ent::Gen::EntityStateBridgeBeingControlled setEntityStateBridgeBeingControlled() const;
            std::optional<Ent::Gen::EntityStateCallAndMountSpiritAnimal> EntityStateCallAndMountSpiritAnimal() const;
            Ent::Gen::EntityStateCallAndMountSpiritAnimal setEntityStateCallAndMountSpiritAnimal() const;
            std::optional<Ent::Gen::EntityStateCanNotBePerceived> EntityStateCanNotBePerceived() const;
            Ent::Gen::EntityStateCanNotBePerceived setEntityStateCanNotBePerceived() const;
            std::optional<Ent::Gen::EntityStateChargeMode> EntityStateChargeMode() const;
            Ent::Gen::EntityStateChargeMode setEntityStateChargeMode() const;
            std::optional<Ent::Gen::EntityStateChargedJump> EntityStateChargedJump() const;
            Ent::Gen::EntityStateChargedJump setEntityStateChargedJump() const;
            std::optional<Ent::Gen::EntityStateChargingJump> EntityStateChargingJump() const;
            Ent::Gen::EntityStateChargingJump setEntityStateChargingJump() const;
            std::optional<Ent::Gen::EntityStateCinematicCompleted> EntityStateCinematicCompleted() const;
            Ent::Gen::EntityStateCinematicCompleted setEntityStateCinematicCompleted() const;
            std::optional<Ent::Gen::EntityStateCinematicReady> EntityStateCinematicReady() const;
            Ent::Gen::EntityStateCinematicReady setEntityStateCinematicReady() const;
            std::optional<Ent::Gen::EntityStateClassicDodge> EntityStateClassicDodge() const;
            Ent::Gen::EntityStateClassicDodge setEntityStateClassicDodge() const;
            std::optional<Ent::Gen::EntityStateClassicLand> EntityStateClassicLand() const;
            Ent::Gen::EntityStateClassicLand setEntityStateClassicLand() const;
            std::optional<Ent::Gen::EntityStateClimbWaterfall> EntityStateClimbWaterfall() const;
            Ent::Gen::EntityStateClimbWaterfall setEntityStateClimbWaterfall() const;
            std::optional<Ent::Gen::EntityStateClimbWaterfallImpulse> EntityStateClimbWaterfallImpulse() const;
            Ent::Gen::EntityStateClimbWaterfallImpulse setEntityStateClimbWaterfallImpulse() const;
            std::optional<Ent::Gen::EntityStateCollectVertebrae> EntityStateCollectVertebrae() const;
            Ent::Gen::EntityStateCollectVertebrae setEntityStateCollectVertebrae() const;
            std::optional<Ent::Gen::EntityStateCombat> EntityStateCombat() const;
            Ent::Gen::EntityStateCombat setEntityStateCombat() const;
            std::optional<Ent::Gen::EntityStateConstrainedInput> EntityStateConstrainedInput() const;
            Ent::Gen::EntityStateConstrainedInput setEntityStateConstrainedInput() const;
            std::optional<Ent::Gen::EntityStateConstrainedMove> EntityStateConstrainedMove() const;
            Ent::Gen::EntityStateConstrainedMove setEntityStateConstrainedMove() const;
            std::optional<Ent::Gen::EntityStateControlGPE> EntityStateControlGPE() const;
            Ent::Gen::EntityStateControlGPE setEntityStateControlGPE() const;
            std::optional<Ent::Gen::EntityStateCreatureHatching> EntityStateCreatureHatching() const;
            Ent::Gen::EntityStateCreatureHatching setEntityStateCreatureHatching() const;
            std::optional<Ent::Gen::EntityStateCreatureProfile> EntityStateCreatureProfile() const;
            Ent::Gen::EntityStateCreatureProfile setEntityStateCreatureProfile() const;
            std::optional<Ent::Gen::EntityStateDamageLand> EntityStateDamageLand() const;
            Ent::Gen::EntityStateDamageLand setEntityStateDamageLand() const;
            std::optional<Ent::Gen::EntityStateDeathLand> EntityStateDeathLand() const;
            Ent::Gen::EntityStateDeathLand setEntityStateDeathLand() const;
            std::optional<Ent::Gen::EntityStateDisablePerceptionRequest> EntityStateDisablePerceptionRequest() const;
            Ent::Gen::EntityStateDisablePerceptionRequest setEntityStateDisablePerceptionRequest() const;
            std::optional<Ent::Gen::EntityStateDisabledVertebrae> EntityStateDisabledVertebrae() const;
            Ent::Gen::EntityStateDisabledVertebrae setEntityStateDisabledVertebrae() const;
            std::optional<Ent::Gen::EntityStateDisguise> EntityStateDisguise() const;
            Ent::Gen::EntityStateDisguise setEntityStateDisguise() const;
            std::optional<Ent::Gen::EntityStateDisplayHatchingCost> EntityStateDisplayHatchingCost() const;
            Ent::Gen::EntityStateDisplayHatchingCost setEntityStateDisplayHatchingCost() const;
            std::optional<Ent::Gen::EntityStateDodgeCooldown> EntityStateDodgeCooldown() const;
            Ent::Gen::EntityStateDodgeCooldown setEntityStateDodgeCooldown() const;
            std::optional<Ent::Gen::EntityStateEjectedLand> EntityStateEjectedLand() const;
            Ent::Gen::EntityStateEjectedLand setEntityStateEjectedLand() const;
            std::optional<Ent::Gen::EntityStateEnergyRootAbortHatching> EntityStateEnergyRootAbortHatching() const;
            Ent::Gen::EntityStateEnergyRootAbortHatching setEntityStateEnergyRootAbortHatching() const;
            std::optional<Ent::Gen::EntityStateEnergyRootHatching> EntityStateEnergyRootHatching() const;
            Ent::Gen::EntityStateEnergyRootHatching setEntityStateEnergyRootHatching() const;
            std::optional<Ent::Gen::EntityStateEnergySide> EntityStateEnergySide() const;
            Ent::Gen::EntityStateEnergySide setEntityStateEnergySide() const;
            std::optional<Ent::Gen::EntityStateEnergySpoutState> EntityStateEnergySpoutState() const;
            Ent::Gen::EntityStateEnergySpoutState setEntityStateEnergySpoutState() const;
            std::optional<Ent::Gen::EntityStateExtraLife> EntityStateExtraLife() const;
            Ent::Gen::EntityStateExtraLife setEntityStateExtraLife() const;
            std::optional<Ent::Gen::EntityStateFailingOrder> EntityStateFailingOrder() const;
            Ent::Gen::EntityStateFailingOrder setEntityStateFailingOrder() const;
            std::optional<Ent::Gen::EntityStateFall> EntityStateFall() const;
            Ent::Gen::EntityStateFall setEntityStateFall() const;
            std::optional<Ent::Gen::EntityStateFallDying> EntityStateFallDying() const;
            Ent::Gen::EntityStateFallDying setEntityStateFallDying() const;
            std::optional<Ent::Gen::EntityStateFallInjured> EntityStateFallInjured() const;
            Ent::Gen::EntityStateFallInjured setEntityStateFallInjured() const;
            std::optional<Ent::Gen::EntityStateFallSafe> EntityStateFallSafe() const;
            Ent::Gen::EntityStateFallSafe setEntityStateFallSafe() const;
            std::optional<Ent::Gen::EntityStateFastRun> EntityStateFastRun() const;
            Ent::Gen::EntityStateFastRun setEntityStateFastRun() const;
            std::optional<Ent::Gen::EntityStateForceCanBeTargeted> EntityStateForceCanBeTargeted() const;
            Ent::Gen::EntityStateForceCanBeTargeted setEntityStateForceCanBeTargeted() const;
            std::optional<Ent::Gen::EntityStateGrab> EntityStateGrab() const;
            Ent::Gen::EntityStateGrab setEntityStateGrab() const;
            std::optional<Ent::Gen::EntityStateGrabAttack> EntityStateGrabAttack() const;
            Ent::Gen::EntityStateGrabAttack setEntityStateGrabAttack() const;
            std::optional<Ent::Gen::EntityStateGrabIn> EntityStateGrabIn() const;
            Ent::Gen::EntityStateGrabIn setEntityStateGrabIn() const;
            std::optional<Ent::Gen::EntityStateGrabOut> EntityStateGrabOut() const;
            Ent::Gen::EntityStateGrabOut setEntityStateGrabOut() const;
            std::optional<Ent::Gen::EntityStateGrabbed> EntityStateGrabbed() const;
            Ent::Gen::EntityStateGrabbed setEntityStateGrabbed() const;
            std::optional<Ent::Gen::EntityStateGrabbedIn> EntityStateGrabbedIn() const;
            Ent::Gen::EntityStateGrabbedIn setEntityStateGrabbedIn() const;
            std::optional<Ent::Gen::EntityStateGrabbedOut> EntityStateGrabbedOut() const;
            Ent::Gen::EntityStateGrabbedOut setEntityStateGrabbedOut() const;
            std::optional<Ent::Gen::EntityStateGrasp> EntityStateGrasp() const;
            Ent::Gen::EntityStateGrasp setEntityStateGrasp() const;
            std::optional<Ent::Gen::EntityStateGroundedJump> EntityStateGroundedJump() const;
            Ent::Gen::EntityStateGroundedJump setEntityStateGroundedJump() const;
            std::optional<Ent::Gen::EntityStateHide> EntityStateHide() const;
            Ent::Gen::EntityStateHide setEntityStateHide() const;
            std::optional<Ent::Gen::EntityStateHideIn> EntityStateHideIn() const;
            Ent::Gen::EntityStateHideIn setEntityStateHideIn() const;
            std::optional<Ent::Gen::EntityStateHideOut> EntityStateHideOut() const;
            Ent::Gen::EntityStateHideOut setEntityStateHideOut() const;
            std::optional<Ent::Gen::EntityStateHintFull> EntityStateHintFull() const;
            Ent::Gen::EntityStateHintFull setEntityStateHintFull() const;
            std::optional<Ent::Gen::EntityStateHintLight> EntityStateHintLight() const;
            Ent::Gen::EntityStateHintLight setEntityStateHintLight() const;
            std::optional<Ent::Gen::EntityStateHintNone> EntityStateHintNone() const;
            Ent::Gen::EntityStateHintNone setEntityStateHintNone() const;
            std::optional<Ent::Gen::EntityStateHitWall> EntityStateHitWall() const;
            Ent::Gen::EntityStateHitWall setEntityStateHitWall() const;
            std::optional<Ent::Gen::EntityStateHoldingStaffVertebras> EntityStateHoldingStaffVertebras() const;
            Ent::Gen::EntityStateHoldingStaffVertebras setEntityStateHoldingStaffVertebras() const;
            std::optional<Ent::Gen::EntityStateImmersedJump> EntityStateImmersedJump() const;
            Ent::Gen::EntityStateImmersedJump setEntityStateImmersedJump() const;
            std::optional<Ent::Gen::EntityStateInVertebraeArea> EntityStateInVertebraeArea() const;
            Ent::Gen::EntityStateInVertebraeArea setEntityStateInVertebraeArea() const;
            std::optional<Ent::Gen::EntityStateIncapacitated> EntityStateIncapacitated() const;
            Ent::Gen::EntityStateIncapacitated setEntityStateIncapacitated() const;
            std::optional<Ent::Gen::EntityStateInconvertible> EntityStateInconvertible() const;
            Ent::Gen::EntityStateInconvertible setEntityStateInconvertible() const;
            std::optional<Ent::Gen::EntityStateInjured> EntityStateInjured() const;
            Ent::Gen::EntityStateInjured setEntityStateInjured() const;
            std::optional<Ent::Gen::EntityStateInteractedGPE> EntityStateInteractedGPE() const;
            Ent::Gen::EntityStateInteractedGPE setEntityStateInteractedGPE() const;
            std::optional<Ent::Gen::EntityStateJumpHeightMultiplier> EntityStateJumpHeightMultiplier() const;
            Ent::Gen::EntityStateJumpHeightMultiplier setEntityStateJumpHeightMultiplier() const;
            std::optional<Ent::Gen::EntityStateJustStarted> EntityStateJustStarted() const;
            Ent::Gen::EntityStateJustStarted setEntityStateJustStarted() const;
            std::optional<Ent::Gen::EntityStateLateralDodge> EntityStateLateralDodge() const;
            Ent::Gen::EntityStateLateralDodge setEntityStateLateralDodge() const;
            std::optional<Ent::Gen::EntityStateLateralLand> EntityStateLateralLand() const;
            Ent::Gen::EntityStateLateralLand setEntityStateLateralLand() const;
            std::optional<Ent::Gen::EntityStateManageChildEntityPool> EntityStateManageChildEntityPool() const;
            Ent::Gen::EntityStateManageChildEntityPool setEntityStateManageChildEntityPool() const;
            std::optional<Ent::Gen::EntityStateMask> EntityStateMask() const;
            Ent::Gen::EntityStateMask setEntityStateMask() const;
            std::optional<Ent::Gen::EntityStateMeditateToInteract> EntityStateMeditateToInteract() const;
            Ent::Gen::EntityStateMeditateToInteract setEntityStateMeditateToInteract() const;
            std::optional<Ent::Gen::EntityStateMineRespawning> EntityStateMineRespawning() const;
            Ent::Gen::EntityStateMineRespawning setEntityStateMineRespawning() const;
            std::optional<Ent::Gen::EntityStateMineScaling> EntityStateMineScaling() const;
            Ent::Gen::EntityStateMineScaling setEntityStateMineScaling() const;
            std::optional<Ent::Gen::EntityStateMotionConstrained> EntityStateMotionConstrained() const;
            Ent::Gen::EntityStateMotionConstrained setEntityStateMotionConstrained() const;
            std::optional<Ent::Gen::EntityStateMotionConstrainedLand> EntityStateMotionConstrainedLand() const;
            Ent::Gen::EntityStateMotionConstrainedLand setEntityStateMotionConstrainedLand() const;
            std::optional<Ent::Gen::EntityStateMoveOnOffMeshLink> EntityStateMoveOnOffMeshLink() const;
            Ent::Gen::EntityStateMoveOnOffMeshLink setEntityStateMoveOnOffMeshLink() const;
            std::optional<Ent::Gen::EntityStateOrderingAttack> EntityStateOrderingAttack() const;
            Ent::Gen::EntityStateOrderingAttack setEntityStateOrderingAttack() const;
            std::optional<Ent::Gen::EntityStateOrientedDrift> EntityStateOrientedDrift() const;
            Ent::Gen::EntityStateOrientedDrift setEntityStateOrientedDrift() const;
            std::optional<Ent::Gen::EntityStateParried> EntityStateParried() const;
            Ent::Gen::EntityStateParried setEntityStateParried() const;
            std::optional<Ent::Gen::EntityStateParry> EntityStateParry() const;
            Ent::Gen::EntityStateParry setEntityStateParry() const;
            std::optional<Ent::Gen::EntityStateParryCooldown> EntityStateParryCooldown() const;
            Ent::Gen::EntityStateParryCooldown setEntityStateParryCooldown() const;
            std::optional<Ent::Gen::EntityStatePhysicsIdle> EntityStatePhysicsIdle() const;
            Ent::Gen::EntityStatePhysicsIdle setEntityStatePhysicsIdle() const;
            std::optional<Ent::Gen::EntityStatePhysicsMove> EntityStatePhysicsMove() const;
            Ent::Gen::EntityStatePhysicsMove setEntityStatePhysicsMove() const;
            std::optional<Ent::Gen::EntityStatePickableDistributor> EntityStatePickableDistributor() const;
            Ent::Gen::EntityStatePickableDistributor setEntityStatePickableDistributor() const;
            std::optional<Ent::Gen::EntityStatePlayer> EntityStatePlayer() const;
            Ent::Gen::EntityStatePlayer setEntityStatePlayer() const;
            std::optional<Ent::Gen::EntityStatePlungeLand> EntityStatePlungeLand() const;
            Ent::Gen::EntityStatePlungeLand setEntityStatePlungeLand() const;
            std::optional<Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh> EntityStatePrepareToHoldingOnToNavigationMesh() const;
            Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh setEntityStatePrepareToHoldingOnToNavigationMesh() const;
            std::optional<Ent::Gen::EntityStateRaise> EntityStateRaise() const;
            Ent::Gen::EntityStateRaise setEntityStateRaise() const;
            std::optional<Ent::Gen::EntityStateReadyToGiveOrder> EntityStateReadyToGiveOrder() const;
            Ent::Gen::EntityStateReadyToGiveOrder setEntityStateReadyToGiveOrder() const;
            std::optional<Ent::Gen::EntityStateRecoverLand> EntityStateRecoverLand() const;
            Ent::Gen::EntityStateRecoverLand setEntityStateRecoverLand() const;
            std::optional<Ent::Gen::EntityStateRegainCapacity> EntityStateRegainCapacity() const;
            Ent::Gen::EntityStateRegainCapacity setEntityStateRegainCapacity() const;
            std::optional<Ent::Gen::EntityStateReserveMountSlots> EntityStateReserveMountSlots() const;
            Ent::Gen::EntityStateReserveMountSlots setEntityStateReserveMountSlots() const;
            std::optional<Ent::Gen::EntityStateRespawn> EntityStateRespawn() const;
            Ent::Gen::EntityStateRespawn setEntityStateRespawn() const;
            std::optional<Ent::Gen::EntityStateRespawnability> EntityStateRespawnability() const;
            Ent::Gen::EntityStateRespawnability setEntityStateRespawnability() const;
            std::optional<Ent::Gen::EntityStateRevive> EntityStateRevive() const;
            Ent::Gen::EntityStateRevive setEntityStateRevive() const;
            std::optional<Ent::Gen::EntityStateSavePointActivated> EntityStateSavePointActivated() const;
            Ent::Gen::EntityStateSavePointActivated setEntityStateSavePointActivated() const;
            std::optional<Ent::Gen::EntityStateSetSavePoint> EntityStateSetSavePoint() const;
            Ent::Gen::EntityStateSetSavePoint setEntityStateSetSavePoint() const;
            std::optional<Ent::Gen::EntityStateShootHatchingEnergy> EntityStateShootHatchingEnergy() const;
            Ent::Gen::EntityStateShootHatchingEnergy setEntityStateShootHatchingEnergy() const;
            std::optional<Ent::Gen::EntityStateSlowMotion> EntityStateSlowMotion() const;
            Ent::Gen::EntityStateSlowMotion setEntityStateSlowMotion() const;
            std::optional<Ent::Gen::EntityStateSnappedToHatchingTarget> EntityStateSnappedToHatchingTarget() const;
            Ent::Gen::EntityStateSnappedToHatchingTarget setEntityStateSnappedToHatchingTarget() const;
            std::optional<Ent::Gen::EntityStateSoftCollide> EntityStateSoftCollide() const;
            Ent::Gen::EntityStateSoftCollide setEntityStateSoftCollide() const;
            std::optional<Ent::Gen::EntityStateSpeedLimiter> EntityStateSpeedLimiter() const;
            Ent::Gen::EntityStateSpeedLimiter setEntityStateSpeedLimiter() const;
            std::optional<Ent::Gen::EntityStateSpiritAnimalBeingCalled> EntityStateSpiritAnimalBeingCalled() const;
            Ent::Gen::EntityStateSpiritAnimalBeingCalled setEntityStateSpiritAnimalBeingCalled() const;
            std::optional<Ent::Gen::EntityStateSpiritAnimalFleshForm> EntityStateSpiritAnimalFleshForm() const;
            Ent::Gen::EntityStateSpiritAnimalFleshForm setEntityStateSpiritAnimalFleshForm() const;
            std::optional<Ent::Gen::EntityStateSpiritAnimalSoulForm> EntityStateSpiritAnimalSoulForm() const;
            Ent::Gen::EntityStateSpiritAnimalSoulForm setEntityStateSpiritAnimalSoulForm() const;
            std::optional<Ent::Gen::EntityStateSpiritAttack> EntityStateSpiritAttack() const;
            Ent::Gen::EntityStateSpiritAttack setEntityStateSpiritAttack() const;
            std::optional<Ent::Gen::EntityStateSpiritAttacked> EntityStateSpiritAttacked() const;
            Ent::Gen::EntityStateSpiritAttacked setEntityStateSpiritAttacked() const;
            std::optional<Ent::Gen::EntityStateSpiritShrineDisabled> EntityStateSpiritShrineDisabled() const;
            Ent::Gen::EntityStateSpiritShrineDisabled setEntityStateSpiritShrineDisabled() const;
            std::optional<Ent::Gen::EntityStateSpiritShrineEnabled> EntityStateSpiritShrineEnabled() const;
            Ent::Gen::EntityStateSpiritShrineEnabled setEntityStateSpiritShrineEnabled() const;
            std::optional<Ent::Gen::EntityStateStaffOwnedVertebras> EntityStateStaffOwnedVertebras() const;
            Ent::Gen::EntityStateStaffOwnedVertebras setEntityStateStaffOwnedVertebras() const;
            std::optional<Ent::Gen::EntityStateStaffVertebrasAutoRefill> EntityStateStaffVertebrasAutoRefill() const;
            Ent::Gen::EntityStateStaffVertebrasAutoRefill setEntityStateStaffVertebrasAutoRefill() const;
            std::optional<Ent::Gen::EntityStateStalactiteFallen> EntityStateStalactiteFallen() const;
            Ent::Gen::EntityStateStalactiteFallen setEntityStateStalactiteFallen() const;
            std::optional<Ent::Gen::EntityStateStalactiteReadyToFall> EntityStateStalactiteReadyToFall() const;
            Ent::Gen::EntityStateStalactiteReadyToFall setEntityStateStalactiteReadyToFall() const;
            std::optional<Ent::Gen::EntityStateStickedLand> EntityStateStickedLand() const;
            Ent::Gen::EntityStateStickedLand setEntityStateStickedLand() const;
            std::optional<Ent::Gen::EntityStateStrafeDodge> EntityStateStrafeDodge() const;
            Ent::Gen::EntityStateStrafeDodge setEntityStateStrafeDodge() const;
            std::optional<Ent::Gen::EntityStateStrongAttack> EntityStateStrongAttack() const;
            Ent::Gen::EntityStateStrongAttack setEntityStateStrongAttack() const;
            std::optional<Ent::Gen::EntityStateStrongAttackCharged> EntityStateStrongAttackCharged() const;
            Ent::Gen::EntityStateStrongAttackCharged setEntityStateStrongAttackCharged() const;
            std::optional<Ent::Gen::EntityStateStrongAttackCharging> EntityStateStrongAttackCharging() const;
            Ent::Gen::EntityStateStrongAttackCharging setEntityStateStrongAttackCharging() const;
            std::optional<Ent::Gen::EntityStateStrongAttackJumped> EntityStateStrongAttackJumped() const;
            Ent::Gen::EntityStateStrongAttackJumped setEntityStateStrongAttackJumped() const;
            std::optional<Ent::Gen::EntityStateTakeDamageOnMount> EntityStateTakeDamageOnMount() const;
            Ent::Gen::EntityStateTakeDamageOnMount setEntityStateTakeDamageOnMount() const;
            std::optional<Ent::Gen::EntityStateTooDeep> EntityStateTooDeep() const;
            Ent::Gen::EntityStateTooDeep setEntityStateTooDeep() const;
            std::optional<Ent::Gen::EntityStateTreeMetamorphosis> EntityStateTreeMetamorphosis() const;
            Ent::Gen::EntityStateTreeMetamorphosis setEntityStateTreeMetamorphosis() const;
            std::optional<Ent::Gen::EntityStateTreeMetamorphosisUsingScale> EntityStateTreeMetamorphosisUsingScale() const;
            Ent::Gen::EntityStateTreeMetamorphosisUsingScale setEntityStateTreeMetamorphosisUsingScale() const;
            std::optional<Ent::Gen::EntityStateTreeSwitchTransition> EntityStateTreeSwitchTransition() const;
            Ent::Gen::EntityStateTreeSwitchTransition setEntityStateTreeSwitchTransition() const;
            std::optional<Ent::Gen::EntityStateTreeTurretTargeting> EntityStateTreeTurretTargeting() const;
            Ent::Gen::EntityStateTreeTurretTargeting setEntityStateTreeTurretTargeting() const;
            std::optional<Ent::Gen::EntityStateTriggerBeamTargetEvent> EntityStateTriggerBeamTargetEvent() const;
            Ent::Gen::EntityStateTriggerBeamTargetEvent setEntityStateTriggerBeamTargetEvent() const;
            std::optional<Ent::Gen::EntityStateTryUnmount> EntityStateTryUnmount() const;
            Ent::Gen::EntityStateTryUnmount setEntityStateTryUnmount() const;
            std::optional<Ent::Gen::EntityStateUndergroundCavity> EntityStateUndergroundCavity() const;
            Ent::Gen::EntityStateUndergroundCavity setEntityStateUndergroundCavity() const;
            std::optional<Ent::Gen::EntityStateUseAsActiveCheckpoint> EntityStateUseAsActiveCheckpoint() const;
            Ent::Gen::EntityStateUseAsActiveCheckpoint setEntityStateUseAsActiveCheckpoint() const;
            std::optional<Ent::Gen::EntityStateWaitToJumpAgain> EntityStateWaitToJumpAgain() const;
            Ent::Gen::EntityStateWaitToJumpAgain setEntityStateWaitToJumpAgain() const;
            std::optional<Ent::Gen::EntityStateWallRun> EntityStateWallRun() const;
            Ent::Gen::EntityStateWallRun setEntityStateWallRun() const;
            std::optional<Ent::Gen::EntityStateWallRunDrop> EntityStateWallRunDrop() const;
            Ent::Gen::EntityStateWallRunDrop setEntityStateWallRunDrop() const;
            std::optional<Ent::Gen::EntityStateWallRunJump> EntityStateWallRunJump() const;
            Ent::Gen::EntityStateWallRunJump setEntityStateWallRunJump() const;
            std::optional<Ent::Gen::EntityStateWaterfallEndJump> EntityStateWaterfallEndJump() const;
            Ent::Gen::EntityStateWaterfallEndJump setEntityStateWaterfallEndJump() const;
        };

        struct SpawnState : HelperObject // Object
        {
            SpawnState(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::ResponsiblePointer_ActorState_ val() const;
        };

        struct RespawnState : HelperObject // Object
        {
            RespawnState(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::ResponsiblePointer_ActorState_ val() const;
        };

        struct RenderManager_DepthOfFieldConfig : HelperObject // Object
        {
            RenderManager_DepthOfFieldConfig(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RenderManager::DepthOfFieldConfig";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float FarTransitionDistance() const;
            Ent::Gen::Float Multiplier() const;
            Ent::Gen::Float NearTransitionDistance() const;
            Ent::Gen::String _comment() const;
        };

        struct RegenerationManager_EnergyAreaSetting : HelperObject // Object
        {
            RegenerationManager_EnergyAreaSetting(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RegenerationManager::EnergyAreaSetting";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float RegenValue() const;
            Ent::Gen::Float SmoothMargin() const;
            Ent::Gen::String _comment() const;
        };

        struct RegenSwitchBehavior : EnumPropHelper<RegenSwitchBehavior, RegenSwitchBehaviorEnum> // Enum
        {
            using Enum = RegenSwitchBehaviorEnum;
            using PropHelper<RegenSwitchBehavior, Enum>::operator=;
            RegenSwitchBehavior(Ent::Node* _node): EnumPropHelper<RegenSwitchBehavior, Enum>(_node) {}
            static constexpr char schemaName[] = "RegenSwitchBehavior";
            static constexpr char const* enumToString[] = {
                "CrossFade",
                "CrossMetamorphosis",
                "SequentialMetamorphosis",
                "InterruptibleSequentialMetamorphosis",
            };
        };
        inline char const* toString(RegenSwitchBehaviorEnum value)
        {
            if(size_t(value) >= std::size(RegenSwitchBehavior::enumToString))
                throw std::runtime_error("Wrong enum value");
            return RegenSwitchBehavior::enumToString[size_t(value)];
        }
        inline char const* toInternal(RegenSwitchBehaviorEnum value) { return toString(value); }
        template<> inline RegenSwitchBehaviorEnum strToEnum<RegenSwitchBehaviorEnum>(char const* value)
        {
            return static_cast<RegenSwitchBehaviorEnum>(details::indexInEnum(value, RegenSwitchBehavior::enumToString));
        }

        struct RegenField : EnumPropHelper<RegenField, RegenFieldEnum> // Enum
        {
            using Enum = RegenFieldEnum;
            using PropHelper<RegenField, Enum>::operator=;
            RegenField(Ent::Node* _node): EnumPropHelper<RegenField, Enum>(_node) {}
            static constexpr char schemaName[] = "RegenField";
            static constexpr char const* enumToString[] = {
                "energy",
                "absorption",
                "RegenField_COUNT",
            };
        };
        inline char const* toString(RegenFieldEnum value)
        {
            if(size_t(value) >= std::size(RegenField::enumToString))
                throw std::runtime_error("Wrong enum value");
            return RegenField::enumToString[size_t(value)];
        }
        inline char const* toInternal(RegenFieldEnum value) { return toString(value); }
        template<> inline RegenFieldEnum strToEnum<RegenFieldEnum>(char const* value)
        {
            return static_cast<RegenFieldEnum>(details::indexInEnum(value, RegenField::enumToString));
        }

        struct RegenAreaTransitionSettings : HelperObject // Object
        {
            RegenAreaTransitionSettings(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RegenAreaTransitionSettings";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ScaleConverter TransitionWaveRadialSpeed() const;
            Ent::Gen::Float TransitionWaveWidth() const;
            Ent::Gen::String _comment() const;
        };

        struct TransitionSettings : HelperObject // Object
        {
            TransitionSettings(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::RegenAreaTransitionSettings val() const;
        };

        struct ReflectionTools_EnumSchema : HelperObject // Object
        {
            ReflectionTools_EnumSchema(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionTools::EnumSchema";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            PrimArray<Ent::Gen::String> Values() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods : HelperObject // Object
        {
            ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMethods";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            PrimArray<Ent::Gen::String> ParamTypes() const;
            Ent::Gen::String ReturnType() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData : HelperObject // Object
        {
            ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMetaData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Ent::Gen::String Type_() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember : HelperObject // Object
        {
            ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMember";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Ent::Gen::String Type_() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency : HelperObject // Object
        {
            ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaDependency";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Ent::Gen::Bool Optional() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectionTools_FlatBufferSchemaDependenciesExporter : HelperObject // Object
        {
            ReflectionTools_FlatBufferSchemaDependenciesExporter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionTools::FlatBufferSchemaDependenciesExporter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String className() const;
            Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> dependencies() const;
        };

        struct ReflectionTools_ClassReflectionSchema : HelperObject // Object
        {
            ReflectionTools_ClassReflectionSchema(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> BaseRecursive() const;
            Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> Dependencies() const;
            Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember> Members() const;
            Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData> Metadata() const;
            Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> Methods() const;
            Ent::Gen::String Name() const;
            Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> RPCMethods() const;
            Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> Signals() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectionTools_ReflectionSchema : HelperObject // Object
        {
            ReflectionTools_ReflectionSchema(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionTools::ReflectionSchema";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ReflectionTools_EnumSchema> Enums() const;
            Array<Ent::Gen::ReflectionTools_ClassReflectionSchema> Schemas() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectionMethodParameter : HelperObject // Object
        {
            ReflectionMethodParameter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionMethodParameter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int containerType() const;
            Ent::Gen::Int elementType() const;
            Ent::Gen::String elementTypeName() const;
            Ent::Gen::String name() const;
            Ent::Gen::String typeName() const;
        };

        struct ReflectionMethod : HelperObject // Object
        {
            ReflectionMethod(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionMethod";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::ReflectionMethodParameter> inputs() const;
            Ent::Gen::String name() const;
            Array<Ent::Gen::ReflectionMethodParameter> outputs() const;
            Ent::Gen::Bool threadSafe() const;
        };

        struct ReflectionEnum : HelperObject // Object
        {
            ReflectionEnum(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionEnum";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String name() const;
            PrimArray<Ent::Gen::String> names() const;
            PrimArray<Ent::Gen::Int> values() const;
        };

        struct ReflectionClass : HelperObject // Object
        {
            ReflectionClass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionClass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::ReflectionMethod> methods() const;
            Ent::Gen::String name() const;
        };

        struct ReflectionDb : HelperObject // Object
        {
            ReflectionDb(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectionDb";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::ReflectionClass> classes() const;
            Array<Ent::Gen::ReflectionEnum> enums() const;
        };

        struct ReflectedMaterialGroup : HelperObject // Object
        {
            ReflectedMaterialGroup(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectedMaterialGroup";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> Materials() const;
            PrimArray<Ent::Gen::String> Tags() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectedMaterialGroupVector : HelperObject // Object
        {
            ReflectedMaterialGroupVector(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectedMaterialGroupVector";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::ReflectedMaterialGroup> Groups() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectedDetailMaterial : HelperObject // Object
        {
            ReflectedDetailMaterial(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectedDetailMaterial";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String AlbedoMap() const;
            Ent::Gen::String CavityMap() const;
            Ent::Gen::Vector3i DebugAlbedo() const;
            Ent::Gen::String EmissiveMap() const;
            Ent::Gen::String HeightMap() const;
            Ent::Gen::String NormalMap() const;
            Ent::Gen::String RoughMap() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectedDetailMaterialVariants : HelperObject // Object
        {
            ReflectedDetailMaterialVariants(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectedDetailMaterialVariants";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Ent::Gen::String PhysicsMaterialName() const;
            Ent::Gen::Map<char const*, Ent::Gen::ReflectedDetailMaterial> Variants() const;
            Ent::Gen::String _comment() const;
        };

        struct ReflectedDetailMaterialBank : HelperObject // Object
        {
            ReflectedDetailMaterialBank(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReflectedDetailMaterialBank";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ReflectedDetailMaterialVariants> Bank() const;
            PrimArray<Ent::Gen::String> Filters() const;
            Ent::Gen::ReflectedMaterialGroupVector Groups() const;
            Ent::Gen::String _comment() const;
        };

        struct RecastNavmeshGenerationParameters : HelperObject // Object
        {
            RecastNavmeshGenerationParameters(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RecastNavmeshGenerationParameters";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float CreatureHeight() const;
            Ent::Gen::Float CreatureRadius() const;
            Ent::Gen::String CreatureType() const;
            Ent::Gen::Float DeepWaterDepth() const;
            Ent::Gen::Bool MarkWaterAreas() const;
            Ent::Gen::Float MaxClimbHeight() const;
            Ent::Gen::Float MaxWalkableSlopeAngle() const;
            Ent::Gen::Float MinWaterDepth() const;
            Ent::Gen::Float VoxelPrecision() const;
            Ent::Gen::String _comment() const;
        };


        struct sPhysicsJointDesc : HelperObject // Object
        {
            sPhysicsJointDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sPhysicsJointDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::sJointBallDesc Ball() const;
            Ent::Gen::sJointFixedDesc Fixed() const;
            Ent::Gen::sJointHingeDesc Hinge() const;
            Ent::Gen::String JointType() const;
            Ent::Gen::sJointSliderDesc Slider() const;
            Ent::Gen::sJointSwingTwistDesc SwingTwist() const;
            Ent::Gen::sJointUniversalDesc Universal() const;
            Ent::Gen::String _comment() const;
            PrimArray<Ent::Gen::String> flags() const;
            Ent::Gen::Int idRigodBodyA() const;
            Ent::Gen::Int idRigodBodyB() const;
            Ent::Gen::Quat orientation() const;
            Ent::Gen::String parent() const;
            Ent::Gen::Vector3 translation() const;
        };

        struct sPhysicShape : HelperObject // Object
        {
            sPhysicShape(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sPhysicShape";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::sPhysicsShapeBox Box() const;
            Ent::Gen::sPhysicsShapeCapsule Capsule() const;
            Ent::Gen::sPhysicsShapeCylinder Cylinder() const;
            Ent::Gen::sPhysicsShapeMesh Mesh() const;
            Ent::Gen::String PhysicsMaterial() const;
            Ent::Gen::sPhysicsShapeSphere Sphere() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 angles() const;
            Ent::Gen::Quat orientation() const;
            Ent::Gen::Float scale() const;
            Ent::Gen::Vector3 translation() const;
        };

        struct sRigidBodyDesc : HelperObject // Object
        {
            sRigidBodyDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sRigidBodyDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 angles() const;
            PrimArray<Ent::Gen::String> flags() const;
            Ent::Gen::Int id() const;
            Ent::Gen::String motionType() const;
            Ent::Gen::Quat orientation() const;
            Ent::Gen::String parent() const;
            Ent::Gen::Float scale() const;
            Array<Ent::Gen::sPhysicShape> shapes() const;
            Ent::Gen::Vector3 translation() const;
        };

        struct Transform3D : HelperObject // Object
        {
            Transform3D(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Transform3D";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Quat orientation() const;
            Ent::Gen::Vector3 scale() const;
            Ent::Gen::Vector3 translation() const;
        };

        struct ProjectileShooterData : HelperObject // Object
        {
            ProjectileShooterData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ProjectileShooterData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef SubEntity() const;
            Ent::Gen::String _comment() const;
        };

        struct ProjectileData : HelperObject // Object
        {
            ProjectileData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ProjectileData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool canCollideWithOtherProjectiles() const;
            Ent::Gen::Float damages() const;
            Ent::Gen::Float deleteAfterPlantTimer() const;
            Ent::Gen::Bool destroyOnHit() const;
            Ent::Gen::Float distanceFromBodyAtLaunch() const;
            Ent::Gen::Bool explodeOnFire() const;
            Ent::Gen::Float explosionShockForce() const;
            PrimArray<Ent::Gen::String> gameEffectOnHit() const;
            Ent::Gen::Float gravity() const;
            Ent::Gen::Bool hasNoCollision() const;
            Ent::Gen::Vector3 hitSourceOffset() const;
            Ent::Gen::Float homingInRangeAnticipationDist() const;
            Ent::Gen::Float homingMaxAngle() const;
            Ent::Gen::Float homingMaxFlightTime() const;
            Ent::Gen::Float homingMaxInFrontAnticipationDist() const;
            Ent::Gen::Float homingMaxTotalAnticipationDist() const;
            PrimArray<Ent::Gen::Float> homingTotalAnticipationRatioSpeeds() const;
            Ent::Gen::Float impact() const;
            Ent::Gen::Bool isRegenProjectile() const;
            Ent::Gen::Bool isThrowable() const;
            Ent::Gen::Vector3 launchRotation() const;
            Ent::Gen::Float launchSpeed() const;
            Ent::Gen::Float noiseLevelOnImpact() const;
            Ent::Gen::Bool shouldBeVisibleBeforeShoot() const;
            Ent::Gen::Float smoothTime() const;
            Ent::Gen::Bool stopOnWater() const;
            Ent::Gen::Float straightDistance() const;
            Ent::Gen::Bool visibleInFlight() const;
        };

        struct ProgressSoundEventData : HelperObject // Object
        {
            ProgressSoundEventData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ProgressSoundEventData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String DecreaseEventName() const;
            Ent::Gen::Float DecreaseStartThreshold() const;
            Ent::Gen::Float DecreaseStopThreshold() const;
            Ent::Gen::String EventBank() const;
            Ent::Gen::Bool EventLooping() const;
            Ent::Gen::String IncreaseEventName() const;
            Ent::Gen::Float IncreaseStartThreshold() const;
            Ent::Gen::Float IncreaseStopThreshold() const;
            Ent::Gen::String _comment() const;
        };

        struct PrimitiveShape : HelperObject // Object
        {
            PrimitiveShape(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PrimitiveShape";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float SDFPadding() const;
            Ent::Gen::Float SDFVoxelSize() const;
            Ent::Gen::String _comment() const;
        };

        struct ShapeSphere : HelperObject // Object
        {
            ShapeSphere(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShapeSphere";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Radius() const;
            Ent::Gen::PrimitiveShape Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ShapeBox : HelperObject // Object
        {
            ShapeBox(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShapeBox";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector3 Size() const;
            Ent::Gen::PrimitiveShape Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PrimitiveData : HelperObject // Object
        {
            PrimitiveData(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::Float Height() const;
            Ent::Gen::Float Length() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::Float Width() const;
            Ent::Gen::String _comment() const;
        };

        struct PrimitiveColliderType : EnumPropHelper<PrimitiveColliderType, PrimitiveColliderTypeEnum> // Enum
        {
            using Enum = PrimitiveColliderTypeEnum;
            using PropHelper<PrimitiveColliderType, Enum>::operator=;
            PrimitiveColliderType(Ent::Node* _node): EnumPropHelper<PrimitiveColliderType, Enum>(_node) {}
            static constexpr char schemaName[] = "PrimitiveColliderType";
            static constexpr char const* enumToString[] = {
                "Undefined",
                "Sphere",
                "Box",
                "Capsule",
                "Cylinder",
                "Mesh",
                "PrimitiveColliderType_COUNT",
            };
        };
        inline char const* toString(PrimitiveColliderTypeEnum value)
        {
            if(size_t(value) >= std::size(PrimitiveColliderType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return PrimitiveColliderType::enumToString[size_t(value)];
        }
        inline char const* toInternal(PrimitiveColliderTypeEnum value) { return toString(value); }
        template<> inline PrimitiveColliderTypeEnum strToEnum<PrimitiveColliderTypeEnum>(char const* value)
        {
            return static_cast<PrimitiveColliderTypeEnum>(details::indexInEnum(value, PrimitiveColliderType::enumToString));
        }

        struct PredictionBehaviorDuration : HelperObject // Object
        {
            PredictionBehaviorDuration(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PredictionBehaviorDuration";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Locked() const;
            Ent::Gen::Float Step() const;
            Ent::Gen::Float Total() const;
            Ent::Gen::String _comment() const;
        };

        struct PredictionBehaviorData : HelperObject // Object
        {
            PredictionBehaviorData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PredictionBehaviorData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::PredictionBehaviorDuration Duration() const;
            Ent::Gen::String _comment() const;
        };

        struct Precision : EnumPropHelper<Precision, PrecisionEnum> // Enum
        {
            using Enum = PrecisionEnum;
            using PropHelper<Precision, Enum>::operator=;
            Precision(Ent::Node* _node): EnumPropHelper<Precision, Enum>(_node) {}
            static constexpr char schemaName[] = "Precision";
            static constexpr char const* enumToString[] = {
                "full",
                "half",
                "quarter",
                "eighth",
                "sixteenth",
                "highest",
                "lowest",
            };
        };
        inline char const* toString(PrecisionEnum value)
        {
            if(size_t(value) >= std::size(Precision::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Precision::enumToString[size_t(value)];
        }
        inline char const* toInternal(PrecisionEnum value) { return toString(value); }
        template<> inline PrecisionEnum strToEnum<PrecisionEnum>(char const* value)
        {
            return static_cast<PrecisionEnum>(details::indexInEnum(value, Precision::enumToString));
        }


        struct constraintPlaneWorldPosition : HelperObject // Object
        {
            constraintPlaneWorldPosition(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Position val() const;
        };

        struct ProjectileTrajectory : HelperObject // Object
        {
            ProjectileTrajectory(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ProjectileTrajectory";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 m_direction() const;
            Ent::Gen::Position m_position() const;
            Ent::Gen::Float m_speed() const;
            Ent::Gen::Float m_straightDistance() const;
        };

        struct PlayRatio : HelperObject // Object
        {
            PlayRatio(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct PhysicsMaterial : HelperObject // Object
        {
            PhysicsMaterial(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsMaterial";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> ClimbablePerSize() const;
            Ent::Gen::Int MaterialId() const;
            Ent::Gen::String Name() const;
            Ent::Gen::PrimitiveSet<char const*> Tags() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsLayer : EnumPropHelper<PhysicsLayer, PhysicsLayerEnum> // Enum
        {
            using Enum = PhysicsLayerEnum;
            using PropHelper<PhysicsLayer, Enum>::operator=;
            PhysicsLayer(Ent::Node* _node): EnumPropHelper<PhysicsLayer, Enum>(_node) {}
            static constexpr char schemaName[] = "PhysicsLayer";
            static constexpr char const* enumToString[] = {
                "Default",
                "Ground",
                "Static",
                "Raycast",
                "Trigger",
                "Walkable",
                "Camera",
                "ClimbEdge",
                "Kinematic",
                "Ragdoll",
                "Projectile",
                "Hit",
                "MotionConstraint",
                "Heal",
                "Body",
                "Fluid",
                "Hitable",
                "PhysicsGPE",
                "Interactable",
                "Creature",
                "Debris",
                "None",
                "All",
                "PHYSICLAYER_COUNT",
            };
        };
        inline char const* toString(PhysicsLayerEnum value)
        {
            if(size_t(value) >= std::size(PhysicsLayer::enumToString))
                throw std::runtime_error("Wrong enum value");
            return PhysicsLayer::enumToString[size_t(value)];
        }
        inline char const* toInternal(PhysicsLayerEnum value) { return toString(value); }
        template<> inline PhysicsLayerEnum strToEnum<PhysicsLayerEnum>(char const* value)
        {
            return static_cast<PhysicsLayerEnum>(details::indexInEnum(value, PhysicsLayer::enumToString));
        }

        struct PhysicsEffectsManager_PhysicsLimits : HelperObject // Object
        {
            PhysicsEffectsManager_PhysicsLimits(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsEffectsManager::PhysicsLimits";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int AvgShapesPerRigidBody() const;
            Ent::Gen::Int MaxDynamicRigidBodies() const;
            Ent::Gen::Int MaxNonContactPairs() const;
            Ent::Gen::Int MaxStaticRigidBodies() const;
            Ent::Gen::Int MaxTriggerRigidBodies() const;
            Ent::Gen::String _comment() const;
        };

        struct PerceiverComponentInput_usePerception : HelperObject // Object
        {
            PerceiverComponentInput_usePerception(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct Pasta_Easing_Curve : EnumPropHelper<Pasta_Easing_Curve, Pasta_Easing_CurveEnum> // Enum
        {
            using Enum = Pasta_Easing_CurveEnum;
            using PropHelper<Pasta_Easing_Curve, Enum>::operator=;
            Pasta_Easing_Curve(Ent::Node* _node): EnumPropHelper<Pasta_Easing_Curve, Enum>(_node) {}
            static constexpr char schemaName[] = "Pasta::Easing::Curve";
            static constexpr char const* enumToString[] = {
                "Linear",
                "EaseInSin",
                "EaseInQuad",
                "EaseInCubic",
                "EaseInQuart",
                "EaseInQuint",
                "EaseInExp",
                "EaseOutSin",
                "EaseOutQuad",
                "EaseOutCubic",
                "EaseOutQuart",
                "EaseOutQuint",
                "EaseOutExp",
                "EaseInoutSin",
                "EaseInoutQuad",
                "EaseInoutCubic",
                "EaseInoutQuart",
                "EaseInoutQuint",
                "EaseInoutExp",
                "EaseInCirc",
                "EaseOutCirc",
                "EaseInoutCirc",
                "EaseOutElastic",
                "Count",
            };
        };
        inline char const* toString(Pasta_Easing_CurveEnum value)
        {
            if(size_t(value) >= std::size(Pasta_Easing_Curve::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Pasta_Easing_Curve::enumToString[size_t(value)];
        }
        inline char const* toInternal(Pasta_Easing_CurveEnum value) { return toString(value); }
        template<> inline Pasta_Easing_CurveEnum strToEnum<Pasta_Easing_CurveEnum>(char const* value)
        {
            return static_cast<Pasta_Easing_CurveEnum>(details::indexInEnum(value, Pasta_Easing_Curve::enumToString));
        }

        struct RadiusChange : HelperObject // Object
        {
            RadiusChange(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RadiusChange";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ScaleConverter Entry() const;
            Ent::Gen::ScaleConverter Exit() const;
            Ent::Gen::Pasta_Easing_Curve InBetweenEasing() const;
            Ent::Gen::String _comment() const;
        };

        struct Parameters : HelperObject // Object
        {
            Parameters(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::SmoothScaleComponentInput_Parameters val() const;
        };

        struct OwnershipModuleDebugWindow : EnumPropHelper<OwnershipModuleDebugWindow, OwnershipModuleDebugWindowEnum> // Enum
        {
            using Enum = OwnershipModuleDebugWindowEnum;
            using PropHelper<OwnershipModuleDebugWindow, Enum>::operator=;
            OwnershipModuleDebugWindow(Ent::Node* _node): EnumPropHelper<OwnershipModuleDebugWindow, Enum>(_node) {}
            static constexpr char schemaName[] = "OwnershipModuleDebugWindow";
            static constexpr char const* enumToString[] = {
                "Tree",
                "Settings",
                "In Game Debug Data",
                "OwnershipModuleDebugWindow_COUNT",
            };
        };
        inline char const* toString(OwnershipModuleDebugWindowEnum value)
        {
            if(size_t(value) >= std::size(OwnershipModuleDebugWindow::enumToString))
                throw std::runtime_error("Wrong enum value");
            return OwnershipModuleDebugWindow::enumToString[size_t(value)];
        }
        inline char const* toInternal(OwnershipModuleDebugWindowEnum value) { return toString(value); }
        template<> inline OwnershipModuleDebugWindowEnum strToEnum<OwnershipModuleDebugWindowEnum>(char const* value)
        {
            return static_cast<OwnershipModuleDebugWindowEnum>(details::indexInEnum(value, OwnershipModuleDebugWindow::enumToString));
        }

        struct Game_OwnershipDebugger : HelperObject // Object
        {
            Game_OwnershipDebugger(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Game::OwnershipDebugger";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::OwnershipModuleDebugWindow> Display() const;
            Ent::Gen::String _comment() const;
        };

        struct OutfitPieceType : EnumPropHelper<OutfitPieceType, OutfitPieceTypeEnum> // Enum
        {
            using Enum = OutfitPieceTypeEnum;
            using PropHelper<OutfitPieceType, Enum>::operator=;
            OutfitPieceType(Ent::Node* _node): EnumPropHelper<OutfitPieceType, Enum>(_node) {}
            static constexpr char schemaName[] = "OutfitPieceType";
            static constexpr char const* enumToString[] = {
                "OutfitPieceType_NONE",
                "Head",
                "Torso",
                "Skirt",
                "Boots",
                "Brace",
                "Body",
                "Hair",
                "OutfitPieceType_COUNT",
            };
        };
        inline char const* toString(OutfitPieceTypeEnum value)
        {
            if(size_t(value) >= std::size(OutfitPieceType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return OutfitPieceType::enumToString[size_t(value)];
        }
        inline char const* toInternal(OutfitPieceTypeEnum value) { return toString(value); }
        template<> inline OutfitPieceTypeEnum strToEnum<OutfitPieceTypeEnum>(char const* value)
        {
            return static_cast<OutfitPieceTypeEnum>(details::indexInEnum(value, OutfitPieceType::enumToString));
        }

        struct OutfitPiece : HelperObject // Object
        {
            OutfitPiece(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OutfitPiece";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef EntityRef() const;
            Ent::Gen::OutfitPieceType Slot() const;
            Ent::Gen::String _comment() const;
        };

        struct Orientation : HelperObject // Object
        {
            Orientation(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Quat val() const;
        };

        struct Online : HelperObject // Object
        {
            Online(Ent::Node* _node): HelperObject(_node) {}
            
        
        };

        struct Object_MaxActivationLevel : EnumPropHelper<Object_MaxActivationLevel, Object_MaxActivationLevelEnum> // Enum
        {
            using Enum = Object_MaxActivationLevelEnum;
            using PropHelper<Object_MaxActivationLevel, Enum>::operator=;
            Object_MaxActivationLevel(Ent::Node* _node): EnumPropHelper<Object_MaxActivationLevel, Enum>(_node) {}
            
            static constexpr char const* enumToString[] = {
                "Created",
                "InWorld",
                "Loading",
                "Started",
            };
        };
        inline char const* toString(Object_MaxActivationLevelEnum value)
        {
            if(size_t(value) >= std::size(Object_MaxActivationLevel::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Object_MaxActivationLevel::enumToString[size_t(value)];
        }
        inline char const* toInternal(Object_MaxActivationLevelEnum value) { return toString(value); }
        template<> inline Object_MaxActivationLevelEnum strToEnum<Object_MaxActivationLevelEnum>(char const* value)
        {
            return static_cast<Object_MaxActivationLevelEnum>(details::indexInEnum(value, Object_MaxActivationLevel::enumToString));
        }

        struct NavMeshTag : EnumPropHelper<NavMeshTag, NavMeshTagEnum> // Enum
        {
            using Enum = NavMeshTagEnum;
            using PropHelper<NavMeshTag, Enum>::operator=;
            NavMeshTag(Ent::Node* _node): EnumPropHelper<NavMeshTag, Enum>(_node) {}
            static constexpr char schemaName[] = "NavMeshTag";
            static constexpr char const* enumToString[] = {
                "Lush",
                "Corrupted",
                "Spirit",
                "NonSpirit",
                "NavMeshTag_COUNT",
            };
        };
        inline char const* toString(NavMeshTagEnum value)
        {
            if(size_t(value) >= std::size(NavMeshTag::enumToString))
                throw std::runtime_error("Wrong enum value");
            return NavMeshTag::enumToString[size_t(value)];
        }
        inline char const* toInternal(NavMeshTagEnum value) { return toString(value); }
        template<> inline NavMeshTagEnum strToEnum<NavMeshTagEnum>(char const* value)
        {
            return static_cast<NavMeshTagEnum>(details::indexInEnum(value, NavMeshTag::enumToString));
        }

        struct NavMeshCapability : EnumPropHelper<NavMeshCapability, NavMeshCapabilityEnum> // Enum
        {
            using Enum = NavMeshCapabilityEnum;
            using PropHelper<NavMeshCapability, Enum>::operator=;
            NavMeshCapability(Ent::Node* _node): EnumPropHelper<NavMeshCapability, Enum>(_node) {}
            static constexpr char schemaName[] = "NavMeshCapability";
            static constexpr char const* enumToString[] = {
                "Walk",
                "SwimShallow",
                "SwimDeep",
                "LongJump",
                "HighJump",
                "EdgeWalk",
                "TunnelCross",
                "Jump",
                "WallRun",
                "WaterFall",
                "Climb",
                "UnderwaterTunnelCross",
                "NavMeshCapability_COUNT",
            };
        };
        inline char const* toString(NavMeshCapabilityEnum value)
        {
            if(size_t(value) >= std::size(NavMeshCapability::enumToString))
                throw std::runtime_error("Wrong enum value");
            return NavMeshCapability::enumToString[size_t(value)];
        }
        inline char const* toInternal(NavMeshCapabilityEnum value) { return toString(value); }
        template<> inline NavMeshCapabilityEnum strToEnum<NavMeshCapabilityEnum>(char const* value)
        {
            return static_cast<NavMeshCapabilityEnum>(details::indexInEnum(value, NavMeshCapability::enumToString));
        }

        struct MusicCategory : HelperObject // Object
        {
            MusicCategory(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MusicCategory";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String EventName() const;
            Ent::Gen::String Name() const;
            Ent::Gen::Int Weight() const;
            Ent::Gen::String _comment() const;
        };

        struct MoveCapacityData_OrientationSpeed : HelperObject // Object
        {
            MoveCapacityData_OrientationSpeed(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MoveCapacityData::OrientationSpeed";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 factor() const;
            Ent::Gen::Vector3 rate() const;
            Ent::Gen::ScaleConverter rotationRollFromAngularSpeed() const;
            Ent::Gen::ScaleConverter speedFactorFromSpeedSlow() const;
            Ent::Gen::Vector3 speedMax() const;
            Ent::Gen::Vector3 steeringAngle() const;
        };

        struct MountableSnapLine_ControlPoint : HelperObject // Object
        {
            MountableSnapLine_ControlPoint(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MountableSnapLine::ControlPoint";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int boneId() const;
            Ent::Gen::Vector3 offset() const;
            Ent::Gen::Float radius() const;
        };

        struct MountableData : HelperObject // Object
        {
            MountableData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MountableData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int HotspotID() const;
            Ent::Gen::String _comment() const;
        };

        struct MinReviveRatio : HelperObject // Object
        {
            MinReviveRatio(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct MinRespawnDistance : HelperObject // Object
        {
            MinRespawnDistance(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct MinDistanceToRespawnPosition : HelperObject // Object
        {
            MinDistanceToRespawnPosition(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct MeshesItem : HelperObject // Object
        {
            MeshesItem(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::String mesh() const;
        };

        struct RUNTIME_LODsItem : HelperObject // Object
        {
            RUNTIME_LODsItem(Ent::Node* _node): HelperObject(_node) {}
            
            Array<Ent::Gen::MeshesItem> Meshes() const;
            Ent::Gen::String _comment() const;
        };

        struct MeshNavigationAllowedMode : EnumPropHelper<MeshNavigationAllowedMode, MeshNavigationAllowedModeEnum> // Enum
        {
            using Enum = MeshNavigationAllowedModeEnum;
            using PropHelper<MeshNavigationAllowedMode, Enum>::operator=;
            MeshNavigationAllowedMode(Ent::Node* _node): EnumPropHelper<MeshNavigationAllowedMode, Enum>(_node) {}
            static constexpr char schemaName[] = "MeshNavigationAllowedMode";
            static constexpr char const* enumToString[] = {
                "Never",
                "PlayerOnly",
                "Always",
                "MeshNavigationAllowedMode_COUNT",
            };
        };
        inline char const* toString(MeshNavigationAllowedModeEnum value)
        {
            if(size_t(value) >= std::size(MeshNavigationAllowedMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return MeshNavigationAllowedMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(MeshNavigationAllowedModeEnum value) { return toString(value); }
        template<> inline MeshNavigationAllowedModeEnum strToEnum<MeshNavigationAllowedModeEnum>(char const* value)
        {
            return static_cast<MeshNavigationAllowedModeEnum>(details::indexInEnum(value, MeshNavigationAllowedMode::enumToString));
        }

        struct MeshNavigationBehaviorData : HelperObject // Object
        {
            MeshNavigationBehaviorData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MeshNavigationBehaviorData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DeltaAngleMinToPrepareToHoldingOnToNavigationMesh() const;
            Ent::Gen::Bool EdgeTransitionConstraintAllowed() const;
            Ent::Gen::Float EdgeTransitionConstraintLedgeAngle() const;
            Ent::Gen::Float EdgeTransitionConstraintWallAngle() const;
            Ent::Gen::Float MaxNormalAngle() const;
            Ent::Gen::MeshNavigationAllowedMode MeshNavigationAllowedMode() const;
            Ent::Gen::Float OrientationRateToPrepareToHoldingOnToNavigationMesh() const;
            Ent::Gen::Float RayCastLengthLegFactor() const;
            Ent::Gen::Float RayCastLengthSpeedFactor() const;
            Ent::Gen::Bool RollAllowed() const;
            Ent::Gen::Float SlopeAngleMinForWall() const;
            Ent::Gen::Float SlopeAngleMinToAllowStickedLand() const;
            Ent::Gen::Bool StickToAnyNormalAllowed() const;
            Ent::Gen::Float VerticalAngleMinToUseLandingTreeAnimation() const;
            Ent::Gen::Float WallFrontProbeLengthFactor() const;
            Ent::Gen::Float WallRepulseFactor() const;
            Ent::Gen::String _comment() const;
        };

        struct MaxActivationLevel : EnumPropHelper<MaxActivationLevel, MaxActivationLevelEnum> // Enum
        {
            using Enum = MaxActivationLevelEnum;
            using PropHelper<MaxActivationLevel, Enum>::operator=;
            MaxActivationLevel(Ent::Node* _node): EnumPropHelper<MaxActivationLevel, Enum>(_node) {}
            
            static constexpr char const* enumToString[] = {
                "Created",
                "InWorld",
                "Loading",
                "Started",
            };
        };
        inline char const* toString(MaxActivationLevelEnum value)
        {
            if(size_t(value) >= std::size(MaxActivationLevel::enumToString))
                throw std::runtime_error("Wrong enum value");
            return MaxActivationLevel::enumToString[size_t(value)];
        }
        inline char const* toInternal(MaxActivationLevelEnum value) { return toString(value); }
        template<> inline MaxActivationLevelEnum strToEnum<MaxActivationLevelEnum>(char const* value)
        {
            return static_cast<MaxActivationLevelEnum>(details::indexInEnum(value, MaxActivationLevel::enumToString));
        }


        struct VolumeConstraintDataGD : HelperObject // Object
        {
            VolumeConstraintDataGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VolumeConstraintDataGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector3 CameraConstraintLocalAxis() const;
            Ent::Gen::Matrix44 Matrix() const;
            Ent::Gen::TransitionNeighborData Neighbors() const;
            Ent::Gen::Vector3 Size() const;
            PrimArray<Ent::Gen::String> Tags() const;
            Ent::Gen::String _comment() const;
        };

        struct Game_MacroNavMeshStamper : HelperObject // Object
        {
            Game_MacroNavMeshStamper(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Game::MacroNavMeshStamper";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector3 BoundingBox() const;
            Ent::Gen::Matrix44 Matrix() const;
            Ent::Gen::String NavmeshPath() const;
            Ent::Gen::Vector3 Position() const;
            Ent::Gen::Float RotationZ() const;
            Ent::Gen::Bool StickToGround() const;
            Ent::Gen::String _comment() const;
        };


        struct PointCloudInstanceDataResource : HelperObject // Object
        {
            PointCloudInstanceDataResource(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PointCloudInstanceDataResource";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int index() const;
            Ent::Gen::Matrix43 matrix() const;
        };

        struct PointCloudChunk : HelperObject // Object
        {
            PointCloudChunk(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PointCloudChunk";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int chunkPosX() const;
            Ent::Gen::Int chunkPosY() const;
            Ent::Gen::Int chunkPosZ() const;
            Array<Ent::Gen::PointCloudInstanceDataResource> instances() const;
        };


        struct MapOfObjectItem_A : HelperObject // Object
        {
            MapOfObjectItem_A(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String Value() const;
            Ent::Gen::String _comment() const;
        };

        struct Manager_EntityID : HelperObject // Object
        {
            Manager_EntityID(Ent::Node* _node): HelperObject(_node) {}
            
        
        };

        struct Manager : HelperObject // Object
        {
            Manager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Manager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager_EntityID EntityID() const;
            Ent::Gen::String _comment() const;
        };

        struct WorldManager : HelperObject // Object
        {
            WorldManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WorldManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct WaveManager : HelperObject // Object
        {
            WaveManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WaveManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct WaterManager : HelperObject // Object
        {
            WaterManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WaterManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::Float WaterHeight() const;
            Ent::Gen::String _comment() const;
        };

        struct VisualManager : HelperObject // Object
        {
            VisualManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VisualManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct VegetationManager : HelperObject // Object
        {
            VegetationManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VegetationManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float BuryDepth() const;
            Ent::Gen::Float BuryScaleThreshold() const;
            Ent::Gen::Bool BuryVeget() const;
            Ent::Gen::Float FadeOutScaleThreshold() const;
            Ent::Gen::Bool FadeOutVeget() const;
            Ent::Gen::Float FullScaleGrowDistanceHysteresis() const;
            Ent::Gen::Float FullScaleGrowDistanceThreshold() const;
            Ent::Gen::Float FullScaleGrowMaxRatio() const;
            Ent::Gen::Float FullScaleGrowMinRatio() const;
            Ent::Gen::Float GlobalDistanceMultiplier() const;
            Ent::Gen::Bool PreloadVegetation() const;
            Ent::Gen::Bool RegenInterpolation() const;
            Ent::Gen::Float ScaleSpeed() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String VegetationBankPath() const;
            Ent::Gen::String _comment() const;
        };

        struct TrailManager : HelperObject // Object
        {
            TrailManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TrailManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct TerrainManager : HelperObject // Object
        {
            TerrainManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TerrainManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SyncTempoManager : HelperObject // Object
        {
            SyncTempoManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SyncTempoManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int DefaultTempo() const;
            Ent::Gen::String RTPC_Tempo() const;
            Ent::Gen::String StartSyncClickEvent() const;
            Ent::Gen::String StartSyncEvent() const;
            Ent::Gen::String StopSyncClickEvent() const;
            Ent::Gen::String StopSyncEvent() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct StreamingManager : HelperObject // Object
        {
            StreamingManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StreamingManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool DisableStreaming() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SpatialMapManager : HelperObject // Object
        {
            SpatialMapManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SpatialMapManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ShamanVisionManager : HelperObject // Object
        {
            ShamanVisionManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShamanVisionManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float HighlightFactorGoddess() const;
            Ent::Gen::Float HighlightFactorPlayer() const;
            Ent::Gen::Float HighlightFactorSpecie() const;
            Ent::Gen::Bool ShowEnemiesState() const;
            Ent::Gen::Bool ShowInjuredState() const;
            Ent::Gen::Bool ShowPlayersState() const;
            Ent::Gen::Bool ShowPrisonersState() const;
            Ent::Gen::Bool ShowSpecieIcons() const;
            Ent::Gen::Float StateMinSizeDistance() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::Float TimerFactorGoddess() const;
            Ent::Gen::Float TimerFactorPlayer() const;
            Ent::Gen::Float TimerFactorSpecie() const;
            Ent::Gen::String _comment() const;
        };

        struct SensorManager : HelperObject // Object
        {
            SensorManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SensorManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int SensorPoolSize() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct Scheduler : HelperObject // Object
        {
            Scheduler(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Scheduler";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SceneManager : HelperObject // Object
        {
            SceneManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SceneManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ResourceDebugger : HelperObject // Object
        {
            ResourceDebugger(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ResourceDebugger";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ReloadManager : HelperObject // Object
        {
            ReloadManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReloadManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RegionManager : HelperObject // Object
        {
            RegionManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RegionManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RPCServerManager : HelperObject // Object
        {
            RPCServerManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RPCServerManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RPCMarshallingTests : HelperObject // Object
        {
            RPCMarshallingTests(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RPCMarshallingTests";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct QualityManager : HelperObject // Object
        {
            QualityManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "QualityManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float EntityLODDistanceHysteresis() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PlayerManager : HelperObject // Object
        {
            PlayerManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PlayerManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String SaveGame() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsEffectsManager : HelperObject // Object
        {
            PhysicsEffectsManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsEffectsManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float GravityConstant() const;
            Ent::Gen::PhysicsEffectsManager_PhysicsLimits Limits() const;
            Array<Ent::Gen::PhysicsMaterial> MaterialBank() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PestoManager : HelperObject // Object
        {
            PestoManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PestoManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PerceptionManager : HelperObject // Object
        {
            PerceptionManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PerceptionManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::Float> DistanceMultipliers() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ParticleManager : HelperObject // Object
        {
            ParticleManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ParticleManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int PoolSize() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct NavMeshManager : HelperObject // Object
        {
            NavMeshManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "NavMeshManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float NavMeshMaxHeight() const;
            Ent::Gen::Float NavMeshMaxSize() const;
            Ent::Gen::Map<char const*, Ent::Gen::RecastNavmeshGenerationParameters> RecastParameters() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::Float TileMargin() const;
            Ent::Gen::Float TileSize() const;
            Ent::Gen::Float VerticalTolerance() const;
            Ent::Gen::String _comment() const;
        };

        struct LoadSaveManager : HelperObject // Object
        {
            LoadSaveManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "LoadSaveManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String ClothDataFile() const;
            Ent::Gen::String IconDataFile() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct LightManager : HelperObject // Object
        {
            LightManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "LightManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct InputManager : HelperObject // Object
        {
            InputManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InputManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct InfoboardManager : HelperObject // Object
        {
            InfoboardManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InfoboardManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct HeightMapManager : HelperObject // Object
        {
            HeightMapManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HeightMapManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct GroundTypeManager : HelperObject // Object
        {
            GroundTypeManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GroundTypeManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct GameMasterManager : HelperObject // Object
        {
            GameMasterManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameMasterManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float MaxTimeBetweenSoulOpportunityRespawn() const;
            Ent::Gen::Float MinDistBetweenSoulOpportunityRespawn() const;
            Ent::Gen::Float RadiusWithoutEnemy() const;
            Ent::Gen::Float SoulOpportunitySpawnRadius() const;
            Ent::Gen::Float SoulOpportunityUnspawnInsideFrustumRadius() const;
            Ent::Gen::Float SoulOpportunityUnspawnOutsideFrustumRadius() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct GameEffectManager : HelperObject // Object
        {
            GameEffectManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameEffectManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String GameEffectFileExtension() const;
            Ent::Gen::String GameEffectsRootPath() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidManager : HelperObject // Object
        {
            FluidManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidGameplayQueriesManager : HelperObject // Object
        {
            FluidGameplayQueriesManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidGameplayQueriesManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FightManager : HelperObject // Object
        {
            FightManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FightManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EventManager : HelperObject // Object
        {
            EventManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EventManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnvironmentManager : HelperObject // Object
        {
            EnvironmentManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnvironmentManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityManager : HelperObject // Object
        {
            EntityManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct DialogManager : HelperObject // Object
        {
            DialogManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DialogManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String DialogFileExtension() const;
            Ent::Gen::String DialogsRootPath() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BoidsManager : HelperObject // Object
        {
            BoidsManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BoidsManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float FirstRootSpeedFactor() const;
            Ent::Gen::Float MergeEntityDistanceMultiplier() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::String boidPresets() const;
        };

        struct BillboardManager : HelperObject // Object
        {
            BillboardManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BillboardManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BehaviorManager : HelperObject // Object
        {
            BehaviorManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BehaviorManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimalManager : HelperObject // Object
        {
            AnimalManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimalManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::String animalName() const;
        };

        struct ActorManager : HelperObject // Object
        {
            ActorManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<PrimArray<Ent::Gen::Float>> SizePerceptionRanges() const;
            PrimArray<Ent::Gen::Float> Sizes() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateManager : HelperObject // Object
        {
            ActionStateManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String ArbiterConfigFile() const;
            Ent::Gen::Bool ForceTraceActorState() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct LocomotionMode : EnumPropHelper<LocomotionMode, LocomotionModeEnum> // Enum
        {
            using Enum = LocomotionModeEnum;
            using PropHelper<LocomotionMode, Enum>::operator=;
            LocomotionMode(Ent::Node* _node): EnumPropHelper<LocomotionMode, Enum>(_node) {}
            static constexpr char schemaName[] = "LocomotionMode";
            static constexpr char const* enumToString[] = {
                "standup",
                "quadstandup",
                "crouch",
                "prone",
                "swim",
                "ride",
                "fly",
                "dive",
                "fall",
                "cinematic",
                "ridden",
                "riddenfly",
                "fight",
                "clamber",
                "buried",
                "count",
            };
        };
        inline char const* toString(LocomotionModeEnum value)
        {
            if(size_t(value) >= std::size(LocomotionMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return LocomotionMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(LocomotionModeEnum value) { return toString(value); }
        template<> inline LocomotionModeEnum strToEnum<LocomotionModeEnum>(char const* value)
        {
            return static_cast<LocomotionModeEnum>(details::indexInEnum(value, LocomotionMode::enumToString));
        }

        struct MoveCapacityData_ReachSpeed : HelperObject // Object
        {
            MoveCapacityData_ReachSpeed(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MoveCapacityData::ReachSpeed";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float acceleration() const;
            Ent::Gen::Float deceleration() const;
            Ent::Gen::LocomotionMode name() const;
        };

        struct ListItem : HelperObject // Object
        {
            ListItem(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String EntityPath() const;
            Ent::Gen::EntityRef EntityRef() const;
            Ent::Gen::String Tag() const;
            Ent::Gen::String Thumbnail() const;
            Ent::Gen::String _comment() const;
        };

        struct LightType : EnumPropHelper<LightType, LightTypeEnum> // Enum
        {
            using Enum = LightTypeEnum;
            using PropHelper<LightType, Enum>::operator=;
            LightType(Ent::Node* _node): EnumPropHelper<LightType, Enum>(_node) {}
            static constexpr char schemaName[] = "LightType";
            static constexpr char const* enumToString[] = {
                "Omni",
                "Hemi",
                "Spot",
                "Dir",
                "LightType_Count",
            };
        };
        inline char const* toString(LightTypeEnum value)
        {
            if(size_t(value) >= std::size(LightType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return LightType::enumToString[size_t(value)];
        }
        inline char const* toInternal(LightTypeEnum value) { return toString(value); }
        template<> inline LightTypeEnum strToEnum<LightTypeEnum>(char const* value)
        {
            return static_cast<LightTypeEnum>(details::indexInEnum(value, LightType::enumToString));
        }

        struct Light : HelperObject // Object
        {
            Light(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Light";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Brightness() const;
            Ent::Gen::Bool Cast_Shadows() const;
            Ent::Gen::Vector3 Color() const;
            Ent::Gen::Float Dpsm_Plane_Threshold() const;
            Ent::Gen::Float Dpsm_Seam_Offset() const;
            Ent::Gen::Bool Enabled() const;
            Ent::Gen::Float Linear_attenuation_start() const;
            Ent::Gen::Float Linear_attenuation_stop() const;
            Ent::Gen::Float Radial_attenuation_start() const;
            Ent::Gen::Float Radial_attenuation_stop() const;
            Ent::Gen::Float Shadow_Depth_Bias() const;
            Ent::Gen::Float Shadow_Depth_Bias_Factor() const;
            Ent::Gen::LightType Type_() const;
            Ent::Gen::Bool Volumetric_Fog() const;
            Ent::Gen::String _comment() const;
        };

        struct LightAttackData : HelperObject // Object
        {
            LightAttackData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "LightAttackData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ResponsiblePointer_ActorState_ LightAttackState() const;
            Ent::Gen::String _comment() const;
        };

        struct lightAttackData : HelperObject // Object
        {
            lightAttackData(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::LightAttackData val() const;
        };

        struct LedgePositionInfo : HelperObject // Object
        {
            LedgePositionInfo(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "LedgePositionInfo";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct JumpHeightMultiplier : HelperObject // Object
        {
            JumpHeightMultiplier(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct IsActive : HelperObject // Object
        {
            IsActive(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct Invincible : HelperObject // Object
        {
            Invincible(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct InventoryTags : EnumPropHelper<InventoryTags, InventoryTagsEnum> // Enum
        {
            using Enum = InventoryTagsEnum;
            using PropHelper<InventoryTags, Enum>::operator=;
            InventoryTags(Ent::Node* _node): EnumPropHelper<InventoryTags, Enum>(_node) {}
            static constexpr char schemaName[] = "InventoryTags";
            static constexpr char const* enumToString[] = {
                "outfit",
                "item",
                "default",
                "lush",
                "corrupted",
                "soul",
                "disguise",
                "soulfreedflying",
                "soulfreednormal",
                "InventoryTags_COUNT",
            };
        };
        inline char const* toString(InventoryTagsEnum value)
        {
            if(size_t(value) >= std::size(InventoryTags::enumToString))
                throw std::runtime_error("Wrong enum value");
            return InventoryTags::enumToString[size_t(value)];
        }
        inline char const* toInternal(InventoryTagsEnum value) { return toString(value); }
        template<> inline InventoryTagsEnum strToEnum<InventoryTagsEnum>(char const* value)
        {
            return static_cast<InventoryTagsEnum>(details::indexInEnum(value, InventoryTags::enumToString));
        }

        struct TaggedEntityRef : HelperObject // Object
        {
            TaggedEntityRef(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TaggedEntityRef";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef EntityRef() const;
            PrimArray<Ent::Gen::InventoryTags> Tags() const;
            Ent::Gen::String _comment() const;
        };

        struct InterpolationMethod : EnumPropHelper<InterpolationMethod, InterpolationMethodEnum> // Enum
        {
            using Enum = InterpolationMethodEnum;
            using PropHelper<InterpolationMethod, Enum>::operator=;
            InterpolationMethod(Ent::Node* _node): EnumPropHelper<InterpolationMethod, Enum>(_node) {}
            static constexpr char schemaName[] = "InterpolationMethod";
            static constexpr char const* enumToString[] = {
                "Spline",
                "BSpline",
                "InterpolationMethod_COUNT",
            };
        };
        inline char const* toString(InterpolationMethodEnum value)
        {
            if(size_t(value) >= std::size(InterpolationMethod::enumToString))
                throw std::runtime_error("Wrong enum value");
            return InterpolationMethod::enumToString[size_t(value)];
        }
        inline char const* toInternal(InterpolationMethodEnum value) { return toString(value); }
        template<> inline InterpolationMethodEnum strToEnum<InterpolationMethodEnum>(char const* value)
        {
            return static_cast<InterpolationMethodEnum>(details::indexInEnum(value, InterpolationMethod::enumToString));
        }

        struct TrailProperties : HelperObject // Object
        {
            TrailProperties(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TrailProperties";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ComputeSplineCurvilinearUV() const;
            Ent::Gen::Float Duration() const;
            PrimArray<Ent::Gen::Int> FadeLuminosity() const;
            PrimArray<Ent::Gen::Int> FadeSize() const;
            Ent::Gen::Vector3 FrontalAxis() const;
            Ent::Gen::Vector3 HorizontalAxis() const;
            Ent::Gen::InterpolationMethod InterpolationMethod() const;
            Ent::Gen::Float IntervalBetweenTrailPoints() const;
            Ent::Gen::Float Luminosity() const;
            Ent::Gen::String LuminosityCurvePath() const;
            Ent::Gen::Float LuminosityVariability() const;
            Ent::Gen::Int NbSplinePointsBetweenTrailPoints() const;
            Array<Ent::Gen::TrailRendererProperties> RenderingProperties() const;
            Ent::Gen::TrailRenderingType RenderingType() const;
            Ent::Gen::Vector2 Size() const;
            Ent::Gen::String SizeCurvePath() const;
            Ent::Gen::Vector2 SizeVariability() const;
            Ent::Gen::Bool TrimTransparentPoints() const;
            Ent::Gen::TrailUVUnwrappingMode UVUnwrappingMode() const;
            Ent::Gen::String UVZoomCurvilinearCurvePath() const;
            Ent::Gen::Vector3 VerticalAxis() const;
            Ent::Gen::String _comment() const;
        };

        struct Interactor : HelperObject // Object
        {
            Interactor(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
        };

        struct InputCollisionBehaviorData : HelperObject // Object
        {
            InputCollisionBehaviorData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InputCollisionBehaviorData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AltitudeMax() const;
            Ent::Gen::Float DepthMax() const;
            Ent::Gen::Float FrontAngle() const;
            Ent::Gen::Float RadiusCoeff() const;
            Ent::Gen::String _comment() const;
        };

        struct InertiaTensor : HelperObject // Object
        {
            InertiaTensor(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Vector3 val() const;
        };

        struct ImpactAndSolidityData : HelperObject // Object
        {
            ImpactAndSolidityData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ImpactAndSolidityData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            PrimArray<Ent::Gen::Float> impactPercent() const;
            Ent::Gen::Float solidity() const;
            Ent::Gen::Bool unbreakable() const;
            Ent::Gen::Float velocityImpactMax() const;
        };

        struct ID : HelperObject // Object
        {
            ID(Ent::Node* _node): HelperObject(_node) {}
            
        
        };

        struct PhysicsReplicateData : HelperObject // Object
        {
            PhysicsReplicateData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsReplicateData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector3 AngularV() const;
            Ent::Gen::ID ID() const;
            Ent::Gen::Vector3 LinearV() const;
            Ent::Gen::Position Position() const;
            Ent::Gen::Quat Rotation() const;
            Ent::Gen::String _comment() const;
        };

        struct HotSpotType : EnumPropHelper<HotSpotType, HotSpotTypeEnum> // Enum
        {
            using Enum = HotSpotTypeEnum;
            using PropHelper<HotSpotType, Enum>::operator=;
            HotSpotType(Ent::Node* _node): EnumPropHelper<HotSpotType, Enum>(_node) {}
            static constexpr char schemaName[] = "HotSpotType";
            static constexpr char const* enumToString[] = {
                "all",
                "none",
                "back",
                "beam",
                "bite",
                "biter",
                "breakablestrong",
                "breakableweak",
                "camera",
                "center",
                "grab",
                "head",
                "heal",
                "ride",
                "root",
                "snap",
                "slot",
                "spawnlife",
                "shoot",
                "take",
                "takehandle",
                "vertebra",
                "respawnslot",
                "HotSpotType_COUNT",
            };
        };
        inline char const* toString(HotSpotTypeEnum value)
        {
            if(size_t(value) >= std::size(HotSpotType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return HotSpotType::enumToString[size_t(value)];
        }
        inline char const* toInternal(HotSpotTypeEnum value) { return toString(value); }
        template<> inline HotSpotTypeEnum strToEnum<HotSpotTypeEnum>(char const* value)
        {
            return static_cast<HotSpotTypeEnum>(details::indexInEnum(value, HotSpotType::enumToString));
        }

        struct PickableDistributorComponentData : HelperObject // Object
        {
            PickableDistributorComponentData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PickableDistributorComponentData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef EntityRef() const;
            Ent::Gen::HotSpotType HotspotType() const;
            Ent::Gen::String _comment() const;
        };

        struct HotspotData : HelperObject // Object
        {
            HotspotData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HotspotData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Bone() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::Quat Orientation() const;
            Ent::Gen::Float Scale() const;
            Ent::Gen::PrimitiveSet<char const*> Tags() const;
            Ent::Gen::EntityRef TargetEntityRef() const;
            Ent::Gen::HotSpotType Type_() const;
            Ent::Gen::String _comment() const;
        };

        struct HitWallEnvironmentData : HelperObject // Object
        {
            HitWallEnvironmentData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HitWallEnvironmentData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float NormalAngleMax() const;
            Ent::Gen::Float NormalAngleMin() const;
            Ent::Gen::Float RetimingVerticalAngleMax() const;
            Ent::Gen::Float RetimingVerticalAngleMin() const;
            Ent::Gen::String _comment() const;
        };

        struct HitWallData : HelperObject // Object
        {
            HitWallData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HitWallData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AverageSpeedThreshold() const;
            Ent::Gen::Float ContactAngleMax() const;
            Ent::Gen::HitWallEnvironmentData DefaultEnvironmentData() const;
            Ent::Gen::HitWallEnvironmentData GroundedEnvironmentData() const;
            Ent::Gen::Float HitWallFallHeightThreshold() const;
            Ent::Gen::Float OrientationAlignementFactor() const;
            Ent::Gen::Float RetimingHorizontalAngleMax() const;
            Ent::Gen::String _comment() const;
        };

        struct HitType : EnumPropHelper<HitType, HitTypeEnum> // Enum
        {
            using Enum = HitTypeEnum;
            using PropHelper<HitType, Enum>::operator=;
            HitType(Ent::Node* _node): EnumPropHelper<HitType, Enum>(_node) {}
            static constexpr char schemaName[] = "HitType";
            static constexpr char const* enumToString[] = {
                "HitInstant",
                "HitPoison",
                "HitType_COUNT",
            };
        };
        inline char const* toString(HitTypeEnum value)
        {
            if(size_t(value) >= std::size(HitType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return HitType::enumToString[size_t(value)];
        }
        inline char const* toInternal(HitTypeEnum value) { return toString(value); }
        template<> inline HitTypeEnum strToEnum<HitTypeEnum>(char const* value)
        {
            return static_cast<HitTypeEnum>(details::indexInEnum(value, HitType::enumToString));
        }

        struct HitStyle : EnumPropHelper<HitStyle, HitStyleEnum> // Enum
        {
            using Enum = HitStyleEnum;
            using PropHelper<HitStyle, Enum>::operator=;
            HitStyle(Ent::Node* _node): EnumPropHelper<HitStyle, Enum>(_node) {}
            static constexpr char schemaName[] = "HitStyle";
            static constexpr char const* enumToString[] = {
                "None",
                "Bite",
                "Light",
                "Medium",
                "Big",
                "Eject",
                "EjectFar",
                "Fall",
                "Impact",
                "HitStyle_COUNT",
            };
        };
        inline char const* toString(HitStyleEnum value)
        {
            if(size_t(value) >= std::size(HitStyle::enumToString))
                throw std::runtime_error("Wrong enum value");
            return HitStyle::enumToString[size_t(value)];
        }
        inline char const* toInternal(HitStyleEnum value) { return toString(value); }
        template<> inline HitStyleEnum strToEnum<HitStyleEnum>(char const* value)
        {
            return static_cast<HitStyleEnum>(details::indexInEnum(value, HitStyle::enumToString));
        }

        struct HeadCollisionBehaviorData : HelperObject // Object
        {
            HeadCollisionBehaviorData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HeadCollisionBehaviorData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float disableDuration() const;
            Ent::Gen::Float enableDuration() const;
            Ent::Gen::Vector3 headOffset() const;
            Ent::Gen::Bool isEnabled() const;
            Ent::Gen::Float radiusCoeff() const;
            Ent::Gen::ScaleConverter slopeInfluence() const;
            Ent::Gen::Float softCollisionRigidbodyCoeff() const;
            Ent::Gen::Float softCollisionVisualCoeff() const;
            Ent::Gen::ScaleConverter speedInfluence() const;
            Ent::Gen::ScaleConverter visualSmoothOut() const;
        };

        struct GrowingState : EnumPropHelper<GrowingState, GrowingStateEnum> // Enum
        {
            using Enum = GrowingStateEnum;
            using PropHelper<GrowingState, Enum>::operator=;
            GrowingState(Ent::Node* _node): EnumPropHelper<GrowingState, Enum>(_node) {}
            static constexpr char schemaName[] = "GrowingState";
            static constexpr char const* enumToString[] = {
                "invalid",
                "nogrow",
                "growing",
                "grown",
                "manualgrow",
                "degrowing",
                "GrowingState_COUNT",
            };
        };
        inline char const* toString(GrowingStateEnum value)
        {
            if(size_t(value) >= std::size(GrowingState::enumToString))
                throw std::runtime_error("Wrong enum value");
            return GrowingState::enumToString[size_t(value)];
        }
        inline char const* toInternal(GrowingStateEnum value) { return toString(value); }
        template<> inline GrowingStateEnum strToEnum<GrowingStateEnum>(char const* value)
        {
            return static_cast<GrowingStateEnum>(details::indexInEnum(value, GrowingState::enumToString));
        }

        struct GroupAvoidanceEnum : EnumPropHelper<GroupAvoidanceEnum, GroupAvoidanceEnumEnum> // Enum
        {
            using Enum = GroupAvoidanceEnumEnum;
            using PropHelper<GroupAvoidanceEnum, Enum>::operator=;
            GroupAvoidanceEnum(Ent::Node* _node): EnumPropHelper<GroupAvoidanceEnum, Enum>(_node) {}
            static constexpr char schemaName[] = "GroupAvoidanceEnum";
            static constexpr char const* enumToString[] = {
                "lush",
                "corrupted",
                "tiny",
                "small",
                "medium",
                "big",
                "enormous",
                "GroupAvoidanceEnum_COUNT",
            };
        };
        inline char const* toString(GroupAvoidanceEnumEnum value)
        {
            if(size_t(value) >= std::size(GroupAvoidanceEnum::enumToString))
                throw std::runtime_error("Wrong enum value");
            return GroupAvoidanceEnum::enumToString[size_t(value)];
        }
        inline char const* toInternal(GroupAvoidanceEnumEnum value) { return toString(value); }
        template<> inline GroupAvoidanceEnumEnum strToEnum<GroupAvoidanceEnumEnum>(char const* value)
        {
            return static_cast<GroupAvoidanceEnumEnum>(details::indexInEnum(value, GroupAvoidanceEnum::enumToString));
        }

        struct VelocityObstaclesManager : HelperObject // Object
        {
            VelocityObstaclesManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VelocityObstaclesManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AcceptableAccelerationForAvoidance() const;
            Ent::Gen::Bool Active() const;
            Ent::Gen::Float AvoidanceRadiusAdaptabilityFactor() const;
            Ent::Gen::Map<SizeEnum, PrimArray<Ent::Gen::GroupAvoidanceEnum>> GroupsAvoidanceIgnoredBySize() const;
            Ent::Gen::Float RunningSpeed() const;
            Ent::Gen::Int SimMaxNeighbors() const;
            Ent::Gen::Float SimMaxSpeed() const;
            Ent::Gen::Float SimNeighborDist() const;
            Ent::Gen::Float SimPrefSpeedFactor() const;
            Ent::Gen::Float SimRadius() const;
            Ent::Gen::Int SimSlowDownWhenAvoiding() const;
            Ent::Gen::Float SimTimeHorizon() const;
            Ent::Gen::Float SimTimeHorizonObst() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::Float WalkingSpeed() const;
            Ent::Gen::String _comment() const;
        };

        struct GroundTypeData : HelperObject // Object
        {
            GroundTypeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GroundTypeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float GrainRangeMax() const;
            Ent::Gen::Float GrainRangeMin() const;
            Ent::Gen::String Name() const;
            Ent::Gen::Float RegenRangeMax() const;
            Ent::Gen::Float RegenRangeMin() const;
            Ent::Gen::String _comment() const;
        };

        struct GrasperInteractionData : HelperObject // Object
        {
            GrasperInteractionData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GrasperInteractionData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float anticipationSpeedFactor() const;
            Ent::Gen::Float attackDamages() const;
            Ent::Gen::Float deltaAngleMax() const;
            Ent::Gen::Float distanceHysteris() const;
            Ent::Gen::Float distanceMax() const;
            Ent::Gen::Float graspDurationMax() const;
            Ent::Gen::Float graspOutVisualRotationRate() const;
            Ent::Gen::Float graspStrength() const;
            Ent::Gen::String interactableBoneName() const;
            Ent::Gen::ScaleConverter syncDeltaRotationDuration() const;
            Ent::Gen::ScaleConverter syncDeltaTranslationDuration() const;
        };

        struct GraspableInteractionData : HelperObject // Object
        {
            GraspableInteractionData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GraspableInteractionData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float graspStrength() const;
            Ent::Gen::Float graspedDurationMax() const;
            Ent::Gen::HotSpotType hotspotType() const;
            Ent::Gen::ScaleConverter impactRetiming() const;
            Ent::Gen::Float incapacitatedTime() const;
            Ent::Gen::String interactableBoneName() const;
            Ent::Gen::Float visualRotationRate() const;
        };

        struct GraspType : EnumPropHelper<GraspType, GraspTypeEnum> // Enum
        {
            using Enum = GraspTypeEnum;
            using PropHelper<GraspType, Enum>::operator=;
            GraspType(Ent::Node* _node): EnumPropHelper<GraspType, Enum>(_node) {}
            static constexpr char schemaName[] = "GraspType";
            static constexpr char const* enumToString[] = {
                "Bite",
                "Grab",
                "Hold",
                "GraspType_COUNT",
            };
        };
        inline char const* toString(GraspTypeEnum value)
        {
            if(size_t(value) >= std::size(GraspType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return GraspType::enumToString[size_t(value)];
        }
        inline char const* toInternal(GraspTypeEnum value) { return toString(value); }
        template<> inline GraspTypeEnum strToEnum<GraspTypeEnum>(char const* value)
        {
            return static_cast<GraspTypeEnum>(details::indexInEnum(value, GraspType::enumToString));
        }

        struct GraspResistanceData : HelperObject // Object
        {
            GraspResistanceData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GraspResistanceData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float resistanceMax() const;
            Ent::Gen::ScaleConverter strengthMultiplierCurve() const;
        };

        struct GeometryStamper : HelperObject // Object
        {
            GeometryStamper(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GeometryStamper";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Transform3D Transform() const;
            Ent::Gen::String _comment() const;
        };

        struct SkinnedPhysMeshStamper : HelperObject // Object
        {
            SkinnedPhysMeshStamper(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SkinnedPhysMeshStamper";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::GeometryStamper Super() const;
            Ent::Gen::String _comment() const;
        };

        struct MeshStamper : HelperObject // Object
        {
            MeshStamper(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MeshStamper";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String MeshFilePath() const;
            Ent::Gen::GeometryStamper Super() const;
            Ent::Gen::Walkability Walkability() const;
            Ent::Gen::String _comment() const;
        };

        struct GameTimeInMs : HelperObject // Object
        {
            GameTimeInMs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameTimeInMs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct GameProfile : HelperObject // Object
        {
            GameProfile(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameProfile";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Array<Array<Ent::Gen::Tuple<Ent::Gen::GameTimeInMs, Ent::Gen::Float>>>> TypedScoreOverTimeList() const;
            Ent::Gen::String _comment() const;
        };

        struct GameSoftCollisionData : HelperObject // Object
        {
            GameSoftCollisionData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameSoftCollisionData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DecelerationFactor() const;
            Ent::Gen::Float InsidePenetrationCoeff() const;
            Ent::Gen::Float MaxSpeedFactor() const;
            Ent::Gen::Float MinSpeedFactor() const;
            Ent::Gen::SpeedMode MinSpeedMode() const;
            Ent::Gen::Float StuckDuration() const;
            Ent::Gen::Float StuckPenetrationCoeff() const;
            Ent::Gen::String _comment() const;
        };

        struct GameSnapData : HelperObject // Object
        {
            GameSnapData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameSnapData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float creatureSizeCoeff() const;
            Ent::Gen::Float dirCoeff() const;
            Ent::Gen::Float distCoeff() const;
            Ent::Gen::Float maxAngle() const;
            Ent::Gen::Float maxDist() const;
        };

        struct GameSlopeData : HelperObject // Object
        {
            GameSlopeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameSlopeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AngleMin() const;
            Ent::Gen::Float AngleMinHysteresis() const;
            Ent::Gen::Float ForceAgainstSlopeAdherenceMin() const;
            Ent::Gen::Float ForceAgainstSlopeAdherenceMinHysteresis() const;
            Ent::Gen::Float OrientationDotMin() const;
            Ent::Gen::Float OrientationDotMinHysteresis() const;
            Ent::Gen::String _comment() const;
        };

        struct GameShamanVisionData : HelperObject // Object
        {
            GameShamanVisionData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameShamanVisionData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AudioAngle() const;
            Ent::Gen::Float IconDisableDisplayDuration() const;
            Ent::Gen::Float IconDisplayDuration() const;
            Ent::Gen::Float IconEnableDisplayDuration() const;
            Ent::Gen::ScaleConverter IntensityGoddess() const;
            Ent::Gen::ScaleConverter IntensityPlayer() const;
            Ent::Gen::ScaleConverter IntensitySpecie() const;
            Ent::Gen::ScaleConverter PerceptionGoddess() const;
            Ent::Gen::ScaleConverter PerceptionPlayer() const;
            Ent::Gen::ScaleConverter PerceptionSpecie() const;
            Ent::Gen::String Sound_Locate_HeartBeat() const;
            Ent::Gen::String Sound_UI_Locate_HeartBeat_Stop() const;
            Ent::Gen::String Sound_UI_Locate_In() const;
            Ent::Gen::String Sound_UI_Locate_Out() const;
            Ent::Gen::String _comment() const;
        };

        struct GameReviveData : HelperObject // Object
        {
            GameReviveData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameReviveData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AnimPlayRatioSpeedIn() const;
            Ent::Gen::Float AnimPlayRatioSpeedOut() const;
            Ent::Gen::Float AnimPlayRatioSpeedRate() const;
            Ent::Gen::String _comment() const;
        };

        struct GameRespawnData : HelperObject // Object
        {
            GameRespawnData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameRespawnData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float RespawnDelayOnDeath() const;
            Ent::Gen::Float SetRespawnPlaceAsCheckpointDuration() const;
            Ent::Gen::String _comment() const;
        };

        struct GamePropelData : HelperObject // Object
        {
            GamePropelData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GamePropelData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AttractorFactorFallThreshold() const;
            Ent::Gen::Float AttractorFactorRaiseThreshold() const;
            Ent::Gen::Float EnterAngleMin() const;
            Ent::Gen::Float EnterSpeedMin() const;
            PrimArray<Ent::Gen::Float> Speed() const;
            Ent::Gen::String _comment() const;
        };

        struct GameParryData : HelperObject // Object
        {
            GameParryData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameParryData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Cooldown() const;
            Ent::Gen::String _comment() const;
        };

        struct GamePadSpeedBehaviorData : HelperObject // Object
        {
            GamePadSpeedBehaviorData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GamePadSpeedBehaviorData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ScaleConverter DeadZoneThreshold() const;
            Ent::Gen::Float JoyAcceleration() const;
            Ent::Gen::Float PostponeDelayMax() const;
            Ent::Gen::Float PostponeNormMax() const;
            Ent::Gen::Float SpeedFastMinDuration() const;
            Ent::Gen::Float SpeedMediumThreshold() const;
            Ent::Gen::ScaleConverter SpeedSlowThreshold() const;
            Ent::Gen::String _comment() const;
        };

        struct GamePadNavigationData : HelperObject // Object
        {
            GamePadNavigationData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GamePadNavigationData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float clamberDirectionDeltaAngle() const;
            Ent::Gen::Float invertInputFactor() const;
            Ent::Gen::Float joyLockedAngularSpeedMax() const;
            Ent::Gen::Float meshNavigationMaxDeltaAngleToKeepInputLock() const;
            Ent::Gen::Float normalAlignmentToKeepTrajectory() const;
        };

        struct GameLODData : HelperObject // Object
        {
            GameLODData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameLODData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::Float> CreatureDistance() const;
            Ent::Gen::String _comment() const;
        };

        struct GameInfoDB : HelperObject // Object
        {
            GameInfoDB(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameInfoDB";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::Map<char const*, Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_>> Store() const;
            Ent::Gen::String _comment() const;
        };

        struct GameImmersionData : HelperObject // Object
        {
            GameImmersionData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameImmersionData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float friction() const;
            Ent::Gen::Float immersedFactor() const;
            Ent::Gen::Float immersedFactorMaxToJump() const;
            Ent::Gen::Float pitchMaxAngleToJump() const;
            Ent::Gen::Float pitchMinAngleToJump() const;
            Ent::Gen::ScaleConverter reachSurfaceAcceleration() const;
            Ent::Gen::Float speedZMinToJump() const;
        };

        struct GameFlyData_FlyUp : HelperObject // Object
        {
            GameFlyData_FlyUp(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFlyData::FlyUp";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Acceleration() const;
            Ent::Gen::Float Deceleration() const;
            Ent::Gen::Float ExitDeceleration() const;
            Ent::Gen::Float PitchStart() const;
            Ent::Gen::ScaleConverter SpeedFactor() const;
            Ent::Gen::String _comment() const;
        };

        struct GameFlyData_FlyDown : HelperObject // Object
        {
            GameFlyData_FlyDown(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFlyData::FlyDown";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ScaleConverter Acceleration() const;
            Ent::Gen::ScaleConverter Deceleration() const;
            Ent::Gen::Float ExitDeceleration() const;
            Ent::Gen::Float PitchStart() const;
            Ent::Gen::Float SpeedSlowFactor() const;
            Ent::Gen::String _comment() const;
        };

        struct GameFlyData_Flap : HelperObject // Object
        {
            GameFlyData_Flap(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFlyData::Flap";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float RollMin() const;
            Ent::Gen::String _comment() const;
        };

        struct GameFlyData_Dive : HelperObject // Object
        {
            GameFlyData_Dive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFlyData::Dive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ScaleConverter Acceleration() const;
            Ent::Gen::ScaleConverter Deceleration() const;
            Ent::Gen::Float ExitDeceleration() const;
            Ent::Gen::Float SpeedFastFactor() const;
            Ent::Gen::String _comment() const;
        };

        struct GameFlyData_Centrifugal : HelperObject // Object
        {
            GameFlyData_Centrifugal(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFlyData::Centrifugal";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ScaleConverter Acceleration() const;
            Ent::Gen::String _comment() const;
        };

        struct GameFlyData : HelperObject // Object
        {
            GameFlyData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFlyData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::GameFlyData_Centrifugal Centrifugal() const;
            Ent::Gen::GameFlyData_Dive Dive() const;
            Ent::Gen::GameFlyData_Flap Flap() const;
            Ent::Gen::ScaleConverter FlyBlendIn() const;
            Ent::Gen::GameFlyData_FlyDown FlyDown() const;
            Ent::Gen::ScaleConverter FlyExitBlendIn() const;
            Ent::Gen::ScaleConverter FlyPitchCoeffFromSpeedCoeff() const;
            Ent::Gen::GameFlyData_FlyUp FlyUp() const;
            Ent::Gen::String _comment() const;
        };

        struct GameFluidData_HeightThreshold : HelperObject // Object
        {
            GameFluidData_HeightThreshold(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFluidData::HeightThreshold";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Damage() const;
            Ent::Gen::Float Depth() const;
            Ent::Gen::HitStyle HitStyle() const;
            Ent::Gen::Float Impact() const;
            Ent::Gen::String _comment() const;
        };

        struct GameFluidData : HelperObject // Object
        {
            GameFluidData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFluidData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::Float> FlowSpeedInfluences() const;
            Array<Array<Ent::Gen::GameFluidData_HeightThreshold>> HeightThresholds() const;
            Ent::Gen::String _comment() const;
        };

        struct GameFeetCatchUpData : HelperObject // Object
        {
            GameFeetCatchUpData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameFeetCatchUpData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::ScaleConverter aerialRate() const;
            Ent::Gen::ScaleConverter groundRate() const;
            Ent::Gen::Map<SizeEnum, Ent::Gen::Bool> useHeightmapPerSize() const;
        };

        struct GameEdgeData : HelperObject // Object
        {
            GameEdgeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameEdgeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float EdgeAngleMax() const;
            Ent::Gen::Float EdgeSizeMin() const;
            Ent::Gen::String _comment() const;
        };

        struct GameDeathData : HelperObject // Object
        {
            GameDeathData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameDeathData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float defaultFreedDelay() const;
            Ent::Gen::Float immersedFreedDelay() const;
            Ent::Gen::Float leavingLavaDelay() const;
            Ent::Gen::Float meetingLavaDelay() const;
        };

        struct GameClockManager_TimeOfDay : HelperObject // Object
        {
            GameClockManager_TimeOfDay(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameClockManager::TimeOfDay";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int Hour() const;
            Ent::Gen::Int Minute() const;
            Ent::Gen::String _comment() const;
        };

        struct GameClockManager_GameDate : HelperObject // Object
        {
            GameClockManager_GameDate(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameClockManager::GameDate";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int DayOfYear() const;
            Ent::Gen::String Season() const;
            Ent::Gen::GameClockManager_TimeOfDay TimeOfDay() const;
            Ent::Gen::Int Year() const;
            Ent::Gen::String _comment() const;
        };

        struct GameClockManager : HelperObject // Object
        {
            GameClockManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameClockManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int DayDurationInMin() const;
            Ent::Gen::Int DayDurationInMs() const;
            Ent::Gen::Int FallDurationInDay() const;
            Ent::Gen::Bool FreezeTime() const;
            Ent::Gen::Int SpringDurationInDay() const;
            Ent::Gen::GameClockManager_GameDate StartTime() const;
            Ent::Gen::Int SummerDurationInDay() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::Int WinterDurationInDay() const;
            Ent::Gen::String _comment() const;
        };

        struct GameBiteData : HelperObject // Object
        {
            GameBiteData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameBiteData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::Float> BiterShakeStamina() const;
            PrimArray<Ent::Gen::Float> BiterStrength() const;
            PrimArray<Ent::Gen::Float> BittenResistance() const;
            PrimArray<Ent::Gen::Float> BittenShakeExhaustion() const;
            Ent::Gen::String _comment() const;
        };

        struct GameBeamSnapData : HelperObject // Object
        {
            GameBeamSnapData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameBeamSnapData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Max2DDist() const;
            Ent::Gen::Float Max2DDistScoreCoeff() const;
            Ent::Gen::Float Max3DDistScoreCoeff() const;
            Ent::Gen::Float MinCameraDepth() const;
            Ent::Gen::String _comment() const;
        };

        struct GPEType : EnumPropHelper<GPEType, GPETypeEnum> // Enum
        {
            using Enum = GPETypeEnum;
            using PropHelper<GPEType, Enum>::operator=;
            GPEType(Ent::Node* _node): EnumPropHelper<GPEType, Enum>(_node) {}
            static constexpr char schemaName[] = "GPEType";
            static constexpr char const* enumToString[] = {
                "BendTree",
                "Geyser",
                "PossessFlocking",
                "Bridge",
                "GPEType_COUNT",
            };
        };
        inline char const* toString(GPETypeEnum value)
        {
            if(size_t(value) >= std::size(GPEType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return GPEType::enumToString[size_t(value)];
        }
        inline char const* toInternal(GPETypeEnum value) { return toString(value); }
        template<> inline GPETypeEnum strToEnum<GPETypeEnum>(char const* value)
        {
            return static_cast<GPETypeEnum>(details::indexInEnum(value, GPEType::enumToString));
        }

        struct FurProperties : HelperObject // Object
        {
            FurProperties(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FurProperties";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AngularShift() const;
            Ent::Gen::Float AzimuthalRoughness() const;
            Ent::Gen::Float FinsMaskUScale() const;
            Ent::Gen::Int FinsTextureArrayIndex() const;
            Ent::Gen::Float FocusShadowDistanceOffset() const;
            Ent::Gen::Float LinearAbsorption() const;
            Ent::Gen::Float MultiScatteringPower() const;
            Ent::Gen::Float MultiScatteringWrap() const;
            Ent::Gen::Float Roughness() const;
            Ent::Gen::Vector3 SpecularFactor() const;
            Ent::Gen::Float Stiffness() const;
            Ent::Gen::Float Thickness() const;
            Ent::Gen::Bool UseNewLighting() const;
            Ent::Gen::Float Weight() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float focusShadowRelativeThickness() const;
        };

        struct FreezeData : HelperObject // Object
        {
            FreezeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FreezeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float deltaTimeFactor() const;
            Ent::Gen::eventStringHash eventStringHash() const;
            Ent::Gen::Float stateDuration() const;
            Ent::Gen::Float transitionInDuration() const;
            Ent::Gen::Float transitionOutDuration() const;
        };

        struct ForceMultiplier : HelperObject // Object
        {
            ForceMultiplier(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct ForceBlendInReachRequired : HelperObject // Object
        {
            ForceBlendInReachRequired(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct ForceBlendIn : HelperObject // Object
        {
            ForceBlendIn(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct FluidVolumeComponentGD_SimulationParameters : HelperObject // Object
        {
            FluidVolumeComponentGD_SimulationParameters(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidVolumeComponentGD::SimulationParameters";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Evaporation() const;
            Ent::Gen::Float Momentum() const;
            Ent::Gen::Float Precision() const;
            Ent::Gen::Float Viscosity() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidVolumeComponentGD_HeightMapData : HelperObject // Object
        {
            FluidVolumeComponentGD_HeightMapData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidVolumeComponentGD::HeightMapData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Path() const;
            Ent::Gen::String TerrainName() const;
            Ent::Gen::Vector2 WorldSize() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidVolumeComponentGD_FluidVolumeData : HelperObject // Object
        {
            FluidVolumeComponentGD_FluidVolumeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidVolumeComponentGD::FluidVolumeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::FluidVolumeComponentGD_HeightMapData HeightMap() const;
            Ent::Gen::Vector2 InHeightMapWorldSizeOffset() const;
            Ent::Gen::String Material() const;
            Ent::Gen::FluidVolumeComponentGD_SimulationParameters Simulation() const;
            Ent::Gen::Vector2 WorldSize() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidType : EnumPropHelper<FluidType, FluidTypeEnum> // Enum
        {
            using Enum = FluidTypeEnum;
            using PropHelper<FluidType, Enum>::operator=;
            FluidType(Ent::Node* _node): EnumPropHelper<FluidType, Enum>(_node) {}
            static constexpr char schemaName[] = "FluidType";
            static constexpr char const* enumToString[] = {
                "water",
                "lava",
                "mud",
                "FluidType_COUNT",
            };
        };
        inline char const* toString(FluidTypeEnum value)
        {
            if(size_t(value) >= std::size(FluidType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return FluidType::enumToString[size_t(value)];
        }
        inline char const* toInternal(FluidTypeEnum value) { return toString(value); }
        template<> inline FluidTypeEnum strToEnum<FluidTypeEnum>(char const* value)
        {
            return static_cast<FluidTypeEnum>(details::indexInEnum(value, FluidType::enumToString));
        }

        struct ImmersedBehaviorData : HelperObject // Object
        {
            ImmersedBehaviorData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ImmersedBehaviorData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool canClimbWaterfall() const;
            Ent::Gen::Float constrainedToPlaneForce() const;
            Ent::Gen::Float delayBetweenImpulses() const;
            Ent::Gen::Float depth() const;
            Ent::Gen::Float depthHysteresisCoeff() const;
            Ent::Gen::ScaleConverter depthMaxRange() const;
            Ent::Gen::Float flotation() const;
            Ent::Gen::Float immersionEndWaterfallJump() const;
            Ent::Gen::Float impulseForce() const;
            Ent::Gen::Bool isAllowed() const;
            Ent::Gen::Float minTooDeepPushSpeed() const;
            Ent::Gen::Float reachSurfaceAccelerationCoeff() const;
            Ent::Gen::Map<FluidTypeEnum, Ent::Gen::ScaleConverter> slowDowns() const;
        };

        struct FluidData : HelperObject // Object
        {
            FluidData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::constraintPlaneWorldPosition constraintPlaneWorldPosition() const;
            Ent::Gen::Float depth() const;
            Ent::Gen::Float energy() const;
            Ent::Gen::Vector3 fluidCurrent() const;
            Ent::Gen::Bool hasDepthImpactOnControl() const;
            Ent::Gen::Bool isWaterfall() const;
            Ent::Gen::Float level() const;
            Ent::Gen::Vector3 normal() const;
            Ent::Gen::FluidType type() const;
        };

        struct FloatRange : HelperObject // Object
        {
            FloatRange(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FloatRange";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector2 MinMax() const;
            Ent::Gen::String _comment() const;
        };

        struct SmallActorSpawnRuleData : HelperObject // Object
        {
            SmallActorSpawnRuleData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SmallActorSpawnRuleData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String AudioEventName() const;
            Ent::Gen::String AudioEventSoundBank() const;
            Ent::Gen::FloatRange DayTimeRange() const;
            Ent::Gen::FloatRange DistanceRange() const;
            Ent::Gen::FloatRange PrecipitationRange() const;
            Ent::Gen::FloatRange RegenRange() const;
            Ent::Gen::Float SpawnProbability() const;
            Ent::Gen::String _comment() const;
        };

        struct SmallActorSpawnPointData : HelperObject // Object
        {
            SmallActorSpawnPointData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SmallActorSpawnPointData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float SelectionProbability() const;
            Array<Ent::Gen::SmallActorSpawnRuleData> SpawnRules() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundOpportunitiesConfig : HelperObject // Object
        {
            SoundOpportunitiesConfig(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundOpportunitiesConfig";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::SmallActorSpawnPointData> SmallActorSpawnRules() const;
            Ent::Gen::String _comment() const;
        };

        struct FadeDuration : HelperObject // Object
        {
            FadeDuration(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct FadeDelay : HelperObject // Object
        {
            FadeDelay(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct FactionSpecieRelationData : HelperObject // Object
        {
            FactionSpecieRelationData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FactionSpecieRelationData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String name() const;
            Ent::Gen::String specie() const;
        };

        struct FactionRelationData : HelperObject // Object
        {
            FactionRelationData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FactionRelationData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String faction1() const;
            Ent::Gen::String faction2() const;
            Ent::Gen::String relation() const;
        };

        struct FactionData : HelperObject // Object
        {
            FactionData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FactionData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String name() const;
        };

        struct FactionManager : HelperObject // Object
        {
            FactionManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FactionManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::FactionSpecieRelationData> FactionSpecieRelations() const;
            Array<Ent::Gen::FactionData> Factions() const;
            Array<Ent::Gen::FactionRelationData> Relations() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EventMusic : HelperObject // Object
        {
            EventMusic(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EventMusic";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String PlayerDeathBank() const;
            Ent::Gen::String PlayerDeathEvent() const;
            Ent::Gen::Int PlayerDeathMusicPriority() const;
            Ent::Gen::Float PlayerDeathTimeOnStack() const;
            Ent::Gen::String PlayerVictoryBank() const;
            Ent::Gen::String PlayerVictoryEvent() const;
            Ent::Gen::String ReleaseCreatureBankPrefix() const;
            Ent::Gen::String ReleaseCreatureEventPrefix() const;
            Ent::Gen::Int ReleaseCreatureMusicPriority() const;
            Ent::Gen::Float ReleaseCreatureTimeOnStack() const;
            Ent::Gen::String ReleaseSoulBankPrefix() const;
            Ent::Gen::String ReleaseSoulEventPrefix() const;
            Ent::Gen::Int ReleaseSoulMusicPriority() const;
            Ent::Gen::Float ReleaseSoulTimeOnStack() const;
            Ent::Gen::SyncTempoMode SynchronizationMode() const;
            Ent::Gen::String _comment() const;
        };

        struct MusicManager : HelperObject // Object
        {
            MusicManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MusicManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::MusicCategory> Categories() const;
            Ent::Gen::EventMusic EventMusicParam() const;
            PrimArray<Ent::Gen::String> PlayerMusicTypes() const;
            Ent::Gen::String RTPCMixWorldPrefix() const;
            Ent::Gen::String RelationsParamPath() const;
            Ent::Gen::ShowdownMusic ShowdownMusicParam() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::UIMusic UIMusicParam() const;
            PrimArray<Ent::Gen::String> WorldMusicTypes() const;
            Ent::Gen::String _comment() const;
        };

        struct EventCameraData : HelperObject // Object
        {
            EventCameraData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EventCameraData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float BlendCameraTime() const;
            Ent::Gen::Bool CameraAimTriggerActor() const;
            Array<Ent::Gen::Vector3> CameraOffsets() const;
            Ent::Gen::Float DOFFarStart() const;
            Ent::Gen::Float DOFFarStop() const;
            Ent::Gen::Float DOFMultiplier() const;
            Ent::Gen::Float DOFNearStart() const;
            Ent::Gen::Float DOFNearStop() const;
            Ent::Gen::Bool DOFRelativeTarget() const;
            Ent::Gen::Float EventCameraTime() const;
            Ent::Gen::Float FOV() const;
            Ent::Gen::Bool FixedCam() const;
            Ent::Gen::Bool FollowCam() const;
            Ent::Gen::Bool FollowTarget() const;
            Ent::Gen::Float OffsetsBlendTime() const;
            Ent::Gen::Bool PositionsAngularBlend() const;
            Ent::Gen::Float PositionsBlendTime() const;
            Array<Ent::Gen::Vector3> TargetOffsets() const;
            Ent::Gen::Bool UseDOF() const;
            Ent::Gen::Bool UseOffsetsSpline() const;
            Ent::Gen::Bool UsePositionsSpline() const;
            Ent::Gen::Bool UseTriggerActorPosition() const;
            Ent::Gen::Bool UseTriggerActorSight() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStaffOwnedVertebras_Inputs : HelperObject // Object
        {
            EntityStateStaffOwnedVertebras_Inputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStaffOwnedVertebras::Inputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int ownedVertebrasNumber() const;
        };

        struct EntityStateSet : HelperObject // Object
        {
            EntityStateSet(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSet";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ResponsiblePointer_ActorState_> EntityStates() const;
            Ent::Gen::String _comment() const;
        };

        struct PlayerState : HelperObject // Object
        {
            PlayerState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PlayerState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String ActiveScene() const;
            Ent::Gen::Map<char const*, Ent::Gen::Map<char const*, Ent::Gen::EntityStateSet>> DynamicStates() const;
            Ent::Gen::GameInfoDB GameInfoDB() const;
            Ent::Gen::Int Version() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateMotionConstrained_Inputs : HelperObject // Object
        {
            EntityStateMotionConstrained_Inputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateMotionConstrained::Inputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ConstrainedLanding() const;
            Ent::Gen::Bool InputCorrection() const;
            Ent::Gen::Bool StayOnCurve() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateManageChildEntityPool_Inputs : HelperObject // Object
        {
            EntityStateManageChildEntityPool_Inputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateManageChildEntityPool::Inputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DistanceMaxFromCamera() const;
            Ent::Gen::Float DistanceMaxFromSpawner() const;
            Ent::Gen::Float SafeDistanceAroundPlayer() const;
            Ent::Gen::EntityRef SpawnerEntityRef() const;
            Ent::Gen::Float UnspawnDelay() const;
            Ent::Gen::Float UnspawnRadius() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateIncapacitated_Inputs : HelperObject // Object
        {
            EntityStateIncapacitated_Inputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateIncapacitated::Inputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Time() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateChargeMode_EntityStateChargeModeInputs : HelperObject // Object
        {
            EntityStateChargeMode_EntityStateChargeModeInputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateChargeMode::EntityStateChargeModeInputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::MoveCapacityData_OrientationSpeed AngularSpeed() const;
            Ent::Gen::Float ForceMultiplier() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityLODData : HelperObject // Object
        {
            EntityLODData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityLODData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef EntityRef() const;
            Ent::Gen::Float MaxDist() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityID : HelperObject // Object
        {
            EntityID(Ent::Node* _node): HelperObject(_node) {}
            
        
        };

        struct EnergyValue : EnumPropHelper<EnergyValue, EnergyValueEnum> // Enum
        {
            using Enum = EnergyValueEnum;
            using PropHelper<EnergyValue, Enum>::operator=;
            EnergyValue(Ent::Node* _node): EnumPropHelper<EnergyValue, Enum>(_node) {}
            static constexpr char schemaName[] = "EnergyValue";
            static constexpr char const* enumToString[] = {
                "corrupted_strong",
                "corrupted",
                "lush",
                "lush_strong",
            };
        };
        inline char const* toString(EnergyValueEnum value)
        {
            if(size_t(value) >= std::size(EnergyValue::enumToString))
                throw std::runtime_error("Wrong enum value");
            return EnergyValue::enumToString[size_t(value)];
        }
        inline char const* toInternal(EnergyValueEnum value) { return toString(value); }
        template<> inline EnergyValueEnum strToEnum<EnergyValueEnum>(char const* value)
        {
            return static_cast<EnergyValueEnum>(details::indexInEnum(value, EnergyValue::enumToString));
        }

        struct VegetationPCloudData : HelperObject // Object
        {
            VegetationPCloudData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VegetationPCloudData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::EnergyValue> EnergyValues() const;
            Ent::Gen::String PCloudPath() const;
            PrimArray<Ent::Gen::String> UsedVegetations() const;
            Ent::Gen::String _comment() const;
        };

        struct RegenData : HelperObject // Object
        {
            RegenData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RegenData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::EnergyValue> EnergyValues() const;
            Array<Ent::Gen::EntityLODData> LODData() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergySideData : HelperObject // Object
        {
            EnergySideData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergySideData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef EntityRef() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergySide : EnumPropHelper<EnergySide, EnergySideEnum> // Enum
        {
            using Enum = EnergySideEnum;
            using PropHelper<EnergySide, Enum>::operator=;
            EnergySide(Ent::Node* _node): EnumPropHelper<EnergySide, Enum>(_node) {}
            static constexpr char schemaName[] = "EnergySide";
            static constexpr char const* enumToString[] = {
                "none",
                "lush",
                "corrupted",
                "EnergySide_COUNT",
            };
        };
        inline char const* toString(EnergySideEnum value)
        {
            if(size_t(value) >= std::size(EnergySide::enumToString))
                throw std::runtime_error("Wrong enum value");
            return EnergySide::enumToString[size_t(value)];
        }
        inline char const* toInternal(EnergySideEnum value) { return toString(value); }
        template<> inline EnergySideEnum strToEnum<EnergySideEnum>(char const* value)
        {
            return static_cast<EnergySideEnum>(details::indexInEnum(value, EnergySide::enumToString));
        }

        struct ReviveEnergyComponentInput_EnergySide : HelperObject // Object
        {
            ReviveEnergyComponentInput_EnergySide(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::EnergySide val() const;
        };

        struct EntityStateRevive_Inputs : HelperObject // Object
        {
            EntityStateRevive_Inputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateRevive::Inputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Damages() const;
            Ent::Gen::EnergySide EnergySide() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCreatureHatching_Inputs : HelperObject // Object
        {
            EntityStateCreatureHatching_Inputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCreatureHatching::Inputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EnergySide EnergySide() const;
            Ent::Gen::Bool ForceSuccess() const;
            Ent::Gen::MinReviveRatio MinReviveRatio() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergySideEvent : HelperObject // Object
        {
            EnergySideEvent(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergySideEvent";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ElapsedTime() const;
            Ent::Gen::EnergySide EnergySide() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergyIntensity : EnumPropHelper<EnergyIntensity, EnergyIntensityEnum> // Enum
        {
            using Enum = EnergyIntensityEnum;
            using PropHelper<EnergyIntensity, Enum>::operator=;
            EnergyIntensity(Ent::Node* _node): EnumPropHelper<EnergyIntensity, Enum>(_node) {}
            static constexpr char schemaName[] = "EnergyIntensity";
            static constexpr char const* enumToString[] = {
                "normal",
                "strong",
                "COUNT",
            };
        };
        inline char const* toString(EnergyIntensityEnum value)
        {
            if(size_t(value) >= std::size(EnergyIntensity::enumToString))
                throw std::runtime_error("Wrong enum value");
            return EnergyIntensity::enumToString[size_t(value)];
        }
        inline char const* toInternal(EnergyIntensityEnum value) { return toString(value); }
        template<> inline EnergyIntensityEnum strToEnum<EnergyIntensityEnum>(char const* value)
        {
            return static_cast<EnergyIntensityEnum>(details::indexInEnum(value, EnergyIntensity::enumToString));
        }

        struct RegenerationManager : HelperObject // Object
        {
            RegenerationManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RegenerationManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EnergyValue BackgroundEnergyValue() const;
            Ent::Gen::RegenAreaTransitionSettings DefaultTransitionWaveSettings() const;
            Ent::Gen::Map<EnergyIntensityEnum, Ent::Gen::RegenerationManager_EnergyAreaSetting> EnergyAreaSettingsMap() const;
            Ent::Gen::Float EnergyStrongValueThreshold() const;
            Ent::Gen::Int MaxDispatchedRegenQueries() const;
            Ent::Gen::Int MaxDynamicRegenEffectCount() const;
            Ent::Gen::Int MaxRegenAreaPerCluster() const;
            Ent::Gen::Int RegenAreaClusterWorldSize() const;
            Ent::Gen::Bool RegenAreaClustering() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergyPoolGD_EnergyArea : HelperObject // Object
        {
            EnergyPoolGD_EnergyArea(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergyPoolGD::EnergyArea";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EnergyIntensity Intensity() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::Int Priority() const;
            Ent::Gen::variant_MeshShape_ShapeSphere_ShapeBox_ Shape() const;
            Ent::Gen::String _comment() const;
        };

        struct EndPosition : HelperObject // Object
        {
            EndPosition(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Position val() const;
        };

        struct Enabled : HelperObject // Object
        {
            Enabled(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct EDITOR_Mesh : HelperObject // Object
        {
            EDITOR_Mesh(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EDITOR_Mesh";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int id() const;
            Ent::Gen::String path() const;
        };

        struct EDITOR_LODsItem : HelperObject // Object
        {
            EDITOR_LODsItem(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Int lod() const;
            PrimArray<Ent::Gen::String> wvis() const;
        };

        struct DisplaceNoiseListItem : HelperObject // Object
        {
            DisplaceNoiseListItem(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::Float DisplaceDistance() const;
            Ent::Gen::Float LuminanceCenter() const;
            Ent::Gen::Int MapChannel() const;
            Ent::Gen::String MotifName() const;
            Ent::Gen::Float MotifOffsetX() const;
            Ent::Gen::Float MotifOffsetY() const;
            Ent::Gen::Float MotifRotationZ() const;
            Ent::Gen::Float MotifSizeX() const;
            Ent::Gen::Float MotifSizeY() const;
            Ent::Gen::String _comment() const;
        };

        struct DisableFluid : HelperObject // Object
        {
            DisableFluid(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct DeltaTimeFactor : HelperObject // Object
        {
            DeltaTimeFactor(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct DebugManager_PlayerState : HelperObject // Object
        {
            DebugManager_PlayerState(Ent::Node* _node): HelperObject(_node) {}
            
        
        };

        struct DebugManager_ComponentID : HelperObject // Object
        {
            DebugManager_ComponentID(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DebugManager::ComponentID";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String ComponentNameID() const;
            Ent::Gen::EntityID EntityID() const;
            Ent::Gen::String _comment() const;
        };

        struct DebugDisplayFlags : HelperObject // Object
        {
            DebugDisplayFlags(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DebugDisplayFlags";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool Activate() const;
            Ent::Gen::Bool ActiveRTPCHunt() const;
            Ent::Gen::Bool ActiveWeatherSystem() const;
            Ent::Gen::Bool AssertOnPestoErrors() const;
            Ent::Gen::Bool DisplayActorStateArbiter() const;
            Ent::Gen::Bool DisplayAnalytics() const;
            Ent::Gen::Bool DisplayAutonomousClan() const;
            Ent::Gen::Bool DisplayAutonomousCreatureList() const;
            Ent::Gen::Bool DisplayAutonomousDecision() const;
            Ent::Gen::Bool DisplayAutonomousEntityList() const;
            Ent::Gen::Bool DisplayAutonomousInfo() const;
            Ent::Gen::Bool DisplayAutonomousListClan() const;
            Ent::Gen::Bool DisplayAutonomousLogMessage() const;
            Ent::Gen::Bool DisplayAutonomousMaster() const;
            Ent::Gen::Bool DisplayAutonomousPhysical() const;
            Ent::Gen::Bool DisplayAutonomousPosition() const;
            Ent::Gen::Bool DisplayAutonomousPredator() const;
            Ent::Gen::Bool DisplayAutonomousPsychological() const;
            Ent::Gen::Bool DisplayAutonomousSound() const;
            Ent::Gen::Bool DisplayAutonomousUnlocked() const;
            Ent::Gen::Bool DisplayBehavior() const;
            Ent::Gen::Bool DisplayBlendShapeDebug() const;
            Ent::Gen::Bool DisplayBrainMonitor() const;
            Ent::Gen::Bool DisplayCPU() const;
            Ent::Gen::Bool DisplayCompass() const;
            Ent::Gen::Bool DisplayComponentCacheDebugger() const;
            Ent::Gen::Bool DisplayComponentsDependencies() const;
            Ent::Gen::Bool DisplayConnectionWarning() const;
            Ent::Gen::Bool DisplayCreatureListAggressive() const;
            Ent::Gen::Bool DisplayCreatureListDanger() const;
            Ent::Gen::Bool DisplayCreatureListDetection() const;
            Ent::Gen::Bool DisplayCreatureListDistance() const;
            Ent::Gen::Bool DisplayCreatureListHelp() const;
            Ent::Gen::Bool DisplayCreatureListPresence() const;
            Ent::Gen::Bool DisplayCreatureListSpecie() const;
            Ent::Gen::Bool DisplayCreatureListState() const;
            Ent::Gen::Bool DisplayCreatureListThreat() const;
            Ent::Gen::Bool DisplayCreatureListTrust() const;
            Ent::Gen::Bool DisplayCreatureListVisibility() const;
            Ent::Gen::Bool DisplayDecalsDebug() const;
            Ent::Gen::Bool DisplayDistanceTool() const;
            Ent::Gen::Bool DisplayDrawDebugFromLastSteppedFrame() const;
            Ent::Gen::Bool DisplayEnergyPools() const;
            Ent::Gen::Bool DisplayEntities() const;
            Ent::Gen::Bool DisplayEntitiesWithErrors() const;
            Ent::Gen::Bool DisplayEntityClan() const;
            Ent::Gen::Float DisplayEntityDistanceMax() const;
            Ent::Gen::Bool DisplayFPS() const;
            Ent::Gen::Bool DisplayGameMaster() const;
            Ent::Gen::Bool DisplayGamepadStateViewer() const;
            Ent::Gen::Bool DisplayGestureMenu() const;
            Ent::Gen::Bool DisplayGoToPosition() const;
            Ent::Gen::Bool DisplayHeightProbe() const;
            Ent::Gen::Bool DisplayHitDebugger() const;
            Ent::Gen::Bool DisplayHotSpot() const;
            Ent::Gen::Float DisplayHotspotDistanceMax() const;
            Ent::Gen::Bool DisplayManagersInfos() const;
            Ent::Gen::Bool DisplayMaterialBank() const;
            Ent::Gen::Bool DisplayMeshRasterizerInfos() const;
            Ent::Gen::Bool DisplayObjectFilterHistory() const;
            Ent::Gen::Bool DisplayOrder() const;
            Ent::Gen::Bool DisplayPadEmulator() const;
            Ent::Gen::Bool DisplayParticleTool() const;
            Ent::Gen::Bool DisplayPathSystem() const;
            Ent::Gen::Bool DisplayPesto() const;
            Ent::Gen::Bool DisplayPestoCPUMarkers() const;
            Ent::Gen::Bool DisplayPhysicsPicker() const;
            Ent::Gen::Bool DisplayPivot() const;
            Ent::Gen::Bool DisplayPlayerInteraction() const;
            Ent::Gen::Bool DisplayPositionPicker() const;
            Ent::Gen::Bool DisplayProjectileThrower() const;
            Ent::Gen::Bool DisplayPseudos() const;
            Ent::Gen::Bool DisplayQualityManager() const;
            Ent::Gen::Bool DisplayRPCCalls() const;
            Ent::Gen::Bool DisplayReloadNotifications() const;
            Ent::Gen::Bool DisplaySelectedPestoEntity() const;
            Ent::Gen::Bool DisplayStringHashTranslator() const;
            Ent::Gen::Bool DisplayTimer() const;
            Ent::Gen::Bool DisplayTreesStates() const;
            Ent::Gen::Bool EditorGuiAllowsComponentsSplitView() const;
            Ent::Gen::Bool EditorGuiListenGamepad() const;
            Ent::Gen::Bool EditorGuiListenKeyboard() const;
            Ent::Gen::Bool OpenEntityWindows() const;
            Ent::Gen::Bool UseTransformEditor() const;
            Ent::Gen::String _comment() const;
        };

        struct DebugManager : HelperObject // Object
        {
            DebugManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DebugManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> CheatCodes() const;
            Ent::Gen::Map<char const*, Ent::Gen::Bool> DisplayComponentType() const;
            Ent::Gen::Bool DisplayManagerWindow() const;
            Ent::Gen::Map<char const*, Ent::Gen::Bool> DisplayNodeType() const;
            Ent::Gen::Map<char const*, Ent::Gen::Bool> DisplayNodeTypeWithAlwaysAutoResize() const;
            Ent::Gen::Bool DisplayResourceWindow() const;
            Ent::Gen::DebugDisplayFlags Flags() const;
            Ent::Gen::Online Online() const;
            Ent::Gen::DebugManager_PlayerState PlayerState() const;
            Ent::Gen::String StreamPublicationCommand() const;
            Ent::Gen::String StreamingServerIP() const;
            Ent::Gen::Manager Super() const;
            Array<Ent::Gen::TrackedEntitiesItem> TrackedEntities() const;
            Array<Ent::Gen::DebugManager_ComponentID> TrackedEntitiesSplitComponents() const;
            Ent::Gen::Bool WipAnimation() const;
            Ent::Gen::String _comment() const;
        };

        struct DamagesInstant : HelperObject // Object
        {
            DamagesInstant(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DamagesInstant";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float damage() const;
            Ent::Gen::Float impact() const;
        };

        struct DamageGauge : HelperObject // Object
        {
            DamageGauge(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Float val() const;
        };

        struct CreatureTypeData : HelperObject // Object
        {
            CreatureTypeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureTypeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String name() const;
            Ent::Gen::Float value() const;
        };

        struct CreatureProfile__CreatureProfileFact : HelperObject // Object
        {
            CreatureProfile__CreatureProfileFact(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureProfile::_CreatureProfileFact";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::GameTimeInMs TimeOfCreation() const;
            Ent::Gen::String _comment() const;
        };

        struct CreatureProfile : HelperObject // Object
        {
            CreatureProfile(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureProfile";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Array<Ent::Gen::CreatureProfile__CreatureProfileFact>> Facts() const;
            Ent::Gen::Map<char const*, Ent::Gen::Float> ValueMap() const;
            Ent::Gen::String _comment() const;
        };

        struct CreatureDangerousness : HelperObject // Object
        {
            CreatureDangerousness(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureDangerousness";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Int dangerousness() const;
        };

        struct ConstrainedMoveContextInput : HelperObject // Object
        {
            ConstrainedMoveContextInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConstrainedMoveContextInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float CurvatureNormalizationRadius() const;
            Ent::Gen::Int PowerMethodIterationMaxCount() const;
            Ent::Gen::Float PowerMethodIterationThreshold() const;
            Ent::Gen::Float RaycastAngleThreshold() const;
            Ent::Gen::Int RaycastCount() const;
            Ent::Gen::Float RaycastLength() const;
            Ent::Gen::Float RaycastStep() const;
            Ent::Gen::String _comment() const;
        };

        struct ConstrainedInputData : HelperObject // Object
        {
            ConstrainedInputData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConstrainedInputData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DiagonalSpeedFactor() const;
            Ent::Gen::Float DirectionHysteresisAngle() const;
            Ent::Gen::Float LateralSpeedFactor() const;
            Ent::Gen::String _comment() const;
        };

        struct ConditionalRigidityAttribute_RigidityParameter : HelperObject // Object
        {
            ConditionalRigidityAttribute_RigidityParameter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::RigidityParameter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ScaleConverter Rigidity() const;
            Ent::Gen::Float SpeedDown() const;
            Ent::Gen::Float SpeedUp() const;
            Ent::Gen::String _comment() const;
        };

        struct ConditionalRigidityAttribute_Attributes : HelperObject // Object
        {
            ConditionalRigidityAttribute_Attributes(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::Attributes";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ConditionalRigidityAttribute_RigidityParameter DirectionAngular() const;
            Ent::Gen::ConditionalRigidityAttribute_RigidityParameter DirectionLinear() const;
            Ent::Gen::ConditionalRigidityAttribute_RigidityParameter OscillationAngular() const;
            Ent::Gen::ConditionalRigidityAttribute_RigidityParameter OscillationLinear() const;
            Ent::Gen::String _comment() const;
        };

        struct ComponentInputBase : HelperObject // Object
        {
            ComponentInputBase(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ComponentInputBase";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct ComponentInputEmpty : HelperObject // Object
        {
            ComponentInputEmpty(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ComponentInputEmpty";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInputBase Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ComponentInput : HelperObject // Object
        {
            ComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Enabled Enabled() const;
            Ent::Gen::ComponentInputBase Super() const;
            Ent::Gen::String _comment() const;
        };

        struct WallRunComponentInput : HelperObject // Object
        {
            WallRunComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WallRunComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct VelocityObstacleComponentInput : HelperObject // Object
        {
            VelocityObstacleComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VelocityObstacleComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct UnifiedPhysicsDataComponentInput : HelperObject // Object
        {
            UnifiedPhysicsDataComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "UnifiedPhysicsDataComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SpiritAnimalShrineComponentInput : HelperObject // Object
        {
            SpiritAnimalShrineComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SpiritAnimalShrineComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundEmitterComponentInput : HelperObject // Object
        {
            SoundEmitterComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundEmitterComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::computePitchAngle computePitchAngle() const;
        };

        struct SoftCollisionComponentInput : HelperObject // Object
        {
            SoftCollisionComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoftCollisionComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SmoothScaleComponentInput : HelperObject // Object
        {
            SmoothScaleComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SmoothScaleComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Parameters Parameters() const;
            Ent::Gen::ScaleFactor ScaleFactor() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ScriptComponentInput : HelperObject // Object
        {
            ScriptComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ScriptComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ReviveEnergyComponentInput : HelperObject // Object
        {
            ReviveEnergyComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReviveEnergyComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ReviveEnergyComponentInput_EnergySide EnergySide() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RespawnabilityComponentInput : HelperObject // Object
        {
            RespawnabilityComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RespawnabilityComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RagdollComponentInput : HelperObject // Object
        {
            RagdollComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RagdollComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsImpactMakerComponentInput : HelperObject // Object
        {
            PhysicsImpactMakerComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsImpactMakerComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ForceMultiplier ForceMultiplier() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsComponentInput : HelperObject // Object
        {
            PhysicsComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PerceiverComponentInput : HelperObject // Object
        {
            PerceiverComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PerceiverComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::PerceiverComponentInput_usePerception usePerception() const;
        };

        struct PerceivableComponentInput : HelperObject // Object
        {
            PerceivableComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PerceivableComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::isPerceivable isPerceivable() const;
            Ent::Gen::isPerceivableForEnemies isPerceivableForEnemies() const;
            Ent::Gen::soundEmissionStrength soundEmissionStrength() const;
        };

        struct OutfitWearerComponentInput : HelperObject // Object
        {
            OutfitWearerComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OutfitWearerComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::FadeDelay FadeDelay() const;
            Ent::Gen::FadeDuration FadeDuration() const;
            PrimArray<Ent::Gen::InventoryTags> OutfitTags() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct MountIKControllerComponentInput : HelperObject // Object
        {
            MountIKControllerComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MountIKControllerComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct LifeComponentInput : HelperObject // Object
        {
            LifeComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "LifeComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::DamageGauge DamageGauge() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct InteractorComponentInput : HelperObject // Object
        {
            InteractorComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InteractorComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EndPosition EndPosition() const;
            Ent::Gen::IsActive IsActive() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct InteractableGPEComponentInput : HelperObject // Object
        {
            InteractableGPEComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InteractableGPEComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Interactor Interactor() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct GrasperComponentInput : HelperObject // Object
        {
            GrasperComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GrasperComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::enableSynchronization enableSynchronization() const;
            Ent::Gen::tryGrasp tryGrasp() const;
        };

        struct GraspableComponentInput : HelperObject // Object
        {
            GraspableComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GraspableComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::allowedTypesItem> allowedTypes() const;
            Ent::Gen::retiming retiming() const;
        };

        struct FluidComponentInput : HelperObject // Object
        {
            FluidComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::DisableFluid DisableFluid() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergySpoutComponentInput : HelperObject // Object
        {
            EnergySpoutComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergySpoutComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CreatureAIComponentInput : HelperObject // Object
        {
            CreatureAIComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureAIComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::resetCreatureRequest resetCreatureRequest() const;
            Ent::Gen::usePerception usePerception() const;
        };

        struct CinematicComponentInput : HelperObject // Object
        {
            CinematicComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CinematicComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ChargedJumpComponentInput : HelperObject // Object
        {
            ChargedJumpComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ChargedJumpComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::jumpPower jumpPower() const;
        };

        struct CharacterControllerComponentInput : HelperObject // Object
        {
            CharacterControllerComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CharacterControllerComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::JumpHeightMultiplier JumpHeightMultiplier() const;
            Ent::Gen::RigidbodyScaleMultiplier RigidbodyScaleMultiplier() const;
            Ent::Gen::RigidbodyScalingSpeed RigidbodyScalingSpeed() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BreakableComponentInput : HelperObject // Object
        {
            BreakableComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BreakableComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BeamTargetComponentInput : HelperObject // Object
        {
            BeamTargetComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BeamTargetComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AttackTriggerComponentInput : HelperObject // Object
        {
            AttackTriggerComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackTriggerComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AttackComponentInput : HelperObject // Object
        {
            AttackComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationTransformDriverComponentInput : HelperObject // Object
        {
            AnimationTransformDriverComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationTransformDriverComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ComponentGD : HelperObject // Object
        {
            ComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct WildObject : HelperObject // Object
        {
            WildObject(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WildObject";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String GdPath() const;
            Ent::Gen::String ObjectType() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct WallRunGD : HelperObject // Object
        {
            WallRunGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WallRunGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float dropAirControlDelay() const;
            Ent::Gen::Float dropCoyoteJumpMaxTime() const;
            Ent::Gen::Float dropTrajectoryRotationYaw() const;
            Ent::Gen::Float dropVisualRotationYawRateFactor() const;
            Ent::Gen::Float jumpRiseMinCoeffToEnter() const;
            Ent::Gen::Float jumpTrajectoryRotationYaw() const;
            Ent::Gen::Float jumpVisualRotationYawRateFactor() const;
            Ent::Gen::Float probeLengthCoeff() const;
            Ent::Gen::Float probeRadiusCoeff() const;
            Ent::Gen::Int probeRayCastCount() const;
            Ent::Gen::Float probeRotationAngle() const;
            Ent::Gen::Float runDurationMax() const;
            Ent::Gen::Float runDurationMin() const;
            Ent::Gen::Float runForwardSpeedNormMinToEnter() const;
            Ent::Gen::Float runOrientationRateFactor() const;
            Ent::Gen::Float runRequiredDirectionDeltaAngleMax() const;
            Ent::Gen::Float runRequiredDirectionDeltaAngleMin() const;
            Ent::Gen::Float runRequiredSpeedNormMin() const;
            Ent::Gen::Float runSightDeltaAngleMaxtoEnter() const;
            Ent::Gen::Float runSlopeAngleHysteresis() const;
            Ent::Gen::Float runSlopeAngleMax() const;
            Ent::Gen::Float runSlopeAngleMin() const;
            Ent::Gen::String runTrajectoryRotationPitchCurveResourcePath() const;
            Ent::Gen::Float runTrajectoryRotationYaw() const;
            Ent::Gen::Float runVerticalSpeedNormMaxToEnter() const;
            Ent::Gen::Float runVerticalSpeedNormMinToEnter() const;
        };

        struct VoxelSimulationGD : HelperObject // Object
        {
            VoxelSimulationGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VoxelSimulationGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float EDITOR_voxelSize() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct VolumeConstraintGD : HelperObject // Object
        {
            VolumeConstraintGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VolumeConstraintGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::VolumeConstraintDataGD> Constraints() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct VisualGD : HelperObject // Object
        {
            VisualGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VisualGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AlwaysStatic() const;
            Ent::Gen::Bool EDITOR_GenerateFur() const;
            Array<Ent::Gen::EDITOR_LODsItem> EDITOR_LODs() const;
            Ent::Gen::String MaterialGroup() const;
            Ent::Gen::Float RUNTIME_LODScale() const;
            Array<Ent::Gen::RUNTIME_LODsItem> RUNTIME_LODs() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String VisualResourcePath() const;
            Ent::Gen::String _comment() const;
        };

        struct VelocityObstacleGD : HelperObject // Object
        {
            VelocityObstacleGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VelocityObstacleGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AccelerationAfterAvoidance() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct UnifiedPhysicsDataGD : HelperObject // Object
        {
            UnifiedPhysicsDataGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "UnifiedPhysicsDataGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct TriggerEventCameraGD : HelperObject // Object
        {
            TriggerEventCameraGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TriggerEventCameraGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EventCameraData EventCameraData() const;
            PrimArray<Ent::Gen::String> PlayAnimBeforeTrigger() const;
            Array<PrimArray<Ent::Gen::String>> PlayAnimsWhenTriggered() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Bool UseDuration() const;
            Ent::Gen::Bool UsePhysics() const;
            Ent::Gen::Bool UseRadius() const;
            Ent::Gen::String _comment() const;
        };

        struct TransformGD : HelperObject // Object
        {
            TransformGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TransformGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool EDITOR_InheritScaleFromSubSceneHolder() const;
            Ent::Gen::Bool EDITOR_PropagateScaleToSubScene() const;
            Ent::Gen::Matrix33 Matrix() const;
            Ent::Gen::Quat Orientation() const;
            Ent::Gen::Vector3 Position() const;
            Ent::Gen::Vector3 Scale() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct TestUnion : HelperObject // Object
        {
            TestUnion(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestUnion";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ Union() const;
            Array<Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_> UnionArray() const;
            Array<Ent::Gen::UnionObjectArrayItem> UnionObjectArray() const;
            Ent::Gen::String _comment() const;
        };

        struct TestTagsList : HelperObject // Object
        {
            TestTagsList(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestTagsList";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Radius() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::TagsList Tags() const;
            Ent::Gen::String _comment() const;
        };

        struct TestSetOfObject : HelperObject // Object
        {
            TestSetOfObject(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestSetOfObject";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::MapOfObjectItem_A> MapOfObject() const;
            Ent::Gen::ObjectSet<char const*, Ent::Gen::SetOfObjectItem> SetOfObject() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct TestEntityRef : HelperObject // Object
        {
            TestEntityRef(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestEntityRef";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::EntityRef TestRef() const;
            Ent::Gen::String _comment() const;
        };

        struct TestDefaultValues : HelperObject // Object
        {
            TestDefaultValues(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestDefaultValues";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DoubleWithDefaultValue() const;
            Ent::Gen::Matrix33 Matrix() const;
            Ent::Gen::Matrix33 Matrix2() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::TestPropertyDefaultValues2 propertyWithDefault() const;
        };

        struct TestCreature : HelperObject // Object
        {
            TestCreature(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestCreature";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef FullCursed() const;
            Ent::Gen::EntityRef FullLush() const;
            Ent::Gen::EntityRef SklCursed() const;
            Ent::Gen::EntityRef SklLush() const;
            Ent::Gen::EntityRef SklNeutral() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct TestArrays : HelperObject // Object
        {
            TestArrays(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TestArrays";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::Float> DefaultValue() const;
            PrimArray<Ent::Gen::Float> OverridedDefaultValue() const;
            PrimArray<Ent::Gen::Float> OverridedPrefabValue() const;
            PrimArray<Ent::Gen::Float> PrefabValue() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ Variant() const;
            Ent::Gen::String _comment() const;
        };

        struct TerrainSurfaceObject : HelperObject // Object
        {
            TerrainSurfaceObject(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TerrainSurfaceObject";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String EDITOR_tso() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct TerrainGD : HelperObject // Object
        {
            TerrainGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TerrainGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int EDITOR_AlbedoType() const;
            Ent::Gen::Float EDITOR_CavityAlbedoStrength() const;
            Ent::Gen::Float EDITOR_CavityStrength() const;
            Ent::Gen::Float EDITOR_CollisionDecimateHmm() const;
            Ent::Gen::Bool EDITOR_ComputeSurfaceObjectTerrain() const;
            Ent::Gen::Bool EDITOR_DebugMode() const;
            Ent::Gen::Int EDITOR_DetailMapFalloff() const;
            Ent::Gen::Float EDITOR_DetailScale() const;
            Ent::Gen::Bool EDITOR_DisableSeedParams() const;
            Ent::Gen::Bool EDITOR_DisplayAlbedo() const;
            Ent::Gen::Bool EDITOR_DisplayFinal() const;
            Ent::Gen::Bool EDITOR_Distributed() const;
            Ent::Gen::Bool EDITOR_Erosion() const;
            Ent::Gen::Int EDITOR_ErosionType() const;
            Ent::Gen::Bool EDITOR_ExportCollision() const;
            Ent::Gen::Int EDITOR_ExportQuality() const;
            Ent::Gen::Bool EDITOR_LocalSndbs() const;
            Ent::Gen::Bool EDITOR_MergeTSOPreview() const;
            Ent::Gen::Bool EDITOR_MultiLayerHeightmap() const;
            Ent::Gen::String EDITOR_Path() const;
            Ent::Gen::Int EDITOR_PreviewQuality() const;
            Ent::Gen::Bool EDITOR_ProcessDetailMap() const;
            Ent::Gen::Int EDITOR_SeedTextureSizeReduce() const;
            Ent::Gen::Bool EDITOR_SuperimposeSeeds() const;
            Ent::Gen::Float EDITOR_SurfaceObjectDecimate() const;
            Ent::Gen::Float EDITOR_SurfaceObjectDecimateHmm() const;
            Ent::Gen::String EDITOR_TerrainWildMat() const;
            Ent::Gen::Int EDITOR_TriPerMeter() const;
            Ent::Gen::Bool EDITOR_WMErosionComputeDistant() const;
            Ent::Gen::Bool EDITOR_WMErosionPreview() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Terrain_TerrainMeta TerrainMeta() const;
            Ent::Gen::String _comment() const;
        };

        struct TeamGD : HelperObject // Object
        {
            TeamGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TeamGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SystemicCreature : HelperObject // Object
        {
            SystemicCreature(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SystemicCreature";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> BehaviorModifierTagList() const;
            Ent::Gen::String BehaviorPath() const;
            Ent::Gen::String BehaviorState() const;
            Ent::Gen::Bool Burried() const;
            Ent::Gen::Bool CameraTarget() const;
            Ent::Gen::Bool CanBeMaster() const;
            Ent::Gen::String Faction() const;
            Ent::Gen::String Inventory() const;
            Ent::Gen::Bool Invincible() const;
            Ent::Gen::Float Life() const;
            Ent::Gen::String Name() const;
            Ent::Gen::Bool PlayerSpawn() const;
            PrimArray<Ent::Gen::String> ScriptList() const;
            Ent::Gen::String Spawner() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String UniqueID() const;
            Ent::Gen::Bool Warrior() const;
            Ent::Gen::String _comment() const;
        };

        struct StreamingLocatorGD : HelperObject // Object
        {
            StreamingLocatorGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StreamingLocatorGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector3 CenterOffset() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct StreamableUnitGD : HelperObject // Object
        {
            StreamableUnitGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StreamableUnitGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef BaseImpostor() const;
            Ent::Gen::Vector3 BoxSize() const;
            Ent::Gen::Vector3 CenterOffset() const;
            Ent::Gen::EntityRef EnergyPool() const;
            PrimArray<Ent::Gen::EntityRef> FullEntities() const;
            Ent::Gen::EntityRef FullEntitiesHolder() const;
            Ent::Gen::Float Hysteresis() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Map<char const*, Ent::Gen::EntityRef> VariantImpostors() const;
            Ent::Gen::String _comment() const;
        };

        struct StickToTerrain : HelperObject // Object
        {
            StickToTerrain(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StickToTerrain";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float NormalRatio() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Float ZOffset() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float precisionRadius() const;
            Ent::Gen::Bool useNormal() const;
        };

        struct StaticObjectGD : HelperObject // Object
        {
            StaticObjectGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StaticObjectGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool EDITOR_IsCave() const;
            Ent::Gen::Bool EDITOR_UsedInMultiLayerHeightmap() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Bool Visual() const;
            Ent::Gen::String _comment() const;
        };

        struct StaffVertebrasGD : HelperObject // Object
        {
            StaffVertebrasGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StaffVertebrasGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int BeginVertebraRefillThreshold() const;
            Ent::Gen::Int EndVertebraRefillThreshold() const;
            PrimArray<Ent::Gen::String> HotspotNames() const;
            Ent::Gen::Int MaxVertebraCount() const;
            Ent::Gen::Int OwnedVertebraStartCount() const;
            Ent::Gen::Float RefillVertebraTimer() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String VertebraGRCPath1() const;
            Ent::Gen::String VertebraGRCPath2() const;
            Ent::Gen::String VertebraGRCPath3() const;
            Ent::Gen::String VertebraGRCPath4() const;
            Ent::Gen::String _comment() const;
        };

        struct SpiritAnimalsHolderGD : HelperObject // Object
        {
            SpiritAnimalsHolderGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SpiritAnimalsHolderGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::EntityRef> EntityRefs() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SpiritAnimalShrineGD : HelperObject // Object
        {
            SpiritAnimalShrineGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SpiritAnimalShrineGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float InteractionDuration() const;
            Ent::Gen::Specie Specie() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Float TimeHysteresis() const;
            Ent::Gen::String _comment() const;
        };

        struct SpiritAnimalGD : HelperObject // Object
        {
            SpiritAnimalGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SpiritAnimalGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DeadDurationBeforeRevive() const;
            Ent::Gen::Float SoulCooldownFromDeath() const;
            Ent::Gen::Float SoulCooldownFromSpiritAttack() const;
            Ent::Gen::Float SpiritAttackHoldDuration() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundOpportunityComponentGD : HelperObject // Object
        {
            SoundOpportunityComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundOpportunityComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String EDITOR_FilterTag() const;
            Array<Ent::Gen::SoundOpportunityRangeDescription> RangeDescriptions() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundEmitterGD : HelperObject // Object
        {
            SoundEmitterGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundEmitterGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ActivationDistance() const;
            PrimArray<Ent::Gen::String> ActivationSound() const;
            Ent::Gen::SyncTempoMode ActivationSync() const;
            Ent::Gen::String AuxSend() const;
            PrimArray<Ent::Gen::String> Bank() const;
            Ent::Gen::Float BoidRadius() const;
            Ent::Gen::Float BoidRadiusToInnerEdgeRatio() const;
            Ent::Gen::Float BoidRadiusToOuterEdgeRatio() const;
            Ent::Gen::Bool BoidRealPositionComputation() const;
            Ent::Gen::String CreatureType() const;
            Ent::Gen::Bool Echoes() const;
            Ent::Gen::Float EchoesSend() const;
            Ent::Gen::Float EventDistance() const;
            Ent::Gen::SoundEventMapping EventMapping() const;
            PrimArray<Ent::Gen::String> InEvents() const;
            Ent::Gen::SoundOcclusionData OcclusionData() const;
            PrimArray<Ent::Gen::String> OutEvents() const;
            Ent::Gen::ComponentGD Super() const;
            PrimArray<Ent::Gen::String> UnactivationSound() const;
            Ent::Gen::SyncTempoMode UnactivationSync() const;
            Ent::Gen::Bool UseLocalAltitudeRTPC() const;
            Ent::Gen::Bool UseOcclusion() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool dopplerActivated() const;
            Ent::Gen::Bool sendSoundAreaEvents() const;
            Ent::Gen::Float waterDeepAltitude() const;
            Ent::Gen::Float waterPuddleAltitude() const;
        };

        struct SoundAreaGD : HelperObject // Object
        {
            SoundAreaGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundAreaGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String EventEnter() const;
            Ent::Gen::String EventExit() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SoulRespawnOpportunityGD : HelperObject // Object
        {
            SoulRespawnOpportunityGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoulRespawnOpportunityGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EnergySide ForceEnergySide() const;
            Ent::Gen::Int MaxDensityCount() const;
            Ent::Gen::Float MaxDensityRadius() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::Int SlotCount() const;
            Ent::Gen::Specie Specie() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SoftCollisionGD : HelperObject // Object
        {
            SoftCollisionGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoftCollisionGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float PenetrationCoeffSmoothRate() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::SoftCollisionGD_VegetationDetectionParameters VegetationDetectionParam() const;
            Ent::Gen::String _comment() const;
        };

        struct SmoothScaleComponentGD : HelperObject // Object
        {
            SmoothScaleComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SmoothScaleComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SideMapGateGD : HelperObject // Object
        {
            SideMapGateGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SideMapGateGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String SideMapName() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ShapeshiftStatueGD : HelperObject // Object
        {
            ShapeshiftStatueGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShapeshiftStatueGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef AssociatedEntityRef() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ShamanVisionGD : HelperObject // Object
        {
            ShamanVisionGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShamanVisionGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ShamanItemGD : HelperObject // Object
        {
            ShamanItemGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShamanItemGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> BoneNames() const;
            Ent::Gen::EntityRef OppositeItemEntityRef() const;
            Ent::Gen::Int StartPartCount() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SensorVoxelsGD : HelperObject // Object
        {
            SensorVoxelsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SensorVoxelsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Array<Ent::Gen::TaggedSDF> TaggedSDFs() const;
            Ent::Gen::String VoxelsDataPath() const;
            Ent::Gen::String _comment() const;
        };

        struct SensorControllerGD : HelperObject // Object
        {
            SensorControllerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SensorControllerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SeedPatch : HelperObject // Object
        {
            SeedPatch(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SeedPatch";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AddVertexColor() const;
            Ent::Gen::Matrix33 LocalMatrix() const;
            Ent::Gen::String MeshFile() const;
            Ent::Gen::String NoiseName() const;
            Ent::Gen::Float NoiseOffsetX() const;
            Ent::Gen::Float NoiseOffsetY() const;
            Ent::Gen::Float NoiseSizeX() const;
            Ent::Gen::Float NoiseSizeY() const;
            Ent::Gen::String SeedName() const;
            Ent::Gen::Bool SeedOverride() const;
            Ent::Gen::SeedPatchDataList SeedPatchDataList() const;
            Ent::Gen::SeedPatchDatas SeedPatchDatas() const;
            Ent::Gen::Int Subdivision() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ScriptComponentGD : HelperObject // Object
        {
            ScriptComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ScriptComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::TypedValue> CommonDataMap() const;
            Ent::Gen::Map<char const*, Ent::Gen::ScriptPathAndDataSet> ScriptsMap() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ReviveEnergyGD : HelperObject // Object
        {
            ReviveEnergyGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReviveEnergyGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float HatchingCost() const;
            Ent::Gen::Float HatchingDuration() const;
            Ent::Gen::EnergySide InitEnergySide() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RespawnabilityGD : HelperObject // Object
        {
            RespawnabilityGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RespawnabilityGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool CheckIsInCameraFrustum() const;
            Ent::Gen::MinDistanceToRespawnPosition MinDistanceToRespawnPosition() const;
            Ent::Gen::MinRespawnDistance MinRespawnDistance() const;
            Ent::Gen::RespawnState RespawnState() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RespawnPlaceGD : HelperObject // Object
        {
            RespawnPlaceGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RespawnPlaceGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AlwaysAvailable() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RegenerableVegetationGD : HelperObject // Object
        {
            RegenerableVegetationGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RegenerableVegetationGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::EnergyValue> EnergyValues() const;
            Ent::Gen::String PCloudPath() const;
            Ent::Gen::ComponentGD Super() const;
            PrimArray<Ent::Gen::String> UsedVegetations() const;
            Array<Ent::Gen::VegetationPCloudData> VegetationPClouds() const;
            Ent::Gen::String _comment() const;
        };

        struct RegenSwitcherGD : HelperObject // Object
        {
            RegenSwitcherGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RegenSwitcherGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ParentTransforms() const;
            Array<Ent::Gen::RegenData> RegenData() const;
            Ent::Gen::RegenSwitchBehavior RegenSwitchBehavior() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RagdollGD : HelperObject // Object
        {
            RagdollGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RagdollGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String RagdollType() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct QuickCreatureSwitchGD : HelperObject // Object
        {
            QuickCreatureSwitchGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "QuickCreatureSwitchGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::EntityRef> CreatureEntityRefs() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ProtoComponentGD : HelperObject // Object
        {
            ProtoComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ProtoComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ProjectileShooterGD : HelperObject // Object
        {
            ProjectileShooterGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ProjectileShooterGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::ProjectileShooterData> ProjectileShooterData() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PlayerComponentGD : HelperObject // Object
        {
            PlayerComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PlayerComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PickableDistributorComponentGD : HelperObject // Object
        {
            PickableDistributorComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PickableDistributorComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float PickableGrowingTime() const;
            Ent::Gen::Float PickablePickedUpCooldownTime() const;
            Array<Ent::Gen::PickableDistributorComponentData> PickablesList() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PickableComponentGD : HelperObject // Object
        {
            PickableComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PickableComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ResponsiblePointer_ActorState_> StatesForPicker() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsTriggerGD : HelperObject // Object
        {
            PhysicsTriggerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsTriggerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> RequiredComponents() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsMeshProviderGD : HelperObject // Object
        {
            PhysicsMeshProviderGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsMeshProviderGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool EdgeTransitionConstraintAllowed() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsMeshDeformerGD : HelperObject // Object
        {
            PhysicsMeshDeformerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsMeshDeformerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsImpactMakerGD : HelperObject // Object
        {
            PhysicsImpactMakerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsImpactMakerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AttackAngle() const;
            Ent::Gen::Bool BreakEverything() const;
            Ent::Gen::ScaleConverter DamageAndImpactBySpeed() const;
            Ent::Gen::String DamageTag() const;
            Ent::Gen::Float DirectionInfluence() const;
            Ent::Gen::Float DirectionUpdateThreshold() const;
            Ent::Gen::ScaleConverter ForceBySpeed() const;
            Ent::Gen::String HitImpactTag() const;
            Ent::Gen::Float Restitution() const;
            Ent::Gen::Float SmoothedSpeedControlRate() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsGD : HelperObject // Object
        {
            PhysicsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AffectByHit() const;
            Ent::Gen::Float AngularDamping() const;
            Ent::Gen::Vector3 AxisRestriction() const;
            Ent::Gen::Bool CameraIgnored() const;
            Ent::Gen::Bool Ccd() const;
            PrimArray<Ent::Gen::String> EDITOR_MeshColliders() const;
            Ent::Gen::String EDITOR_MeshEdges() const;
            Ent::Gen::String EDITOR_NavMeshStamper() const;
            Ent::Gen::Float EnergyLoss() const;
            Ent::Gen::Float Friction() const;
            Ent::Gen::Bool HasGravity() const;
            Ent::Gen::InertiaTensor InertiaTensor() const;
            Ent::Gen::Float LinearDamping() const;
            Ent::Gen::Float Mass() const;
            Ent::Gen::Float MaxAngularVelocity() const;
            Ent::Gen::Float MaxLinearVelocity() const;
            PrimArray<Ent::Gen::String> MeshColliders() const;
            Ent::Gen::String MeshEdges() const;
            Ent::Gen::String MotionType() const;
            Ent::Gen::String NavMeshStamper() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::Vector3 OffsetRotation() const;
            Ent::Gen::Bool OneWayBodiesDriveTransform() const;
            Ent::Gen::String PhysicsMaterial() const;
            Ent::Gen::PrimitiveColliderType PrimitiveCollider() const;
            PrimArray<Ent::Gen::Size> PrimitiveColliderSizeLayerMask() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::Float Restitution() const;
            PrimArray<Ent::Gen::PhysicsLayer> SelfFilter() const;
            Ent::Gen::Vector3 Size() const;
            Ent::Gen::Bool Sleep() const;
            Ent::Gen::ComponentGD Super() const;
            PrimArray<Ent::Gen::PhysicsLayer> TargetFilter() const;
            Ent::Gen::Bool Walkable() const;
            Ent::Gen::String WalkableSoundSwitch() const;
            Ent::Gen::String _comment() const;
        };

        struct PhysicsDataGD : HelperObject // Object
        {
            PhysicsDataGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsDataGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::EDITOR_Mesh> EDITOR_Shapes() const;
            Ent::Gen::Bool EDITOR_isTrigger() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::sPhysicsJointDesc> joints() const;
            Array<Ent::Gen::sRigidBodyDesc> rigidBodies() const;
        };

        struct PerceiverGD : HelperObject // Object
        {
            PerceiverGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PerceiverGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float m_coneAngle() const;
            Ent::Gen::Float m_farSoundDistance() const;
            Ent::Gen::Float m_longRangeDistance() const;
            Ent::Gen::Float m_lowRangeDistance() const;
            Ent::Gen::Float m_middleRangeDistance() const;
            Ent::Gen::Float m_middleSoundDistance() const;
            Ent::Gen::Float m_nearSoundDistance() const;
            Ent::Gen::Float m_perceptionHeightMultiplier() const;
            Ent::Gen::Float m_perceptionHeightMultiplierHeightMax() const;
            Ent::Gen::Bool m_rayCastCheck() const;
        };

        struct PerceivableGD : HelperObject // Object
        {
            PerceivableGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PerceivableGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float m_perceivedDistanceMultiplier() const;
            Ent::Gen::SoundEmissionStrength m_soundCrouch() const;
            Ent::Gen::SoundEmissionStrength m_soundImmobile() const;
            Ent::Gen::SoundEmissionStrength m_soundRun() const;
            Ent::Gen::SoundEmissionStrength m_soundWalk() const;
            PrimArray<Ent::Gen::String> m_tags() const;
        };

        struct OutfitWearerGD : HelperObject // Object
        {
            OutfitWearerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OutfitWearerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef InventoryEntityRef() const;
            Ent::Gen::Float OutfitFadeDelay() const;
            Ent::Gen::Float OutfitFadeDuration() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct OutfitGD : HelperObject // Object
        {
            OutfitGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OutfitGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::MountableSnapLine_ControlPoint> SnapLine() const;
            Ent::Gen::SoundEventMapping SoundEventMappingRules() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::OutfitPiece> clothes() const;
            Ent::Gen::String faction() const;
            Ent::Gen::String overrideSpeciesAudioCategory() const;
            PrimArray<Ent::Gen::String> soundBank() const;
            Ent::Gen::String soundTag() const;
            Ent::Gen::StyleMode specialOutfitStyle() const;
            Ent::Gen::Bool spirit() const;
        };

        struct NotVisibleInSubscene : HelperObject // Object
        {
            NotVisibleInSubscene(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "NotVisibleInSubscene";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct NetworkNode : HelperObject // Object
        {
            NetworkNode(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "NetworkNode";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String Tag() const;
            Ent::Gen::String ThumbnailMesh() const;
            Ent::Gen::String Type_() const;
            Ent::Gen::String _comment() const;
        };

        struct NetworkLink : HelperObject // Object
        {
            NetworkLink(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "NetworkLink";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Source() const;
            Ent::Gen::EntityRef SourceEntityRef() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String Target() const;
            Ent::Gen::EntityRef TargetEntityRef() const;
            Ent::Gen::String ThumbnailMesh() const;
            Ent::Gen::String _comment() const;
        };

        struct NetGD : HelperObject // Object
        {
            NetGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "NetGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct NavMeshActivatorGD : HelperObject // Object
        {
            NavMeshActivatorGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "NavMeshActivatorGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ActivationZoneSize() const;
            PrimArray<Ent::Gen::String> SizeLayerMask() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct MultiThumbnail : HelperObject // Object
        {
            MultiThumbnail(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MultiThumbnail";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ListItem> List() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct MounterGD : HelperObject // Object
        {
            MounterGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MounterGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String HotspotName() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct MountableGD : HelperObject // Object
        {
            MountableGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MountableGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> HotspotNames() const;
            Array<Ent::Gen::MountableSnapLine_ControlPoint> SnapLine() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct MountIKControllerGD : HelperObject // Object
        {
            MountIKControllerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MountIKControllerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float horizontalSpineLeanFactor() const;
        };

        struct MissionHolderGD : HelperObject // Object
        {
            MissionHolderGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MissionHolderGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool Private() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct MeshNavigationInfosGD : HelperObject // Object
        {
            MeshNavigationInfosGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MeshNavigationInfosGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct Mesh : HelperObject // Object
        {
            Mesh(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Mesh";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String File() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct LifeComponentGD : HelperObject // Object
        {
            LifeComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "LifeComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AttackCancelDamagesThreshold() const;
            Ent::Gen::Float ClearDamagesWhenNoCombatAfterTime() const;
            Ent::Gen::Float DamagesRecoverSpeed() const;
            Ent::Gen::Float DamagesShield() const;
            Ent::Gen::Float DeathThreshold() const;
            Ent::Gen::Float InjuredDamagesThreshold() const;
            Ent::Gen::Float MinLifeWhenSpending() const;
            Ent::Gen::Bool ShouldCrashWhenFlyingInjured() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Float VelocityDamagesMax() const;
            Ent::Gen::String _comment() const;
        };

        struct LDPrimitive : HelperObject // Object
        {
            LDPrimitive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "LDPrimitive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool NonDisuptive() const;
            Ent::Gen::PrimitiveData PrimitiveData() const;
            Ent::Gen::String PrimitiveType() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ItemHolderGD : HelperObject // Object
        {
            ItemHolderGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ItemHolderGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String HotspotDefault() const;
            Ent::Gen::String HotspotHandLeft() const;
            Ent::Gen::String HotspotHandRight() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Bool Visible() const;
            Ent::Gen::String _comment() const;
        };

        struct InventoryGD : HelperObject // Object
        {
            InventoryGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InventoryGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Array<Ent::Gen::TaggedEntityRef> TaggedEntityRefs() const;
            Ent::Gen::String _comment() const;
        };

        struct InterestPointGD : HelperObject // Object
        {
            InterestPointGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InterestPointGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Radius() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::TagsList Tags() const;
            Ent::Gen::String _comment() const;
        };

        struct InteractableGPEGD : HelperObject // Object
        {
            InteractableGPEGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InteractableGPEGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ResponsiblePointer_ActorState_ GPEActorState() const;
            Ent::Gen::GPEType GPEType() const;
            Ent::Gen::String HotspotName() const;
            Ent::Gen::ResponsiblePointer_ActorState_ InteractionModeActorState() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct InfoboardRegistererGD : HelperObject // Object
        {
            InfoboardRegistererGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InfoboardRegistererGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String InfoboardName() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct IncapacitateComponentGD : HelperObject // Object
        {
            IncapacitateComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "IncapacitateComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::HitStyle> HitStyleTriggers() const;
            Ent::Gen::ScaleConverter ImpactMultiplierCurve() const;
            Ent::Gen::ScaleConverter IncapacitateTimeCurve() const;
            Ent::Gen::ScaleConverter IncapacitateTimeMultiplierCurve() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct HotspotsGD : HelperObject // Object
        {
            HotspotsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HotspotsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::HotspotData> HotspotsMap() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct HitTriggerGD : HelperObject // Object
        {
            HitTriggerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HitTriggerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct HeightObj : HelperObject // Object
        {
            HeightObj(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HeightObj";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::DisplaceNoiseListItem> DisplaceNoiseList() const;
            Ent::Gen::Int EditorSubdivision() const;
            Ent::Gen::Matrix33 LocalMatrix() const;
            Ent::Gen::String MeshFile() const;
            Ent::Gen::String MeshName() const;
            Ent::Gen::Int Priority() const;
            Ent::Gen::Int Subdivision() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct HeightMapComponentGD : HelperObject // Object
        {
            HeightMapComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HeightMapComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String HeightMapArchivePath() const;
            PrimArray<Ent::Gen::String> HeightMapPaths() const;
            Ent::Gen::Float HeightScale() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Bool SwapX() const;
            Ent::Gen::Bool SwapY() const;
            Ent::Gen::Vector2 WorldSize() const;
            Ent::Gen::String _comment() const;
        };

        struct HealthAreaGD : HelperObject // Object
        {
            HealthAreaGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HealthAreaGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float EnergyRestorationRate() const;
            Ent::Gen::EnergySide FactionSide() const;
            Ent::Gen::Float LifeRestorationRate() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::Float ReviveRestorationRate() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct HealerGD : HelperObject // Object
        {
            HealerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HealerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct HealTriggerGD : HelperObject // Object
        {
            HealTriggerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HealTriggerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct HealPumpGD : HelperObject // Object
        {
            HealPumpGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "HealPumpGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AlliesLifeAgentPerSecond() const;
            Ent::Gen::Float EnemiesLifeAgentPerSecond() const;
            Ent::Gen::Float LifeAmountRatio() const;
            Ent::Gen::Float Range() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct GroundTypeSamplerGD : HelperObject // Object
        {
            GroundTypeSamplerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GroundTypeSamplerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String GroundTypeMapPath() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct GrasperGD : HelperObject // Object
        {
            GrasperGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GrasperGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float bestInteractionDeltaAngleCoeff() const;
            Ent::Gen::Float bestInteractionDistanceCoeff() const;
            Ent::Gen::Map<GraspTypeEnum, Ent::Gen::GrasperInteractionData> interactionDatas() const;
            Ent::Gen::Float jumpRiseMinCoeffToEnter() const;
            Ent::Gen::GraspResistanceData resistanceData() const;
            Ent::Gen::String sensorHotspotName() const;
        };

        struct GraspableGD : HelperObject // Object
        {
            GraspableGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GraspableGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Map<GraspTypeEnum, Ent::Gen::GraspableInteractionData> interactionDatas() const;
            Ent::Gen::GraspResistanceData resistanceData() const;
        };

        struct GameEffectSpawnerGD : HelperObject // Object
        {
            GameEffectSpawnerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameEffectSpawnerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::sGameEffectTemplate> StartGameEffects() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FurComponentGD : HelperObject // Object
        {
            FurComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FurComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::FurProperties Properties() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidVolumeComponentGD : HelperObject // Object
        {
            FluidVolumeComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidVolumeComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::FluidVolumeComponentGD_FluidVolumeData FluidVolume() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidViewGD : HelperObject // Object
        {
            FluidViewGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidViewGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidGD : HelperObject // Object
        {
            FluidGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool IsWaterPlane() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float constrainedPlaneOffset() const;
            Ent::Gen::Vector3 fluidCurrent() const;
            Ent::Gen::Bool hasDepthLimit() const;
            Ent::Gen::Bool isWaterfall() const;
            Ent::Gen::FluidType type() const;
            Ent::Gen::Bool useHalfShape() const;
        };

        struct FluidFXEntitySpawnerGD : HelperObject // Object
        {
            FluidFXEntitySpawnerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidFXEntitySpawnerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Precision SamplingPrecision() const;
            Array<Ent::Gen::SpawningParameter> SpawningParameters() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Float UpdatePeriod() const;
            Ent::Gen::String _comment() const;
        };

        struct FireSensorGD : HelperObject // Object
        {
            FireSensorGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FireSensorGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EventTriggerGD : HelperObject // Object
        {
            EventTriggerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EventTriggerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> Events() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EventHandlerGD : HelperObject // Object
        {
            EventHandlerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EventHandlerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnvStampGD : HelperObject // Object
        {
            EnvStampGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnvStampGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float RegenStateChangeDuration() const;
            Ent::Gen::Map<EnergySideEnum, Array<Ent::Gen::sEnvStamp>> Stamps() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergySpoutGD : HelperObject // Object
        {
            EnergySpoutGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergySpoutGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float EnergySpeed() const;
            Ent::Gen::EntityRef ListenerEntityRef() const;
            Ent::Gen::Float MinDistanceBetweenRegen() const;
            Ent::Gen::Float MinTimeBetweenRegen() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::String SplineRegenEffectName() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergySideSwitcherGD : HelperObject // Object
        {
            EnergySideSwitcherGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergySideSwitcherGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<EnergySideEnum, Ent::Gen::EnergySideData> EnergySideData() const;
            Ent::Gen::EntityRef ReviveEnergyEntityRef() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergyPoolGD : HelperObject // Object
        {
            EnergyPoolGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergyPoolGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::EnergyPoolGD_EnergyArea> EnergyAreas() const;
            Ent::Gen::Bool FactionOverride() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::TransitionSettings TransitionSettings() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergyNetworkListenerGD : HelperObject // Object
        {
            EnergyNetworkListenerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergyNetworkListenerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergyDrainGD : HelperObject // Object
        {
            EnergyDrainGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergyDrainGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef PoolEntityRef() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EnergyCrookGD : HelperObject // Object
        {
            EnergyCrookGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EnergyCrookGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef FatherEntityRef() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::Float RegenScale() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct DummyComponentGD : HelperObject // Object
        {
            DummyComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DummyComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct DiveAttackGD : HelperObject // Object
        {
            DiveAttackGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DiveAttackGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct DistanceTriggerGD : HelperObject // Object
        {
            DistanceTriggerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DistanceTriggerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::Float> Distances() const;
            PrimArray<Ent::Gen::Float> Hystereses() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FightDistanceTriggerGD : HelperObject // Object
        {
            FightDistanceTriggerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FightDistanceTriggerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::DistanceTriggerGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct DebugGridGD : HelperObject // Object
        {
            DebugGridGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DebugGridGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int Height() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Int Width() const;
            Ent::Gen::String _comment() const;
        };

        struct CustomThumbnail : HelperObject // Object
        {
            CustomThumbnail(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CustomThumbnail";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::ThumbPath Thumbnail() const;
            Ent::Gen::String _comment() const;
        };

        struct CreatureUIGD : HelperObject // Object
        {
            CreatureUIGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureUIGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float LifeBarLength() const;
            Ent::Gen::Float LifeBarWidth() const;
            Ent::Gen::Float LifeBarZOffset() const;
            Ent::Gen::Bool ShowLifeBar() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ConstrainedMoveGD : HelperObject // Object
        {
            ConstrainedMoveGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConstrainedMoveGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ConstrainedMoveContextInput ConstrainedMoveContextInput() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ConnectorGD : HelperObject // Object
        {
            ConnectorGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConnectorGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ComponentWithProtoCodeGD : HelperObject // Object
        {
            ComponentWithProtoCodeGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ComponentWithProtoCodeGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ClothAnimationGD : HelperObject // Object
        {
            ClothAnimationGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ClothAnimationGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String ClothSkeletonPath() const;
            Ent::Gen::Float PhysicsDamping() const;
            Ent::Gen::Bool PhysicsFixedDt() const;
            Ent::Gen::Vector3 PhysicsGravity() const;
            Ent::Gen::Float PhysicsMass() const;
            Ent::Gen::Float PhysicsSpeedInfluence() const;
            Ent::Gen::Bool PhysicsUseDefaultProperties() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ChildEntityPoolComponentGD : HelperObject // Object
        {
            ChildEntityPoolComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ChildEntityPoolComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AddStateAtStart() const;
            Ent::Gen::Bool AttachToParent() const;
            PrimArray<Ent::Gen::EntityRef> EntityRefs() const;
            Ent::Gen::SpawnState SpawnState() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CharacterPlatformGD : HelperObject // Object
        {
            CharacterPlatformGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CharacterPlatformGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CameraDataGD : HelperObject // Object
        {
            CameraDataGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CameraDataGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String CameraDataResourcePath() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BreakableGD : HelperObject // Object
        {
            BreakableGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BreakableGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef AssemblyEntity() const;
            Ent::Gen::String BreakSoundBank() const;
            Ent::Gen::String BreakSoundEvent() const;
            Ent::Gen::EntityRef ChildEntity() const;
            Ent::Gen::Float FadeoutDuration() const;
            Ent::Gen::String GameEffectOnBreaking() const;
            Ent::Gen::Float MaxContactAngle() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Float TimeBeforeFade() const;
            Ent::Gen::EntityRef UnbrokenEntity() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool isBreakableWithAttack() const;
        };

        struct BittenGD : HelperObject // Object
        {
            BittenGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BittenGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float MaxAngle() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AttackTriggerGD : HelperObject // Object
        {
            AttackTriggerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackTriggerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AssemblyGD : HelperObject // Object
        {
            AssemblyGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AssemblyGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationTransformDriverGD : HelperObject // Object
        {
            AnimationTransformDriverGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationTransformDriverGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationPlaylistGD : HelperObject // Object
        {
            AnimationPlaylistGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationPlaylistGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> PlayAnim() const;
            Ent::Gen::Int PlayAnimInputID() const;
            Ent::Gen::Bool RandomizeStartTime() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationPhysicsChainConstraintsGD : HelperObject // Object
        {
            AnimationPhysicsChainConstraintsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationPhysicsChainConstraintsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String BoneNamePrefix() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationModelGD : HelperObject // Object
        {
            AnimationModelGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationModelGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Map<LocomotionModeEnum, Ent::Gen::Map<SpeedModeEnum, Ent::Gen::Float>> additionalSpeedDebug() const;
            Ent::Gen::Bool isLandAnimDriven() const;
            Ent::Gen::Bool isTurnAllowed() const;
            Ent::Gen::Float playRatioFactor() const;
            Ent::Gen::Float scalePlayRatioCoeffInfluence() const;
            Ent::Gen::Float startRunPlayRatioFactor() const;
            Ent::Gen::Float turnPlayRatioFactor() const;
        };

        struct AnimationHitsConstraintsGD : HelperObject // Object
        {
            AnimationHitsConstraintsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationHitsConstraintsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct Component : Base // Union
        {
            Component(Ent::Node* _node): Base(_node) {}
            static constexpr char schemaName[] = "Component";
            char const* getType() const;
            std::optional<Ent::Gen::AIContextGD> AIContextGD() const;
            Ent::Gen::AIContextGD setAIContextGD() const;
            std::optional<Ent::Gen::ActorGD> ActorGD() const;
            Ent::Gen::ActorGD setActorGD() const;
            std::optional<Ent::Gen::AnimationControllerGD> AnimationControllerGD() const;
            Ent::Gen::AnimationControllerGD setAnimationControllerGD() const;
            std::optional<Ent::Gen::AnimationEventsGeneratorGD> AnimationEventsGeneratorGD() const;
            Ent::Gen::AnimationEventsGeneratorGD setAnimationEventsGeneratorGD() const;
            std::optional<Ent::Gen::AnimationGenericConstraintsGD> AnimationGenericConstraintsGD() const;
            Ent::Gen::AnimationGenericConstraintsGD setAnimationGenericConstraintsGD() const;
            std::optional<Ent::Gen::AnimationHitsConstraintsGD> AnimationHitsConstraintsGD() const;
            Ent::Gen::AnimationHitsConstraintsGD setAnimationHitsConstraintsGD() const;
            std::optional<Ent::Gen::AnimationLegsConstraintsGD> AnimationLegsConstraintsGD() const;
            Ent::Gen::AnimationLegsConstraintsGD setAnimationLegsConstraintsGD() const;
            std::optional<Ent::Gen::AnimationModelGD> AnimationModelGD() const;
            Ent::Gen::AnimationModelGD setAnimationModelGD() const;
            std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD> AnimationPhysicsChainConstraintsGD() const;
            Ent::Gen::AnimationPhysicsChainConstraintsGD setAnimationPhysicsChainConstraintsGD() const;
            std::optional<Ent::Gen::AnimationPlaylistGD> AnimationPlaylistGD() const;
            Ent::Gen::AnimationPlaylistGD setAnimationPlaylistGD() const;
            std::optional<Ent::Gen::AnimationTailConstraintsGD> AnimationTailConstraintsGD() const;
            Ent::Gen::AnimationTailConstraintsGD setAnimationTailConstraintsGD() const;
            std::optional<Ent::Gen::AnimationTransformDriverGD> AnimationTransformDriverGD() const;
            Ent::Gen::AnimationTransformDriverGD setAnimationTransformDriverGD() const;
            std::optional<Ent::Gen::AnimationTreeConstraintsGD> AnimationTreeConstraintsGD() const;
            Ent::Gen::AnimationTreeConstraintsGD setAnimationTreeConstraintsGD() const;
            std::optional<Ent::Gen::AssemblyGD> AssemblyGD() const;
            Ent::Gen::AssemblyGD setAssemblyGD() const;
            std::optional<Ent::Gen::AttackComponentGD> AttackComponentGD() const;
            Ent::Gen::AttackComponentGD setAttackComponentGD() const;
            std::optional<Ent::Gen::AttackTriggerGD> AttackTriggerGD() const;
            Ent::Gen::AttackTriggerGD setAttackTriggerGD() const;
            std::optional<Ent::Gen::BeamTargetGD> BeamTargetGD() const;
            Ent::Gen::BeamTargetGD setBeamTargetGD() const;
            std::optional<Ent::Gen::BittenGD> BittenGD() const;
            Ent::Gen::BittenGD setBittenGD() const;
            std::optional<Ent::Gen::BoidsGD> BoidsGD() const;
            Ent::Gen::BoidsGD setBoidsGD() const;
            std::optional<Ent::Gen::BreakableGD> BreakableGD() const;
            Ent::Gen::BreakableGD setBreakableGD() const;
            std::optional<Ent::Gen::CameraDataGD> CameraDataGD() const;
            Ent::Gen::CameraDataGD setCameraDataGD() const;
            std::optional<Ent::Gen::CameraSetterGD> CameraSetterGD() const;
            Ent::Gen::CameraSetterGD setCameraSetterGD() const;
            std::optional<Ent::Gen::CharacterControllerGD> CharacterControllerGD() const;
            Ent::Gen::CharacterControllerGD setCharacterControllerGD() const;
            std::optional<Ent::Gen::CharacterPlatformGD> CharacterPlatformGD() const;
            Ent::Gen::CharacterPlatformGD setCharacterPlatformGD() const;
            std::optional<Ent::Gen::ChargedJumpGD> ChargedJumpGD() const;
            Ent::Gen::ChargedJumpGD setChargedJumpGD() const;
            std::optional<Ent::Gen::ChildEntityPoolComponentGD> ChildEntityPoolComponentGD() const;
            Ent::Gen::ChildEntityPoolComponentGD setChildEntityPoolComponentGD() const;
            std::optional<Ent::Gen::CinematicGD> CinematicGD() const;
            Ent::Gen::CinematicGD setCinematicGD() const;
            std::optional<Ent::Gen::ClothAnimationGD> ClothAnimationGD() const;
            Ent::Gen::ClothAnimationGD setClothAnimationGD() const;
            std::optional<Ent::Gen::ClothGD> ClothGD() const;
            Ent::Gen::ClothGD setClothGD() const;
            std::optional<Ent::Gen::ComponentWithProtoCodeGD> ComponentWithProtoCodeGD() const;
            Ent::Gen::ComponentWithProtoCodeGD setComponentWithProtoCodeGD() const;
            std::optional<Ent::Gen::ConnectorGD> ConnectorGD() const;
            Ent::Gen::ConnectorGD setConnectorGD() const;
            std::optional<Ent::Gen::ConstrainedMoveGD> ConstrainedMoveGD() const;
            Ent::Gen::ConstrainedMoveGD setConstrainedMoveGD() const;
            std::optional<Ent::Gen::CreatureAIGD> CreatureAIGD() const;
            Ent::Gen::CreatureAIGD setCreatureAIGD() const;
            std::optional<Ent::Gen::CreatureGD> CreatureGD() const;
            Ent::Gen::CreatureGD setCreatureGD() const;
            std::optional<Ent::Gen::CreatureUIGD> CreatureUIGD() const;
            Ent::Gen::CreatureUIGD setCreatureUIGD() const;
            std::optional<Ent::Gen::CustomThumbnail> CustomThumbnail() const;
            Ent::Gen::CustomThumbnail setCustomThumbnail() const;
            std::optional<Ent::Gen::DebugGridGD> DebugGridGD() const;
            Ent::Gen::DebugGridGD setDebugGridGD() const;
            std::optional<Ent::Gen::DistanceTriggerGD> DistanceTriggerGD() const;
            Ent::Gen::DistanceTriggerGD setDistanceTriggerGD() const;
            std::optional<Ent::Gen::DiveAttackGD> DiveAttackGD() const;
            Ent::Gen::DiveAttackGD setDiveAttackGD() const;
            std::optional<Ent::Gen::DummyComponentGD> DummyComponentGD() const;
            Ent::Gen::DummyComponentGD setDummyComponentGD() const;
            std::optional<Ent::Gen::EnergyCrookGD> EnergyCrookGD() const;
            Ent::Gen::EnergyCrookGD setEnergyCrookGD() const;
            std::optional<Ent::Gen::EnergyDrainGD> EnergyDrainGD() const;
            Ent::Gen::EnergyDrainGD setEnergyDrainGD() const;
            std::optional<Ent::Gen::EnergyNetworkListenerGD> EnergyNetworkListenerGD() const;
            Ent::Gen::EnergyNetworkListenerGD setEnergyNetworkListenerGD() const;
            std::optional<Ent::Gen::EnergyPoolGD> EnergyPoolGD() const;
            Ent::Gen::EnergyPoolGD setEnergyPoolGD() const;
            std::optional<Ent::Gen::EnergySideSwitcherGD> EnergySideSwitcherGD() const;
            Ent::Gen::EnergySideSwitcherGD setEnergySideSwitcherGD() const;
            std::optional<Ent::Gen::EnergySpoutGD> EnergySpoutGD() const;
            Ent::Gen::EnergySpoutGD setEnergySpoutGD() const;
            std::optional<Ent::Gen::EnvStampGD> EnvStampGD() const;
            Ent::Gen::EnvStampGD setEnvStampGD() const;
            std::optional<Ent::Gen::EventHandlerGD> EventHandlerGD() const;
            Ent::Gen::EventHandlerGD setEventHandlerGD() const;
            std::optional<Ent::Gen::EventTriggerGD> EventTriggerGD() const;
            Ent::Gen::EventTriggerGD setEventTriggerGD() const;
            std::optional<Ent::Gen::FightDistanceTriggerGD> FightDistanceTriggerGD() const;
            Ent::Gen::FightDistanceTriggerGD setFightDistanceTriggerGD() const;
            std::optional<Ent::Gen::FireSensorGD> FireSensorGD() const;
            Ent::Gen::FireSensorGD setFireSensorGD() const;
            std::optional<Ent::Gen::FluidFXEntitySpawnerGD> FluidFXEntitySpawnerGD() const;
            Ent::Gen::FluidFXEntitySpawnerGD setFluidFXEntitySpawnerGD() const;
            std::optional<Ent::Gen::FluidGD> FluidGD() const;
            Ent::Gen::FluidGD setFluidGD() const;
            std::optional<Ent::Gen::FluidViewGD> FluidViewGD() const;
            Ent::Gen::FluidViewGD setFluidViewGD() const;
            std::optional<Ent::Gen::FluidVolumeComponentGD> FluidVolumeComponentGD() const;
            Ent::Gen::FluidVolumeComponentGD setFluidVolumeComponentGD() const;
            std::optional<Ent::Gen::FurComponentGD> FurComponentGD() const;
            Ent::Gen::FurComponentGD setFurComponentGD() const;
            std::optional<Ent::Gen::GameEffectSpawnerGD> GameEffectSpawnerGD() const;
            Ent::Gen::GameEffectSpawnerGD setGameEffectSpawnerGD() const;
            std::optional<Ent::Gen::GraspableGD> GraspableGD() const;
            Ent::Gen::GraspableGD setGraspableGD() const;
            std::optional<Ent::Gen::GrasperGD> GrasperGD() const;
            Ent::Gen::GrasperGD setGrasperGD() const;
            std::optional<Ent::Gen::GroundTypeSamplerGD> GroundTypeSamplerGD() const;
            Ent::Gen::GroundTypeSamplerGD setGroundTypeSamplerGD() const;
            std::optional<Ent::Gen::HealPumpGD> HealPumpGD() const;
            Ent::Gen::HealPumpGD setHealPumpGD() const;
            std::optional<Ent::Gen::HealTriggerGD> HealTriggerGD() const;
            Ent::Gen::HealTriggerGD setHealTriggerGD() const;
            std::optional<Ent::Gen::HealerGD> HealerGD() const;
            Ent::Gen::HealerGD setHealerGD() const;
            std::optional<Ent::Gen::HealthAreaGD> HealthAreaGD() const;
            Ent::Gen::HealthAreaGD setHealthAreaGD() const;
            std::optional<Ent::Gen::HeightMapComponentGD> HeightMapComponentGD() const;
            Ent::Gen::HeightMapComponentGD setHeightMapComponentGD() const;
            std::optional<Ent::Gen::HeightObj> HeightObj() const;
            Ent::Gen::HeightObj setHeightObj() const;
            std::optional<Ent::Gen::HitTriggerGD> HitTriggerGD() const;
            Ent::Gen::HitTriggerGD setHitTriggerGD() const;
            std::optional<Ent::Gen::HotspotsGD> HotspotsGD() const;
            Ent::Gen::HotspotsGD setHotspotsGD() const;
            std::optional<Ent::Gen::IncapacitateComponentGD> IncapacitateComponentGD() const;
            Ent::Gen::IncapacitateComponentGD setIncapacitateComponentGD() const;
            std::optional<Ent::Gen::InfoboardRegistererGD> InfoboardRegistererGD() const;
            Ent::Gen::InfoboardRegistererGD setInfoboardRegistererGD() const;
            std::optional<Ent::Gen::InteractableGPEGD> InteractableGPEGD() const;
            Ent::Gen::InteractableGPEGD setInteractableGPEGD() const;
            std::optional<Ent::Gen::InteractorGD> InteractorGD() const;
            Ent::Gen::InteractorGD setInteractorGD() const;
            std::optional<Ent::Gen::InterestPointGD> InterestPointGD() const;
            Ent::Gen::InterestPointGD setInterestPointGD() const;
            std::optional<Ent::Gen::InventoryGD> InventoryGD() const;
            Ent::Gen::InventoryGD setInventoryGD() const;
            std::optional<Ent::Gen::ItemHolderGD> ItemHolderGD() const;
            Ent::Gen::ItemHolderGD setItemHolderGD() const;
            std::optional<Ent::Gen::LDPrimitive> LDPrimitive() const;
            Ent::Gen::LDPrimitive setLDPrimitive() const;
            std::optional<Ent::Gen::LifeComponentGD> LifeComponentGD() const;
            Ent::Gen::LifeComponentGD setLifeComponentGD() const;
            std::optional<Ent::Gen::LightComponentGD> LightComponentGD() const;
            Ent::Gen::LightComponentGD setLightComponentGD() const;
            std::optional<Ent::Gen::Mesh> Mesh() const;
            Ent::Gen::Mesh setMesh() const;
            std::optional<Ent::Gen::MeshNavigationInfosGD> MeshNavigationInfosGD() const;
            Ent::Gen::MeshNavigationInfosGD setMeshNavigationInfosGD() const;
            std::optional<Ent::Gen::MissionHolderGD> MissionHolderGD() const;
            Ent::Gen::MissionHolderGD setMissionHolderGD() const;
            std::optional<Ent::Gen::MountIKControllerGD> MountIKControllerGD() const;
            Ent::Gen::MountIKControllerGD setMountIKControllerGD() const;
            std::optional<Ent::Gen::MountableGD> MountableGD() const;
            Ent::Gen::MountableGD setMountableGD() const;
            std::optional<Ent::Gen::MounterGD> MounterGD() const;
            Ent::Gen::MounterGD setMounterGD() const;
            std::optional<Ent::Gen::MultiThumbnail> MultiThumbnail() const;
            Ent::Gen::MultiThumbnail setMultiThumbnail() const;
            std::optional<Ent::Gen::NavMeshActivatorGD> NavMeshActivatorGD() const;
            Ent::Gen::NavMeshActivatorGD setNavMeshActivatorGD() const;
            std::optional<Ent::Gen::NavMeshStamperGD> NavMeshStamperGD() const;
            Ent::Gen::NavMeshStamperGD setNavMeshStamperGD() const;
            std::optional<Ent::Gen::NetGD> NetGD() const;
            Ent::Gen::NetGD setNetGD() const;
            std::optional<Ent::Gen::NetworkLink> NetworkLink() const;
            Ent::Gen::NetworkLink setNetworkLink() const;
            std::optional<Ent::Gen::NetworkNode> NetworkNode() const;
            Ent::Gen::NetworkNode setNetworkNode() const;
            std::optional<Ent::Gen::NotVisibleInSubscene> NotVisibleInSubscene() const;
            Ent::Gen::NotVisibleInSubscene setNotVisibleInSubscene() const;
            std::optional<Ent::Gen::OutfitGD> OutfitGD() const;
            Ent::Gen::OutfitGD setOutfitGD() const;
            std::optional<Ent::Gen::OutfitWearerGD> OutfitWearerGD() const;
            Ent::Gen::OutfitWearerGD setOutfitWearerGD() const;
            std::optional<Ent::Gen::PathFinderGD> PathFinderGD() const;
            Ent::Gen::PathFinderGD setPathFinderGD() const;
            std::optional<Ent::Gen::PerceivableGD> PerceivableGD() const;
            Ent::Gen::PerceivableGD setPerceivableGD() const;
            std::optional<Ent::Gen::PerceiverGD> PerceiverGD() const;
            Ent::Gen::PerceiverGD setPerceiverGD() const;
            std::optional<Ent::Gen::PhysicsDataGD> PhysicsDataGD() const;
            Ent::Gen::PhysicsDataGD setPhysicsDataGD() const;
            std::optional<Ent::Gen::PhysicsGD> PhysicsGD() const;
            Ent::Gen::PhysicsGD setPhysicsGD() const;
            std::optional<Ent::Gen::PhysicsImpactMakerGD> PhysicsImpactMakerGD() const;
            Ent::Gen::PhysicsImpactMakerGD setPhysicsImpactMakerGD() const;
            std::optional<Ent::Gen::PhysicsMeshDeformerGD> PhysicsMeshDeformerGD() const;
            Ent::Gen::PhysicsMeshDeformerGD setPhysicsMeshDeformerGD() const;
            std::optional<Ent::Gen::PhysicsMeshProviderGD> PhysicsMeshProviderGD() const;
            Ent::Gen::PhysicsMeshProviderGD setPhysicsMeshProviderGD() const;
            std::optional<Ent::Gen::PhysicsTriggerGD> PhysicsTriggerGD() const;
            Ent::Gen::PhysicsTriggerGD setPhysicsTriggerGD() const;
            std::optional<Ent::Gen::PickableComponentGD> PickableComponentGD() const;
            Ent::Gen::PickableComponentGD setPickableComponentGD() const;
            std::optional<Ent::Gen::PickableDistributorComponentGD> PickableDistributorComponentGD() const;
            Ent::Gen::PickableDistributorComponentGD setPickableDistributorComponentGD() const;
            std::optional<Ent::Gen::PlayerComponentGD> PlayerComponentGD() const;
            Ent::Gen::PlayerComponentGD setPlayerComponentGD() const;
            std::optional<Ent::Gen::ProjectileGD> ProjectileGD() const;
            Ent::Gen::ProjectileGD setProjectileGD() const;
            std::optional<Ent::Gen::ProjectileShooterGD> ProjectileShooterGD() const;
            Ent::Gen::ProjectileShooterGD setProjectileShooterGD() const;
            std::optional<Ent::Gen::ProtoComponentGD> ProtoComponentGD() const;
            Ent::Gen::ProtoComponentGD setProtoComponentGD() const;
            std::optional<Ent::Gen::QuickCreatureSwitchGD> QuickCreatureSwitchGD() const;
            Ent::Gen::QuickCreatureSwitchGD setQuickCreatureSwitchGD() const;
            std::optional<Ent::Gen::RagdollGD> RagdollGD() const;
            Ent::Gen::RagdollGD setRagdollGD() const;
            std::optional<Ent::Gen::RegenSwitcherGD> RegenSwitcherGD() const;
            Ent::Gen::RegenSwitcherGD setRegenSwitcherGD() const;
            std::optional<Ent::Gen::RegenerableVegetationGD> RegenerableVegetationGD() const;
            Ent::Gen::RegenerableVegetationGD setRegenerableVegetationGD() const;
            std::optional<Ent::Gen::RespawnPlaceGD> RespawnPlaceGD() const;
            Ent::Gen::RespawnPlaceGD setRespawnPlaceGD() const;
            std::optional<Ent::Gen::RespawnabilityGD> RespawnabilityGD() const;
            Ent::Gen::RespawnabilityGD setRespawnabilityGD() const;
            std::optional<Ent::Gen::ReviveEnergyGD> ReviveEnergyGD() const;
            Ent::Gen::ReviveEnergyGD setReviveEnergyGD() const;
            std::optional<Ent::Gen::ScriptComponentGD> ScriptComponentGD() const;
            Ent::Gen::ScriptComponentGD setScriptComponentGD() const;
            std::optional<Ent::Gen::SeedPatch> SeedPatch() const;
            Ent::Gen::SeedPatch setSeedPatch() const;
            std::optional<Ent::Gen::SensorControllerGD> SensorControllerGD() const;
            Ent::Gen::SensorControllerGD setSensorControllerGD() const;
            std::optional<Ent::Gen::SensorVoxelsGD> SensorVoxelsGD() const;
            Ent::Gen::SensorVoxelsGD setSensorVoxelsGD() const;
            std::optional<Ent::Gen::ShamanItemGD> ShamanItemGD() const;
            Ent::Gen::ShamanItemGD setShamanItemGD() const;
            std::optional<Ent::Gen::ShamanVisionGD> ShamanVisionGD() const;
            Ent::Gen::ShamanVisionGD setShamanVisionGD() const;
            std::optional<Ent::Gen::ShapeshiftStatueGD> ShapeshiftStatueGD() const;
            Ent::Gen::ShapeshiftStatueGD setShapeshiftStatueGD() const;
            std::optional<Ent::Gen::SideMapGateGD> SideMapGateGD() const;
            Ent::Gen::SideMapGateGD setSideMapGateGD() const;
            std::optional<Ent::Gen::SmoothScaleComponentGD> SmoothScaleComponentGD() const;
            Ent::Gen::SmoothScaleComponentGD setSmoothScaleComponentGD() const;
            std::optional<Ent::Gen::SoftCollisionGD> SoftCollisionGD() const;
            Ent::Gen::SoftCollisionGD setSoftCollisionGD() const;
            std::optional<Ent::Gen::SoulRespawnOpportunityGD> SoulRespawnOpportunityGD() const;
            Ent::Gen::SoulRespawnOpportunityGD setSoulRespawnOpportunityGD() const;
            std::optional<Ent::Gen::SoundAreaGD> SoundAreaGD() const;
            Ent::Gen::SoundAreaGD setSoundAreaGD() const;
            std::optional<Ent::Gen::SoundEmitterGD> SoundEmitterGD() const;
            Ent::Gen::SoundEmitterGD setSoundEmitterGD() const;
            std::optional<Ent::Gen::SoundOpportunityComponentGD> SoundOpportunityComponentGD() const;
            Ent::Gen::SoundOpportunityComponentGD setSoundOpportunityComponentGD() const;
            std::optional<Ent::Gen::SpiritAnimalGD> SpiritAnimalGD() const;
            Ent::Gen::SpiritAnimalGD setSpiritAnimalGD() const;
            std::optional<Ent::Gen::SpiritAnimalShrineGD> SpiritAnimalShrineGD() const;
            Ent::Gen::SpiritAnimalShrineGD setSpiritAnimalShrineGD() const;
            std::optional<Ent::Gen::SpiritAnimalsHolderGD> SpiritAnimalsHolderGD() const;
            Ent::Gen::SpiritAnimalsHolderGD setSpiritAnimalsHolderGD() const;
            std::optional<Ent::Gen::StaffVertebrasGD> StaffVertebrasGD() const;
            Ent::Gen::StaffVertebrasGD setStaffVertebrasGD() const;
            std::optional<Ent::Gen::StaticObjectGD> StaticObjectGD() const;
            Ent::Gen::StaticObjectGD setStaticObjectGD() const;
            std::optional<Ent::Gen::StickToTerrain> StickToTerrain() const;
            Ent::Gen::StickToTerrain setStickToTerrain() const;
            std::optional<Ent::Gen::StreamableUnitGD> StreamableUnitGD() const;
            Ent::Gen::StreamableUnitGD setStreamableUnitGD() const;
            std::optional<Ent::Gen::StreamingLocatorGD> StreamingLocatorGD() const;
            Ent::Gen::StreamingLocatorGD setStreamingLocatorGD() const;
            std::optional<Ent::Gen::SubScene> SubScene() const;
            Ent::Gen::SubScene setSubScene() const;
            std::optional<Ent::Gen::SystemicCreature> SystemicCreature() const;
            Ent::Gen::SystemicCreature setSystemicCreature() const;
            std::optional<Ent::Gen::TeamGD> TeamGD() const;
            Ent::Gen::TeamGD setTeamGD() const;
            std::optional<Ent::Gen::TerrainGD> TerrainGD() const;
            Ent::Gen::TerrainGD setTerrainGD() const;
            std::optional<Ent::Gen::TerrainSurfaceObject> TerrainSurfaceObject() const;
            Ent::Gen::TerrainSurfaceObject setTerrainSurfaceObject() const;
            std::optional<Ent::Gen::TestArrays> TestArrays() const;
            Ent::Gen::TestArrays setTestArrays() const;
            std::optional<Ent::Gen::TestCreature> TestCreature() const;
            Ent::Gen::TestCreature setTestCreature() const;
            std::optional<Ent::Gen::TestDefaultValues> TestDefaultValues() const;
            Ent::Gen::TestDefaultValues setTestDefaultValues() const;
            std::optional<Ent::Gen::TestEntityRef> TestEntityRef() const;
            Ent::Gen::TestEntityRef setTestEntityRef() const;
            std::optional<Ent::Gen::TestSetOfObject> TestSetOfObject() const;
            Ent::Gen::TestSetOfObject setTestSetOfObject() const;
            std::optional<Ent::Gen::TestTagsList> TestTagsList() const;
            Ent::Gen::TestTagsList setTestTagsList() const;
            std::optional<Ent::Gen::TestUnion> TestUnion() const;
            Ent::Gen::TestUnion setTestUnion() const;
            std::optional<Ent::Gen::TransformGD> TransformGD() const;
            Ent::Gen::TransformGD setTransformGD() const;
            std::optional<Ent::Gen::TriggerEventCameraGD> TriggerEventCameraGD() const;
            Ent::Gen::TriggerEventCameraGD setTriggerEventCameraGD() const;
            std::optional<Ent::Gen::UnifiedPhysicsDataGD> UnifiedPhysicsDataGD() const;
            Ent::Gen::UnifiedPhysicsDataGD setUnifiedPhysicsDataGD() const;
            std::optional<Ent::Gen::UnitTestComponent> UnitTestComponent() const;
            Ent::Gen::UnitTestComponent setUnitTestComponent() const;
            std::optional<Ent::Gen::VelocityObstacleGD> VelocityObstacleGD() const;
            Ent::Gen::VelocityObstacleGD setVelocityObstacleGD() const;
            std::optional<Ent::Gen::VisualGD> VisualGD() const;
            Ent::Gen::VisualGD setVisualGD() const;
            std::optional<Ent::Gen::VolumeConstraintGD> VolumeConstraintGD() const;
            Ent::Gen::VolumeConstraintGD setVolumeConstraintGD() const;
            std::optional<Ent::Gen::VoxelSimulationGD> VoxelSimulationGD() const;
            Ent::Gen::VoxelSimulationGD setVoxelSimulationGD() const;
            std::optional<Ent::Gen::WallRunGD> WallRunGD() const;
            Ent::Gen::WallRunGD setWallRunGD() const;
            std::optional<Ent::Gen::WildObject> WildObject() const;
            Ent::Gen::WildObject setWildObject() const;
        };

        struct Object_Components : UnionSetBase<Component> // union_set
        {
            Object_Components(Ent::Node* _node)
                : UnionSetBase<Component>(_node)
            {
            }
            
            char const* getType() const;
            std::optional<Ent::Gen::AIContextGD> AIContextGD() const;
            Ent::Gen::AIContextGD addAIContextGD() const;
            void removeAIContextGD() const;
            std::optional<Ent::Gen::ActorGD> ActorGD() const;
            Ent::Gen::ActorGD addActorGD() const;
            void removeActorGD() const;
            std::optional<Ent::Gen::AnimationControllerGD> AnimationControllerGD() const;
            Ent::Gen::AnimationControllerGD addAnimationControllerGD() const;
            void removeAnimationControllerGD() const;
            std::optional<Ent::Gen::AnimationEventsGeneratorGD> AnimationEventsGeneratorGD() const;
            Ent::Gen::AnimationEventsGeneratorGD addAnimationEventsGeneratorGD() const;
            void removeAnimationEventsGeneratorGD() const;
            std::optional<Ent::Gen::AnimationGenericConstraintsGD> AnimationGenericConstraintsGD() const;
            Ent::Gen::AnimationGenericConstraintsGD addAnimationGenericConstraintsGD() const;
            void removeAnimationGenericConstraintsGD() const;
            std::optional<Ent::Gen::AnimationHitsConstraintsGD> AnimationHitsConstraintsGD() const;
            Ent::Gen::AnimationHitsConstraintsGD addAnimationHitsConstraintsGD() const;
            void removeAnimationHitsConstraintsGD() const;
            std::optional<Ent::Gen::AnimationLegsConstraintsGD> AnimationLegsConstraintsGD() const;
            Ent::Gen::AnimationLegsConstraintsGD addAnimationLegsConstraintsGD() const;
            void removeAnimationLegsConstraintsGD() const;
            std::optional<Ent::Gen::AnimationModelGD> AnimationModelGD() const;
            Ent::Gen::AnimationModelGD addAnimationModelGD() const;
            void removeAnimationModelGD() const;
            std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD> AnimationPhysicsChainConstraintsGD() const;
            Ent::Gen::AnimationPhysicsChainConstraintsGD addAnimationPhysicsChainConstraintsGD() const;
            void removeAnimationPhysicsChainConstraintsGD() const;
            std::optional<Ent::Gen::AnimationPlaylistGD> AnimationPlaylistGD() const;
            Ent::Gen::AnimationPlaylistGD addAnimationPlaylistGD() const;
            void removeAnimationPlaylistGD() const;
            std::optional<Ent::Gen::AnimationTailConstraintsGD> AnimationTailConstraintsGD() const;
            Ent::Gen::AnimationTailConstraintsGD addAnimationTailConstraintsGD() const;
            void removeAnimationTailConstraintsGD() const;
            std::optional<Ent::Gen::AnimationTransformDriverGD> AnimationTransformDriverGD() const;
            Ent::Gen::AnimationTransformDriverGD addAnimationTransformDriverGD() const;
            void removeAnimationTransformDriverGD() const;
            std::optional<Ent::Gen::AnimationTreeConstraintsGD> AnimationTreeConstraintsGD() const;
            Ent::Gen::AnimationTreeConstraintsGD addAnimationTreeConstraintsGD() const;
            void removeAnimationTreeConstraintsGD() const;
            std::optional<Ent::Gen::AssemblyGD> AssemblyGD() const;
            Ent::Gen::AssemblyGD addAssemblyGD() const;
            void removeAssemblyGD() const;
            std::optional<Ent::Gen::AttackComponentGD> AttackComponentGD() const;
            Ent::Gen::AttackComponentGD addAttackComponentGD() const;
            void removeAttackComponentGD() const;
            std::optional<Ent::Gen::AttackTriggerGD> AttackTriggerGD() const;
            Ent::Gen::AttackTriggerGD addAttackTriggerGD() const;
            void removeAttackTriggerGD() const;
            std::optional<Ent::Gen::BeamTargetGD> BeamTargetGD() const;
            Ent::Gen::BeamTargetGD addBeamTargetGD() const;
            void removeBeamTargetGD() const;
            std::optional<Ent::Gen::BittenGD> BittenGD() const;
            Ent::Gen::BittenGD addBittenGD() const;
            void removeBittenGD() const;
            std::optional<Ent::Gen::BoidsGD> BoidsGD() const;
            Ent::Gen::BoidsGD addBoidsGD() const;
            void removeBoidsGD() const;
            std::optional<Ent::Gen::BreakableGD> BreakableGD() const;
            Ent::Gen::BreakableGD addBreakableGD() const;
            void removeBreakableGD() const;
            std::optional<Ent::Gen::CameraDataGD> CameraDataGD() const;
            Ent::Gen::CameraDataGD addCameraDataGD() const;
            void removeCameraDataGD() const;
            std::optional<Ent::Gen::CameraSetterGD> CameraSetterGD() const;
            Ent::Gen::CameraSetterGD addCameraSetterGD() const;
            void removeCameraSetterGD() const;
            std::optional<Ent::Gen::CharacterControllerGD> CharacterControllerGD() const;
            Ent::Gen::CharacterControllerGD addCharacterControllerGD() const;
            void removeCharacterControllerGD() const;
            std::optional<Ent::Gen::CharacterPlatformGD> CharacterPlatformGD() const;
            Ent::Gen::CharacterPlatformGD addCharacterPlatformGD() const;
            void removeCharacterPlatformGD() const;
            std::optional<Ent::Gen::ChargedJumpGD> ChargedJumpGD() const;
            Ent::Gen::ChargedJumpGD addChargedJumpGD() const;
            void removeChargedJumpGD() const;
            std::optional<Ent::Gen::ChildEntityPoolComponentGD> ChildEntityPoolComponentGD() const;
            Ent::Gen::ChildEntityPoolComponentGD addChildEntityPoolComponentGD() const;
            void removeChildEntityPoolComponentGD() const;
            std::optional<Ent::Gen::CinematicGD> CinematicGD() const;
            Ent::Gen::CinematicGD addCinematicGD() const;
            void removeCinematicGD() const;
            std::optional<Ent::Gen::ClothAnimationGD> ClothAnimationGD() const;
            Ent::Gen::ClothAnimationGD addClothAnimationGD() const;
            void removeClothAnimationGD() const;
            std::optional<Ent::Gen::ClothGD> ClothGD() const;
            Ent::Gen::ClothGD addClothGD() const;
            void removeClothGD() const;
            std::optional<Ent::Gen::ComponentWithProtoCodeGD> ComponentWithProtoCodeGD() const;
            Ent::Gen::ComponentWithProtoCodeGD addComponentWithProtoCodeGD() const;
            void removeComponentWithProtoCodeGD() const;
            std::optional<Ent::Gen::ConnectorGD> ConnectorGD() const;
            Ent::Gen::ConnectorGD addConnectorGD() const;
            void removeConnectorGD() const;
            std::optional<Ent::Gen::ConstrainedMoveGD> ConstrainedMoveGD() const;
            Ent::Gen::ConstrainedMoveGD addConstrainedMoveGD() const;
            void removeConstrainedMoveGD() const;
            std::optional<Ent::Gen::CreatureAIGD> CreatureAIGD() const;
            Ent::Gen::CreatureAIGD addCreatureAIGD() const;
            void removeCreatureAIGD() const;
            std::optional<Ent::Gen::CreatureGD> CreatureGD() const;
            Ent::Gen::CreatureGD addCreatureGD() const;
            void removeCreatureGD() const;
            std::optional<Ent::Gen::CreatureUIGD> CreatureUIGD() const;
            Ent::Gen::CreatureUIGD addCreatureUIGD() const;
            void removeCreatureUIGD() const;
            std::optional<Ent::Gen::CustomThumbnail> CustomThumbnail() const;
            Ent::Gen::CustomThumbnail addCustomThumbnail() const;
            void removeCustomThumbnail() const;
            std::optional<Ent::Gen::DebugGridGD> DebugGridGD() const;
            Ent::Gen::DebugGridGD addDebugGridGD() const;
            void removeDebugGridGD() const;
            std::optional<Ent::Gen::DistanceTriggerGD> DistanceTriggerGD() const;
            Ent::Gen::DistanceTriggerGD addDistanceTriggerGD() const;
            void removeDistanceTriggerGD() const;
            std::optional<Ent::Gen::DiveAttackGD> DiveAttackGD() const;
            Ent::Gen::DiveAttackGD addDiveAttackGD() const;
            void removeDiveAttackGD() const;
            std::optional<Ent::Gen::DummyComponentGD> DummyComponentGD() const;
            Ent::Gen::DummyComponentGD addDummyComponentGD() const;
            void removeDummyComponentGD() const;
            std::optional<Ent::Gen::EnergyCrookGD> EnergyCrookGD() const;
            Ent::Gen::EnergyCrookGD addEnergyCrookGD() const;
            void removeEnergyCrookGD() const;
            std::optional<Ent::Gen::EnergyDrainGD> EnergyDrainGD() const;
            Ent::Gen::EnergyDrainGD addEnergyDrainGD() const;
            void removeEnergyDrainGD() const;
            std::optional<Ent::Gen::EnergyNetworkListenerGD> EnergyNetworkListenerGD() const;
            Ent::Gen::EnergyNetworkListenerGD addEnergyNetworkListenerGD() const;
            void removeEnergyNetworkListenerGD() const;
            std::optional<Ent::Gen::EnergyPoolGD> EnergyPoolGD() const;
            Ent::Gen::EnergyPoolGD addEnergyPoolGD() const;
            void removeEnergyPoolGD() const;
            std::optional<Ent::Gen::EnergySideSwitcherGD> EnergySideSwitcherGD() const;
            Ent::Gen::EnergySideSwitcherGD addEnergySideSwitcherGD() const;
            void removeEnergySideSwitcherGD() const;
            std::optional<Ent::Gen::EnergySpoutGD> EnergySpoutGD() const;
            Ent::Gen::EnergySpoutGD addEnergySpoutGD() const;
            void removeEnergySpoutGD() const;
            std::optional<Ent::Gen::EnvStampGD> EnvStampGD() const;
            Ent::Gen::EnvStampGD addEnvStampGD() const;
            void removeEnvStampGD() const;
            std::optional<Ent::Gen::EventHandlerGD> EventHandlerGD() const;
            Ent::Gen::EventHandlerGD addEventHandlerGD() const;
            void removeEventHandlerGD() const;
            std::optional<Ent::Gen::EventTriggerGD> EventTriggerGD() const;
            Ent::Gen::EventTriggerGD addEventTriggerGD() const;
            void removeEventTriggerGD() const;
            std::optional<Ent::Gen::FightDistanceTriggerGD> FightDistanceTriggerGD() const;
            Ent::Gen::FightDistanceTriggerGD addFightDistanceTriggerGD() const;
            void removeFightDistanceTriggerGD() const;
            std::optional<Ent::Gen::FireSensorGD> FireSensorGD() const;
            Ent::Gen::FireSensorGD addFireSensorGD() const;
            void removeFireSensorGD() const;
            std::optional<Ent::Gen::FluidFXEntitySpawnerGD> FluidFXEntitySpawnerGD() const;
            Ent::Gen::FluidFXEntitySpawnerGD addFluidFXEntitySpawnerGD() const;
            void removeFluidFXEntitySpawnerGD() const;
            std::optional<Ent::Gen::FluidGD> FluidGD() const;
            Ent::Gen::FluidGD addFluidGD() const;
            void removeFluidGD() const;
            std::optional<Ent::Gen::FluidViewGD> FluidViewGD() const;
            Ent::Gen::FluidViewGD addFluidViewGD() const;
            void removeFluidViewGD() const;
            std::optional<Ent::Gen::FluidVolumeComponentGD> FluidVolumeComponentGD() const;
            Ent::Gen::FluidVolumeComponentGD addFluidVolumeComponentGD() const;
            void removeFluidVolumeComponentGD() const;
            std::optional<Ent::Gen::FurComponentGD> FurComponentGD() const;
            Ent::Gen::FurComponentGD addFurComponentGD() const;
            void removeFurComponentGD() const;
            std::optional<Ent::Gen::GameEffectSpawnerGD> GameEffectSpawnerGD() const;
            Ent::Gen::GameEffectSpawnerGD addGameEffectSpawnerGD() const;
            void removeGameEffectSpawnerGD() const;
            std::optional<Ent::Gen::GraspableGD> GraspableGD() const;
            Ent::Gen::GraspableGD addGraspableGD() const;
            void removeGraspableGD() const;
            std::optional<Ent::Gen::GrasperGD> GrasperGD() const;
            Ent::Gen::GrasperGD addGrasperGD() const;
            void removeGrasperGD() const;
            std::optional<Ent::Gen::GroundTypeSamplerGD> GroundTypeSamplerGD() const;
            Ent::Gen::GroundTypeSamplerGD addGroundTypeSamplerGD() const;
            void removeGroundTypeSamplerGD() const;
            std::optional<Ent::Gen::HealPumpGD> HealPumpGD() const;
            Ent::Gen::HealPumpGD addHealPumpGD() const;
            void removeHealPumpGD() const;
            std::optional<Ent::Gen::HealTriggerGD> HealTriggerGD() const;
            Ent::Gen::HealTriggerGD addHealTriggerGD() const;
            void removeHealTriggerGD() const;
            std::optional<Ent::Gen::HealerGD> HealerGD() const;
            Ent::Gen::HealerGD addHealerGD() const;
            void removeHealerGD() const;
            std::optional<Ent::Gen::HealthAreaGD> HealthAreaGD() const;
            Ent::Gen::HealthAreaGD addHealthAreaGD() const;
            void removeHealthAreaGD() const;
            std::optional<Ent::Gen::HeightMapComponentGD> HeightMapComponentGD() const;
            Ent::Gen::HeightMapComponentGD addHeightMapComponentGD() const;
            void removeHeightMapComponentGD() const;
            std::optional<Ent::Gen::HeightObj> HeightObj() const;
            Ent::Gen::HeightObj addHeightObj() const;
            void removeHeightObj() const;
            std::optional<Ent::Gen::HitTriggerGD> HitTriggerGD() const;
            Ent::Gen::HitTriggerGD addHitTriggerGD() const;
            void removeHitTriggerGD() const;
            std::optional<Ent::Gen::HotspotsGD> HotspotsGD() const;
            Ent::Gen::HotspotsGD addHotspotsGD() const;
            void removeHotspotsGD() const;
            std::optional<Ent::Gen::IncapacitateComponentGD> IncapacitateComponentGD() const;
            Ent::Gen::IncapacitateComponentGD addIncapacitateComponentGD() const;
            void removeIncapacitateComponentGD() const;
            std::optional<Ent::Gen::InfoboardRegistererGD> InfoboardRegistererGD() const;
            Ent::Gen::InfoboardRegistererGD addInfoboardRegistererGD() const;
            void removeInfoboardRegistererGD() const;
            std::optional<Ent::Gen::InteractableGPEGD> InteractableGPEGD() const;
            Ent::Gen::InteractableGPEGD addInteractableGPEGD() const;
            void removeInteractableGPEGD() const;
            std::optional<Ent::Gen::InteractorGD> InteractorGD() const;
            Ent::Gen::InteractorGD addInteractorGD() const;
            void removeInteractorGD() const;
            std::optional<Ent::Gen::InterestPointGD> InterestPointGD() const;
            Ent::Gen::InterestPointGD addInterestPointGD() const;
            void removeInterestPointGD() const;
            std::optional<Ent::Gen::InventoryGD> InventoryGD() const;
            Ent::Gen::InventoryGD addInventoryGD() const;
            void removeInventoryGD() const;
            std::optional<Ent::Gen::ItemHolderGD> ItemHolderGD() const;
            Ent::Gen::ItemHolderGD addItemHolderGD() const;
            void removeItemHolderGD() const;
            std::optional<Ent::Gen::LDPrimitive> LDPrimitive() const;
            Ent::Gen::LDPrimitive addLDPrimitive() const;
            void removeLDPrimitive() const;
            std::optional<Ent::Gen::LifeComponentGD> LifeComponentGD() const;
            Ent::Gen::LifeComponentGD addLifeComponentGD() const;
            void removeLifeComponentGD() const;
            std::optional<Ent::Gen::LightComponentGD> LightComponentGD() const;
            Ent::Gen::LightComponentGD addLightComponentGD() const;
            void removeLightComponentGD() const;
            std::optional<Ent::Gen::Mesh> Mesh() const;
            Ent::Gen::Mesh addMesh() const;
            void removeMesh() const;
            std::optional<Ent::Gen::MeshNavigationInfosGD> MeshNavigationInfosGD() const;
            Ent::Gen::MeshNavigationInfosGD addMeshNavigationInfosGD() const;
            void removeMeshNavigationInfosGD() const;
            std::optional<Ent::Gen::MissionHolderGD> MissionHolderGD() const;
            Ent::Gen::MissionHolderGD addMissionHolderGD() const;
            void removeMissionHolderGD() const;
            std::optional<Ent::Gen::MountIKControllerGD> MountIKControllerGD() const;
            Ent::Gen::MountIKControllerGD addMountIKControllerGD() const;
            void removeMountIKControllerGD() const;
            std::optional<Ent::Gen::MountableGD> MountableGD() const;
            Ent::Gen::MountableGD addMountableGD() const;
            void removeMountableGD() const;
            std::optional<Ent::Gen::MounterGD> MounterGD() const;
            Ent::Gen::MounterGD addMounterGD() const;
            void removeMounterGD() const;
            std::optional<Ent::Gen::MultiThumbnail> MultiThumbnail() const;
            Ent::Gen::MultiThumbnail addMultiThumbnail() const;
            void removeMultiThumbnail() const;
            std::optional<Ent::Gen::NavMeshActivatorGD> NavMeshActivatorGD() const;
            Ent::Gen::NavMeshActivatorGD addNavMeshActivatorGD() const;
            void removeNavMeshActivatorGD() const;
            std::optional<Ent::Gen::NavMeshStamperGD> NavMeshStamperGD() const;
            Ent::Gen::NavMeshStamperGD addNavMeshStamperGD() const;
            void removeNavMeshStamperGD() const;
            std::optional<Ent::Gen::NetGD> NetGD() const;
            Ent::Gen::NetGD addNetGD() const;
            void removeNetGD() const;
            std::optional<Ent::Gen::NetworkLink> NetworkLink() const;
            Ent::Gen::NetworkLink addNetworkLink() const;
            void removeNetworkLink() const;
            std::optional<Ent::Gen::NetworkNode> NetworkNode() const;
            Ent::Gen::NetworkNode addNetworkNode() const;
            void removeNetworkNode() const;
            std::optional<Ent::Gen::NotVisibleInSubscene> NotVisibleInSubscene() const;
            Ent::Gen::NotVisibleInSubscene addNotVisibleInSubscene() const;
            void removeNotVisibleInSubscene() const;
            std::optional<Ent::Gen::OutfitGD> OutfitGD() const;
            Ent::Gen::OutfitGD addOutfitGD() const;
            void removeOutfitGD() const;
            std::optional<Ent::Gen::OutfitWearerGD> OutfitWearerGD() const;
            Ent::Gen::OutfitWearerGD addOutfitWearerGD() const;
            void removeOutfitWearerGD() const;
            std::optional<Ent::Gen::PathFinderGD> PathFinderGD() const;
            Ent::Gen::PathFinderGD addPathFinderGD() const;
            void removePathFinderGD() const;
            std::optional<Ent::Gen::PerceivableGD> PerceivableGD() const;
            Ent::Gen::PerceivableGD addPerceivableGD() const;
            void removePerceivableGD() const;
            std::optional<Ent::Gen::PerceiverGD> PerceiverGD() const;
            Ent::Gen::PerceiverGD addPerceiverGD() const;
            void removePerceiverGD() const;
            std::optional<Ent::Gen::PhysicsDataGD> PhysicsDataGD() const;
            Ent::Gen::PhysicsDataGD addPhysicsDataGD() const;
            void removePhysicsDataGD() const;
            std::optional<Ent::Gen::PhysicsGD> PhysicsGD() const;
            Ent::Gen::PhysicsGD addPhysicsGD() const;
            void removePhysicsGD() const;
            std::optional<Ent::Gen::PhysicsImpactMakerGD> PhysicsImpactMakerGD() const;
            Ent::Gen::PhysicsImpactMakerGD addPhysicsImpactMakerGD() const;
            void removePhysicsImpactMakerGD() const;
            std::optional<Ent::Gen::PhysicsMeshDeformerGD> PhysicsMeshDeformerGD() const;
            Ent::Gen::PhysicsMeshDeformerGD addPhysicsMeshDeformerGD() const;
            void removePhysicsMeshDeformerGD() const;
            std::optional<Ent::Gen::PhysicsMeshProviderGD> PhysicsMeshProviderGD() const;
            Ent::Gen::PhysicsMeshProviderGD addPhysicsMeshProviderGD() const;
            void removePhysicsMeshProviderGD() const;
            std::optional<Ent::Gen::PhysicsTriggerGD> PhysicsTriggerGD() const;
            Ent::Gen::PhysicsTriggerGD addPhysicsTriggerGD() const;
            void removePhysicsTriggerGD() const;
            std::optional<Ent::Gen::PickableComponentGD> PickableComponentGD() const;
            Ent::Gen::PickableComponentGD addPickableComponentGD() const;
            void removePickableComponentGD() const;
            std::optional<Ent::Gen::PickableDistributorComponentGD> PickableDistributorComponentGD() const;
            Ent::Gen::PickableDistributorComponentGD addPickableDistributorComponentGD() const;
            void removePickableDistributorComponentGD() const;
            std::optional<Ent::Gen::PlayerComponentGD> PlayerComponentGD() const;
            Ent::Gen::PlayerComponentGD addPlayerComponentGD() const;
            void removePlayerComponentGD() const;
            std::optional<Ent::Gen::ProjectileGD> ProjectileGD() const;
            Ent::Gen::ProjectileGD addProjectileGD() const;
            void removeProjectileGD() const;
            std::optional<Ent::Gen::ProjectileShooterGD> ProjectileShooterGD() const;
            Ent::Gen::ProjectileShooterGD addProjectileShooterGD() const;
            void removeProjectileShooterGD() const;
            std::optional<Ent::Gen::ProtoComponentGD> ProtoComponentGD() const;
            Ent::Gen::ProtoComponentGD addProtoComponentGD() const;
            void removeProtoComponentGD() const;
            std::optional<Ent::Gen::QuickCreatureSwitchGD> QuickCreatureSwitchGD() const;
            Ent::Gen::QuickCreatureSwitchGD addQuickCreatureSwitchGD() const;
            void removeQuickCreatureSwitchGD() const;
            std::optional<Ent::Gen::RagdollGD> RagdollGD() const;
            Ent::Gen::RagdollGD addRagdollGD() const;
            void removeRagdollGD() const;
            std::optional<Ent::Gen::RegenSwitcherGD> RegenSwitcherGD() const;
            Ent::Gen::RegenSwitcherGD addRegenSwitcherGD() const;
            void removeRegenSwitcherGD() const;
            std::optional<Ent::Gen::RegenerableVegetationGD> RegenerableVegetationGD() const;
            Ent::Gen::RegenerableVegetationGD addRegenerableVegetationGD() const;
            void removeRegenerableVegetationGD() const;
            std::optional<Ent::Gen::RespawnPlaceGD> RespawnPlaceGD() const;
            Ent::Gen::RespawnPlaceGD addRespawnPlaceGD() const;
            void removeRespawnPlaceGD() const;
            std::optional<Ent::Gen::RespawnabilityGD> RespawnabilityGD() const;
            Ent::Gen::RespawnabilityGD addRespawnabilityGD() const;
            void removeRespawnabilityGD() const;
            std::optional<Ent::Gen::ReviveEnergyGD> ReviveEnergyGD() const;
            Ent::Gen::ReviveEnergyGD addReviveEnergyGD() const;
            void removeReviveEnergyGD() const;
            std::optional<Ent::Gen::ScriptComponentGD> ScriptComponentGD() const;
            Ent::Gen::ScriptComponentGD addScriptComponentGD() const;
            void removeScriptComponentGD() const;
            std::optional<Ent::Gen::SeedPatch> SeedPatch() const;
            Ent::Gen::SeedPatch addSeedPatch() const;
            void removeSeedPatch() const;
            std::optional<Ent::Gen::SensorControllerGD> SensorControllerGD() const;
            Ent::Gen::SensorControllerGD addSensorControllerGD() const;
            void removeSensorControllerGD() const;
            std::optional<Ent::Gen::SensorVoxelsGD> SensorVoxelsGD() const;
            Ent::Gen::SensorVoxelsGD addSensorVoxelsGD() const;
            void removeSensorVoxelsGD() const;
            std::optional<Ent::Gen::ShamanItemGD> ShamanItemGD() const;
            Ent::Gen::ShamanItemGD addShamanItemGD() const;
            void removeShamanItemGD() const;
            std::optional<Ent::Gen::ShamanVisionGD> ShamanVisionGD() const;
            Ent::Gen::ShamanVisionGD addShamanVisionGD() const;
            void removeShamanVisionGD() const;
            std::optional<Ent::Gen::ShapeshiftStatueGD> ShapeshiftStatueGD() const;
            Ent::Gen::ShapeshiftStatueGD addShapeshiftStatueGD() const;
            void removeShapeshiftStatueGD() const;
            std::optional<Ent::Gen::SideMapGateGD> SideMapGateGD() const;
            Ent::Gen::SideMapGateGD addSideMapGateGD() const;
            void removeSideMapGateGD() const;
            std::optional<Ent::Gen::SmoothScaleComponentGD> SmoothScaleComponentGD() const;
            Ent::Gen::SmoothScaleComponentGD addSmoothScaleComponentGD() const;
            void removeSmoothScaleComponentGD() const;
            std::optional<Ent::Gen::SoftCollisionGD> SoftCollisionGD() const;
            Ent::Gen::SoftCollisionGD addSoftCollisionGD() const;
            void removeSoftCollisionGD() const;
            std::optional<Ent::Gen::SoulRespawnOpportunityGD> SoulRespawnOpportunityGD() const;
            Ent::Gen::SoulRespawnOpportunityGD addSoulRespawnOpportunityGD() const;
            void removeSoulRespawnOpportunityGD() const;
            std::optional<Ent::Gen::SoundAreaGD> SoundAreaGD() const;
            Ent::Gen::SoundAreaGD addSoundAreaGD() const;
            void removeSoundAreaGD() const;
            std::optional<Ent::Gen::SoundEmitterGD> SoundEmitterGD() const;
            Ent::Gen::SoundEmitterGD addSoundEmitterGD() const;
            void removeSoundEmitterGD() const;
            std::optional<Ent::Gen::SoundOpportunityComponentGD> SoundOpportunityComponentGD() const;
            Ent::Gen::SoundOpportunityComponentGD addSoundOpportunityComponentGD() const;
            void removeSoundOpportunityComponentGD() const;
            std::optional<Ent::Gen::SpiritAnimalGD> SpiritAnimalGD() const;
            Ent::Gen::SpiritAnimalGD addSpiritAnimalGD() const;
            void removeSpiritAnimalGD() const;
            std::optional<Ent::Gen::SpiritAnimalShrineGD> SpiritAnimalShrineGD() const;
            Ent::Gen::SpiritAnimalShrineGD addSpiritAnimalShrineGD() const;
            void removeSpiritAnimalShrineGD() const;
            std::optional<Ent::Gen::SpiritAnimalsHolderGD> SpiritAnimalsHolderGD() const;
            Ent::Gen::SpiritAnimalsHolderGD addSpiritAnimalsHolderGD() const;
            void removeSpiritAnimalsHolderGD() const;
            std::optional<Ent::Gen::StaffVertebrasGD> StaffVertebrasGD() const;
            Ent::Gen::StaffVertebrasGD addStaffVertebrasGD() const;
            void removeStaffVertebrasGD() const;
            std::optional<Ent::Gen::StaticObjectGD> StaticObjectGD() const;
            Ent::Gen::StaticObjectGD addStaticObjectGD() const;
            void removeStaticObjectGD() const;
            std::optional<Ent::Gen::StickToTerrain> StickToTerrain() const;
            Ent::Gen::StickToTerrain addStickToTerrain() const;
            void removeStickToTerrain() const;
            std::optional<Ent::Gen::StreamableUnitGD> StreamableUnitGD() const;
            Ent::Gen::StreamableUnitGD addStreamableUnitGD() const;
            void removeStreamableUnitGD() const;
            std::optional<Ent::Gen::StreamingLocatorGD> StreamingLocatorGD() const;
            Ent::Gen::StreamingLocatorGD addStreamingLocatorGD() const;
            void removeStreamingLocatorGD() const;
            std::optional<Ent::Gen::SubScene> SubScene() const;
            Ent::Gen::SubScene addSubScene() const;
            void removeSubScene() const;
            std::optional<Ent::Gen::SystemicCreature> SystemicCreature() const;
            Ent::Gen::SystemicCreature addSystemicCreature() const;
            void removeSystemicCreature() const;
            std::optional<Ent::Gen::TeamGD> TeamGD() const;
            Ent::Gen::TeamGD addTeamGD() const;
            void removeTeamGD() const;
            std::optional<Ent::Gen::TerrainGD> TerrainGD() const;
            Ent::Gen::TerrainGD addTerrainGD() const;
            void removeTerrainGD() const;
            std::optional<Ent::Gen::TerrainSurfaceObject> TerrainSurfaceObject() const;
            Ent::Gen::TerrainSurfaceObject addTerrainSurfaceObject() const;
            void removeTerrainSurfaceObject() const;
            std::optional<Ent::Gen::TestArrays> TestArrays() const;
            Ent::Gen::TestArrays addTestArrays() const;
            void removeTestArrays() const;
            std::optional<Ent::Gen::TestCreature> TestCreature() const;
            Ent::Gen::TestCreature addTestCreature() const;
            void removeTestCreature() const;
            std::optional<Ent::Gen::TestDefaultValues> TestDefaultValues() const;
            Ent::Gen::TestDefaultValues addTestDefaultValues() const;
            void removeTestDefaultValues() const;
            std::optional<Ent::Gen::TestEntityRef> TestEntityRef() const;
            Ent::Gen::TestEntityRef addTestEntityRef() const;
            void removeTestEntityRef() const;
            std::optional<Ent::Gen::TestSetOfObject> TestSetOfObject() const;
            Ent::Gen::TestSetOfObject addTestSetOfObject() const;
            void removeTestSetOfObject() const;
            std::optional<Ent::Gen::TestTagsList> TestTagsList() const;
            Ent::Gen::TestTagsList addTestTagsList() const;
            void removeTestTagsList() const;
            std::optional<Ent::Gen::TestUnion> TestUnion() const;
            Ent::Gen::TestUnion addTestUnion() const;
            void removeTestUnion() const;
            std::optional<Ent::Gen::TransformGD> TransformGD() const;
            Ent::Gen::TransformGD addTransformGD() const;
            void removeTransformGD() const;
            std::optional<Ent::Gen::TriggerEventCameraGD> TriggerEventCameraGD() const;
            Ent::Gen::TriggerEventCameraGD addTriggerEventCameraGD() const;
            void removeTriggerEventCameraGD() const;
            std::optional<Ent::Gen::UnifiedPhysicsDataGD> UnifiedPhysicsDataGD() const;
            Ent::Gen::UnifiedPhysicsDataGD addUnifiedPhysicsDataGD() const;
            void removeUnifiedPhysicsDataGD() const;
            std::optional<Ent::Gen::UnitTestComponent> UnitTestComponent() const;
            Ent::Gen::UnitTestComponent addUnitTestComponent() const;
            void removeUnitTestComponent() const;
            std::optional<Ent::Gen::VelocityObstacleGD> VelocityObstacleGD() const;
            Ent::Gen::VelocityObstacleGD addVelocityObstacleGD() const;
            void removeVelocityObstacleGD() const;
            std::optional<Ent::Gen::VisualGD> VisualGD() const;
            Ent::Gen::VisualGD addVisualGD() const;
            void removeVisualGD() const;
            std::optional<Ent::Gen::VolumeConstraintGD> VolumeConstraintGD() const;
            Ent::Gen::VolumeConstraintGD addVolumeConstraintGD() const;
            void removeVolumeConstraintGD() const;
            std::optional<Ent::Gen::VoxelSimulationGD> VoxelSimulationGD() const;
            Ent::Gen::VoxelSimulationGD addVoxelSimulationGD() const;
            void removeVoxelSimulationGD() const;
            std::optional<Ent::Gen::WallRunGD> WallRunGD() const;
            Ent::Gen::WallRunGD addWallRunGD() const;
            void removeWallRunGD() const;
            std::optional<Ent::Gen::WildObject> WildObject() const;
            Ent::Gen::WildObject addWildObject() const;
            void removeWildObject() const;
        };

        struct GameEffect : HelperObject // Object
        {
            GameEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Duration() const;
            Ent::Gen::String Name() const;
            Ent::Gen::Float PerceptionDistance() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::RadiusChange RadiusChange() const;
            Ent::Gen::Float RadiusChangeDuration() const;
            Ent::Gen::Float RadiusStart() const;
            Ent::Gen::Float RadiusStop() const;
            Ent::Gen::Component Super() const;
            Ent::Gen::Float TimeBeforeStart() const;
            Ent::Gen::String _comment() const;
        };

        struct WindTurbulenceEffect : HelperObject // Object
        {
            WindTurbulenceEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "WindTurbulenceEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float BendStrength() const;
            Ent::Gen::Float GlobalStrength() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::Float TurbulenceStrength() const;
            Ent::Gen::Bool UseGlobalStrength() const;
            Ent::Gen::Float WindShakeStrength() const;
            Ent::Gen::WindTurbulenceType WindTurbulenceType() const;
            Ent::Gen::String _comment() const;
        };

        struct ShakeEffect : HelperObject // Object
        {
            ShakeEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ShakeEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DistanceAttenuation() const;
            Ent::Gen::Float Strength() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RepulseEffect : HelperObject // Object
        {
            RepulseEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RepulseEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ApplyOnTrees() const;
            Ent::Gen::Float DistanceAttenuation() const;
            Ent::Gen::Float Strength() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::String _comment() const;
        };

        struct RegenEffect : HelperObject // Object
        {
            RegenEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RegenEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EnergyValue EnergyValue() const;
            Ent::Gen::RegenField Field() const;
            Ent::Gen::Float InnerMultiplier() const;
            Ent::Gen::Float InnerRadius() const;
            Ent::Gen::Float Margin() const;
            Ent::Gen::Float OuterMultiplier() const;
            Ent::Gen::EnergySide State() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::Bool UseNewRegen() const;
            Ent::Gen::String _comment() const;
        };

        struct FollowerCallEffect : HelperObject // Object
        {
            FollowerCallEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FollowerCallEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String CallType() const;
            Ent::Gen::Bool QuickOrder() const;
            Ent::Gen::Specie Specie() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::String _comment() const;
        };

        struct FluidEffect : HelperObject // Object
        {
            FluidEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FluidEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool DisplayFX() const;
            Ent::Gen::EnergySide EnergySide() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::Float VolumePerSecond() const;
            Ent::Gen::String _comment() const;
        };

        struct CallForHelpEffect : HelperObject // Object
        {
            CallForHelpEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CallForHelpEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String CallType() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BeamEffect : HelperObject // Object
        {
            BeamEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BeamEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AlwaysActive() const;
            Ent::Gen::Bool AutoChose() const;
            Ent::Gen::Bool CheckForTrees() const;
            Ent::Gen::Bool EmittedByEnvironment() const;
            Ent::Gen::FreezeData FreezeData() const;
            Ent::Gen::Float Impact() const;
            Ent::Gen::Bool OneShot() const;
            Ent::Gen::Float Power() const;
            Ent::Gen::Float ProjectileShieldRadius() const;
            Ent::Gen::EnergySide Side() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BeamDetectionEffect : HelperObject // Object
        {
            BeamDetectionEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BeamDetectionEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::String _comment() const;
        };

        struct Components : UnionSetBase<Component> // union_set
        {
            Components(Ent::Node* _node)
                : UnionSetBase<Component>(_node)
            {
            }
            
            char const* getType() const;
            std::optional<Ent::Gen::AIContextGD> AIContextGD() const;
            Ent::Gen::AIContextGD addAIContextGD() const;
            void removeAIContextGD() const;
            std::optional<Ent::Gen::ActorGD> ActorGD() const;
            Ent::Gen::ActorGD addActorGD() const;
            void removeActorGD() const;
            std::optional<Ent::Gen::AnimationControllerGD> AnimationControllerGD() const;
            Ent::Gen::AnimationControllerGD addAnimationControllerGD() const;
            void removeAnimationControllerGD() const;
            std::optional<Ent::Gen::AnimationEventsGeneratorGD> AnimationEventsGeneratorGD() const;
            Ent::Gen::AnimationEventsGeneratorGD addAnimationEventsGeneratorGD() const;
            void removeAnimationEventsGeneratorGD() const;
            std::optional<Ent::Gen::AnimationGenericConstraintsGD> AnimationGenericConstraintsGD() const;
            Ent::Gen::AnimationGenericConstraintsGD addAnimationGenericConstraintsGD() const;
            void removeAnimationGenericConstraintsGD() const;
            std::optional<Ent::Gen::AnimationHitsConstraintsGD> AnimationHitsConstraintsGD() const;
            Ent::Gen::AnimationHitsConstraintsGD addAnimationHitsConstraintsGD() const;
            void removeAnimationHitsConstraintsGD() const;
            std::optional<Ent::Gen::AnimationLegsConstraintsGD> AnimationLegsConstraintsGD() const;
            Ent::Gen::AnimationLegsConstraintsGD addAnimationLegsConstraintsGD() const;
            void removeAnimationLegsConstraintsGD() const;
            std::optional<Ent::Gen::AnimationModelGD> AnimationModelGD() const;
            Ent::Gen::AnimationModelGD addAnimationModelGD() const;
            void removeAnimationModelGD() const;
            std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD> AnimationPhysicsChainConstraintsGD() const;
            Ent::Gen::AnimationPhysicsChainConstraintsGD addAnimationPhysicsChainConstraintsGD() const;
            void removeAnimationPhysicsChainConstraintsGD() const;
            std::optional<Ent::Gen::AnimationPlaylistGD> AnimationPlaylistGD() const;
            Ent::Gen::AnimationPlaylistGD addAnimationPlaylistGD() const;
            void removeAnimationPlaylistGD() const;
            std::optional<Ent::Gen::AnimationTailConstraintsGD> AnimationTailConstraintsGD() const;
            Ent::Gen::AnimationTailConstraintsGD addAnimationTailConstraintsGD() const;
            void removeAnimationTailConstraintsGD() const;
            std::optional<Ent::Gen::AnimationTransformDriverGD> AnimationTransformDriverGD() const;
            Ent::Gen::AnimationTransformDriverGD addAnimationTransformDriverGD() const;
            void removeAnimationTransformDriverGD() const;
            std::optional<Ent::Gen::AnimationTreeConstraintsGD> AnimationTreeConstraintsGD() const;
            Ent::Gen::AnimationTreeConstraintsGD addAnimationTreeConstraintsGD() const;
            void removeAnimationTreeConstraintsGD() const;
            std::optional<Ent::Gen::AssemblyGD> AssemblyGD() const;
            Ent::Gen::AssemblyGD addAssemblyGD() const;
            void removeAssemblyGD() const;
            std::optional<Ent::Gen::AttackComponentGD> AttackComponentGD() const;
            Ent::Gen::AttackComponentGD addAttackComponentGD() const;
            void removeAttackComponentGD() const;
            std::optional<Ent::Gen::AttackTriggerGD> AttackTriggerGD() const;
            Ent::Gen::AttackTriggerGD addAttackTriggerGD() const;
            void removeAttackTriggerGD() const;
            std::optional<Ent::Gen::BeamTargetGD> BeamTargetGD() const;
            Ent::Gen::BeamTargetGD addBeamTargetGD() const;
            void removeBeamTargetGD() const;
            std::optional<Ent::Gen::BittenGD> BittenGD() const;
            Ent::Gen::BittenGD addBittenGD() const;
            void removeBittenGD() const;
            std::optional<Ent::Gen::BoidsGD> BoidsGD() const;
            Ent::Gen::BoidsGD addBoidsGD() const;
            void removeBoidsGD() const;
            std::optional<Ent::Gen::BreakableGD> BreakableGD() const;
            Ent::Gen::BreakableGD addBreakableGD() const;
            void removeBreakableGD() const;
            std::optional<Ent::Gen::CameraDataGD> CameraDataGD() const;
            Ent::Gen::CameraDataGD addCameraDataGD() const;
            void removeCameraDataGD() const;
            std::optional<Ent::Gen::CameraSetterGD> CameraSetterGD() const;
            Ent::Gen::CameraSetterGD addCameraSetterGD() const;
            void removeCameraSetterGD() const;
            std::optional<Ent::Gen::CharacterControllerGD> CharacterControllerGD() const;
            Ent::Gen::CharacterControllerGD addCharacterControllerGD() const;
            void removeCharacterControllerGD() const;
            std::optional<Ent::Gen::CharacterPlatformGD> CharacterPlatformGD() const;
            Ent::Gen::CharacterPlatformGD addCharacterPlatformGD() const;
            void removeCharacterPlatformGD() const;
            std::optional<Ent::Gen::ChargedJumpGD> ChargedJumpGD() const;
            Ent::Gen::ChargedJumpGD addChargedJumpGD() const;
            void removeChargedJumpGD() const;
            std::optional<Ent::Gen::ChildEntityPoolComponentGD> ChildEntityPoolComponentGD() const;
            Ent::Gen::ChildEntityPoolComponentGD addChildEntityPoolComponentGD() const;
            void removeChildEntityPoolComponentGD() const;
            std::optional<Ent::Gen::CinematicGD> CinematicGD() const;
            Ent::Gen::CinematicGD addCinematicGD() const;
            void removeCinematicGD() const;
            std::optional<Ent::Gen::ClothAnimationGD> ClothAnimationGD() const;
            Ent::Gen::ClothAnimationGD addClothAnimationGD() const;
            void removeClothAnimationGD() const;
            std::optional<Ent::Gen::ClothGD> ClothGD() const;
            Ent::Gen::ClothGD addClothGD() const;
            void removeClothGD() const;
            std::optional<Ent::Gen::ComponentWithProtoCodeGD> ComponentWithProtoCodeGD() const;
            Ent::Gen::ComponentWithProtoCodeGD addComponentWithProtoCodeGD() const;
            void removeComponentWithProtoCodeGD() const;
            std::optional<Ent::Gen::ConnectorGD> ConnectorGD() const;
            Ent::Gen::ConnectorGD addConnectorGD() const;
            void removeConnectorGD() const;
            std::optional<Ent::Gen::ConstrainedMoveGD> ConstrainedMoveGD() const;
            Ent::Gen::ConstrainedMoveGD addConstrainedMoveGD() const;
            void removeConstrainedMoveGD() const;
            std::optional<Ent::Gen::CreatureAIGD> CreatureAIGD() const;
            Ent::Gen::CreatureAIGD addCreatureAIGD() const;
            void removeCreatureAIGD() const;
            std::optional<Ent::Gen::CreatureGD> CreatureGD() const;
            Ent::Gen::CreatureGD addCreatureGD() const;
            void removeCreatureGD() const;
            std::optional<Ent::Gen::CreatureUIGD> CreatureUIGD() const;
            Ent::Gen::CreatureUIGD addCreatureUIGD() const;
            void removeCreatureUIGD() const;
            std::optional<Ent::Gen::CustomThumbnail> CustomThumbnail() const;
            Ent::Gen::CustomThumbnail addCustomThumbnail() const;
            void removeCustomThumbnail() const;
            std::optional<Ent::Gen::DebugGridGD> DebugGridGD() const;
            Ent::Gen::DebugGridGD addDebugGridGD() const;
            void removeDebugGridGD() const;
            std::optional<Ent::Gen::DistanceTriggerGD> DistanceTriggerGD() const;
            Ent::Gen::DistanceTriggerGD addDistanceTriggerGD() const;
            void removeDistanceTriggerGD() const;
            std::optional<Ent::Gen::DiveAttackGD> DiveAttackGD() const;
            Ent::Gen::DiveAttackGD addDiveAttackGD() const;
            void removeDiveAttackGD() const;
            std::optional<Ent::Gen::DummyComponentGD> DummyComponentGD() const;
            Ent::Gen::DummyComponentGD addDummyComponentGD() const;
            void removeDummyComponentGD() const;
            std::optional<Ent::Gen::EnergyCrookGD> EnergyCrookGD() const;
            Ent::Gen::EnergyCrookGD addEnergyCrookGD() const;
            void removeEnergyCrookGD() const;
            std::optional<Ent::Gen::EnergyDrainGD> EnergyDrainGD() const;
            Ent::Gen::EnergyDrainGD addEnergyDrainGD() const;
            void removeEnergyDrainGD() const;
            std::optional<Ent::Gen::EnergyNetworkListenerGD> EnergyNetworkListenerGD() const;
            Ent::Gen::EnergyNetworkListenerGD addEnergyNetworkListenerGD() const;
            void removeEnergyNetworkListenerGD() const;
            std::optional<Ent::Gen::EnergyPoolGD> EnergyPoolGD() const;
            Ent::Gen::EnergyPoolGD addEnergyPoolGD() const;
            void removeEnergyPoolGD() const;
            std::optional<Ent::Gen::EnergySideSwitcherGD> EnergySideSwitcherGD() const;
            Ent::Gen::EnergySideSwitcherGD addEnergySideSwitcherGD() const;
            void removeEnergySideSwitcherGD() const;
            std::optional<Ent::Gen::EnergySpoutGD> EnergySpoutGD() const;
            Ent::Gen::EnergySpoutGD addEnergySpoutGD() const;
            void removeEnergySpoutGD() const;
            std::optional<Ent::Gen::EnvStampGD> EnvStampGD() const;
            Ent::Gen::EnvStampGD addEnvStampGD() const;
            void removeEnvStampGD() const;
            std::optional<Ent::Gen::EventHandlerGD> EventHandlerGD() const;
            Ent::Gen::EventHandlerGD addEventHandlerGD() const;
            void removeEventHandlerGD() const;
            std::optional<Ent::Gen::EventTriggerGD> EventTriggerGD() const;
            Ent::Gen::EventTriggerGD addEventTriggerGD() const;
            void removeEventTriggerGD() const;
            std::optional<Ent::Gen::FightDistanceTriggerGD> FightDistanceTriggerGD() const;
            Ent::Gen::FightDistanceTriggerGD addFightDistanceTriggerGD() const;
            void removeFightDistanceTriggerGD() const;
            std::optional<Ent::Gen::FireSensorGD> FireSensorGD() const;
            Ent::Gen::FireSensorGD addFireSensorGD() const;
            void removeFireSensorGD() const;
            std::optional<Ent::Gen::FluidFXEntitySpawnerGD> FluidFXEntitySpawnerGD() const;
            Ent::Gen::FluidFXEntitySpawnerGD addFluidFXEntitySpawnerGD() const;
            void removeFluidFXEntitySpawnerGD() const;
            std::optional<Ent::Gen::FluidGD> FluidGD() const;
            Ent::Gen::FluidGD addFluidGD() const;
            void removeFluidGD() const;
            std::optional<Ent::Gen::FluidViewGD> FluidViewGD() const;
            Ent::Gen::FluidViewGD addFluidViewGD() const;
            void removeFluidViewGD() const;
            std::optional<Ent::Gen::FluidVolumeComponentGD> FluidVolumeComponentGD() const;
            Ent::Gen::FluidVolumeComponentGD addFluidVolumeComponentGD() const;
            void removeFluidVolumeComponentGD() const;
            std::optional<Ent::Gen::FurComponentGD> FurComponentGD() const;
            Ent::Gen::FurComponentGD addFurComponentGD() const;
            void removeFurComponentGD() const;
            std::optional<Ent::Gen::GameEffectSpawnerGD> GameEffectSpawnerGD() const;
            Ent::Gen::GameEffectSpawnerGD addGameEffectSpawnerGD() const;
            void removeGameEffectSpawnerGD() const;
            std::optional<Ent::Gen::GraspableGD> GraspableGD() const;
            Ent::Gen::GraspableGD addGraspableGD() const;
            void removeGraspableGD() const;
            std::optional<Ent::Gen::GrasperGD> GrasperGD() const;
            Ent::Gen::GrasperGD addGrasperGD() const;
            void removeGrasperGD() const;
            std::optional<Ent::Gen::GroundTypeSamplerGD> GroundTypeSamplerGD() const;
            Ent::Gen::GroundTypeSamplerGD addGroundTypeSamplerGD() const;
            void removeGroundTypeSamplerGD() const;
            std::optional<Ent::Gen::HealPumpGD> HealPumpGD() const;
            Ent::Gen::HealPumpGD addHealPumpGD() const;
            void removeHealPumpGD() const;
            std::optional<Ent::Gen::HealTriggerGD> HealTriggerGD() const;
            Ent::Gen::HealTriggerGD addHealTriggerGD() const;
            void removeHealTriggerGD() const;
            std::optional<Ent::Gen::HealerGD> HealerGD() const;
            Ent::Gen::HealerGD addHealerGD() const;
            void removeHealerGD() const;
            std::optional<Ent::Gen::HealthAreaGD> HealthAreaGD() const;
            Ent::Gen::HealthAreaGD addHealthAreaGD() const;
            void removeHealthAreaGD() const;
            std::optional<Ent::Gen::HeightMapComponentGD> HeightMapComponentGD() const;
            Ent::Gen::HeightMapComponentGD addHeightMapComponentGD() const;
            void removeHeightMapComponentGD() const;
            std::optional<Ent::Gen::HeightObj> HeightObj() const;
            Ent::Gen::HeightObj addHeightObj() const;
            void removeHeightObj() const;
            std::optional<Ent::Gen::HitTriggerGD> HitTriggerGD() const;
            Ent::Gen::HitTriggerGD addHitTriggerGD() const;
            void removeHitTriggerGD() const;
            std::optional<Ent::Gen::HotspotsGD> HotspotsGD() const;
            Ent::Gen::HotspotsGD addHotspotsGD() const;
            void removeHotspotsGD() const;
            std::optional<Ent::Gen::IncapacitateComponentGD> IncapacitateComponentGD() const;
            Ent::Gen::IncapacitateComponentGD addIncapacitateComponentGD() const;
            void removeIncapacitateComponentGD() const;
            std::optional<Ent::Gen::InfoboardRegistererGD> InfoboardRegistererGD() const;
            Ent::Gen::InfoboardRegistererGD addInfoboardRegistererGD() const;
            void removeInfoboardRegistererGD() const;
            std::optional<Ent::Gen::InteractableGPEGD> InteractableGPEGD() const;
            Ent::Gen::InteractableGPEGD addInteractableGPEGD() const;
            void removeInteractableGPEGD() const;
            std::optional<Ent::Gen::InteractorGD> InteractorGD() const;
            Ent::Gen::InteractorGD addInteractorGD() const;
            void removeInteractorGD() const;
            std::optional<Ent::Gen::InterestPointGD> InterestPointGD() const;
            Ent::Gen::InterestPointGD addInterestPointGD() const;
            void removeInterestPointGD() const;
            std::optional<Ent::Gen::InventoryGD> InventoryGD() const;
            Ent::Gen::InventoryGD addInventoryGD() const;
            void removeInventoryGD() const;
            std::optional<Ent::Gen::ItemHolderGD> ItemHolderGD() const;
            Ent::Gen::ItemHolderGD addItemHolderGD() const;
            void removeItemHolderGD() const;
            std::optional<Ent::Gen::LDPrimitive> LDPrimitive() const;
            Ent::Gen::LDPrimitive addLDPrimitive() const;
            void removeLDPrimitive() const;
            std::optional<Ent::Gen::LifeComponentGD> LifeComponentGD() const;
            Ent::Gen::LifeComponentGD addLifeComponentGD() const;
            void removeLifeComponentGD() const;
            std::optional<Ent::Gen::LightComponentGD> LightComponentGD() const;
            Ent::Gen::LightComponentGD addLightComponentGD() const;
            void removeLightComponentGD() const;
            std::optional<Ent::Gen::Mesh> Mesh() const;
            Ent::Gen::Mesh addMesh() const;
            void removeMesh() const;
            std::optional<Ent::Gen::MeshNavigationInfosGD> MeshNavigationInfosGD() const;
            Ent::Gen::MeshNavigationInfosGD addMeshNavigationInfosGD() const;
            void removeMeshNavigationInfosGD() const;
            std::optional<Ent::Gen::MissionHolderGD> MissionHolderGD() const;
            Ent::Gen::MissionHolderGD addMissionHolderGD() const;
            void removeMissionHolderGD() const;
            std::optional<Ent::Gen::MountIKControllerGD> MountIKControllerGD() const;
            Ent::Gen::MountIKControllerGD addMountIKControllerGD() const;
            void removeMountIKControllerGD() const;
            std::optional<Ent::Gen::MountableGD> MountableGD() const;
            Ent::Gen::MountableGD addMountableGD() const;
            void removeMountableGD() const;
            std::optional<Ent::Gen::MounterGD> MounterGD() const;
            Ent::Gen::MounterGD addMounterGD() const;
            void removeMounterGD() const;
            std::optional<Ent::Gen::MultiThumbnail> MultiThumbnail() const;
            Ent::Gen::MultiThumbnail addMultiThumbnail() const;
            void removeMultiThumbnail() const;
            std::optional<Ent::Gen::NavMeshActivatorGD> NavMeshActivatorGD() const;
            Ent::Gen::NavMeshActivatorGD addNavMeshActivatorGD() const;
            void removeNavMeshActivatorGD() const;
            std::optional<Ent::Gen::NavMeshStamperGD> NavMeshStamperGD() const;
            Ent::Gen::NavMeshStamperGD addNavMeshStamperGD() const;
            void removeNavMeshStamperGD() const;
            std::optional<Ent::Gen::NetGD> NetGD() const;
            Ent::Gen::NetGD addNetGD() const;
            void removeNetGD() const;
            std::optional<Ent::Gen::NetworkLink> NetworkLink() const;
            Ent::Gen::NetworkLink addNetworkLink() const;
            void removeNetworkLink() const;
            std::optional<Ent::Gen::NetworkNode> NetworkNode() const;
            Ent::Gen::NetworkNode addNetworkNode() const;
            void removeNetworkNode() const;
            std::optional<Ent::Gen::NotVisibleInSubscene> NotVisibleInSubscene() const;
            Ent::Gen::NotVisibleInSubscene addNotVisibleInSubscene() const;
            void removeNotVisibleInSubscene() const;
            std::optional<Ent::Gen::OutfitGD> OutfitGD() const;
            Ent::Gen::OutfitGD addOutfitGD() const;
            void removeOutfitGD() const;
            std::optional<Ent::Gen::OutfitWearerGD> OutfitWearerGD() const;
            Ent::Gen::OutfitWearerGD addOutfitWearerGD() const;
            void removeOutfitWearerGD() const;
            std::optional<Ent::Gen::PathFinderGD> PathFinderGD() const;
            Ent::Gen::PathFinderGD addPathFinderGD() const;
            void removePathFinderGD() const;
            std::optional<Ent::Gen::PerceivableGD> PerceivableGD() const;
            Ent::Gen::PerceivableGD addPerceivableGD() const;
            void removePerceivableGD() const;
            std::optional<Ent::Gen::PerceiverGD> PerceiverGD() const;
            Ent::Gen::PerceiverGD addPerceiverGD() const;
            void removePerceiverGD() const;
            std::optional<Ent::Gen::PhysicsDataGD> PhysicsDataGD() const;
            Ent::Gen::PhysicsDataGD addPhysicsDataGD() const;
            void removePhysicsDataGD() const;
            std::optional<Ent::Gen::PhysicsGD> PhysicsGD() const;
            Ent::Gen::PhysicsGD addPhysicsGD() const;
            void removePhysicsGD() const;
            std::optional<Ent::Gen::PhysicsImpactMakerGD> PhysicsImpactMakerGD() const;
            Ent::Gen::PhysicsImpactMakerGD addPhysicsImpactMakerGD() const;
            void removePhysicsImpactMakerGD() const;
            std::optional<Ent::Gen::PhysicsMeshDeformerGD> PhysicsMeshDeformerGD() const;
            Ent::Gen::PhysicsMeshDeformerGD addPhysicsMeshDeformerGD() const;
            void removePhysicsMeshDeformerGD() const;
            std::optional<Ent::Gen::PhysicsMeshProviderGD> PhysicsMeshProviderGD() const;
            Ent::Gen::PhysicsMeshProviderGD addPhysicsMeshProviderGD() const;
            void removePhysicsMeshProviderGD() const;
            std::optional<Ent::Gen::PhysicsTriggerGD> PhysicsTriggerGD() const;
            Ent::Gen::PhysicsTriggerGD addPhysicsTriggerGD() const;
            void removePhysicsTriggerGD() const;
            std::optional<Ent::Gen::PickableComponentGD> PickableComponentGD() const;
            Ent::Gen::PickableComponentGD addPickableComponentGD() const;
            void removePickableComponentGD() const;
            std::optional<Ent::Gen::PickableDistributorComponentGD> PickableDistributorComponentGD() const;
            Ent::Gen::PickableDistributorComponentGD addPickableDistributorComponentGD() const;
            void removePickableDistributorComponentGD() const;
            std::optional<Ent::Gen::PlayerComponentGD> PlayerComponentGD() const;
            Ent::Gen::PlayerComponentGD addPlayerComponentGD() const;
            void removePlayerComponentGD() const;
            std::optional<Ent::Gen::ProjectileGD> ProjectileGD() const;
            Ent::Gen::ProjectileGD addProjectileGD() const;
            void removeProjectileGD() const;
            std::optional<Ent::Gen::ProjectileShooterGD> ProjectileShooterGD() const;
            Ent::Gen::ProjectileShooterGD addProjectileShooterGD() const;
            void removeProjectileShooterGD() const;
            std::optional<Ent::Gen::ProtoComponentGD> ProtoComponentGD() const;
            Ent::Gen::ProtoComponentGD addProtoComponentGD() const;
            void removeProtoComponentGD() const;
            std::optional<Ent::Gen::QuickCreatureSwitchGD> QuickCreatureSwitchGD() const;
            Ent::Gen::QuickCreatureSwitchGD addQuickCreatureSwitchGD() const;
            void removeQuickCreatureSwitchGD() const;
            std::optional<Ent::Gen::RagdollGD> RagdollGD() const;
            Ent::Gen::RagdollGD addRagdollGD() const;
            void removeRagdollGD() const;
            std::optional<Ent::Gen::RegenSwitcherGD> RegenSwitcherGD() const;
            Ent::Gen::RegenSwitcherGD addRegenSwitcherGD() const;
            void removeRegenSwitcherGD() const;
            std::optional<Ent::Gen::RegenerableVegetationGD> RegenerableVegetationGD() const;
            Ent::Gen::RegenerableVegetationGD addRegenerableVegetationGD() const;
            void removeRegenerableVegetationGD() const;
            std::optional<Ent::Gen::RespawnPlaceGD> RespawnPlaceGD() const;
            Ent::Gen::RespawnPlaceGD addRespawnPlaceGD() const;
            void removeRespawnPlaceGD() const;
            std::optional<Ent::Gen::RespawnabilityGD> RespawnabilityGD() const;
            Ent::Gen::RespawnabilityGD addRespawnabilityGD() const;
            void removeRespawnabilityGD() const;
            std::optional<Ent::Gen::ReviveEnergyGD> ReviveEnergyGD() const;
            Ent::Gen::ReviveEnergyGD addReviveEnergyGD() const;
            void removeReviveEnergyGD() const;
            std::optional<Ent::Gen::ScriptComponentGD> ScriptComponentGD() const;
            Ent::Gen::ScriptComponentGD addScriptComponentGD() const;
            void removeScriptComponentGD() const;
            std::optional<Ent::Gen::SeedPatch> SeedPatch() const;
            Ent::Gen::SeedPatch addSeedPatch() const;
            void removeSeedPatch() const;
            std::optional<Ent::Gen::SensorControllerGD> SensorControllerGD() const;
            Ent::Gen::SensorControllerGD addSensorControllerGD() const;
            void removeSensorControllerGD() const;
            std::optional<Ent::Gen::SensorVoxelsGD> SensorVoxelsGD() const;
            Ent::Gen::SensorVoxelsGD addSensorVoxelsGD() const;
            void removeSensorVoxelsGD() const;
            std::optional<Ent::Gen::ShamanItemGD> ShamanItemGD() const;
            Ent::Gen::ShamanItemGD addShamanItemGD() const;
            void removeShamanItemGD() const;
            std::optional<Ent::Gen::ShamanVisionGD> ShamanVisionGD() const;
            Ent::Gen::ShamanVisionGD addShamanVisionGD() const;
            void removeShamanVisionGD() const;
            std::optional<Ent::Gen::ShapeshiftStatueGD> ShapeshiftStatueGD() const;
            Ent::Gen::ShapeshiftStatueGD addShapeshiftStatueGD() const;
            void removeShapeshiftStatueGD() const;
            std::optional<Ent::Gen::SideMapGateGD> SideMapGateGD() const;
            Ent::Gen::SideMapGateGD addSideMapGateGD() const;
            void removeSideMapGateGD() const;
            std::optional<Ent::Gen::SmoothScaleComponentGD> SmoothScaleComponentGD() const;
            Ent::Gen::SmoothScaleComponentGD addSmoothScaleComponentGD() const;
            void removeSmoothScaleComponentGD() const;
            std::optional<Ent::Gen::SoftCollisionGD> SoftCollisionGD() const;
            Ent::Gen::SoftCollisionGD addSoftCollisionGD() const;
            void removeSoftCollisionGD() const;
            std::optional<Ent::Gen::SoulRespawnOpportunityGD> SoulRespawnOpportunityGD() const;
            Ent::Gen::SoulRespawnOpportunityGD addSoulRespawnOpportunityGD() const;
            void removeSoulRespawnOpportunityGD() const;
            std::optional<Ent::Gen::SoundAreaGD> SoundAreaGD() const;
            Ent::Gen::SoundAreaGD addSoundAreaGD() const;
            void removeSoundAreaGD() const;
            std::optional<Ent::Gen::SoundEmitterGD> SoundEmitterGD() const;
            Ent::Gen::SoundEmitterGD addSoundEmitterGD() const;
            void removeSoundEmitterGD() const;
            std::optional<Ent::Gen::SoundOpportunityComponentGD> SoundOpportunityComponentGD() const;
            Ent::Gen::SoundOpportunityComponentGD addSoundOpportunityComponentGD() const;
            void removeSoundOpportunityComponentGD() const;
            std::optional<Ent::Gen::SpiritAnimalGD> SpiritAnimalGD() const;
            Ent::Gen::SpiritAnimalGD addSpiritAnimalGD() const;
            void removeSpiritAnimalGD() const;
            std::optional<Ent::Gen::SpiritAnimalShrineGD> SpiritAnimalShrineGD() const;
            Ent::Gen::SpiritAnimalShrineGD addSpiritAnimalShrineGD() const;
            void removeSpiritAnimalShrineGD() const;
            std::optional<Ent::Gen::SpiritAnimalsHolderGD> SpiritAnimalsHolderGD() const;
            Ent::Gen::SpiritAnimalsHolderGD addSpiritAnimalsHolderGD() const;
            void removeSpiritAnimalsHolderGD() const;
            std::optional<Ent::Gen::StaffVertebrasGD> StaffVertebrasGD() const;
            Ent::Gen::StaffVertebrasGD addStaffVertebrasGD() const;
            void removeStaffVertebrasGD() const;
            std::optional<Ent::Gen::StaticObjectGD> StaticObjectGD() const;
            Ent::Gen::StaticObjectGD addStaticObjectGD() const;
            void removeStaticObjectGD() const;
            std::optional<Ent::Gen::StickToTerrain> StickToTerrain() const;
            Ent::Gen::StickToTerrain addStickToTerrain() const;
            void removeStickToTerrain() const;
            std::optional<Ent::Gen::StreamableUnitGD> StreamableUnitGD() const;
            Ent::Gen::StreamableUnitGD addStreamableUnitGD() const;
            void removeStreamableUnitGD() const;
            std::optional<Ent::Gen::StreamingLocatorGD> StreamingLocatorGD() const;
            Ent::Gen::StreamingLocatorGD addStreamingLocatorGD() const;
            void removeStreamingLocatorGD() const;
            std::optional<Ent::Gen::SubScene> SubScene() const;
            Ent::Gen::SubScene addSubScene() const;
            void removeSubScene() const;
            std::optional<Ent::Gen::SystemicCreature> SystemicCreature() const;
            Ent::Gen::SystemicCreature addSystemicCreature() const;
            void removeSystemicCreature() const;
            std::optional<Ent::Gen::TeamGD> TeamGD() const;
            Ent::Gen::TeamGD addTeamGD() const;
            void removeTeamGD() const;
            std::optional<Ent::Gen::TerrainGD> TerrainGD() const;
            Ent::Gen::TerrainGD addTerrainGD() const;
            void removeTerrainGD() const;
            std::optional<Ent::Gen::TerrainSurfaceObject> TerrainSurfaceObject() const;
            Ent::Gen::TerrainSurfaceObject addTerrainSurfaceObject() const;
            void removeTerrainSurfaceObject() const;
            std::optional<Ent::Gen::TestArrays> TestArrays() const;
            Ent::Gen::TestArrays addTestArrays() const;
            void removeTestArrays() const;
            std::optional<Ent::Gen::TestCreature> TestCreature() const;
            Ent::Gen::TestCreature addTestCreature() const;
            void removeTestCreature() const;
            std::optional<Ent::Gen::TestDefaultValues> TestDefaultValues() const;
            Ent::Gen::TestDefaultValues addTestDefaultValues() const;
            void removeTestDefaultValues() const;
            std::optional<Ent::Gen::TestEntityRef> TestEntityRef() const;
            Ent::Gen::TestEntityRef addTestEntityRef() const;
            void removeTestEntityRef() const;
            std::optional<Ent::Gen::TestSetOfObject> TestSetOfObject() const;
            Ent::Gen::TestSetOfObject addTestSetOfObject() const;
            void removeTestSetOfObject() const;
            std::optional<Ent::Gen::TestTagsList> TestTagsList() const;
            Ent::Gen::TestTagsList addTestTagsList() const;
            void removeTestTagsList() const;
            std::optional<Ent::Gen::TestUnion> TestUnion() const;
            Ent::Gen::TestUnion addTestUnion() const;
            void removeTestUnion() const;
            std::optional<Ent::Gen::TransformGD> TransformGD() const;
            Ent::Gen::TransformGD addTransformGD() const;
            void removeTransformGD() const;
            std::optional<Ent::Gen::TriggerEventCameraGD> TriggerEventCameraGD() const;
            Ent::Gen::TriggerEventCameraGD addTriggerEventCameraGD() const;
            void removeTriggerEventCameraGD() const;
            std::optional<Ent::Gen::UnifiedPhysicsDataGD> UnifiedPhysicsDataGD() const;
            Ent::Gen::UnifiedPhysicsDataGD addUnifiedPhysicsDataGD() const;
            void removeUnifiedPhysicsDataGD() const;
            std::optional<Ent::Gen::UnitTestComponent> UnitTestComponent() const;
            Ent::Gen::UnitTestComponent addUnitTestComponent() const;
            void removeUnitTestComponent() const;
            std::optional<Ent::Gen::VelocityObstacleGD> VelocityObstacleGD() const;
            Ent::Gen::VelocityObstacleGD addVelocityObstacleGD() const;
            void removeVelocityObstacleGD() const;
            std::optional<Ent::Gen::VisualGD> VisualGD() const;
            Ent::Gen::VisualGD addVisualGD() const;
            void removeVisualGD() const;
            std::optional<Ent::Gen::VolumeConstraintGD> VolumeConstraintGD() const;
            Ent::Gen::VolumeConstraintGD addVolumeConstraintGD() const;
            void removeVolumeConstraintGD() const;
            std::optional<Ent::Gen::VoxelSimulationGD> VoxelSimulationGD() const;
            Ent::Gen::VoxelSimulationGD addVoxelSimulationGD() const;
            void removeVoxelSimulationGD() const;
            std::optional<Ent::Gen::WallRunGD> WallRunGD() const;
            Ent::Gen::WallRunGD addWallRunGD() const;
            void removeWallRunGD() const;
            std::optional<Ent::Gen::WildObject> WildObject() const;
            Ent::Gen::WildObject addWildObject() const;
            void removeWildObject() const;
        };


        struct UIMessage : HelperObject // Object
        {
            UIMessage(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "UIMessage";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Color Color() const;
            Ent::Gen::Float Duration() const;
            Ent::Gen::String Icon() const;
            Ent::Gen::Vector2 ScreenPosition() const;
            Ent::Gen::String Text() const;
            Ent::Gen::Float TextScale() const;
            Ent::Gen::String _comment() const;
        };

        struct UIManager : HelperObject // Object
        {
            UIManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "UIManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float BarAlpha() const;
            Ent::Gen::Float BarHeight() const;
            Ent::Gen::Float BarWidth() const;
            Ent::Gen::String BlankMaterialPath() const;
            Ent::Gen::Bool EnableReticle() const;
            Ent::Gen::Bool EnableReticleLock() const;
            Ent::Gen::String Font() const;
            Ent::Gen::String HaloBigGRC() const;
            Ent::Gen::String HaloSmallGRC() const;
            Array<Ent::Gen::UIMessage> LaunchedMessages() const;
            Ent::Gen::UIMessage LaunchedSceneMessage() const;
            Ent::Gen::Bool ShowFoodBar() const;
            Ent::Gen::Bool ShowLifeBar() const;
            Ent::Gen::Bool ShowOxygenBar() const;
            Ent::Gen::Bool ShowTempBar() const;
            Ent::Gen::Bool ShowThirstBar() const;
            Ent::Gen::Bool ShowTiredBar() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct SoundManager : HelperObject // Object
        {
            SoundManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SoundManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AmbienceProbeLayerAttenuation() const;
            Ent::Gen::Int AmbienceProbeLayerCount() const;
            Ent::Gen::Float AmbienceProbeLayerSpacing() const;
            Ent::Gen::Int AmbienceProbePerLayerCount() const;
            Ent::Gen::Map<char const*, Ent::Gen::String> AmbienceTagMapping() const;
            Ent::Gen::SoundManager_BiomeSoundBank BiomeSoundBank() const;
            Ent::Gen::Float CallAnswerDelayMax() const;
            Ent::Gen::Float CallAnswerDelayMin() const;
            Ent::Gen::Float CallDistance() const;
            Ent::Gen::Map<StyleModeEnum, Ent::Gen::String> ClassStyleToHitActive() const;
            Array<Ent::Gen::CreatureTypeData> CreatureType() const;
            Ent::Gen::Bool DisplayListener() const;
            PrimArray<Ent::Gen::String> EchoEntityNames() const;
            Ent::Gen::Bool Enabled() const;
            PrimArray<Ent::Gen::String> GroundSFX() const;
            Ent::Gen::String GroundTypeWater() const;
            Ent::Gen::String GroundTypeWaterDeep() const;
            Ent::Gen::String GroundTypeWaterPuddle() const;
            Array<Ent::Gen::GroundTypeData> GroundTypes() const;
            Ent::Gen::Float HitIntensityHigh() const;
            Ent::Gen::Float HitIntensityLow() const;
            Ent::Gen::String InWaterEvent() const;
            Ent::Gen::Float ListenerDistanceFromPlayer() const;
            Ent::Gen::Bool ListenerOnFreeCam() const;
            Ent::Gen::ScaleConverter OcclusionPlayerSpeedInfluenceSettings() const;
            Ent::Gen::String OutWaterEvent() const;
            Ent::Gen::String RTPC_3DFrontBack() const;
            Ent::Gen::String RTPC_3DLeftRight() const;
            Ent::Gen::String RTPC_AbsoluteHeight() const;
            Ent::Gen::String RTPC_AmbSDFDistance() const;
            Ent::Gen::String RTPC_AmbientRegenLevel() const;
            Ent::Gen::String RTPC_AngleToListener() const;
            Ent::Gen::String RTPC_BoidLeavesCount() const;
            Ent::Gen::String RTPC_CreatureType() const;
            Ent::Gen::String RTPC_DayHour() const;
            Ent::Gen::String RTPC_Distance() const;
            Ent::Gen::String RTPC_DreamFireDistance() const;
            Ent::Gen::String RTPC_EntityAttackVolume() const;
            Ent::Gen::String RTPC_EntityDoppler() const;
            Ent::Gen::String RTPC_EntityHitIntensity() const;
            Ent::Gen::String RTPC_EntityHitVolume() const;
            Ent::Gen::String RTPC_EntityNodeRegen() const;
            Ent::Gen::String RTPC_EntityPitch() const;
            Ent::Gen::String RTPC_EntityRunDuration() const;
            Ent::Gen::String RTPC_EntityScale() const;
            Ent::Gen::String RTPC_EntityShamanVisiblity() const;
            Ent::Gen::String RTPC_EntitySpeed() const;
            Ent::Gen::String RTPC_FernProximity() const;
            Ent::Gen::String RTPC_FlowersProximity() const;
            Ent::Gen::String RTPC_Fx_Speed() const;
            Ent::Gen::String RTPC_HunterDistance() const;
            Ent::Gen::String RTPC_LocateClosestEntity() const;
            Ent::Gen::String RTPC_LocateEntityPan() const;
            Ent::Gen::String RTPC_OuterToInnerProximityEdges() const;
            Ent::Gen::String RTPC_PCEnergy() const;
            Ent::Gen::String RTPC_PCLife() const;
            Ent::Gen::String RTPC_PCScale() const;
            Ent::Gen::String RTPC_PCSpeed() const;
            Ent::Gen::String RTPC_PcNPC() const;
            Ent::Gen::String RTPC_PlayerAbsoluteHeight() const;
            Ent::Gen::String RTPC_PlayerAcceleration() const;
            Ent::Gen::String RTPC_PlayerRelativeHeight() const;
            Ent::Gen::String RTPC_Progress() const;
            Ent::Gen::String RTPC_RainIntensity() const;
            Ent::Gen::String RTPC_RelativeHeight() const;
            Ent::Gen::String RTPC_StormDistance() const;
            Ent::Gen::String RTPC_StormIntensity() const;
            Ent::Gen::String RTPC_SwampProximity() const;
            Ent::Gen::String RTPC_UnderwaterCameraActivator() const;
            Ent::Gen::String RTPC_UnderwaterDepth() const;
            Ent::Gen::Float RainLevelStart() const;
            Ent::Gen::SoundOpportunitiesConfig SoundOpportunitiesConfig() const;
            Ent::Gen::String SoundTagDataFile() const;
            Ent::Gen::String Sound_GameEntity_Stop_All() const;
            Ent::Gen::String Sound_GameObject_Dial_Stop() const;
            Ent::Gen::String Sound_Game_Pause_All() const;
            Ent::Gen::String Sound_Game_Resume_All() const;
            Ent::Gen::String SoundbankEventDataFile() const;
            Ent::Gen::Map<SpecieEnum, Ent::Gen::String> SpeciesToHitActive() const;
            Ent::Gen::String StateId_MainBiomeType() const;
            Ent::Gen::String StateId_RainLevel() const;
            Ent::Gen::String State_NoRain() const;
            Ent::Gen::String State_Rain() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String SwitchId_Appeau() const;
            Ent::Gen::String SwitchId_EntityState() const;
            Ent::Gen::String SwitchId_GiveOrder_Tone() const;
            Ent::Gen::String SwitchId_GiveOrder_Type() const;
            Ent::Gen::String SwitchId_GroundType() const;
            Ent::Gen::String SwitchId_Hit_Active() const;
            Ent::Gen::String SwitchId_Hit_Intensity() const;
            Ent::Gen::String SwitchId_Hit_Style() const;
            Ent::Gen::String SwitchId_Level() const;
            Ent::Gen::String SwitchId_OutfitInteraction() const;
            Ent::Gen::String SwitchId_VegetType() const;
            Ent::Gen::String SwitchState_EntityState_Attack() const;
            Ent::Gen::String SwitchState_EntityState_Cold() const;
            Ent::Gen::String SwitchState_EntityState_Defend() const;
            Ent::Gen::String SwitchState_EntityState_Examine() const;
            Ent::Gen::String SwitchState_EntityState_Flee() const;
            Ent::Gen::String SwitchState_EntityState_Follow() const;
            Ent::Gen::String SwitchState_EntityState_Hungry() const;
            Ent::Gen::String SwitchState_EntityState_Hunt() const;
            Ent::Gen::String SwitchState_EntityState_Idle() const;
            Ent::Gen::String SwitchState_EntityState_Protect() const;
            Ent::Gen::String SwitchState_EntityState_Sleep() const;
            Ent::Gen::String SwitchState_EntityState_Thirst() const;
            Ent::Gen::String SwitchState_EntityState_Threat() const;
            Ent::Gen::String SwitchState_EntityState_Wait() const;
            Ent::Gen::String SwitchState_GiveOrder_Follow() const;
            Ent::Gen::String SwitchState_GiveOrder_Insistent() const;
            Ent::Gen::String SwitchState_GiveOrder_Normal() const;
            Ent::Gen::String SwitchState_GiveOrder_Wait() const;
            Ent::Gen::String SwitchState_Level_High() const;
            Ent::Gen::String SwitchState_Level_Low() const;
            Ent::Gen::String SwitchState_Level_Medium() const;
            Ent::Gen::String SwitchState_Level_VeryHigh() const;
            Ent::Gen::String Switch_Ground_Prefix() const;
            Ent::Gen::Map<char const*, Ent::Gen::Color> TagColors() const;
            Ent::Gen::String UnderWaterBank() const;
            Ent::Gen::Bool UnderWaterOnPlayer() const;
            Ent::Gen::Float UnderwaterOutZone() const;
            Ent::Gen::Map<char const*, Ent::Gen::String> VegetationTagMapping() const;
            Ent::Gen::Float VerticalUnderWaterOffset() const;
            Ent::Gen::Float VolumeRTPCScaleFactor() const;
            Ent::Gen::String _comment() const;
        };

        struct OnlineDebugger_BandwidthWindow_BandwithLimit : HelperObject // Object
        {
            OnlineDebugger_BandwidthWindow_BandwithLimit(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OnlineDebugger::BandwidthWindow::BandwithLimit";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Color color() const;
            Ent::Gen::Float limit() const;
        };

        struct OnlineDebugger_BandwidthWindow : HelperObject // Object
        {
            OnlineDebugger_BandwidthWindow(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OnlineDebugger::BandwidthWindow";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::OnlineDebugger_BandwidthWindow_BandwithLimit> DownColor() const;
            Ent::Gen::Bool Enabled() const;
            Array<Ent::Gen::OnlineDebugger_BandwidthWindow_BandwithLimit> UpColor() const;
            Ent::Gen::String _comment() const;
        };

        struct LightComponentGD : HelperObject // Object
        {
            LightComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "LightComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector3 AngleOffset() const;
            Ent::Gen::Float Brightness() const;
            Ent::Gen::Bool CastShadow() const;
            Ent::Gen::Color Color() const;
            Ent::Gen::Vector3 Direction() const;
            Ent::Gen::Float LinearAttenuationStart() const;
            Ent::Gen::Float LinearAttenuationStop() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::Float RadialAttenuationStart() const;
            Ent::Gen::Float RadialAttenuationStop() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::LightType Type_() const;
            Ent::Gen::Bool VolumetricFog() const;
            Ent::Gen::String _comment() const;
        };

        struct GradientColor : HelperObject // Object
        {
            GradientColor(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GradientColor";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Color color() const;
            Ent::Gen::Float percent() const;
        };

        struct EditorManager : HelperObject // Object
        {
            EditorManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EditorManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ActivateMouseControl() const;
            Ent::Gen::Bool DisableDisplayDebugEntityInfo() const;
            Ent::Gen::Bool GameBlockedWhenActive() const;
            Ent::Gen::Float MoveZ_Blend() const;
            Ent::Gen::Float MoveZ_BlendJoy() const;
            Ent::Gen::Float MoveZ_SpeedAtScreenWidthMax() const;
            Ent::Gen::Float MoveZ_SpeedAtScreenWidthMin() const;
            Ent::Gen::Float Rotate_AccelerationTime() const;
            Ent::Gen::Float Rotate_Blend() const;
            Ent::Gen::Float Rotate_Speed() const;
            Ent::Gen::Float Scale_AccelerationTime() const;
            Ent::Gen::Float Scale_Blend() const;
            Ent::Gen::Float Scale_Speed() const;
            Ent::Gen::Float Selection_DistanceMax() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::Color Text_BackgroundColor() const;
            Ent::Gen::Color Text_DefaultColor() const;
            Ent::Gen::Float Text_Scale() const;
            Ent::Gen::Color Text_SelectedColor() const;
            Ent::Gen::String _comment() const;
        };

        struct BoidsGD : HelperObject // Object
        {
            BoidsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BoidsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AffectedByFluid() const;
            Ent::Gen::Bool AllowMerge() const;
            Ent::Gen::Bool AutoMoveRoot() const;
            Ent::Gen::EntityRef BudEntityRef() const;
            Ent::Gen::Float BudVisualScaleMax() const;
            Ent::Gen::Float BudVisualScaleMin() const;
            Ent::Gen::Bool DisplayMaster() const;
            Ent::Gen::Float FlockingAttackDamages() const;
            Ent::Gen::Float FluidSurfaceHeightOffset() const;
            Ent::Gen::Bool ForceOutsideWater() const;
            Ent::Gen::EntityRef FullEntityPoolRef() const;
            Ent::Gen::Float GetBackToFlockingDuration() const;
            Ent::Gen::Float GhostDuration() const;
            Ent::Gen::Bool HackCanCreateHitRigidbody() const;
            Ent::Gen::Float HierarchyDistanceMultiplier() const;
            Ent::Gen::Float InitialRadius() const;
            Ent::Gen::Float LightBrightness() const;
            Ent::Gen::Color LightColor() const;
            Ent::Gen::Float MainTargetHeight() const;
            Ent::Gen::Float MainTargetRotateDistance() const;
            Ent::Gen::Float MainTargetSpeedMultiplier() const;
            Ent::Gen::Float MinRegenToWakeUp() const;
            Ent::Gen::Int NbAgents() const;
            Ent::Gen::Int NbAgentsPerZone() const;
            Ent::Gen::String ParamBlock() const;
            Ent::Gen::String ParamBudAppear() const;
            Ent::Gen::String ParamBudOpen() const;
            Ent::Gen::String ParamHome() const;
            Ent::Gen::String ParamMove() const;
            Ent::Gen::String ParamSwim() const;
            Ent::Gen::String ParamWakeUp() const;
            Ent::Gen::Float PointCloudSearchRadius() const;
            Ent::Gen::String PointCloudTag() const;
            Ent::Gen::String PresetName() const;
            Ent::Gen::String PresetNameBud() const;
            Ent::Gen::Float RegenMaxThreshold() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Float VisualScaleMax() const;
            Ent::Gen::Float VisualScaleMin() const;
            Ent::Gen::Float WakeUpDuration() const;
            Ent::Gen::String _comment() const;
        };

        struct Collider : HelperObject // Object
        {
            Collider(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Collider";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String BoneName() const;
            Ent::Gen::Float RadiusFactor() const;
            Ent::Gen::String _comment() const;
        };

        struct Codec : HelperObject // Object
        {
            Codec(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Codec";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct Zlib : HelperObject // Object
        {
            Zlib(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Zlib";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Codec Super() const;
            Ent::Gen::String _comment() const;
        };

        struct Lz4Fast : HelperObject // Object
        {
            Lz4Fast(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Lz4Fast";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Codec Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ClimbEdgeData_LedgeData : HelperObject // Object
        {
            ClimbEdgeData_LedgeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ClimbEdgeData::LedgeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float ledgeApproachSpeedMaxZ() const;
            Ent::Gen::Float ledgeDepthRadiusCoeff() const;
            Ent::Gen::Vector3 ledgeDetectionOffset() const;
            Ent::Gen::Float ledgeDetectionRadiusMultiplier() const;
            Ent::Gen::Float ledgeMaxDistance() const;
            Ent::Gen::Float ledgeMaxHeightEpsilon() const;
            Ent::Gen::Float ledgeMinDepthEpsilon() const;
            Ent::Gen::Float ledgeMinWidthEpsilon() const;
        };

        struct ClimbEdgeData : HelperObject // Object
        {
            ClimbEdgeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ClimbEdgeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::ScaleConverter edgeDetectionAnticipation() const;
            Ent::Gen::Float edgeDetectionMaxFlotation() const;
            Ent::Gen::ClimbEdgeData_LedgeData ledgeData() const;
            Ent::Gen::ClimbEdgeData_LedgeData ledgeDataImmersed() const;
        };

        struct ClassMemberRef : HelperObject // Object
        {
            ClassMemberRef(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ClassMemberRef";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String class_() const;
            Ent::Gen::String member() const;
        };

        struct ComponentSignalRef : HelperObject // Object
        {
            ComponentSignalRef(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ComponentSignalRef";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ClassMemberRef Signal() const;
            Ent::Gen::String _comment() const;
        };

        struct ComponentMethodRef : HelperObject // Object
        {
            ComponentMethodRef(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ComponentMethodRef";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ClassMemberRef Method() const;
            Ent::Gen::String _comment() const;
        };

        struct Connection : HelperObject // Object
        {
            Connection(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Connection";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::ComponentMethodRef receiver() const;
            Ent::Gen::ComponentSignalRef sender() const;
        };

        struct CinematicUpdateType : EnumPropHelper<CinematicUpdateType, CinematicUpdateTypeEnum> // Enum
        {
            using Enum = CinematicUpdateTypeEnum;
            using PropHelper<CinematicUpdateType, Enum>::operator=;
            CinematicUpdateType(Ent::Node* _node): EnumPropHelper<CinematicUpdateType, Enum>(_node) {}
            static constexpr char schemaName[] = "CinematicUpdateType";
            static constexpr char const* enumToString[] = {
                "none",
                "Internal",
                "Pesto",
                "CinematicUpdateType_COUNT",
            };
        };
        inline char const* toString(CinematicUpdateTypeEnum value)
        {
            if(size_t(value) >= std::size(CinematicUpdateType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return CinematicUpdateType::enumToString[size_t(value)];
        }
        inline char const* toInternal(CinematicUpdateTypeEnum value) { return toString(value); }
        template<> inline CinematicUpdateTypeEnum strToEnum<CinematicUpdateTypeEnum>(char const* value)
        {
            return static_cast<CinematicUpdateTypeEnum>(details::indexInEnum(value, CinematicUpdateType::enumToString));
        }

        struct CinematicSlot : HelperObject // Object
        {
            CinematicSlot(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CinematicSlot";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Anim() const;
            Ent::Gen::Bool CameraHolder() const;
            Ent::Gen::Bool CanBeInstanciated() const;
            Ent::Gen::Bool DestroyAfter() const;
            Ent::Gen::EntityRef EntityRef() const;
            Ent::Gen::Bool EventCameraHolder() const;
            Ent::Gen::Float FOV() const;
            Ent::Gen::Float FadeInDelay() const;
            Ent::Gen::Float FadeOutDelay() const;
            Ent::Gen::Transform3D InitTransform() const;
            Ent::Gen::Bool MainRole() const;
            Ent::Gen::Bool Mandatory() const;
            Ent::Gen::String Role() const;
            Ent::Gen::String RoleInNextSequence() const;
            Ent::Gen::Bool Visible() const;
            Ent::Gen::String _comment() const;
        };

        struct Sequence : HelperObject // Object
        {
            Sequence(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Sequence";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ActivationDelay() const;
            Ent::Gen::Bool AutoSwitchToNextSequence() const;
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::CinematicSlot> actors() const;
            Ent::Gen::Bool loop() const;
            Ent::Gen::String name() const;
        };

        struct CinematicGD : HelperObject // Object
        {
            CinematicGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CinematicGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ActivationDistance() const;
            Array<Ent::Gen::ResponsiblePointer_CineEvent_> ScriptEvents() const;
            Array<Ent::Gen::Sequence> Sequences() const;
            Ent::Gen::Bool Skippable() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::CinematicUpdateType UpdateType() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEvent : HelperObject // Object
        {
            CineEvent(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEvent";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool Active() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTrigger : HelperObject // Object
        {
            CineEventTrigger(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTrigger";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::CineEvent Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTriggerPlaySound : HelperObject // Object
        {
            CineEventTriggerPlaySound(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTriggerPlaySound";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String SoundEventName() const;
            Ent::Gen::CineEventTrigger Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTriggerPlaySequence : HelperObject // Object
        {
            CineEventTriggerPlaySequence(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTriggerPlaySequence";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int SequenceID() const;
            Ent::Gen::CineEventTrigger Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTriggerGameStateChange : HelperObject // Object
        {
            CineEventTriggerGameStateChange(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTriggerGameStateChange";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String GameStateName() const;
            Ent::Gen::CineEventTrigger Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTriggerEventHandlerPost : HelperObject // Object
        {
            CineEventTriggerEventHandlerPost(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTriggerEventHandlerPost";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String EventCategory() const;
            Ent::Gen::String EventName() const;
            Ent::Gen::CineEventTrigger Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTriggerDisplayUIMessage : HelperObject // Object
        {
            CineEventTriggerDisplayUIMessage(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTriggerDisplayUIMessage";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::CineEventTrigger Super() const;
            Ent::Gen::UIMessage UIMessage() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTest : HelperObject // Object
        {
            CineEventTest(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTest";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool InvertTest() const;
            Ent::Gen::CineEvent Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTestIsCanceled : HelperObject // Object
        {
            CineEventTestIsCanceled(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTestIsCanceled";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::CineEventTest Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTestInput : HelperObject // Object
        {
            CineEventTestInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTestInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AnyButtonInput() const;
            Ent::Gen::Bool AnyJoyInput() const;
            Ent::Gen::CineEventTest Super() const;
            Ent::Gen::Bool TriangleButtonInput() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTestEndCurrentSequence : HelperObject // Object
        {
            CineEventTestEndCurrentSequence(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTestEndCurrentSequence";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::CineEventTest Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CineEventTestCurrentGameState : HelperObject // Object
        {
            CineEventTestCurrentGameState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CineEventTestCurrentGameState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String GameStateName() const;
            Ent::Gen::CineEventTest Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CharacterControllerSlideData : HelperObject // Object
        {
            CharacterControllerSlideData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CharacterControllerSlideData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::ScaleConverter adherenceRecoverSpeedDependingOnTheSlope() const;
            Ent::Gen::Float adherenceThresholdHysteresis() const;
            Ent::Gen::ScaleConverter adherenceThresholdRequiredToKeepControl() const;
            Ent::Gen::Float adherenceUsingDownwardSlopeDirection() const;
            Ent::Gen::Float adherenceUsingSideSlopeDirection() const;
            Ent::Gen::Float adherenceUsingUpwardSlopeDirection() const;
            Ent::Gen::Float animblendInTime() const;
            Ent::Gen::Float friction() const;
            Ent::Gen::Float maxSlopeAngle() const;
            Ent::Gen::Float speedMediumCoeffHysteresis() const;
            Ent::Gen::ScaleConverter speedMediumCoeffIn() const;
            Ent::Gen::Float speedMediumCoeffMin() const;
        };

        struct CharacterControllerGroundNormalData : HelperObject // Object
        {
            CharacterControllerGroundNormalData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CharacterControllerGroundNormalData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AllowOtherCreatureCast() const;
            Ent::Gen::Float PercentageEdgeTolerance() const;
            Ent::Gen::Float PercentageExtirpate() const;
            Ent::Gen::Float WallAngle() const;
            Ent::Gen::ScaleConverter WallCosAngleSpeedXYFactor() const;
            Ent::Gen::String _comment() const;
        };

        struct CharacterControllerClamberData : HelperObject // Object
        {
            CharacterControllerClamberData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CharacterControllerClamberData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DropOffAngle() const;
            Ent::Gen::Float EnterAngle() const;
            Ent::Gen::Float ExitAngle() const;
            Ent::Gen::Bool IsAllowed() const;
            Ent::Gen::ScaleConverter VerticalOrientationRatio() const;
            Ent::Gen::String _comment() const;
        };

        struct CarryMode : EnumPropHelper<CarryMode, CarryModeEnum> // Enum
        {
            using Enum = CarryModeEnum;
            using PropHelper<CarryMode, Enum>::operator=;
            CarryMode(Ent::Node* _node): EnumPropHelper<CarryMode, Enum>(_node) {}
            static constexpr char schemaName[] = "CarryMode";
            static constexpr char const* enumToString[] = {
                "carryno",
                "carrylight",
                "CarryMode_COUNT",
            };
        };
        inline char const* toString(CarryModeEnum value)
        {
            if(size_t(value) >= std::size(CarryMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return CarryMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(CarryModeEnum value) { return toString(value); }
        template<> inline CarryModeEnum strToEnum<CarryModeEnum>(char const* value)
        {
            return static_cast<CarryModeEnum>(details::indexInEnum(value, CarryMode::enumToString));
        }

        struct CapabilitiesAndTags : HelperObject // Object
        {
            CapabilitiesAndTags(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CapabilitiesAndTags";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::PrimitiveSet<NavMeshCapabilityEnum> Capabilities() const;
            Ent::Gen::PrimitiveSet<NavMeshTagEnum> Tags() const;
            Ent::Gen::String _comment() const;
        };

        struct ZoneStamper : HelperObject // Object
        {
            ZoneStamper(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ZoneStamper";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::CapabilitiesAndTags CapabilitiesAndTags() const;
            Ent::Gen::Float DownwardOffset() const;
            Ent::Gen::variant_EntityRef_NavMeshArea_ NavMeshArea() const;
            Ent::Gen::Int Priority() const;
            Ent::Gen::variant_ZoneCylinderShape_ZoneMeshShape_ Shape() const;
            Ent::Gen::GeometryStamper Super() const;
            Ent::Gen::Float UpwardOffset() const;
            Ent::Gen::String _comment() const;
        };

        struct OffMeshLink : HelperObject // Object
        {
            OffMeshLink(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OffMeshLink";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool bidirectional() const;
            Ent::Gen::CapabilitiesAndTags capabilitiesAndTags() const;
            Ent::Gen::EntityRef destination() const;
            Ent::Gen::Float radius() const;
        };

        struct NavMeshStamperGD : HelperObject // Object
        {
            NavMeshStamperGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "NavMeshStamperGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool IsActive() const;
            Array<Ent::Gen::MeshStamper> MeshStampers() const;
            Array<Ent::Gen::OffMeshLink> OffMeshLinks() const;
            Array<Ent::Gen::SkinnedPhysMeshStamper> SkinnedMeshStampers() const;
            Ent::Gen::ComponentGD Super() const;
            Array<Ent::Gen::ZoneStamper> ZoneStampers() const;
            Ent::Gen::String _comment() const;
        };

        struct CanTakeHit : HelperObject // Object
        {
            CanTakeHit(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::Bool val() const;
        };

        struct CreatureComponentInput : HelperObject // Object
        {
            CreatureComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::CanTakeHit CanTakeHit() const;
            Ent::Gen::DeltaTimeFactor DeltaTimeFactor() const;
            Ent::Gen::Invincible Invincible() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CameraType : EnumPropHelper<CameraType, CameraTypeEnum> // Enum
        {
            using Enum = CameraTypeEnum;
            using PropHelper<CameraType, Enum>::operator=;
            CameraType(Ent::Node* _node): EnumPropHelper<CameraType, Enum>(_node) {}
            static constexpr char schemaName[] = "CameraType";
            static constexpr char const* enumToString[] = {
                "NONE",
                "Death",
                "Editor",
                "Event",
                "Free",
                "ThirdPerson",
                "ThirdPersonFollow",
                "ThirdPersonAim",
                "ThirdPersonClamber",
                "MotionConstraint",
                "OnSpline",
                "OnBones",
                "TopView",
                "EntitySwap",
                "SightConstraint",
                "Locked",
                "Pan",
                "CameraType_COUNT",
            };
        };
        inline char const* toString(CameraTypeEnum value)
        {
            if(size_t(value) >= std::size(CameraType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return CameraType::enumToString[size_t(value)];
        }
        inline char const* toInternal(CameraTypeEnum value) { return toString(value); }
        template<> inline CameraTypeEnum strToEnum<CameraTypeEnum>(char const* value)
        {
            return static_cast<CameraTypeEnum>(details::indexInEnum(value, CameraType::enumToString));
        }

        struct CameraSetterGD : HelperObject // Object
        {
            CameraSetterGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CameraSetterGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool SetPositionToHotspot() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Bool SwitchToType() const;
            Ent::Gen::CameraType Type_() const;
            Ent::Gen::String _comment() const;
        };

        struct CameraSoundEvent : HelperObject // Object
        {
            CameraSoundEvent(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CameraSoundEvent";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String eventName() const;
            Ent::Gen::String from_() const;
            Ent::Gen::String to() const;
        };

        struct CameraShakeData : HelperObject // Object
        {
            CameraShakeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CameraShakeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float shakeDuration() const;
            Ent::Gen::Float shakeFrequency() const;
            Ent::Gen::Float shakeIntensity() const;
            Ent::Gen::Vector3 shakeRotation() const;
        };

        struct ExplosionEffect : HelperObject // Object
        {
            ExplosionEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ExplosionEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ControllerVibrationCoef() const;
            Ent::Gen::Float DistanceReductionStep() const;
            Ent::Gen::Float Force() const;
            Ent::Gen::Float ForceReductionByStep() const;
            Ent::Gen::Float ShakeAttenuationRadius() const;
            Ent::Gen::CameraShakeData ShakeData() const;
            Ent::Gen::Float ShakeRadius() const;
            Ent::Gen::GameEffect Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CameraFreeData : HelperObject // Object
        {
            CameraFreeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CameraFreeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Acceleration() const;
            Ent::Gen::Float Deceleration() const;
            Ent::Gen::Float JoyThreshold() const;
            Ent::Gen::Float MoveBlend() const;
            Ent::Gen::Float MoveSpeed() const;
            Ent::Gen::Float MoveSpeedZ() const;
            Ent::Gen::Float RotateBlendX() const;
            Ent::Gen::Float RotateBlendY() const;
            Ent::Gen::Float RotateSpeedX() const;
            Ent::Gen::Float RotateSpeedY() const;
            Ent::Gen::Float SpeedMax() const;
            Ent::Gen::String _comment() const;
        };

        struct CameraEditorData : HelperObject // Object
        {
            CameraEditorData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CameraEditorData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DistanceMax() const;
            Ent::Gen::Float DistanceMin() const;
            Ent::Gen::Float MoveBlend() const;
            Ent::Gen::Float MoveSpeedAtScreenWidthMax() const;
            Ent::Gen::Float MoveSpeedAtScreenWidthMin() const;
            Ent::Gen::Float RotateBlendX() const;
            Ent::Gen::Float RotateBlendY() const;
            Ent::Gen::Float RotateSpeedX() const;
            Ent::Gen::Float RotateSpeedY() const;
            Ent::Gen::Float ScreenWidthMax() const;
            Ent::Gen::Float ScreenWidthMin() const;
            Ent::Gen::Float ZoomBlend() const;
            Ent::Gen::Float ZoomSpeedAtScreenWidthMax() const;
            Ent::Gen::Float ZoomSpeedAtScreenWidthMin() const;
            Ent::Gen::String _comment() const;
        };

        struct CameraManager : HelperObject // Object
        {
            CameraManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CameraManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ActivateDoF() const;
            Ent::Gen::Vector2 AnglesLevels() const;
            Ent::Gen::Bool CameraControlAxisInvertX() const;
            Ent::Gen::Bool CameraControlAxisInvertY() const;
            Ent::Gen::Vector2 DistanceFromTopPosition() const;
            Ent::Gen::CameraEditorData Editor() const;
            Ent::Gen::CameraFreeData Free() const;
            Ent::Gen::Vector2 HeightLevel() const;
            Ent::Gen::Float RotatePitchIn() const;
            Ent::Gen::Float RotatePitchOut() const;
            Ent::Gen::Float RotateYawIn() const;
            Ent::Gen::Float RotateYawOut() const;
            Ent::Gen::Float SpeedHorizontal() const;
            Ent::Gen::Float SpeedVertical() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BoneStartPoint : HelperObject // Object
        {
            BoneStartPoint(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::String val() const;
        };

        struct InteractorGD : HelperObject // Object
        {
            InteractorGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InteractorGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> BeamEffectsNames() const;
            Ent::Gen::BoneStartPoint BoneStartPoint() const;
            Ent::Gen::Float MaxBeamRange() const;
            Ent::Gen::Float RandomSphereCastsAngle() const;
            Ent::Gen::Int RandomSphereCastsNb() const;
            Ent::Gen::Float RememberTargetMaxTime() const;
            Ent::Gen::Float SphereCastRadius() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BoneAnimation : HelperObject // Object
        {
            BoneAnimation(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BoneAnimation";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Array<Ent::Gen::Vector4> Rotations() const;
            Array<Ent::Gen::Vector3> Scales() const;
            Array<Ent::Gen::Vector4> Translations() const;
            Ent::Gen::String _comment() const;
        };

        struct BoidSpeedMaxData : HelperObject // Object
        {
            BoidSpeedMaxData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BoidSpeedMaxData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Duration() const;
            Ent::Gen::Float SpeedMax() const;
            Ent::Gen::String _comment() const;
        };

        struct BoidGoalMode : EnumPropHelper<BoidGoalMode, BoidGoalModeEnum> // Enum
        {
            using Enum = BoidGoalModeEnum;
            using PropHelper<BoidGoalMode, Enum>::operator=;
            BoidGoalMode(Ent::Node* _node): EnumPropHelper<BoidGoalMode, Enum>(_node) {}
            static constexpr char schemaName[] = "BoidGoalMode";
            static constexpr char const* enumToString[] = {
                "none",
                "parent",
                "home",
                "BoidGoalMode_COUNT",
            };
        };
        inline char const* toString(BoidGoalModeEnum value)
        {
            if(size_t(value) >= std::size(BoidGoalMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BoidGoalMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(BoidGoalModeEnum value) { return toString(value); }
        template<> inline BoidGoalModeEnum strToEnum<BoidGoalModeEnum>(char const* value)
        {
            return static_cast<BoidGoalModeEnum>(details::indexInEnum(value, BoidGoalMode::enumToString));
        }

        struct BlendShapeAnimation : HelperObject // Object
        {
            BlendShapeAnimation(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BlendShapeAnimation";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            PrimArray<Ent::Gen::Float> Weights() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationIntermediateFormat : HelperObject // Object
        {
            AnimationIntermediateFormat(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationIntermediateFormat";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::BlendShapeAnimation> BlendShapeAnimations() const;
            Array<Ent::Gen::BoneAnimation> BoneAnimations() const;
            Ent::Gen::Int EndFrame() const;
            Ent::Gen::Float EndTime() const;
            Ent::Gen::Int NumFrames() const;
            Ent::Gen::Float Period() const;
            Ent::Gen::Int StartFrame() const;
            Ent::Gen::Float StartTime() const;
            Ent::Gen::String _comment() const;
        };

        struct BiteData : HelperObject // Object
        {
            BiteData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BiteData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool CanBiteBiped() const;
            Ent::Gen::Bool CanBiteFriends() const;
            Ent::Gen::Bool CheckHotspotOrientation() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool bezierMove() const;
            Ent::Gen::Float biteDamagePerSec() const;
            Ent::Gen::Float biteDefenseDamages() const;
            Ent::Gen::Float biteDuration() const;
            Ent::Gen::Float biteMaxRange() const;
        };

        struct BiomeSoundBank_sBiomeEnv : HelperObject // Object
        {
            BiomeSoundBank_sBiomeEnv(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BiomeSoundBank::sBiomeEnv";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Ent::Gen::Float Spread() const;
            Ent::Gen::String _comment() const;
        };

        struct BiomeSoundBank_sBiomeSound : HelperObject // Object
        {
            BiomeSoundBank_sBiomeSound(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BiomeSoundBank::sBiomeSound";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String AuxSend() const;
            Ent::Gen::String Bank() const;
            Ent::Gen::String Event() const;
            Ent::Gen::String Event_Stop() const;
            Ent::Gen::String MainState() const;
            Ent::Gen::BiomeSoundBank_sBiomeEnv Super() const;
            Ent::Gen::String Tag() const;
            Ent::Gen::String Volume() const;
            Ent::Gen::String _comment() const;
        };

        struct BiomeSoundBank_sBiomeSFX : HelperObject // Object
        {
            BiomeSoundBank_sBiomeSFX(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BiomeSoundBank::sBiomeSFX";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Rtpc() const;
            Ent::Gen::String SFX() const;
            Ent::Gen::BiomeSoundBank_sBiomeEnv Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BiomeSoundBank : HelperObject // Object
        {
            BiomeSoundBank(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BiomeSoundBank";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::BiomeSoundBank_sBiomeSFX> BiomeSFX() const;
            Array<Ent::Gen::BiomeSoundBank_sBiomeSound> BiomeSounds() const;
            Ent::Gen::String DefaultBiomeName() const;
            Ent::Gen::String _comment() const;
        };

        struct BillboardRenderingType : EnumPropHelper<BillboardRenderingType, BillboardRenderingTypeEnum> // Enum
        {
            using Enum = BillboardRenderingTypeEnum;
            using PropHelper<BillboardRenderingType, Enum>::operator=;
            BillboardRenderingType(Ent::Node* _node): EnumPropHelper<BillboardRenderingType, Enum>(_node) {}
            static constexpr char schemaName[] = "BillboardRenderingType";
            static constexpr char const* enumToString[] = {
                "Cross",
                "CameraFacingQuad",
                "Mesh",
                "BillboardRenderingType_COUNT",
            };
        };
        inline char const* toString(BillboardRenderingTypeEnum value)
        {
            if(size_t(value) >= std::size(BillboardRenderingType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BillboardRenderingType::enumToString[size_t(value)];
        }
        inline char const* toInternal(BillboardRenderingTypeEnum value) { return toString(value); }
        template<> inline BillboardRenderingTypeEnum strToEnum<BillboardRenderingTypeEnum>(char const* value)
        {
            return static_cast<BillboardRenderingTypeEnum>(details::indexInEnum(value, BillboardRenderingType::enumToString));
        }

        struct BillboardRenderingSides : EnumPropHelper<BillboardRenderingSides, BillboardRenderingSidesEnum> // Enum
        {
            using Enum = BillboardRenderingSidesEnum;
            using PropHelper<BillboardRenderingSides, Enum>::operator=;
            BillboardRenderingSides(Ent::Node* _node): EnumPropHelper<BillboardRenderingSides, Enum>(_node) {}
            static constexpr char schemaName[] = "BillboardRenderingSides";
            static constexpr char const* enumToString[] = {
                "SideA",
                "SideB",
                "BothSides",
                "BillboardRenderingSides_COUNT",
            };
        };
        inline char const* toString(BillboardRenderingSidesEnum value)
        {
            if(size_t(value) >= std::size(BillboardRenderingSides::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BillboardRenderingSides::enumToString[size_t(value)];
        }
        inline char const* toInternal(BillboardRenderingSidesEnum value) { return toString(value); }
        template<> inline BillboardRenderingSidesEnum strToEnum<BillboardRenderingSidesEnum>(char const* value)
        {
            return static_cast<BillboardRenderingSidesEnum>(details::indexInEnum(value, BillboardRenderingSides::enumToString));
        }

        struct BillboardRenderingAttribute : EnumPropHelper<BillboardRenderingAttribute, BillboardRenderingAttributeEnum> // Enum
        {
            using Enum = BillboardRenderingAttributeEnum;
            using PropHelper<BillboardRenderingAttribute, Enum>::operator=;
            BillboardRenderingAttribute(Ent::Node* _node): EnumPropHelper<BillboardRenderingAttribute, Enum>(_node) {}
            static constexpr char schemaName[] = "BillboardRenderingAttribute";
            static constexpr char const* enumToString[] = {
                "Horizontal",
                "Vertical",
                "Frontal",
                "BillboardRenderingAttribute_COUNT",
            };
        };
        inline char const* toString(BillboardRenderingAttributeEnum value)
        {
            if(size_t(value) >= std::size(BillboardRenderingAttribute::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BillboardRenderingAttribute::enumToString[size_t(value)];
        }
        inline char const* toInternal(BillboardRenderingAttributeEnum value) { return toString(value); }
        template<> inline BillboardRenderingAttributeEnum strToEnum<BillboardRenderingAttributeEnum>(char const* value)
        {
            return static_cast<BillboardRenderingAttributeEnum>(details::indexInEnum(value, BillboardRenderingAttribute::enumToString));
        }

        struct BillboardCameraFacingQuadType : EnumPropHelper<BillboardCameraFacingQuadType, BillboardCameraFacingQuadTypeEnum> // Enum
        {
            using Enum = BillboardCameraFacingQuadTypeEnum;
            using PropHelper<BillboardCameraFacingQuadType, Enum>::operator=;
            BillboardCameraFacingQuadType(Ent::Node* _node): EnumPropHelper<BillboardCameraFacingQuadType, Enum>(_node) {}
            static constexpr char schemaName[] = "BillboardCameraFacingQuadType";
            static constexpr char const* enumToString[] = {
                "AroundAxis",
                "AroundCenter",
                "NotFacingCamera",
                "BGELikeShaft",
                "BillboardCameraFacingQuadType_COUNT",
            };
        };
        inline char const* toString(BillboardCameraFacingQuadTypeEnum value)
        {
            if(size_t(value) >= std::size(BillboardCameraFacingQuadType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BillboardCameraFacingQuadType::enumToString[size_t(value)];
        }
        inline char const* toInternal(BillboardCameraFacingQuadTypeEnum value) { return toString(value); }
        template<> inline BillboardCameraFacingQuadTypeEnum strToEnum<BillboardCameraFacingQuadTypeEnum>(char const* value)
        {
            return static_cast<BillboardCameraFacingQuadTypeEnum>(details::indexInEnum(value, BillboardCameraFacingQuadType::enumToString));
        }

        struct BillboardRendererProperties : HelperObject // Object
        {
            BillboardRendererProperties(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BillboardRendererProperties";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::BillboardRenderingAttribute Attribute() const;
            Ent::Gen::BillboardCameraFacingQuadType BillboardType() const;
            PrimArray<Ent::Gen::String> ExtraMaterialPathArray() const;
            Ent::Gen::String MaterialPath() const;
            Ent::Gen::Int NbMeshInstances() const;
            Ent::Gen::Int NbQuads() const;
            Ent::Gen::Vector3 Offset() const;
            Ent::Gen::BillboardRenderingSides Sides() const;
            Ent::Gen::String VisualPath() const;
            Ent::Gen::String _comment() const;
        };

        struct BillboardProperties : HelperObject // Object
        {
            BillboardProperties(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BillboardProperties";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Duration() const;
            Ent::Gen::Bool Looping() const;
            Ent::Gen::Float Luminosity() const;
            Ent::Gen::String LuminosityCurvePath() const;
            Ent::Gen::Float LuminosityVariability() const;
            Array<Ent::Gen::BillboardRendererProperties> RenderingProperties() const;
            Ent::Gen::BillboardRenderingType RenderingType() const;
            Ent::Gen::Vector3 Size() const;
            Ent::Gen::String SizeCurvePath() const;
            Ent::Gen::Vector3 SizeVariability() const;
            Ent::Gen::String _comment() const;
        };

        struct BehaviorTypedValue : HelperObject // Object
        {
            BehaviorTypedValue(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BehaviorTypedValue";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_ Value() const;
            Ent::Gen::String _comment() const;
        };

        struct BehaviorScriptData : HelperObject // Object
        {
            BehaviorScriptData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BehaviorScriptData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Map<char const*, Ent::Gen::BehaviorTypedValue> DataMap() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Int attackAggressivityDecrease() const;
            Ent::Gen::Int hardFeelingsFriendlyHitCount() const;
            Ent::Gen::Int hardFeelingsNotFriendlyHitCount() const;
            Ent::Gen::Int panicAggressivityDecrease() const;
            Array<Ent::Gen::ShootSequenceData> shootSequence() const;
        };

        struct CreatureAIGD : HelperObject // Object
        {
            CreatureAIGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureAIGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> BehaviorModifiersTags() const;
            Ent::Gen::String BehaviorPath() const;
            Ent::Gen::String BehaviorState() const;
            Ent::Gen::Bool CanBeMaster() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::BehaviorScriptData behaviorScriptData() const;
            Ent::Gen::Float m_oblivionTimerAfterSuspicious() const;
            Ent::Gen::Float m_oblivionTimerBeforeSuspicious() const;
            Ent::Gen::Float m_timerBeforeCertain() const;
            Ent::Gen::Float m_timerBeforeSuspicious() const;
        };

        struct BeamStaffMode : EnumPropHelper<BeamStaffMode, BeamStaffModeEnum> // Enum
        {
            using Enum = BeamStaffModeEnum;
            using PropHelper<BeamStaffMode, Enum>::operator=;
            BeamStaffMode(Ent::Node* _node): EnumPropHelper<BeamStaffMode, Enum>(_node) {}
            static constexpr char schemaName[] = "BeamStaffMode";
            static constexpr char const* enumToString[] = {
                "Off",
                "Searching",
                "Creature",
                "InteractingGPE",
                "Item",
                "PickUp",
                "Hatching",
                "SetRespawnPlaceAsCheckpoint",
                "SetSavePoint",
                "EnableSpiritShrine",
                "Any",
                "BeamStaffMode_COUNT",
            };
        };
        inline char const* toString(BeamStaffModeEnum value)
        {
            if(size_t(value) >= std::size(BeamStaffMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BeamStaffMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(BeamStaffModeEnum value) { return toString(value); }
        template<> inline BeamStaffModeEnum strToEnum<BeamStaffModeEnum>(char const* value)
        {
            return static_cast<BeamStaffModeEnum>(details::indexInEnum(value, BeamStaffMode::enumToString));
        }

        struct BeamTargetGD : HelperObject // Object
        {
            BeamTargetGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BeamTargetGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String EventTriggered() const;
            Ent::Gen::HotSpotType HotspotType() const;
            Ent::Gen::Float InteractMaxDistance() const;
            Ent::Gen::Float InteractionRadius() const;
            Ent::Gen::BeamStaffMode Mode() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct BaseParameters : HelperObject // Object
        {
            BaseParameters(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BaseParameters";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float additionalSpeedRequired() const;
            Ent::Gen::Vector3 direction() const;
            Ent::Gen::Int flags() const;
            Ent::Gen::Float force() const;
            Ent::Gen::Position position() const;
            Ent::Gen::Bool shouldIgnoreSourceContactsDuringHit() const;
            Ent::Gen::Size size() const;
            Ent::Gen::HitStyle style() const;
            Ent::Gen::HitType type() const;
        };

        struct Hit : HelperObject // Object
        {
            Hit(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Hit";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::BaseParameters BaseParameters() const;
            Ent::Gen::DamagesInstant DamageInstantParameters() const;
            Ent::Gen::TargetCollision TargetCollision() const;
            Ent::Gen::String _comment() const;
        };

        struct AutoRotationType : EnumPropHelper<AutoRotationType, AutoRotationTypeEnum> // Enum
        {
            using Enum = AutoRotationTypeEnum;
            using PropHelper<AutoRotationType, Enum>::operator=;
            AutoRotationType(Ent::Node* _node): EnumPropHelper<AutoRotationType, Enum>(_node) {}
            static constexpr char schemaName[] = "AutoRotationType";
            static constexpr char const* enumToString[] = {
                "None",
                "2D",
                "3D",
                "AutoRotationType_COUNT",
            };
        };
        inline char const* toString(AutoRotationTypeEnum value)
        {
            if(size_t(value) >= std::size(AutoRotationType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AutoRotationType::enumToString[size_t(value)];
        }
        inline char const* toInternal(AutoRotationTypeEnum value) { return toString(value); }
        template<> inline AutoRotationTypeEnum strToEnum<AutoRotationTypeEnum>(char const* value)
        {
            return static_cast<AutoRotationTypeEnum>(details::indexInEnum(value, AutoRotationType::enumToString));
        }

        struct AttitudeMode : EnumPropHelper<AttitudeMode, AttitudeModeEnum> // Enum
        {
            using Enum = AttitudeModeEnum;
            using PropHelper<AttitudeMode, Enum>::operator=;
            AttitudeMode(Ent::Node* _node): EnumPropHelper<AttitudeMode, Enum>(_node) {}
            static constexpr char schemaName[] = "AttitudeMode";
            static constexpr char const* enumToString[] = {
                "normal",
                "injured",
                "dead",
                "aggressive",
                "groggy",
                "bitten",
                "charge",
                "AttitudeMode_COUNT",
            };
        };
        inline char const* toString(AttitudeModeEnum value)
        {
            if(size_t(value) >= std::size(AttitudeMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AttitudeMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(AttitudeModeEnum value) { return toString(value); }
        template<> inline AttitudeModeEnum strToEnum<AttitudeModeEnum>(char const* value)
        {
            return static_cast<AttitudeModeEnum>(details::indexInEnum(value, AttitudeMode::enumToString));
        }

        struct AttackType : EnumPropHelper<AttackType, AttackTypeEnum> // Enum
        {
            using Enum = AttackTypeEnum;
            using PropHelper<AttackType, Enum>::operator=;
            AttackType(Ent::Node* _node): EnumPropHelper<AttackType, Enum>(_node) {}
            static constexpr char schemaName[] = "AttackType";
            static constexpr char const* enumToString[] = {
                "Normal",
                "Backward",
                "Charged",
                "JumpOnto",
                "Bite",
                "Stomp",
                "Dive",
                "AttackType_COUNT",
            };
        };
        inline char const* toString(AttackTypeEnum value)
        {
            if(size_t(value) >= std::size(AttackType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AttackType::enumToString[size_t(value)];
        }
        inline char const* toInternal(AttackTypeEnum value) { return toString(value); }
        template<> inline AttackTypeEnum strToEnum<AttackTypeEnum>(char const* value)
        {
            return static_cast<AttackTypeEnum>(details::indexInEnum(value, AttackType::enumToString));
        }

        struct AttackPositionRetimingData_SpecieRetimingCoeff : HelperObject // Object
        {
            AttackPositionRetimingData_SpecieRetimingCoeff(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackPositionRetimingData::SpecieRetimingCoeff";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float defaultCoeff() const;
            Ent::Gen::Float masterCoeff() const;
        };

        struct AttackPositionRetimingData : HelperObject // Object
        {
            AttackPositionRetimingData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackPositionRetimingData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float animTranslationCoeff() const;
            Ent::Gen::Map<SpecieEnum, Ent::Gen::AttackPositionRetimingData_SpecieRetimingCoeff> backwardRetimingCoeffBySpecie() const;
            Ent::Gen::Float lengthMax() const;
            Ent::Gen::Float lengthMin() const;
            Ent::Gen::Float spherecastRadiusCoeff() const;
        };

        struct AttackPhysicsForceData : HelperObject // Object
        {
            AttackPhysicsForceData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackPhysicsForceData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float amount() const;
        };

        struct AttackImpactData : HelperObject // Object
        {
            AttackImpactData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackImpactData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float amount() const;
        };

        struct AttackData : HelperObject // Object
        {
            AttackData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AttackType DefaultAttackType() const;
            Ent::Gen::String _comment() const;
        };

        struct AttackDamageData : HelperObject // Object
        {
            AttackDamageData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackDamageData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float amount() const;
        };

        struct GameAttackData : HelperObject // Object
        {
            GameAttackData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameAttackData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AggressiveDuration() const;
            Ent::Gen::Map<char const*, Ent::Gen::CameraShakeData> AttackCameraShakeData() const;
            Ent::Gen::Map<char const*, Ent::Gen::AttackDamageData> AttackDamageData() const;
            Ent::Gen::Map<char const*, Ent::Gen::AttackImpactData> AttackImpactData() const;
            Ent::Gen::Map<char const*, Ent::Gen::AttackPhysicsForceData> AttackPhysicsForceData() const;
            Ent::Gen::ScaleConverter DashTargetImpulse() const;
            Ent::Gen::Float ShapeAfterGlowTime() const;
            Ent::Gen::Float ShapeAnticipationTime() const;
            Ent::Gen::Float ShapePassivedAnticipationTime() const;
            Ent::Gen::Float ShapeRadiusScale() const;
            Ent::Gen::Float SpeedLockedDelayAfterDodge() const;
            Ent::Gen::Bool UseMountAttack() const;
            Ent::Gen::String _comment() const;
        };

        struct GameManager : HelperObject // Object
        {
            GameManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GameManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ActionAttackValidityTime() const;
            Ent::Gen::GameAttackData AttackData() const;
            Ent::Gen::FreezeData BeamFreezeData() const;
            Ent::Gen::GameBeamSnapData BeamSnapData() const;
            Ent::Gen::GameBiteData BiteData() const;
            Ent::Gen::Map<char const*, Ent::Gen::Float> CameraParamsSmoothData() const;
            Ent::Gen::ConstrainedInputData ConstrainedInputData() const;
            Ent::Gen::GameDeathData DeathData() const;
            Ent::Gen::Float DefaultCameraParamsSmoothValue() const;
            Ent::Gen::Int DefaultGamePadID() const;
            Ent::Gen::GameEdgeData EdgeData() const;
            Ent::Gen::Bool EnableSplashScreen() const;
            Ent::Gen::GameFeetCatchUpData FeetCatchUpData() const;
            Ent::Gen::GameFluidData FluidData() const;
            Ent::Gen::GameFlyData FlyData() const;
            Ent::Gen::Float GamePadAimHysteresis() const;
            Ent::Gen::Float GamePadAimThreshold() const;
            Ent::Gen::GamePadNavigationData GamePadNavigationData() const;
            Ent::Gen::Float GamePadRumbleScale() const;
            Ent::Gen::GamePadSpeedBehaviorData GamePadSpeedBehaviorData() const;
            Ent::Gen::Float GameSpawnFadeInDelay() const;
            Ent::Gen::Float GameSpawnFadeInDuration() const;
            Ent::Gen::CameraShakeData HitShakeData() const;
            Array<Ent::Gen::GameImmersionData> ImmersionData() const;
            Ent::Gen::ScaleConverter InputCollisionAnticipationLength() const;
            Ent::Gen::Float InteractionDisplayHysteresis() const;
            Ent::Gen::Float InteractionPressDuration() const;
            Ent::Gen::Float InteractionScreenViewDistance() const;
            Ent::Gen::String IntroVideo() const;
            Ent::Gen::GameLODData LODData() const;
            Ent::Gen::GameImmersionData LavaImmersionData() const;
            Ent::Gen::Float LockTargetMaxDistance() const;
            Ent::Gen::Float LockTargetScreenViewDistance() const;
            Ent::Gen::Float Long_Press_Duration() const;
            Ent::Gen::Bool MountOnlyOnFollower() const;
            Ent::Gen::String NewGameVideo() const;
            Ent::Gen::String NewGameVideoMusicStart() const;
            Ent::Gen::String NewGameVideoMusicStop() const;
            Ent::Gen::GameParryData ParryData() const;
            Ent::Gen::GamePropelData PropelData() const;
            Ent::Gen::GameRespawnData RespawnData() const;
            Ent::Gen::GameReviveData ReviveData() const;
            Ent::Gen::GameShamanVisionData ShamanVisionData() const;
            Ent::Gen::GameSlopeData SlopeData() const;
            Ent::Gen::GameSnapData SnapData() const;
            Ent::Gen::GameSoftCollisionData SoftCollisionData() const;
            Ent::Gen::String Sound_TopView_Start() const;
            Ent::Gen::String Sound_TopView_Stop() const;
            Ent::Gen::Map<SizeEnum, Ent::Gen::Float> SpeedMaxInUndergroundCavity() const;
            Ent::Gen::String SplashScreenSoundStart() const;
            Ent::Gen::String SplashScreenSoundStop() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::GameImmersionData WaterImmersionData() const;
            Ent::Gen::String _comment() const;
        };

        struct AreaNavigation : HelperObject // Object
        {
            AreaNavigation(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AreaNavigation";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::CapabilitiesAndTags CapabilitiesAndTags() const;
            Ent::Gen::Float GroundAreaCost() const;
            Ent::Gen::Float WaterAreaCost() const;
            Ent::Gen::String _comment() const;
        };

        struct PathFinderGD : HelperObject // Object
        {
            PathFinderGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PathFinderGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AreaNavigation NavigationCapacities() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String UsedNavMeshName() const;
            Ent::Gen::String _comment() const;
        };

        struct Archetype : EnumPropHelper<Archetype, ArchetypeEnum> // Enum
        {
            using Enum = ArchetypeEnum;
            using PropHelper<Archetype, Enum>::operator=;
            Archetype(Ent::Node* _node): EnumPropHelper<Archetype, Enum>(_node) {}
            static constexpr char schemaName[] = "Archetype";
            static constexpr char const* enumToString[] = {
                "flying",
                "swimming",
                "quadripede",
                "bipede",
                "item",
                "structure",
                "activator",
                "Archetype_COUNT",
            };
        };
        inline char const* toString(ArchetypeEnum value)
        {
            if(size_t(value) >= std::size(Archetype::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Archetype::enumToString[size_t(value)];
        }
        inline char const* toInternal(ArchetypeEnum value) { return toString(value); }
        template<> inline ArchetypeEnum strToEnum<ArchetypeEnum>(char const* value)
        {
            return static_cast<ArchetypeEnum>(details::indexInEnum(value, Archetype::enumToString));
        }

        struct AnimationTreeConstraintsGD_GrowData : HelperObject // Object
        {
            AnimationTreeConstraintsGD_GrowData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD::GrowData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DegrowShakeForce() const;
            Ent::Gen::Float GrowShakeForce() const;
            Ent::Gen::Float GrowSpeed() const;
            Ent::Gen::GrowingState GrowingState() const;
            Ent::Gen::ProgressSoundEventData ProgressSoundEventData() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationTreeConstraintsGD_ForceData : HelperObject // Object
        {
            AnimationTreeConstraintsGD_ForceData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD::ForceData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AutoSetupForceInfluence() const;
            Ent::Gen::Int AutoSetupForceInfluenceLevelStart() const;
            Ent::Gen::Int AutoSetupForceInfluenceLevelStop() const;
            Ent::Gen::Float AutoSetupForceInfluenceValueAfterStop() const;
            Ent::Gen::Float AutoSetupForceInfluenceValueBeforeStart() const;
            Ent::Gen::Float AutoSetupForceInfluenceValueStart() const;
            Ent::Gen::Float AutoSetupForceInfluenceValueStop() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationTreeConstraintsGD_BendData : HelperObject // Object
        {
            AnimationTreeConstraintsGD_BendData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD::BendData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AcceptDrag() const;
            Ent::Gen::Bool AcceptDragOnBaseBone() const;
            Ent::Gen::Float AttractDuration() const;
            Ent::Gen::Float DragOnBaseBoneAttractionStartFactor() const;
            Ent::Gen::Int MaxBendAngleFirstBone() const;
            Ent::Gen::Float MaxBendAngleValueAtFirstBone() const;
            Ent::Gen::Float MaxBendAngleValueAtLastBone() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationTreeConstraintsGD : HelperObject // Object
        {
            AnimationTreeConstraintsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AnimationTreeConstraintsGD_BendData BendData() const;
            Ent::Gen::AnimationTreeConstraintsGD_ForceData ForceData() const;
            Ent::Gen::AnimationTreeConstraintsGD_GrowData GrowData() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationSpace : EnumPropHelper<AnimationSpace, AnimationSpaceEnum> // Enum
        {
            using Enum = AnimationSpaceEnum;
            using PropHelper<AnimationSpace, Enum>::operator=;
            AnimationSpace(Ent::Node* _node): EnumPropHelper<AnimationSpace, Enum>(_node) {}
            static constexpr char schemaName[] = "AnimationSpace";
            static constexpr char const* enumToString[] = {
                "bonespace",
                "rootspace",
            };
        };
        inline char const* toString(AnimationSpaceEnum value)
        {
            if(size_t(value) >= std::size(AnimationSpace::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimationSpace::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimationSpaceEnum value) { return toString(value); }
        template<> inline AnimationSpaceEnum strToEnum<AnimationSpaceEnum>(char const* value)
        {
            return static_cast<AnimationSpaceEnum>(details::indexInEnum(value, AnimationSpace::enumToString));
        }

        struct AnimationModelComponentInput_StyleMode : HelperObject // Object
        {
            AnimationModelComponentInput_StyleMode(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::StyleMode val() const;
        };

        struct AnimationModelComponentInput_SpeedMode : HelperObject // Object
        {
            AnimationModelComponentInput_SpeedMode(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::SpeedMode val() const;
        };

        struct AnimationModelComponentInput_LocomotionMode : HelperObject // Object
        {
            AnimationModelComponentInput_LocomotionMode(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::LocomotionMode val() const;
        };

        struct AnimationModelComponentInput_CarryMode : HelperObject // Object
        {
            AnimationModelComponentInput_CarryMode(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::CarryMode val() const;
        };

        struct AnimationModelComponentInput_AttitudeMode : HelperObject // Object
        {
            AnimationModelComponentInput_AttitudeMode(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::AttitudeMode val() const;
        };

        struct AnimationMode : EnumPropHelper<AnimationMode, AnimationModeEnum> // Enum
        {
            using Enum = AnimationModeEnum;
            using PropHelper<AnimationMode, Enum>::operator=;
            AnimationMode(Ent::Node* _node): EnumPropHelper<AnimationMode, Enum>(_node) {}
            static constexpr char schemaName[] = "AnimationMode";
            static constexpr char const* enumToString[] = {
                "absolute",
                "additive",
            };
        };
        inline char const* toString(AnimationModeEnum value)
        {
            if(size_t(value) >= std::size(AnimationMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimationMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimationModeEnum value) { return toString(value); }
        template<> inline AnimationModeEnum strToEnum<AnimationModeEnum>(char const* value)
        {
            return static_cast<AnimationModeEnum>(details::indexInEnum(value, AnimationMode::enumToString));
        }

        struct AnimationGenericConstraintsGD : HelperObject // Object
        {
            AnimationGenericConstraintsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationGenericConstraintsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AnimationMode AnimationMode() const;
            Ent::Gen::Int AnimationPass() const;
            Ent::Gen::AnimationSpace AnimationSpace() const;
            Ent::Gen::Float ControlRate() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationLegsConstraints_SlopeOffsetInfo : HelperObject // Object
        {
            AnimationLegsConstraints_SlopeOffsetInfo(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationLegsConstraints::SlopeOffsetInfo";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float MaxSlopeAngle() const;
            Ent::Gen::Vector3 RotationOffset() const;
            Ent::Gen::Vector3 TranslationOffset() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationLegsConstraintsGD : HelperObject // Object
        {
            AnimationLegsConstraintsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationLegsConstraintsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AllowHeightMapCastFallback() const;
            Ent::Gen::AnimationLegsConstraints_SlopeOffsetInfo AscendingSlopeOffsetInfo() const;
            Ent::Gen::Float BackLegsCompensateExtensionThreshold() const;
            Ent::Gen::Vector2 BackLegsHeightRangeForIKInfluence() const;
            Ent::Gen::Bool BoneBending() const;
            Ent::Gen::Float BoneBendingAnticipation() const;
            Ent::Gen::Float BoneBendingAnticipationBackward() const;
            Ent::Gen::Float BoneBendingLocomotionInfluenceSpeed() const;
            Ent::Gen::Float CastDeltaDistToTriggerSmooth() const;
            Ent::Gen::AnimationLegsConstraints_SlopeOffsetInfo DescendingSlopeOffsetInfo() const;
            Ent::Gen::Float FeetInfluence() const;
            Ent::Gen::Float FrontLegsCompensateExtensionThreshold() const;
            Ent::Gen::Vector2 FrontLegsHeightRangeForIKInfluence() const;
            Ent::Gen::Float GlobalInfluence() const;
            Ent::Gen::Float LegInfluence() const;
            Ent::Gen::Bool LegLock() const;
            Ent::Gen::Float MaxHeightForFootInfluence() const;
            Ent::Gen::Float ObstructionCastHitPosMarginOffsetFactor() const;
            Ent::Gen::Float ObstructionCastOffsetFactor() const;
            Ent::Gen::Float ObstructionCastSafeRadiusFactor() const;
            Ent::Gen::ScaleConverter SpeedFactorFromLockedRootDistance() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Bool UseObstructionCast() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationEventsGeneratorGD_TrackedBone : HelperObject // Object
        {
            AnimationEventsGeneratorGD_TrackedBone(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationEventsGeneratorGD::TrackedBone";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Ent::Gen::Int OffsetFrameCountStart() const;
            Ent::Gen::Int OffsetFrameCountStop() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationEventsGeneratorGD : HelperObject // Object
        {
            AnimationEventsGeneratorGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationEventsGeneratorGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Array<Ent::Gen::AnimationEventsGeneratorGD_TrackedBone> TrackedBones() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimTagTimelineTransition : EnumPropHelper<AnimTagTimelineTransition, AnimTagTimelineTransitionEnum> // Enum
        {
            using Enum = AnimTagTimelineTransitionEnum;
            using PropHelper<AnimTagTimelineTransition, Enum>::operator=;
            AnimTagTimelineTransition(Ent::Node* _node): EnumPropHelper<AnimTagTimelineTransition, Enum>(_node) {}
            static constexpr char schemaName[] = "AnimTagTimelineTransition";
            static constexpr char const* enumToString[] = {
                "beginning",
                "copy",
                "reverse",
                "AnimTagTimelineTransition_COUNT",
            };
        };
        inline char const* toString(AnimTagTimelineTransitionEnum value)
        {
            if(size_t(value) >= std::size(AnimTagTimelineTransition::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimTagTimelineTransition::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimTagTimelineTransitionEnum value) { return toString(value); }
        template<> inline AnimTagTimelineTransitionEnum strToEnum<AnimTagTimelineTransitionEnum>(char const* value)
        {
            return static_cast<AnimTagTimelineTransitionEnum>(details::indexInEnum(value, AnimTagTimelineTransition::enumToString));
        }

        struct AnimTag : EnumPropHelper<AnimTag, AnimTagEnum> // Enum
        {
            using Enum = AnimTagEnum;
            using PropHelper<AnimTag, Enum>::operator=;
            AnimTag(Ent::Node* _node): EnumPropHelper<AnimTag, Enum>(_node) {}
            static constexpr char schemaName[] = "AnimTag";
            static constexpr char const* enumToString[] = {
                "none",
                "apex",
                "forward",
                "forwardright",
                "right",
                "backwardright",
                "backward",
                "backwardleft",
                "left",
                "forwardleft",
                "regular",
                "alignedregular",
                "goofy",
                "alignedgoofy",
                "top",
                "bottom",
                "up",
                "upforward",
                "upward",
                "down",
                "downforward",
                "downward",
                "in",
                "out",
                "horizontal",
                "vertical",
                "count",
            };
        };
        inline char const* toString(AnimTagEnum value)
        {
            if(size_t(value) >= std::size(AnimTag::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimTag::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimTagEnum value) { return toString(value); }
        template<> inline AnimTagEnum strToEnum<AnimTagEnum>(char const* value)
        {
            return static_cast<AnimTagEnum>(details::indexInEnum(value, AnimTag::enumToString));
        }

        struct MoveCapacityData_AnimTagTransitionGroup : HelperObject // Object
        {
            MoveCapacityData_AnimTagTransitionGroup(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MoveCapacityData::AnimTagTransitionGroup";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            PrimArray<Ent::Gen::AnimTag> animTags() const;
            Ent::Gen::Float blendIn() const;
        };

        struct MoveCapacityData_AnimTagTimelineTransitionItem : HelperObject // Object
        {
            MoveCapacityData_AnimTagTimelineTransitionItem(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MoveCapacityData::AnimTagTimelineTransitionItem";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::AnimTag to() const;
            Ent::Gen::AnimTagTimelineTransition type() const;
        };

        struct MoveCapacityData_AnimTagTimelineTransitionTable : HelperObject // Object
        {
            MoveCapacityData_AnimTagTimelineTransitionTable(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MoveCapacityData::AnimTagTimelineTransitionTable";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::AnimTag from_() const;
            Array<Ent::Gen::MoveCapacityData_AnimTagTimelineTransitionItem> transitions() const;
        };

        struct MoveCapacityData : HelperObject // Object
        {
            MoveCapacityData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MoveCapacityData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float airControlFactor() const;
            Ent::Gen::Bool allowClampSpeedBiggerThanLocomotionDuringBlend() const;
            Ent::Gen::Bool allowKeepAnimationPlayRatioUnclamped() const;
            Ent::Gen::Float angularSpeedMaxFlyDumpFactor() const;
            Ent::Gen::Float angularSpeedMaxGroundDumpFactor() const;
            Ent::Gen::Float angularSpeedMaxRiderDumpFactor() const;
            Ent::Gen::Float angularSpeedMaxWaterDumpFactor() const;
            Ent::Gen::MoveCapacityData_AnimTagTimelineTransitionTable animTagTimelineTransitionTable() const;
            Ent::Gen::Float brakeDeceleration() const;
            Ent::Gen::Bool canSpiritAttack() const;
            Ent::Gen::Bool canUseCliffGrip() const;
            Ent::Gen::Float capsuleBigRadius() const;
            Ent::Gen::Float capsuleEnormousRadius() const;
            Ent::Gen::Float capsuleMediumRadius() const;
            Ent::Gen::Float capsuleSmallRadius() const;
            Ent::Gen::Float capsuleTinyRadius() const;
            Ent::Gen::ScaleConverter constraintDetectionAnticipation() const;
            Ent::Gen::Vector3 constraintDetectionOffset() const;
            Ent::Gen::Float constraintDetectionRadiusMultiplier() const;
            Ent::Gen::Float coyoteJumpMaxTime() const;
            Ent::Gen::Float crashPreventionSafeguardFactor() const;
            Ent::Gen::Float defaultWorldUpSpeedFactor() const;
            Ent::Gen::Float dodgeCooldownTime() const;
            Ent::Gen::Bool doubleJump() const;
            Ent::Gen::ScaleConverter dropPlaneLegLenFactor() const;
            Ent::Gen::Bool dropSyncTrajectoryAndVisual() const;
            Ent::Gen::Float ellipseCoeff() const;
            Ent::Gen::ScaleConverter extirpateObstacleAcceleration() const;
            Ent::Gen::Float extirpateObstacleDuration() const;
            Ent::Gen::ScaleConverter flyCentrifugalCoeff() const;
            Ent::Gen::Float flyCentrifugalRate() const;
            Ent::Gen::Float jumpAnalogScale() const;
            Ent::Gen::Bool jumpOntoPosition() const;
            Ent::Gen::Float legLength() const;
            Ent::Gen::Float mass() const;
            Ent::Gen::Float maxAverageSpeedDuringJumpOnto() const;
            Ent::Gen::Float maxFlapTime() const;
            Ent::Gen::Float maxTimeBetweenFlaps() const;
            Ent::Gen::Float maxUnmountRetimingDist() const;
            Ent::Gen::Float minFlapTime() const;
            Ent::Gen::Float minSpeedToSteerPitch() const;
            Ent::Gen::Float minTimeBetweenFlaps() const;
            Ent::Gen::Float minimumDropTimeBeforeAClimbEdge() const;
            Ent::Gen::Int nbAttackJump() const;
            Ent::Gen::MoveCapacityData_OrientationSpeed orientationSpeedFly() const;
            Ent::Gen::MoveCapacityData_OrientationSpeed orientationSpeedGround() const;
            Ent::Gen::MoveCapacityData_OrientationSpeed orientationSpeedWater() const;
            Ent::Gen::Float patinateSpeedMinEnter() const;
            Ent::Gen::Float patinateSpeedMinExit() const;
            Ent::Gen::Float reachSpeedAcceleration() const;
            Array<Ent::Gen::MoveCapacityData_ReachSpeed> reachSpeedByLocomotion() const;
            Ent::Gen::Float reachSpeedDeceleration() const;
            Ent::Gen::Bool reactToOtherCharacterBodyCollision() const;
            Ent::Gen::Float rigidbodyScalingSpeed() const;
            Ent::Gen::Float sphereCastRadiusRatio() const;
            Ent::Gen::Float sphereOverrideRadius() const;
            Ent::Gen::Float strafeBlendIn() const;
            Ent::Gen::Float strafeBlendWeightMinToChangeAnim() const;
            Ent::Gen::Float strafeOrientationRateFactor() const;
            Ent::Gen::SpeedMode strafeSpeedModeMax() const;
            Ent::Gen::Float strafeStopOrientationRateFactor() const;
            Ent::Gen::Float strafeTurnAngleMin() const;
            Ent::Gen::Float trajectoryRateFactorDuringLateralLand() const;
            Ent::Gen::Float turnAroundInputDirectionAngleDeltaMin() const;
            Ent::Gen::Float turnRotationMinRatioForNewTurn() const;
            Ent::Gen::Float turnRotationMinRatioToFinish() const;
        };

        struct DirectionSync : HelperObject // Object
        {
            DirectionSync(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DirectionSync";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool isOpposite() const;
            Ent::Gen::Bool mirrorKey() const;
            Ent::Gen::Float syncCoeff() const;
            Ent::Gen::AnimTag tag1() const;
            Ent::Gen::AnimTag tag2() const;
        };

        struct DirectionSyncData : HelperObject // Object
        {
            DirectionSyncData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "DirectionSyncData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::DirectionSync> datas() const;
            Ent::Gen::String name() const;
        };

        struct AnimationManager : HelperObject // Object
        {
            AnimationManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AnimationVariantDelayMax() const;
            Ent::Gen::Float AnimationVariantDelayMin() const;
            Ent::Gen::Float LookAtSlopeCoeff() const;
            Ent::Gen::Float PlayRatioMax() const;
            Ent::Gen::Float PlayRatioMin() const;
            PrimArray<Ent::Gen::String> RejectedMetadataStatus() const;
            Ent::Gen::Manager Super() const;
            Array<Ent::Gen::DirectionSyncData> SyncDatas() const;
            Ent::Gen::String _comment() const;
            PrimArray<Ent::Gen::String> canDetachFromGroundAction() const;
        };

        struct AnimationModelComponentInput_AnimTag : HelperObject // Object
        {
            AnimationModelComponentInput_AnimTag(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::AnimTag val() const;
        };

        struct AnimMirroringSpecData : HelperObject // Object
        {
            AnimMirroringSpecData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimMirroringSpecData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String name() const;
            Ent::Gen::String name2() const;
            Ent::Gen::String spec() const;
        };

        struct AnimMirroringData : HelperObject // Object
        {
            AnimMirroringData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimMirroringData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Array<Ent::Gen::AnimMirroringSpecData> specs() const;
        };

        struct AnimationControllerGD : HelperObject // Object
        {
            AnimationControllerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationControllerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String EDITOR_skeleton() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::String animDatabase() const;
            Ent::Gen::AnimMirroringData mirroringData() const;
            Ent::Gen::Float romLookAtInfluence() const;
            Ent::Gen::String skeleton() const;
            Ent::Gen::String syncDataName() const;
        };

        struct AnimAdditionalTag : EnumPropHelper<AnimAdditionalTag, AnimAdditionalTagEnum> // Enum
        {
            using Enum = AnimAdditionalTagEnum;
            using PropHelper<AnimAdditionalTag, Enum>::operator=;
            AnimAdditionalTag(Ent::Node* _node): EnumPropHelper<AnimAdditionalTag, Enum>(_node) {}
            static constexpr char schemaName[] = "AnimAdditionalTag";
            static constexpr char const* enumToString[] = {
                "none",
                "small",
                "light",
                "medium",
                "big",
                "enormous",
                "menace",
                "variant1",
                "variant2",
                "variant3",
                "variant4",
                "variant5",
                "variant6",
                "variant7",
                "variant8",
                "variant9",
                "variant10",
                "variant11",
                "variant12",
                "variant13",
                "variant14",
                "variant15",
                "variant16",
                "variant17",
                "variant18",
                "variant19",
                "variant20",
                "ejected",
                "ejectedfar",
                "plunge",
                "lateralplunge",
                "aerialplunge",
                "waterfall",
                "bounce",
                "AnimAdditionalTag_COUNT",
            };
        };
        inline char const* toString(AnimAdditionalTagEnum value)
        {
            if(size_t(value) >= std::size(AnimAdditionalTag::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimAdditionalTag::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimAdditionalTagEnum value) { return toString(value); }
        template<> inline AnimAdditionalTagEnum strToEnum<AnimAdditionalTagEnum>(char const* value)
        {
            return static_cast<AnimAdditionalTagEnum>(details::indexInEnum(value, AnimAdditionalTag::enumToString));
        }

        struct AttackChargedData : HelperObject // Object
        {
            AttackChargedData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackChargedData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AnimAdditionalTag AnimationTag() const;
            Ent::Gen::FloatRange ChargeRatio() const;
            Ent::Gen::String _comment() const;
        };

        struct StrongAttackData : HelperObject // Object
        {
            StrongAttackData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StrongAttackData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ResponsiblePointer_ActorState_ StrongAttackState() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float attackOrientationRate() const;
            Array<Ent::Gen::AttackChargedData> chargedDatas() const;
            Ent::Gen::Float chargedMaxDuration() const;
            Ent::Gen::Float chargingDeceleration() const;
            Ent::Gen::Float chargingOrientationRate() const;
        };

        struct strongAttackData : HelperObject // Object
        {
            strongAttackData(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::StrongAttackData val() const;
        };

        struct AnalyticsManager_MongoDBConnection : HelperObject // Object
        {
            AnalyticsManager_MongoDBConnection(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnalyticsManager::MongoDBConnection";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String collection() const;
            Ent::Gen::String database() const;
            Ent::Gen::String uri() const;
        };

        struct AnalyticsManager : HelperObject // Object
        {
            AnalyticsManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnalyticsManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool EnableAnalyticsTeleportation() const;
            Ent::Gen::Bool EnableEventLogger() const;
            Ent::Gen::AnalyticsManager_MongoDBConnection MongoDBConnection() const;
            Array<Ent::Gen::ResponsiblePointer_AnalyticsObserverInterface_> Plugins() const;
            Ent::Gen::Bool StartPaused() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AirControlData : HelperObject // Object
        {
            AirControlData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AirControlData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AirControlBrake() const;
            Ent::Gen::Float AirControlBrakeAngleMin() const;
            Ent::Gen::ScaleConverter AirControlDirection() const;
            Ent::Gen::Float AirControlSmooth() const;
            Ent::Gen::Float AirControlSpeed() const;
            Ent::Gen::Float AirControlSpeedAngleMax() const;
            Ent::Gen::String _comment() const;
        };

        struct CharacterControllerFallData : HelperObject // Object
        {
            CharacterControllerFallData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CharacterControllerFallData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Acceleration() const;
            Ent::Gen::AirControlData AirControlData() const;
            Ent::Gen::ScaleConverter DamagesPerHeightFall() const;
            Ent::Gen::Float Friction() const;
            Ent::Gen::Float MinHeightForDamageFall() const;
            Ent::Gen::Float MinHeightForDeathFall() const;
            Ent::Gen::Float MinHeightForRecoveryFall() const;
            Ent::Gen::String _comment() const;
        };

        struct CharacterControllerGD : HelperObject // Object
        {
            CharacterControllerGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CharacterControllerGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AllowHeightMapFallback() const;
            Ent::Gen::CharacterControllerClamberData ClamberData() const;
            Ent::Gen::CharacterControllerFallData FallData() const;
            Ent::Gen::CharacterControllerGroundNormalData GroundNormalData() const;
            Ent::Gen::HeadCollisionBehaviorData HeadCollisionData() const;
            Ent::Gen::HitWallData HitWallData() const;
            Ent::Gen::ImmersedBehaviorData ImmersedData() const;
            Ent::Gen::InputCollisionBehaviorData InputCollisionData() const;
            Ent::Gen::MeshNavigationBehaviorData MeshNavigationData() const;
            Ent::Gen::PredictionBehaviorData PredictionData() const;
            Ent::Gen::Vector3 RotationSmooth() const;
            Ent::Gen::CharacterControllerSlideData SlideData() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::ClimbEdgeData climbEdgeData() const;
            Ent::Gen::MoveCapacityData moveCapacityData() const;
        };

        struct AerialAttackData : HelperObject // Object
        {
            AerialAttackData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AerialAttackData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ResponsiblePointer_ActorState_ AerialAttackState() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float attackOrientationRate() const;
        };

        struct AttackComponentGD_AerialAttackData : HelperObject // Object
        {
            AttackComponentGD_AerialAttackData(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::AerialAttackData val() const;
        };

        struct AttackComponentGD : HelperObject // Object
        {
            AttackComponentGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AttackComponentGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AttackComponentGD_AerialAttackData AerialAttackData() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::AttackPositionRetimingData attackPositionRetimingData() const;
            Ent::Gen::lightAttackData lightAttackData() const;
            Ent::Gen::strongAttackData strongAttackData() const;
        };

        struct AdditionnalTag : HelperObject // Object
        {
            AdditionnalTag(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::AnimAdditionalTag val() const;
        };

        struct ActorStates : UnionSetBase<ResponsiblePointer_ActorState_> // union_set
        {
            ActorStates(Ent::Node* _node)
                : UnionSetBase<ResponsiblePointer_ActorState_>(_node)
            {
            }
            static constexpr char schemaName[] = "ActorStates";
            char const* getType() const;
            std::optional<Ent::Gen::ActionAimProjectile> ActionAimProjectile() const;
            Ent::Gen::ActionAimProjectile addActionAimProjectile() const;
            void removeActionAimProjectile() const;
            std::optional<Ent::Gen::ActionAttack> ActionAttack() const;
            Ent::Gen::ActionAttack addActionAttack() const;
            void removeActionAttack() const;
            std::optional<Ent::Gen::ActionAttackJumpOnto> ActionAttackJumpOnto() const;
            Ent::Gen::ActionAttackJumpOnto addActionAttackJumpOnto() const;
            void removeActionAttackJumpOnto() const;
            std::optional<Ent::Gen::ActionAttackStomp> ActionAttackStomp() const;
            Ent::Gen::ActionAttackStomp addActionAttackStomp() const;
            void removeActionAttackStomp() const;
            std::optional<Ent::Gen::ActionBite> ActionBite() const;
            Ent::Gen::ActionBite addActionBite() const;
            void removeActionBite() const;
            std::optional<Ent::Gen::ActionBiteIn> ActionBiteIn() const;
            Ent::Gen::ActionBiteIn addActionBiteIn() const;
            void removeActionBiteIn() const;
            std::optional<Ent::Gen::ActionBiteOut> ActionBiteOut() const;
            Ent::Gen::ActionBiteOut addActionBiteOut() const;
            void removeActionBiteOut() const;
            std::optional<Ent::Gen::ActionBittenState> ActionBittenState() const;
            Ent::Gen::ActionBittenState addActionBittenState() const;
            void removeActionBittenState() const;
            std::optional<Ent::Gen::ActionBrake> ActionBrake() const;
            Ent::Gen::ActionBrake addActionBrake() const;
            void removeActionBrake() const;
            std::optional<Ent::Gen::ActionCallForHelp> ActionCallForHelp() const;
            Ent::Gen::ActionCallForHelp addActionCallForHelp() const;
            void removeActionCallForHelp() const;
            std::optional<Ent::Gen::ActionCentrifugal> ActionCentrifugal() const;
            Ent::Gen::ActionCentrifugal addActionCentrifugal() const;
            void removeActionCentrifugal() const;
            std::optional<Ent::Gen::ActionChangeMount> ActionChangeMount() const;
            Ent::Gen::ActionChangeMount addActionChangeMount() const;
            void removeActionChangeMount() const;
            std::optional<Ent::Gen::ActionChangeRidingSpot> ActionChangeRidingSpot() const;
            Ent::Gen::ActionChangeRidingSpot addActionChangeRidingSpot() const;
            void removeActionChangeRidingSpot() const;
            std::optional<Ent::Gen::ActionChosen> ActionChosen() const;
            Ent::Gen::ActionChosen addActionChosen() const;
            void removeActionChosen() const;
            std::optional<Ent::Gen::ActionCinematic> ActionCinematic() const;
            Ent::Gen::ActionCinematic addActionCinematic() const;
            void removeActionCinematic() const;
            std::optional<Ent::Gen::ActionClamberDropOff> ActionClamberDropOff() const;
            Ent::Gen::ActionClamberDropOff addActionClamberDropOff() const;
            void removeActionClamberDropOff() const;
            std::optional<Ent::Gen::ActionClamberJump> ActionClamberJump() const;
            Ent::Gen::ActionClamberJump addActionClamberJump() const;
            void removeActionClamberJump() const;
            std::optional<Ent::Gen::ActionClamberJumpOff> ActionClamberJumpOff() const;
            Ent::Gen::ActionClamberJumpOff addActionClamberJumpOff() const;
            void removeActionClamberJumpOff() const;
            std::optional<Ent::Gen::ActionClamberLand> ActionClamberLand() const;
            Ent::Gen::ActionClamberLand addActionClamberLand() const;
            void removeActionClamberLand() const;
            std::optional<Ent::Gen::ActionClamberMove> ActionClamberMove() const;
            Ent::Gen::ActionClamberMove addActionClamberMove() const;
            void removeActionClamberMove() const;
            std::optional<Ent::Gen::ActionClamberRise> ActionClamberRise() const;
            Ent::Gen::ActionClamberRise addActionClamberRise() const;
            void removeActionClamberRise() const;
            std::optional<Ent::Gen::ActionClimbEdge> ActionClimbEdge() const;
            Ent::Gen::ActionClimbEdge addActionClimbEdge() const;
            void removeActionClimbEdge() const;
            std::optional<Ent::Gen::ActionCollapse> ActionCollapse() const;
            Ent::Gen::ActionCollapse addActionCollapse() const;
            void removeActionCollapse() const;
            std::optional<Ent::Gen::ActionDecelerate> ActionDecelerate() const;
            Ent::Gen::ActionDecelerate addActionDecelerate() const;
            void removeActionDecelerate() const;
            std::optional<Ent::Gen::ActionDigUpTreasure> ActionDigUpTreasure() const;
            Ent::Gen::ActionDigUpTreasure addActionDigUpTreasure() const;
            void removeActionDigUpTreasure() const;
            std::optional<Ent::Gen::ActionDisableAndFollow> ActionDisableAndFollow() const;
            Ent::Gen::ActionDisableAndFollow addActionDisableAndFollow() const;
            void removeActionDisableAndFollow() const;
            std::optional<Ent::Gen::ActionDodge> ActionDodge() const;
            Ent::Gen::ActionDodge addActionDodge() const;
            void removeActionDodge() const;
            std::optional<Ent::Gen::ActionDrawAttention> ActionDrawAttention() const;
            Ent::Gen::ActionDrawAttention addActionDrawAttention() const;
            void removeActionDrawAttention() const;
            std::optional<Ent::Gen::ActionDrawWeapon> ActionDrawWeapon() const;
            Ent::Gen::ActionDrawWeapon addActionDrawWeapon() const;
            void removeActionDrawWeapon() const;
            std::optional<Ent::Gen::ActionDrawWeaponState> ActionDrawWeaponState() const;
            Ent::Gen::ActionDrawWeaponState addActionDrawWeaponState() const;
            void removeActionDrawWeaponState() const;
            std::optional<Ent::Gen::ActionDrift> ActionDrift() const;
            Ent::Gen::ActionDrift addActionDrift() const;
            void removeActionDrift() const;
            std::optional<Ent::Gen::ActionDrop> ActionDrop() const;
            Ent::Gen::ActionDrop addActionDrop() const;
            void removeActionDrop() const;
            std::optional<Ent::Gen::ActionEmote> ActionEmote() const;
            Ent::Gen::ActionEmote addActionEmote() const;
            void removeActionEmote() const;
            std::optional<Ent::Gen::ActionFlyCrash> ActionFlyCrash() const;
            Ent::Gen::ActionFlyCrash addActionFlyCrash() const;
            void removeActionFlyCrash() const;
            std::optional<Ent::Gen::ActionFlyDive> ActionFlyDive() const;
            Ent::Gen::ActionFlyDive addActionFlyDive() const;
            void removeActionFlyDive() const;
            std::optional<Ent::Gen::ActionFlyDown> ActionFlyDown() const;
            Ent::Gen::ActionFlyDown addActionFlyDown() const;
            void removeActionFlyDown() const;
            std::optional<Ent::Gen::ActionFlyFlap> ActionFlyFlap() const;
            Ent::Gen::ActionFlyFlap addActionFlyFlap() const;
            void removeActionFlyFlap() const;
            std::optional<Ent::Gen::ActionFlyUp> ActionFlyUp() const;
            Ent::Gen::ActionFlyUp addActionFlyUp() const;
            void removeActionFlyUp() const;
            std::optional<Ent::Gen::ActionHit> ActionHit() const;
            Ent::Gen::ActionHit addActionHit() const;
            void removeActionHit() const;
            std::optional<Ent::Gen::ActionIdle> ActionIdle() const;
            Ent::Gen::ActionIdle addActionIdle() const;
            void removeActionIdle() const;
            std::optional<Ent::Gen::ActionIncarnate> ActionIncarnate() const;
            Ent::Gen::ActionIncarnate addActionIncarnate() const;
            void removeActionIncarnate() const;
            std::optional<Ent::Gen::ActionIncarnated> ActionIncarnated() const;
            Ent::Gen::ActionIncarnated addActionIncarnated() const;
            void removeActionIncarnated() const;
            std::optional<Ent::Gen::ActionJump> ActionJump() const;
            Ent::Gen::ActionJump addActionJump() const;
            void removeActionJump() const;
            std::optional<Ent::Gen::ActionJumpOnto> ActionJumpOnto() const;
            Ent::Gen::ActionJumpOnto addActionJumpOnto() const;
            void removeActionJumpOnto() const;
            std::optional<Ent::Gen::ActionLand> ActionLand() const;
            Ent::Gen::ActionLand addActionLand() const;
            void removeActionLand() const;
            std::optional<Ent::Gen::ActionLandingMount> ActionLandingMount() const;
            Ent::Gen::ActionLandingMount addActionLandingMount() const;
            void removeActionLandingMount() const;
            std::optional<Ent::Gen::ActionLookAt> ActionLookAt() const;
            Ent::Gen::ActionLookAt addActionLookAt() const;
            void removeActionLookAt() const;
            std::optional<Ent::Gen::ActionMountReception> ActionMountReception() const;
            Ent::Gen::ActionMountReception addActionMountReception() const;
            void removeActionMountReception() const;
            std::optional<Ent::Gen::ActionMove> ActionMove() const;
            Ent::Gen::ActionMove addActionMove() const;
            void removeActionMove() const;
            std::optional<Ent::Gen::ActionMoveProjectile> ActionMoveProjectile() const;
            Ent::Gen::ActionMoveProjectile addActionMoveProjectile() const;
            void removeActionMoveProjectile() const;
            std::optional<Ent::Gen::ActionMoveTo> ActionMoveTo() const;
            Ent::Gen::ActionMoveTo addActionMoveTo() const;
            void removeActionMoveTo() const;
            std::optional<Ent::Gen::ActionOrientMount> ActionOrientMount() const;
            Ent::Gen::ActionOrientMount addActionOrientMount() const;
            void removeActionOrientMount() const;
            std::optional<Ent::Gen::ActionOutfitSpecialState> ActionOutfitSpecialState() const;
            Ent::Gen::ActionOutfitSpecialState addActionOutfitSpecialState() const;
            void removeActionOutfitSpecialState() const;
            std::optional<Ent::Gen::ActionPathfindAndMove> ActionPathfindAndMove() const;
            Ent::Gen::ActionPathfindAndMove addActionPathfindAndMove() const;
            void removeActionPathfindAndMove() const;
            std::optional<Ent::Gen::ActionPatinate> ActionPatinate() const;
            Ent::Gen::ActionPatinate addActionPatinate() const;
            void removeActionPatinate() const;
            std::optional<Ent::Gen::ActionPlayAnim> ActionPlayAnim() const;
            Ent::Gen::ActionPlayAnim addActionPlayAnim() const;
            void removeActionPlayAnim() const;
            std::optional<Ent::Gen::ActionPropelled> ActionPropelled() const;
            Ent::Gen::ActionPropelled addActionPropelled() const;
            void removeActionPropelled() const;
            std::optional<Ent::Gen::ActionPushed> ActionPushed() const;
            Ent::Gen::ActionPushed addActionPushed() const;
            void removeActionPushed() const;
            std::optional<Ent::Gen::ActionQuadStandUpState> ActionQuadStandUpState() const;
            Ent::Gen::ActionQuadStandUpState addActionQuadStandUpState() const;
            void removeActionQuadStandUpState() const;
            std::optional<Ent::Gen::ActionQuadStandUpStateIn> ActionQuadStandUpStateIn() const;
            Ent::Gen::ActionQuadStandUpStateIn addActionQuadStandUpStateIn() const;
            void removeActionQuadStandUpStateIn() const;
            std::optional<Ent::Gen::ActionQuadStandUpStateOut> ActionQuadStandUpStateOut() const;
            Ent::Gen::ActionQuadStandUpStateOut addActionQuadStandUpStateOut() const;
            void removeActionQuadStandUpStateOut() const;
            std::optional<Ent::Gen::ActionRagdoll> ActionRagdoll() const;
            Ent::Gen::ActionRagdoll addActionRagdoll() const;
            void removeActionRagdoll() const;
            std::optional<Ent::Gen::ActionReviveMaskEffect> ActionReviveMaskEffect() const;
            Ent::Gen::ActionReviveMaskEffect addActionReviveMaskEffect() const;
            void removeActionReviveMaskEffect() const;
            std::optional<Ent::Gen::ActionRiderStance> ActionRiderStance() const;
            Ent::Gen::ActionRiderStance addActionRiderStance() const;
            void removeActionRiderStance() const;
            std::optional<Ent::Gen::ActionRise> ActionRise() const;
            Ent::Gen::ActionRise addActionRise() const;
            void removeActionRise() const;
            std::optional<Ent::Gen::ActionScaleRider> ActionScaleRider() const;
            Ent::Gen::ActionScaleRider addActionScaleRider() const;
            void removeActionScaleRider() const;
            std::optional<Ent::Gen::ActionShakeOff> ActionShakeOff() const;
            Ent::Gen::ActionShakeOff addActionShakeOff() const;
            void removeActionShakeOff() const;
            std::optional<Ent::Gen::ActionShamanVision> ActionShamanVision() const;
            Ent::Gen::ActionShamanVision addActionShamanVision() const;
            void removeActionShamanVision() const;
            std::optional<Ent::Gen::ActionShootBeam> ActionShootBeam() const;
            Ent::Gen::ActionShootBeam addActionShootBeam() const;
            void removeActionShootBeam() const;
            std::optional<Ent::Gen::ActionSlide> ActionSlide() const;
            Ent::Gen::ActionSlide addActionSlide() const;
            void removeActionSlide() const;
            std::optional<Ent::Gen::ActionStartRun> ActionStartRun() const;
            Ent::Gen::ActionStartRun addActionStartRun() const;
            void removeActionStartRun() const;
            std::optional<Ent::Gen::ActionStop> ActionStop() const;
            Ent::Gen::ActionStop addActionStop() const;
            void removeActionStop() const;
            std::optional<Ent::Gen::ActionStrafe> ActionStrafe() const;
            Ent::Gen::ActionStrafe addActionStrafe() const;
            void removeActionStrafe() const;
            std::optional<Ent::Gen::ActionStrafeTurn> ActionStrafeTurn() const;
            Ent::Gen::ActionStrafeTurn addActionStrafeTurn() const;
            void removeActionStrafeTurn() const;
            std::optional<Ent::Gen::ActionTakeOff> ActionTakeOff() const;
            Ent::Gen::ActionTakeOff addActionTakeOff() const;
            void removeActionTakeOff() const;
            std::optional<Ent::Gen::ActionTalk> ActionTalk() const;
            Ent::Gen::ActionTalk addActionTalk() const;
            void removeActionTalk() const;
            std::optional<Ent::Gen::ActionTopView> ActionTopView() const;
            Ent::Gen::ActionTopView addActionTopView() const;
            void removeActionTopView() const;
            std::optional<Ent::Gen::ActionTriggerCrouch> ActionTriggerCrouch() const;
            Ent::Gen::ActionTriggerCrouch addActionTriggerCrouch() const;
            void removeActionTriggerCrouch() const;
            std::optional<Ent::Gen::ActionTriggerShamanVisionExit> ActionTriggerShamanVisionExit() const;
            Ent::Gen::ActionTriggerShamanVisionExit addActionTriggerShamanVisionExit() const;
            void removeActionTriggerShamanVisionExit() const;
            std::optional<Ent::Gen::ActionTriggerStandUp> ActionTriggerStandUp() const;
            Ent::Gen::ActionTriggerStandUp addActionTriggerStandUp() const;
            void removeActionTriggerStandUp() const;
            std::optional<Ent::Gen::ActionTurn> ActionTurn() const;
            Ent::Gen::ActionTurn addActionTurn() const;
            void removeActionTurn() const;
            std::optional<Ent::Gen::ActionUnmount> ActionUnmount() const;
            Ent::Gen::ActionUnmount addActionUnmount() const;
            void removeActionUnmount() const;
            std::optional<Ent::Gen::ActionWait> ActionWait() const;
            Ent::Gen::ActionWait addActionWait() const;
            void removeActionWait() const;
            std::optional<Ent::Gen::ActorStateAimCharge> ActorStateAimCharge() const;
            Ent::Gen::ActorStateAimCharge addActorStateAimCharge() const;
            void removeActorStateAimCharge() const;
            std::optional<Ent::Gen::ActorStateAlive> ActorStateAlive() const;
            Ent::Gen::ActorStateAlive addActorStateAlive() const;
            void removeActorStateAlive() const;
            std::optional<Ent::Gen::ActorStateAnsweringCall> ActorStateAnsweringCall() const;
            Ent::Gen::ActorStateAnsweringCall addActorStateAnsweringCall() const;
            void removeActorStateAnsweringCall() const;
            std::optional<Ent::Gen::ActorStateApplyHit> ActorStateApplyHit() const;
            Ent::Gen::ActorStateApplyHit addActorStateApplyHit() const;
            void removeActorStateApplyHit() const;
            std::optional<Ent::Gen::ActorStateAttitudeAggressive> ActorStateAttitudeAggressive() const;
            Ent::Gen::ActorStateAttitudeAggressive addActorStateAttitudeAggressive() const;
            void removeActorStateAttitudeAggressive() const;
            std::optional<Ent::Gen::ActorStateBehaviorState> ActorStateBehaviorState() const;
            Ent::Gen::ActorStateBehaviorState addActorStateBehaviorState() const;
            void removeActorStateBehaviorState() const;
            std::optional<Ent::Gen::ActorStateBeingImmersed> ActorStateBeingImmersed() const;
            Ent::Gen::ActorStateBeingImmersed addActorStateBeingImmersed() const;
            void removeActorStateBeingImmersed() const;
            std::optional<Ent::Gen::ActorStateBeingImmersedFromInAir> ActorStateBeingImmersedFromInAir() const;
            Ent::Gen::ActorStateBeingImmersedFromInAir addActorStateBeingImmersedFromInAir() const;
            void removeActorStateBeingImmersedFromInAir() const;
            std::optional<Ent::Gen::ActorStateBeingImmersedFromOnGround> ActorStateBeingImmersedFromOnGround() const;
            Ent::Gen::ActorStateBeingImmersedFromOnGround addActorStateBeingImmersedFromOnGround() const;
            void removeActorStateBeingImmersedFromOnGround() const;
            std::optional<Ent::Gen::ActorStateBeingInAir> ActorStateBeingInAir() const;
            Ent::Gen::ActorStateBeingInAir addActorStateBeingInAir() const;
            void removeActorStateBeingInAir() const;
            std::optional<Ent::Gen::ActorStateBeingOnGround> ActorStateBeingOnGround() const;
            Ent::Gen::ActorStateBeingOnGround addActorStateBeingOnGround() const;
            void removeActorStateBeingOnGround() const;
            std::optional<Ent::Gen::ActorStateBeingOnGroundFromImmersed> ActorStateBeingOnGroundFromImmersed() const;
            Ent::Gen::ActorStateBeingOnGroundFromImmersed addActorStateBeingOnGroundFromImmersed() const;
            void removeActorStateBeingOnGroundFromImmersed() const;
            std::optional<Ent::Gen::ActorStateBeingOnMount> ActorStateBeingOnMount() const;
            Ent::Gen::ActorStateBeingOnMount addActorStateBeingOnMount() const;
            void removeActorStateBeingOnMount() const;
            std::optional<Ent::Gen::ActorStateBeingOnPossessedGPE> ActorStateBeingOnPossessedGPE() const;
            Ent::Gen::ActorStateBeingOnPossessedGPE addActorStateBeingOnPossessedGPE() const;
            void removeActorStateBeingOnPossessedGPE() const;
            std::optional<Ent::Gen::ActorStateBeingRided> ActorStateBeingRided() const;
            Ent::Gen::ActorStateBeingRided addActorStateBeingRided() const;
            void removeActorStateBeingRided() const;
            std::optional<Ent::Gen::ActorStateBendingConstraint> ActorStateBendingConstraint() const;
            Ent::Gen::ActorStateBendingConstraint addActorStateBendingConstraint() const;
            void removeActorStateBendingConstraint() const;
            std::optional<Ent::Gen::ActorStateBendingTree> ActorStateBendingTree() const;
            Ent::Gen::ActorStateBendingTree addActorStateBendingTree() const;
            void removeActorStateBendingTree() const;
            std::optional<Ent::Gen::ActorStateBiteEntityLiving> ActorStateBiteEntityLiving() const;
            Ent::Gen::ActorStateBiteEntityLiving addActorStateBiteEntityLiving() const;
            void removeActorStateBiteEntityLiving() const;
            std::optional<Ent::Gen::ActorStateBiteJumpOut> ActorStateBiteJumpOut() const;
            Ent::Gen::ActorStateBiteJumpOut addActorStateBiteJumpOut() const;
            void removeActorStateBiteJumpOut() const;
            std::optional<Ent::Gen::ActorStateBittenRegenerated> ActorStateBittenRegenerated() const;
            Ent::Gen::ActorStateBittenRegenerated addActorStateBittenRegenerated() const;
            void removeActorStateBittenRegenerated() const;
            std::optional<Ent::Gen::ActorStateBittenShaked> ActorStateBittenShaked() const;
            Ent::Gen::ActorStateBittenShaked addActorStateBittenShaked() const;
            void removeActorStateBittenShaked() const;
            std::optional<Ent::Gen::ActorStateBuried> ActorStateBuried() const;
            Ent::Gen::ActorStateBuried addActorStateBuried() const;
            void removeActorStateBuried() const;
            std::optional<Ent::Gen::ActorStateCallingFollower> ActorStateCallingFollower() const;
            Ent::Gen::ActorStateCallingFollower addActorStateCallingFollower() const;
            void removeActorStateCallingFollower() const;
            std::optional<Ent::Gen::ActorStateCatapulted> ActorStateCatapulted() const;
            Ent::Gen::ActorStateCatapulted addActorStateCatapulted() const;
            void removeActorStateCatapulted() const;
            std::optional<Ent::Gen::ActorStateCatapultedLand> ActorStateCatapultedLand() const;
            Ent::Gen::ActorStateCatapultedLand addActorStateCatapultedLand() const;
            void removeActorStateCatapultedLand() const;
            std::optional<Ent::Gen::ActorStateChangeEnergySide> ActorStateChangeEnergySide() const;
            Ent::Gen::ActorStateChangeEnergySide addActorStateChangeEnergySide() const;
            void removeActorStateChangeEnergySide() const;
            std::optional<Ent::Gen::ActorStateChargeSpendLife> ActorStateChargeSpendLife() const;
            Ent::Gen::ActorStateChargeSpendLife addActorStateChargeSpendLife() const;
            void removeActorStateChargeSpendLife() const;
            std::optional<Ent::Gen::ActorStateConvertWithFlow> ActorStateConvertWithFlow() const;
            Ent::Gen::ActorStateConvertWithFlow addActorStateConvertWithFlow() const;
            void removeActorStateConvertWithFlow() const;
            std::optional<Ent::Gen::ActorStateCreature> ActorStateCreature() const;
            Ent::Gen::ActorStateCreature addActorStateCreature() const;
            void removeActorStateCreature() const;
            std::optional<Ent::Gen::ActorStateDead> ActorStateDead() const;
            Ent::Gen::ActorStateDead addActorStateDead() const;
            void removeActorStateDead() const;
            std::optional<Ent::Gen::ActorStateDisabled> ActorStateDisabled() const;
            Ent::Gen::ActorStateDisabled addActorStateDisabled() const;
            void removeActorStateDisabled() const;
            std::optional<Ent::Gen::ActorStateDisabledIn> ActorStateDisabledIn() const;
            Ent::Gen::ActorStateDisabledIn addActorStateDisabledIn() const;
            void removeActorStateDisabledIn() const;
            std::optional<Ent::Gen::ActorStateDisabledOut> ActorStateDisabledOut() const;
            Ent::Gen::ActorStateDisabledOut addActorStateDisabledOut() const;
            void removeActorStateDisabledOut() const;
            std::optional<Ent::Gen::ActorStateDodge3D> ActorStateDodge3D() const;
            Ent::Gen::ActorStateDodge3D addActorStateDodge3D() const;
            void removeActorStateDodge3D() const;
            std::optional<Ent::Gen::ActorStateDucking> ActorStateDucking() const;
            Ent::Gen::ActorStateDucking addActorStateDucking() const;
            void removeActorStateDucking() const;
            std::optional<Ent::Gen::ActorStateEnergyShooting> ActorStateEnergyShooting() const;
            Ent::Gen::ActorStateEnergyShooting addActorStateEnergyShooting() const;
            void removeActorStateEnergyShooting() const;
            std::optional<Ent::Gen::ActorStateExitingFly> ActorStateExitingFly() const;
            Ent::Gen::ActorStateExitingFly addActorStateExitingFly() const;
            void removeActorStateExitingFly() const;
            std::optional<Ent::Gen::ActorStateFlockingAttackFlocking> ActorStateFlockingAttackFlocking() const;
            Ent::Gen::ActorStateFlockingAttackFlocking addActorStateFlockingAttackFlocking() const;
            void removeActorStateFlockingAttackFlocking() const;
            std::optional<Ent::Gen::ActorStateFlockingChangingParams> ActorStateFlockingChangingParams() const;
            Ent::Gen::ActorStateFlockingChangingParams addActorStateFlockingChangingParams() const;
            void removeActorStateFlockingChangingParams() const;
            std::optional<Ent::Gen::ActorStateFlockingIndividualSpawning> ActorStateFlockingIndividualSpawning() const;
            Ent::Gen::ActorStateFlockingIndividualSpawning addActorStateFlockingIndividualSpawning() const;
            void removeActorStateFlockingIndividualSpawning() const;
            std::optional<Ent::Gen::ActorStateFlockingLiving> ActorStateFlockingLiving() const;
            Ent::Gen::ActorStateFlockingLiving addActorStateFlockingLiving() const;
            void removeActorStateFlockingLiving() const;
            std::optional<Ent::Gen::ActorStateFlockingRigidbodyBeingActive> ActorStateFlockingRigidbodyBeingActive() const;
            Ent::Gen::ActorStateFlockingRigidbodyBeingActive addActorStateFlockingRigidbodyBeingActive() const;
            void removeActorStateFlockingRigidbodyBeingActive() const;
            std::optional<Ent::Gen::ActorStateFluidSlowDown> ActorStateFluidSlowDown() const;
            Ent::Gen::ActorStateFluidSlowDown addActorStateFluidSlowDown() const;
            void removeActorStateFluidSlowDown() const;
            std::optional<Ent::Gen::ActorStateForceAgainstSlope> ActorStateForceAgainstSlope() const;
            Ent::Gen::ActorStateForceAgainstSlope addActorStateForceAgainstSlope() const;
            void removeActorStateForceAgainstSlope() const;
            std::optional<Ent::Gen::ActorStateHasNoBody> ActorStateHasNoBody() const;
            Ent::Gen::ActorStateHasNoBody addActorStateHasNoBody() const;
            void removeActorStateHasNoBody() const;
            std::optional<Ent::Gen::ActorStateHeld> ActorStateHeld() const;
            Ent::Gen::ActorStateHeld addActorStateHeld() const;
            void removeActorStateHeld() const;
            std::optional<Ent::Gen::ActorStateHitEnergyWall> ActorStateHitEnergyWall() const;
            Ent::Gen::ActorStateHitEnergyWall addActorStateHitEnergyWall() const;
            void removeActorStateHitEnergyWall() const;
            std::optional<Ent::Gen::ActorStateHoldingItem> ActorStateHoldingItem() const;
            Ent::Gen::ActorStateHoldingItem addActorStateHoldingItem() const;
            void removeActorStateHoldingItem() const;
            std::optional<Ent::Gen::ActorStateIKConstraint> ActorStateIKConstraint() const;
            Ent::Gen::ActorStateIKConstraint addActorStateIKConstraint() const;
            void removeActorStateIKConstraint() const;
            std::optional<Ent::Gen::ActorStateInvincible> ActorStateInvincible() const;
            Ent::Gen::ActorStateInvincible addActorStateInvincible() const;
            void removeActorStateInvincible() const;
            std::optional<Ent::Gen::ActorStateLeavingLava> ActorStateLeavingLava() const;
            Ent::Gen::ActorStateLeavingLava addActorStateLeavingLava() const;
            void removeActorStateLeavingLava() const;
            std::optional<Ent::Gen::ActorStateLosingOxygen> ActorStateLosingOxygen() const;
            Ent::Gen::ActorStateLosingOxygen addActorStateLosingOxygen() const;
            void removeActorStateLosingOxygen() const;
            std::optional<Ent::Gen::ActorStateMeetingLava> ActorStateMeetingLava() const;
            Ent::Gen::ActorStateMeetingLava addActorStateMeetingLava() const;
            void removeActorStateMeetingLava() const;
            std::optional<Ent::Gen::ActorStateMoveAlongBezier> ActorStateMoveAlongBezier() const;
            Ent::Gen::ActorStateMoveAlongBezier addActorStateMoveAlongBezier() const;
            void removeActorStateMoveAlongBezier() const;
            std::optional<Ent::Gen::ActorStateMovingClamber> ActorStateMovingClamber() const;
            Ent::Gen::ActorStateMovingClamber addActorStateMovingClamber() const;
            void removeActorStateMovingClamber() const;
            std::optional<Ent::Gen::ActorStateMovingDive> ActorStateMovingDive() const;
            Ent::Gen::ActorStateMovingDive addActorStateMovingDive() const;
            void removeActorStateMovingDive() const;
            std::optional<Ent::Gen::ActorStateMovingFall> ActorStateMovingFall() const;
            Ent::Gen::ActorStateMovingFall addActorStateMovingFall() const;
            void removeActorStateMovingFall() const;
            std::optional<Ent::Gen::ActorStateMovingFly> ActorStateMovingFly() const;
            Ent::Gen::ActorStateMovingFly addActorStateMovingFly() const;
            void removeActorStateMovingFly() const;
            std::optional<Ent::Gen::ActorStateMovingProne> ActorStateMovingProne() const;
            Ent::Gen::ActorStateMovingProne addActorStateMovingProne() const;
            void removeActorStateMovingProne() const;
            std::optional<Ent::Gen::ActorStateMovingRide> ActorStateMovingRide() const;
            Ent::Gen::ActorStateMovingRide addActorStateMovingRide() const;
            void removeActorStateMovingRide() const;
            std::optional<Ent::Gen::ActorStateMovingStandUp> ActorStateMovingStandUp() const;
            Ent::Gen::ActorStateMovingStandUp addActorStateMovingStandUp() const;
            void removeActorStateMovingStandUp() const;
            std::optional<Ent::Gen::ActorStateMovingSwim> ActorStateMovingSwim() const;
            Ent::Gen::ActorStateMovingSwim addActorStateMovingSwim() const;
            void removeActorStateMovingSwim() const;
            std::optional<Ent::Gen::ActorStateNavigationMesh> ActorStateNavigationMesh() const;
            Ent::Gen::ActorStateNavigationMesh addActorStateNavigationMesh() const;
            void removeActorStateNavigationMesh() const;
            std::optional<Ent::Gen::ActorStatePossessFlocking> ActorStatePossessFlocking() const;
            Ent::Gen::ActorStatePossessFlocking addActorStatePossessFlocking() const;
            void removeActorStatePossessFlocking() const;
            std::optional<Ent::Gen::ActorStatePossessGPE> ActorStatePossessGPE() const;
            Ent::Gen::ActorStatePossessGPE addActorStatePossessGPE() const;
            void removeActorStatePossessGPE() const;
            std::optional<Ent::Gen::ActorStateReactingLava> ActorStateReactingLava() const;
            Ent::Gen::ActorStateReactingLava addActorStateReactingLava() const;
            void removeActorStateReactingLava() const;
            std::optional<Ent::Gen::ActorStateRecover> ActorStateRecover() const;
            Ent::Gen::ActorStateRecover addActorStateRecover() const;
            void removeActorStateRecover() const;
            std::optional<Ent::Gen::ActorStateRequestingHealing> ActorStateRequestingHealing() const;
            Ent::Gen::ActorStateRequestingHealing addActorStateRequestingHealing() const;
            void removeActorStateRequestingHealing() const;
            std::optional<Ent::Gen::ActorStateRequestingWaiting> ActorStateRequestingWaiting() const;
            Ent::Gen::ActorStateRequestingWaiting addActorStateRequestingWaiting() const;
            void removeActorStateRequestingWaiting() const;
            std::optional<Ent::Gen::ActorStateScreaming> ActorStateScreaming() const;
            Ent::Gen::ActorStateScreaming addActorStateScreaming() const;
            void removeActorStateScreaming() const;
            std::optional<Ent::Gen::ActorStateSendMission> ActorStateSendMission() const;
            Ent::Gen::ActorStateSendMission addActorStateSendMission() const;
            void removeActorStateSendMission() const;
            std::optional<Ent::Gen::ActorStateShamanItemLiving> ActorStateShamanItemLiving() const;
            Ent::Gen::ActorStateShamanItemLiving addActorStateShamanItemLiving() const;
            void removeActorStateShamanItemLiving() const;
            std::optional<Ent::Gen::ActorStateShamanItemPartState> ActorStateShamanItemPartState() const;
            Ent::Gen::ActorStateShamanItemPartState addActorStateShamanItemPartState() const;
            void removeActorStateShamanItemPartState() const;
            std::optional<Ent::Gen::ActorStateShapeshift> ActorStateShapeshift() const;
            Ent::Gen::ActorStateShapeshift addActorStateShapeshift() const;
            void removeActorStateShapeshift() const;
            std::optional<Ent::Gen::ActorStateShootingFlow> ActorStateShootingFlow() const;
            Ent::Gen::ActorStateShootingFlow addActorStateShootingFlow() const;
            void removeActorStateShootingFlow() const;
            std::optional<Ent::Gen::ActorStateSink> ActorStateSink() const;
            Ent::Gen::ActorStateSink addActorStateSink() const;
            void removeActorStateSink() const;
            std::optional<Ent::Gen::ActorStateSkeletonPartPickUpRequest> ActorStateSkeletonPartPickUpRequest() const;
            Ent::Gen::ActorStateSkeletonPartPickUpRequest addActorStateSkeletonPartPickUpRequest() const;
            void removeActorStateSkeletonPartPickUpRequest() const;
            std::optional<Ent::Gen::ActorStateSkeletonPartPickUpState> ActorStateSkeletonPartPickUpState() const;
            Ent::Gen::ActorStateSkeletonPartPickUpState addActorStateSkeletonPartPickUpState() const;
            void removeActorStateSkeletonPartPickUpState() const;
            std::optional<Ent::Gen::ActorStateSleeping> ActorStateSleeping() const;
            Ent::Gen::ActorStateSleeping addActorStateSleeping() const;
            void removeActorStateSleeping() const;
            std::optional<Ent::Gen::ActorStateSlope> ActorStateSlope() const;
            Ent::Gen::ActorStateSlope addActorStateSlope() const;
            void removeActorStateSlope() const;
            std::optional<Ent::Gen::ActorStateSoulRespawn> ActorStateSoulRespawn() const;
            Ent::Gen::ActorStateSoulRespawn addActorStateSoulRespawn() const;
            void removeActorStateSoulRespawn() const;
            std::optional<Ent::Gen::ActorStateSoulWaitingToRespawn> ActorStateSoulWaitingToRespawn() const;
            Ent::Gen::ActorStateSoulWaitingToRespawn addActorStateSoulWaitingToRespawn() const;
            void removeActorStateSoulWaitingToRespawn() const;
            std::optional<Ent::Gen::ActorStateSpeedMultiplier> ActorStateSpeedMultiplier() const;
            Ent::Gen::ActorStateSpeedMultiplier addActorStateSpeedMultiplier() const;
            void removeActorStateSpeedMultiplier() const;
            std::optional<Ent::Gen::ActorStateStopAttitudeAggressive> ActorStateStopAttitudeAggressive() const;
            Ent::Gen::ActorStateStopAttitudeAggressive addActorStateStopAttitudeAggressive() const;
            void removeActorStateStopAttitudeAggressive() const;
            std::optional<Ent::Gen::ActorStateTaunting> ActorStateTaunting() const;
            Ent::Gen::ActorStateTaunting addActorStateTaunting() const;
            void removeActorStateTaunting() const;
            std::optional<Ent::Gen::ActorStateTeleport> ActorStateTeleport() const;
            Ent::Gen::ActorStateTeleport addActorStateTeleport() const;
            void removeActorStateTeleport() const;
            std::optional<Ent::Gen::ActorStateTeleportToTarget> ActorStateTeleportToTarget() const;
            Ent::Gen::ActorStateTeleportToTarget addActorStateTeleportToTarget() const;
            void removeActorStateTeleportToTarget() const;
            std::optional<Ent::Gen::ActorStateTeleportWhileMoving> ActorStateTeleportWhileMoving() const;
            Ent::Gen::ActorStateTeleportWhileMoving addActorStateTeleportWhileMoving() const;
            void removeActorStateTeleportWhileMoving() const;
            std::optional<Ent::Gen::ActorStateTryEquipShamanStaff> ActorStateTryEquipShamanStaff() const;
            Ent::Gen::ActorStateTryEquipShamanStaff addActorStateTryEquipShamanStaff() const;
            void removeActorStateTryEquipShamanStaff() const;
            std::optional<Ent::Gen::ActorStateTryUpgradeShamanStaff> ActorStateTryUpgradeShamanStaff() const;
            Ent::Gen::ActorStateTryUpgradeShamanStaff addActorStateTryUpgradeShamanStaff() const;
            void removeActorStateTryUpgradeShamanStaff() const;
            std::optional<Ent::Gen::EntityStateAboutToBeHatched> EntityStateAboutToBeHatched() const;
            Ent::Gen::EntityStateAboutToBeHatched addEntityStateAboutToBeHatched() const;
            void removeEntityStateAboutToBeHatched() const;
            std::optional<Ent::Gen::EntityStateAerialJump> EntityStateAerialJump() const;
            Ent::Gen::EntityStateAerialJump addEntityStateAerialJump() const;
            void removeEntityStateAerialJump() const;
            std::optional<Ent::Gen::EntityStateAimAt> EntityStateAimAt() const;
            Ent::Gen::EntityStateAimAt addEntityStateAimAt() const;
            void removeEntityStateAimAt() const;
            std::optional<Ent::Gen::EntityStateAirControl> EntityStateAirControl() const;
            Ent::Gen::EntityStateAirControl addEntityStateAirControl() const;
            void removeEntityStateAirControl() const;
            std::optional<Ent::Gen::EntityStateApplyExtraLife> EntityStateApplyExtraLife() const;
            Ent::Gen::EntityStateApplyExtraLife addEntityStateApplyExtraLife() const;
            void removeEntityStateApplyExtraLife() const;
            std::optional<Ent::Gen::EntityStateAskStaffGuide> EntityStateAskStaffGuide() const;
            Ent::Gen::EntityStateAskStaffGuide addEntityStateAskStaffGuide() const;
            void removeEntityStateAskStaffGuide() const;
            std::optional<Ent::Gen::EntityStateAttackDive> EntityStateAttackDive() const;
            Ent::Gen::EntityStateAttackDive addEntityStateAttackDive() const;
            void removeEntityStateAttackDive() const;
            std::optional<Ent::Gen::EntityStateAttitudeGroggy> EntityStateAttitudeGroggy() const;
            Ent::Gen::EntityStateAttitudeGroggy addEntityStateAttitudeGroggy() const;
            void removeEntityStateAttitudeGroggy() const;
            std::optional<Ent::Gen::EntityStateBackwardDodge> EntityStateBackwardDodge() const;
            Ent::Gen::EntityStateBackwardDodge addEntityStateBackwardDodge() const;
            void removeEntityStateBackwardDodge() const;
            std::optional<Ent::Gen::EntityStateBackwardLand> EntityStateBackwardLand() const;
            Ent::Gen::EntityStateBackwardLand addEntityStateBackwardLand() const;
            void removeEntityStateBackwardLand() const;
            std::optional<Ent::Gen::EntityStateBeingBlockedByVine> EntityStateBeingBlockedByVine() const;
            Ent::Gen::EntityStateBeingBlockedByVine addEntityStateBeingBlockedByVine() const;
            void removeEntityStateBeingBlockedByVine() const;
            std::optional<Ent::Gen::EntityStateBeingInReeds> EntityStateBeingInReeds() const;
            Ent::Gen::EntityStateBeingInReeds addEntityStateBeingInReeds() const;
            void removeEntityStateBeingInReeds() const;
            std::optional<Ent::Gen::EntityStateBeingLinked> EntityStateBeingLinked() const;
            Ent::Gen::EntityStateBeingLinked addEntityStateBeingLinked() const;
            void removeEntityStateBeingLinked() const;
            std::optional<Ent::Gen::EntityStateBeingOnSlope> EntityStateBeingOnSlope() const;
            Ent::Gen::EntityStateBeingOnSlope addEntityStateBeingOnSlope() const;
            void removeEntityStateBeingOnSlope() const;
            std::optional<Ent::Gen::EntityStateBeingOnSpike> EntityStateBeingOnSpike() const;
            Ent::Gen::EntityStateBeingOnSpike addEntityStateBeingOnSpike() const;
            void removeEntityStateBeingOnSpike() const;
            std::optional<Ent::Gen::EntityStateBite> EntityStateBite() const;
            Ent::Gen::EntityStateBite addEntityStateBite() const;
            void removeEntityStateBite() const;
            std::optional<Ent::Gen::EntityStateBiteAttack> EntityStateBiteAttack() const;
            Ent::Gen::EntityStateBiteAttack addEntityStateBiteAttack() const;
            void removeEntityStateBiteAttack() const;
            std::optional<Ent::Gen::EntityStateBiteIn> EntityStateBiteIn() const;
            Ent::Gen::EntityStateBiteIn addEntityStateBiteIn() const;
            void removeEntityStateBiteIn() const;
            std::optional<Ent::Gen::EntityStateBiteOut> EntityStateBiteOut() const;
            Ent::Gen::EntityStateBiteOut addEntityStateBiteOut() const;
            void removeEntityStateBiteOut() const;
            std::optional<Ent::Gen::EntityStateBitten> EntityStateBitten() const;
            Ent::Gen::EntityStateBitten addEntityStateBitten() const;
            void removeEntityStateBitten() const;
            std::optional<Ent::Gen::EntityStateBittenDefense> EntityStateBittenDefense() const;
            Ent::Gen::EntityStateBittenDefense addEntityStateBittenDefense() const;
            void removeEntityStateBittenDefense() const;
            std::optional<Ent::Gen::EntityStateBoidsHomePos> EntityStateBoidsHomePos() const;
            Ent::Gen::EntityStateBoidsHomePos addEntityStateBoidsHomePos() const;
            void removeEntityStateBoidsHomePos() const;
            std::optional<Ent::Gen::EntityStateBounce> EntityStateBounce() const;
            Ent::Gen::EntityStateBounce addEntityStateBounce() const;
            void removeEntityStateBounce() const;
            std::optional<Ent::Gen::EntityStateBounceLand> EntityStateBounceLand() const;
            Ent::Gen::EntityStateBounceLand addEntityStateBounceLand() const;
            void removeEntityStateBounceLand() const;
            std::optional<Ent::Gen::EntityStateBreakableBreaking> EntityStateBreakableBreaking() const;
            Ent::Gen::EntityStateBreakableBreaking addEntityStateBreakableBreaking() const;
            void removeEntityStateBreakableBreaking() const;
            std::optional<Ent::Gen::EntityStateBreakableBroken> EntityStateBreakableBroken() const;
            Ent::Gen::EntityStateBreakableBroken addEntityStateBreakableBroken() const;
            void removeEntityStateBreakableBroken() const;
            std::optional<Ent::Gen::EntityStateBreakableEntire> EntityStateBreakableEntire() const;
            Ent::Gen::EntityStateBreakableEntire addEntityStateBreakableEntire() const;
            void removeEntityStateBreakableEntire() const;
            std::optional<Ent::Gen::EntityStateBridgeAttached> EntityStateBridgeAttached() const;
            Ent::Gen::EntityStateBridgeAttached addEntityStateBridgeAttached() const;
            void removeEntityStateBridgeAttached() const;
            std::optional<Ent::Gen::EntityStateBridgeAttracted> EntityStateBridgeAttracted() const;
            Ent::Gen::EntityStateBridgeAttracted addEntityStateBridgeAttracted() const;
            void removeEntityStateBridgeAttracted() const;
            std::optional<Ent::Gen::EntityStateBridgeBeingControlled> EntityStateBridgeBeingControlled() const;
            Ent::Gen::EntityStateBridgeBeingControlled addEntityStateBridgeBeingControlled() const;
            void removeEntityStateBridgeBeingControlled() const;
            std::optional<Ent::Gen::EntityStateCallAndMountSpiritAnimal> EntityStateCallAndMountSpiritAnimal() const;
            Ent::Gen::EntityStateCallAndMountSpiritAnimal addEntityStateCallAndMountSpiritAnimal() const;
            void removeEntityStateCallAndMountSpiritAnimal() const;
            std::optional<Ent::Gen::EntityStateCanNotBePerceived> EntityStateCanNotBePerceived() const;
            Ent::Gen::EntityStateCanNotBePerceived addEntityStateCanNotBePerceived() const;
            void removeEntityStateCanNotBePerceived() const;
            std::optional<Ent::Gen::EntityStateChargeMode> EntityStateChargeMode() const;
            Ent::Gen::EntityStateChargeMode addEntityStateChargeMode() const;
            void removeEntityStateChargeMode() const;
            std::optional<Ent::Gen::EntityStateChargedJump> EntityStateChargedJump() const;
            Ent::Gen::EntityStateChargedJump addEntityStateChargedJump() const;
            void removeEntityStateChargedJump() const;
            std::optional<Ent::Gen::EntityStateChargingJump> EntityStateChargingJump() const;
            Ent::Gen::EntityStateChargingJump addEntityStateChargingJump() const;
            void removeEntityStateChargingJump() const;
            std::optional<Ent::Gen::EntityStateCinematicCompleted> EntityStateCinematicCompleted() const;
            Ent::Gen::EntityStateCinematicCompleted addEntityStateCinematicCompleted() const;
            void removeEntityStateCinematicCompleted() const;
            std::optional<Ent::Gen::EntityStateCinematicReady> EntityStateCinematicReady() const;
            Ent::Gen::EntityStateCinematicReady addEntityStateCinematicReady() const;
            void removeEntityStateCinematicReady() const;
            std::optional<Ent::Gen::EntityStateClassicDodge> EntityStateClassicDodge() const;
            Ent::Gen::EntityStateClassicDodge addEntityStateClassicDodge() const;
            void removeEntityStateClassicDodge() const;
            std::optional<Ent::Gen::EntityStateClassicLand> EntityStateClassicLand() const;
            Ent::Gen::EntityStateClassicLand addEntityStateClassicLand() const;
            void removeEntityStateClassicLand() const;
            std::optional<Ent::Gen::EntityStateClimbWaterfall> EntityStateClimbWaterfall() const;
            Ent::Gen::EntityStateClimbWaterfall addEntityStateClimbWaterfall() const;
            void removeEntityStateClimbWaterfall() const;
            std::optional<Ent::Gen::EntityStateClimbWaterfallImpulse> EntityStateClimbWaterfallImpulse() const;
            Ent::Gen::EntityStateClimbWaterfallImpulse addEntityStateClimbWaterfallImpulse() const;
            void removeEntityStateClimbWaterfallImpulse() const;
            std::optional<Ent::Gen::EntityStateCollectVertebrae> EntityStateCollectVertebrae() const;
            Ent::Gen::EntityStateCollectVertebrae addEntityStateCollectVertebrae() const;
            void removeEntityStateCollectVertebrae() const;
            std::optional<Ent::Gen::EntityStateCombat> EntityStateCombat() const;
            Ent::Gen::EntityStateCombat addEntityStateCombat() const;
            void removeEntityStateCombat() const;
            std::optional<Ent::Gen::EntityStateConstrainedInput> EntityStateConstrainedInput() const;
            Ent::Gen::EntityStateConstrainedInput addEntityStateConstrainedInput() const;
            void removeEntityStateConstrainedInput() const;
            std::optional<Ent::Gen::EntityStateConstrainedMove> EntityStateConstrainedMove() const;
            Ent::Gen::EntityStateConstrainedMove addEntityStateConstrainedMove() const;
            void removeEntityStateConstrainedMove() const;
            std::optional<Ent::Gen::EntityStateControlGPE> EntityStateControlGPE() const;
            Ent::Gen::EntityStateControlGPE addEntityStateControlGPE() const;
            void removeEntityStateControlGPE() const;
            std::optional<Ent::Gen::EntityStateCreatureHatching> EntityStateCreatureHatching() const;
            Ent::Gen::EntityStateCreatureHatching addEntityStateCreatureHatching() const;
            void removeEntityStateCreatureHatching() const;
            std::optional<Ent::Gen::EntityStateCreatureProfile> EntityStateCreatureProfile() const;
            Ent::Gen::EntityStateCreatureProfile addEntityStateCreatureProfile() const;
            void removeEntityStateCreatureProfile() const;
            std::optional<Ent::Gen::EntityStateDamageLand> EntityStateDamageLand() const;
            Ent::Gen::EntityStateDamageLand addEntityStateDamageLand() const;
            void removeEntityStateDamageLand() const;
            std::optional<Ent::Gen::EntityStateDeathLand> EntityStateDeathLand() const;
            Ent::Gen::EntityStateDeathLand addEntityStateDeathLand() const;
            void removeEntityStateDeathLand() const;
            std::optional<Ent::Gen::EntityStateDisablePerceptionRequest> EntityStateDisablePerceptionRequest() const;
            Ent::Gen::EntityStateDisablePerceptionRequest addEntityStateDisablePerceptionRequest() const;
            void removeEntityStateDisablePerceptionRequest() const;
            std::optional<Ent::Gen::EntityStateDisabledVertebrae> EntityStateDisabledVertebrae() const;
            Ent::Gen::EntityStateDisabledVertebrae addEntityStateDisabledVertebrae() const;
            void removeEntityStateDisabledVertebrae() const;
            std::optional<Ent::Gen::EntityStateDisguise> EntityStateDisguise() const;
            Ent::Gen::EntityStateDisguise addEntityStateDisguise() const;
            void removeEntityStateDisguise() const;
            std::optional<Ent::Gen::EntityStateDisplayHatchingCost> EntityStateDisplayHatchingCost() const;
            Ent::Gen::EntityStateDisplayHatchingCost addEntityStateDisplayHatchingCost() const;
            void removeEntityStateDisplayHatchingCost() const;
            std::optional<Ent::Gen::EntityStateDodgeCooldown> EntityStateDodgeCooldown() const;
            Ent::Gen::EntityStateDodgeCooldown addEntityStateDodgeCooldown() const;
            void removeEntityStateDodgeCooldown() const;
            std::optional<Ent::Gen::EntityStateEjectedLand> EntityStateEjectedLand() const;
            Ent::Gen::EntityStateEjectedLand addEntityStateEjectedLand() const;
            void removeEntityStateEjectedLand() const;
            std::optional<Ent::Gen::EntityStateEnergyRootAbortHatching> EntityStateEnergyRootAbortHatching() const;
            Ent::Gen::EntityStateEnergyRootAbortHatching addEntityStateEnergyRootAbortHatching() const;
            void removeEntityStateEnergyRootAbortHatching() const;
            std::optional<Ent::Gen::EntityStateEnergyRootHatching> EntityStateEnergyRootHatching() const;
            Ent::Gen::EntityStateEnergyRootHatching addEntityStateEnergyRootHatching() const;
            void removeEntityStateEnergyRootHatching() const;
            std::optional<Ent::Gen::EntityStateEnergySide> EntityStateEnergySide() const;
            Ent::Gen::EntityStateEnergySide addEntityStateEnergySide() const;
            void removeEntityStateEnergySide() const;
            std::optional<Ent::Gen::EntityStateEnergySpoutState> EntityStateEnergySpoutState() const;
            Ent::Gen::EntityStateEnergySpoutState addEntityStateEnergySpoutState() const;
            void removeEntityStateEnergySpoutState() const;
            std::optional<Ent::Gen::EntityStateExtraLife> EntityStateExtraLife() const;
            Ent::Gen::EntityStateExtraLife addEntityStateExtraLife() const;
            void removeEntityStateExtraLife() const;
            std::optional<Ent::Gen::EntityStateFailingOrder> EntityStateFailingOrder() const;
            Ent::Gen::EntityStateFailingOrder addEntityStateFailingOrder() const;
            void removeEntityStateFailingOrder() const;
            std::optional<Ent::Gen::EntityStateFall> EntityStateFall() const;
            Ent::Gen::EntityStateFall addEntityStateFall() const;
            void removeEntityStateFall() const;
            std::optional<Ent::Gen::EntityStateFallDying> EntityStateFallDying() const;
            Ent::Gen::EntityStateFallDying addEntityStateFallDying() const;
            void removeEntityStateFallDying() const;
            std::optional<Ent::Gen::EntityStateFallInjured> EntityStateFallInjured() const;
            Ent::Gen::EntityStateFallInjured addEntityStateFallInjured() const;
            void removeEntityStateFallInjured() const;
            std::optional<Ent::Gen::EntityStateFallSafe> EntityStateFallSafe() const;
            Ent::Gen::EntityStateFallSafe addEntityStateFallSafe() const;
            void removeEntityStateFallSafe() const;
            std::optional<Ent::Gen::EntityStateFastRun> EntityStateFastRun() const;
            Ent::Gen::EntityStateFastRun addEntityStateFastRun() const;
            void removeEntityStateFastRun() const;
            std::optional<Ent::Gen::EntityStateForceCanBeTargeted> EntityStateForceCanBeTargeted() const;
            Ent::Gen::EntityStateForceCanBeTargeted addEntityStateForceCanBeTargeted() const;
            void removeEntityStateForceCanBeTargeted() const;
            std::optional<Ent::Gen::EntityStateGrab> EntityStateGrab() const;
            Ent::Gen::EntityStateGrab addEntityStateGrab() const;
            void removeEntityStateGrab() const;
            std::optional<Ent::Gen::EntityStateGrabAttack> EntityStateGrabAttack() const;
            Ent::Gen::EntityStateGrabAttack addEntityStateGrabAttack() const;
            void removeEntityStateGrabAttack() const;
            std::optional<Ent::Gen::EntityStateGrabIn> EntityStateGrabIn() const;
            Ent::Gen::EntityStateGrabIn addEntityStateGrabIn() const;
            void removeEntityStateGrabIn() const;
            std::optional<Ent::Gen::EntityStateGrabOut> EntityStateGrabOut() const;
            Ent::Gen::EntityStateGrabOut addEntityStateGrabOut() const;
            void removeEntityStateGrabOut() const;
            std::optional<Ent::Gen::EntityStateGrabbed> EntityStateGrabbed() const;
            Ent::Gen::EntityStateGrabbed addEntityStateGrabbed() const;
            void removeEntityStateGrabbed() const;
            std::optional<Ent::Gen::EntityStateGrabbedIn> EntityStateGrabbedIn() const;
            Ent::Gen::EntityStateGrabbedIn addEntityStateGrabbedIn() const;
            void removeEntityStateGrabbedIn() const;
            std::optional<Ent::Gen::EntityStateGrabbedOut> EntityStateGrabbedOut() const;
            Ent::Gen::EntityStateGrabbedOut addEntityStateGrabbedOut() const;
            void removeEntityStateGrabbedOut() const;
            std::optional<Ent::Gen::EntityStateGrasp> EntityStateGrasp() const;
            Ent::Gen::EntityStateGrasp addEntityStateGrasp() const;
            void removeEntityStateGrasp() const;
            std::optional<Ent::Gen::EntityStateGroundedJump> EntityStateGroundedJump() const;
            Ent::Gen::EntityStateGroundedJump addEntityStateGroundedJump() const;
            void removeEntityStateGroundedJump() const;
            std::optional<Ent::Gen::EntityStateHide> EntityStateHide() const;
            Ent::Gen::EntityStateHide addEntityStateHide() const;
            void removeEntityStateHide() const;
            std::optional<Ent::Gen::EntityStateHideIn> EntityStateHideIn() const;
            Ent::Gen::EntityStateHideIn addEntityStateHideIn() const;
            void removeEntityStateHideIn() const;
            std::optional<Ent::Gen::EntityStateHideOut> EntityStateHideOut() const;
            Ent::Gen::EntityStateHideOut addEntityStateHideOut() const;
            void removeEntityStateHideOut() const;
            std::optional<Ent::Gen::EntityStateHintFull> EntityStateHintFull() const;
            Ent::Gen::EntityStateHintFull addEntityStateHintFull() const;
            void removeEntityStateHintFull() const;
            std::optional<Ent::Gen::EntityStateHintLight> EntityStateHintLight() const;
            Ent::Gen::EntityStateHintLight addEntityStateHintLight() const;
            void removeEntityStateHintLight() const;
            std::optional<Ent::Gen::EntityStateHintNone> EntityStateHintNone() const;
            Ent::Gen::EntityStateHintNone addEntityStateHintNone() const;
            void removeEntityStateHintNone() const;
            std::optional<Ent::Gen::EntityStateHitWall> EntityStateHitWall() const;
            Ent::Gen::EntityStateHitWall addEntityStateHitWall() const;
            void removeEntityStateHitWall() const;
            std::optional<Ent::Gen::EntityStateHoldingStaffVertebras> EntityStateHoldingStaffVertebras() const;
            Ent::Gen::EntityStateHoldingStaffVertebras addEntityStateHoldingStaffVertebras() const;
            void removeEntityStateHoldingStaffVertebras() const;
            std::optional<Ent::Gen::EntityStateImmersedJump> EntityStateImmersedJump() const;
            Ent::Gen::EntityStateImmersedJump addEntityStateImmersedJump() const;
            void removeEntityStateImmersedJump() const;
            std::optional<Ent::Gen::EntityStateInVertebraeArea> EntityStateInVertebraeArea() const;
            Ent::Gen::EntityStateInVertebraeArea addEntityStateInVertebraeArea() const;
            void removeEntityStateInVertebraeArea() const;
            std::optional<Ent::Gen::EntityStateIncapacitated> EntityStateIncapacitated() const;
            Ent::Gen::EntityStateIncapacitated addEntityStateIncapacitated() const;
            void removeEntityStateIncapacitated() const;
            std::optional<Ent::Gen::EntityStateInconvertible> EntityStateInconvertible() const;
            Ent::Gen::EntityStateInconvertible addEntityStateInconvertible() const;
            void removeEntityStateInconvertible() const;
            std::optional<Ent::Gen::EntityStateInjured> EntityStateInjured() const;
            Ent::Gen::EntityStateInjured addEntityStateInjured() const;
            void removeEntityStateInjured() const;
            std::optional<Ent::Gen::EntityStateInteractedGPE> EntityStateInteractedGPE() const;
            Ent::Gen::EntityStateInteractedGPE addEntityStateInteractedGPE() const;
            void removeEntityStateInteractedGPE() const;
            std::optional<Ent::Gen::EntityStateJumpHeightMultiplier> EntityStateJumpHeightMultiplier() const;
            Ent::Gen::EntityStateJumpHeightMultiplier addEntityStateJumpHeightMultiplier() const;
            void removeEntityStateJumpHeightMultiplier() const;
            std::optional<Ent::Gen::EntityStateJustStarted> EntityStateJustStarted() const;
            Ent::Gen::EntityStateJustStarted addEntityStateJustStarted() const;
            void removeEntityStateJustStarted() const;
            std::optional<Ent::Gen::EntityStateLateralDodge> EntityStateLateralDodge() const;
            Ent::Gen::EntityStateLateralDodge addEntityStateLateralDodge() const;
            void removeEntityStateLateralDodge() const;
            std::optional<Ent::Gen::EntityStateLateralLand> EntityStateLateralLand() const;
            Ent::Gen::EntityStateLateralLand addEntityStateLateralLand() const;
            void removeEntityStateLateralLand() const;
            std::optional<Ent::Gen::EntityStateManageChildEntityPool> EntityStateManageChildEntityPool() const;
            Ent::Gen::EntityStateManageChildEntityPool addEntityStateManageChildEntityPool() const;
            void removeEntityStateManageChildEntityPool() const;
            std::optional<Ent::Gen::EntityStateMask> EntityStateMask() const;
            Ent::Gen::EntityStateMask addEntityStateMask() const;
            void removeEntityStateMask() const;
            std::optional<Ent::Gen::EntityStateMeditateToInteract> EntityStateMeditateToInteract() const;
            Ent::Gen::EntityStateMeditateToInteract addEntityStateMeditateToInteract() const;
            void removeEntityStateMeditateToInteract() const;
            std::optional<Ent::Gen::EntityStateMineRespawning> EntityStateMineRespawning() const;
            Ent::Gen::EntityStateMineRespawning addEntityStateMineRespawning() const;
            void removeEntityStateMineRespawning() const;
            std::optional<Ent::Gen::EntityStateMineScaling> EntityStateMineScaling() const;
            Ent::Gen::EntityStateMineScaling addEntityStateMineScaling() const;
            void removeEntityStateMineScaling() const;
            std::optional<Ent::Gen::EntityStateMotionConstrained> EntityStateMotionConstrained() const;
            Ent::Gen::EntityStateMotionConstrained addEntityStateMotionConstrained() const;
            void removeEntityStateMotionConstrained() const;
            std::optional<Ent::Gen::EntityStateMotionConstrainedLand> EntityStateMotionConstrainedLand() const;
            Ent::Gen::EntityStateMotionConstrainedLand addEntityStateMotionConstrainedLand() const;
            void removeEntityStateMotionConstrainedLand() const;
            std::optional<Ent::Gen::EntityStateMoveOnOffMeshLink> EntityStateMoveOnOffMeshLink() const;
            Ent::Gen::EntityStateMoveOnOffMeshLink addEntityStateMoveOnOffMeshLink() const;
            void removeEntityStateMoveOnOffMeshLink() const;
            std::optional<Ent::Gen::EntityStateOrderingAttack> EntityStateOrderingAttack() const;
            Ent::Gen::EntityStateOrderingAttack addEntityStateOrderingAttack() const;
            void removeEntityStateOrderingAttack() const;
            std::optional<Ent::Gen::EntityStateOrientedDrift> EntityStateOrientedDrift() const;
            Ent::Gen::EntityStateOrientedDrift addEntityStateOrientedDrift() const;
            void removeEntityStateOrientedDrift() const;
            std::optional<Ent::Gen::EntityStateParried> EntityStateParried() const;
            Ent::Gen::EntityStateParried addEntityStateParried() const;
            void removeEntityStateParried() const;
            std::optional<Ent::Gen::EntityStateParry> EntityStateParry() const;
            Ent::Gen::EntityStateParry addEntityStateParry() const;
            void removeEntityStateParry() const;
            std::optional<Ent::Gen::EntityStateParryCooldown> EntityStateParryCooldown() const;
            Ent::Gen::EntityStateParryCooldown addEntityStateParryCooldown() const;
            void removeEntityStateParryCooldown() const;
            std::optional<Ent::Gen::EntityStatePhysicsIdle> EntityStatePhysicsIdle() const;
            Ent::Gen::EntityStatePhysicsIdle addEntityStatePhysicsIdle() const;
            void removeEntityStatePhysicsIdle() const;
            std::optional<Ent::Gen::EntityStatePhysicsMove> EntityStatePhysicsMove() const;
            Ent::Gen::EntityStatePhysicsMove addEntityStatePhysicsMove() const;
            void removeEntityStatePhysicsMove() const;
            std::optional<Ent::Gen::EntityStatePickableDistributor> EntityStatePickableDistributor() const;
            Ent::Gen::EntityStatePickableDistributor addEntityStatePickableDistributor() const;
            void removeEntityStatePickableDistributor() const;
            std::optional<Ent::Gen::EntityStatePlayer> EntityStatePlayer() const;
            Ent::Gen::EntityStatePlayer addEntityStatePlayer() const;
            void removeEntityStatePlayer() const;
            std::optional<Ent::Gen::EntityStatePlungeLand> EntityStatePlungeLand() const;
            Ent::Gen::EntityStatePlungeLand addEntityStatePlungeLand() const;
            void removeEntityStatePlungeLand() const;
            std::optional<Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh> EntityStatePrepareToHoldingOnToNavigationMesh() const;
            Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh addEntityStatePrepareToHoldingOnToNavigationMesh() const;
            void removeEntityStatePrepareToHoldingOnToNavigationMesh() const;
            std::optional<Ent::Gen::EntityStateRaise> EntityStateRaise() const;
            Ent::Gen::EntityStateRaise addEntityStateRaise() const;
            void removeEntityStateRaise() const;
            std::optional<Ent::Gen::EntityStateReadyToGiveOrder> EntityStateReadyToGiveOrder() const;
            Ent::Gen::EntityStateReadyToGiveOrder addEntityStateReadyToGiveOrder() const;
            void removeEntityStateReadyToGiveOrder() const;
            std::optional<Ent::Gen::EntityStateRecoverLand> EntityStateRecoverLand() const;
            Ent::Gen::EntityStateRecoverLand addEntityStateRecoverLand() const;
            void removeEntityStateRecoverLand() const;
            std::optional<Ent::Gen::EntityStateRegainCapacity> EntityStateRegainCapacity() const;
            Ent::Gen::EntityStateRegainCapacity addEntityStateRegainCapacity() const;
            void removeEntityStateRegainCapacity() const;
            std::optional<Ent::Gen::EntityStateReserveMountSlots> EntityStateReserveMountSlots() const;
            Ent::Gen::EntityStateReserveMountSlots addEntityStateReserveMountSlots() const;
            void removeEntityStateReserveMountSlots() const;
            std::optional<Ent::Gen::EntityStateRespawn> EntityStateRespawn() const;
            Ent::Gen::EntityStateRespawn addEntityStateRespawn() const;
            void removeEntityStateRespawn() const;
            std::optional<Ent::Gen::EntityStateRespawnability> EntityStateRespawnability() const;
            Ent::Gen::EntityStateRespawnability addEntityStateRespawnability() const;
            void removeEntityStateRespawnability() const;
            std::optional<Ent::Gen::EntityStateRevive> EntityStateRevive() const;
            Ent::Gen::EntityStateRevive addEntityStateRevive() const;
            void removeEntityStateRevive() const;
            std::optional<Ent::Gen::EntityStateSavePointActivated> EntityStateSavePointActivated() const;
            Ent::Gen::EntityStateSavePointActivated addEntityStateSavePointActivated() const;
            void removeEntityStateSavePointActivated() const;
            std::optional<Ent::Gen::EntityStateSetSavePoint> EntityStateSetSavePoint() const;
            Ent::Gen::EntityStateSetSavePoint addEntityStateSetSavePoint() const;
            void removeEntityStateSetSavePoint() const;
            std::optional<Ent::Gen::EntityStateShootHatchingEnergy> EntityStateShootHatchingEnergy() const;
            Ent::Gen::EntityStateShootHatchingEnergy addEntityStateShootHatchingEnergy() const;
            void removeEntityStateShootHatchingEnergy() const;
            std::optional<Ent::Gen::EntityStateSlowMotion> EntityStateSlowMotion() const;
            Ent::Gen::EntityStateSlowMotion addEntityStateSlowMotion() const;
            void removeEntityStateSlowMotion() const;
            std::optional<Ent::Gen::EntityStateSnappedToHatchingTarget> EntityStateSnappedToHatchingTarget() const;
            Ent::Gen::EntityStateSnappedToHatchingTarget addEntityStateSnappedToHatchingTarget() const;
            void removeEntityStateSnappedToHatchingTarget() const;
            std::optional<Ent::Gen::EntityStateSoftCollide> EntityStateSoftCollide() const;
            Ent::Gen::EntityStateSoftCollide addEntityStateSoftCollide() const;
            void removeEntityStateSoftCollide() const;
            std::optional<Ent::Gen::EntityStateSpeedLimiter> EntityStateSpeedLimiter() const;
            Ent::Gen::EntityStateSpeedLimiter addEntityStateSpeedLimiter() const;
            void removeEntityStateSpeedLimiter() const;
            std::optional<Ent::Gen::EntityStateSpiritAnimalBeingCalled> EntityStateSpiritAnimalBeingCalled() const;
            Ent::Gen::EntityStateSpiritAnimalBeingCalled addEntityStateSpiritAnimalBeingCalled() const;
            void removeEntityStateSpiritAnimalBeingCalled() const;
            std::optional<Ent::Gen::EntityStateSpiritAnimalFleshForm> EntityStateSpiritAnimalFleshForm() const;
            Ent::Gen::EntityStateSpiritAnimalFleshForm addEntityStateSpiritAnimalFleshForm() const;
            void removeEntityStateSpiritAnimalFleshForm() const;
            std::optional<Ent::Gen::EntityStateSpiritAnimalSoulForm> EntityStateSpiritAnimalSoulForm() const;
            Ent::Gen::EntityStateSpiritAnimalSoulForm addEntityStateSpiritAnimalSoulForm() const;
            void removeEntityStateSpiritAnimalSoulForm() const;
            std::optional<Ent::Gen::EntityStateSpiritAttack> EntityStateSpiritAttack() const;
            Ent::Gen::EntityStateSpiritAttack addEntityStateSpiritAttack() const;
            void removeEntityStateSpiritAttack() const;
            std::optional<Ent::Gen::EntityStateSpiritAttacked> EntityStateSpiritAttacked() const;
            Ent::Gen::EntityStateSpiritAttacked addEntityStateSpiritAttacked() const;
            void removeEntityStateSpiritAttacked() const;
            std::optional<Ent::Gen::EntityStateSpiritShrineDisabled> EntityStateSpiritShrineDisabled() const;
            Ent::Gen::EntityStateSpiritShrineDisabled addEntityStateSpiritShrineDisabled() const;
            void removeEntityStateSpiritShrineDisabled() const;
            std::optional<Ent::Gen::EntityStateSpiritShrineEnabled> EntityStateSpiritShrineEnabled() const;
            Ent::Gen::EntityStateSpiritShrineEnabled addEntityStateSpiritShrineEnabled() const;
            void removeEntityStateSpiritShrineEnabled() const;
            std::optional<Ent::Gen::EntityStateStaffOwnedVertebras> EntityStateStaffOwnedVertebras() const;
            Ent::Gen::EntityStateStaffOwnedVertebras addEntityStateStaffOwnedVertebras() const;
            void removeEntityStateStaffOwnedVertebras() const;
            std::optional<Ent::Gen::EntityStateStaffVertebrasAutoRefill> EntityStateStaffVertebrasAutoRefill() const;
            Ent::Gen::EntityStateStaffVertebrasAutoRefill addEntityStateStaffVertebrasAutoRefill() const;
            void removeEntityStateStaffVertebrasAutoRefill() const;
            std::optional<Ent::Gen::EntityStateStalactiteFallen> EntityStateStalactiteFallen() const;
            Ent::Gen::EntityStateStalactiteFallen addEntityStateStalactiteFallen() const;
            void removeEntityStateStalactiteFallen() const;
            std::optional<Ent::Gen::EntityStateStalactiteReadyToFall> EntityStateStalactiteReadyToFall() const;
            Ent::Gen::EntityStateStalactiteReadyToFall addEntityStateStalactiteReadyToFall() const;
            void removeEntityStateStalactiteReadyToFall() const;
            std::optional<Ent::Gen::EntityStateStickedLand> EntityStateStickedLand() const;
            Ent::Gen::EntityStateStickedLand addEntityStateStickedLand() const;
            void removeEntityStateStickedLand() const;
            std::optional<Ent::Gen::EntityStateStrafeDodge> EntityStateStrafeDodge() const;
            Ent::Gen::EntityStateStrafeDodge addEntityStateStrafeDodge() const;
            void removeEntityStateStrafeDodge() const;
            std::optional<Ent::Gen::EntityStateStrongAttack> EntityStateStrongAttack() const;
            Ent::Gen::EntityStateStrongAttack addEntityStateStrongAttack() const;
            void removeEntityStateStrongAttack() const;
            std::optional<Ent::Gen::EntityStateStrongAttackCharged> EntityStateStrongAttackCharged() const;
            Ent::Gen::EntityStateStrongAttackCharged addEntityStateStrongAttackCharged() const;
            void removeEntityStateStrongAttackCharged() const;
            std::optional<Ent::Gen::EntityStateStrongAttackCharging> EntityStateStrongAttackCharging() const;
            Ent::Gen::EntityStateStrongAttackCharging addEntityStateStrongAttackCharging() const;
            void removeEntityStateStrongAttackCharging() const;
            std::optional<Ent::Gen::EntityStateStrongAttackJumped> EntityStateStrongAttackJumped() const;
            Ent::Gen::EntityStateStrongAttackJumped addEntityStateStrongAttackJumped() const;
            void removeEntityStateStrongAttackJumped() const;
            std::optional<Ent::Gen::EntityStateTakeDamageOnMount> EntityStateTakeDamageOnMount() const;
            Ent::Gen::EntityStateTakeDamageOnMount addEntityStateTakeDamageOnMount() const;
            void removeEntityStateTakeDamageOnMount() const;
            std::optional<Ent::Gen::EntityStateTooDeep> EntityStateTooDeep() const;
            Ent::Gen::EntityStateTooDeep addEntityStateTooDeep() const;
            void removeEntityStateTooDeep() const;
            std::optional<Ent::Gen::EntityStateTreeMetamorphosis> EntityStateTreeMetamorphosis() const;
            Ent::Gen::EntityStateTreeMetamorphosis addEntityStateTreeMetamorphosis() const;
            void removeEntityStateTreeMetamorphosis() const;
            std::optional<Ent::Gen::EntityStateTreeMetamorphosisUsingScale> EntityStateTreeMetamorphosisUsingScale() const;
            Ent::Gen::EntityStateTreeMetamorphosisUsingScale addEntityStateTreeMetamorphosisUsingScale() const;
            void removeEntityStateTreeMetamorphosisUsingScale() const;
            std::optional<Ent::Gen::EntityStateTreeSwitchTransition> EntityStateTreeSwitchTransition() const;
            Ent::Gen::EntityStateTreeSwitchTransition addEntityStateTreeSwitchTransition() const;
            void removeEntityStateTreeSwitchTransition() const;
            std::optional<Ent::Gen::EntityStateTreeTurretTargeting> EntityStateTreeTurretTargeting() const;
            Ent::Gen::EntityStateTreeTurretTargeting addEntityStateTreeTurretTargeting() const;
            void removeEntityStateTreeTurretTargeting() const;
            std::optional<Ent::Gen::EntityStateTriggerBeamTargetEvent> EntityStateTriggerBeamTargetEvent() const;
            Ent::Gen::EntityStateTriggerBeamTargetEvent addEntityStateTriggerBeamTargetEvent() const;
            void removeEntityStateTriggerBeamTargetEvent() const;
            std::optional<Ent::Gen::EntityStateTryUnmount> EntityStateTryUnmount() const;
            Ent::Gen::EntityStateTryUnmount addEntityStateTryUnmount() const;
            void removeEntityStateTryUnmount() const;
            std::optional<Ent::Gen::EntityStateUndergroundCavity> EntityStateUndergroundCavity() const;
            Ent::Gen::EntityStateUndergroundCavity addEntityStateUndergroundCavity() const;
            void removeEntityStateUndergroundCavity() const;
            std::optional<Ent::Gen::EntityStateUseAsActiveCheckpoint> EntityStateUseAsActiveCheckpoint() const;
            Ent::Gen::EntityStateUseAsActiveCheckpoint addEntityStateUseAsActiveCheckpoint() const;
            void removeEntityStateUseAsActiveCheckpoint() const;
            std::optional<Ent::Gen::EntityStateWaitToJumpAgain> EntityStateWaitToJumpAgain() const;
            Ent::Gen::EntityStateWaitToJumpAgain addEntityStateWaitToJumpAgain() const;
            void removeEntityStateWaitToJumpAgain() const;
            std::optional<Ent::Gen::EntityStateWallRun> EntityStateWallRun() const;
            Ent::Gen::EntityStateWallRun addEntityStateWallRun() const;
            void removeEntityStateWallRun() const;
            std::optional<Ent::Gen::EntityStateWallRunDrop> EntityStateWallRunDrop() const;
            Ent::Gen::EntityStateWallRunDrop addEntityStateWallRunDrop() const;
            void removeEntityStateWallRunDrop() const;
            std::optional<Ent::Gen::EntityStateWallRunJump> EntityStateWallRunJump() const;
            Ent::Gen::EntityStateWallRunJump addEntityStateWallRunJump() const;
            void removeEntityStateWallRunJump() const;
            std::optional<Ent::Gen::EntityStateWaterfallEndJump> EntityStateWaterfallEndJump() const;
            Ent::Gen::EntityStateWaterfallEndJump addEntityStateWaterfallEndJump() const;
            void removeEntityStateWaterfallEndJump() const;
        };

        struct Object : HelperObject // Object
        {
            Object(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Object";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorStates ActorStates() const;
            Ent::Gen::Color Color() const;
            Ent::Gen::Object_Components Components() const;
            Ent::Gen::Object_MaxActivationLevel MaxActivationLevel() const;
            Ent::Gen::String Name() const;
            Ent::Gen::String Thumbnail() const;
            Ent::Gen::Bool __removed__() const;
            Ent::Gen::String _comment() const;
        };

        struct UnitTestComponent : HelperObject // Object
        {
            UnitTestComponent(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "UnitTestComponent";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Object Entity() const;
            Ent::Gen::PrimitiveSet<ReviveSideEnum> EnumSet() const;
            Ent::Gen::Position Position() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct Entity : HelperObject // Object
        {
            Entity(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Entity";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorStates ActorStates() const;
            Ent::Gen::Color Color() const;
            Ent::Gen::Components Components() const;
            Ent::Gen::MaxActivationLevel MaxActivationLevel() const;
            Ent::Gen::String Name() const;
            Ent::Gen::String Thumbnail() const;
            Ent::Gen::String _comment() const;
        };

        struct SubScene : HelperObject // Object
        {
            SubScene(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SubScene";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ObjectSet<char const*, Ent::Gen::Entity> Embedded() const;
            Ent::Gen::RuntimeMode RuntimeMode() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct Scene : HelperObject // Object
        {
            Scene(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Scene";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ObjectSet<char const*, Ent::Gen::Entity> Objects() const;
            Ent::Gen::Int Version() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateTeleport_Inputs : HelperObject // Object
        {
            ActorStateTeleport_Inputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateTeleport::Inputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Orientation Orientation() const;
            Ent::Gen::Position Position() const;
            Ent::Gen::Bool ResetCamera() const;
            Ent::Gen::Bool TouchGround() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateTeleportWhileMovingInputs : HelperObject // Object
        {
            ActorStateTeleportWhileMovingInputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateTeleportWhileMovingInputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool aerialMount() const;
            Ent::Gen::Vector3 direction() const;
            Ent::Gen::Quat orientation() const;
            Ent::Gen::Position position() const;
            Ent::Gen::Float speedRequired() const;
        };

        struct ActorStateFlockingChangingParams_Params : HelperObject // Object
        {
            ActorStateFlockingChangingParams_Params(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateFlockingChangingParams::Params";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ApplyAfterCurrent() const;
            Ent::Gen::Bool ApplyOnBud() const;
            Ent::Gen::Float DelayRandom() const;
            Ent::Gen::Float DelayStatic() const;
            Ent::Gen::String Hash() const;
            Ent::Gen::Int Layer() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateArbiterDecision : EnumPropHelper<ActorStateArbiterDecision, ActorStateArbiterDecisionEnum> // Enum
        {
            using Enum = ActorStateArbiterDecisionEnum;
            using PropHelper<ActorStateArbiterDecision, Enum>::operator=;
            ActorStateArbiterDecision(Ent::Node* _node): EnumPropHelper<ActorStateArbiterDecision, Enum>(_node) {}
            static constexpr char schemaName[] = "ActorStateArbiterDecision";
            static constexpr char const* enumToString[] = {
                "CancelCurrent",
                "Coexist",
                "RejectNew",
                "Specific",
                "Wait",
                "ArbiterDecision_COUNT",
            };
        };
        inline char const* toString(ActorStateArbiterDecisionEnum value)
        {
            if(size_t(value) >= std::size(ActorStateArbiterDecision::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ActorStateArbiterDecision::enumToString[size_t(value)];
        }
        inline char const* toInternal(ActorStateArbiterDecisionEnum value) { return toString(value); }
        template<> inline ActorStateArbiterDecisionEnum strToEnum<ActorStateArbiterDecisionEnum>(char const* value)
        {
            return static_cast<ActorStateArbiterDecisionEnum>(details::indexInEnum(value, ActorStateArbiterDecision::enumToString));
        }

        struct ActorState : HelperObject // Object
        {
            ActorState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct EntityStateWaterfallEndJump : HelperObject // Object
        {
            EntityStateWaterfallEndJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateWaterfallEndJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateWallRunJump : HelperObject // Object
        {
            EntityStateWallRunJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateWallRunJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateWallRunDrop : HelperObject // Object
        {
            EntityStateWallRunDrop(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateWallRunDrop";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateWallRun : HelperObject // Object
        {
            EntityStateWallRun(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateWallRun";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateWaitToJumpAgain : HelperObject // Object
        {
            EntityStateWaitToJumpAgain(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateWaitToJumpAgain";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateUseAsActiveCheckpoint : HelperObject // Object
        {
            EntityStateUseAsActiveCheckpoint(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateUseAsActiveCheckpoint";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateUndergroundCavity : HelperObject // Object
        {
            EntityStateUndergroundCavity(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateUndergroundCavity";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateTryUnmount : HelperObject // Object
        {
            EntityStateTryUnmount(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateTryUnmount";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateTriggerBeamTargetEvent : HelperObject // Object
        {
            EntityStateTriggerBeamTargetEvent(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateTriggerBeamTargetEvent";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateTreeTurretTargeting : HelperObject // Object
        {
            EntityStateTreeTurretTargeting(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateTreeTurretTargeting";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateTreeSwitchTransition : HelperObject // Object
        {
            EntityStateTreeSwitchTransition(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateTreeSwitchTransition";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateTreeMetamorphosisUsingScale : HelperObject // Object
        {
            EntityStateTreeMetamorphosisUsingScale(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateTreeMetamorphosisUsingScale";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateTreeMetamorphosis : HelperObject // Object
        {
            EntityStateTreeMetamorphosis(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateTreeMetamorphosis";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateTooDeep : HelperObject // Object
        {
            EntityStateTooDeep(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateTooDeep";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateTakeDamageOnMount : HelperObject // Object
        {
            EntityStateTakeDamageOnMount(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateTakeDamageOnMount";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStrongAttackJumped : HelperObject // Object
        {
            EntityStateStrongAttackJumped(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStrongAttackJumped";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStrongAttackCharging : HelperObject // Object
        {
            EntityStateStrongAttackCharging(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStrongAttackCharging";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStrongAttackCharged : HelperObject // Object
        {
            EntityStateStrongAttackCharged(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStrongAttackCharged";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStrongAttack : HelperObject // Object
        {
            EntityStateStrongAttack(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStrongAttack";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStrafeDodge : HelperObject // Object
        {
            EntityStateStrafeDodge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStrafeDodge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStickedLand : HelperObject // Object
        {
            EntityStateStickedLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStickedLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStalactiteReadyToFall : HelperObject // Object
        {
            EntityStateStalactiteReadyToFall(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStalactiteReadyToFall";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStalactiteFallen : HelperObject // Object
        {
            EntityStateStalactiteFallen(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStalactiteFallen";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStaffVertebrasAutoRefill : HelperObject // Object
        {
            EntityStateStaffVertebrasAutoRefill(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStaffVertebrasAutoRefill";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateStaffOwnedVertebras : HelperObject // Object
        {
            EntityStateStaffOwnedVertebras(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateStaffOwnedVertebras";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityStateStaffOwnedVertebras_Inputs Inputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSpiritShrineEnabled : HelperObject // Object
        {
            EntityStateSpiritShrineEnabled(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSpiritShrineEnabled";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSpiritShrineDisabled : HelperObject // Object
        {
            EntityStateSpiritShrineDisabled(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSpiritShrineDisabled";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSpiritAttacked : HelperObject // Object
        {
            EntityStateSpiritAttacked(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSpiritAttacked";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSpiritAttack : HelperObject // Object
        {
            EntityStateSpiritAttack(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSpiritAttack";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSpiritAnimalSoulForm : HelperObject // Object
        {
            EntityStateSpiritAnimalSoulForm(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSpiritAnimalSoulForm";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSpiritAnimalFleshForm : HelperObject // Object
        {
            EntityStateSpiritAnimalFleshForm(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSpiritAnimalFleshForm";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSpiritAnimalBeingCalled : HelperObject // Object
        {
            EntityStateSpiritAnimalBeingCalled(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSpiritAnimalBeingCalled";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSpeedLimiter : HelperObject // Object
        {
            EntityStateSpeedLimiter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSpeedLimiter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float SpeedMax() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSoftCollide : HelperObject // Object
        {
            EntityStateSoftCollide(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSoftCollide";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSnappedToHatchingTarget : HelperObject // Object
        {
            EntityStateSnappedToHatchingTarget(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSnappedToHatchingTarget";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSlowMotion : HelperObject // Object
        {
            EntityStateSlowMotion(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSlowMotion";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateShootHatchingEnergy : HelperObject // Object
        {
            EntityStateShootHatchingEnergy(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateShootHatchingEnergy";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSetSavePoint : HelperObject // Object
        {
            EntityStateSetSavePoint(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSetSavePoint";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateSavePointActivated : HelperObject // Object
        {
            EntityStateSavePointActivated(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateSavePointActivated";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateRevive : HelperObject // Object
        {
            EntityStateRevive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateRevive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityStateRevive_Inputs Inputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateRespawnability : HelperObject // Object
        {
            EntityStateRespawnability(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateRespawnability";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef RespawnPlaceEntityRef() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateRespawn : HelperObject // Object
        {
            EntityStateRespawn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateRespawn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateReserveMountSlots : HelperObject // Object
        {
            EntityStateReserveMountSlots(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateReserveMountSlots";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::MountableData MountableDataTo() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateRegainCapacity : HelperObject // Object
        {
            EntityStateRegainCapacity(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateRegainCapacity";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateRecoverLand : HelperObject // Object
        {
            EntityStateRecoverLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateRecoverLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateReadyToGiveOrder : HelperObject // Object
        {
            EntityStateReadyToGiveOrder(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateReadyToGiveOrder";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateRaise : HelperObject // Object
        {
            EntityStateRaise(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateRaise";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Damages() const;
            Ent::Gen::EnergySide EnergySide() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStatePrepareToHoldingOnToNavigationMesh : HelperObject // Object
        {
            EntityStatePrepareToHoldingOnToNavigationMesh(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStatePrepareToHoldingOnToNavigationMesh";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStatePlungeLand : HelperObject // Object
        {
            EntityStatePlungeLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStatePlungeLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStatePlayer : HelperObject // Object
        {
            EntityStatePlayer(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStatePlayer";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStatePickableDistributor : HelperObject // Object
        {
            EntityStatePickableDistributor(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStatePickableDistributor";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStatePhysicsMove : HelperObject // Object
        {
            EntityStatePhysicsMove(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStatePhysicsMove";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AngularVelocityMultiplier() const;
            Ent::Gen::Float CustomGravity() const;
            Ent::Gen::Float ForceMultiplier() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStatePhysicsIdle : HelperObject // Object
        {
            EntityStatePhysicsIdle(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStatePhysicsIdle";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateParryCooldown : HelperObject // Object
        {
            EntityStateParryCooldown(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateParryCooldown";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateParry : HelperObject // Object
        {
            EntityStateParry(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateParry";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateParried : HelperObject // Object
        {
            EntityStateParried(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateParried";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateOrientedDrift : HelperObject // Object
        {
            EntityStateOrientedDrift(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateOrientedDrift";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateOrderingAttack : HelperObject // Object
        {
            EntityStateOrderingAttack(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateOrderingAttack";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateMoveOnOffMeshLink : HelperObject // Object
        {
            EntityStateMoveOnOffMeshLink(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateMoveOnOffMeshLink";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateMotionConstrainedLand : HelperObject // Object
        {
            EntityStateMotionConstrainedLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateMotionConstrainedLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateMotionConstrained : HelperObject // Object
        {
            EntityStateMotionConstrained(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateMotionConstrained";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityStateMotionConstrained_Inputs Inputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateMineScaling : HelperObject // Object
        {
            EntityStateMineScaling(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateMineScaling";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateMineRespawning : HelperObject // Object
        {
            EntityStateMineRespawning(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateMineRespawning";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateMeditateToInteract : HelperObject // Object
        {
            EntityStateMeditateToInteract(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateMeditateToInteract";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateMask : HelperObject // Object
        {
            EntityStateMask(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateMask";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String MaskMeshPath() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateManageChildEntityPool : HelperObject // Object
        {
            EntityStateManageChildEntityPool(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateManageChildEntityPool";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityStateManageChildEntityPool_Inputs Inputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateLateralLand : HelperObject // Object
        {
            EntityStateLateralLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateLateralLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateLateralDodge : HelperObject // Object
        {
            EntityStateLateralDodge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateLateralDodge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateJustStarted : HelperObject // Object
        {
            EntityStateJustStarted(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateJustStarted";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateJumpHeightMultiplier : HelperObject // Object
        {
            EntityStateJumpHeightMultiplier(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateJumpHeightMultiplier";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float JumpHeightMultiplier() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateInteractedGPE : HelperObject // Object
        {
            EntityStateInteractedGPE(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateInteractedGPE";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateInjured : HelperObject // Object
        {
            EntityStateInjured(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateInjured";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateInconvertible : HelperObject // Object
        {
            EntityStateInconvertible(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateInconvertible";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateIncapacitated : HelperObject // Object
        {
            EntityStateIncapacitated(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateIncapacitated";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityStateIncapacitated_Inputs Inputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateInVertebraeArea : HelperObject // Object
        {
            EntityStateInVertebraeArea(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateInVertebraeArea";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateImmersedJump : HelperObject // Object
        {
            EntityStateImmersedJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateImmersedJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateHoldingStaffVertebras : HelperObject // Object
        {
            EntityStateHoldingStaffVertebras(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateHoldingStaffVertebras";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateHitWall : HelperObject // Object
        {
            EntityStateHitWall(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateHitWall";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateHintNone : HelperObject // Object
        {
            EntityStateHintNone(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateHintNone";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateHintLight : HelperObject // Object
        {
            EntityStateHintLight(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateHintLight";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateHintFull : HelperObject // Object
        {
            EntityStateHintFull(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateHintFull";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateHideOut : HelperObject // Object
        {
            EntityStateHideOut(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateHideOut";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateHideIn : HelperObject // Object
        {
            EntityStateHideIn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateHideIn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateHide : HelperObject // Object
        {
            EntityStateHide(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateHide";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ExitRequired() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGroundedJump : HelperObject // Object
        {
            EntityStateGroundedJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGroundedJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGrasp : HelperObject // Object
        {
            EntityStateGrasp(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGrasp";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGrabbedOut : HelperObject // Object
        {
            EntityStateGrabbedOut(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGrabbedOut";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGrabbedIn : HelperObject // Object
        {
            EntityStateGrabbedIn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGrabbedIn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGrabbed : HelperObject // Object
        {
            EntityStateGrabbed(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGrabbed";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGrabOut : HelperObject // Object
        {
            EntityStateGrabOut(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGrabOut";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGrabIn : HelperObject // Object
        {
            EntityStateGrabIn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGrabIn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGrabAttack : HelperObject // Object
        {
            EntityStateGrabAttack(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGrabAttack";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateGrab : HelperObject // Object
        {
            EntityStateGrab(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateGrab";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateForceCanBeTargeted : HelperObject // Object
        {
            EntityStateForceCanBeTargeted(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateForceCanBeTargeted";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool CanBeTargeted() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateFastRun : HelperObject // Object
        {
            EntityStateFastRun(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateFastRun";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateFallSafe : HelperObject // Object
        {
            EntityStateFallSafe(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateFallSafe";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateFallInjured : HelperObject // Object
        {
            EntityStateFallInjured(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateFallInjured";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateFallDying : HelperObject // Object
        {
            EntityStateFallDying(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateFallDying";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateFall : HelperObject // Object
        {
            EntityStateFall(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateFall";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateFailingOrder : HelperObject // Object
        {
            EntityStateFailingOrder(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateFailingOrder";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateExtraLife : HelperObject // Object
        {
            EntityStateExtraLife(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateExtraLife";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateEnergySpoutState : HelperObject // Object
        {
            EntityStateEnergySpoutState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateEnergySpoutState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::EnergySideEvent> EnergySideEvents() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateEnergySide : HelperObject // Object
        {
            EntityStateEnergySide(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateEnergySide";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EnergySide EnergySide() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateEnergyRootHatching : HelperObject // Object
        {
            EntityStateEnergyRootHatching(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateEnergyRootHatching";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateEnergyRootAbortHatching : HelperObject // Object
        {
            EntityStateEnergyRootAbortHatching(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateEnergyRootAbortHatching";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateEjectedLand : HelperObject // Object
        {
            EntityStateEjectedLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateEjectedLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateDodgeCooldown : HelperObject // Object
        {
            EntityStateDodgeCooldown(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateDodgeCooldown";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateDisplayHatchingCost : HelperObject // Object
        {
            EntityStateDisplayHatchingCost(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateDisplayHatchingCost";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateDisguise : HelperObject // Object
        {
            EntityStateDisguise(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateDisguise";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ExitRequired() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateDisabledVertebrae : HelperObject // Object
        {
            EntityStateDisabledVertebrae(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateDisabledVertebrae";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateDisablePerceptionRequest : HelperObject // Object
        {
            EntityStateDisablePerceptionRequest(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateDisablePerceptionRequest";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateDeathLand : HelperObject // Object
        {
            EntityStateDeathLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateDeathLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateDamageLand : HelperObject // Object
        {
            EntityStateDamageLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateDamageLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCreatureProfile : HelperObject // Object
        {
            EntityStateCreatureProfile(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCreatureProfile";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::CreatureProfile Profile() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCreatureHatching : HelperObject // Object
        {
            EntityStateCreatureHatching(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCreatureHatching";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityStateCreatureHatching_Inputs Inputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateControlGPE : HelperObject // Object
        {
            EntityStateControlGPE(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateControlGPE";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateConstrainedMove : HelperObject // Object
        {
            EntityStateConstrainedMove(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateConstrainedMove";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateConstrainedInput : HelperObject // Object
        {
            EntityStateConstrainedInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateConstrainedInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCombat : HelperObject // Object
        {
            EntityStateCombat(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCombat";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCollectVertebrae : HelperObject // Object
        {
            EntityStateCollectVertebrae(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCollectVertebrae";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float meditationDuration() const;
        };

        struct EntityStateClimbWaterfallImpulse : HelperObject // Object
        {
            EntityStateClimbWaterfallImpulse(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateClimbWaterfallImpulse";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateClimbWaterfall : HelperObject // Object
        {
            EntityStateClimbWaterfall(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateClimbWaterfall";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateClassicLand : HelperObject // Object
        {
            EntityStateClassicLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateClassicLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateClassicDodge : HelperObject // Object
        {
            EntityStateClassicDodge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateClassicDodge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCinematicReady : HelperObject // Object
        {
            EntityStateCinematicReady(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCinematicReady";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCinematicCompleted : HelperObject // Object
        {
            EntityStateCinematicCompleted(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCinematicCompleted";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateChargingJump : HelperObject // Object
        {
            EntityStateChargingJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateChargingJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateChargedJump : HelperObject // Object
        {
            EntityStateChargedJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateChargedJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateChargeMode : HelperObject // Object
        {
            EntityStateChargeMode(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateChargeMode";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityStateChargeMode_EntityStateChargeModeInputs ChargeModeInputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCanNotBePerceived : HelperObject // Object
        {
            EntityStateCanNotBePerceived(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCanNotBePerceived";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateCallAndMountSpiritAnimal : HelperObject // Object
        {
            EntityStateCallAndMountSpiritAnimal(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateCallAndMountSpiritAnimal";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBridgeBeingControlled : HelperObject // Object
        {
            EntityStateBridgeBeingControlled(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBridgeBeingControlled";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float CollisionRaycastLength() const;
            Ent::Gen::Float HorizontalSpeed() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::Float VerticalSpeed() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBridgeAttracted : HelperObject // Object
        {
            EntityStateBridgeAttracted(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBridgeAttracted";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::EntityRef> AttachPointsRef() const;
            Ent::Gen::Float AttachTime() const;
            Ent::Gen::Position AttractionTarget() const;
            Ent::Gen::EntityRef BridgeLinkRef() const;
            Ent::Gen::Float GroundAttachRaycastLength() const;
            Ent::Gen::String HotspotName() const;
            Ent::Gen::Float MaximalAttachDistance() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBridgeAttached : HelperObject // Object
        {
            EntityStateBridgeAttached(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBridgeAttached";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBreakableEntire : HelperObject // Object
        {
            EntityStateBreakableEntire(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBreakableEntire";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBreakableBroken : HelperObject // Object
        {
            EntityStateBreakableBroken(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBreakableBroken";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBreakableBreaking : HelperObject // Object
        {
            EntityStateBreakableBreaking(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBreakableBreaking";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBounceLand : HelperObject // Object
        {
            EntityStateBounceLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBounceLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBounce : HelperObject // Object
        {
            EntityStateBounce(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBounce";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBoidsHomePos : HelperObject // Object
        {
            EntityStateBoidsHomePos(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBoidsHomePos";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Position HomePosition() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBittenDefense : HelperObject // Object
        {
            EntityStateBittenDefense(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBittenDefense";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBitten : HelperObject // Object
        {
            EntityStateBitten(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBitten";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBiteOut : HelperObject // Object
        {
            EntityStateBiteOut(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBiteOut";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBiteIn : HelperObject // Object
        {
            EntityStateBiteIn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBiteIn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBiteAttack : HelperObject // Object
        {
            EntityStateBiteAttack(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBiteAttack";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBite : HelperObject // Object
        {
            EntityStateBite(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBite";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBeingOnSpike : HelperObject // Object
        {
            EntityStateBeingOnSpike(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBeingOnSpike";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float SpikeCooldown() const;
            Ent::Gen::Float SpikeDamage() const;
            Ent::Gen::Int SpikeDeadlyHitCount() const;
            Ent::Gen::Bool SpikeEject() const;
            Ent::Gen::Float SpikeImpact() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBeingOnSlope : HelperObject // Object
        {
            EntityStateBeingOnSlope(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBeingOnSlope";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBeingLinked : HelperObject // Object
        {
            EntityStateBeingLinked(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBeingLinked";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBeingInReeds : HelperObject // Object
        {
            EntityStateBeingInReeds(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBeingInReeds";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBeingBlockedByVine : HelperObject // Object
        {
            EntityStateBeingBlockedByVine(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBeingBlockedByVine";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef Blocker() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBackwardLand : HelperObject // Object
        {
            EntityStateBackwardLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBackwardLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateBackwardDodge : HelperObject // Object
        {
            EntityStateBackwardDodge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateBackwardDodge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateAttitudeGroggy : HelperObject // Object
        {
            EntityStateAttitudeGroggy(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateAttitudeGroggy";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateAttackDive : HelperObject // Object
        {
            EntityStateAttackDive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateAttackDive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateAskStaffGuide : HelperObject // Object
        {
            EntityStateAskStaffGuide(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateAskStaffGuide";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateApplyExtraLife : HelperObject // Object
        {
            EntityStateApplyExtraLife(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateApplyExtraLife";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateAirControl : HelperObject // Object
        {
            EntityStateAirControl(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateAirControl";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateAimAt : HelperObject // Object
        {
            EntityStateAimAt(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateAimAt";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateAerialJump : HelperObject // Object
        {
            EntityStateAerialJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateAerialJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityStateAboutToBeHatched : HelperObject // Object
        {
            EntityStateAboutToBeHatched(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityStateAboutToBeHatched";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateTryUpgradeShamanStaff : HelperObject // Object
        {
            ActorStateTryUpgradeShamanStaff(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateTryUpgradeShamanStaff";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateTryEquipShamanStaff : HelperObject // Object
        {
            ActorStateTryEquipShamanStaff(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateTryEquipShamanStaff";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateTeleportWhileMoving : HelperObject // Object
        {
            ActorStateTeleportWhileMoving(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateTeleportWhileMoving";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::ActorStateTeleportWhileMovingInputs input() const;
        };

        struct ActorStateTeleportToTarget : HelperObject // Object
        {
            ActorStateTeleportToTarget(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateTeleportToTarget";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateTeleport : HelperObject // Object
        {
            ActorStateTeleport(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateTeleport";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorStateTeleport_Inputs Inputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateTaunting : HelperObject // Object
        {
            ActorStateTaunting(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateTaunting";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateStopAttitudeAggressive : HelperObject // Object
        {
            ActorStateStopAttitudeAggressive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateStopAttitudeAggressive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSpeedMultiplier : HelperObject // Object
        {
            ActorStateSpeedMultiplier(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSpeedMultiplier";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float SpeedMultiplier() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSoulWaitingToRespawn : HelperObject // Object
        {
            ActorStateSoulWaitingToRespawn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSoulWaitingToRespawn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EnergySide EnergySide() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSoulRespawn : HelperObject // Object
        {
            ActorStateSoulRespawn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSoulRespawn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSlope : HelperObject // Object
        {
            ActorStateSlope(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSlope";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSleeping : HelperObject // Object
        {
            ActorStateSleeping(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSleeping";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSkeletonPartPickUpState : HelperObject // Object
        {
            ActorStateSkeletonPartPickUpState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSkeletonPartPickUpState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSkeletonPartPickUpRequest : HelperObject // Object
        {
            ActorStateSkeletonPartPickUpRequest(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSkeletonPartPickUpRequest";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSink : HelperObject // Object
        {
            ActorStateSink(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSink";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateShootingFlow : HelperObject // Object
        {
            ActorStateShootingFlow(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateShootingFlow";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateShapeshift : HelperObject // Object
        {
            ActorStateShapeshift(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateShapeshift";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateShamanItemPartState : HelperObject // Object
        {
            ActorStateShamanItemPartState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateShamanItemPartState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateShamanItemLiving : HelperObject // Object
        {
            ActorStateShamanItemLiving(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateShamanItemLiving";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool End() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateSendMission : HelperObject // Object
        {
            ActorStateSendMission(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateSendMission";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateScreaming : HelperObject // Object
        {
            ActorStateScreaming(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateScreaming";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateRequestingWaiting : HelperObject // Object
        {
            ActorStateRequestingWaiting(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateRequestingWaiting";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateRequestingHealing : HelperObject // Object
        {
            ActorStateRequestingHealing(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateRequestingHealing";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateRecover : HelperObject // Object
        {
            ActorStateRecover(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateRecover";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateReactingLava : HelperObject // Object
        {
            ActorStateReactingLava(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateReactingLava";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStatePossessGPE : HelperObject // Object
        {
            ActorStatePossessGPE(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStatePossessGPE";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStatePossessFlocking : HelperObject // Object
        {
            ActorStatePossessFlocking(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStatePossessFlocking";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateNavigationMesh : HelperObject // Object
        {
            ActorStateNavigationMesh(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateNavigationMesh";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMovingSwim : HelperObject // Object
        {
            ActorStateMovingSwim(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMovingSwim";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMovingStandUp : HelperObject // Object
        {
            ActorStateMovingStandUp(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMovingStandUp";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMovingRide : HelperObject // Object
        {
            ActorStateMovingRide(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMovingRide";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMovingProne : HelperObject // Object
        {
            ActorStateMovingProne(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMovingProne";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMovingFly : HelperObject // Object
        {
            ActorStateMovingFly(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMovingFly";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMovingFall : HelperObject // Object
        {
            ActorStateMovingFall(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMovingFall";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMovingDive : HelperObject // Object
        {
            ActorStateMovingDive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMovingDive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMovingClamber : HelperObject // Object
        {
            ActorStateMovingClamber(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMovingClamber";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMoveAlongBezier : HelperObject // Object
        {
            ActorStateMoveAlongBezier(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMoveAlongBezier";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateMeetingLava : HelperObject // Object
        {
            ActorStateMeetingLava(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateMeetingLava";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateLosingOxygen : HelperObject // Object
        {
            ActorStateLosingOxygen(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateLosingOxygen";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateLeavingLava : HelperObject // Object
        {
            ActorStateLeavingLava(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateLeavingLava";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateInvincible : HelperObject // Object
        {
            ActorStateInvincible(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateInvincible";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateIKConstraint : HelperObject // Object
        {
            ActorStateIKConstraint(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateIKConstraint";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateHoldingItem : HelperObject // Object
        {
            ActorStateHoldingItem(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateHoldingItem";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EntityRef InventoryEntityRef() const;
            Ent::Gen::EntityRef ItemEntityRef() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateHitEnergyWall : HelperObject // Object
        {
            ActorStateHitEnergyWall(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateHitEnergyWall";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateHeld : HelperObject // Object
        {
            ActorStateHeld(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateHeld";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateHasNoBody : HelperObject // Object
        {
            ActorStateHasNoBody(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateHasNoBody";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateForceAgainstSlope : HelperObject // Object
        {
            ActorStateForceAgainstSlope(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateForceAgainstSlope";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateFluidSlowDown : HelperObject // Object
        {
            ActorStateFluidSlowDown(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateFluidSlowDown";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateFlockingRigidbodyBeingActive : HelperObject // Object
        {
            ActorStateFlockingRigidbodyBeingActive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateFlockingRigidbodyBeingActive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateFlockingLiving : HelperObject // Object
        {
            ActorStateFlockingLiving(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateFlockingLiving";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool CanCreateHitRigidBodies() const;
            Ent::Gen::Bool Killed() const;
            Ent::Gen::Bool Regenerated() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateFlockingIndividualSpawning : HelperObject // Object
        {
            ActorStateFlockingIndividualSpawning(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateFlockingIndividualSpawning";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateFlockingChangingParams : HelperObject // Object
        {
            ActorStateFlockingChangingParams(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateFlockingChangingParams";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorStateFlockingChangingParams_Params Params() const;
            Ent::Gen::ActorStateFlockingChangingParams_Params ParamsBud() const;
            Ent::Gen::Bool ShouldApplyBudParam() const;
            Ent::Gen::Bool ShouldApplyParam() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateFlockingAttackFlocking : HelperObject // Object
        {
            ActorStateFlockingAttackFlocking(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateFlockingAttackFlocking";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateExitingFly : HelperObject // Object
        {
            ActorStateExitingFly(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateExitingFly";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateEnergyShooting : HelperObject // Object
        {
            ActorStateEnergyShooting(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateEnergyShooting";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateDucking : HelperObject // Object
        {
            ActorStateDucking(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateDucking";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ExitRequired() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateDodge3D : HelperObject // Object
        {
            ActorStateDodge3D(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateDodge3D";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateDisabledOut : HelperObject // Object
        {
            ActorStateDisabledOut(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateDisabledOut";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateDisabledIn : HelperObject // Object
        {
            ActorStateDisabledIn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateDisabledIn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateDisabled : HelperObject // Object
        {
            ActorStateDisabled(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateDisabled";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateDead : HelperObject // Object
        {
            ActorStateDead(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateDead";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateCreature : HelperObject // Object
        {
            ActorStateCreature(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateCreature";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Position Position() const;
            Ent::Gen::Quat Rotation() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateConvertWithFlow : HelperObject // Object
        {
            ActorStateConvertWithFlow(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateConvertWithFlow";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateChargeSpendLife : HelperObject // Object
        {
            ActorStateChargeSpendLife(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateChargeSpendLife";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateChangeEnergySide : HelperObject // Object
        {
            ActorStateChangeEnergySide(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateChangeEnergySide";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::EnergySide EnergySide() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateCatapultedLand : HelperObject // Object
        {
            ActorStateCatapultedLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateCatapultedLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateCatapulted : HelperObject // Object
        {
            ActorStateCatapulted(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateCatapulted";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AirControlMultiplier() const;
            Ent::Gen::Float FallHeightProtection() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateCallingFollower : HelperObject // Object
        {
            ActorStateCallingFollower(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateCallingFollower";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBuried : HelperObject // Object
        {
            ActorStateBuried(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBuried";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBittenShaked : HelperObject // Object
        {
            ActorStateBittenShaked(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBittenShaked";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBittenRegenerated : HelperObject // Object
        {
            ActorStateBittenRegenerated(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBittenRegenerated";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBiteJumpOut : HelperObject // Object
        {
            ActorStateBiteJumpOut(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBiteJumpOut";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBiteEntityLiving : HelperObject // Object
        {
            ActorStateBiteEntityLiving(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBiteEntityLiving";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int State() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBendingTree : HelperObject // Object
        {
            ActorStateBendingTree(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBendingTree";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool AttackInput() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBendingConstraint : HelperObject // Object
        {
            ActorStateBendingConstraint(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBendingConstraint";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingRided : HelperObject // Object
        {
            ActorStateBeingRided(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingRided";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingOnPossessedGPE : HelperObject // Object
        {
            ActorStateBeingOnPossessedGPE(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingOnPossessedGPE";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingOnMount : HelperObject // Object
        {
            ActorStateBeingOnMount(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingOnMount";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::MountableData MountableData() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingOnGroundFromImmersed : HelperObject // Object
        {
            ActorStateBeingOnGroundFromImmersed(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingOnGroundFromImmersed";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingOnGround : HelperObject // Object
        {
            ActorStateBeingOnGround(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingOnGround";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingInAir : HelperObject // Object
        {
            ActorStateBeingInAir(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingInAir";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingImmersedFromOnGround : HelperObject // Object
        {
            ActorStateBeingImmersedFromOnGround(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingImmersedFromOnGround";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingImmersedFromInAir : HelperObject // Object
        {
            ActorStateBeingImmersedFromInAir(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingImmersedFromInAir";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBeingImmersed : HelperObject // Object
        {
            ActorStateBeingImmersed(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBeingImmersed";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateBehaviorState : HelperObject // Object
        {
            ActorStateBehaviorState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateBehaviorState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int State() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateAttitudeAggressive : HelperObject // Object
        {
            ActorStateAttitudeAggressive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateAttitudeAggressive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateApplyHit : HelperObject // Object
        {
            ActorStateApplyHit(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateApplyHit";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateAnsweringCall : HelperObject // Object
        {
            ActorStateAnsweringCall(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateAnsweringCall";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateAlive : HelperObject // Object
        {
            ActorStateAlive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateAlive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Damages() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateAimCharge : HelperObject // Object
        {
            ActorStateAimCharge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateAimCharge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionWait : HelperObject // Object
        {
            ActionWait(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionWait";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ExitRequired() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionUnmount : HelperObject // Object
        {
            ActionUnmount(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionUnmount";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::MountableData MountableData() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 acrobaticDirection() const;
            Ent::Gen::Bool acrobaticUnmount() const;
            Ent::Gen::SpeedMode speedMode() const;
        };

        struct ActionTriggerStandUp : HelperObject // Object
        {
            ActionTriggerStandUp(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionTriggerStandUp";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionTriggerShamanVisionExit : HelperObject // Object
        {
            ActionTriggerShamanVisionExit(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionTriggerShamanVisionExit";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionTriggerCrouch : HelperObject // Object
        {
            ActionTriggerCrouch(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionTriggerCrouch";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionTopView : HelperObject // Object
        {
            ActionTopView(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionTopView";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionTalk : HelperObject // Object
        {
            ActionTalk(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionTalk";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionTakeOff : HelperObject // Object
        {
            ActionTakeOff(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionTakeOff";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStrafeTurn : HelperObject // Object
        {
            ActionStrafeTurn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStrafeTurn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStrafe : HelperObject // Object
        {
            ActionStrafe(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStrafe";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool changeAnimationAllowed() const;
            Ent::Gen::Float speedrequired() const;
            Ent::Gen::Vector3 trajectoryDir() const;
            Ent::Gen::Vector3 visualDir() const;
        };

        struct ActionStop : HelperObject // Object
        {
            ActionStop(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStop";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStartRun : HelperObject // Object
        {
            ActionStartRun(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStartRun";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionSlide : HelperObject // Object
        {
            ActionSlide(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionSlide";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionShootBeam : HelperObject // Object
        {
            ActionShootBeam(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionShootBeam";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionShamanVision : HelperObject // Object
        {
            ActionShamanVision(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionShamanVision";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionScaleRider : HelperObject // Object
        {
            ActionScaleRider(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionScaleRider";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionRise : HelperObject // Object
        {
            ActionRise(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionRise";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionRiderStance : HelperObject // Object
        {
            ActionRiderStance(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionRiderStance";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionReviveMaskEffect : HelperObject // Object
        {
            ActionReviveMaskEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionReviveMaskEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionRagdoll : HelperObject // Object
        {
            ActionRagdoll(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionRagdoll";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int State() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionQuadStandUpStateOut : HelperObject // Object
        {
            ActionQuadStandUpStateOut(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionQuadStandUpStateOut";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionQuadStandUpStateIn : HelperObject // Object
        {
            ActionQuadStandUpStateIn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionQuadStandUpStateIn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionQuadStandUpState : HelperObject // Object
        {
            ActionQuadStandUpState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionQuadStandUpState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ExitRequired() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionPushed : HelperObject // Object
        {
            ActionPushed(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionPushed";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionPropelled : HelperObject // Object
        {
            ActionPropelled(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionPropelled";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AirControlMultiplier() const;
            Ent::Gen::Float FallHeightProtection() const;
            Ent::Gen::Bool InstantVisualOrientation() const;
            Ent::Gen::Vector3 PropelForce() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionPlayAnim : HelperObject // Object
        {
            ActionPlayAnim(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionPlayAnim";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float MaxTime() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool exitRequired() const;
        };

        struct ActionPatinate : HelperObject // Object
        {
            ActionPatinate(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionPatinate";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionPathfindAndMove : HelperObject // Object
        {
            ActionPathfindAndMove(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionPathfindAndMove";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionOutfitSpecialState : HelperObject // Object
        {
            ActionOutfitSpecialState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionOutfitSpecialState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionOrientMount : HelperObject // Object
        {
            ActionOrientMount(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionOrientMount";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 m_direction() const;
        };

        struct ActionMoveTo : HelperObject // Object
        {
            ActionMoveTo(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionMoveTo";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionMoveProjectile : HelperObject // Object
        {
            ActionMoveProjectile(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionMoveProjectile";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::ProjectileTrajectory Trajectory() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionMove : HelperObject // Object
        {
            ActionMove(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionMove";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Vector3 CurrentDirection() const;
            Ent::Gen::Bool InstantReachSpeedRequired() const;
            Ent::Gen::Float Speed() const;
            Ent::Gen::SpeedMode SpeedModeDest() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionMountReception : HelperObject // Object
        {
            ActionMountReception(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionMountReception";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionLookAt : HelperObject // Object
        {
            ActionLookAt(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionLookAt";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionLandingMount : HelperObject // Object
        {
            ActionLandingMount(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionLandingMount";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionLand : HelperObject // Object
        {
            ActionLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionJumpOnto : HelperObject // Object
        {
            ActionJumpOnto(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionJumpOnto";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionJump : HelperObject // Object
        {
            ActionJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool jumpAnalog() const;
        };

        struct ActionIncarnated : HelperObject // Object
        {
            ActionIncarnated(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionIncarnated";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionIncarnate : HelperObject // Object
        {
            ActionIncarnate(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionIncarnate";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ExitRequired() const;
            Ent::Gen::String GameEffectHash() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionIdle : HelperObject // Object
        {
            ActionIdle(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionIdle";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionHit : HelperObject // Object
        {
            ActionHit(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionHit";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Hit Hit() const;
            Ent::Gen::Bool NoAnimNeeded() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::Bool TransferAllowed() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionFlyUp : HelperObject // Object
        {
            ActionFlyUp(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionFlyUp";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionFlyFlap : HelperObject // Object
        {
            ActionFlyFlap(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionFlyFlap";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionFlyDown : HelperObject // Object
        {
            ActionFlyDown(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionFlyDown";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionFlyDive : HelperObject // Object
        {
            ActionFlyDive(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionFlyDive";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionFlyCrash : HelperObject // Object
        {
            ActionFlyCrash(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionFlyCrash";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionDrop : HelperObject // Object
        {
            ActionDrop(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDrop";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionDrift : HelperObject // Object
        {
            ActionDrift(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDrift";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionDrawWeaponState : HelperObject // Object
        {
            ActionDrawWeaponState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDrawWeaponState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool m_longRangeWeapon() const;
            Ent::Gen::Bool m_noDrawAnimation() const;
            Ent::Gen::Bool m_offHandWeapon() const;
            Ent::Gen::Float m_sheatheDuration() const;
            Ent::Gen::Bool m_shortDrawAnimation() const;
            Ent::Gen::Float m_timer() const;
        };

        struct ActionDrawWeapon : HelperObject // Object
        {
            ActionDrawWeapon(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDrawWeapon";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionDrawAttention : HelperObject // Object
        {
            ActionDrawAttention(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDrawAttention";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionDodge : HelperObject // Object
        {
            ActionDodge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDodge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionDisableAndFollow : HelperObject // Object
        {
            ActionDisableAndFollow(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDisableAndFollow";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionDigUpTreasure : HelperObject // Object
        {
            ActionDigUpTreasure(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDigUpTreasure";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionDecelerate : HelperObject // Object
        {
            ActionDecelerate(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionDecelerate";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionCollapse : HelperObject // Object
        {
            ActionCollapse(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionCollapse";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionClimbEdge : HelperObject // Object
        {
            ActionClimbEdge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionClimbEdge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::LedgePositionInfo ledgePosInfo() const;
        };

        struct ActionClamberRise : HelperObject // Object
        {
            ActionClamberRise(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionClamberRise";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionClamberMove : HelperObject // Object
        {
            ActionClamberMove(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionClamberMove";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionClamberLand : HelperObject // Object
        {
            ActionClamberLand(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionClamberLand";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionClamberJumpOff : HelperObject // Object
        {
            ActionClamberJumpOff(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionClamberJumpOff";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionClamberJump : HelperObject // Object
        {
            ActionClamberJump(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionClamberJump";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionClamberDropOff : HelperObject // Object
        {
            ActionClamberDropOff(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionClamberDropOff";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionCinematic : HelperObject // Object
        {
            ActionCinematic(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionCinematic";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionChosen : HelperObject // Object
        {
            ActionChosen(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionChosen";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool ExitRequired() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionChangeRidingSpot : HelperObject // Object
        {
            ActionChangeRidingSpot(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionChangeRidingSpot";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::Int TargetHotspotDestID() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionChangeMount : HelperObject // Object
        {
            ActionChangeMount(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionChangeMount";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionCentrifugal : HelperObject // Object
        {
            ActionCentrifugal(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionCentrifugal";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionCallForHelp : HelperObject // Object
        {
            ActionCallForHelp(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionCallForHelp";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionBrake : HelperObject // Object
        {
            ActionBrake(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionBrake";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionBittenState : HelperObject // Object
        {
            ActionBittenState(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionBittenState";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionBiteOut : HelperObject // Object
        {
            ActionBiteOut(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionBiteOut";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionBiteIn : HelperObject // Object
        {
            ActionBiteIn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionBiteIn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionBite : HelperObject // Object
        {
            ActionBite(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionBite";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float RadiusMultiplier() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionAttackStomp : HelperObject // Object
        {
            ActionAttackStomp(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionAttackStomp";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionAttackJumpOnto : HelperObject // Object
        {
            ActionAttackJumpOnto(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionAttackJumpOnto";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float RadiusMultiplier() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorCategory : EnumPropHelper<ActorCategory, ActorCategoryEnum> // Enum
        {
            using Enum = ActorCategoryEnum;
            using PropHelper<ActorCategory, Enum>::operator=;
            ActorCategory(Ent::Node* _node): EnumPropHelper<ActorCategory, Enum>(_node) {}
            static constexpr char schemaName[] = "ActorCategory";
            static constexpr char const* enumToString[] = {
                "CATEGORY_All",
                "CATEGORY_Action",
                "CATEGORY_AnimationLegConstraint",
                "CATEGORY_ActionAttack",
                "CATEGORY_Attitude",
                "CATEGORY_Context",
                "CATEGORY_Control",
                "CATEGORY_ActionCosmetic",
                "CATEGORY_ActionDamage",
                "CATEGORY_ActionDefault",
                "CATEGORY_ActionDie",
                "CATEGORY_Environment",
                "CATEGORY_Fall",
                "CATEGORY_ActionGrab",
                "CATEGORY_ActionGrasp",
                "CATEGORY_ActionBite",
                "CATEGORY_Hint",
                "CATEGORY_LookAt",
                "CATEGORY_ActionJump",
                "CATEGORY_ActionLand",
                "CATEGORY_Life",
                "CATEGORY_Locomotion",
                "CATEGORY_ActionMove",
                "CATEGORY_Persistent",
                "CATEGORY_Purgatory",
                "CATEGORY_ActionSlide",
                "CATEGORY_ActionStop",
                "CATEGORY_ActionStrafe",
                "CATEGORY_Transition",
                "CATEGORY_Trigger",
                "CATEGORY_ActionWingFlutter",
                "CATEGORY_Health",
                "CATEGORY_HealthAlive",
                "CATEGORY_HealthDead",
                "CATEGORY_KnockedOut",
                "CATEGORY_EntitySwitchTransition",
                "CATEGORY_EnergyRoot",
                "CATEGORY_EnergySpout",
                "CATEGORY_Energy",
                "CATEGORY_GPE",
                "CATEGORY_SpiritAnimal",
                "CATEGORY_Hatching",
                "CATEGORY_Respawn",
                "CATEGORY_Save",
                "CATEGORY_Cinematic",
                "CATEGORY_Loading",
                "CATEGORY_NoCategory",
            };
        };
        inline char const* toString(ActorCategoryEnum value)
        {
            if(size_t(value) >= std::size(ActorCategory::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ActorCategory::enumToString[size_t(value)];
        }
        inline char const* toInternal(ActorCategoryEnum value) { return toString(value); }
        template<> inline ActorCategoryEnum strToEnum<ActorCategoryEnum>(char const* value)
        {
            return static_cast<ActorCategoryEnum>(details::indexInEnum(value, ActorCategory::enumToString));
        }

        struct ConditionalRigidityAttribute_Conditions : HelperObject // Object
        {
            ConditionalRigidityAttribute_Conditions(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::Conditions";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::ActorCategory> ActorCategories() const;
            PrimArray<Ent::Gen::String> ActorStates() const;
            Ent::Gen::Vector2 AngularVelocityFactorRange() const;
            Ent::Gen::Vector2 DirectionDotRange() const;
            Ent::Gen::Vector2 LinearVelocityFactorRange() const;
            Ent::Gen::String _comment() const;
        };

        struct ConditionalRigidityAttribute : HelperObject // Object
        {
            ConditionalRigidityAttribute(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ConditionalRigidityAttribute_Attributes Attributes() const;
            Ent::Gen::ConditionalRigidityAttribute_Conditions Conditions() const;
            Ent::Gen::Bool Default() const;
            Ent::Gen::String Name() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimationTailConstraintsGD : HelperObject // Object
        {
            AnimationTailConstraintsGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationTailConstraintsGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float AngularSpeedMaxForSpeedModeFurious() const;
            Ent::Gen::Float AngularSpeedMaxForSpeedModeNone() const;
            Ent::Gen::Bool BoneInjectDirectionFromUseAmplitudeFactor() const;
            Ent::Gen::String BoneNameEnd() const;
            Ent::Gen::String BoneNameInjectDirectionFrom() const;
            Ent::Gen::String BoneNameStart() const;
            Array<Ent::Gen::Collider> Colliders() const;
            Ent::Gen::Float CollidersRadiusFactorGrounded() const;
            Ent::Gen::Float CompensateSegmentStretchFactor() const;
            Array<Ent::Gen::ConditionalRigidityAttribute> ConditionalRigidityAttributes() const;
            Array<Ent::Gen::StickToGround> StickToGrounds() const;
            Ent::Gen::Float StickToGroundsGravity() const;
            Ent::Gen::Float StickToGroundsGravityUnderwater() const;
            Ent::Gen::Float StickToGroundsRadiusFactorDead() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorAbility : EnumPropHelper<ActorAbility, ActorAbilityEnum> // Enum
        {
            using Enum = ActorAbilityEnum;
            using PropHelper<ActorAbility, Enum>::operator=;
            ActorAbility(Ent::Node* _node): EnumPropHelper<ActorAbility, Enum>(_node) {}
            static constexpr char schemaName[] = "ActorAbility";
            static constexpr char const* enumToString[] = {
                "landing",
                "crouch",
                "fly",
                "ride",
                "dive",
                "stinky",
                "ActorAbility_COUNT",
            };
        };
        inline char const* toString(ActorAbilityEnum value)
        {
            if(size_t(value) >= std::size(ActorAbility::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ActorAbility::enumToString[size_t(value)];
        }
        inline char const* toInternal(ActorAbilityEnum value) { return toString(value); }
        template<> inline ActorAbilityEnum strToEnum<ActorAbilityEnum>(char const* value)
        {
            return static_cast<ActorAbilityEnum>(details::indexInEnum(value, ActorAbility::enumToString));
        }

        struct ActionTurn_Inputs : HelperObject // Object
        {
            ActionTurn_Inputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionTurn::Inputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool checkDir() const;
            Ent::Gen::Vector3 directionREQUIRED() const;
            Ent::Gen::Bool speedModeUpdateAllowed() const;
            Ent::Gen::Bool useRequest() const;
        };

        struct ActionTurn : HelperObject // Object
        {
            ActionTurn(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionTurn";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Vector3 direction() const;
            Ent::Gen::ActionTurn_Inputs inputs() const;
            Ent::Gen::Float speedAtStart() const;
            Ent::Gen::SpeedMode speedModeRequired() const;
            Ent::Gen::SpeedMode speedModeStart() const;
        };

        struct ActionStateArbiter_StateStateDecision : HelperObject // Object
        {
            ActionStateArbiter_StateStateDecision(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateStateDecision";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Current() const;
            Ent::Gen::ActorStateArbiterDecision Decision() const;
            Ent::Gen::String New() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_StateStateDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_StateStateDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateStateDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_StateStateDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_StateOrderPass : HelperObject // Object
        {
            ActionStateArbiter_StateOrderPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateOrderPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::Tuple<Ent::Gen::String, Ent::Gen::String>> Dependencies() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_StateCategoryDecision : HelperObject // Object
        {
            ActionStateArbiter_StateCategoryDecision(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateCategoryDecision";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Current() const;
            Ent::Gen::ActorStateArbiterDecision Decision() const;
            Ent::Gen::String New() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_StateCategoryDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_StateCategoryDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateCategoryDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_StateCategoryDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_StateAllDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_StateAllDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateAllDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_StateCategoryDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_CategoryStateDecision : HelperObject // Object
        {
            ActionStateArbiter_CategoryStateDecision(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryStateDecision";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Current() const;
            Ent::Gen::ActorStateArbiterDecision Decision() const;
            Ent::Gen::String New() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_CategoryStateDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_CategoryStateDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryStateDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_CategoryStateDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_CategoryOrderPass : HelperObject // Object
        {
            ActionStateArbiter_CategoryOrderPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryOrderPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> Order() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_CategoryCategoryDecision : HelperObject // Object
        {
            ActionStateArbiter_CategoryCategoryDecision(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryCategoryDecision";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Current() const;
            Ent::Gen::ActorStateArbiterDecision Decision() const;
            Ent::Gen::String New() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_PairDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_PairDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::PairDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_CategoryCategoryDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_CategoryCategoryDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryCategoryDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_CategoryAllDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_CategoryAllDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryAllDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_AllStateDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_AllStateDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::AllStateDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_CategoryStateDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_AllCategoryDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_AllCategoryDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::AllCategoryDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter_AllAllDecisionPass : HelperObject // Object
        {
            ActionStateArbiter_AllAllDecisionPass(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter::AllAllDecisionPass";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStateArbiter : HelperObject // Object
        {
            ActionStateArbiter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStateArbiter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActionStateArbiter_AllAllDecisionPass AllAll() const;
            Ent::Gen::ActionStateArbiter_AllCategoryDecisionPass AllCategory() const;
            Ent::Gen::ActionStateArbiter_AllStateDecisionPass AllState() const;
            Ent::Gen::ActionStateArbiter_CategoryAllDecisionPass CategoryAll() const;
            Ent::Gen::ActionStateArbiter_CategoryCategoryDecisionPass CategoryCategory() const;
            PrimArray<Ent::Gen::ActorCategory> CategoryNeedingRelay() const;
            Ent::Gen::ActionStateArbiter_CategoryOrderPass CategoryOrder() const;
            Ent::Gen::ActionStateArbiter_CategoryStateDecisionPass CategoryState() const;
            Ent::Gen::ActionStateArbiter_PairDecisionPass Pair() const;
            Ent::Gen::ActionStateArbiter_StateAllDecisionPass StateAll() const;
            Ent::Gen::ActionStateArbiter_StateCategoryDecisionPass StateCategory() const;
            Ent::Gen::ActionStateArbiter_StateOrderPass StateOrder() const;
            Ent::Gen::ActionStateArbiter_StateStateDecisionPass StateState() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionStackFilter : HelperObject // Object
        {
            ActionStackFilter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStackFilter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct ActionStackFilterRide : HelperObject // Object
        {
            ActionStackFilterRide(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionStackFilterRide";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActionStackFilter Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionShakeOffInputs : HelperObject // Object
        {
            ActionShakeOffInputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionShakeOffInputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool TryEjectAllBiters() const;
            Ent::Gen::Bool UseRandomDirection() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionShakeOff : HelperObject // Object
        {
            ActionShakeOff(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionShakeOff";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActionShakeOffInputs Inputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionMode : EnumPropHelper<ActionMode, ActionModeEnum> // Enum
        {
            using Enum = ActionModeEnum;
            using PropHelper<ActionMode, Enum>::operator=;
            ActionMode(Ent::Node* _node): EnumPropHelper<ActionMode, Enum>(_node) {}
            static constexpr char schemaName[] = "ActionMode";
            static constexpr char const* enumToString[] = {
                "noaction",
                "attack",
                "attackjump",
                "attackcharged",
                "attackpush",
                "attackjumponto",
                "bite",
                "biteattack",
                "stun",
                "collapse",
                "throw",
                "respawn",
                "incarnate",
                "incarnated",
                "hit",
                "hitwall",
                "hitjump",
                "landing",
                "landingfail",
                "landingcatapult",
                "landingrecover",
                "landingdamage",
                "landingdying",
                "landinggrip",
                "landingtree",
                "jumpmount",
                "fallin",
                "landingmount",
                "soul",
                "mountreception",
                "changeridingspot",
                "goingtomountstate",
                "mount",
                "unmount",
                "flap",
                "flystop",
                "flapfast",
                "turn",
                "turnfromspeed0",
                "turnfromspeed1",
                "turnfromspeed2",
                "turnfromspeed3",
                "jump",
                "jumpoff",
                "doublejump",
                "jumpcharging",
                "jumpcharged",
                "longjump",
                "bounce",
                "regenerate",
                "drift",
                "wait",
                "chosen",
                "revive",
                "revivemaskeffect",
                "shakeoff",
                "convert",
                "drop",
                "landingdrop",
                "dropoff",
                "start",
                "reachspeed3",
                "strafe",
                "strafeturn",
                "slide",
                "slope",
                "forceagainstslope",
                "patinate",
                "climb",
                "call",
                "callanswer",
                "scream",
                "grab",
                "grabattack",
                "grabbed",
                "grabbedin",
                "grabbedout",
                "taunt",
                "sink",
                "shoot",
                "reload",
                "stop",
                "rise",
                "centrifugal",
                "climbedgehead",
                "climbedgehips",
                "climbedgefoot",
                "jumpedge",
                "catapult",
                "sleep",
                "head",
                "chest",
                "ascendpurgatory",
                "purgatory",
                "stung",
                "riderstance",
                "drawweapon",
                "levitate",
                "levitatemove",
                "aim",
                "wallrun",
                "wallrunjump",
                "wallrundrop",
                "strongattackcharging",
                "strongattackcharged",
                "strongattack",
                "aimcharge",
                "aimcharged",
                "aimflow",
                "shootcharged",
                "shootchargedlight",
                "shootchargedmedium",
                "shootchargedbig",
                "emptyshoot",
                "attackstomp",
                "requestwait",
                "requestheal",
                "quadstandupin",
                "standupin",
                "diguptreasure",
                "swimin",
                "swimlanding",
                "duck",
                "recover",
                "happy",
                "underground",
                "spawn",
                "unspawn",
                "dance",
                "askstaffguide",
                "hintfull",
                "hintlight",
                "hintnone",
                "hatching",
                "dying",
                "followerorder",
                "ultimateattack",
                "ultimateattacked",
                "parry",
                "failingorder",
                "settingrespawnplace",
                "romlookat",
                "emoteshame",
                "emotecrazy",
                "emotetaunt",
                "emoteproud",
                "emotemenace",
                "emotehello",
                "emoteimpatience",
                "ActionMode_COUNT",
            };
        };
        inline char const* toString(ActionModeEnum value)
        {
            if(size_t(value) >= std::size(ActionMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ActionMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(ActionModeEnum value) { return toString(value); }
        template<> inline ActionModeEnum strToEnum<ActionModeEnum>(char const* value)
        {
            return static_cast<ActionModeEnum>(details::indexInEnum(value, ActionMode::enumToString));
        }

        struct InGameCameraParams : HelperObject // Object
        {
            InGameCameraParams(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InGameCameraParams";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ActivationDelay() const;
            Ent::Gen::ActionMode AnimAction() const;
            Ent::Gen::AnimTag AnimTag() const;
            Ent::Gen::Float AnticipationCameraSightTime() const;
            Ent::Gen::Bool AnticipationForceReset() const;
            Ent::Gen::Float AnticipationMaxPitch() const;
            Ent::Gen::Float AnticipationMaxYaw() const;
            Ent::Gen::Bool AnticipationNoMoveLock() const;
            Ent::Gen::Float AnticipationPitchAngleMax() const;
            Ent::Gen::Float AnticipationPitchAngleMin() const;
            Ent::Gen::Float AnticipationSmooth() const;
            Ent::Gen::Float AnticipationYawAngleMax() const;
            Ent::Gen::Float AnticipationYawAngleMin() const;
            Ent::Gen::Float AnticipationZSmooth() const;
            Ent::Gen::Float AntipationYawSpeedForce() const;
            Ent::Gen::Float AntipationYawSpeedForceSmooth() const;
            Ent::Gen::AutoRotationType AutoRotate() const;
            Ent::Gen::Float AutoRotateIdealPitch() const;
            Ent::Gen::Float AutoRotatePitchMaxSpeed() const;
            Ent::Gen::Float AutoRotatePitchMinAngle() const;
            Ent::Gen::Float AutoRotatePitchSpeedSmooth() const;
            Ent::Gen::Float AutoRotateRollFactor() const;
            Ent::Gen::Float AutoRotateUnlockPitchDelta() const;
            Ent::Gen::Float AutoRotateUnlockYawDelta() const;
            Ent::Gen::Float AutoRotateYawMaxSpeed() const;
            Ent::Gen::Float AutoRotateYawMinAngle() const;
            Ent::Gen::Float AutoRotateYawMinSpeed() const;
            Ent::Gen::Float AutoRotateYawSpeedSmooth() const;
            Ent::Gen::CameraType CameraType() const;
            Ent::Gen::Float CollisionBackToPosSpeed() const;
            Ent::Gen::Float CollisionCorrectionSpeed() const;
            Ent::Gen::Float CollisionWantedNearPlane() const;
            Ent::Gen::Float CollisionZOffset() const;
            Ent::Gen::Float CollisionZOffsetMaxRadius() const;
            Ent::Gen::Float CollisionZOffsetSmooth() const;
            Ent::Gen::Bool DOFEnabled() const;
            Ent::Gen::Float DOFFarStart() const;
            Ent::Gen::Float DOFFarStop() const;
            Ent::Gen::Float DOFMultiplier() const;
            Ent::Gen::Float DOFNearStart() const;
            Ent::Gen::Float DOFNearStop() const;
            Ent::Gen::Float DecenteringPositionX() const;
            Ent::Gen::Float DecenteringPositionY() const;
            Ent::Gen::Float DecenteringPositionZ() const;
            Ent::Gen::Float DistanceModifierRamp() const;
            Ent::Gen::Float DodgeLatenessSmooth() const;
            Ent::Gen::Float DodgeLatenessSmoothThreshold() const;
            Ent::Gen::Float FOV() const;
            Ent::Gen::Float FOVRamp() const;
            Ent::Gen::Float FightDistanceOffset() const;
            Ent::Gen::Float FightDistanceOffsetSpeed() const;
            Ent::Gen::Float FightRotationDuration() const;
            Ent::Gen::Float FightRotationInDuration() const;
            Ent::Gen::Float FightRotationOutDuration() const;
            Ent::Gen::Float FightRotationSpeed() const;
            Ent::Gen::Float FightSpeedRationImpactCoeff() const;
            Ent::Gen::Position InterestPointPosition() const;
            Ent::Gen::Vector3 InterestPointSight() const;
            Ent::Gen::Float InterestPointSightAngleSpeed() const;
            Ent::Gen::Float InterestPointTimeToReachMaxWeight() const;
            Ent::Gen::Float JoyAccelerationBoostChangingSideH() const;
            Ent::Gen::Float JoyAccelerationBoostChangingSideV() const;
            Ent::Gen::Float JoyAccelerationH() const;
            Ent::Gen::Float JoyAccelerationV() const;
            Ent::Gen::Float JoyDecelerationH() const;
            Ent::Gen::Float JoyDecelerationV() const;
            Ent::Gen::ScaleConverter JoyRotationScaleConverterH() const;
            Ent::Gen::ScaleConverter JoyRotationScaleConverterV() const;
            Ent::Gen::Float JoySpeedFactor() const;
            Ent::Gen::Float JoySpeedMaxH() const;
            Ent::Gen::Float JoySpeedMaxV() const;
            Ent::Gen::Bool JumpEnable() const;
            Ent::Gen::Float LockDecenteringDuration() const;
            Ent::Gen::Float LockDistSpeed() const;
            Ent::Gen::Float LockEndTransitionThreshold() const;
            Ent::Gen::Float LockLowSpeedDist() const;
            Ent::Gen::Float LockMaxDecentering() const;
            Ent::Gen::Float LockMaxDist() const;
            Ent::Gen::Float LockMinCameraDist() const;
            Ent::Gen::Float LockOffsetTransitionSmooth() const;
            Ent::Gen::Float LockPitchSpeed() const;
            Ent::Gen::Float LockPitchSpeedClose() const;
            Ent::Gen::Float LockSizeRatioThreshold() const;
            Ent::Gen::Float LockTransitionSmooth() const;
            Ent::Gen::Float LockTriggerDist() const;
            Ent::Gen::Float LockYawSpeed() const;
            Ent::Gen::Float LockYawSpeedClose() const;
            Ent::Gen::Float LookAtOffsetPitch() const;
            Ent::Gen::Float LookAtOffsetYaw() const;
            Ent::Gen::Float NearPlane() const;
            Ent::Gen::Float PitchConstraintAnticipation() const;
            Ent::Gen::Float PitchConstraintMax() const;
            Ent::Gen::Float PitchConstraintMin() const;
            Ent::Gen::Float PitchToFOV() const;
            Ent::Gen::Float SpacePitchOffset() const;
            Ent::Gen::ScaleConverter SpeedToDistanceModifier() const;
            Ent::Gen::ScaleConverter SpeedToFOV() const;
            Ent::Gen::Float TargetBrutalStopSmoothThreshold() const;
            Ent::Gen::Float TargetDeadZoneRadius() const;
            Ent::Gen::Float TargetDistance() const;
            Ent::Gen::Float TargetJumpSmooth() const;
            Ent::Gen::Float TargetMaxSpeed() const;
            Ent::Gen::Float TargetMinSmooth() const;
            Ent::Gen::Float TargetOffsetX() const;
            Ent::Gen::Float TargetOffsetY() const;
            Ent::Gen::Float TargetOffsetZ() const;
            Ent::Gen::Float TargetSmoothMultiplier() const;
            Ent::Gen::Float TargetSmoothMultiplierZ() const;
            Ent::Gen::Float TargetXOffsetFromYawForce() const;
            Ent::Gen::Float TargetXOffsetFromYawSmooth() const;
            Ent::Gen::Float TargetZOffsetFromPitchForce() const;
            Ent::Gen::Float TargetZOffsetFromPitchSmooth() const;
            Ent::Gen::Bool UseSpeedToFOV() const;
            Ent::Gen::Float WorldZOffset() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool defaultParamsRequired() const;
        };

        struct InGameCameraObservationParams : HelperObject // Object
        {
            InGameCameraObservationParams(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InGameCameraObservationParams";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::InGameCameraParams aim() const;
            Ent::Gen::InGameCameraParams fps() const;
            Ent::Gen::InGameCameraParams lock() const;
            Ent::Gen::InGameCameraParams motionconstraint() const;
            Ent::Gen::InGameCameraParams shoulder() const;
            Ent::Gen::InGameCameraParams sightconstraint() const;
            Ent::Gen::InGameCameraParams strongattack() const;
            Ent::Gen::InGameCameraParams thirdperson() const;
            Ent::Gen::InGameCameraParams zoom() const;
        };

        struct InGameCameraData : HelperObject // Object
        {
            InGameCameraData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InGameCameraData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::InGameCameraObservationParams cinematic() const;
            Ent::Gen::InGameCameraObservationParams clamber() const;
            Ent::Gen::InGameCameraObservationParams crouch() const;
            Ent::Gen::InGameCameraObservationParams dive() const;
            Ent::Gen::InGameCameraObservationParams fall() const;
            Ent::Gen::InGameCameraObservationParams fight() const;
            Ent::Gen::InGameCameraObservationParams fly() const;
            Ent::Gen::InGameCameraObservationParams prone() const;
            Ent::Gen::InGameCameraObservationParams ridden() const;
            Ent::Gen::InGameCameraObservationParams riddenfly() const;
            Ent::Gen::InGameCameraObservationParams ride() const;
            Array<Ent::Gen::CameraSoundEvent> soundEvents() const;
            Ent::Gen::InGameCameraObservationParams standup() const;
            Ent::Gen::InGameCameraObservationParams swim() const;
        };

        struct ChargedJumpAnimation : HelperObject // Object
        {
            ChargedJumpAnimation(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ChargedJumpAnimation";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::ActionMode animActionMode() const;
            Ent::Gen::Float lerpFactorScaleXY() const;
            Ent::Gen::Float lerpFactorScaleZ() const;
            Ent::Gen::ScaleConverter scaleByPower() const;
        };

        struct ChargedJumpGD : HelperObject // Object
        {
            ChargedJumpGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ChargedJumpGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float bounceJumpTimeWindow() const;
            Array<Ent::Gen::ChargedJumpAnimation> chargedJumpAnimations() const;
            Ent::Gen::Float chargingDecelerationFactor() const;
            Ent::Gen::ScaleConverter nextJumpPowerByFallHeight() const;
        };

        struct BoidParams : HelperObject // Object
        {
            BoidParams(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BoidParams";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Acceleration() const;
            Ent::Gen::ActionMode Action() const;
            Ent::Gen::ActionMode ActionSecondary() const;
            Ent::Gen::Float AlignmentDistance() const;
            Ent::Gen::Float AlignmentStrength() const;
            Ent::Gen::Bool AllowMerge() const;
            Ent::Gen::Float AngularSlerpCoeff() const;
            Ent::Gen::Float AngularSpeedMax() const;
            Ent::Gen::Bool AnimFromStart() const;
            Ent::Gen::Bool BlockProcess() const;
            Ent::Gen::Bool ClampVerticalAngle() const;
            Ent::Gen::Float CohesionStrength() const;
            Ent::Gen::Float DragForce() const;
            Ent::Gen::Float EntityDistance() const;
            Ent::Gen::Bool FlapBehavior() const;
            Ent::Gen::Float FlattenZFactorLeaves() const;
            Ent::Gen::Float FlattenZFactorRoots() const;
            Ent::Gen::Float FollowEmitterStrength() const;
            Ent::Gen::BoidGoalMode GoalMode() const;
            Ent::Gen::Bool GroundRepulse() const;
            Ent::Gen::Float GroundRepulseHeight() const;
            Ent::Gen::Float GroundRepulseStrength() const;
            Ent::Gen::Float InitialInertiaFactor() const;
            Ent::Gen::Float InitialInertiaVerticalFactor() const;
            Ent::Gen::Float LightBrightness() const;
            Ent::Gen::Color LightColor() const;
            Ent::Gen::LocomotionMode Locomotion() const;
            Ent::Gen::Float MaxVerticalAngle() const;
            Ent::Gen::Float MaxVerticalAngleVariation() const;
            Ent::Gen::Int NbMaxNewChildren() const;
            Ent::Gen::Bool OnGround() const;
            Ent::Gen::Float RepulsionStrength() const;
            Ent::Gen::Float RotateBendFactor() const;
            Ent::Gen::Bool SightZ() const;
            Array<Ent::Gen::BoidSpeedMaxData> SpeedMaxData() const;
            Ent::Gen::SpeedMode SpeedMode() const;
            Ent::Gen::Float SpeedRandomMultiplier() const;
            Ent::Gen::StyleMode StyleMode() const;
            Ent::Gen::Float UpdateForceFactor() const;
            Ent::Gen::Float UpdateInertiaFactor() const;
            Ent::Gen::Float VerticalMasterPositionOffset() const;
            Ent::Gen::Int VisibilityStateFrameDelay() const;
            Ent::Gen::Bool Visible() const;
            Ent::Gen::Float VisualScaleMultiplierAtStartup() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::String _name() const;
        };

        struct AnimationModelComponentInput_ActionMode : HelperObject // Object
        {
            AnimationModelComponentInput_ActionMode(Ent::Node* _node): HelperObject(_node) {}
            
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool engaged() const;
            Ent::Gen::ActionMode val() const;
        };

        struct AnimationModelComponentInput : HelperObject // Object
        {
            AnimationModelComponentInput(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationModelComponentInput";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AnimationModelComponentInput_ActionMode ActionMode() const;
            Ent::Gen::AdditionnalTag AdditionnalTag() const;
            Ent::Gen::AnimationModelComponentInput_AnimTag AnimTag() const;
            Ent::Gen::AnimationModelComponentInput_AttitudeMode AttitudeMode() const;
            Ent::Gen::AnimationModelComponentInput_CarryMode CarryMode() const;
            Ent::Gen::ForceBlendIn ForceBlendIn() const;
            Ent::Gen::ForceBlendInReachRequired ForceBlendInReachRequired() const;
            Ent::Gen::AnimationModelComponentInput_LocomotionMode LocomotionMode() const;
            Ent::Gen::PlayRatio PlayRatio() const;
            Ent::Gen::AnimationModelComponentInput_SpeedMode SpeedMode() const;
            Ent::Gen::SpeedModeMax SpeedModeMax() const;
            Ent::Gen::SpeedScaleXY SpeedScaleXY() const;
            Ent::Gen::AnimationModelComponentInput_StyleMode StyleMode() const;
            Ent::Gen::ComponentInput Super() const;
            Ent::Gen::VariantAllowed VariantAllowed() const;
            Ent::Gen::String _comment() const;
        };

        struct AnimTags : HelperObject // Object
        {
            AnimTags(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimTags";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActionMode ActionMode() const;
            Ent::Gen::AnimAdditionalTag AnimAdditionalTag() const;
            Ent::Gen::AnimTag AnimTag() const;
            Ent::Gen::AttitudeMode AttitudeMode() const;
            Ent::Gen::CarryMode CarryMode() const;
            Ent::Gen::LocomotionMode LocomotionMode() const;
            Ent::Gen::Float PlayRatio() const;
            Ent::Gen::SpeedMode SpeedMode() const;
            Ent::Gen::StyleMode StyleMode() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionEmote : HelperObject // Object
        {
            ActionEmote(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionEmote";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActionMode AnimAction() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionAimProjectile : HelperObject // Object
        {
            ActionAimProjectile(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionAimProjectile";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::ActionMode actionMode() const;
        };

        struct ActionAttack_AttackOutputs : HelperObject // Object
        {
            ActionAttack_AttackOutputs(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionAttack::AttackOutputs";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AnimTags AnimTags() const;
            Ent::Gen::Vector3 Direction() const;
            Ent::Gen::String _comment() const;
        };

        struct ActionAttack : HelperObject // Object
        {
            ActionAttack(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActionAttack";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActionAttack_AttackOutputs Outputs() const;
            Ent::Gen::ActorState Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AbilityData : HelperObject // Object
        {
            AbilityData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AbilityData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            PrimArray<Ent::Gen::ActorAbility> abilities() const;
        };

        struct ActorGD : HelperObject // Object
        {
            ActorGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Archetype Archetype() const;
            Ent::Gen::StyleMode ClassStyleTag() const;
            Ent::Gen::String FactionName() const;
            Ent::Gen::String Icon() const;
            Ent::Gen::Bool InSpiritWorld() const;
            Ent::Gen::Specie Specie() const;
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::Bool Weapon() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::AbilityData abilityData() const;
            Ent::Gen::AttackData attackData() const;
            Ent::Gen::ImpactAndSolidityData impactAndSolidityData() const;
            Ent::Gen::ProjectileData projectileData() const;
            Ent::Gen::Float radius() const;
            Ent::Gen::ShootData shootData() const;
            Ent::Gen::StunData stunData() const;
            Ent::Gen::Float volume() const;
        };

        struct ProjectileGD : HelperObject // Object
        {
            ProjectileGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ProjectileGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ActorGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct CreatureGD : HelperObject // Object
        {
            CreatureGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CreatureGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Bool DisableLookAt() const;
            Ent::Gen::Float FlyPitchAngleMax() const;
            Ent::Gen::Float FlyPitchAngleMin() const;
            Ent::Gen::Bool IsBig() const;
            Ent::Gen::Bool IsDivinity() const;
            Ent::Gen::Bool IsGuardian() const;
            Ent::Gen::Bool IsStaff() const;
            Ent::Gen::Bool SpawnSoulIfNoEnemy() const;
            Ent::Gen::SpeedFastMinDuration SpeedFastMinDuration() const;
            Ent::Gen::ActorGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::BiteData biteData() const;
            Ent::Gen::CreatureDangerousness dangerousnessData() const;
            Ent::Gen::RevivedData revivedData() const;
        };

        struct ClothGD : HelperObject // Object
        {
            ClothGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ClothGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String BodyEventsPath() const;
            Ent::Gen::String BodyNamePath() const;
            PrimArray<Ent::Gen::String> SoundBanks() const;
            Ent::Gen::SoundEventMapping SoundEventMappingRules() const;
            Ent::Gen::ActorGD Super() const;
            Ent::Gen::String _comment() const;
        };

        struct AaMode : EnumPropHelper<AaMode, AaModeEnum> // Enum
        {
            using Enum = AaModeEnum;
            using PropHelper<AaMode, Enum>::operator=;
            AaMode(Ent::Node* _node): EnumPropHelper<AaMode, Enum>(_node) {}
            static constexpr char schemaName[] = "AaMode";
            static constexpr char const* enumToString[] = {
                "Fxaa",
                "Smaa",
                "None",
                "AaMode_Count",
            };
        };
        inline char const* toString(AaModeEnum value)
        {
            if(size_t(value) >= std::size(AaMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AaMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(AaModeEnum value) { return toString(value); }
        template<> inline AaModeEnum strToEnum<AaModeEnum>(char const* value)
        {
            return static_cast<AaModeEnum>(details::indexInEnum(value, AaMode::enumToString));
        }

        struct RenderManager_RenderConfig : HelperObject // Object
        {
            RenderManager_RenderConfig(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RenderManager::RenderConfig";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::AaMode AaMode() const;
            Ent::Gen::Int ClusteredLighting() const;
            Ent::Gen::Int DisplacementMapSize() const;
            Ent::Gen::Int EnableAsyncPipelineCreation() const;
            Ent::Gen::Int EnableColorCorrection() const;
            Ent::Gen::Int EnableComputeForDeferredLighting() const;
            Ent::Gen::Int EnableComputeForUnderWater() const;
            Ent::Gen::Int EnableDepthOfField() const;
            Ent::Gen::Int EnableFurTranslucency() const;
            Ent::Gen::Int EnableLensFlare() const;
            Ent::Gen::Int EnableMTR() const;
            Ent::Gen::Int EnableMotionBlur() const;
            Ent::Gen::Int EnableNonBlockingDrawUpdates() const;
            Ent::Gen::Int EnableSSAO() const;
            Ent::Gen::Int EnableSSCS() const;
            Ent::Gen::Int EnableSSR() const;
            Ent::Gen::Int EnableSSSS() const;
            Ent::Gen::Int EnableTonemapping() const;
            Ent::Gen::Int EnableUnderwaterPostEffect() const;
            Ent::Gen::Int EnableVegetationDrawDatabase() const;
            Ent::Gen::Int FurFocusShadowMapResolution() const;
            Ent::Gen::Float GlobalLODBias() const;
            Ent::Gen::Float GlobalLODScale() const;
            Ent::Gen::Float LODDecimationFactor() const;
            Ent::Gen::String MaterialBank() const;
            Ent::Gen::Int MaxActiveShadowLights() const;
            Ent::Gen::Float MinTriangleSize() const;
            Ent::Gen::Int ParticleLigthingAtlasSize() const;
            Ent::Gen::Int PlanarReflectionsDownsample() const;
            Ent::Gen::Int Quality() const;
            Ent::Gen::Int QualityDepthOfField() const;
            Ent::Gen::Int RemoveTemporalNaNs() const;
            Ent::Gen::Int RippleMapSize() const;
            Ent::Gen::Int SamplesSSAO() const;
            Ent::Gen::Int SamplesSSSS() const;
            Ent::Gen::Float ShadowLODScale() const;
            Ent::Gen::Int ShadowMapSize() const;
            Ent::Gen::Float TerrainAlbedoMapBlendAreaRatio() const;
            Ent::Gen::Float TerrainAlbedoMapExtent() const;
            Ent::Gen::Int UseHiZBufferForClusteredLighting() const;
            Ent::Gen::String _comment() const;
        };

        struct RenderManager : HelperObject // Object
        {
            RenderManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RenderManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String DecalMeshPath() const;
            Ent::Gen::RenderManager_DepthOfFieldConfig DepthOfField() const;
            Ent::Gen::Bool DisableMoveDrawOrigin() const;
            Ent::Gen::Bool DoubleSizeIn4K() const;
            Ent::Gen::Bool EnableFade() const;
            Ent::Gen::Bool EnableLODTransitions() const;
            Ent::Gen::Float FloatPrecisionThreshold() const;
            Ent::Gen::Bool Fullscreen() const;
            Ent::Gen::RenderManager_RenderConfig Global() const;
            Ent::Gen::Int ImGuiFontScale() const;
            Ent::Gen::Float LODTransitionDuration() const;
            Ent::Gen::ScaleConverter MotionBlurHeightFactorFromSpeed() const;
            Ent::Gen::RenderManager_RenderConfig PC() const;
            Ent::Gen::RenderManager_RenderConfig PS4() const;
            Ent::Gen::RenderManager_RenderConfig PS4Neo() const;
            Ent::Gen::RenderManager_RenderConfig PS5() const;
            Ent::Gen::Bool RenderToWindow() const;
            Ent::Gen::Int ResolutionX() const;
            Ent::Gen::Int ResolutionY() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::Int VSync() const;
            Ent::Gen::Int WindowPositionX() const;
            Ent::Gen::Int WindowPositionY() const;
            Ent::Gen::Int WindowSizeX() const;
            Ent::Gen::Int WindowSizeY() const;
            Ent::Gen::String _comment() const;
        };

        struct AIOrderType : EnumPropHelper<AIOrderType, AIOrderTypeEnum> // Enum
        {
            using Enum = AIOrderTypeEnum;
            using PropHelper<AIOrderType, Enum>::operator=;
            AIOrderType(Ent::Node* _node): EnumPropHelper<AIOrderType, Enum>(_node) {}
            static constexpr char schemaName[] = "AIOrderType";
            static constexpr char const* enumToString[] = {
                "AIOrderType_None",
                "follow",
                "attack",
                "stay",
                "heal",
                "transhumance",
                "changemode",
                "readytoattack",
                "AIOrderType_COUNT",
            };
        };
        inline char const* toString(AIOrderTypeEnum value)
        {
            if(size_t(value) >= std::size(AIOrderType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AIOrderType::enumToString[size_t(value)];
        }
        inline char const* toInternal(AIOrderTypeEnum value) { return toString(value); }
        template<> inline AIOrderTypeEnum strToEnum<AIOrderTypeEnum>(char const* value)
        {
            return static_cast<AIOrderTypeEnum>(details::indexInEnum(value, AIOrderType::enumToString));
        }

        struct AIContextSlot : HelperObject // Object
        {
            AIContextSlot(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AIContextSlot";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int Count() const;
            Ent::Gen::String Name() const;
            Ent::Gen::String _comment() const;
        };

        struct AIContextGD : HelperObject // Object
        {
            AIContextGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AIContextGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::ComponentGD Super() const;
            Ent::Gen::String _comment() const;
            Ent::Gen::Float attackCircleRadius() const;
            Ent::Gen::Float distanceBetweenCreatures() const;
            Ent::Gen::Float distantReachCircleRadius() const;
            Ent::Gen::Float followCircleRadius() const;
            Ent::Gen::Float lockTargetCircleRadius() const;
            Array<Ent::Gen::AIContextSlot> slots() const;
        };

        struct AIAggroInitAndDecValue : HelperObject // Object
        {
            AIAggroInitAndDecValue(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AIAggroInitAndDecValue";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int DecrementValue() const;
            Ent::Gen::Int InitValue() const;
            Ent::Gen::Int MaxValue() const;
            Ent::Gen::String _comment() const;
        };

        struct AIKnowledgeManager : HelperObject // Object
        {
            AIKnowledgeManager(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AIKnowledgeManager";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Array<Ent::Gen::AIAggroInitAndDecValue> AggroValues() const;
            Ent::Gen::Map<AIOrderTypeEnum, Ent::Gen::Int> OrderPriorities() const;
            Ent::Gen::Manager Super() const;
            Ent::Gen::String _comment() const;
        };

        struct ActorStateStack : HelperObject // Object
        {
            ActorStateStack(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ActorStateStack";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct AnalyticsFPS : HelperObject // Object
        {
            AnalyticsFPS(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnalyticsFPS";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float TeleportationDistance() const;
            Ent::Gen::Float TeleportationInterval() const;
            Ent::Gen::String _comment() const;
        };

        struct AnalyticsInGameViewer : HelperObject // Object
        {
            AnalyticsInGameViewer(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnalyticsInGameViewer";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct AnalyticsObserverInterface : HelperObject // Object
        {
            AnalyticsObserverInterface(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnalyticsObserverInterface";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct AnimationGDData : HelperObject // Object
        {
            AnimationGDData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationGDData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String animationDatabasePath() const;
            Ent::Gen::String skeletonPath() const;
        };

        struct AnimationTreeConstraintsGD_BendSoundEventData : HelperObject // Object
        {
            AnimationTreeConstraintsGD_BendSoundEventData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD::BendSoundEventData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String BendStartEventName() const;
            Ent::Gen::String CatapultStartEventName() const;
            Ent::Gen::String _comment() const;
        };

        struct AudioEventData : HelperObject // Object
        {
            AudioEventData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "AudioEventData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int ID() const;
            Ent::Gen::String Name() const;
            Ent::Gen::Float Range() const;
            Ent::Gen::String _comment() const;
        };

        struct BehaviorPesto : HelperObject // Object
        {
            BehaviorPesto(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "BehaviorPesto";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct CheatCodeReplication : HelperObject // Object
        {
            CheatCodeReplication(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CheatCodeReplication";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct ClassRef : HelperObject // Object
        {
            ClassRef(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ClassRef";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct CloudsGenerator : HelperObject // Object
        {
            CloudsGenerator(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "CloudsGenerator";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float ApearanceDuration() const;
            Ent::Gen::Float ApearanceDurationRandom() const;
            Ent::Gen::Float CloudSize() const;
            Ent::Gen::Float CloudSizeRandom() const;
            Ent::Gen::Float CloudSpeedMultiplier() const;
            Ent::Gen::Float CloudStrength() const;
            Ent::Gen::Float CloudsCoverageDensity() const;
            Ent::Gen::Float DisapearanceDuration() const;
            Ent::Gen::Float DisapearanceDurationRandom() const;
            Ent::Gen::Float LifeDuration() const;
            Ent::Gen::Float LifeDurationRandom() const;
            Ent::Gen::String _comment() const;
        };

        struct ConditionalRigidityAttribute_ActorStateName : HelperObject // Object
        {
            ConditionalRigidityAttribute_ActorStateName(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::ActorStateName";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String ActionName() const;
            Ent::Gen::String _comment() const;
        };

        struct ContactActor : HelperObject // Object
        {
            ContactActor(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ContactActor";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct Edge : HelperObject // Object
        {
            Edge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Edge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct EntityArchive_MetaData : HelperObject // Object
        {
            EntityArchive_MetaData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityArchive::MetaData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Ent::Gen::String RawDataPath() const;
            Ent::Gen::Int Version() const;
            Ent::Gen::String _comment() const;
        };

        struct EntityGD : HelperObject // Object
        {
            EntityGD(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityGD";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            PrimArray<Ent::Gen::String> components() const;
        };

        struct EntityGDRef : HelperObject // Object
        {
            EntityGDRef(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "EntityGDRef";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::String hash() const;
        };

        struct FadeEffect : HelperObject // Object
        {
            FadeEffect(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "FadeEffect";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Bool affectVisibilityProperty() const;
            Ent::Gen::Float delay() const;
            Ent::Gen::Float destinationAlpha() const;
            Ent::Gen::Float duration() const;
            Ent::Gen::Bool infiniteDuration() const;
            Ent::Gen::Float sourceAlpha() const;
        };

        struct GRC : HelperObject // Object
        {
            GRC(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GRC";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct GVoxelVolumeCollection : HelperObject // Object
        {
            GVoxelVolumeCollection(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "GVoxelVolumeCollection";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct IMatchMakerApi : HelperObject // Object
        {
            IMatchMakerApi(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "IMatchMakerApi";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct IOnlineApi : HelperObject // Object
        {
            IOnlineApi(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "IOnlineApi";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct InputController : HelperObject // Object
        {
            InputController(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "InputController";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };



        struct MeshNavigationBehavior : HelperObject // Object
        {
            MeshNavigationBehavior(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MeshNavigationBehavior";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct MeshShape : HelperObject // Object
        {
            MeshShape(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "MeshShape";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Path() const;
            Ent::Gen::String _comment() const;
        };

        struct NavMeshArea : EnumPropHelper<NavMeshArea, NavMeshAreaEnum> // Enum
        {
            using Enum = NavMeshAreaEnum;
            using PropHelper<NavMeshArea, Enum>::operator=;
            NavMeshArea(Ent::Node* _node): EnumPropHelper<NavMeshArea, Enum>(_node) {}
            static constexpr char schemaName[] = "NavMeshArea";
            static constexpr char const* enumToString[] = {
                "Hole",
                "Ground",
                "ShallowWater",
                "DeepWater",
                "Beach",
                "Special",
                "NavMeshArea_COUNT",
            };
        };
        inline char const* toString(NavMeshAreaEnum value)
        {
            if(size_t(value) >= std::size(NavMeshArea::enumToString))
                throw std::runtime_error("Wrong enum value");
            return NavMeshArea::enumToString[size_t(value)];
        }
        inline char const* toInternal(NavMeshAreaEnum value) { return toString(value); }
        template<> inline NavMeshAreaEnum strToEnum<NavMeshAreaEnum>(char const* value)
        {
            return static_cast<NavMeshAreaEnum>(details::indexInEnum(value, NavMeshArea::enumToString));
        }

        struct NetRoot : HelperObject // Object
        {
            NetRoot(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "NetRoot";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct OutfitFadeParameter : HelperObject // Object
        {
            OutfitFadeParameter(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OutfitFadeParameter";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Delay() const;
            Ent::Gen::Bool Emissive() const;
            Ent::Gen::Bool Enabled() const;
            Ent::Gen::Bool FadeBodyPiece() const;
            Ent::Gen::Float Time() const;
            Ent::Gen::String _comment() const;
        };

        struct OwnershipModule : HelperObject // Object
        {
            OwnershipModule(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "OwnershipModule";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct PhysicsNetworker : HelperObject // Object
        {
            PhysicsNetworker(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PhysicsNetworker";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct PlayerManagerDebugger : HelperObject // Object
        {
            PlayerManagerDebugger(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PlayerManagerDebugger";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String SaveServerURL() const;
            Ent::Gen::Float SelectionSpeed() const;
            Ent::Gen::String _comment() const;
        };

        struct PointCloud : HelperObject // Object
        {
            PointCloud(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "PointCloud";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct RagdollSetupData : HelperObject // Object
        {
            RagdollSetupData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "RagdollSetupData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float blend() const;
            Ent::Gen::Float inertiaFactor() const;
            Ent::Gen::Float jointsRigidity() const;
        };

        struct ReplicaReplay : HelperObject // Object
        {
            ReplicaReplay(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ReplicaReplay";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct SceneNode : HelperObject // Object
        {
            SceneNode(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SceneNode";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct SceneNodeGraph : HelperObject // Object
        {
            SceneNodeGraph(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SceneNodeGraph";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct Sensor : HelperObject // Object
        {
            Sensor(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Sensor";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct SmallActorSpawnRuleExchangeData : HelperObject // Object
        {
            SmallActorSpawnRuleExchangeData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "SmallActorSpawnRuleExchangeData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String AudioEventName() const;
            Ent::Gen::String AudioEventSoundBank() const;
            Ent::Gen::Bool IsValid() const;
            Ent::Gen::Int RuleIndex() const;
            Ent::Gen::String _comment() const;
        };

        struct StateGauge : HelperObject // Object
        {
            StateGauge(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "StateGauge";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String _comment() const;
            Ent::Gen::Float m_amount() const;
            Ent::Gen::Float m_maxAmount() const;
            Ent::Gen::Float m_pendingDiff() const;
        };


        struct Team_PlayerData : HelperObject // Object
        {
            Team_PlayerData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Team::PlayerData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int PlayerID() const;
            Ent::Gen::String _comment() const;
        };

        struct TextureGroundTypeMap : HelperObject // Object
        {
            TextureGroundTypeMap(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TextureGroundTypeMap";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct TextureHeightMap : HelperObject // Object
        {
            TextureHeightMap(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TextureHeightMap";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct Timer : HelperObject // Object
        {
            Timer(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "Timer";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };

        struct TravelParams : HelperObject // Object
        {
            TravelParams(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "TravelParams";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float Acceleration() const;
            Ent::Gen::Float AccelerationZ() const;
            Ent::Gen::Float Deceleration() const;
            Ent::Gen::Float HeightOffset() const;
            Ent::Gen::Float MoveBlend() const;
            Ent::Gen::Float TravelSpeed() const;
            Ent::Gen::Bool UseFlyingNavMesh() const;
            Ent::Gen::String _comment() const;
        };

        struct VegetationVisibilityDistanceCategory : HelperObject // Object
        {
            VegetationVisibilityDistanceCategory(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VegetationVisibilityDistanceCategory";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String Name() const;
            Ent::Gen::Float VisibilityDistance() const;
            Ent::Gen::String _comment() const;
        };

        struct VisualResourceBuildData : HelperObject // Object
        {
            VisualResourceBuildData(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "VisualResourceBuildData";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            PrimArray<Ent::Gen::String> GRCs() const;
            PrimArray<Ent::Gen::Int> LODs() const;
            Ent::Gen::String _comment() const;
        };

        struct ZoneCylinderShape : HelperObject // Object
        {
            ZoneCylinderShape(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ZoneCylinderShape";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Float DistanceBetweenPoints() const;
            Ent::Gen::Float Radius() const;
            Ent::Gen::String _comment() const;
        };

        struct ZoneMeshShape : HelperObject // Object
        {
            ZoneMeshShape(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "ZoneMeshShape";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::String ConvexZoneFilePath() const;
            Ent::Gen::String _comment() const;
        };

        struct sBiomeSFXResult : HelperObject // Object
        {
            sBiomeSFXResult(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sBiomeSFXResult";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int ID() const;
            Ent::Gen::Float Weight() const;
            Ent::Gen::String _comment() const;
        };

        struct sBiomeSoundResult : HelperObject // Object
        {
            sBiomeSoundResult(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sBiomeSoundResult";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
            Ent::Gen::Int ID() const;
            Ent::Gen::Float Weight() const;
            Ent::Gen::String _comment() const;
        };

        struct sJointMotorDesc : HelperObject // Object
        {
            sJointMotorDesc(Ent::Node* _node): HelperObject(_node) {}
            static constexpr char schemaName[] = "sJointMotorDesc";
            static NodeUniquePtr load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return _entlib.loadFileAsNode(_sourceFile, *_entlib.getSchema(schemaName));
            }
            static NodeUniquePtr create(Ent::EntityLib& _entlib)
            {
                return _entlib.makeNode(schemaName);
            }
        
        };


        // variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_
        inline char const* variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::String> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::string() const
        {
            return strcmp(node->getUnionType(), "string") != 0? std::optional<Ent::Gen::String>{}: std::optional<Ent::Gen::String>(node->getUnionData());
        }
        inline Ent::Gen::String variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setstring() const
        {
            return Ent::Gen::String(node->setUnionType("string"));
        }
        inline std::optional<Ent::Gen::Bool> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::bool_() const
        {
            return strcmp(node->getUnionType(), "bool") != 0? std::optional<Ent::Gen::Bool>{}: std::optional<Ent::Gen::Bool>(node->getUnionData());
        }
        inline Ent::Gen::Bool variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setbool_() const
        {
            return Ent::Gen::Bool(node->setUnionType("bool"));
        }
        inline std::optional<Ent::Gen::Int> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::s32() const
        {
            return strcmp(node->getUnionType(), "s32") != 0? std::optional<Ent::Gen::Int>{}: std::optional<Ent::Gen::Int>(node->getUnionData());
        }
        inline Ent::Gen::Int variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::sets32() const
        {
            return Ent::Gen::Int(node->setUnionType("s32"));
        }
        inline std::optional<Ent::Gen::Float> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::float_() const
        {
            return strcmp(node->getUnionType(), "float") != 0? std::optional<Ent::Gen::Float>{}: std::optional<Ent::Gen::Float>(node->getUnionData());
        }
        inline Ent::Gen::Float variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setfloat_() const
        {
            return Ent::Gen::Float(node->setUnionType("float"));
        }
        inline std::optional<Ent::Gen::Vector2> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Vector2() const
        {
            return strcmp(node->getUnionType(), "Vector2") != 0? std::optional<Ent::Gen::Vector2>{}: std::optional<Ent::Gen::Vector2>(node->getUnionData());
        }
        inline Ent::Gen::Vector2 variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setVector2() const
        {
            return Ent::Gen::Vector2(node->setUnionType("Vector2"));
        }
        inline std::optional<Ent::Gen::Vector3> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Vector3() const
        {
            return strcmp(node->getUnionType(), "Vector3") != 0? std::optional<Ent::Gen::Vector3>{}: std::optional<Ent::Gen::Vector3>(node->getUnionData());
        }
        inline Ent::Gen::Vector3 variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setVector3() const
        {
            return Ent::Gen::Vector3(node->setUnionType("Vector3"));
        }
        inline std::optional<Ent::Gen::Position> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Position() const
        {
            return strcmp(node->getUnionType(), "Position") != 0? std::optional<Ent::Gen::Position>{}: std::optional<Ent::Gen::Position>(node->getUnionData());
        }
        inline Ent::Gen::Position variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setPosition() const
        {
            return Ent::Gen::Position(node->setUnionType("Position"));
        }
        inline std::optional<PrimArray<Ent::Gen::String>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::stringVec() const
        {
            return strcmp(node->getUnionType(), "vector<string>") != 0? std::optional<PrimArray<Ent::Gen::String>>{}: std::optional<PrimArray<Ent::Gen::String>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::String> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setstringVec() const
        {
            return PrimArray<Ent::Gen::String>(node->setUnionType("vector<string>"));
        }
        inline std::optional<PrimArray<Ent::Gen::Bool>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::boolVec() const
        {
            return strcmp(node->getUnionType(), "vector<bool>") != 0? std::optional<PrimArray<Ent::Gen::Bool>>{}: std::optional<PrimArray<Ent::Gen::Bool>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::Bool> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setboolVec() const
        {
            return PrimArray<Ent::Gen::Bool>(node->setUnionType("vector<bool>"));
        }
        inline std::optional<PrimArray<Ent::Gen::Int>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::s32Vec() const
        {
            return strcmp(node->getUnionType(), "vector<s32>") != 0? std::optional<PrimArray<Ent::Gen::Int>>{}: std::optional<PrimArray<Ent::Gen::Int>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::Int> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::sets32Vec() const
        {
            return PrimArray<Ent::Gen::Int>(node->setUnionType("vector<s32>"));
        }
        inline std::optional<PrimArray<Ent::Gen::Float>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::floatVec() const
        {
            return strcmp(node->getUnionType(), "vector<float>") != 0? std::optional<PrimArray<Ent::Gen::Float>>{}: std::optional<PrimArray<Ent::Gen::Float>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::Float> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setfloatVec() const
        {
            return PrimArray<Ent::Gen::Float>(node->setUnionType("vector<float>"));
        }
        inline std::optional<Array<Ent::Gen::Vector2>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Vector2Vec() const
        {
            return strcmp(node->getUnionType(), "vector<Vector2>") != 0? std::optional<Array<Ent::Gen::Vector2>>{}: std::optional<Array<Ent::Gen::Vector2>>(node->getUnionData());
        }
        inline Array<Ent::Gen::Vector2> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setVector2Vec() const
        {
            return Array<Ent::Gen::Vector2>(node->setUnionType("vector<Vector2>"));
        }
        inline std::optional<Array<Ent::Gen::Vector3>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Vector3Vec() const
        {
            return strcmp(node->getUnionType(), "vector<Vector3>") != 0? std::optional<Array<Ent::Gen::Vector3>>{}: std::optional<Array<Ent::Gen::Vector3>>(node->getUnionData());
        }
        inline Array<Ent::Gen::Vector3> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setVector3Vec() const
        {
            return Array<Ent::Gen::Vector3>(node->setUnionType("vector<Vector3>"));
        }
        inline std::optional<Array<Ent::Gen::Position>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::PositionVec() const
        {
            return strcmp(node->getUnionType(), "vector<Position>") != 0? std::optional<Array<Ent::Gen::Position>>{}: std::optional<Array<Ent::Gen::Position>>(node->getUnionData());
        }
        inline Array<Ent::Gen::Position> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setPositionVec() const
        {
            return Array<Ent::Gen::Position>(node->setUnionType("vector<Position>"));
        }
        // variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_
        inline char const* variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::String> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::string() const
        {
            return strcmp(node->getUnionType(), "string") != 0? std::optional<Ent::Gen::String>{}: std::optional<Ent::Gen::String>(node->getUnionData());
        }
        inline Ent::Gen::String variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setstring() const
        {
            return Ent::Gen::String(node->setUnionType("string"));
        }
        inline std::optional<Ent::Gen::Bool> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::bool_() const
        {
            return strcmp(node->getUnionType(), "bool") != 0? std::optional<Ent::Gen::Bool>{}: std::optional<Ent::Gen::Bool>(node->getUnionData());
        }
        inline Ent::Gen::Bool variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setbool_() const
        {
            return Ent::Gen::Bool(node->setUnionType("bool"));
        }
        inline std::optional<Ent::Gen::Int> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::s32() const
        {
            return strcmp(node->getUnionType(), "s32") != 0? std::optional<Ent::Gen::Int>{}: std::optional<Ent::Gen::Int>(node->getUnionData());
        }
        inline Ent::Gen::Int variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::sets32() const
        {
            return Ent::Gen::Int(node->setUnionType("s32"));
        }
        inline std::optional<Ent::Gen::Float> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::float_() const
        {
            return strcmp(node->getUnionType(), "float") != 0? std::optional<Ent::Gen::Float>{}: std::optional<Ent::Gen::Float>(node->getUnionData());
        }
        inline Ent::Gen::Float variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setfloat_() const
        {
            return Ent::Gen::Float(node->setUnionType("float"));
        }
        inline std::optional<Ent::Gen::EntityRef> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::EntityRef() const
        {
            return strcmp(node->getUnionType(), "EntityRef") != 0? std::optional<Ent::Gen::EntityRef>{}: std::optional<Ent::Gen::EntityRef>(node->getUnionData());
        }
        inline Ent::Gen::EntityRef variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setEntityRef() const
        {
            return Ent::Gen::EntityRef(node->setUnionType("EntityRef"));
        }
        inline std::optional<Ent::Gen::Vector2> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Vector2() const
        {
            return strcmp(node->getUnionType(), "Vector2") != 0? std::optional<Ent::Gen::Vector2>{}: std::optional<Ent::Gen::Vector2>(node->getUnionData());
        }
        inline Ent::Gen::Vector2 variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setVector2() const
        {
            return Ent::Gen::Vector2(node->setUnionType("Vector2"));
        }
        inline std::optional<Ent::Gen::Vector3> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Vector3() const
        {
            return strcmp(node->getUnionType(), "Vector3") != 0? std::optional<Ent::Gen::Vector3>{}: std::optional<Ent::Gen::Vector3>(node->getUnionData());
        }
        inline Ent::Gen::Vector3 variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setVector3() const
        {
            return Ent::Gen::Vector3(node->setUnionType("Vector3"));
        }
        inline std::optional<Ent::Gen::Position> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Position() const
        {
            return strcmp(node->getUnionType(), "Position") != 0? std::optional<Ent::Gen::Position>{}: std::optional<Ent::Gen::Position>(node->getUnionData());
        }
        inline Ent::Gen::Position variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setPosition() const
        {
            return Ent::Gen::Position(node->setUnionType("Position"));
        }
        inline std::optional<PrimArray<Ent::Gen::String>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::stringVec() const
        {
            return strcmp(node->getUnionType(), "vector<string>") != 0? std::optional<PrimArray<Ent::Gen::String>>{}: std::optional<PrimArray<Ent::Gen::String>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::String> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setstringVec() const
        {
            return PrimArray<Ent::Gen::String>(node->setUnionType("vector<string>"));
        }
        inline std::optional<PrimArray<Ent::Gen::Bool>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::boolVec() const
        {
            return strcmp(node->getUnionType(), "vector<bool>") != 0? std::optional<PrimArray<Ent::Gen::Bool>>{}: std::optional<PrimArray<Ent::Gen::Bool>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::Bool> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setboolVec() const
        {
            return PrimArray<Ent::Gen::Bool>(node->setUnionType("vector<bool>"));
        }
        inline std::optional<PrimArray<Ent::Gen::Int>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::s32Vec() const
        {
            return strcmp(node->getUnionType(), "vector<s32>") != 0? std::optional<PrimArray<Ent::Gen::Int>>{}: std::optional<PrimArray<Ent::Gen::Int>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::Int> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::sets32Vec() const
        {
            return PrimArray<Ent::Gen::Int>(node->setUnionType("vector<s32>"));
        }
        inline std::optional<PrimArray<Ent::Gen::Float>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::floatVec() const
        {
            return strcmp(node->getUnionType(), "vector<float>") != 0? std::optional<PrimArray<Ent::Gen::Float>>{}: std::optional<PrimArray<Ent::Gen::Float>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::Float> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setfloatVec() const
        {
            return PrimArray<Ent::Gen::Float>(node->setUnionType("vector<float>"));
        }
        inline std::optional<PrimArray<Ent::Gen::EntityRef>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::EntityRefVec() const
        {
            return strcmp(node->getUnionType(), "vector<EntityRef>") != 0? std::optional<PrimArray<Ent::Gen::EntityRef>>{}: std::optional<PrimArray<Ent::Gen::EntityRef>>(node->getUnionData());
        }
        inline PrimArray<Ent::Gen::EntityRef> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setEntityRefVec() const
        {
            return PrimArray<Ent::Gen::EntityRef>(node->setUnionType("vector<EntityRef>"));
        }
        inline std::optional<Array<Ent::Gen::Vector2>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Vector2Vec() const
        {
            return strcmp(node->getUnionType(), "vector<Vector2>") != 0? std::optional<Array<Ent::Gen::Vector2>>{}: std::optional<Array<Ent::Gen::Vector2>>(node->getUnionData());
        }
        inline Array<Ent::Gen::Vector2> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setVector2Vec() const
        {
            return Array<Ent::Gen::Vector2>(node->setUnionType("vector<Vector2>"));
        }
        inline std::optional<Array<Ent::Gen::Vector3>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Vector3Vec() const
        {
            return strcmp(node->getUnionType(), "vector<Vector3>") != 0? std::optional<Array<Ent::Gen::Vector3>>{}: std::optional<Array<Ent::Gen::Vector3>>(node->getUnionData());
        }
        inline Array<Ent::Gen::Vector3> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setVector3Vec() const
        {
            return Array<Ent::Gen::Vector3>(node->setUnionType("vector<Vector3>"));
        }
        inline std::optional<Array<Ent::Gen::Position>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::PositionVec() const
        {
            return strcmp(node->getUnionType(), "vector<Position>") != 0? std::optional<Array<Ent::Gen::Position>>{}: std::optional<Array<Ent::Gen::Position>>(node->getUnionData());
        }
        inline Array<Ent::Gen::Position> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setPositionVec() const
        {
            return Array<Ent::Gen::Position>(node->setUnionType("vector<Position>"));
        }
        // variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_
        inline char const* variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::Int> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::s32() const
        {
            return strcmp(node->getUnionType(), "s32") != 0? std::optional<Ent::Gen::Int>{}: std::optional<Ent::Gen::Int>(node->getUnionData());
        }
        inline Ent::Gen::Int variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::sets32() const
        {
            return Ent::Gen::Int(node->setUnionType("s32"));
        }
        inline std::optional<Ent::Gen::Float> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::float_() const
        {
            return strcmp(node->getUnionType(), "float") != 0? std::optional<Ent::Gen::Float>{}: std::optional<Ent::Gen::Float>(node->getUnionData());
        }
        inline Ent::Gen::Float variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setfloat_() const
        {
            return Ent::Gen::Float(node->setUnionType("float"));
        }
        inline std::optional<Ent::Gen::Bool> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::bool_() const
        {
            return strcmp(node->getUnionType(), "bool") != 0? std::optional<Ent::Gen::Bool>{}: std::optional<Ent::Gen::Bool>(node->getUnionData());
        }
        inline Ent::Gen::Bool variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setbool_() const
        {
            return Ent::Gen::Bool(node->setUnionType("bool"));
        }
        inline std::optional<Ent::Gen::String> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::string() const
        {
            return strcmp(node->getUnionType(), "string") != 0? std::optional<Ent::Gen::String>{}: std::optional<Ent::Gen::String>(node->getUnionData());
        }
        inline Ent::Gen::String variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setstring() const
        {
            return Ent::Gen::String(node->setUnionType("string"));
        }
        inline std::optional<Ent::Gen::Vector2> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::Vector2() const
        {
            return strcmp(node->getUnionType(), "Vector2") != 0? std::optional<Ent::Gen::Vector2>{}: std::optional<Ent::Gen::Vector2>(node->getUnionData());
        }
        inline Ent::Gen::Vector2 variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setVector2() const
        {
            return Ent::Gen::Vector2(node->setUnionType("Vector2"));
        }
        inline std::optional<Ent::Gen::Vector3> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::Vector3() const
        {
            return strcmp(node->getUnionType(), "Vector3") != 0? std::optional<Ent::Gen::Vector3>{}: std::optional<Ent::Gen::Vector3>(node->getUnionData());
        }
        inline Ent::Gen::Vector3 variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setVector3() const
        {
            return Ent::Gen::Vector3(node->setUnionType("Vector3"));
        }
        inline std::optional<Ent::Gen::Quat> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::Quat() const
        {
            return strcmp(node->getUnionType(), "Quat") != 0? std::optional<Ent::Gen::Quat>{}: std::optional<Ent::Gen::Quat>(node->getUnionData());
        }
        inline Ent::Gen::Quat variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setQuat() const
        {
            return Ent::Gen::Quat(node->setUnionType("Quat"));
        }
        inline std::optional<Ent::Gen::Position> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::Position() const
        {
            return strcmp(node->getUnionType(), "Position") != 0? std::optional<Ent::Gen::Position>{}: std::optional<Ent::Gen::Position>(node->getUnionData());
        }
        inline Ent::Gen::Position variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setPosition() const
        {
            return Ent::Gen::Position(node->setUnionType("Position"));
        }
        // variant_ZoneCylinderShape_ZoneMeshShape_
        inline char const* variant_ZoneCylinderShape_ZoneMeshShape_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::ZoneCylinderShape> variant_ZoneCylinderShape_ZoneMeshShape_::ZoneCylinderShape() const
        {
            return strcmp(node->getUnionType(), "ZoneCylinderShape") != 0? std::optional<Ent::Gen::ZoneCylinderShape>{}: std::optional<Ent::Gen::ZoneCylinderShape>(node->getUnionData());
        }
        inline Ent::Gen::ZoneCylinderShape variant_ZoneCylinderShape_ZoneMeshShape_::setZoneCylinderShape() const
        {
            return Ent::Gen::ZoneCylinderShape(node->setUnionType("ZoneCylinderShape"));
        }
        inline std::optional<Ent::Gen::ZoneMeshShape> variant_ZoneCylinderShape_ZoneMeshShape_::ZoneMeshShape() const
        {
            return strcmp(node->getUnionType(), "ZoneMeshShape") != 0? std::optional<Ent::Gen::ZoneMeshShape>{}: std::optional<Ent::Gen::ZoneMeshShape>(node->getUnionData());
        }
        inline Ent::Gen::ZoneMeshShape variant_ZoneCylinderShape_ZoneMeshShape_::setZoneMeshShape() const
        {
            return Ent::Gen::ZoneMeshShape(node->setUnionType("ZoneMeshShape"));
        }
        // variant_Pasta_Easing_Curve_string_
        inline char const* variant_Pasta_Easing_Curve_string_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::Pasta_Easing_Curve> variant_Pasta_Easing_Curve_string_::Pasta_Easing_Curve() const
        {
            return strcmp(node->getUnionType(), "Pasta::Easing::Curve") != 0? std::optional<Ent::Gen::Pasta_Easing_Curve>{}: std::optional<Ent::Gen::Pasta_Easing_Curve>(node->getUnionData());
        }
        inline Ent::Gen::Pasta_Easing_Curve variant_Pasta_Easing_Curve_string_::setPasta_Easing_Curve() const
        {
            return Ent::Gen::Pasta_Easing_Curve(node->setUnionType("Pasta::Easing::Curve"));
        }
        inline std::optional<Ent::Gen::String> variant_Pasta_Easing_Curve_string_::string() const
        {
            return strcmp(node->getUnionType(), "string") != 0? std::optional<Ent::Gen::String>{}: std::optional<Ent::Gen::String>(node->getUnionData());
        }
        inline Ent::Gen::String variant_Pasta_Easing_Curve_string_::setstring() const
        {
            return Ent::Gen::String(node->setUnionType("string"));
        }
        // variant_MeshShape_ShapeSphere_ShapeBox_
        inline char const* variant_MeshShape_ShapeSphere_ShapeBox_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::MeshShape> variant_MeshShape_ShapeSphere_ShapeBox_::MeshShape() const
        {
            return strcmp(node->getUnionType(), "MeshShape") != 0? std::optional<Ent::Gen::MeshShape>{}: std::optional<Ent::Gen::MeshShape>(node->getUnionData());
        }
        inline Ent::Gen::MeshShape variant_MeshShape_ShapeSphere_ShapeBox_::setMeshShape() const
        {
            return Ent::Gen::MeshShape(node->setUnionType("MeshShape"));
        }
        inline std::optional<Ent::Gen::ShapeSphere> variant_MeshShape_ShapeSphere_ShapeBox_::ShapeSphere() const
        {
            return strcmp(node->getUnionType(), "ShapeSphere") != 0? std::optional<Ent::Gen::ShapeSphere>{}: std::optional<Ent::Gen::ShapeSphere>(node->getUnionData());
        }
        inline Ent::Gen::ShapeSphere variant_MeshShape_ShapeSphere_ShapeBox_::setShapeSphere() const
        {
            return Ent::Gen::ShapeSphere(node->setUnionType("ShapeSphere"));
        }
        inline std::optional<Ent::Gen::ShapeBox> variant_MeshShape_ShapeSphere_ShapeBox_::ShapeBox() const
        {
            return strcmp(node->getUnionType(), "ShapeBox") != 0? std::optional<Ent::Gen::ShapeBox>{}: std::optional<Ent::Gen::ShapeBox>(node->getUnionData());
        }
        inline Ent::Gen::ShapeBox variant_MeshShape_ShapeSphere_ShapeBox_::setShapeBox() const
        {
            return Ent::Gen::ShapeBox(node->setUnionType("ShapeBox"));
        }
        // variant_EntityRef_NavMeshArea_
        inline char const* variant_EntityRef_NavMeshArea_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::EntityRef> variant_EntityRef_NavMeshArea_::EntityRef() const
        {
            return strcmp(node->getUnionType(), "EntityRef") != 0? std::optional<Ent::Gen::EntityRef>{}: std::optional<Ent::Gen::EntityRef>(node->getUnionData());
        }
        inline Ent::Gen::EntityRef variant_EntityRef_NavMeshArea_::setEntityRef() const
        {
            return Ent::Gen::EntityRef(node->setUnionType("EntityRef"));
        }
        inline std::optional<Ent::Gen::NavMeshArea> variant_EntityRef_NavMeshArea_::NavMeshArea() const
        {
            return strcmp(node->getUnionType(), "NavMeshArea") != 0? std::optional<Ent::Gen::NavMeshArea>{}: std::optional<Ent::Gen::NavMeshArea>(node->getUnionData());
        }
        inline Ent::Gen::NavMeshArea variant_EntityRef_NavMeshArea_::setNavMeshArea() const
        {
            return Ent::Gen::NavMeshArea(node->setUnionType("NavMeshArea"));
        }
        // usePerception
        inline Ent::Gen::String usePerception::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool usePerception::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool usePerception::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // tryGrasp
        inline Ent::Gen::String tryGrasp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool tryGrasp::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool tryGrasp::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // sPhysicsShapeSphere
        inline Ent::Gen::String sPhysicsShapeSphere::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float sPhysicsShapeSphere::radius() const
        {
            return Ent::Gen::Float(node->at("radius"));
        }
        // sPhysicsShapeMesh
        inline Ent::Gen::String sPhysicsShapeMesh::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String sPhysicsShapeMesh::path() const
        {
            return Ent::Gen::String(node->at("path"));
        }
        // sPhysicsShapeCylinder
        inline Ent::Gen::String sPhysicsShapeCylinder::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float sPhysicsShapeCylinder::length() const
        {
            return Ent::Gen::Float(node->at("length"));
        }
        inline Ent::Gen::Float sPhysicsShapeCylinder::radius() const
        {
            return Ent::Gen::Float(node->at("radius"));
        }
        // sPhysicsShapeCapsule
        inline Ent::Gen::String sPhysicsShapeCapsule::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float sPhysicsShapeCapsule::length() const
        {
            return Ent::Gen::Float(node->at("length"));
        }
        inline Ent::Gen::Float sPhysicsShapeCapsule::radius() const
        {
            return Ent::Gen::Float(node->at("radius"));
        }
        // sJointFixedDesc
        // sJointBallDesc
        // resetCreatureRequest
        inline Ent::Gen::String resetCreatureRequest::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool resetCreatureRequest::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool resetCreatureRequest::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // jumpPower
        inline Ent::Gen::String jumpPower::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool jumpPower::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float jumpPower::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // isPerceivableForEnemies
        inline Ent::Gen::String isPerceivableForEnemies::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool isPerceivableForEnemies::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool isPerceivableForEnemies::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // isPerceivable
        inline Ent::Gen::String isPerceivable::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool isPerceivable::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool isPerceivable::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // eventStringHash
        inline Ent::Gen::String eventStringHash::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool eventStringHash::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::String eventStringHash::val() const
        {
            return Ent::Gen::String(node->at("val"));
        }
        // enableSynchronization
        inline Ent::Gen::String enableSynchronization::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool enableSynchronization::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool enableSynchronization::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // computePitchAngle
        inline Ent::Gen::String computePitchAngle::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool computePitchAngle::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool computePitchAngle::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // allowedTypesItem
        inline Ent::Gen::String allowedTypesItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool allowedTypesItem::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool allowedTypesItem::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // Walkability
        inline Ent::Gen::String Walkability::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool Walkability::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool Walkability::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // VegetationData
        inline Ent::Gen::String VegetationData::GRCPath() const
        {
            return Ent::Gen::String(node->at("GRCPath"));
        }
        inline Ent::Gen::String VegetationData::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::PrimitiveSet<char const*> VegetationData::Tags() const
        {
            return Ent::Gen::PrimitiveSet<char const*>(node->at("Tags"));
        }
        inline Ent::Gen::String VegetationData::VisibilityDistanceCategory() const
        {
            return Ent::Gen::String(node->at("VisibilityDistanceCategory"));
        }
        inline Ent::Gen::String VegetationData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VegetationDataList
        inline Array<Ent::Gen::VegetationData> VegetationDataList::Data() const
        {
            return Array<Ent::Gen::VegetationData>(node->at("Data"));
        }
        inline Ent::Gen::String VegetationDataList::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // sPhysicsShapeBox
        inline Ent::Gen::String sPhysicsShapeBox::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 sPhysicsShapeBox::size() const
        {
            return Ent::Gen::Vector3(node->at("size"));
        }
        // sEnvStamp
        inline Ent::Gen::Bool sEnvStamp::AffectCoverage() const
        {
            return Ent::Gen::Bool(node->at("AffectCoverage"));
        }
        inline Ent::Gen::Bool sEnvStamp::AffectFogColor() const
        {
            return Ent::Gen::Bool(node->at("AffectFogColor"));
        }
        inline Ent::Gen::Bool sEnvStamp::AffectFogDensity() const
        {
            return Ent::Gen::Bool(node->at("AffectFogDensity"));
        }
        inline Ent::Gen::Bool sEnvStamp::AffectFogFalloff() const
        {
            return Ent::Gen::Bool(node->at("AffectFogFalloff"));
        }
        inline Ent::Gen::Bool sEnvStamp::AffectFogHeight() const
        {
            return Ent::Gen::Bool(node->at("AffectFogHeight"));
        }
        inline Ent::Gen::Bool sEnvStamp::AffectPull() const
        {
            return Ent::Gen::Bool(node->at("AffectPull"));
        }
        inline Ent::Gen::Bool sEnvStamp::AffectType() const
        {
            return Ent::Gen::Bool(node->at("AffectType"));
        }
        inline Ent::Gen::Bool sEnvStamp::AffectWetness() const
        {
            return Ent::Gen::Bool(node->at("AffectWetness"));
        }
        inline Ent::Gen::Int sEnvStamp::AtlasID() const
        {
            return Ent::Gen::Int(node->at("AtlasID"));
        }
        inline Ent::Gen::Vector3 sEnvStamp::FogColor() const
        {
            return Ent::Gen::Vector3(node->at("FogColor"));
        }
        inline Ent::Gen::Bool sEnvStamp::IsCloud() const
        {
            return Ent::Gen::Bool(node->at("IsCloud"));
        }
        inline Ent::Gen::Vector3 sEnvStamp::PositionOffset() const
        {
            return Ent::Gen::Vector3(node->at("PositionOffset"));
        }
        inline Ent::Gen::Float sEnvStamp::Rotation() const
        {
            return Ent::Gen::Float(node->at("Rotation"));
        }
        inline Ent::Gen::Float sEnvStamp::Size() const
        {
            return Ent::Gen::Float(node->at("Size"));
        }
        inline Ent::Gen::Float sEnvStamp::Strength() const
        {
            return Ent::Gen::Float(node->at("Strength"));
        }
        inline Ent::Gen::String sEnvStamp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // retiming
        inline Ent::Gen::String retiming::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool retiming::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Vector3 retiming::val() const
        {
            return Ent::Gen::Vector3(node->at("val"));
        }
        // WaveRendererProperties
        inline Ent::Gen::Int WaveRendererProperties::BonesGridHeight() const
        {
            return Ent::Gen::Int(node->at("BonesGridHeight"));
        }
        inline Ent::Gen::Int WaveRendererProperties::BonesGridWidth() const
        {
            return Ent::Gen::Int(node->at("BonesGridWidth"));
        }
        inline Ent::Gen::Int WaveRendererProperties::BonesIgnoreOffset() const
        {
            return Ent::Gen::Int(node->at("BonesIgnoreOffset"));
        }
        inline Ent::Gen::String WaveRendererProperties::MaterialPath() const
        {
            return Ent::Gen::String(node->at("MaterialPath"));
        }
        inline Ent::Gen::String WaveRendererProperties::MeshPath() const
        {
            return Ent::Gen::String(node->at("MeshPath"));
        }
        inline Ent::Gen::Int WaveRendererProperties::NbMeshInstances() const
        {
            return Ent::Gen::Int(node->at("NbMeshInstances"));
        }
        inline Ent::Gen::Int WaveRendererProperties::NbQuads() const
        {
            return Ent::Gen::Int(node->at("NbQuads"));
        }
        inline Ent::Gen::Vector3 WaveRendererProperties::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::Vector3 WaveRendererProperties::Scale() const
        {
            return Ent::Gen::Vector3(node->at("Scale"));
        }
        inline Ent::Gen::String WaveRendererProperties::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // WaveProperties
        inline Ent::Gen::Float WaveProperties::Duration() const
        {
            return Ent::Gen::Float(node->at("Duration"));
        }
        inline Ent::Gen::Float WaveProperties::IntervalBetweenWaveFronts() const
        {
            return Ent::Gen::Float(node->at("IntervalBetweenWaveFronts"));
        }
        inline Ent::Gen::Bool WaveProperties::Looping() const
        {
            return Ent::Gen::Bool(node->at("Looping"));
        }
        inline Ent::Gen::Float WaveProperties::Luminosity() const
        {
            return Ent::Gen::Float(node->at("Luminosity"));
        }
        inline Ent::Gen::String WaveProperties::LuminosityCurvePath() const
        {
            return Ent::Gen::String(node->at("LuminosityCurvePath"));
        }
        inline Ent::Gen::Float WaveProperties::LuminosityVariability() const
        {
            return Ent::Gen::Float(node->at("LuminosityVariability"));
        }
        inline Array<Ent::Gen::WaveRendererProperties> WaveProperties::RenderingProperties() const
        {
            return Array<Ent::Gen::WaveRendererProperties>(node->at("RenderingProperties"));
        }
        inline Ent::Gen::WaveRenderingType WaveProperties::RenderingType() const
        {
            return Ent::Gen::WaveRenderingType(node->at("RenderingType"));
        }
        inline Ent::Gen::Int WaveProperties::Width() const
        {
            return Ent::Gen::Int(node->at("Width"));
        }
        inline Ent::Gen::String WaveProperties::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // sJointUniversalDesc
        inline Ent::Gen::String sJointUniversalDesc::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector2 sJointUniversalDesc::angleSwing1() const
        {
            return Ent::Gen::Vector2(node->at("angleSwing1"));
        }
        inline Ent::Gen::Vector2 sJointUniversalDesc::angleSwing2() const
        {
            return Ent::Gen::Vector2(node->at("angleSwing2"));
        }
        // sJointSwingTwistDesc
        inline Ent::Gen::String sJointSwingTwistDesc::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector2 sJointSwingTwistDesc::swingAngle() const
        {
            return Ent::Gen::Vector2(node->at("swingAngle"));
        }
        inline Ent::Gen::Vector2 sJointSwingTwistDesc::twistAngle() const
        {
            return Ent::Gen::Vector2(node->at("twistAngle"));
        }
        // sJointSliderDesc
        inline Ent::Gen::String sJointSliderDesc::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 sJointSliderDesc::direction() const
        {
            return Ent::Gen::Vector3(node->at("direction"));
        }
        inline Ent::Gen::Vector2 sJointSliderDesc::distance() const
        {
            return Ent::Gen::Vector2(node->at("distance"));
        }
        // sJointHingeDesc
        inline Ent::Gen::String sJointHingeDesc::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector2 sJointHingeDesc::angle() const
        {
            return Ent::Gen::Vector2(node->at("angle"));
        }
        inline Ent::Gen::Vector3 sJointHingeDesc::axis() const
        {
            return Ent::Gen::Vector3(node->at("axis"));
        }
        // ConditionalRigidityAttribute_Range
        inline Ent::Gen::Vector2 ConditionalRigidityAttribute_Range::Range() const
        {
            return Ent::Gen::Vector2(node->at("Range"));
        }
        inline Ent::Gen::String ConditionalRigidityAttribute_Range::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VariantAllowed
        inline Ent::Gen::String VariantAllowed::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool VariantAllowed::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool VariantAllowed::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // UnionObjectArrayItem
        inline Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ UnionObjectArrayItem::Union() const
        {
            return Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(node->at("Union"));
        }
        inline Ent::Gen::String UnionObjectArrayItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TypedValue
        inline Ent::Gen::String TypedValue::Alias() const
        {
            return Ent::Gen::String(node->at("Alias"));
        }
        inline Ent::Gen::String TypedValue::Reference() const
        {
            return Ent::Gen::String(node->at("Reference"));
        }
        inline Ent::Gen::variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_ TypedValue::Value() const
        {
            return Ent::Gen::variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_(node->at("Value"));
        }
        inline Ent::Gen::String TypedValue::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TransitionNeighborData
        inline PrimArray<Ent::Gen::Int> TransitionNeighborData::Backward() const
        {
            return PrimArray<Ent::Gen::Int>(node->at("Backward"));
        }
        inline PrimArray<Ent::Gen::Int> TransitionNeighborData::Forward() const
        {
            return PrimArray<Ent::Gen::Int>(node->at("Forward"));
        }
        inline Ent::Gen::Float TransitionNeighborData::TangentSize() const
        {
            return Ent::Gen::Float(node->at("TangentSize"));
        }
        inline Ent::Gen::String TransitionNeighborData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TrailRendererProperties
        inline Ent::Gen::TrailRenderingAttribute TrailRendererProperties::Attribute() const
        {
            return Ent::Gen::TrailRenderingAttribute(node->at("Attribute"));
        }
        inline Ent::Gen::String TrailRendererProperties::MaterialPath() const
        {
            return Ent::Gen::String(node->at("MaterialPath"));
        }
        inline Ent::Gen::String TrailRendererProperties::MeshPath() const
        {
            return Ent::Gen::String(node->at("MeshPath"));
        }
        inline Ent::Gen::Int TrailRendererProperties::NbMeshInstances() const
        {
            return Ent::Gen::Int(node->at("NbMeshInstances"));
        }
        inline Ent::Gen::Int TrailRendererProperties::NbQuads() const
        {
            return Ent::Gen::Int(node->at("NbQuads"));
        }
        inline Ent::Gen::Int TrailRendererProperties::NbTrailPointsBetweenFrontQuads() const
        {
            return Ent::Gen::Int(node->at("NbTrailPointsBetweenFrontQuads"));
        }
        inline Ent::Gen::Int TrailRendererProperties::NbVertices() const
        {
            return Ent::Gen::Int(node->at("NbVertices"));
        }
        inline Ent::Gen::Vector3 TrailRendererProperties::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::Vector2 TrailRendererProperties::RandomAxialRotationAmplitude() const
        {
            return Ent::Gen::Vector2(node->at("RandomAxialRotationAmplitude"));
        }
        inline Ent::Gen::Float TrailRendererProperties::RandomUVOffset() const
        {
            return Ent::Gen::Float(node->at("RandomUVOffset"));
        }
        inline Ent::Gen::TrailRenderingSides TrailRendererProperties::Sides() const
        {
            return Ent::Gen::TrailRenderingSides(node->at("Sides"));
        }
        inline Ent::Gen::String TrailRendererProperties::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TrackedEntitiesItem
        // TestPropertyDefaultValues
        inline Ent::Gen::Int TestPropertyDefaultValues::A() const
        {
            return Ent::Gen::Int(node->at("A"));
        }
        inline Ent::Gen::Int TestPropertyDefaultValues::B() const
        {
            return Ent::Gen::Int(node->at("B"));
        }
        inline Ent::Gen::String TestPropertyDefaultValues::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TestPropertyDefaultValues2
        inline Ent::Gen::String TestPropertyDefaultValues2::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::TestPropertyDefaultValues TestPropertyDefaultValues2::propertyWithDefault2() const
        {
            return Ent::Gen::TestPropertyDefaultValues(node->at("propertyWithDefault2"));
        }
        inline Ent::Gen::TestPropertyDefaultValues TestPropertyDefaultValues2::propertyWithDefault3() const
        {
            return Ent::Gen::TestPropertyDefaultValues(node->at("propertyWithDefault3"));
        }
        // Terrain_TerrainMeta
        inline Ent::Gen::String Terrain_TerrainMeta::DataPath() const
        {
            return Ent::Gen::String(node->at("DataPath"));
        }
        inline Ent::Gen::Float Terrain_TerrainMeta::HeightScaleMeters() const
        {
            return Ent::Gen::Float(node->at("HeightScaleMeters"));
        }
        inline Ent::Gen::String Terrain_TerrainMeta::Material() const
        {
            return Ent::Gen::String(node->at("Material"));
        }
        inline Ent::Gen::Float Terrain_TerrainMeta::RegionWidthMeters() const
        {
            return Ent::Gen::Float(node->at("RegionWidthMeters"));
        }
        inline Ent::Gen::Bool Terrain_TerrainMeta::RimTerrain() const
        {
            return Ent::Gen::Bool(node->at("RimTerrain"));
        }
        inline Ent::Gen::Float Terrain_TerrainMeta::SkirtScale() const
        {
            return Ent::Gen::Float(node->at("SkirtScale"));
        }
        inline Ent::Gen::Float Terrain_TerrainMeta::TexelsPerMeter() const
        {
            return Ent::Gen::Float(node->at("TexelsPerMeter"));
        }
        inline Ent::Gen::String Terrain_TerrainMeta::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TargetCollision
        inline Ent::Gen::String TargetCollision::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int TargetCollision::count() const
        {
            return Ent::Gen::Int(node->at("count"));
        }
        // TagsList
        inline Ent::Gen::Map<char const*, Ent::Gen::PrimitiveSet<char const*>> TagsList::Tags() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::PrimitiveSet<char const*>>(node->at("Tags"));
        }
        inline Ent::Gen::String TagsList::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TaggedSDF
        inline Ent::Gen::Float TaggedSDF::MaxTagDistance() const
        {
            return Ent::Gen::Float(node->at("MaxTagDistance"));
        }
        inline Ent::Gen::Vector3 TaggedSDF::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::variant_MeshShape_ShapeSphere_ShapeBox_ TaggedSDF::Shape() const
        {
            return Ent::Gen::variant_MeshShape_ShapeSphere_ShapeBox_(node->at("Shape"));
        }
        inline Ent::Gen::String TaggedSDF::Tag() const
        {
            return Ent::Gen::String(node->at("Tag"));
        }
        inline Ent::Gen::String TaggedSDF::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TagInfo
        inline Ent::Gen::Int TagInfo::AudioWeight() const
        {
            return Ent::Gen::Int(node->at("AudioWeight"));
        }
        inline Ent::Gen::String TagInfo::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TagDB
        inline Ent::Gen::Map<char const*, Ent::Gen::TagInfo> TagDB::TagInfoTable() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::TagInfo>(node->at("TagInfoTable"));
        }
        inline Ent::Gen::String TagDB::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // UIMusic
        inline Ent::Gen::String UIMusic::MusicType() const
        {
            return Ent::Gen::String(node->at("MusicType"));
        }
        inline Ent::Gen::String UIMusic::SkillTree() const
        {
            return Ent::Gen::String(node->at("SkillTree"));
        }
        inline Ent::Gen::SyncTempoMode UIMusic::SynchronizationMode() const
        {
            return Ent::Gen::SyncTempoMode(node->at("SynchronizationMode"));
        }
        inline Ent::Gen::String UIMusic::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // StunData
        inline Ent::Gen::String StunData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int StunData::damageHitBig() const
        {
            return Ent::Gen::Int(node->at("damageHitBig"));
        }
        inline Ent::Gen::Int StunData::damageHitBite() const
        {
            return Ent::Gen::Int(node->at("damageHitBite"));
        }
        inline Ent::Gen::Int StunData::damageHitEject() const
        {
            return Ent::Gen::Int(node->at("damageHitEject"));
        }
        inline Ent::Gen::Int StunData::damageHitEjectFar() const
        {
            return Ent::Gen::Int(node->at("damageHitEjectFar"));
        }
        inline Ent::Gen::Int StunData::damageHitLight() const
        {
            return Ent::Gen::Int(node->at("damageHitLight"));
        }
        inline Ent::Gen::Int StunData::damageHitMedium() const
        {
            return Ent::Gen::Int(node->at("damageHitMedium"));
        }
        inline Ent::Gen::Int StunData::malus() const
        {
            return Ent::Gen::Int(node->at("malus"));
        }
        inline Ent::Gen::Float StunData::orientHitBig() const
        {
            return Ent::Gen::Float(node->at("orientHitBig"));
        }
        inline Ent::Gen::Float StunData::orientHitEject() const
        {
            return Ent::Gen::Float(node->at("orientHitEject"));
        }
        inline Ent::Gen::Float StunData::orientHitEjectFar() const
        {
            return Ent::Gen::Float(node->at("orientHitEjectFar"));
        }
        inline Ent::Gen::Float StunData::orientHitLight() const
        {
            return Ent::Gen::Float(node->at("orientHitLight"));
        }
        inline Ent::Gen::Float StunData::orientHitMedium() const
        {
            return Ent::Gen::Float(node->at("orientHitMedium"));
        }
        inline Ent::Gen::Float StunData::recoverTime() const
        {
            return Ent::Gen::Float(node->at("recoverTime"));
        }
        inline Ent::Gen::Int StunData::resistance() const
        {
            return Ent::Gen::Int(node->at("resistance"));
        }
        inline Ent::Gen::Float StunData::stunTime() const
        {
            return Ent::Gen::Float(node->at("stunTime"));
        }
        // StickToGround
        inline Ent::Gen::String StickToGround::BoneNameEnd() const
        {
            return Ent::Gen::String(node->at("BoneNameEnd"));
        }
        inline Ent::Gen::String StickToGround::BoneNameStart() const
        {
            return Ent::Gen::String(node->at("BoneNameStart"));
        }
        inline Ent::Gen::String StickToGround::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SpeedScaleXY
        inline Ent::Gen::String SpeedScaleXY::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool SpeedScaleXY::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float SpeedScaleXY::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // SpeedModeMax
        inline Ent::Gen::String SpeedModeMax::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool SpeedModeMax::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::SpeedMode SpeedModeMax::val() const
        {
            return Ent::Gen::SpeedMode(node->at("val"));
        }
        // SpeedFastMinDuration
        inline Ent::Gen::String SpeedFastMinDuration::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool SpeedFastMinDuration::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float SpeedFastMinDuration::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // SpawningParameter
        inline Ent::Gen::String SpawningParameter::EntityName() const
        {
            return Ent::Gen::String(node->at("EntityName"));
        }
        inline Ent::Gen::Float SpawningParameter::MinimumDepth() const
        {
            return Ent::Gen::Float(node->at("MinimumDepth"));
        }
        inline Ent::Gen::Float SpawningParameter::PeriodRandomness() const
        {
            return Ent::Gen::Float(node->at("PeriodRandomness"));
        }
        inline Ent::Gen::Float SpawningParameter::SpawningPeriod() const
        {
            return Ent::Gen::Float(node->at("SpawningPeriod"));
        }
        inline Ent::Gen::String SpawningParameter::State() const
        {
            return Ent::Gen::String(node->at("State"));
        }
        inline Ent::Gen::String SpawningParameter::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoundOpportunityRangeDescription
        inline Ent::Gen::Float SoundOpportunityRangeDescription::ChunkSize() const
        {
            return Ent::Gen::Float(node->at("ChunkSize"));
        }
        inline Ent::Gen::Float SoundOpportunityRangeDescription::EDITOR_SelectionProbabilityFactor() const
        {
            return Ent::Gen::Float(node->at("EDITOR_SelectionProbabilityFactor"));
        }
        inline Ent::Gen::Float SoundOpportunityRangeDescription::MaxDistance() const
        {
            return Ent::Gen::Float(node->at("MaxDistance"));
        }
        inline Ent::Gen::String SoundOpportunityRangeDescription::PCloudPath() const
        {
            return Ent::Gen::String(node->at("PCloudPath"));
        }
        inline Ent::Gen::String SoundOpportunityRangeDescription::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoundOcclusionData
        inline Ent::Gen::Float SoundOcclusionData::OcclusionMaxRatioAdjustRate() const
        {
            return Ent::Gen::Float(node->at("OcclusionMaxRatioAdjustRate"));
        }
        inline Ent::Gen::Float SoundOcclusionData::OcclusionMaxThickness() const
        {
            return Ent::Gen::Float(node->at("OcclusionMaxThickness"));
        }
        inline Ent::Gen::Float SoundOcclusionData::OcclusionRatioAdjustRateFactor() const
        {
            return Ent::Gen::Float(node->at("OcclusionRatioAdjustRateFactor"));
        }
        inline Ent::Gen::Float SoundOcclusionData::OcclusionSphereCastRadius() const
        {
            return Ent::Gen::Float(node->at("OcclusionSphereCastRadius"));
        }
        inline Ent::Gen::Float SoundOcclusionData::OcclusionSphereCastVerticalOffset() const
        {
            return Ent::Gen::Float(node->at("OcclusionSphereCastVerticalOffset"));
        }
        inline Ent::Gen::String SoundOcclusionData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoundManager_BiomeSoundBank
        // SoundEventMapping
        inline Ent::Gen::Map<char const*, Ent::Gen::String> SoundEventMapping::Explicit() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::String>(node->at("Explicit"));
        }
        inline Ent::Gen::PrimitiveSet<char const*> SoundEventMapping::Ignored() const
        {
            return Ent::Gen::PrimitiveSet<char const*>(node->at("Ignored"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::String> SoundEventMapping::Prefixed() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::String>(node->at("Prefixed"));
        }
        inline Ent::Gen::String SoundEventMapping::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // soundEmissionStrength
        inline Ent::Gen::String soundEmissionStrength::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool soundEmissionStrength::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::SoundEmissionStrength soundEmissionStrength::val() const
        {
            return Ent::Gen::SoundEmissionStrength(node->at("val"));
        }
        // SoftCollisionGD_VegetationDetectionParameters
        inline Ent::Gen::String SoftCollisionGD_VegetationDetectionParameters::BoneName() const
        {
            return Ent::Gen::String(node->at("BoneName"));
        }
        inline Ent::Gen::Vector3 SoftCollisionGD_VegetationDetectionParameters::BoneOffset() const
        {
            return Ent::Gen::Vector3(node->at("BoneOffset"));
        }
        inline Ent::Gen::Float SoftCollisionGD_VegetationDetectionParameters::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline PrimArray<Ent::Gen::String> SoftCollisionGD_VegetationDetectionParameters::VegetationTagList() const
        {
            return PrimArray<Ent::Gen::String>(node->at("VegetationTagList"));
        }
        inline Ent::Gen::String SoftCollisionGD_VegetationDetectionParameters::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SmoothScaleComponentInput_Parameters
        inline Ent::Gen::Float SmoothScaleComponentInput_Parameters::Scale() const
        {
            return Ent::Gen::Float(node->at("Scale"));
        }
        inline Ent::Gen::Float SmoothScaleComponentInput_Parameters::Time() const
        {
            return Ent::Gen::Float(node->at("Time"));
        }
        inline Ent::Gen::String SmoothScaleComponentInput_Parameters::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShowdownSpeciesAudioData
        inline Ent::Gen::String ShowdownSpeciesAudioData::AudioCategory() const
        {
            return Ent::Gen::String(node->at("AudioCategory"));
        }
        inline Ent::Gen::String ShowdownSpeciesAudioData::Species() const
        {
            return Ent::Gen::String(node->at("Species"));
        }
        inline Ent::Gen::String ShowdownSpeciesAudioData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShowdownLayerInfo
        inline Ent::Gen::Float ShowdownLayerInfo::CoolDown() const
        {
            return Ent::Gen::Float(node->at("CoolDown"));
        }
        inline Ent::Gen::String ShowdownLayerInfo::DistanceRTPC() const
        {
            return Ent::Gen::String(node->at("DistanceRTPC"));
        }
        inline Ent::Gen::Bool ShowdownLayerInfo::Loop() const
        {
            return Ent::Gen::Bool(node->at("Loop"));
        }
        inline Ent::Gen::String ShowdownLayerInfo::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String ShowdownLayerInfo::Priority() const
        {
            return Ent::Gen::String(node->at("Priority"));
        }
        inline Ent::Gen::String ShowdownLayerInfo::UninvolvedDistanceRTPC() const
        {
            return Ent::Gen::String(node->at("UninvolvedDistanceRTPC"));
        }
        inline Ent::Gen::String ShowdownLayerInfo::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShowdownLayerData
        inline Ent::Gen::ShowdownLayerInfo ShowdownLayerData::Attacked() const
        {
            return Ent::Gen::ShowdownLayerInfo(node->at("Attacked"));
        }
        inline Ent::Gen::ShowdownLayerInfo ShowdownLayerData::Danger() const
        {
            return Ent::Gen::ShowdownLayerInfo(node->at("Danger"));
        }
        inline Ent::Gen::ShowdownLayerInfo ShowdownLayerData::Detected() const
        {
            return Ent::Gen::ShowdownLayerInfo(node->at("Detected"));
        }
        inline Ent::Gen::ShowdownLayerInfo ShowdownLayerData::Suspected() const
        {
            return Ent::Gen::ShowdownLayerInfo(node->at("Suspected"));
        }
        inline Ent::Gen::String ShowdownLayerData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShowdownMusic
        inline Ent::Gen::Float ShowdownMusic::AfterEpicCoolDown() const
        {
            return Ent::Gen::Float(node->at("AfterEpicCoolDown"));
        }
        inline Ent::Gen::Float ShowdownMusic::CloseRange() const
        {
            return Ent::Gen::Float(node->at("CloseRange"));
        }
        inline Ent::Gen::Float ShowdownMusic::CoolDownBeforeStop() const
        {
            return Ent::Gen::Float(node->at("CoolDownBeforeStop"));
        }
        inline Ent::Gen::String ShowdownMusic::EventsPrefix() const
        {
            return Ent::Gen::String(node->at("EventsPrefix"));
        }
        inline Ent::Gen::Int ShowdownMusic::IntensityCountMax() const
        {
            return Ent::Gen::Int(node->at("IntensityCountMax"));
        }
        inline Ent::Gen::Float ShowdownMusic::IntensityCountRatio() const
        {
            return Ent::Gen::Float(node->at("IntensityCountRatio"));
        }
        inline Ent::Gen::Float ShowdownMusic::IntensityDistanceRatio() const
        {
            return Ent::Gen::Float(node->at("IntensityDistanceRatio"));
        }
        inline Ent::Gen::String ShowdownMusic::IntensityRTPC() const
        {
            return Ent::Gen::String(node->at("IntensityRTPC"));
        }
        inline Ent::Gen::ShowdownLayerData ShowdownMusic::Layers() const
        {
            return Ent::Gen::ShowdownLayerData(node->at("Layers"));
        }
        inline Ent::Gen::String ShowdownMusic::MostSignificantCreatureDistanceRTPC() const
        {
            return Ent::Gen::String(node->at("MostSignificantCreatureDistanceRTPC"));
        }
        inline Ent::Gen::Float ShowdownMusic::MusicSourceAnchorRadius() const
        {
            return Ent::Gen::Float(node->at("MusicSourceAnchorRadius"));
        }
        inline Ent::Gen::Float ShowdownMusic::MusicSourceDamping() const
        {
            return Ent::Gen::Float(node->at("MusicSourceDamping"));
        }
        inline Ent::Gen::Float ShowdownMusic::PlayerInvolvedScoreFactor() const
        {
            return Ent::Gen::Float(node->at("PlayerInvolvedScoreFactor"));
        }
        inline Ent::Gen::Float ShowdownMusic::PlayerUninvolvedDistanceFactor() const
        {
            return Ent::Gen::Float(node->at("PlayerUninvolvedDistanceFactor"));
        }
        inline Ent::Gen::String ShowdownMusic::RTPC_2D3D() const
        {
            return Ent::Gen::String(node->at("RTPC_2D3D"));
        }
        inline Ent::Gen::String ShowdownMusic::RTPC_PlayersInFight() const
        {
            return Ent::Gen::String(node->at("RTPC_PlayersInFight"));
        }
        inline Ent::Gen::String ShowdownMusic::ShowdownBlueSideState() const
        {
            return Ent::Gen::String(node->at("ShowdownBlueSideState"));
        }
        inline Ent::Gen::String ShowdownMusic::ShowdownMusBank() const
        {
            return Ent::Gen::String(node->at("ShowdownMusBank"));
        }
        inline Ent::Gen::String ShowdownMusic::ShowdownMusState() const
        {
            return Ent::Gen::String(node->at("ShowdownMusState"));
        }
        inline Ent::Gen::String ShowdownMusic::ShowdownNeutralSideState() const
        {
            return Ent::Gen::String(node->at("ShowdownNeutralSideState"));
        }
        inline Ent::Gen::String ShowdownMusic::ShowdownRedSideState() const
        {
            return Ent::Gen::String(node->at("ShowdownRedSideState"));
        }
        inline Ent::Gen::String ShowdownMusic::ShowdownSideState() const
        {
            return Ent::Gen::String(node->at("ShowdownSideState"));
        }
        inline Ent::Gen::String ShowdownMusic::ShowdownTypeState() const
        {
            return Ent::Gen::String(node->at("ShowdownTypeState"));
        }
        inline Ent::Gen::Float ShowdownMusic::SmoothDistanceRTPCs() const
        {
            return Ent::Gen::Float(node->at("SmoothDistanceRTPCs"));
        }
        inline Ent::Gen::Float ShowdownMusic::SmoothTime() const
        {
            return Ent::Gen::Float(node->at("SmoothTime"));
        }
        inline Array<Ent::Gen::ShowdownSpeciesAudioData> ShowdownMusic::SpeciesToAudioCategory() const
        {
            return Array<Ent::Gen::ShowdownSpeciesAudioData>(node->at("SpeciesToAudioCategory"));
        }
        inline Ent::Gen::SyncTempoMode ShowdownMusic::SynchronizationMode() const
        {
            return Ent::Gen::SyncTempoMode(node->at("SynchronizationMode"));
        }
        inline Ent::Gen::String ShowdownMusic::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShootSequenceData
        inline Ent::Gen::Float ShootSequenceData::Param() const
        {
            return Ent::Gen::Float(node->at("Param"));
        }
        inline Ent::Gen::String ShootSequenceData::Type_() const
        {
            return Ent::Gen::String(node->at("Type"));
        }
        inline Ent::Gen::String ShootSequenceData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShootData
        inline Ent::Gen::String ShootData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String ShootData::ammoName() const
        {
            return Ent::Gen::String(node->at("ammoName"));
        }
        inline Ent::Gen::Float ShootData::anticipationImprecision() const
        {
            return Ent::Gen::Float(node->at("anticipationImprecision"));
        }
        inline Ent::Gen::Bool ShootData::canShoot() const
        {
            return Ent::Gen::Bool(node->at("canShoot"));
        }
        inline Ent::Gen::Int ShootData::chargeTierCount() const
        {
            return Ent::Gen::Int(node->at("chargeTierCount"));
        }
        inline Ent::Gen::Float ShootData::gravity() const
        {
            return Ent::Gen::Float(node->at("gravity"));
        }
        inline Ent::Gen::Float ShootData::lifeCost() const
        {
            return Ent::Gen::Float(node->at("lifeCost"));
        }
        inline Ent::Gen::Float ShootData::lifeCostCharged() const
        {
            return Ent::Gen::Float(node->at("lifeCostCharged"));
        }
        inline Ent::Gen::Float ShootData::maxChargeDuration() const
        {
            return Ent::Gen::Float(node->at("maxChargeDuration"));
        }
        inline Ent::Gen::Float ShootData::maxShootDistance() const
        {
            return Ent::Gen::Float(node->at("maxShootDistance"));
        }
        inline Ent::Gen::Float ShootData::minDelayBetweenShots() const
        {
            return Ent::Gen::Float(node->at("minDelayBetweenShots"));
        }
        inline Ent::Gen::Bool ShootData::randomAngleShoot() const
        {
            return Ent::Gen::Bool(node->at("randomAngleShoot"));
        }
        inline Ent::Gen::Float ShootData::shootMaxAngle() const
        {
            return Ent::Gen::Float(node->at("shootMaxAngle"));
        }
        inline Ent::Gen::Float ShootData::shootSpeed() const
        {
            return Ent::Gen::Float(node->at("shootSpeed"));
        }
        inline Ent::Gen::Float ShootData::zoneImprecision() const
        {
            return Ent::Gen::Float(node->at("zoneImprecision"));
        }
        // SetOfObjectItem
        inline Ent::Gen::String SetOfObjectItem::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String SetOfObjectItem::Value() const
        {
            return Ent::Gen::String(node->at("Value"));
        }
        inline Ent::Gen::String SetOfObjectItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SeedPatchData
        inline Ent::Gen::Float SeedPatchData::NoiseBlur() const
        {
            return Ent::Gen::Float(node->at("NoiseBlur"));
        }
        inline Ent::Gen::Float SeedPatchData::NoiseContrast() const
        {
            return Ent::Gen::Float(node->at("NoiseContrast"));
        }
        inline Ent::Gen::Bool SeedPatchData::NoiseInvert() const
        {
            return Ent::Gen::Bool(node->at("NoiseInvert"));
        }
        inline Ent::Gen::String SeedPatchData::NoiseName() const
        {
            return Ent::Gen::String(node->at("NoiseName"));
        }
        inline Ent::Gen::Float SeedPatchData::NoiseOffsetX() const
        {
            return Ent::Gen::Float(node->at("NoiseOffsetX"));
        }
        inline Ent::Gen::Float SeedPatchData::NoiseOffsetY() const
        {
            return Ent::Gen::Float(node->at("NoiseOffsetY"));
        }
        inline Ent::Gen::Float SeedPatchData::NoiseOpacity() const
        {
            return Ent::Gen::Float(node->at("NoiseOpacity"));
        }
        inline Ent::Gen::Float SeedPatchData::NoisePosition() const
        {
            return Ent::Gen::Float(node->at("NoisePosition"));
        }
        inline Ent::Gen::Float SeedPatchData::NoiseSizeX() const
        {
            return Ent::Gen::Float(node->at("NoiseSizeX"));
        }
        inline Ent::Gen::Float SeedPatchData::NoiseSizeY() const
        {
            return Ent::Gen::Float(node->at("NoiseSizeY"));
        }
        inline Ent::Gen::String SeedPatchData::SeedName() const
        {
            return Ent::Gen::String(node->at("SeedName"));
        }
        inline Ent::Gen::String SeedPatchData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SeedPatchDatas
        inline Ent::Gen::Map<char const*, Ent::Gen::SeedPatchData> SeedPatchDatas::DataMap() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::SeedPatchData>(node->at("DataMap"));
        }
        inline Ent::Gen::String SeedPatchDatas::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SeedPatchDataList
        inline Array<Ent::Gen::SeedPatchData> SeedPatchDataList::Data() const
        {
            return Array<Ent::Gen::SeedPatchData>(node->at("Data"));
        }
        inline Ent::Gen::String SeedPatchDataList::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ScriptPathAndDataSet
        inline Ent::Gen::Bool ScriptPathAndDataSet::AutoLaunch() const
        {
            return Ent::Gen::Bool(node->at("AutoLaunch"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::TypedValue> ScriptPathAndDataSet::DataMap() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::TypedValue>(node->at("DataMap"));
        }
        inline Ent::Gen::String ScriptPathAndDataSet::NickName() const
        {
            return Ent::Gen::String(node->at("NickName"));
        }
        inline Ent::Gen::String ScriptPathAndDataSet::Path() const
        {
            return Ent::Gen::String(node->at("Path"));
        }
        inline Array<Ent::Gen::ScriptPathAndDataSet> ScriptPathAndDataSet::SpawnDataSets() const
        {
            return Array<Ent::Gen::ScriptPathAndDataSet>(node->at("SpawnDataSets"));
        }
        inline Ent::Gen::String ScriptPathAndDataSet::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ScaleFactor
        inline Ent::Gen::String ScaleFactor::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ScaleFactor::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float ScaleFactor::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // ScaleConverter
        inline Ent::Gen::String ScaleConverter::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::variant_Pasta_Easing_Curve_string_ ScaleConverter::easing() const
        {
            return Ent::Gen::variant_Pasta_Easing_Curve_string_(node->at("easing"));
        }
        inline Ent::Gen::Vector2 ScaleConverter::in_() const
        {
            return Ent::Gen::Vector2(node->at("in"));
        }
        inline Ent::Gen::String ScaleConverter::inText() const
        {
            return Ent::Gen::String(node->at("inText"));
        }
        inline Ent::Gen::Vector2 ScaleConverter::out() const
        {
            return Ent::Gen::Vector2(node->at("out"));
        }
        inline Ent::Gen::String ScaleConverter::outText() const
        {
            return Ent::Gen::String(node->at("outText"));
        }
        // RigidbodyScalingSpeed
        inline Ent::Gen::String RigidbodyScalingSpeed::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool RigidbodyScalingSpeed::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float RigidbodyScalingSpeed::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // RigidbodyScaleMultiplier
        inline Ent::Gen::String RigidbodyScaleMultiplier::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool RigidbodyScaleMultiplier::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float RigidbodyScaleMultiplier::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // RigidBodyUserData
        // RigidBodyUserDataLedges
        inline Ent::Gen::RigidBodyUserData RigidBodyUserDataLedges::Super() const
        {
            return Ent::Gen::RigidBodyUserData(node->at("Super"));
        }
        inline Ent::Gen::String RigidBodyUserDataLedges::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RigidBodyUserDataImpact
        inline Ent::Gen::RigidBodyUserData RigidBodyUserDataImpact::Super() const
        {
            return Ent::Gen::RigidBodyUserData(node->at("Super"));
        }
        inline Ent::Gen::String RigidBodyUserDataImpact::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RigidBodyMeshNavigation
        inline Ent::Gen::RigidBodyUserData RigidBodyMeshNavigation::Super() const
        {
            return Ent::Gen::RigidBodyUserData(node->at("Super"));
        }
        inline Ent::Gen::String RigidBodyMeshNavigation::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidRigidbodyUserData
        inline Ent::Gen::RigidBodyUserData FluidRigidbodyUserData::Super() const
        {
            return Ent::Gen::RigidBodyUserData(node->at("Super"));
        }
        inline Ent::Gen::String FluidRigidbodyUserData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RevivedData
        inline Ent::Gen::Float RevivedData::NonCreatureConvertRatio() const
        {
            return Ent::Gen::Float(node->at("NonCreatureConvertRatio"));
        }
        inline Ent::Gen::Float RevivedData::ReviveSinAmplitude() const
        {
            return Ent::Gen::Float(node->at("ReviveSinAmplitude"));
        }
        inline Ent::Gen::String RevivedData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ResponsiblePointer_GameEffect_
        inline char const* ResponsiblePointer_GameEffect_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::BeamDetectionEffect> ResponsiblePointer_GameEffect_::BeamDetectionEffect() const
        {
            return strcmp(node->getUnionType(), "BeamDetectionEffect") != 0? std::optional<Ent::Gen::BeamDetectionEffect>{}: std::optional<Ent::Gen::BeamDetectionEffect>(node->getUnionData());
        }
        inline Ent::Gen::BeamDetectionEffect ResponsiblePointer_GameEffect_::setBeamDetectionEffect() const
        {
            return Ent::Gen::BeamDetectionEffect(node->setUnionType("BeamDetectionEffect"));
        }
        inline std::optional<Ent::Gen::BeamEffect> ResponsiblePointer_GameEffect_::BeamEffect() const
        {
            return strcmp(node->getUnionType(), "BeamEffect") != 0? std::optional<Ent::Gen::BeamEffect>{}: std::optional<Ent::Gen::BeamEffect>(node->getUnionData());
        }
        inline Ent::Gen::BeamEffect ResponsiblePointer_GameEffect_::setBeamEffect() const
        {
            return Ent::Gen::BeamEffect(node->setUnionType("BeamEffect"));
        }
        inline std::optional<Ent::Gen::CallForHelpEffect> ResponsiblePointer_GameEffect_::CallForHelpEffect() const
        {
            return strcmp(node->getUnionType(), "CallForHelpEffect") != 0? std::optional<Ent::Gen::CallForHelpEffect>{}: std::optional<Ent::Gen::CallForHelpEffect>(node->getUnionData());
        }
        inline Ent::Gen::CallForHelpEffect ResponsiblePointer_GameEffect_::setCallForHelpEffect() const
        {
            return Ent::Gen::CallForHelpEffect(node->setUnionType("CallForHelpEffect"));
        }
        inline std::optional<Ent::Gen::ExplosionEffect> ResponsiblePointer_GameEffect_::ExplosionEffect() const
        {
            return strcmp(node->getUnionType(), "ExplosionEffect") != 0? std::optional<Ent::Gen::ExplosionEffect>{}: std::optional<Ent::Gen::ExplosionEffect>(node->getUnionData());
        }
        inline Ent::Gen::ExplosionEffect ResponsiblePointer_GameEffect_::setExplosionEffect() const
        {
            return Ent::Gen::ExplosionEffect(node->setUnionType("ExplosionEffect"));
        }
        inline std::optional<Ent::Gen::FluidEffect> ResponsiblePointer_GameEffect_::FluidEffect() const
        {
            return strcmp(node->getUnionType(), "FluidEffect") != 0? std::optional<Ent::Gen::FluidEffect>{}: std::optional<Ent::Gen::FluidEffect>(node->getUnionData());
        }
        inline Ent::Gen::FluidEffect ResponsiblePointer_GameEffect_::setFluidEffect() const
        {
            return Ent::Gen::FluidEffect(node->setUnionType("FluidEffect"));
        }
        inline std::optional<Ent::Gen::FollowerCallEffect> ResponsiblePointer_GameEffect_::FollowerCallEffect() const
        {
            return strcmp(node->getUnionType(), "FollowerCallEffect") != 0? std::optional<Ent::Gen::FollowerCallEffect>{}: std::optional<Ent::Gen::FollowerCallEffect>(node->getUnionData());
        }
        inline Ent::Gen::FollowerCallEffect ResponsiblePointer_GameEffect_::setFollowerCallEffect() const
        {
            return Ent::Gen::FollowerCallEffect(node->setUnionType("FollowerCallEffect"));
        }
        inline std::optional<Ent::Gen::RegenEffect> ResponsiblePointer_GameEffect_::RegenEffect() const
        {
            return strcmp(node->getUnionType(), "RegenEffect") != 0? std::optional<Ent::Gen::RegenEffect>{}: std::optional<Ent::Gen::RegenEffect>(node->getUnionData());
        }
        inline Ent::Gen::RegenEffect ResponsiblePointer_GameEffect_::setRegenEffect() const
        {
            return Ent::Gen::RegenEffect(node->setUnionType("RegenEffect"));
        }
        inline std::optional<Ent::Gen::RepulseEffect> ResponsiblePointer_GameEffect_::RepulseEffect() const
        {
            return strcmp(node->getUnionType(), "RepulseEffect") != 0? std::optional<Ent::Gen::RepulseEffect>{}: std::optional<Ent::Gen::RepulseEffect>(node->getUnionData());
        }
        inline Ent::Gen::RepulseEffect ResponsiblePointer_GameEffect_::setRepulseEffect() const
        {
            return Ent::Gen::RepulseEffect(node->setUnionType("RepulseEffect"));
        }
        inline std::optional<Ent::Gen::ShakeEffect> ResponsiblePointer_GameEffect_::ShakeEffect() const
        {
            return strcmp(node->getUnionType(), "ShakeEffect") != 0? std::optional<Ent::Gen::ShakeEffect>{}: std::optional<Ent::Gen::ShakeEffect>(node->getUnionData());
        }
        inline Ent::Gen::ShakeEffect ResponsiblePointer_GameEffect_::setShakeEffect() const
        {
            return Ent::Gen::ShakeEffect(node->setUnionType("ShakeEffect"));
        }
        inline std::optional<Ent::Gen::WindTurbulenceEffect> ResponsiblePointer_GameEffect_::WindTurbulenceEffect() const
        {
            return strcmp(node->getUnionType(), "WindTurbulenceEffect") != 0? std::optional<Ent::Gen::WindTurbulenceEffect>{}: std::optional<Ent::Gen::WindTurbulenceEffect>(node->getUnionData());
        }
        inline Ent::Gen::WindTurbulenceEffect ResponsiblePointer_GameEffect_::setWindTurbulenceEffect() const
        {
            return Ent::Gen::WindTurbulenceEffect(node->setUnionType("WindTurbulenceEffect"));
        }
        inline std::optional<Ent::Gen::GameEffect> ResponsiblePointer_GameEffect_::GameEffect() const
        {
            return strcmp(node->getUnionType(), "GameEffect") != 0? std::optional<Ent::Gen::GameEffect>{}: std::optional<Ent::Gen::GameEffect>(node->getUnionData());
        }
        inline Ent::Gen::GameEffect ResponsiblePointer_GameEffect_::setGameEffect() const
        {
            return Ent::Gen::GameEffect(node->setUnionType("GameEffect"));
        }
        // sGameEffectTemplate
        inline Ent::Gen::String sGameEffectTemplate::BoneName() const
        {
            return Ent::Gen::String(node->at("BoneName"));
        }
        inline Ent::Gen::ResponsiblePointer_GameEffect_ sGameEffectTemplate::Effect() const
        {
            return Ent::Gen::ResponsiblePointer_GameEffect_(node->at("Effect"));
        }
        inline Ent::Gen::Vector3 sGameEffectTemplate::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::String sGameEffectTemplate::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ResponsiblePointer_CineEvent_
        inline char const* ResponsiblePointer_CineEvent_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::CineEventTestCurrentGameState> ResponsiblePointer_CineEvent_::CineEventTestCurrentGameState() const
        {
            return strcmp(node->getUnionType(), "CineEventTestCurrentGameState") != 0? std::optional<Ent::Gen::CineEventTestCurrentGameState>{}: std::optional<Ent::Gen::CineEventTestCurrentGameState>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTestCurrentGameState ResponsiblePointer_CineEvent_::setCineEventTestCurrentGameState() const
        {
            return Ent::Gen::CineEventTestCurrentGameState(node->setUnionType("CineEventTestCurrentGameState"));
        }
        inline std::optional<Ent::Gen::CineEventTestEndCurrentSequence> ResponsiblePointer_CineEvent_::CineEventTestEndCurrentSequence() const
        {
            return strcmp(node->getUnionType(), "CineEventTestEndCurrentSequence") != 0? std::optional<Ent::Gen::CineEventTestEndCurrentSequence>{}: std::optional<Ent::Gen::CineEventTestEndCurrentSequence>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTestEndCurrentSequence ResponsiblePointer_CineEvent_::setCineEventTestEndCurrentSequence() const
        {
            return Ent::Gen::CineEventTestEndCurrentSequence(node->setUnionType("CineEventTestEndCurrentSequence"));
        }
        inline std::optional<Ent::Gen::CineEventTestInput> ResponsiblePointer_CineEvent_::CineEventTestInput() const
        {
            return strcmp(node->getUnionType(), "CineEventTestInput") != 0? std::optional<Ent::Gen::CineEventTestInput>{}: std::optional<Ent::Gen::CineEventTestInput>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTestInput ResponsiblePointer_CineEvent_::setCineEventTestInput() const
        {
            return Ent::Gen::CineEventTestInput(node->setUnionType("CineEventTestInput"));
        }
        inline std::optional<Ent::Gen::CineEventTestIsCanceled> ResponsiblePointer_CineEvent_::CineEventTestIsCanceled() const
        {
            return strcmp(node->getUnionType(), "CineEventTestIsCanceled") != 0? std::optional<Ent::Gen::CineEventTestIsCanceled>{}: std::optional<Ent::Gen::CineEventTestIsCanceled>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTestIsCanceled ResponsiblePointer_CineEvent_::setCineEventTestIsCanceled() const
        {
            return Ent::Gen::CineEventTestIsCanceled(node->setUnionType("CineEventTestIsCanceled"));
        }
        inline std::optional<Ent::Gen::CineEventTriggerDisplayUIMessage> ResponsiblePointer_CineEvent_::CineEventTriggerDisplayUIMessage() const
        {
            return strcmp(node->getUnionType(), "CineEventTriggerDisplayUIMessage") != 0? std::optional<Ent::Gen::CineEventTriggerDisplayUIMessage>{}: std::optional<Ent::Gen::CineEventTriggerDisplayUIMessage>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTriggerDisplayUIMessage ResponsiblePointer_CineEvent_::setCineEventTriggerDisplayUIMessage() const
        {
            return Ent::Gen::CineEventTriggerDisplayUIMessage(node->setUnionType("CineEventTriggerDisplayUIMessage"));
        }
        inline std::optional<Ent::Gen::CineEventTriggerEventHandlerPost> ResponsiblePointer_CineEvent_::CineEventTriggerEventHandlerPost() const
        {
            return strcmp(node->getUnionType(), "CineEventTriggerEventHandlerPost") != 0? std::optional<Ent::Gen::CineEventTriggerEventHandlerPost>{}: std::optional<Ent::Gen::CineEventTriggerEventHandlerPost>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTriggerEventHandlerPost ResponsiblePointer_CineEvent_::setCineEventTriggerEventHandlerPost() const
        {
            return Ent::Gen::CineEventTriggerEventHandlerPost(node->setUnionType("CineEventTriggerEventHandlerPost"));
        }
        inline std::optional<Ent::Gen::CineEventTriggerGameStateChange> ResponsiblePointer_CineEvent_::CineEventTriggerGameStateChange() const
        {
            return strcmp(node->getUnionType(), "CineEventTriggerGameStateChange") != 0? std::optional<Ent::Gen::CineEventTriggerGameStateChange>{}: std::optional<Ent::Gen::CineEventTriggerGameStateChange>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTriggerGameStateChange ResponsiblePointer_CineEvent_::setCineEventTriggerGameStateChange() const
        {
            return Ent::Gen::CineEventTriggerGameStateChange(node->setUnionType("CineEventTriggerGameStateChange"));
        }
        inline std::optional<Ent::Gen::CineEventTriggerPlaySequence> ResponsiblePointer_CineEvent_::CineEventTriggerPlaySequence() const
        {
            return strcmp(node->getUnionType(), "CineEventTriggerPlaySequence") != 0? std::optional<Ent::Gen::CineEventTriggerPlaySequence>{}: std::optional<Ent::Gen::CineEventTriggerPlaySequence>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTriggerPlaySequence ResponsiblePointer_CineEvent_::setCineEventTriggerPlaySequence() const
        {
            return Ent::Gen::CineEventTriggerPlaySequence(node->setUnionType("CineEventTriggerPlaySequence"));
        }
        inline std::optional<Ent::Gen::CineEventTriggerPlaySound> ResponsiblePointer_CineEvent_::CineEventTriggerPlaySound() const
        {
            return strcmp(node->getUnionType(), "CineEventTriggerPlaySound") != 0? std::optional<Ent::Gen::CineEventTriggerPlaySound>{}: std::optional<Ent::Gen::CineEventTriggerPlaySound>(node->getUnionData());
        }
        inline Ent::Gen::CineEventTriggerPlaySound ResponsiblePointer_CineEvent_::setCineEventTriggerPlaySound() const
        {
            return Ent::Gen::CineEventTriggerPlaySound(node->setUnionType("CineEventTriggerPlaySound"));
        }
        // ResponsiblePointer_AnalyticsObserverInterface_
        // ResponsiblePointer_ActorState_
        inline char const* ResponsiblePointer_ActorState_::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::ActionAimProjectile> ResponsiblePointer_ActorState_::ActionAimProjectile() const
        {
            return strcmp(node->getUnionType(), "ActionAimProjectile") != 0? std::optional<Ent::Gen::ActionAimProjectile>{}: std::optional<Ent::Gen::ActionAimProjectile>(node->getUnionData());
        }
        inline Ent::Gen::ActionAimProjectile ResponsiblePointer_ActorState_::setActionAimProjectile() const
        {
            return Ent::Gen::ActionAimProjectile(node->setUnionType("ActionAimProjectile"));
        }
        inline std::optional<Ent::Gen::ActionAttack> ResponsiblePointer_ActorState_::ActionAttack() const
        {
            return strcmp(node->getUnionType(), "ActionAttack") != 0? std::optional<Ent::Gen::ActionAttack>{}: std::optional<Ent::Gen::ActionAttack>(node->getUnionData());
        }
        inline Ent::Gen::ActionAttack ResponsiblePointer_ActorState_::setActionAttack() const
        {
            return Ent::Gen::ActionAttack(node->setUnionType("ActionAttack"));
        }
        inline std::optional<Ent::Gen::ActionAttackJumpOnto> ResponsiblePointer_ActorState_::ActionAttackJumpOnto() const
        {
            return strcmp(node->getUnionType(), "ActionAttackJumpOnto") != 0? std::optional<Ent::Gen::ActionAttackJumpOnto>{}: std::optional<Ent::Gen::ActionAttackJumpOnto>(node->getUnionData());
        }
        inline Ent::Gen::ActionAttackJumpOnto ResponsiblePointer_ActorState_::setActionAttackJumpOnto() const
        {
            return Ent::Gen::ActionAttackJumpOnto(node->setUnionType("ActionAttackJumpOnto"));
        }
        inline std::optional<Ent::Gen::ActionAttackStomp> ResponsiblePointer_ActorState_::ActionAttackStomp() const
        {
            return strcmp(node->getUnionType(), "ActionAttackStomp") != 0? std::optional<Ent::Gen::ActionAttackStomp>{}: std::optional<Ent::Gen::ActionAttackStomp>(node->getUnionData());
        }
        inline Ent::Gen::ActionAttackStomp ResponsiblePointer_ActorState_::setActionAttackStomp() const
        {
            return Ent::Gen::ActionAttackStomp(node->setUnionType("ActionAttackStomp"));
        }
        inline std::optional<Ent::Gen::ActionBite> ResponsiblePointer_ActorState_::ActionBite() const
        {
            return strcmp(node->getUnionType(), "ActionBite") != 0? std::optional<Ent::Gen::ActionBite>{}: std::optional<Ent::Gen::ActionBite>(node->getUnionData());
        }
        inline Ent::Gen::ActionBite ResponsiblePointer_ActorState_::setActionBite() const
        {
            return Ent::Gen::ActionBite(node->setUnionType("ActionBite"));
        }
        inline std::optional<Ent::Gen::ActionBiteIn> ResponsiblePointer_ActorState_::ActionBiteIn() const
        {
            return strcmp(node->getUnionType(), "ActionBiteIn") != 0? std::optional<Ent::Gen::ActionBiteIn>{}: std::optional<Ent::Gen::ActionBiteIn>(node->getUnionData());
        }
        inline Ent::Gen::ActionBiteIn ResponsiblePointer_ActorState_::setActionBiteIn() const
        {
            return Ent::Gen::ActionBiteIn(node->setUnionType("ActionBiteIn"));
        }
        inline std::optional<Ent::Gen::ActionBiteOut> ResponsiblePointer_ActorState_::ActionBiteOut() const
        {
            return strcmp(node->getUnionType(), "ActionBiteOut") != 0? std::optional<Ent::Gen::ActionBiteOut>{}: std::optional<Ent::Gen::ActionBiteOut>(node->getUnionData());
        }
        inline Ent::Gen::ActionBiteOut ResponsiblePointer_ActorState_::setActionBiteOut() const
        {
            return Ent::Gen::ActionBiteOut(node->setUnionType("ActionBiteOut"));
        }
        inline std::optional<Ent::Gen::ActionBittenState> ResponsiblePointer_ActorState_::ActionBittenState() const
        {
            return strcmp(node->getUnionType(), "ActionBittenState") != 0? std::optional<Ent::Gen::ActionBittenState>{}: std::optional<Ent::Gen::ActionBittenState>(node->getUnionData());
        }
        inline Ent::Gen::ActionBittenState ResponsiblePointer_ActorState_::setActionBittenState() const
        {
            return Ent::Gen::ActionBittenState(node->setUnionType("ActionBittenState"));
        }
        inline std::optional<Ent::Gen::ActionBrake> ResponsiblePointer_ActorState_::ActionBrake() const
        {
            return strcmp(node->getUnionType(), "ActionBrake") != 0? std::optional<Ent::Gen::ActionBrake>{}: std::optional<Ent::Gen::ActionBrake>(node->getUnionData());
        }
        inline Ent::Gen::ActionBrake ResponsiblePointer_ActorState_::setActionBrake() const
        {
            return Ent::Gen::ActionBrake(node->setUnionType("ActionBrake"));
        }
        inline std::optional<Ent::Gen::ActionCallForHelp> ResponsiblePointer_ActorState_::ActionCallForHelp() const
        {
            return strcmp(node->getUnionType(), "ActionCallForHelp") != 0? std::optional<Ent::Gen::ActionCallForHelp>{}: std::optional<Ent::Gen::ActionCallForHelp>(node->getUnionData());
        }
        inline Ent::Gen::ActionCallForHelp ResponsiblePointer_ActorState_::setActionCallForHelp() const
        {
            return Ent::Gen::ActionCallForHelp(node->setUnionType("ActionCallForHelp"));
        }
        inline std::optional<Ent::Gen::ActionCentrifugal> ResponsiblePointer_ActorState_::ActionCentrifugal() const
        {
            return strcmp(node->getUnionType(), "ActionCentrifugal") != 0? std::optional<Ent::Gen::ActionCentrifugal>{}: std::optional<Ent::Gen::ActionCentrifugal>(node->getUnionData());
        }
        inline Ent::Gen::ActionCentrifugal ResponsiblePointer_ActorState_::setActionCentrifugal() const
        {
            return Ent::Gen::ActionCentrifugal(node->setUnionType("ActionCentrifugal"));
        }
        inline std::optional<Ent::Gen::ActionChangeMount> ResponsiblePointer_ActorState_::ActionChangeMount() const
        {
            return strcmp(node->getUnionType(), "ActionChangeMount") != 0? std::optional<Ent::Gen::ActionChangeMount>{}: std::optional<Ent::Gen::ActionChangeMount>(node->getUnionData());
        }
        inline Ent::Gen::ActionChangeMount ResponsiblePointer_ActorState_::setActionChangeMount() const
        {
            return Ent::Gen::ActionChangeMount(node->setUnionType("ActionChangeMount"));
        }
        inline std::optional<Ent::Gen::ActionChangeRidingSpot> ResponsiblePointer_ActorState_::ActionChangeRidingSpot() const
        {
            return strcmp(node->getUnionType(), "ActionChangeRidingSpot") != 0? std::optional<Ent::Gen::ActionChangeRidingSpot>{}: std::optional<Ent::Gen::ActionChangeRidingSpot>(node->getUnionData());
        }
        inline Ent::Gen::ActionChangeRidingSpot ResponsiblePointer_ActorState_::setActionChangeRidingSpot() const
        {
            return Ent::Gen::ActionChangeRidingSpot(node->setUnionType("ActionChangeRidingSpot"));
        }
        inline std::optional<Ent::Gen::ActionChosen> ResponsiblePointer_ActorState_::ActionChosen() const
        {
            return strcmp(node->getUnionType(), "ActionChosen") != 0? std::optional<Ent::Gen::ActionChosen>{}: std::optional<Ent::Gen::ActionChosen>(node->getUnionData());
        }
        inline Ent::Gen::ActionChosen ResponsiblePointer_ActorState_::setActionChosen() const
        {
            return Ent::Gen::ActionChosen(node->setUnionType("ActionChosen"));
        }
        inline std::optional<Ent::Gen::ActionCinematic> ResponsiblePointer_ActorState_::ActionCinematic() const
        {
            return strcmp(node->getUnionType(), "ActionCinematic") != 0? std::optional<Ent::Gen::ActionCinematic>{}: std::optional<Ent::Gen::ActionCinematic>(node->getUnionData());
        }
        inline Ent::Gen::ActionCinematic ResponsiblePointer_ActorState_::setActionCinematic() const
        {
            return Ent::Gen::ActionCinematic(node->setUnionType("ActionCinematic"));
        }
        inline std::optional<Ent::Gen::ActionClamberDropOff> ResponsiblePointer_ActorState_::ActionClamberDropOff() const
        {
            return strcmp(node->getUnionType(), "ActionClamberDropOff") != 0? std::optional<Ent::Gen::ActionClamberDropOff>{}: std::optional<Ent::Gen::ActionClamberDropOff>(node->getUnionData());
        }
        inline Ent::Gen::ActionClamberDropOff ResponsiblePointer_ActorState_::setActionClamberDropOff() const
        {
            return Ent::Gen::ActionClamberDropOff(node->setUnionType("ActionClamberDropOff"));
        }
        inline std::optional<Ent::Gen::ActionClamberJump> ResponsiblePointer_ActorState_::ActionClamberJump() const
        {
            return strcmp(node->getUnionType(), "ActionClamberJump") != 0? std::optional<Ent::Gen::ActionClamberJump>{}: std::optional<Ent::Gen::ActionClamberJump>(node->getUnionData());
        }
        inline Ent::Gen::ActionClamberJump ResponsiblePointer_ActorState_::setActionClamberJump() const
        {
            return Ent::Gen::ActionClamberJump(node->setUnionType("ActionClamberJump"));
        }
        inline std::optional<Ent::Gen::ActionClamberJumpOff> ResponsiblePointer_ActorState_::ActionClamberJumpOff() const
        {
            return strcmp(node->getUnionType(), "ActionClamberJumpOff") != 0? std::optional<Ent::Gen::ActionClamberJumpOff>{}: std::optional<Ent::Gen::ActionClamberJumpOff>(node->getUnionData());
        }
        inline Ent::Gen::ActionClamberJumpOff ResponsiblePointer_ActorState_::setActionClamberJumpOff() const
        {
            return Ent::Gen::ActionClamberJumpOff(node->setUnionType("ActionClamberJumpOff"));
        }
        inline std::optional<Ent::Gen::ActionClamberLand> ResponsiblePointer_ActorState_::ActionClamberLand() const
        {
            return strcmp(node->getUnionType(), "ActionClamberLand") != 0? std::optional<Ent::Gen::ActionClamberLand>{}: std::optional<Ent::Gen::ActionClamberLand>(node->getUnionData());
        }
        inline Ent::Gen::ActionClamberLand ResponsiblePointer_ActorState_::setActionClamberLand() const
        {
            return Ent::Gen::ActionClamberLand(node->setUnionType("ActionClamberLand"));
        }
        inline std::optional<Ent::Gen::ActionClamberMove> ResponsiblePointer_ActorState_::ActionClamberMove() const
        {
            return strcmp(node->getUnionType(), "ActionClamberMove") != 0? std::optional<Ent::Gen::ActionClamberMove>{}: std::optional<Ent::Gen::ActionClamberMove>(node->getUnionData());
        }
        inline Ent::Gen::ActionClamberMove ResponsiblePointer_ActorState_::setActionClamberMove() const
        {
            return Ent::Gen::ActionClamberMove(node->setUnionType("ActionClamberMove"));
        }
        inline std::optional<Ent::Gen::ActionClamberRise> ResponsiblePointer_ActorState_::ActionClamberRise() const
        {
            return strcmp(node->getUnionType(), "ActionClamberRise") != 0? std::optional<Ent::Gen::ActionClamberRise>{}: std::optional<Ent::Gen::ActionClamberRise>(node->getUnionData());
        }
        inline Ent::Gen::ActionClamberRise ResponsiblePointer_ActorState_::setActionClamberRise() const
        {
            return Ent::Gen::ActionClamberRise(node->setUnionType("ActionClamberRise"));
        }
        inline std::optional<Ent::Gen::ActionClimbEdge> ResponsiblePointer_ActorState_::ActionClimbEdge() const
        {
            return strcmp(node->getUnionType(), "ActionClimbEdge") != 0? std::optional<Ent::Gen::ActionClimbEdge>{}: std::optional<Ent::Gen::ActionClimbEdge>(node->getUnionData());
        }
        inline Ent::Gen::ActionClimbEdge ResponsiblePointer_ActorState_::setActionClimbEdge() const
        {
            return Ent::Gen::ActionClimbEdge(node->setUnionType("ActionClimbEdge"));
        }
        inline std::optional<Ent::Gen::ActionCollapse> ResponsiblePointer_ActorState_::ActionCollapse() const
        {
            return strcmp(node->getUnionType(), "ActionCollapse") != 0? std::optional<Ent::Gen::ActionCollapse>{}: std::optional<Ent::Gen::ActionCollapse>(node->getUnionData());
        }
        inline Ent::Gen::ActionCollapse ResponsiblePointer_ActorState_::setActionCollapse() const
        {
            return Ent::Gen::ActionCollapse(node->setUnionType("ActionCollapse"));
        }
        inline std::optional<Ent::Gen::ActionDecelerate> ResponsiblePointer_ActorState_::ActionDecelerate() const
        {
            return strcmp(node->getUnionType(), "ActionDecelerate") != 0? std::optional<Ent::Gen::ActionDecelerate>{}: std::optional<Ent::Gen::ActionDecelerate>(node->getUnionData());
        }
        inline Ent::Gen::ActionDecelerate ResponsiblePointer_ActorState_::setActionDecelerate() const
        {
            return Ent::Gen::ActionDecelerate(node->setUnionType("ActionDecelerate"));
        }
        inline std::optional<Ent::Gen::ActionDigUpTreasure> ResponsiblePointer_ActorState_::ActionDigUpTreasure() const
        {
            return strcmp(node->getUnionType(), "ActionDigUpTreasure") != 0? std::optional<Ent::Gen::ActionDigUpTreasure>{}: std::optional<Ent::Gen::ActionDigUpTreasure>(node->getUnionData());
        }
        inline Ent::Gen::ActionDigUpTreasure ResponsiblePointer_ActorState_::setActionDigUpTreasure() const
        {
            return Ent::Gen::ActionDigUpTreasure(node->setUnionType("ActionDigUpTreasure"));
        }
        inline std::optional<Ent::Gen::ActionDisableAndFollow> ResponsiblePointer_ActorState_::ActionDisableAndFollow() const
        {
            return strcmp(node->getUnionType(), "ActionDisableAndFollow") != 0? std::optional<Ent::Gen::ActionDisableAndFollow>{}: std::optional<Ent::Gen::ActionDisableAndFollow>(node->getUnionData());
        }
        inline Ent::Gen::ActionDisableAndFollow ResponsiblePointer_ActorState_::setActionDisableAndFollow() const
        {
            return Ent::Gen::ActionDisableAndFollow(node->setUnionType("ActionDisableAndFollow"));
        }
        inline std::optional<Ent::Gen::ActionDodge> ResponsiblePointer_ActorState_::ActionDodge() const
        {
            return strcmp(node->getUnionType(), "ActionDodge") != 0? std::optional<Ent::Gen::ActionDodge>{}: std::optional<Ent::Gen::ActionDodge>(node->getUnionData());
        }
        inline Ent::Gen::ActionDodge ResponsiblePointer_ActorState_::setActionDodge() const
        {
            return Ent::Gen::ActionDodge(node->setUnionType("ActionDodge"));
        }
        inline std::optional<Ent::Gen::ActionDrawAttention> ResponsiblePointer_ActorState_::ActionDrawAttention() const
        {
            return strcmp(node->getUnionType(), "ActionDrawAttention") != 0? std::optional<Ent::Gen::ActionDrawAttention>{}: std::optional<Ent::Gen::ActionDrawAttention>(node->getUnionData());
        }
        inline Ent::Gen::ActionDrawAttention ResponsiblePointer_ActorState_::setActionDrawAttention() const
        {
            return Ent::Gen::ActionDrawAttention(node->setUnionType("ActionDrawAttention"));
        }
        inline std::optional<Ent::Gen::ActionDrawWeapon> ResponsiblePointer_ActorState_::ActionDrawWeapon() const
        {
            return strcmp(node->getUnionType(), "ActionDrawWeapon") != 0? std::optional<Ent::Gen::ActionDrawWeapon>{}: std::optional<Ent::Gen::ActionDrawWeapon>(node->getUnionData());
        }
        inline Ent::Gen::ActionDrawWeapon ResponsiblePointer_ActorState_::setActionDrawWeapon() const
        {
            return Ent::Gen::ActionDrawWeapon(node->setUnionType("ActionDrawWeapon"));
        }
        inline std::optional<Ent::Gen::ActionDrawWeaponState> ResponsiblePointer_ActorState_::ActionDrawWeaponState() const
        {
            return strcmp(node->getUnionType(), "ActionDrawWeaponState") != 0? std::optional<Ent::Gen::ActionDrawWeaponState>{}: std::optional<Ent::Gen::ActionDrawWeaponState>(node->getUnionData());
        }
        inline Ent::Gen::ActionDrawWeaponState ResponsiblePointer_ActorState_::setActionDrawWeaponState() const
        {
            return Ent::Gen::ActionDrawWeaponState(node->setUnionType("ActionDrawWeaponState"));
        }
        inline std::optional<Ent::Gen::ActionDrift> ResponsiblePointer_ActorState_::ActionDrift() const
        {
            return strcmp(node->getUnionType(), "ActionDrift") != 0? std::optional<Ent::Gen::ActionDrift>{}: std::optional<Ent::Gen::ActionDrift>(node->getUnionData());
        }
        inline Ent::Gen::ActionDrift ResponsiblePointer_ActorState_::setActionDrift() const
        {
            return Ent::Gen::ActionDrift(node->setUnionType("ActionDrift"));
        }
        inline std::optional<Ent::Gen::ActionDrop> ResponsiblePointer_ActorState_::ActionDrop() const
        {
            return strcmp(node->getUnionType(), "ActionDrop") != 0? std::optional<Ent::Gen::ActionDrop>{}: std::optional<Ent::Gen::ActionDrop>(node->getUnionData());
        }
        inline Ent::Gen::ActionDrop ResponsiblePointer_ActorState_::setActionDrop() const
        {
            return Ent::Gen::ActionDrop(node->setUnionType("ActionDrop"));
        }
        inline std::optional<Ent::Gen::ActionEmote> ResponsiblePointer_ActorState_::ActionEmote() const
        {
            return strcmp(node->getUnionType(), "ActionEmote") != 0? std::optional<Ent::Gen::ActionEmote>{}: std::optional<Ent::Gen::ActionEmote>(node->getUnionData());
        }
        inline Ent::Gen::ActionEmote ResponsiblePointer_ActorState_::setActionEmote() const
        {
            return Ent::Gen::ActionEmote(node->setUnionType("ActionEmote"));
        }
        inline std::optional<Ent::Gen::ActionFlyCrash> ResponsiblePointer_ActorState_::ActionFlyCrash() const
        {
            return strcmp(node->getUnionType(), "ActionFlyCrash") != 0? std::optional<Ent::Gen::ActionFlyCrash>{}: std::optional<Ent::Gen::ActionFlyCrash>(node->getUnionData());
        }
        inline Ent::Gen::ActionFlyCrash ResponsiblePointer_ActorState_::setActionFlyCrash() const
        {
            return Ent::Gen::ActionFlyCrash(node->setUnionType("ActionFlyCrash"));
        }
        inline std::optional<Ent::Gen::ActionFlyDive> ResponsiblePointer_ActorState_::ActionFlyDive() const
        {
            return strcmp(node->getUnionType(), "ActionFlyDive") != 0? std::optional<Ent::Gen::ActionFlyDive>{}: std::optional<Ent::Gen::ActionFlyDive>(node->getUnionData());
        }
        inline Ent::Gen::ActionFlyDive ResponsiblePointer_ActorState_::setActionFlyDive() const
        {
            return Ent::Gen::ActionFlyDive(node->setUnionType("ActionFlyDive"));
        }
        inline std::optional<Ent::Gen::ActionFlyDown> ResponsiblePointer_ActorState_::ActionFlyDown() const
        {
            return strcmp(node->getUnionType(), "ActionFlyDown") != 0? std::optional<Ent::Gen::ActionFlyDown>{}: std::optional<Ent::Gen::ActionFlyDown>(node->getUnionData());
        }
        inline Ent::Gen::ActionFlyDown ResponsiblePointer_ActorState_::setActionFlyDown() const
        {
            return Ent::Gen::ActionFlyDown(node->setUnionType("ActionFlyDown"));
        }
        inline std::optional<Ent::Gen::ActionFlyFlap> ResponsiblePointer_ActorState_::ActionFlyFlap() const
        {
            return strcmp(node->getUnionType(), "ActionFlyFlap") != 0? std::optional<Ent::Gen::ActionFlyFlap>{}: std::optional<Ent::Gen::ActionFlyFlap>(node->getUnionData());
        }
        inline Ent::Gen::ActionFlyFlap ResponsiblePointer_ActorState_::setActionFlyFlap() const
        {
            return Ent::Gen::ActionFlyFlap(node->setUnionType("ActionFlyFlap"));
        }
        inline std::optional<Ent::Gen::ActionFlyUp> ResponsiblePointer_ActorState_::ActionFlyUp() const
        {
            return strcmp(node->getUnionType(), "ActionFlyUp") != 0? std::optional<Ent::Gen::ActionFlyUp>{}: std::optional<Ent::Gen::ActionFlyUp>(node->getUnionData());
        }
        inline Ent::Gen::ActionFlyUp ResponsiblePointer_ActorState_::setActionFlyUp() const
        {
            return Ent::Gen::ActionFlyUp(node->setUnionType("ActionFlyUp"));
        }
        inline std::optional<Ent::Gen::ActionHit> ResponsiblePointer_ActorState_::ActionHit() const
        {
            return strcmp(node->getUnionType(), "ActionHit") != 0? std::optional<Ent::Gen::ActionHit>{}: std::optional<Ent::Gen::ActionHit>(node->getUnionData());
        }
        inline Ent::Gen::ActionHit ResponsiblePointer_ActorState_::setActionHit() const
        {
            return Ent::Gen::ActionHit(node->setUnionType("ActionHit"));
        }
        inline std::optional<Ent::Gen::ActionIdle> ResponsiblePointer_ActorState_::ActionIdle() const
        {
            return strcmp(node->getUnionType(), "ActionIdle") != 0? std::optional<Ent::Gen::ActionIdle>{}: std::optional<Ent::Gen::ActionIdle>(node->getUnionData());
        }
        inline Ent::Gen::ActionIdle ResponsiblePointer_ActorState_::setActionIdle() const
        {
            return Ent::Gen::ActionIdle(node->setUnionType("ActionIdle"));
        }
        inline std::optional<Ent::Gen::ActionIncarnate> ResponsiblePointer_ActorState_::ActionIncarnate() const
        {
            return strcmp(node->getUnionType(), "ActionIncarnate") != 0? std::optional<Ent::Gen::ActionIncarnate>{}: std::optional<Ent::Gen::ActionIncarnate>(node->getUnionData());
        }
        inline Ent::Gen::ActionIncarnate ResponsiblePointer_ActorState_::setActionIncarnate() const
        {
            return Ent::Gen::ActionIncarnate(node->setUnionType("ActionIncarnate"));
        }
        inline std::optional<Ent::Gen::ActionIncarnated> ResponsiblePointer_ActorState_::ActionIncarnated() const
        {
            return strcmp(node->getUnionType(), "ActionIncarnated") != 0? std::optional<Ent::Gen::ActionIncarnated>{}: std::optional<Ent::Gen::ActionIncarnated>(node->getUnionData());
        }
        inline Ent::Gen::ActionIncarnated ResponsiblePointer_ActorState_::setActionIncarnated() const
        {
            return Ent::Gen::ActionIncarnated(node->setUnionType("ActionIncarnated"));
        }
        inline std::optional<Ent::Gen::ActionJump> ResponsiblePointer_ActorState_::ActionJump() const
        {
            return strcmp(node->getUnionType(), "ActionJump") != 0? std::optional<Ent::Gen::ActionJump>{}: std::optional<Ent::Gen::ActionJump>(node->getUnionData());
        }
        inline Ent::Gen::ActionJump ResponsiblePointer_ActorState_::setActionJump() const
        {
            return Ent::Gen::ActionJump(node->setUnionType("ActionJump"));
        }
        inline std::optional<Ent::Gen::ActionJumpOnto> ResponsiblePointer_ActorState_::ActionJumpOnto() const
        {
            return strcmp(node->getUnionType(), "ActionJumpOnto") != 0? std::optional<Ent::Gen::ActionJumpOnto>{}: std::optional<Ent::Gen::ActionJumpOnto>(node->getUnionData());
        }
        inline Ent::Gen::ActionJumpOnto ResponsiblePointer_ActorState_::setActionJumpOnto() const
        {
            return Ent::Gen::ActionJumpOnto(node->setUnionType("ActionJumpOnto"));
        }
        inline std::optional<Ent::Gen::ActionLand> ResponsiblePointer_ActorState_::ActionLand() const
        {
            return strcmp(node->getUnionType(), "ActionLand") != 0? std::optional<Ent::Gen::ActionLand>{}: std::optional<Ent::Gen::ActionLand>(node->getUnionData());
        }
        inline Ent::Gen::ActionLand ResponsiblePointer_ActorState_::setActionLand() const
        {
            return Ent::Gen::ActionLand(node->setUnionType("ActionLand"));
        }
        inline std::optional<Ent::Gen::ActionLandingMount> ResponsiblePointer_ActorState_::ActionLandingMount() const
        {
            return strcmp(node->getUnionType(), "ActionLandingMount") != 0? std::optional<Ent::Gen::ActionLandingMount>{}: std::optional<Ent::Gen::ActionLandingMount>(node->getUnionData());
        }
        inline Ent::Gen::ActionLandingMount ResponsiblePointer_ActorState_::setActionLandingMount() const
        {
            return Ent::Gen::ActionLandingMount(node->setUnionType("ActionLandingMount"));
        }
        inline std::optional<Ent::Gen::ActionLookAt> ResponsiblePointer_ActorState_::ActionLookAt() const
        {
            return strcmp(node->getUnionType(), "ActionLookAt") != 0? std::optional<Ent::Gen::ActionLookAt>{}: std::optional<Ent::Gen::ActionLookAt>(node->getUnionData());
        }
        inline Ent::Gen::ActionLookAt ResponsiblePointer_ActorState_::setActionLookAt() const
        {
            return Ent::Gen::ActionLookAt(node->setUnionType("ActionLookAt"));
        }
        inline std::optional<Ent::Gen::ActionMountReception> ResponsiblePointer_ActorState_::ActionMountReception() const
        {
            return strcmp(node->getUnionType(), "ActionMountReception") != 0? std::optional<Ent::Gen::ActionMountReception>{}: std::optional<Ent::Gen::ActionMountReception>(node->getUnionData());
        }
        inline Ent::Gen::ActionMountReception ResponsiblePointer_ActorState_::setActionMountReception() const
        {
            return Ent::Gen::ActionMountReception(node->setUnionType("ActionMountReception"));
        }
        inline std::optional<Ent::Gen::ActionMove> ResponsiblePointer_ActorState_::ActionMove() const
        {
            return strcmp(node->getUnionType(), "ActionMove") != 0? std::optional<Ent::Gen::ActionMove>{}: std::optional<Ent::Gen::ActionMove>(node->getUnionData());
        }
        inline Ent::Gen::ActionMove ResponsiblePointer_ActorState_::setActionMove() const
        {
            return Ent::Gen::ActionMove(node->setUnionType("ActionMove"));
        }
        inline std::optional<Ent::Gen::ActionMoveProjectile> ResponsiblePointer_ActorState_::ActionMoveProjectile() const
        {
            return strcmp(node->getUnionType(), "ActionMoveProjectile") != 0? std::optional<Ent::Gen::ActionMoveProjectile>{}: std::optional<Ent::Gen::ActionMoveProjectile>(node->getUnionData());
        }
        inline Ent::Gen::ActionMoveProjectile ResponsiblePointer_ActorState_::setActionMoveProjectile() const
        {
            return Ent::Gen::ActionMoveProjectile(node->setUnionType("ActionMoveProjectile"));
        }
        inline std::optional<Ent::Gen::ActionMoveTo> ResponsiblePointer_ActorState_::ActionMoveTo() const
        {
            return strcmp(node->getUnionType(), "ActionMoveTo") != 0? std::optional<Ent::Gen::ActionMoveTo>{}: std::optional<Ent::Gen::ActionMoveTo>(node->getUnionData());
        }
        inline Ent::Gen::ActionMoveTo ResponsiblePointer_ActorState_::setActionMoveTo() const
        {
            return Ent::Gen::ActionMoveTo(node->setUnionType("ActionMoveTo"));
        }
        inline std::optional<Ent::Gen::ActionOrientMount> ResponsiblePointer_ActorState_::ActionOrientMount() const
        {
            return strcmp(node->getUnionType(), "ActionOrientMount") != 0? std::optional<Ent::Gen::ActionOrientMount>{}: std::optional<Ent::Gen::ActionOrientMount>(node->getUnionData());
        }
        inline Ent::Gen::ActionOrientMount ResponsiblePointer_ActorState_::setActionOrientMount() const
        {
            return Ent::Gen::ActionOrientMount(node->setUnionType("ActionOrientMount"));
        }
        inline std::optional<Ent::Gen::ActionOutfitSpecialState> ResponsiblePointer_ActorState_::ActionOutfitSpecialState() const
        {
            return strcmp(node->getUnionType(), "ActionOutfitSpecialState") != 0? std::optional<Ent::Gen::ActionOutfitSpecialState>{}: std::optional<Ent::Gen::ActionOutfitSpecialState>(node->getUnionData());
        }
        inline Ent::Gen::ActionOutfitSpecialState ResponsiblePointer_ActorState_::setActionOutfitSpecialState() const
        {
            return Ent::Gen::ActionOutfitSpecialState(node->setUnionType("ActionOutfitSpecialState"));
        }
        inline std::optional<Ent::Gen::ActionPathfindAndMove> ResponsiblePointer_ActorState_::ActionPathfindAndMove() const
        {
            return strcmp(node->getUnionType(), "ActionPathfindAndMove") != 0? std::optional<Ent::Gen::ActionPathfindAndMove>{}: std::optional<Ent::Gen::ActionPathfindAndMove>(node->getUnionData());
        }
        inline Ent::Gen::ActionPathfindAndMove ResponsiblePointer_ActorState_::setActionPathfindAndMove() const
        {
            return Ent::Gen::ActionPathfindAndMove(node->setUnionType("ActionPathfindAndMove"));
        }
        inline std::optional<Ent::Gen::ActionPatinate> ResponsiblePointer_ActorState_::ActionPatinate() const
        {
            return strcmp(node->getUnionType(), "ActionPatinate") != 0? std::optional<Ent::Gen::ActionPatinate>{}: std::optional<Ent::Gen::ActionPatinate>(node->getUnionData());
        }
        inline Ent::Gen::ActionPatinate ResponsiblePointer_ActorState_::setActionPatinate() const
        {
            return Ent::Gen::ActionPatinate(node->setUnionType("ActionPatinate"));
        }
        inline std::optional<Ent::Gen::ActionPlayAnim> ResponsiblePointer_ActorState_::ActionPlayAnim() const
        {
            return strcmp(node->getUnionType(), "ActionPlayAnim") != 0? std::optional<Ent::Gen::ActionPlayAnim>{}: std::optional<Ent::Gen::ActionPlayAnim>(node->getUnionData());
        }
        inline Ent::Gen::ActionPlayAnim ResponsiblePointer_ActorState_::setActionPlayAnim() const
        {
            return Ent::Gen::ActionPlayAnim(node->setUnionType("ActionPlayAnim"));
        }
        inline std::optional<Ent::Gen::ActionPropelled> ResponsiblePointer_ActorState_::ActionPropelled() const
        {
            return strcmp(node->getUnionType(), "ActionPropelled") != 0? std::optional<Ent::Gen::ActionPropelled>{}: std::optional<Ent::Gen::ActionPropelled>(node->getUnionData());
        }
        inline Ent::Gen::ActionPropelled ResponsiblePointer_ActorState_::setActionPropelled() const
        {
            return Ent::Gen::ActionPropelled(node->setUnionType("ActionPropelled"));
        }
        inline std::optional<Ent::Gen::ActionPushed> ResponsiblePointer_ActorState_::ActionPushed() const
        {
            return strcmp(node->getUnionType(), "ActionPushed") != 0? std::optional<Ent::Gen::ActionPushed>{}: std::optional<Ent::Gen::ActionPushed>(node->getUnionData());
        }
        inline Ent::Gen::ActionPushed ResponsiblePointer_ActorState_::setActionPushed() const
        {
            return Ent::Gen::ActionPushed(node->setUnionType("ActionPushed"));
        }
        inline std::optional<Ent::Gen::ActionQuadStandUpState> ResponsiblePointer_ActorState_::ActionQuadStandUpState() const
        {
            return strcmp(node->getUnionType(), "ActionQuadStandUpState") != 0? std::optional<Ent::Gen::ActionQuadStandUpState>{}: std::optional<Ent::Gen::ActionQuadStandUpState>(node->getUnionData());
        }
        inline Ent::Gen::ActionQuadStandUpState ResponsiblePointer_ActorState_::setActionQuadStandUpState() const
        {
            return Ent::Gen::ActionQuadStandUpState(node->setUnionType("ActionQuadStandUpState"));
        }
        inline std::optional<Ent::Gen::ActionQuadStandUpStateIn> ResponsiblePointer_ActorState_::ActionQuadStandUpStateIn() const
        {
            return strcmp(node->getUnionType(), "ActionQuadStandUpStateIn") != 0? std::optional<Ent::Gen::ActionQuadStandUpStateIn>{}: std::optional<Ent::Gen::ActionQuadStandUpStateIn>(node->getUnionData());
        }
        inline Ent::Gen::ActionQuadStandUpStateIn ResponsiblePointer_ActorState_::setActionQuadStandUpStateIn() const
        {
            return Ent::Gen::ActionQuadStandUpStateIn(node->setUnionType("ActionQuadStandUpStateIn"));
        }
        inline std::optional<Ent::Gen::ActionQuadStandUpStateOut> ResponsiblePointer_ActorState_::ActionQuadStandUpStateOut() const
        {
            return strcmp(node->getUnionType(), "ActionQuadStandUpStateOut") != 0? std::optional<Ent::Gen::ActionQuadStandUpStateOut>{}: std::optional<Ent::Gen::ActionQuadStandUpStateOut>(node->getUnionData());
        }
        inline Ent::Gen::ActionQuadStandUpStateOut ResponsiblePointer_ActorState_::setActionQuadStandUpStateOut() const
        {
            return Ent::Gen::ActionQuadStandUpStateOut(node->setUnionType("ActionQuadStandUpStateOut"));
        }
        inline std::optional<Ent::Gen::ActionRagdoll> ResponsiblePointer_ActorState_::ActionRagdoll() const
        {
            return strcmp(node->getUnionType(), "ActionRagdoll") != 0? std::optional<Ent::Gen::ActionRagdoll>{}: std::optional<Ent::Gen::ActionRagdoll>(node->getUnionData());
        }
        inline Ent::Gen::ActionRagdoll ResponsiblePointer_ActorState_::setActionRagdoll() const
        {
            return Ent::Gen::ActionRagdoll(node->setUnionType("ActionRagdoll"));
        }
        inline std::optional<Ent::Gen::ActionReviveMaskEffect> ResponsiblePointer_ActorState_::ActionReviveMaskEffect() const
        {
            return strcmp(node->getUnionType(), "ActionReviveMaskEffect") != 0? std::optional<Ent::Gen::ActionReviveMaskEffect>{}: std::optional<Ent::Gen::ActionReviveMaskEffect>(node->getUnionData());
        }
        inline Ent::Gen::ActionReviveMaskEffect ResponsiblePointer_ActorState_::setActionReviveMaskEffect() const
        {
            return Ent::Gen::ActionReviveMaskEffect(node->setUnionType("ActionReviveMaskEffect"));
        }
        inline std::optional<Ent::Gen::ActionRiderStance> ResponsiblePointer_ActorState_::ActionRiderStance() const
        {
            return strcmp(node->getUnionType(), "ActionRiderStance") != 0? std::optional<Ent::Gen::ActionRiderStance>{}: std::optional<Ent::Gen::ActionRiderStance>(node->getUnionData());
        }
        inline Ent::Gen::ActionRiderStance ResponsiblePointer_ActorState_::setActionRiderStance() const
        {
            return Ent::Gen::ActionRiderStance(node->setUnionType("ActionRiderStance"));
        }
        inline std::optional<Ent::Gen::ActionRise> ResponsiblePointer_ActorState_::ActionRise() const
        {
            return strcmp(node->getUnionType(), "ActionRise") != 0? std::optional<Ent::Gen::ActionRise>{}: std::optional<Ent::Gen::ActionRise>(node->getUnionData());
        }
        inline Ent::Gen::ActionRise ResponsiblePointer_ActorState_::setActionRise() const
        {
            return Ent::Gen::ActionRise(node->setUnionType("ActionRise"));
        }
        inline std::optional<Ent::Gen::ActionScaleRider> ResponsiblePointer_ActorState_::ActionScaleRider() const
        {
            return strcmp(node->getUnionType(), "ActionScaleRider") != 0? std::optional<Ent::Gen::ActionScaleRider>{}: std::optional<Ent::Gen::ActionScaleRider>(node->getUnionData());
        }
        inline Ent::Gen::ActionScaleRider ResponsiblePointer_ActorState_::setActionScaleRider() const
        {
            return Ent::Gen::ActionScaleRider(node->setUnionType("ActionScaleRider"));
        }
        inline std::optional<Ent::Gen::ActionShakeOff> ResponsiblePointer_ActorState_::ActionShakeOff() const
        {
            return strcmp(node->getUnionType(), "ActionShakeOff") != 0? std::optional<Ent::Gen::ActionShakeOff>{}: std::optional<Ent::Gen::ActionShakeOff>(node->getUnionData());
        }
        inline Ent::Gen::ActionShakeOff ResponsiblePointer_ActorState_::setActionShakeOff() const
        {
            return Ent::Gen::ActionShakeOff(node->setUnionType("ActionShakeOff"));
        }
        inline std::optional<Ent::Gen::ActionShamanVision> ResponsiblePointer_ActorState_::ActionShamanVision() const
        {
            return strcmp(node->getUnionType(), "ActionShamanVision") != 0? std::optional<Ent::Gen::ActionShamanVision>{}: std::optional<Ent::Gen::ActionShamanVision>(node->getUnionData());
        }
        inline Ent::Gen::ActionShamanVision ResponsiblePointer_ActorState_::setActionShamanVision() const
        {
            return Ent::Gen::ActionShamanVision(node->setUnionType("ActionShamanVision"));
        }
        inline std::optional<Ent::Gen::ActionShootBeam> ResponsiblePointer_ActorState_::ActionShootBeam() const
        {
            return strcmp(node->getUnionType(), "ActionShootBeam") != 0? std::optional<Ent::Gen::ActionShootBeam>{}: std::optional<Ent::Gen::ActionShootBeam>(node->getUnionData());
        }
        inline Ent::Gen::ActionShootBeam ResponsiblePointer_ActorState_::setActionShootBeam() const
        {
            return Ent::Gen::ActionShootBeam(node->setUnionType("ActionShootBeam"));
        }
        inline std::optional<Ent::Gen::ActionSlide> ResponsiblePointer_ActorState_::ActionSlide() const
        {
            return strcmp(node->getUnionType(), "ActionSlide") != 0? std::optional<Ent::Gen::ActionSlide>{}: std::optional<Ent::Gen::ActionSlide>(node->getUnionData());
        }
        inline Ent::Gen::ActionSlide ResponsiblePointer_ActorState_::setActionSlide() const
        {
            return Ent::Gen::ActionSlide(node->setUnionType("ActionSlide"));
        }
        inline std::optional<Ent::Gen::ActionStartRun> ResponsiblePointer_ActorState_::ActionStartRun() const
        {
            return strcmp(node->getUnionType(), "ActionStartRun") != 0? std::optional<Ent::Gen::ActionStartRun>{}: std::optional<Ent::Gen::ActionStartRun>(node->getUnionData());
        }
        inline Ent::Gen::ActionStartRun ResponsiblePointer_ActorState_::setActionStartRun() const
        {
            return Ent::Gen::ActionStartRun(node->setUnionType("ActionStartRun"));
        }
        inline std::optional<Ent::Gen::ActionStop> ResponsiblePointer_ActorState_::ActionStop() const
        {
            return strcmp(node->getUnionType(), "ActionStop") != 0? std::optional<Ent::Gen::ActionStop>{}: std::optional<Ent::Gen::ActionStop>(node->getUnionData());
        }
        inline Ent::Gen::ActionStop ResponsiblePointer_ActorState_::setActionStop() const
        {
            return Ent::Gen::ActionStop(node->setUnionType("ActionStop"));
        }
        inline std::optional<Ent::Gen::ActionStrafe> ResponsiblePointer_ActorState_::ActionStrafe() const
        {
            return strcmp(node->getUnionType(), "ActionStrafe") != 0? std::optional<Ent::Gen::ActionStrafe>{}: std::optional<Ent::Gen::ActionStrafe>(node->getUnionData());
        }
        inline Ent::Gen::ActionStrafe ResponsiblePointer_ActorState_::setActionStrafe() const
        {
            return Ent::Gen::ActionStrafe(node->setUnionType("ActionStrafe"));
        }
        inline std::optional<Ent::Gen::ActionStrafeTurn> ResponsiblePointer_ActorState_::ActionStrafeTurn() const
        {
            return strcmp(node->getUnionType(), "ActionStrafeTurn") != 0? std::optional<Ent::Gen::ActionStrafeTurn>{}: std::optional<Ent::Gen::ActionStrafeTurn>(node->getUnionData());
        }
        inline Ent::Gen::ActionStrafeTurn ResponsiblePointer_ActorState_::setActionStrafeTurn() const
        {
            return Ent::Gen::ActionStrafeTurn(node->setUnionType("ActionStrafeTurn"));
        }
        inline std::optional<Ent::Gen::ActionTakeOff> ResponsiblePointer_ActorState_::ActionTakeOff() const
        {
            return strcmp(node->getUnionType(), "ActionTakeOff") != 0? std::optional<Ent::Gen::ActionTakeOff>{}: std::optional<Ent::Gen::ActionTakeOff>(node->getUnionData());
        }
        inline Ent::Gen::ActionTakeOff ResponsiblePointer_ActorState_::setActionTakeOff() const
        {
            return Ent::Gen::ActionTakeOff(node->setUnionType("ActionTakeOff"));
        }
        inline std::optional<Ent::Gen::ActionTalk> ResponsiblePointer_ActorState_::ActionTalk() const
        {
            return strcmp(node->getUnionType(), "ActionTalk") != 0? std::optional<Ent::Gen::ActionTalk>{}: std::optional<Ent::Gen::ActionTalk>(node->getUnionData());
        }
        inline Ent::Gen::ActionTalk ResponsiblePointer_ActorState_::setActionTalk() const
        {
            return Ent::Gen::ActionTalk(node->setUnionType("ActionTalk"));
        }
        inline std::optional<Ent::Gen::ActionTopView> ResponsiblePointer_ActorState_::ActionTopView() const
        {
            return strcmp(node->getUnionType(), "ActionTopView") != 0? std::optional<Ent::Gen::ActionTopView>{}: std::optional<Ent::Gen::ActionTopView>(node->getUnionData());
        }
        inline Ent::Gen::ActionTopView ResponsiblePointer_ActorState_::setActionTopView() const
        {
            return Ent::Gen::ActionTopView(node->setUnionType("ActionTopView"));
        }
        inline std::optional<Ent::Gen::ActionTriggerCrouch> ResponsiblePointer_ActorState_::ActionTriggerCrouch() const
        {
            return strcmp(node->getUnionType(), "ActionTriggerCrouch") != 0? std::optional<Ent::Gen::ActionTriggerCrouch>{}: std::optional<Ent::Gen::ActionTriggerCrouch>(node->getUnionData());
        }
        inline Ent::Gen::ActionTriggerCrouch ResponsiblePointer_ActorState_::setActionTriggerCrouch() const
        {
            return Ent::Gen::ActionTriggerCrouch(node->setUnionType("ActionTriggerCrouch"));
        }
        inline std::optional<Ent::Gen::ActionTriggerShamanVisionExit> ResponsiblePointer_ActorState_::ActionTriggerShamanVisionExit() const
        {
            return strcmp(node->getUnionType(), "ActionTriggerShamanVisionExit") != 0? std::optional<Ent::Gen::ActionTriggerShamanVisionExit>{}: std::optional<Ent::Gen::ActionTriggerShamanVisionExit>(node->getUnionData());
        }
        inline Ent::Gen::ActionTriggerShamanVisionExit ResponsiblePointer_ActorState_::setActionTriggerShamanVisionExit() const
        {
            return Ent::Gen::ActionTriggerShamanVisionExit(node->setUnionType("ActionTriggerShamanVisionExit"));
        }
        inline std::optional<Ent::Gen::ActionTriggerStandUp> ResponsiblePointer_ActorState_::ActionTriggerStandUp() const
        {
            return strcmp(node->getUnionType(), "ActionTriggerStandUp") != 0? std::optional<Ent::Gen::ActionTriggerStandUp>{}: std::optional<Ent::Gen::ActionTriggerStandUp>(node->getUnionData());
        }
        inline Ent::Gen::ActionTriggerStandUp ResponsiblePointer_ActorState_::setActionTriggerStandUp() const
        {
            return Ent::Gen::ActionTriggerStandUp(node->setUnionType("ActionTriggerStandUp"));
        }
        inline std::optional<Ent::Gen::ActionTurn> ResponsiblePointer_ActorState_::ActionTurn() const
        {
            return strcmp(node->getUnionType(), "ActionTurn") != 0? std::optional<Ent::Gen::ActionTurn>{}: std::optional<Ent::Gen::ActionTurn>(node->getUnionData());
        }
        inline Ent::Gen::ActionTurn ResponsiblePointer_ActorState_::setActionTurn() const
        {
            return Ent::Gen::ActionTurn(node->setUnionType("ActionTurn"));
        }
        inline std::optional<Ent::Gen::ActionUnmount> ResponsiblePointer_ActorState_::ActionUnmount() const
        {
            return strcmp(node->getUnionType(), "ActionUnmount") != 0? std::optional<Ent::Gen::ActionUnmount>{}: std::optional<Ent::Gen::ActionUnmount>(node->getUnionData());
        }
        inline Ent::Gen::ActionUnmount ResponsiblePointer_ActorState_::setActionUnmount() const
        {
            return Ent::Gen::ActionUnmount(node->setUnionType("ActionUnmount"));
        }
        inline std::optional<Ent::Gen::ActionWait> ResponsiblePointer_ActorState_::ActionWait() const
        {
            return strcmp(node->getUnionType(), "ActionWait") != 0? std::optional<Ent::Gen::ActionWait>{}: std::optional<Ent::Gen::ActionWait>(node->getUnionData());
        }
        inline Ent::Gen::ActionWait ResponsiblePointer_ActorState_::setActionWait() const
        {
            return Ent::Gen::ActionWait(node->setUnionType("ActionWait"));
        }
        inline std::optional<Ent::Gen::ActorStateAimCharge> ResponsiblePointer_ActorState_::ActorStateAimCharge() const
        {
            return strcmp(node->getUnionType(), "ActorStateAimCharge") != 0? std::optional<Ent::Gen::ActorStateAimCharge>{}: std::optional<Ent::Gen::ActorStateAimCharge>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateAimCharge ResponsiblePointer_ActorState_::setActorStateAimCharge() const
        {
            return Ent::Gen::ActorStateAimCharge(node->setUnionType("ActorStateAimCharge"));
        }
        inline std::optional<Ent::Gen::ActorStateAlive> ResponsiblePointer_ActorState_::ActorStateAlive() const
        {
            return strcmp(node->getUnionType(), "ActorStateAlive") != 0? std::optional<Ent::Gen::ActorStateAlive>{}: std::optional<Ent::Gen::ActorStateAlive>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateAlive ResponsiblePointer_ActorState_::setActorStateAlive() const
        {
            return Ent::Gen::ActorStateAlive(node->setUnionType("ActorStateAlive"));
        }
        inline std::optional<Ent::Gen::ActorStateAnsweringCall> ResponsiblePointer_ActorState_::ActorStateAnsweringCall() const
        {
            return strcmp(node->getUnionType(), "ActorStateAnsweringCall") != 0? std::optional<Ent::Gen::ActorStateAnsweringCall>{}: std::optional<Ent::Gen::ActorStateAnsweringCall>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateAnsweringCall ResponsiblePointer_ActorState_::setActorStateAnsweringCall() const
        {
            return Ent::Gen::ActorStateAnsweringCall(node->setUnionType("ActorStateAnsweringCall"));
        }
        inline std::optional<Ent::Gen::ActorStateApplyHit> ResponsiblePointer_ActorState_::ActorStateApplyHit() const
        {
            return strcmp(node->getUnionType(), "ActorStateApplyHit") != 0? std::optional<Ent::Gen::ActorStateApplyHit>{}: std::optional<Ent::Gen::ActorStateApplyHit>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateApplyHit ResponsiblePointer_ActorState_::setActorStateApplyHit() const
        {
            return Ent::Gen::ActorStateApplyHit(node->setUnionType("ActorStateApplyHit"));
        }
        inline std::optional<Ent::Gen::ActorStateAttitudeAggressive> ResponsiblePointer_ActorState_::ActorStateAttitudeAggressive() const
        {
            return strcmp(node->getUnionType(), "ActorStateAttitudeAggressive") != 0? std::optional<Ent::Gen::ActorStateAttitudeAggressive>{}: std::optional<Ent::Gen::ActorStateAttitudeAggressive>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateAttitudeAggressive ResponsiblePointer_ActorState_::setActorStateAttitudeAggressive() const
        {
            return Ent::Gen::ActorStateAttitudeAggressive(node->setUnionType("ActorStateAttitudeAggressive"));
        }
        inline std::optional<Ent::Gen::ActorStateBehaviorState> ResponsiblePointer_ActorState_::ActorStateBehaviorState() const
        {
            return strcmp(node->getUnionType(), "ActorStateBehaviorState") != 0? std::optional<Ent::Gen::ActorStateBehaviorState>{}: std::optional<Ent::Gen::ActorStateBehaviorState>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBehaviorState ResponsiblePointer_ActorState_::setActorStateBehaviorState() const
        {
            return Ent::Gen::ActorStateBehaviorState(node->setUnionType("ActorStateBehaviorState"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingImmersed> ResponsiblePointer_ActorState_::ActorStateBeingImmersed() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingImmersed") != 0? std::optional<Ent::Gen::ActorStateBeingImmersed>{}: std::optional<Ent::Gen::ActorStateBeingImmersed>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingImmersed ResponsiblePointer_ActorState_::setActorStateBeingImmersed() const
        {
            return Ent::Gen::ActorStateBeingImmersed(node->setUnionType("ActorStateBeingImmersed"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingImmersedFromInAir> ResponsiblePointer_ActorState_::ActorStateBeingImmersedFromInAir() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingImmersedFromInAir") != 0? std::optional<Ent::Gen::ActorStateBeingImmersedFromInAir>{}: std::optional<Ent::Gen::ActorStateBeingImmersedFromInAir>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingImmersedFromInAir ResponsiblePointer_ActorState_::setActorStateBeingImmersedFromInAir() const
        {
            return Ent::Gen::ActorStateBeingImmersedFromInAir(node->setUnionType("ActorStateBeingImmersedFromInAir"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingImmersedFromOnGround> ResponsiblePointer_ActorState_::ActorStateBeingImmersedFromOnGround() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingImmersedFromOnGround") != 0? std::optional<Ent::Gen::ActorStateBeingImmersedFromOnGround>{}: std::optional<Ent::Gen::ActorStateBeingImmersedFromOnGround>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingImmersedFromOnGround ResponsiblePointer_ActorState_::setActorStateBeingImmersedFromOnGround() const
        {
            return Ent::Gen::ActorStateBeingImmersedFromOnGround(node->setUnionType("ActorStateBeingImmersedFromOnGround"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingInAir> ResponsiblePointer_ActorState_::ActorStateBeingInAir() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingInAir") != 0? std::optional<Ent::Gen::ActorStateBeingInAir>{}: std::optional<Ent::Gen::ActorStateBeingInAir>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingInAir ResponsiblePointer_ActorState_::setActorStateBeingInAir() const
        {
            return Ent::Gen::ActorStateBeingInAir(node->setUnionType("ActorStateBeingInAir"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingOnGround> ResponsiblePointer_ActorState_::ActorStateBeingOnGround() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingOnGround") != 0? std::optional<Ent::Gen::ActorStateBeingOnGround>{}: std::optional<Ent::Gen::ActorStateBeingOnGround>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingOnGround ResponsiblePointer_ActorState_::setActorStateBeingOnGround() const
        {
            return Ent::Gen::ActorStateBeingOnGround(node->setUnionType("ActorStateBeingOnGround"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingOnGroundFromImmersed> ResponsiblePointer_ActorState_::ActorStateBeingOnGroundFromImmersed() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingOnGroundFromImmersed") != 0? std::optional<Ent::Gen::ActorStateBeingOnGroundFromImmersed>{}: std::optional<Ent::Gen::ActorStateBeingOnGroundFromImmersed>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingOnGroundFromImmersed ResponsiblePointer_ActorState_::setActorStateBeingOnGroundFromImmersed() const
        {
            return Ent::Gen::ActorStateBeingOnGroundFromImmersed(node->setUnionType("ActorStateBeingOnGroundFromImmersed"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingOnMount> ResponsiblePointer_ActorState_::ActorStateBeingOnMount() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingOnMount") != 0? std::optional<Ent::Gen::ActorStateBeingOnMount>{}: std::optional<Ent::Gen::ActorStateBeingOnMount>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingOnMount ResponsiblePointer_ActorState_::setActorStateBeingOnMount() const
        {
            return Ent::Gen::ActorStateBeingOnMount(node->setUnionType("ActorStateBeingOnMount"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingOnPossessedGPE> ResponsiblePointer_ActorState_::ActorStateBeingOnPossessedGPE() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingOnPossessedGPE") != 0? std::optional<Ent::Gen::ActorStateBeingOnPossessedGPE>{}: std::optional<Ent::Gen::ActorStateBeingOnPossessedGPE>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingOnPossessedGPE ResponsiblePointer_ActorState_::setActorStateBeingOnPossessedGPE() const
        {
            return Ent::Gen::ActorStateBeingOnPossessedGPE(node->setUnionType("ActorStateBeingOnPossessedGPE"));
        }
        inline std::optional<Ent::Gen::ActorStateBeingRided> ResponsiblePointer_ActorState_::ActorStateBeingRided() const
        {
            return strcmp(node->getUnionType(), "ActorStateBeingRided") != 0? std::optional<Ent::Gen::ActorStateBeingRided>{}: std::optional<Ent::Gen::ActorStateBeingRided>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBeingRided ResponsiblePointer_ActorState_::setActorStateBeingRided() const
        {
            return Ent::Gen::ActorStateBeingRided(node->setUnionType("ActorStateBeingRided"));
        }
        inline std::optional<Ent::Gen::ActorStateBendingConstraint> ResponsiblePointer_ActorState_::ActorStateBendingConstraint() const
        {
            return strcmp(node->getUnionType(), "ActorStateBendingConstraint") != 0? std::optional<Ent::Gen::ActorStateBendingConstraint>{}: std::optional<Ent::Gen::ActorStateBendingConstraint>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBendingConstraint ResponsiblePointer_ActorState_::setActorStateBendingConstraint() const
        {
            return Ent::Gen::ActorStateBendingConstraint(node->setUnionType("ActorStateBendingConstraint"));
        }
        inline std::optional<Ent::Gen::ActorStateBendingTree> ResponsiblePointer_ActorState_::ActorStateBendingTree() const
        {
            return strcmp(node->getUnionType(), "ActorStateBendingTree") != 0? std::optional<Ent::Gen::ActorStateBendingTree>{}: std::optional<Ent::Gen::ActorStateBendingTree>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBendingTree ResponsiblePointer_ActorState_::setActorStateBendingTree() const
        {
            return Ent::Gen::ActorStateBendingTree(node->setUnionType("ActorStateBendingTree"));
        }
        inline std::optional<Ent::Gen::ActorStateBiteEntityLiving> ResponsiblePointer_ActorState_::ActorStateBiteEntityLiving() const
        {
            return strcmp(node->getUnionType(), "ActorStateBiteEntityLiving") != 0? std::optional<Ent::Gen::ActorStateBiteEntityLiving>{}: std::optional<Ent::Gen::ActorStateBiteEntityLiving>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBiteEntityLiving ResponsiblePointer_ActorState_::setActorStateBiteEntityLiving() const
        {
            return Ent::Gen::ActorStateBiteEntityLiving(node->setUnionType("ActorStateBiteEntityLiving"));
        }
        inline std::optional<Ent::Gen::ActorStateBiteJumpOut> ResponsiblePointer_ActorState_::ActorStateBiteJumpOut() const
        {
            return strcmp(node->getUnionType(), "ActorStateBiteJumpOut") != 0? std::optional<Ent::Gen::ActorStateBiteJumpOut>{}: std::optional<Ent::Gen::ActorStateBiteJumpOut>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBiteJumpOut ResponsiblePointer_ActorState_::setActorStateBiteJumpOut() const
        {
            return Ent::Gen::ActorStateBiteJumpOut(node->setUnionType("ActorStateBiteJumpOut"));
        }
        inline std::optional<Ent::Gen::ActorStateBittenRegenerated> ResponsiblePointer_ActorState_::ActorStateBittenRegenerated() const
        {
            return strcmp(node->getUnionType(), "ActorStateBittenRegenerated") != 0? std::optional<Ent::Gen::ActorStateBittenRegenerated>{}: std::optional<Ent::Gen::ActorStateBittenRegenerated>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBittenRegenerated ResponsiblePointer_ActorState_::setActorStateBittenRegenerated() const
        {
            return Ent::Gen::ActorStateBittenRegenerated(node->setUnionType("ActorStateBittenRegenerated"));
        }
        inline std::optional<Ent::Gen::ActorStateBittenShaked> ResponsiblePointer_ActorState_::ActorStateBittenShaked() const
        {
            return strcmp(node->getUnionType(), "ActorStateBittenShaked") != 0? std::optional<Ent::Gen::ActorStateBittenShaked>{}: std::optional<Ent::Gen::ActorStateBittenShaked>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBittenShaked ResponsiblePointer_ActorState_::setActorStateBittenShaked() const
        {
            return Ent::Gen::ActorStateBittenShaked(node->setUnionType("ActorStateBittenShaked"));
        }
        inline std::optional<Ent::Gen::ActorStateBuried> ResponsiblePointer_ActorState_::ActorStateBuried() const
        {
            return strcmp(node->getUnionType(), "ActorStateBuried") != 0? std::optional<Ent::Gen::ActorStateBuried>{}: std::optional<Ent::Gen::ActorStateBuried>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateBuried ResponsiblePointer_ActorState_::setActorStateBuried() const
        {
            return Ent::Gen::ActorStateBuried(node->setUnionType("ActorStateBuried"));
        }
        inline std::optional<Ent::Gen::ActorStateCallingFollower> ResponsiblePointer_ActorState_::ActorStateCallingFollower() const
        {
            return strcmp(node->getUnionType(), "ActorStateCallingFollower") != 0? std::optional<Ent::Gen::ActorStateCallingFollower>{}: std::optional<Ent::Gen::ActorStateCallingFollower>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateCallingFollower ResponsiblePointer_ActorState_::setActorStateCallingFollower() const
        {
            return Ent::Gen::ActorStateCallingFollower(node->setUnionType("ActorStateCallingFollower"));
        }
        inline std::optional<Ent::Gen::ActorStateCatapulted> ResponsiblePointer_ActorState_::ActorStateCatapulted() const
        {
            return strcmp(node->getUnionType(), "ActorStateCatapulted") != 0? std::optional<Ent::Gen::ActorStateCatapulted>{}: std::optional<Ent::Gen::ActorStateCatapulted>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateCatapulted ResponsiblePointer_ActorState_::setActorStateCatapulted() const
        {
            return Ent::Gen::ActorStateCatapulted(node->setUnionType("ActorStateCatapulted"));
        }
        inline std::optional<Ent::Gen::ActorStateCatapultedLand> ResponsiblePointer_ActorState_::ActorStateCatapultedLand() const
        {
            return strcmp(node->getUnionType(), "ActorStateCatapultedLand") != 0? std::optional<Ent::Gen::ActorStateCatapultedLand>{}: std::optional<Ent::Gen::ActorStateCatapultedLand>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateCatapultedLand ResponsiblePointer_ActorState_::setActorStateCatapultedLand() const
        {
            return Ent::Gen::ActorStateCatapultedLand(node->setUnionType("ActorStateCatapultedLand"));
        }
        inline std::optional<Ent::Gen::ActorStateChangeEnergySide> ResponsiblePointer_ActorState_::ActorStateChangeEnergySide() const
        {
            return strcmp(node->getUnionType(), "ActorStateChangeEnergySide") != 0? std::optional<Ent::Gen::ActorStateChangeEnergySide>{}: std::optional<Ent::Gen::ActorStateChangeEnergySide>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateChangeEnergySide ResponsiblePointer_ActorState_::setActorStateChangeEnergySide() const
        {
            return Ent::Gen::ActorStateChangeEnergySide(node->setUnionType("ActorStateChangeEnergySide"));
        }
        inline std::optional<Ent::Gen::ActorStateChargeSpendLife> ResponsiblePointer_ActorState_::ActorStateChargeSpendLife() const
        {
            return strcmp(node->getUnionType(), "ActorStateChargeSpendLife") != 0? std::optional<Ent::Gen::ActorStateChargeSpendLife>{}: std::optional<Ent::Gen::ActorStateChargeSpendLife>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateChargeSpendLife ResponsiblePointer_ActorState_::setActorStateChargeSpendLife() const
        {
            return Ent::Gen::ActorStateChargeSpendLife(node->setUnionType("ActorStateChargeSpendLife"));
        }
        inline std::optional<Ent::Gen::ActorStateConvertWithFlow> ResponsiblePointer_ActorState_::ActorStateConvertWithFlow() const
        {
            return strcmp(node->getUnionType(), "ActorStateConvertWithFlow") != 0? std::optional<Ent::Gen::ActorStateConvertWithFlow>{}: std::optional<Ent::Gen::ActorStateConvertWithFlow>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateConvertWithFlow ResponsiblePointer_ActorState_::setActorStateConvertWithFlow() const
        {
            return Ent::Gen::ActorStateConvertWithFlow(node->setUnionType("ActorStateConvertWithFlow"));
        }
        inline std::optional<Ent::Gen::ActorStateCreature> ResponsiblePointer_ActorState_::ActorStateCreature() const
        {
            return strcmp(node->getUnionType(), "ActorStateCreature") != 0? std::optional<Ent::Gen::ActorStateCreature>{}: std::optional<Ent::Gen::ActorStateCreature>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateCreature ResponsiblePointer_ActorState_::setActorStateCreature() const
        {
            return Ent::Gen::ActorStateCreature(node->setUnionType("ActorStateCreature"));
        }
        inline std::optional<Ent::Gen::ActorStateDead> ResponsiblePointer_ActorState_::ActorStateDead() const
        {
            return strcmp(node->getUnionType(), "ActorStateDead") != 0? std::optional<Ent::Gen::ActorStateDead>{}: std::optional<Ent::Gen::ActorStateDead>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateDead ResponsiblePointer_ActorState_::setActorStateDead() const
        {
            return Ent::Gen::ActorStateDead(node->setUnionType("ActorStateDead"));
        }
        inline std::optional<Ent::Gen::ActorStateDisabled> ResponsiblePointer_ActorState_::ActorStateDisabled() const
        {
            return strcmp(node->getUnionType(), "ActorStateDisabled") != 0? std::optional<Ent::Gen::ActorStateDisabled>{}: std::optional<Ent::Gen::ActorStateDisabled>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateDisabled ResponsiblePointer_ActorState_::setActorStateDisabled() const
        {
            return Ent::Gen::ActorStateDisabled(node->setUnionType("ActorStateDisabled"));
        }
        inline std::optional<Ent::Gen::ActorStateDisabledIn> ResponsiblePointer_ActorState_::ActorStateDisabledIn() const
        {
            return strcmp(node->getUnionType(), "ActorStateDisabledIn") != 0? std::optional<Ent::Gen::ActorStateDisabledIn>{}: std::optional<Ent::Gen::ActorStateDisabledIn>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateDisabledIn ResponsiblePointer_ActorState_::setActorStateDisabledIn() const
        {
            return Ent::Gen::ActorStateDisabledIn(node->setUnionType("ActorStateDisabledIn"));
        }
        inline std::optional<Ent::Gen::ActorStateDisabledOut> ResponsiblePointer_ActorState_::ActorStateDisabledOut() const
        {
            return strcmp(node->getUnionType(), "ActorStateDisabledOut") != 0? std::optional<Ent::Gen::ActorStateDisabledOut>{}: std::optional<Ent::Gen::ActorStateDisabledOut>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateDisabledOut ResponsiblePointer_ActorState_::setActorStateDisabledOut() const
        {
            return Ent::Gen::ActorStateDisabledOut(node->setUnionType("ActorStateDisabledOut"));
        }
        inline std::optional<Ent::Gen::ActorStateDodge3D> ResponsiblePointer_ActorState_::ActorStateDodge3D() const
        {
            return strcmp(node->getUnionType(), "ActorStateDodge3D") != 0? std::optional<Ent::Gen::ActorStateDodge3D>{}: std::optional<Ent::Gen::ActorStateDodge3D>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateDodge3D ResponsiblePointer_ActorState_::setActorStateDodge3D() const
        {
            return Ent::Gen::ActorStateDodge3D(node->setUnionType("ActorStateDodge3D"));
        }
        inline std::optional<Ent::Gen::ActorStateDucking> ResponsiblePointer_ActorState_::ActorStateDucking() const
        {
            return strcmp(node->getUnionType(), "ActorStateDucking") != 0? std::optional<Ent::Gen::ActorStateDucking>{}: std::optional<Ent::Gen::ActorStateDucking>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateDucking ResponsiblePointer_ActorState_::setActorStateDucking() const
        {
            return Ent::Gen::ActorStateDucking(node->setUnionType("ActorStateDucking"));
        }
        inline std::optional<Ent::Gen::ActorStateEnergyShooting> ResponsiblePointer_ActorState_::ActorStateEnergyShooting() const
        {
            return strcmp(node->getUnionType(), "ActorStateEnergyShooting") != 0? std::optional<Ent::Gen::ActorStateEnergyShooting>{}: std::optional<Ent::Gen::ActorStateEnergyShooting>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateEnergyShooting ResponsiblePointer_ActorState_::setActorStateEnergyShooting() const
        {
            return Ent::Gen::ActorStateEnergyShooting(node->setUnionType("ActorStateEnergyShooting"));
        }
        inline std::optional<Ent::Gen::ActorStateExitingFly> ResponsiblePointer_ActorState_::ActorStateExitingFly() const
        {
            return strcmp(node->getUnionType(), "ActorStateExitingFly") != 0? std::optional<Ent::Gen::ActorStateExitingFly>{}: std::optional<Ent::Gen::ActorStateExitingFly>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateExitingFly ResponsiblePointer_ActorState_::setActorStateExitingFly() const
        {
            return Ent::Gen::ActorStateExitingFly(node->setUnionType("ActorStateExitingFly"));
        }
        inline std::optional<Ent::Gen::ActorStateFlockingAttackFlocking> ResponsiblePointer_ActorState_::ActorStateFlockingAttackFlocking() const
        {
            return strcmp(node->getUnionType(), "ActorStateFlockingAttackFlocking") != 0? std::optional<Ent::Gen::ActorStateFlockingAttackFlocking>{}: std::optional<Ent::Gen::ActorStateFlockingAttackFlocking>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateFlockingAttackFlocking ResponsiblePointer_ActorState_::setActorStateFlockingAttackFlocking() const
        {
            return Ent::Gen::ActorStateFlockingAttackFlocking(node->setUnionType("ActorStateFlockingAttackFlocking"));
        }
        inline std::optional<Ent::Gen::ActorStateFlockingChangingParams> ResponsiblePointer_ActorState_::ActorStateFlockingChangingParams() const
        {
            return strcmp(node->getUnionType(), "ActorStateFlockingChangingParams") != 0? std::optional<Ent::Gen::ActorStateFlockingChangingParams>{}: std::optional<Ent::Gen::ActorStateFlockingChangingParams>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateFlockingChangingParams ResponsiblePointer_ActorState_::setActorStateFlockingChangingParams() const
        {
            return Ent::Gen::ActorStateFlockingChangingParams(node->setUnionType("ActorStateFlockingChangingParams"));
        }
        inline std::optional<Ent::Gen::ActorStateFlockingIndividualSpawning> ResponsiblePointer_ActorState_::ActorStateFlockingIndividualSpawning() const
        {
            return strcmp(node->getUnionType(), "ActorStateFlockingIndividualSpawning") != 0? std::optional<Ent::Gen::ActorStateFlockingIndividualSpawning>{}: std::optional<Ent::Gen::ActorStateFlockingIndividualSpawning>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateFlockingIndividualSpawning ResponsiblePointer_ActorState_::setActorStateFlockingIndividualSpawning() const
        {
            return Ent::Gen::ActorStateFlockingIndividualSpawning(node->setUnionType("ActorStateFlockingIndividualSpawning"));
        }
        inline std::optional<Ent::Gen::ActorStateFlockingLiving> ResponsiblePointer_ActorState_::ActorStateFlockingLiving() const
        {
            return strcmp(node->getUnionType(), "ActorStateFlockingLiving") != 0? std::optional<Ent::Gen::ActorStateFlockingLiving>{}: std::optional<Ent::Gen::ActorStateFlockingLiving>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateFlockingLiving ResponsiblePointer_ActorState_::setActorStateFlockingLiving() const
        {
            return Ent::Gen::ActorStateFlockingLiving(node->setUnionType("ActorStateFlockingLiving"));
        }
        inline std::optional<Ent::Gen::ActorStateFlockingRigidbodyBeingActive> ResponsiblePointer_ActorState_::ActorStateFlockingRigidbodyBeingActive() const
        {
            return strcmp(node->getUnionType(), "ActorStateFlockingRigidbodyBeingActive") != 0? std::optional<Ent::Gen::ActorStateFlockingRigidbodyBeingActive>{}: std::optional<Ent::Gen::ActorStateFlockingRigidbodyBeingActive>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateFlockingRigidbodyBeingActive ResponsiblePointer_ActorState_::setActorStateFlockingRigidbodyBeingActive() const
        {
            return Ent::Gen::ActorStateFlockingRigidbodyBeingActive(node->setUnionType("ActorStateFlockingRigidbodyBeingActive"));
        }
        inline std::optional<Ent::Gen::ActorStateFluidSlowDown> ResponsiblePointer_ActorState_::ActorStateFluidSlowDown() const
        {
            return strcmp(node->getUnionType(), "ActorStateFluidSlowDown") != 0? std::optional<Ent::Gen::ActorStateFluidSlowDown>{}: std::optional<Ent::Gen::ActorStateFluidSlowDown>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateFluidSlowDown ResponsiblePointer_ActorState_::setActorStateFluidSlowDown() const
        {
            return Ent::Gen::ActorStateFluidSlowDown(node->setUnionType("ActorStateFluidSlowDown"));
        }
        inline std::optional<Ent::Gen::ActorStateForceAgainstSlope> ResponsiblePointer_ActorState_::ActorStateForceAgainstSlope() const
        {
            return strcmp(node->getUnionType(), "ActorStateForceAgainstSlope") != 0? std::optional<Ent::Gen::ActorStateForceAgainstSlope>{}: std::optional<Ent::Gen::ActorStateForceAgainstSlope>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateForceAgainstSlope ResponsiblePointer_ActorState_::setActorStateForceAgainstSlope() const
        {
            return Ent::Gen::ActorStateForceAgainstSlope(node->setUnionType("ActorStateForceAgainstSlope"));
        }
        inline std::optional<Ent::Gen::ActorStateHasNoBody> ResponsiblePointer_ActorState_::ActorStateHasNoBody() const
        {
            return strcmp(node->getUnionType(), "ActorStateHasNoBody") != 0? std::optional<Ent::Gen::ActorStateHasNoBody>{}: std::optional<Ent::Gen::ActorStateHasNoBody>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateHasNoBody ResponsiblePointer_ActorState_::setActorStateHasNoBody() const
        {
            return Ent::Gen::ActorStateHasNoBody(node->setUnionType("ActorStateHasNoBody"));
        }
        inline std::optional<Ent::Gen::ActorStateHeld> ResponsiblePointer_ActorState_::ActorStateHeld() const
        {
            return strcmp(node->getUnionType(), "ActorStateHeld") != 0? std::optional<Ent::Gen::ActorStateHeld>{}: std::optional<Ent::Gen::ActorStateHeld>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateHeld ResponsiblePointer_ActorState_::setActorStateHeld() const
        {
            return Ent::Gen::ActorStateHeld(node->setUnionType("ActorStateHeld"));
        }
        inline std::optional<Ent::Gen::ActorStateHitEnergyWall> ResponsiblePointer_ActorState_::ActorStateHitEnergyWall() const
        {
            return strcmp(node->getUnionType(), "ActorStateHitEnergyWall") != 0? std::optional<Ent::Gen::ActorStateHitEnergyWall>{}: std::optional<Ent::Gen::ActorStateHitEnergyWall>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateHitEnergyWall ResponsiblePointer_ActorState_::setActorStateHitEnergyWall() const
        {
            return Ent::Gen::ActorStateHitEnergyWall(node->setUnionType("ActorStateHitEnergyWall"));
        }
        inline std::optional<Ent::Gen::ActorStateHoldingItem> ResponsiblePointer_ActorState_::ActorStateHoldingItem() const
        {
            return strcmp(node->getUnionType(), "ActorStateHoldingItem") != 0? std::optional<Ent::Gen::ActorStateHoldingItem>{}: std::optional<Ent::Gen::ActorStateHoldingItem>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateHoldingItem ResponsiblePointer_ActorState_::setActorStateHoldingItem() const
        {
            return Ent::Gen::ActorStateHoldingItem(node->setUnionType("ActorStateHoldingItem"));
        }
        inline std::optional<Ent::Gen::ActorStateIKConstraint> ResponsiblePointer_ActorState_::ActorStateIKConstraint() const
        {
            return strcmp(node->getUnionType(), "ActorStateIKConstraint") != 0? std::optional<Ent::Gen::ActorStateIKConstraint>{}: std::optional<Ent::Gen::ActorStateIKConstraint>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateIKConstraint ResponsiblePointer_ActorState_::setActorStateIKConstraint() const
        {
            return Ent::Gen::ActorStateIKConstraint(node->setUnionType("ActorStateIKConstraint"));
        }
        inline std::optional<Ent::Gen::ActorStateInvincible> ResponsiblePointer_ActorState_::ActorStateInvincible() const
        {
            return strcmp(node->getUnionType(), "ActorStateInvincible") != 0? std::optional<Ent::Gen::ActorStateInvincible>{}: std::optional<Ent::Gen::ActorStateInvincible>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateInvincible ResponsiblePointer_ActorState_::setActorStateInvincible() const
        {
            return Ent::Gen::ActorStateInvincible(node->setUnionType("ActorStateInvincible"));
        }
        inline std::optional<Ent::Gen::ActorStateLeavingLava> ResponsiblePointer_ActorState_::ActorStateLeavingLava() const
        {
            return strcmp(node->getUnionType(), "ActorStateLeavingLava") != 0? std::optional<Ent::Gen::ActorStateLeavingLava>{}: std::optional<Ent::Gen::ActorStateLeavingLava>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateLeavingLava ResponsiblePointer_ActorState_::setActorStateLeavingLava() const
        {
            return Ent::Gen::ActorStateLeavingLava(node->setUnionType("ActorStateLeavingLava"));
        }
        inline std::optional<Ent::Gen::ActorStateLosingOxygen> ResponsiblePointer_ActorState_::ActorStateLosingOxygen() const
        {
            return strcmp(node->getUnionType(), "ActorStateLosingOxygen") != 0? std::optional<Ent::Gen::ActorStateLosingOxygen>{}: std::optional<Ent::Gen::ActorStateLosingOxygen>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateLosingOxygen ResponsiblePointer_ActorState_::setActorStateLosingOxygen() const
        {
            return Ent::Gen::ActorStateLosingOxygen(node->setUnionType("ActorStateLosingOxygen"));
        }
        inline std::optional<Ent::Gen::ActorStateMeetingLava> ResponsiblePointer_ActorState_::ActorStateMeetingLava() const
        {
            return strcmp(node->getUnionType(), "ActorStateMeetingLava") != 0? std::optional<Ent::Gen::ActorStateMeetingLava>{}: std::optional<Ent::Gen::ActorStateMeetingLava>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMeetingLava ResponsiblePointer_ActorState_::setActorStateMeetingLava() const
        {
            return Ent::Gen::ActorStateMeetingLava(node->setUnionType("ActorStateMeetingLava"));
        }
        inline std::optional<Ent::Gen::ActorStateMoveAlongBezier> ResponsiblePointer_ActorState_::ActorStateMoveAlongBezier() const
        {
            return strcmp(node->getUnionType(), "ActorStateMoveAlongBezier") != 0? std::optional<Ent::Gen::ActorStateMoveAlongBezier>{}: std::optional<Ent::Gen::ActorStateMoveAlongBezier>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMoveAlongBezier ResponsiblePointer_ActorState_::setActorStateMoveAlongBezier() const
        {
            return Ent::Gen::ActorStateMoveAlongBezier(node->setUnionType("ActorStateMoveAlongBezier"));
        }
        inline std::optional<Ent::Gen::ActorStateMovingClamber> ResponsiblePointer_ActorState_::ActorStateMovingClamber() const
        {
            return strcmp(node->getUnionType(), "ActorStateMovingClamber") != 0? std::optional<Ent::Gen::ActorStateMovingClamber>{}: std::optional<Ent::Gen::ActorStateMovingClamber>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMovingClamber ResponsiblePointer_ActorState_::setActorStateMovingClamber() const
        {
            return Ent::Gen::ActorStateMovingClamber(node->setUnionType("ActorStateMovingClamber"));
        }
        inline std::optional<Ent::Gen::ActorStateMovingDive> ResponsiblePointer_ActorState_::ActorStateMovingDive() const
        {
            return strcmp(node->getUnionType(), "ActorStateMovingDive") != 0? std::optional<Ent::Gen::ActorStateMovingDive>{}: std::optional<Ent::Gen::ActorStateMovingDive>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMovingDive ResponsiblePointer_ActorState_::setActorStateMovingDive() const
        {
            return Ent::Gen::ActorStateMovingDive(node->setUnionType("ActorStateMovingDive"));
        }
        inline std::optional<Ent::Gen::ActorStateMovingFall> ResponsiblePointer_ActorState_::ActorStateMovingFall() const
        {
            return strcmp(node->getUnionType(), "ActorStateMovingFall") != 0? std::optional<Ent::Gen::ActorStateMovingFall>{}: std::optional<Ent::Gen::ActorStateMovingFall>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMovingFall ResponsiblePointer_ActorState_::setActorStateMovingFall() const
        {
            return Ent::Gen::ActorStateMovingFall(node->setUnionType("ActorStateMovingFall"));
        }
        inline std::optional<Ent::Gen::ActorStateMovingFly> ResponsiblePointer_ActorState_::ActorStateMovingFly() const
        {
            return strcmp(node->getUnionType(), "ActorStateMovingFly") != 0? std::optional<Ent::Gen::ActorStateMovingFly>{}: std::optional<Ent::Gen::ActorStateMovingFly>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMovingFly ResponsiblePointer_ActorState_::setActorStateMovingFly() const
        {
            return Ent::Gen::ActorStateMovingFly(node->setUnionType("ActorStateMovingFly"));
        }
        inline std::optional<Ent::Gen::ActorStateMovingProne> ResponsiblePointer_ActorState_::ActorStateMovingProne() const
        {
            return strcmp(node->getUnionType(), "ActorStateMovingProne") != 0? std::optional<Ent::Gen::ActorStateMovingProne>{}: std::optional<Ent::Gen::ActorStateMovingProne>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMovingProne ResponsiblePointer_ActorState_::setActorStateMovingProne() const
        {
            return Ent::Gen::ActorStateMovingProne(node->setUnionType("ActorStateMovingProne"));
        }
        inline std::optional<Ent::Gen::ActorStateMovingRide> ResponsiblePointer_ActorState_::ActorStateMovingRide() const
        {
            return strcmp(node->getUnionType(), "ActorStateMovingRide") != 0? std::optional<Ent::Gen::ActorStateMovingRide>{}: std::optional<Ent::Gen::ActorStateMovingRide>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMovingRide ResponsiblePointer_ActorState_::setActorStateMovingRide() const
        {
            return Ent::Gen::ActorStateMovingRide(node->setUnionType("ActorStateMovingRide"));
        }
        inline std::optional<Ent::Gen::ActorStateMovingStandUp> ResponsiblePointer_ActorState_::ActorStateMovingStandUp() const
        {
            return strcmp(node->getUnionType(), "ActorStateMovingStandUp") != 0? std::optional<Ent::Gen::ActorStateMovingStandUp>{}: std::optional<Ent::Gen::ActorStateMovingStandUp>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMovingStandUp ResponsiblePointer_ActorState_::setActorStateMovingStandUp() const
        {
            return Ent::Gen::ActorStateMovingStandUp(node->setUnionType("ActorStateMovingStandUp"));
        }
        inline std::optional<Ent::Gen::ActorStateMovingSwim> ResponsiblePointer_ActorState_::ActorStateMovingSwim() const
        {
            return strcmp(node->getUnionType(), "ActorStateMovingSwim") != 0? std::optional<Ent::Gen::ActorStateMovingSwim>{}: std::optional<Ent::Gen::ActorStateMovingSwim>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateMovingSwim ResponsiblePointer_ActorState_::setActorStateMovingSwim() const
        {
            return Ent::Gen::ActorStateMovingSwim(node->setUnionType("ActorStateMovingSwim"));
        }
        inline std::optional<Ent::Gen::ActorStateNavigationMesh> ResponsiblePointer_ActorState_::ActorStateNavigationMesh() const
        {
            return strcmp(node->getUnionType(), "ActorStateNavigationMesh") != 0? std::optional<Ent::Gen::ActorStateNavigationMesh>{}: std::optional<Ent::Gen::ActorStateNavigationMesh>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateNavigationMesh ResponsiblePointer_ActorState_::setActorStateNavigationMesh() const
        {
            return Ent::Gen::ActorStateNavigationMesh(node->setUnionType("ActorStateNavigationMesh"));
        }
        inline std::optional<Ent::Gen::ActorStatePossessFlocking> ResponsiblePointer_ActorState_::ActorStatePossessFlocking() const
        {
            return strcmp(node->getUnionType(), "ActorStatePossessFlocking") != 0? std::optional<Ent::Gen::ActorStatePossessFlocking>{}: std::optional<Ent::Gen::ActorStatePossessFlocking>(node->getUnionData());
        }
        inline Ent::Gen::ActorStatePossessFlocking ResponsiblePointer_ActorState_::setActorStatePossessFlocking() const
        {
            return Ent::Gen::ActorStatePossessFlocking(node->setUnionType("ActorStatePossessFlocking"));
        }
        inline std::optional<Ent::Gen::ActorStatePossessGPE> ResponsiblePointer_ActorState_::ActorStatePossessGPE() const
        {
            return strcmp(node->getUnionType(), "ActorStatePossessGPE") != 0? std::optional<Ent::Gen::ActorStatePossessGPE>{}: std::optional<Ent::Gen::ActorStatePossessGPE>(node->getUnionData());
        }
        inline Ent::Gen::ActorStatePossessGPE ResponsiblePointer_ActorState_::setActorStatePossessGPE() const
        {
            return Ent::Gen::ActorStatePossessGPE(node->setUnionType("ActorStatePossessGPE"));
        }
        inline std::optional<Ent::Gen::ActorStateReactingLava> ResponsiblePointer_ActorState_::ActorStateReactingLava() const
        {
            return strcmp(node->getUnionType(), "ActorStateReactingLava") != 0? std::optional<Ent::Gen::ActorStateReactingLava>{}: std::optional<Ent::Gen::ActorStateReactingLava>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateReactingLava ResponsiblePointer_ActorState_::setActorStateReactingLava() const
        {
            return Ent::Gen::ActorStateReactingLava(node->setUnionType("ActorStateReactingLava"));
        }
        inline std::optional<Ent::Gen::ActorStateRecover> ResponsiblePointer_ActorState_::ActorStateRecover() const
        {
            return strcmp(node->getUnionType(), "ActorStateRecover") != 0? std::optional<Ent::Gen::ActorStateRecover>{}: std::optional<Ent::Gen::ActorStateRecover>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateRecover ResponsiblePointer_ActorState_::setActorStateRecover() const
        {
            return Ent::Gen::ActorStateRecover(node->setUnionType("ActorStateRecover"));
        }
        inline std::optional<Ent::Gen::ActorStateRequestingHealing> ResponsiblePointer_ActorState_::ActorStateRequestingHealing() const
        {
            return strcmp(node->getUnionType(), "ActorStateRequestingHealing") != 0? std::optional<Ent::Gen::ActorStateRequestingHealing>{}: std::optional<Ent::Gen::ActorStateRequestingHealing>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateRequestingHealing ResponsiblePointer_ActorState_::setActorStateRequestingHealing() const
        {
            return Ent::Gen::ActorStateRequestingHealing(node->setUnionType("ActorStateRequestingHealing"));
        }
        inline std::optional<Ent::Gen::ActorStateRequestingWaiting> ResponsiblePointer_ActorState_::ActorStateRequestingWaiting() const
        {
            return strcmp(node->getUnionType(), "ActorStateRequestingWaiting") != 0? std::optional<Ent::Gen::ActorStateRequestingWaiting>{}: std::optional<Ent::Gen::ActorStateRequestingWaiting>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateRequestingWaiting ResponsiblePointer_ActorState_::setActorStateRequestingWaiting() const
        {
            return Ent::Gen::ActorStateRequestingWaiting(node->setUnionType("ActorStateRequestingWaiting"));
        }
        inline std::optional<Ent::Gen::ActorStateScreaming> ResponsiblePointer_ActorState_::ActorStateScreaming() const
        {
            return strcmp(node->getUnionType(), "ActorStateScreaming") != 0? std::optional<Ent::Gen::ActorStateScreaming>{}: std::optional<Ent::Gen::ActorStateScreaming>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateScreaming ResponsiblePointer_ActorState_::setActorStateScreaming() const
        {
            return Ent::Gen::ActorStateScreaming(node->setUnionType("ActorStateScreaming"));
        }
        inline std::optional<Ent::Gen::ActorStateSendMission> ResponsiblePointer_ActorState_::ActorStateSendMission() const
        {
            return strcmp(node->getUnionType(), "ActorStateSendMission") != 0? std::optional<Ent::Gen::ActorStateSendMission>{}: std::optional<Ent::Gen::ActorStateSendMission>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSendMission ResponsiblePointer_ActorState_::setActorStateSendMission() const
        {
            return Ent::Gen::ActorStateSendMission(node->setUnionType("ActorStateSendMission"));
        }
        inline std::optional<Ent::Gen::ActorStateShamanItemLiving> ResponsiblePointer_ActorState_::ActorStateShamanItemLiving() const
        {
            return strcmp(node->getUnionType(), "ActorStateShamanItemLiving") != 0? std::optional<Ent::Gen::ActorStateShamanItemLiving>{}: std::optional<Ent::Gen::ActorStateShamanItemLiving>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateShamanItemLiving ResponsiblePointer_ActorState_::setActorStateShamanItemLiving() const
        {
            return Ent::Gen::ActorStateShamanItemLiving(node->setUnionType("ActorStateShamanItemLiving"));
        }
        inline std::optional<Ent::Gen::ActorStateShamanItemPartState> ResponsiblePointer_ActorState_::ActorStateShamanItemPartState() const
        {
            return strcmp(node->getUnionType(), "ActorStateShamanItemPartState") != 0? std::optional<Ent::Gen::ActorStateShamanItemPartState>{}: std::optional<Ent::Gen::ActorStateShamanItemPartState>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateShamanItemPartState ResponsiblePointer_ActorState_::setActorStateShamanItemPartState() const
        {
            return Ent::Gen::ActorStateShamanItemPartState(node->setUnionType("ActorStateShamanItemPartState"));
        }
        inline std::optional<Ent::Gen::ActorStateShapeshift> ResponsiblePointer_ActorState_::ActorStateShapeshift() const
        {
            return strcmp(node->getUnionType(), "ActorStateShapeshift") != 0? std::optional<Ent::Gen::ActorStateShapeshift>{}: std::optional<Ent::Gen::ActorStateShapeshift>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateShapeshift ResponsiblePointer_ActorState_::setActorStateShapeshift() const
        {
            return Ent::Gen::ActorStateShapeshift(node->setUnionType("ActorStateShapeshift"));
        }
        inline std::optional<Ent::Gen::ActorStateShootingFlow> ResponsiblePointer_ActorState_::ActorStateShootingFlow() const
        {
            return strcmp(node->getUnionType(), "ActorStateShootingFlow") != 0? std::optional<Ent::Gen::ActorStateShootingFlow>{}: std::optional<Ent::Gen::ActorStateShootingFlow>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateShootingFlow ResponsiblePointer_ActorState_::setActorStateShootingFlow() const
        {
            return Ent::Gen::ActorStateShootingFlow(node->setUnionType("ActorStateShootingFlow"));
        }
        inline std::optional<Ent::Gen::ActorStateSink> ResponsiblePointer_ActorState_::ActorStateSink() const
        {
            return strcmp(node->getUnionType(), "ActorStateSink") != 0? std::optional<Ent::Gen::ActorStateSink>{}: std::optional<Ent::Gen::ActorStateSink>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSink ResponsiblePointer_ActorState_::setActorStateSink() const
        {
            return Ent::Gen::ActorStateSink(node->setUnionType("ActorStateSink"));
        }
        inline std::optional<Ent::Gen::ActorStateSkeletonPartPickUpRequest> ResponsiblePointer_ActorState_::ActorStateSkeletonPartPickUpRequest() const
        {
            return strcmp(node->getUnionType(), "ActorStateSkeletonPartPickUpRequest") != 0? std::optional<Ent::Gen::ActorStateSkeletonPartPickUpRequest>{}: std::optional<Ent::Gen::ActorStateSkeletonPartPickUpRequest>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSkeletonPartPickUpRequest ResponsiblePointer_ActorState_::setActorStateSkeletonPartPickUpRequest() const
        {
            return Ent::Gen::ActorStateSkeletonPartPickUpRequest(node->setUnionType("ActorStateSkeletonPartPickUpRequest"));
        }
        inline std::optional<Ent::Gen::ActorStateSkeletonPartPickUpState> ResponsiblePointer_ActorState_::ActorStateSkeletonPartPickUpState() const
        {
            return strcmp(node->getUnionType(), "ActorStateSkeletonPartPickUpState") != 0? std::optional<Ent::Gen::ActorStateSkeletonPartPickUpState>{}: std::optional<Ent::Gen::ActorStateSkeletonPartPickUpState>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSkeletonPartPickUpState ResponsiblePointer_ActorState_::setActorStateSkeletonPartPickUpState() const
        {
            return Ent::Gen::ActorStateSkeletonPartPickUpState(node->setUnionType("ActorStateSkeletonPartPickUpState"));
        }
        inline std::optional<Ent::Gen::ActorStateSleeping> ResponsiblePointer_ActorState_::ActorStateSleeping() const
        {
            return strcmp(node->getUnionType(), "ActorStateSleeping") != 0? std::optional<Ent::Gen::ActorStateSleeping>{}: std::optional<Ent::Gen::ActorStateSleeping>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSleeping ResponsiblePointer_ActorState_::setActorStateSleeping() const
        {
            return Ent::Gen::ActorStateSleeping(node->setUnionType("ActorStateSleeping"));
        }
        inline std::optional<Ent::Gen::ActorStateSlope> ResponsiblePointer_ActorState_::ActorStateSlope() const
        {
            return strcmp(node->getUnionType(), "ActorStateSlope") != 0? std::optional<Ent::Gen::ActorStateSlope>{}: std::optional<Ent::Gen::ActorStateSlope>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSlope ResponsiblePointer_ActorState_::setActorStateSlope() const
        {
            return Ent::Gen::ActorStateSlope(node->setUnionType("ActorStateSlope"));
        }
        inline std::optional<Ent::Gen::ActorStateSoulRespawn> ResponsiblePointer_ActorState_::ActorStateSoulRespawn() const
        {
            return strcmp(node->getUnionType(), "ActorStateSoulRespawn") != 0? std::optional<Ent::Gen::ActorStateSoulRespawn>{}: std::optional<Ent::Gen::ActorStateSoulRespawn>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSoulRespawn ResponsiblePointer_ActorState_::setActorStateSoulRespawn() const
        {
            return Ent::Gen::ActorStateSoulRespawn(node->setUnionType("ActorStateSoulRespawn"));
        }
        inline std::optional<Ent::Gen::ActorStateSoulWaitingToRespawn> ResponsiblePointer_ActorState_::ActorStateSoulWaitingToRespawn() const
        {
            return strcmp(node->getUnionType(), "ActorStateSoulWaitingToRespawn") != 0? std::optional<Ent::Gen::ActorStateSoulWaitingToRespawn>{}: std::optional<Ent::Gen::ActorStateSoulWaitingToRespawn>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSoulWaitingToRespawn ResponsiblePointer_ActorState_::setActorStateSoulWaitingToRespawn() const
        {
            return Ent::Gen::ActorStateSoulWaitingToRespawn(node->setUnionType("ActorStateSoulWaitingToRespawn"));
        }
        inline std::optional<Ent::Gen::ActorStateSpeedMultiplier> ResponsiblePointer_ActorState_::ActorStateSpeedMultiplier() const
        {
            return strcmp(node->getUnionType(), "ActorStateSpeedMultiplier") != 0? std::optional<Ent::Gen::ActorStateSpeedMultiplier>{}: std::optional<Ent::Gen::ActorStateSpeedMultiplier>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateSpeedMultiplier ResponsiblePointer_ActorState_::setActorStateSpeedMultiplier() const
        {
            return Ent::Gen::ActorStateSpeedMultiplier(node->setUnionType("ActorStateSpeedMultiplier"));
        }
        inline std::optional<Ent::Gen::ActorStateStopAttitudeAggressive> ResponsiblePointer_ActorState_::ActorStateStopAttitudeAggressive() const
        {
            return strcmp(node->getUnionType(), "ActorStateStopAttitudeAggressive") != 0? std::optional<Ent::Gen::ActorStateStopAttitudeAggressive>{}: std::optional<Ent::Gen::ActorStateStopAttitudeAggressive>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateStopAttitudeAggressive ResponsiblePointer_ActorState_::setActorStateStopAttitudeAggressive() const
        {
            return Ent::Gen::ActorStateStopAttitudeAggressive(node->setUnionType("ActorStateStopAttitudeAggressive"));
        }
        inline std::optional<Ent::Gen::ActorStateTaunting> ResponsiblePointer_ActorState_::ActorStateTaunting() const
        {
            return strcmp(node->getUnionType(), "ActorStateTaunting") != 0? std::optional<Ent::Gen::ActorStateTaunting>{}: std::optional<Ent::Gen::ActorStateTaunting>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateTaunting ResponsiblePointer_ActorState_::setActorStateTaunting() const
        {
            return Ent::Gen::ActorStateTaunting(node->setUnionType("ActorStateTaunting"));
        }
        inline std::optional<Ent::Gen::ActorStateTeleport> ResponsiblePointer_ActorState_::ActorStateTeleport() const
        {
            return strcmp(node->getUnionType(), "ActorStateTeleport") != 0? std::optional<Ent::Gen::ActorStateTeleport>{}: std::optional<Ent::Gen::ActorStateTeleport>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateTeleport ResponsiblePointer_ActorState_::setActorStateTeleport() const
        {
            return Ent::Gen::ActorStateTeleport(node->setUnionType("ActorStateTeleport"));
        }
        inline std::optional<Ent::Gen::ActorStateTeleportToTarget> ResponsiblePointer_ActorState_::ActorStateTeleportToTarget() const
        {
            return strcmp(node->getUnionType(), "ActorStateTeleportToTarget") != 0? std::optional<Ent::Gen::ActorStateTeleportToTarget>{}: std::optional<Ent::Gen::ActorStateTeleportToTarget>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateTeleportToTarget ResponsiblePointer_ActorState_::setActorStateTeleportToTarget() const
        {
            return Ent::Gen::ActorStateTeleportToTarget(node->setUnionType("ActorStateTeleportToTarget"));
        }
        inline std::optional<Ent::Gen::ActorStateTeleportWhileMoving> ResponsiblePointer_ActorState_::ActorStateTeleportWhileMoving() const
        {
            return strcmp(node->getUnionType(), "ActorStateTeleportWhileMoving") != 0? std::optional<Ent::Gen::ActorStateTeleportWhileMoving>{}: std::optional<Ent::Gen::ActorStateTeleportWhileMoving>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateTeleportWhileMoving ResponsiblePointer_ActorState_::setActorStateTeleportWhileMoving() const
        {
            return Ent::Gen::ActorStateTeleportWhileMoving(node->setUnionType("ActorStateTeleportWhileMoving"));
        }
        inline std::optional<Ent::Gen::ActorStateTryEquipShamanStaff> ResponsiblePointer_ActorState_::ActorStateTryEquipShamanStaff() const
        {
            return strcmp(node->getUnionType(), "ActorStateTryEquipShamanStaff") != 0? std::optional<Ent::Gen::ActorStateTryEquipShamanStaff>{}: std::optional<Ent::Gen::ActorStateTryEquipShamanStaff>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateTryEquipShamanStaff ResponsiblePointer_ActorState_::setActorStateTryEquipShamanStaff() const
        {
            return Ent::Gen::ActorStateTryEquipShamanStaff(node->setUnionType("ActorStateTryEquipShamanStaff"));
        }
        inline std::optional<Ent::Gen::ActorStateTryUpgradeShamanStaff> ResponsiblePointer_ActorState_::ActorStateTryUpgradeShamanStaff() const
        {
            return strcmp(node->getUnionType(), "ActorStateTryUpgradeShamanStaff") != 0? std::optional<Ent::Gen::ActorStateTryUpgradeShamanStaff>{}: std::optional<Ent::Gen::ActorStateTryUpgradeShamanStaff>(node->getUnionData());
        }
        inline Ent::Gen::ActorStateTryUpgradeShamanStaff ResponsiblePointer_ActorState_::setActorStateTryUpgradeShamanStaff() const
        {
            return Ent::Gen::ActorStateTryUpgradeShamanStaff(node->setUnionType("ActorStateTryUpgradeShamanStaff"));
        }
        inline std::optional<Ent::Gen::EntityStateAboutToBeHatched> ResponsiblePointer_ActorState_::EntityStateAboutToBeHatched() const
        {
            return strcmp(node->getUnionType(), "EntityStateAboutToBeHatched") != 0? std::optional<Ent::Gen::EntityStateAboutToBeHatched>{}: std::optional<Ent::Gen::EntityStateAboutToBeHatched>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateAboutToBeHatched ResponsiblePointer_ActorState_::setEntityStateAboutToBeHatched() const
        {
            return Ent::Gen::EntityStateAboutToBeHatched(node->setUnionType("EntityStateAboutToBeHatched"));
        }
        inline std::optional<Ent::Gen::EntityStateAerialJump> ResponsiblePointer_ActorState_::EntityStateAerialJump() const
        {
            return strcmp(node->getUnionType(), "EntityStateAerialJump") != 0? std::optional<Ent::Gen::EntityStateAerialJump>{}: std::optional<Ent::Gen::EntityStateAerialJump>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateAerialJump ResponsiblePointer_ActorState_::setEntityStateAerialJump() const
        {
            return Ent::Gen::EntityStateAerialJump(node->setUnionType("EntityStateAerialJump"));
        }
        inline std::optional<Ent::Gen::EntityStateAimAt> ResponsiblePointer_ActorState_::EntityStateAimAt() const
        {
            return strcmp(node->getUnionType(), "EntityStateAimAt") != 0? std::optional<Ent::Gen::EntityStateAimAt>{}: std::optional<Ent::Gen::EntityStateAimAt>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateAimAt ResponsiblePointer_ActorState_::setEntityStateAimAt() const
        {
            return Ent::Gen::EntityStateAimAt(node->setUnionType("EntityStateAimAt"));
        }
        inline std::optional<Ent::Gen::EntityStateAirControl> ResponsiblePointer_ActorState_::EntityStateAirControl() const
        {
            return strcmp(node->getUnionType(), "EntityStateAirControl") != 0? std::optional<Ent::Gen::EntityStateAirControl>{}: std::optional<Ent::Gen::EntityStateAirControl>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateAirControl ResponsiblePointer_ActorState_::setEntityStateAirControl() const
        {
            return Ent::Gen::EntityStateAirControl(node->setUnionType("EntityStateAirControl"));
        }
        inline std::optional<Ent::Gen::EntityStateApplyExtraLife> ResponsiblePointer_ActorState_::EntityStateApplyExtraLife() const
        {
            return strcmp(node->getUnionType(), "EntityStateApplyExtraLife") != 0? std::optional<Ent::Gen::EntityStateApplyExtraLife>{}: std::optional<Ent::Gen::EntityStateApplyExtraLife>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateApplyExtraLife ResponsiblePointer_ActorState_::setEntityStateApplyExtraLife() const
        {
            return Ent::Gen::EntityStateApplyExtraLife(node->setUnionType("EntityStateApplyExtraLife"));
        }
        inline std::optional<Ent::Gen::EntityStateAskStaffGuide> ResponsiblePointer_ActorState_::EntityStateAskStaffGuide() const
        {
            return strcmp(node->getUnionType(), "EntityStateAskStaffGuide") != 0? std::optional<Ent::Gen::EntityStateAskStaffGuide>{}: std::optional<Ent::Gen::EntityStateAskStaffGuide>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateAskStaffGuide ResponsiblePointer_ActorState_::setEntityStateAskStaffGuide() const
        {
            return Ent::Gen::EntityStateAskStaffGuide(node->setUnionType("EntityStateAskStaffGuide"));
        }
        inline std::optional<Ent::Gen::EntityStateAttackDive> ResponsiblePointer_ActorState_::EntityStateAttackDive() const
        {
            return strcmp(node->getUnionType(), "EntityStateAttackDive") != 0? std::optional<Ent::Gen::EntityStateAttackDive>{}: std::optional<Ent::Gen::EntityStateAttackDive>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateAttackDive ResponsiblePointer_ActorState_::setEntityStateAttackDive() const
        {
            return Ent::Gen::EntityStateAttackDive(node->setUnionType("EntityStateAttackDive"));
        }
        inline std::optional<Ent::Gen::EntityStateAttitudeGroggy> ResponsiblePointer_ActorState_::EntityStateAttitudeGroggy() const
        {
            return strcmp(node->getUnionType(), "EntityStateAttitudeGroggy") != 0? std::optional<Ent::Gen::EntityStateAttitudeGroggy>{}: std::optional<Ent::Gen::EntityStateAttitudeGroggy>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateAttitudeGroggy ResponsiblePointer_ActorState_::setEntityStateAttitudeGroggy() const
        {
            return Ent::Gen::EntityStateAttitudeGroggy(node->setUnionType("EntityStateAttitudeGroggy"));
        }
        inline std::optional<Ent::Gen::EntityStateBackwardDodge> ResponsiblePointer_ActorState_::EntityStateBackwardDodge() const
        {
            return strcmp(node->getUnionType(), "EntityStateBackwardDodge") != 0? std::optional<Ent::Gen::EntityStateBackwardDodge>{}: std::optional<Ent::Gen::EntityStateBackwardDodge>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBackwardDodge ResponsiblePointer_ActorState_::setEntityStateBackwardDodge() const
        {
            return Ent::Gen::EntityStateBackwardDodge(node->setUnionType("EntityStateBackwardDodge"));
        }
        inline std::optional<Ent::Gen::EntityStateBackwardLand> ResponsiblePointer_ActorState_::EntityStateBackwardLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateBackwardLand") != 0? std::optional<Ent::Gen::EntityStateBackwardLand>{}: std::optional<Ent::Gen::EntityStateBackwardLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBackwardLand ResponsiblePointer_ActorState_::setEntityStateBackwardLand() const
        {
            return Ent::Gen::EntityStateBackwardLand(node->setUnionType("EntityStateBackwardLand"));
        }
        inline std::optional<Ent::Gen::EntityStateBeingBlockedByVine> ResponsiblePointer_ActorState_::EntityStateBeingBlockedByVine() const
        {
            return strcmp(node->getUnionType(), "EntityStateBeingBlockedByVine") != 0? std::optional<Ent::Gen::EntityStateBeingBlockedByVine>{}: std::optional<Ent::Gen::EntityStateBeingBlockedByVine>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBeingBlockedByVine ResponsiblePointer_ActorState_::setEntityStateBeingBlockedByVine() const
        {
            return Ent::Gen::EntityStateBeingBlockedByVine(node->setUnionType("EntityStateBeingBlockedByVine"));
        }
        inline std::optional<Ent::Gen::EntityStateBeingInReeds> ResponsiblePointer_ActorState_::EntityStateBeingInReeds() const
        {
            return strcmp(node->getUnionType(), "EntityStateBeingInReeds") != 0? std::optional<Ent::Gen::EntityStateBeingInReeds>{}: std::optional<Ent::Gen::EntityStateBeingInReeds>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBeingInReeds ResponsiblePointer_ActorState_::setEntityStateBeingInReeds() const
        {
            return Ent::Gen::EntityStateBeingInReeds(node->setUnionType("EntityStateBeingInReeds"));
        }
        inline std::optional<Ent::Gen::EntityStateBeingLinked> ResponsiblePointer_ActorState_::EntityStateBeingLinked() const
        {
            return strcmp(node->getUnionType(), "EntityStateBeingLinked") != 0? std::optional<Ent::Gen::EntityStateBeingLinked>{}: std::optional<Ent::Gen::EntityStateBeingLinked>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBeingLinked ResponsiblePointer_ActorState_::setEntityStateBeingLinked() const
        {
            return Ent::Gen::EntityStateBeingLinked(node->setUnionType("EntityStateBeingLinked"));
        }
        inline std::optional<Ent::Gen::EntityStateBeingOnSlope> ResponsiblePointer_ActorState_::EntityStateBeingOnSlope() const
        {
            return strcmp(node->getUnionType(), "EntityStateBeingOnSlope") != 0? std::optional<Ent::Gen::EntityStateBeingOnSlope>{}: std::optional<Ent::Gen::EntityStateBeingOnSlope>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBeingOnSlope ResponsiblePointer_ActorState_::setEntityStateBeingOnSlope() const
        {
            return Ent::Gen::EntityStateBeingOnSlope(node->setUnionType("EntityStateBeingOnSlope"));
        }
        inline std::optional<Ent::Gen::EntityStateBeingOnSpike> ResponsiblePointer_ActorState_::EntityStateBeingOnSpike() const
        {
            return strcmp(node->getUnionType(), "EntityStateBeingOnSpike") != 0? std::optional<Ent::Gen::EntityStateBeingOnSpike>{}: std::optional<Ent::Gen::EntityStateBeingOnSpike>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBeingOnSpike ResponsiblePointer_ActorState_::setEntityStateBeingOnSpike() const
        {
            return Ent::Gen::EntityStateBeingOnSpike(node->setUnionType("EntityStateBeingOnSpike"));
        }
        inline std::optional<Ent::Gen::EntityStateBite> ResponsiblePointer_ActorState_::EntityStateBite() const
        {
            return strcmp(node->getUnionType(), "EntityStateBite") != 0? std::optional<Ent::Gen::EntityStateBite>{}: std::optional<Ent::Gen::EntityStateBite>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBite ResponsiblePointer_ActorState_::setEntityStateBite() const
        {
            return Ent::Gen::EntityStateBite(node->setUnionType("EntityStateBite"));
        }
        inline std::optional<Ent::Gen::EntityStateBiteAttack> ResponsiblePointer_ActorState_::EntityStateBiteAttack() const
        {
            return strcmp(node->getUnionType(), "EntityStateBiteAttack") != 0? std::optional<Ent::Gen::EntityStateBiteAttack>{}: std::optional<Ent::Gen::EntityStateBiteAttack>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBiteAttack ResponsiblePointer_ActorState_::setEntityStateBiteAttack() const
        {
            return Ent::Gen::EntityStateBiteAttack(node->setUnionType("EntityStateBiteAttack"));
        }
        inline std::optional<Ent::Gen::EntityStateBiteIn> ResponsiblePointer_ActorState_::EntityStateBiteIn() const
        {
            return strcmp(node->getUnionType(), "EntityStateBiteIn") != 0? std::optional<Ent::Gen::EntityStateBiteIn>{}: std::optional<Ent::Gen::EntityStateBiteIn>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBiteIn ResponsiblePointer_ActorState_::setEntityStateBiteIn() const
        {
            return Ent::Gen::EntityStateBiteIn(node->setUnionType("EntityStateBiteIn"));
        }
        inline std::optional<Ent::Gen::EntityStateBiteOut> ResponsiblePointer_ActorState_::EntityStateBiteOut() const
        {
            return strcmp(node->getUnionType(), "EntityStateBiteOut") != 0? std::optional<Ent::Gen::EntityStateBiteOut>{}: std::optional<Ent::Gen::EntityStateBiteOut>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBiteOut ResponsiblePointer_ActorState_::setEntityStateBiteOut() const
        {
            return Ent::Gen::EntityStateBiteOut(node->setUnionType("EntityStateBiteOut"));
        }
        inline std::optional<Ent::Gen::EntityStateBitten> ResponsiblePointer_ActorState_::EntityStateBitten() const
        {
            return strcmp(node->getUnionType(), "EntityStateBitten") != 0? std::optional<Ent::Gen::EntityStateBitten>{}: std::optional<Ent::Gen::EntityStateBitten>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBitten ResponsiblePointer_ActorState_::setEntityStateBitten() const
        {
            return Ent::Gen::EntityStateBitten(node->setUnionType("EntityStateBitten"));
        }
        inline std::optional<Ent::Gen::EntityStateBittenDefense> ResponsiblePointer_ActorState_::EntityStateBittenDefense() const
        {
            return strcmp(node->getUnionType(), "EntityStateBittenDefense") != 0? std::optional<Ent::Gen::EntityStateBittenDefense>{}: std::optional<Ent::Gen::EntityStateBittenDefense>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBittenDefense ResponsiblePointer_ActorState_::setEntityStateBittenDefense() const
        {
            return Ent::Gen::EntityStateBittenDefense(node->setUnionType("EntityStateBittenDefense"));
        }
        inline std::optional<Ent::Gen::EntityStateBoidsHomePos> ResponsiblePointer_ActorState_::EntityStateBoidsHomePos() const
        {
            return strcmp(node->getUnionType(), "EntityStateBoidsHomePos") != 0? std::optional<Ent::Gen::EntityStateBoidsHomePos>{}: std::optional<Ent::Gen::EntityStateBoidsHomePos>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBoidsHomePos ResponsiblePointer_ActorState_::setEntityStateBoidsHomePos() const
        {
            return Ent::Gen::EntityStateBoidsHomePos(node->setUnionType("EntityStateBoidsHomePos"));
        }
        inline std::optional<Ent::Gen::EntityStateBounce> ResponsiblePointer_ActorState_::EntityStateBounce() const
        {
            return strcmp(node->getUnionType(), "EntityStateBounce") != 0? std::optional<Ent::Gen::EntityStateBounce>{}: std::optional<Ent::Gen::EntityStateBounce>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBounce ResponsiblePointer_ActorState_::setEntityStateBounce() const
        {
            return Ent::Gen::EntityStateBounce(node->setUnionType("EntityStateBounce"));
        }
        inline std::optional<Ent::Gen::EntityStateBounceLand> ResponsiblePointer_ActorState_::EntityStateBounceLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateBounceLand") != 0? std::optional<Ent::Gen::EntityStateBounceLand>{}: std::optional<Ent::Gen::EntityStateBounceLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBounceLand ResponsiblePointer_ActorState_::setEntityStateBounceLand() const
        {
            return Ent::Gen::EntityStateBounceLand(node->setUnionType("EntityStateBounceLand"));
        }
        inline std::optional<Ent::Gen::EntityStateBreakableBreaking> ResponsiblePointer_ActorState_::EntityStateBreakableBreaking() const
        {
            return strcmp(node->getUnionType(), "EntityStateBreakableBreaking") != 0? std::optional<Ent::Gen::EntityStateBreakableBreaking>{}: std::optional<Ent::Gen::EntityStateBreakableBreaking>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBreakableBreaking ResponsiblePointer_ActorState_::setEntityStateBreakableBreaking() const
        {
            return Ent::Gen::EntityStateBreakableBreaking(node->setUnionType("EntityStateBreakableBreaking"));
        }
        inline std::optional<Ent::Gen::EntityStateBreakableBroken> ResponsiblePointer_ActorState_::EntityStateBreakableBroken() const
        {
            return strcmp(node->getUnionType(), "EntityStateBreakableBroken") != 0? std::optional<Ent::Gen::EntityStateBreakableBroken>{}: std::optional<Ent::Gen::EntityStateBreakableBroken>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBreakableBroken ResponsiblePointer_ActorState_::setEntityStateBreakableBroken() const
        {
            return Ent::Gen::EntityStateBreakableBroken(node->setUnionType("EntityStateBreakableBroken"));
        }
        inline std::optional<Ent::Gen::EntityStateBreakableEntire> ResponsiblePointer_ActorState_::EntityStateBreakableEntire() const
        {
            return strcmp(node->getUnionType(), "EntityStateBreakableEntire") != 0? std::optional<Ent::Gen::EntityStateBreakableEntire>{}: std::optional<Ent::Gen::EntityStateBreakableEntire>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBreakableEntire ResponsiblePointer_ActorState_::setEntityStateBreakableEntire() const
        {
            return Ent::Gen::EntityStateBreakableEntire(node->setUnionType("EntityStateBreakableEntire"));
        }
        inline std::optional<Ent::Gen::EntityStateBridgeAttached> ResponsiblePointer_ActorState_::EntityStateBridgeAttached() const
        {
            return strcmp(node->getUnionType(), "EntityStateBridgeAttached") != 0? std::optional<Ent::Gen::EntityStateBridgeAttached>{}: std::optional<Ent::Gen::EntityStateBridgeAttached>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBridgeAttached ResponsiblePointer_ActorState_::setEntityStateBridgeAttached() const
        {
            return Ent::Gen::EntityStateBridgeAttached(node->setUnionType("EntityStateBridgeAttached"));
        }
        inline std::optional<Ent::Gen::EntityStateBridgeAttracted> ResponsiblePointer_ActorState_::EntityStateBridgeAttracted() const
        {
            return strcmp(node->getUnionType(), "EntityStateBridgeAttracted") != 0? std::optional<Ent::Gen::EntityStateBridgeAttracted>{}: std::optional<Ent::Gen::EntityStateBridgeAttracted>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBridgeAttracted ResponsiblePointer_ActorState_::setEntityStateBridgeAttracted() const
        {
            return Ent::Gen::EntityStateBridgeAttracted(node->setUnionType("EntityStateBridgeAttracted"));
        }
        inline std::optional<Ent::Gen::EntityStateBridgeBeingControlled> ResponsiblePointer_ActorState_::EntityStateBridgeBeingControlled() const
        {
            return strcmp(node->getUnionType(), "EntityStateBridgeBeingControlled") != 0? std::optional<Ent::Gen::EntityStateBridgeBeingControlled>{}: std::optional<Ent::Gen::EntityStateBridgeBeingControlled>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateBridgeBeingControlled ResponsiblePointer_ActorState_::setEntityStateBridgeBeingControlled() const
        {
            return Ent::Gen::EntityStateBridgeBeingControlled(node->setUnionType("EntityStateBridgeBeingControlled"));
        }
        inline std::optional<Ent::Gen::EntityStateCallAndMountSpiritAnimal> ResponsiblePointer_ActorState_::EntityStateCallAndMountSpiritAnimal() const
        {
            return strcmp(node->getUnionType(), "EntityStateCallAndMountSpiritAnimal") != 0? std::optional<Ent::Gen::EntityStateCallAndMountSpiritAnimal>{}: std::optional<Ent::Gen::EntityStateCallAndMountSpiritAnimal>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateCallAndMountSpiritAnimal ResponsiblePointer_ActorState_::setEntityStateCallAndMountSpiritAnimal() const
        {
            return Ent::Gen::EntityStateCallAndMountSpiritAnimal(node->setUnionType("EntityStateCallAndMountSpiritAnimal"));
        }
        inline std::optional<Ent::Gen::EntityStateCanNotBePerceived> ResponsiblePointer_ActorState_::EntityStateCanNotBePerceived() const
        {
            return strcmp(node->getUnionType(), "EntityStateCanNotBePerceived") != 0? std::optional<Ent::Gen::EntityStateCanNotBePerceived>{}: std::optional<Ent::Gen::EntityStateCanNotBePerceived>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateCanNotBePerceived ResponsiblePointer_ActorState_::setEntityStateCanNotBePerceived() const
        {
            return Ent::Gen::EntityStateCanNotBePerceived(node->setUnionType("EntityStateCanNotBePerceived"));
        }
        inline std::optional<Ent::Gen::EntityStateChargeMode> ResponsiblePointer_ActorState_::EntityStateChargeMode() const
        {
            return strcmp(node->getUnionType(), "EntityStateChargeMode") != 0? std::optional<Ent::Gen::EntityStateChargeMode>{}: std::optional<Ent::Gen::EntityStateChargeMode>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateChargeMode ResponsiblePointer_ActorState_::setEntityStateChargeMode() const
        {
            return Ent::Gen::EntityStateChargeMode(node->setUnionType("EntityStateChargeMode"));
        }
        inline std::optional<Ent::Gen::EntityStateChargedJump> ResponsiblePointer_ActorState_::EntityStateChargedJump() const
        {
            return strcmp(node->getUnionType(), "EntityStateChargedJump") != 0? std::optional<Ent::Gen::EntityStateChargedJump>{}: std::optional<Ent::Gen::EntityStateChargedJump>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateChargedJump ResponsiblePointer_ActorState_::setEntityStateChargedJump() const
        {
            return Ent::Gen::EntityStateChargedJump(node->setUnionType("EntityStateChargedJump"));
        }
        inline std::optional<Ent::Gen::EntityStateChargingJump> ResponsiblePointer_ActorState_::EntityStateChargingJump() const
        {
            return strcmp(node->getUnionType(), "EntityStateChargingJump") != 0? std::optional<Ent::Gen::EntityStateChargingJump>{}: std::optional<Ent::Gen::EntityStateChargingJump>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateChargingJump ResponsiblePointer_ActorState_::setEntityStateChargingJump() const
        {
            return Ent::Gen::EntityStateChargingJump(node->setUnionType("EntityStateChargingJump"));
        }
        inline std::optional<Ent::Gen::EntityStateCinematicCompleted> ResponsiblePointer_ActorState_::EntityStateCinematicCompleted() const
        {
            return strcmp(node->getUnionType(), "EntityStateCinematicCompleted") != 0? std::optional<Ent::Gen::EntityStateCinematicCompleted>{}: std::optional<Ent::Gen::EntityStateCinematicCompleted>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateCinematicCompleted ResponsiblePointer_ActorState_::setEntityStateCinematicCompleted() const
        {
            return Ent::Gen::EntityStateCinematicCompleted(node->setUnionType("EntityStateCinematicCompleted"));
        }
        inline std::optional<Ent::Gen::EntityStateCinematicReady> ResponsiblePointer_ActorState_::EntityStateCinematicReady() const
        {
            return strcmp(node->getUnionType(), "EntityStateCinematicReady") != 0? std::optional<Ent::Gen::EntityStateCinematicReady>{}: std::optional<Ent::Gen::EntityStateCinematicReady>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateCinematicReady ResponsiblePointer_ActorState_::setEntityStateCinematicReady() const
        {
            return Ent::Gen::EntityStateCinematicReady(node->setUnionType("EntityStateCinematicReady"));
        }
        inline std::optional<Ent::Gen::EntityStateClassicDodge> ResponsiblePointer_ActorState_::EntityStateClassicDodge() const
        {
            return strcmp(node->getUnionType(), "EntityStateClassicDodge") != 0? std::optional<Ent::Gen::EntityStateClassicDodge>{}: std::optional<Ent::Gen::EntityStateClassicDodge>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateClassicDodge ResponsiblePointer_ActorState_::setEntityStateClassicDodge() const
        {
            return Ent::Gen::EntityStateClassicDodge(node->setUnionType("EntityStateClassicDodge"));
        }
        inline std::optional<Ent::Gen::EntityStateClassicLand> ResponsiblePointer_ActorState_::EntityStateClassicLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateClassicLand") != 0? std::optional<Ent::Gen::EntityStateClassicLand>{}: std::optional<Ent::Gen::EntityStateClassicLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateClassicLand ResponsiblePointer_ActorState_::setEntityStateClassicLand() const
        {
            return Ent::Gen::EntityStateClassicLand(node->setUnionType("EntityStateClassicLand"));
        }
        inline std::optional<Ent::Gen::EntityStateClimbWaterfall> ResponsiblePointer_ActorState_::EntityStateClimbWaterfall() const
        {
            return strcmp(node->getUnionType(), "EntityStateClimbWaterfall") != 0? std::optional<Ent::Gen::EntityStateClimbWaterfall>{}: std::optional<Ent::Gen::EntityStateClimbWaterfall>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateClimbWaterfall ResponsiblePointer_ActorState_::setEntityStateClimbWaterfall() const
        {
            return Ent::Gen::EntityStateClimbWaterfall(node->setUnionType("EntityStateClimbWaterfall"));
        }
        inline std::optional<Ent::Gen::EntityStateClimbWaterfallImpulse> ResponsiblePointer_ActorState_::EntityStateClimbWaterfallImpulse() const
        {
            return strcmp(node->getUnionType(), "EntityStateClimbWaterfallImpulse") != 0? std::optional<Ent::Gen::EntityStateClimbWaterfallImpulse>{}: std::optional<Ent::Gen::EntityStateClimbWaterfallImpulse>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateClimbWaterfallImpulse ResponsiblePointer_ActorState_::setEntityStateClimbWaterfallImpulse() const
        {
            return Ent::Gen::EntityStateClimbWaterfallImpulse(node->setUnionType("EntityStateClimbWaterfallImpulse"));
        }
        inline std::optional<Ent::Gen::EntityStateCollectVertebrae> ResponsiblePointer_ActorState_::EntityStateCollectVertebrae() const
        {
            return strcmp(node->getUnionType(), "EntityStateCollectVertebrae") != 0? std::optional<Ent::Gen::EntityStateCollectVertebrae>{}: std::optional<Ent::Gen::EntityStateCollectVertebrae>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateCollectVertebrae ResponsiblePointer_ActorState_::setEntityStateCollectVertebrae() const
        {
            return Ent::Gen::EntityStateCollectVertebrae(node->setUnionType("EntityStateCollectVertebrae"));
        }
        inline std::optional<Ent::Gen::EntityStateCombat> ResponsiblePointer_ActorState_::EntityStateCombat() const
        {
            return strcmp(node->getUnionType(), "EntityStateCombat") != 0? std::optional<Ent::Gen::EntityStateCombat>{}: std::optional<Ent::Gen::EntityStateCombat>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateCombat ResponsiblePointer_ActorState_::setEntityStateCombat() const
        {
            return Ent::Gen::EntityStateCombat(node->setUnionType("EntityStateCombat"));
        }
        inline std::optional<Ent::Gen::EntityStateConstrainedInput> ResponsiblePointer_ActorState_::EntityStateConstrainedInput() const
        {
            return strcmp(node->getUnionType(), "EntityStateConstrainedInput") != 0? std::optional<Ent::Gen::EntityStateConstrainedInput>{}: std::optional<Ent::Gen::EntityStateConstrainedInput>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateConstrainedInput ResponsiblePointer_ActorState_::setEntityStateConstrainedInput() const
        {
            return Ent::Gen::EntityStateConstrainedInput(node->setUnionType("EntityStateConstrainedInput"));
        }
        inline std::optional<Ent::Gen::EntityStateConstrainedMove> ResponsiblePointer_ActorState_::EntityStateConstrainedMove() const
        {
            return strcmp(node->getUnionType(), "EntityStateConstrainedMove") != 0? std::optional<Ent::Gen::EntityStateConstrainedMove>{}: std::optional<Ent::Gen::EntityStateConstrainedMove>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateConstrainedMove ResponsiblePointer_ActorState_::setEntityStateConstrainedMove() const
        {
            return Ent::Gen::EntityStateConstrainedMove(node->setUnionType("EntityStateConstrainedMove"));
        }
        inline std::optional<Ent::Gen::EntityStateControlGPE> ResponsiblePointer_ActorState_::EntityStateControlGPE() const
        {
            return strcmp(node->getUnionType(), "EntityStateControlGPE") != 0? std::optional<Ent::Gen::EntityStateControlGPE>{}: std::optional<Ent::Gen::EntityStateControlGPE>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateControlGPE ResponsiblePointer_ActorState_::setEntityStateControlGPE() const
        {
            return Ent::Gen::EntityStateControlGPE(node->setUnionType("EntityStateControlGPE"));
        }
        inline std::optional<Ent::Gen::EntityStateCreatureHatching> ResponsiblePointer_ActorState_::EntityStateCreatureHatching() const
        {
            return strcmp(node->getUnionType(), "EntityStateCreatureHatching") != 0? std::optional<Ent::Gen::EntityStateCreatureHatching>{}: std::optional<Ent::Gen::EntityStateCreatureHatching>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateCreatureHatching ResponsiblePointer_ActorState_::setEntityStateCreatureHatching() const
        {
            return Ent::Gen::EntityStateCreatureHatching(node->setUnionType("EntityStateCreatureHatching"));
        }
        inline std::optional<Ent::Gen::EntityStateCreatureProfile> ResponsiblePointer_ActorState_::EntityStateCreatureProfile() const
        {
            return strcmp(node->getUnionType(), "EntityStateCreatureProfile") != 0? std::optional<Ent::Gen::EntityStateCreatureProfile>{}: std::optional<Ent::Gen::EntityStateCreatureProfile>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateCreatureProfile ResponsiblePointer_ActorState_::setEntityStateCreatureProfile() const
        {
            return Ent::Gen::EntityStateCreatureProfile(node->setUnionType("EntityStateCreatureProfile"));
        }
        inline std::optional<Ent::Gen::EntityStateDamageLand> ResponsiblePointer_ActorState_::EntityStateDamageLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateDamageLand") != 0? std::optional<Ent::Gen::EntityStateDamageLand>{}: std::optional<Ent::Gen::EntityStateDamageLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateDamageLand ResponsiblePointer_ActorState_::setEntityStateDamageLand() const
        {
            return Ent::Gen::EntityStateDamageLand(node->setUnionType("EntityStateDamageLand"));
        }
        inline std::optional<Ent::Gen::EntityStateDeathLand> ResponsiblePointer_ActorState_::EntityStateDeathLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateDeathLand") != 0? std::optional<Ent::Gen::EntityStateDeathLand>{}: std::optional<Ent::Gen::EntityStateDeathLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateDeathLand ResponsiblePointer_ActorState_::setEntityStateDeathLand() const
        {
            return Ent::Gen::EntityStateDeathLand(node->setUnionType("EntityStateDeathLand"));
        }
        inline std::optional<Ent::Gen::EntityStateDisablePerceptionRequest> ResponsiblePointer_ActorState_::EntityStateDisablePerceptionRequest() const
        {
            return strcmp(node->getUnionType(), "EntityStateDisablePerceptionRequest") != 0? std::optional<Ent::Gen::EntityStateDisablePerceptionRequest>{}: std::optional<Ent::Gen::EntityStateDisablePerceptionRequest>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateDisablePerceptionRequest ResponsiblePointer_ActorState_::setEntityStateDisablePerceptionRequest() const
        {
            return Ent::Gen::EntityStateDisablePerceptionRequest(node->setUnionType("EntityStateDisablePerceptionRequest"));
        }
        inline std::optional<Ent::Gen::EntityStateDisabledVertebrae> ResponsiblePointer_ActorState_::EntityStateDisabledVertebrae() const
        {
            return strcmp(node->getUnionType(), "EntityStateDisabledVertebrae") != 0? std::optional<Ent::Gen::EntityStateDisabledVertebrae>{}: std::optional<Ent::Gen::EntityStateDisabledVertebrae>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateDisabledVertebrae ResponsiblePointer_ActorState_::setEntityStateDisabledVertebrae() const
        {
            return Ent::Gen::EntityStateDisabledVertebrae(node->setUnionType("EntityStateDisabledVertebrae"));
        }
        inline std::optional<Ent::Gen::EntityStateDisguise> ResponsiblePointer_ActorState_::EntityStateDisguise() const
        {
            return strcmp(node->getUnionType(), "EntityStateDisguise") != 0? std::optional<Ent::Gen::EntityStateDisguise>{}: std::optional<Ent::Gen::EntityStateDisguise>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateDisguise ResponsiblePointer_ActorState_::setEntityStateDisguise() const
        {
            return Ent::Gen::EntityStateDisguise(node->setUnionType("EntityStateDisguise"));
        }
        inline std::optional<Ent::Gen::EntityStateDisplayHatchingCost> ResponsiblePointer_ActorState_::EntityStateDisplayHatchingCost() const
        {
            return strcmp(node->getUnionType(), "EntityStateDisplayHatchingCost") != 0? std::optional<Ent::Gen::EntityStateDisplayHatchingCost>{}: std::optional<Ent::Gen::EntityStateDisplayHatchingCost>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateDisplayHatchingCost ResponsiblePointer_ActorState_::setEntityStateDisplayHatchingCost() const
        {
            return Ent::Gen::EntityStateDisplayHatchingCost(node->setUnionType("EntityStateDisplayHatchingCost"));
        }
        inline std::optional<Ent::Gen::EntityStateDodgeCooldown> ResponsiblePointer_ActorState_::EntityStateDodgeCooldown() const
        {
            return strcmp(node->getUnionType(), "EntityStateDodgeCooldown") != 0? std::optional<Ent::Gen::EntityStateDodgeCooldown>{}: std::optional<Ent::Gen::EntityStateDodgeCooldown>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateDodgeCooldown ResponsiblePointer_ActorState_::setEntityStateDodgeCooldown() const
        {
            return Ent::Gen::EntityStateDodgeCooldown(node->setUnionType("EntityStateDodgeCooldown"));
        }
        inline std::optional<Ent::Gen::EntityStateEjectedLand> ResponsiblePointer_ActorState_::EntityStateEjectedLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateEjectedLand") != 0? std::optional<Ent::Gen::EntityStateEjectedLand>{}: std::optional<Ent::Gen::EntityStateEjectedLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateEjectedLand ResponsiblePointer_ActorState_::setEntityStateEjectedLand() const
        {
            return Ent::Gen::EntityStateEjectedLand(node->setUnionType("EntityStateEjectedLand"));
        }
        inline std::optional<Ent::Gen::EntityStateEnergyRootAbortHatching> ResponsiblePointer_ActorState_::EntityStateEnergyRootAbortHatching() const
        {
            return strcmp(node->getUnionType(), "EntityStateEnergyRootAbortHatching") != 0? std::optional<Ent::Gen::EntityStateEnergyRootAbortHatching>{}: std::optional<Ent::Gen::EntityStateEnergyRootAbortHatching>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateEnergyRootAbortHatching ResponsiblePointer_ActorState_::setEntityStateEnergyRootAbortHatching() const
        {
            return Ent::Gen::EntityStateEnergyRootAbortHatching(node->setUnionType("EntityStateEnergyRootAbortHatching"));
        }
        inline std::optional<Ent::Gen::EntityStateEnergyRootHatching> ResponsiblePointer_ActorState_::EntityStateEnergyRootHatching() const
        {
            return strcmp(node->getUnionType(), "EntityStateEnergyRootHatching") != 0? std::optional<Ent::Gen::EntityStateEnergyRootHatching>{}: std::optional<Ent::Gen::EntityStateEnergyRootHatching>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateEnergyRootHatching ResponsiblePointer_ActorState_::setEntityStateEnergyRootHatching() const
        {
            return Ent::Gen::EntityStateEnergyRootHatching(node->setUnionType("EntityStateEnergyRootHatching"));
        }
        inline std::optional<Ent::Gen::EntityStateEnergySide> ResponsiblePointer_ActorState_::EntityStateEnergySide() const
        {
            return strcmp(node->getUnionType(), "EntityStateEnergySide") != 0? std::optional<Ent::Gen::EntityStateEnergySide>{}: std::optional<Ent::Gen::EntityStateEnergySide>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateEnergySide ResponsiblePointer_ActorState_::setEntityStateEnergySide() const
        {
            return Ent::Gen::EntityStateEnergySide(node->setUnionType("EntityStateEnergySide"));
        }
        inline std::optional<Ent::Gen::EntityStateEnergySpoutState> ResponsiblePointer_ActorState_::EntityStateEnergySpoutState() const
        {
            return strcmp(node->getUnionType(), "EntityStateEnergySpoutState") != 0? std::optional<Ent::Gen::EntityStateEnergySpoutState>{}: std::optional<Ent::Gen::EntityStateEnergySpoutState>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateEnergySpoutState ResponsiblePointer_ActorState_::setEntityStateEnergySpoutState() const
        {
            return Ent::Gen::EntityStateEnergySpoutState(node->setUnionType("EntityStateEnergySpoutState"));
        }
        inline std::optional<Ent::Gen::EntityStateExtraLife> ResponsiblePointer_ActorState_::EntityStateExtraLife() const
        {
            return strcmp(node->getUnionType(), "EntityStateExtraLife") != 0? std::optional<Ent::Gen::EntityStateExtraLife>{}: std::optional<Ent::Gen::EntityStateExtraLife>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateExtraLife ResponsiblePointer_ActorState_::setEntityStateExtraLife() const
        {
            return Ent::Gen::EntityStateExtraLife(node->setUnionType("EntityStateExtraLife"));
        }
        inline std::optional<Ent::Gen::EntityStateFailingOrder> ResponsiblePointer_ActorState_::EntityStateFailingOrder() const
        {
            return strcmp(node->getUnionType(), "EntityStateFailingOrder") != 0? std::optional<Ent::Gen::EntityStateFailingOrder>{}: std::optional<Ent::Gen::EntityStateFailingOrder>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateFailingOrder ResponsiblePointer_ActorState_::setEntityStateFailingOrder() const
        {
            return Ent::Gen::EntityStateFailingOrder(node->setUnionType("EntityStateFailingOrder"));
        }
        inline std::optional<Ent::Gen::EntityStateFall> ResponsiblePointer_ActorState_::EntityStateFall() const
        {
            return strcmp(node->getUnionType(), "EntityStateFall") != 0? std::optional<Ent::Gen::EntityStateFall>{}: std::optional<Ent::Gen::EntityStateFall>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateFall ResponsiblePointer_ActorState_::setEntityStateFall() const
        {
            return Ent::Gen::EntityStateFall(node->setUnionType("EntityStateFall"));
        }
        inline std::optional<Ent::Gen::EntityStateFallDying> ResponsiblePointer_ActorState_::EntityStateFallDying() const
        {
            return strcmp(node->getUnionType(), "EntityStateFallDying") != 0? std::optional<Ent::Gen::EntityStateFallDying>{}: std::optional<Ent::Gen::EntityStateFallDying>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateFallDying ResponsiblePointer_ActorState_::setEntityStateFallDying() const
        {
            return Ent::Gen::EntityStateFallDying(node->setUnionType("EntityStateFallDying"));
        }
        inline std::optional<Ent::Gen::EntityStateFallInjured> ResponsiblePointer_ActorState_::EntityStateFallInjured() const
        {
            return strcmp(node->getUnionType(), "EntityStateFallInjured") != 0? std::optional<Ent::Gen::EntityStateFallInjured>{}: std::optional<Ent::Gen::EntityStateFallInjured>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateFallInjured ResponsiblePointer_ActorState_::setEntityStateFallInjured() const
        {
            return Ent::Gen::EntityStateFallInjured(node->setUnionType("EntityStateFallInjured"));
        }
        inline std::optional<Ent::Gen::EntityStateFallSafe> ResponsiblePointer_ActorState_::EntityStateFallSafe() const
        {
            return strcmp(node->getUnionType(), "EntityStateFallSafe") != 0? std::optional<Ent::Gen::EntityStateFallSafe>{}: std::optional<Ent::Gen::EntityStateFallSafe>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateFallSafe ResponsiblePointer_ActorState_::setEntityStateFallSafe() const
        {
            return Ent::Gen::EntityStateFallSafe(node->setUnionType("EntityStateFallSafe"));
        }
        inline std::optional<Ent::Gen::EntityStateFastRun> ResponsiblePointer_ActorState_::EntityStateFastRun() const
        {
            return strcmp(node->getUnionType(), "EntityStateFastRun") != 0? std::optional<Ent::Gen::EntityStateFastRun>{}: std::optional<Ent::Gen::EntityStateFastRun>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateFastRun ResponsiblePointer_ActorState_::setEntityStateFastRun() const
        {
            return Ent::Gen::EntityStateFastRun(node->setUnionType("EntityStateFastRun"));
        }
        inline std::optional<Ent::Gen::EntityStateForceCanBeTargeted> ResponsiblePointer_ActorState_::EntityStateForceCanBeTargeted() const
        {
            return strcmp(node->getUnionType(), "EntityStateForceCanBeTargeted") != 0? std::optional<Ent::Gen::EntityStateForceCanBeTargeted>{}: std::optional<Ent::Gen::EntityStateForceCanBeTargeted>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateForceCanBeTargeted ResponsiblePointer_ActorState_::setEntityStateForceCanBeTargeted() const
        {
            return Ent::Gen::EntityStateForceCanBeTargeted(node->setUnionType("EntityStateForceCanBeTargeted"));
        }
        inline std::optional<Ent::Gen::EntityStateGrab> ResponsiblePointer_ActorState_::EntityStateGrab() const
        {
            return strcmp(node->getUnionType(), "EntityStateGrab") != 0? std::optional<Ent::Gen::EntityStateGrab>{}: std::optional<Ent::Gen::EntityStateGrab>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGrab ResponsiblePointer_ActorState_::setEntityStateGrab() const
        {
            return Ent::Gen::EntityStateGrab(node->setUnionType("EntityStateGrab"));
        }
        inline std::optional<Ent::Gen::EntityStateGrabAttack> ResponsiblePointer_ActorState_::EntityStateGrabAttack() const
        {
            return strcmp(node->getUnionType(), "EntityStateGrabAttack") != 0? std::optional<Ent::Gen::EntityStateGrabAttack>{}: std::optional<Ent::Gen::EntityStateGrabAttack>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGrabAttack ResponsiblePointer_ActorState_::setEntityStateGrabAttack() const
        {
            return Ent::Gen::EntityStateGrabAttack(node->setUnionType("EntityStateGrabAttack"));
        }
        inline std::optional<Ent::Gen::EntityStateGrabIn> ResponsiblePointer_ActorState_::EntityStateGrabIn() const
        {
            return strcmp(node->getUnionType(), "EntityStateGrabIn") != 0? std::optional<Ent::Gen::EntityStateGrabIn>{}: std::optional<Ent::Gen::EntityStateGrabIn>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGrabIn ResponsiblePointer_ActorState_::setEntityStateGrabIn() const
        {
            return Ent::Gen::EntityStateGrabIn(node->setUnionType("EntityStateGrabIn"));
        }
        inline std::optional<Ent::Gen::EntityStateGrabOut> ResponsiblePointer_ActorState_::EntityStateGrabOut() const
        {
            return strcmp(node->getUnionType(), "EntityStateGrabOut") != 0? std::optional<Ent::Gen::EntityStateGrabOut>{}: std::optional<Ent::Gen::EntityStateGrabOut>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGrabOut ResponsiblePointer_ActorState_::setEntityStateGrabOut() const
        {
            return Ent::Gen::EntityStateGrabOut(node->setUnionType("EntityStateGrabOut"));
        }
        inline std::optional<Ent::Gen::EntityStateGrabbed> ResponsiblePointer_ActorState_::EntityStateGrabbed() const
        {
            return strcmp(node->getUnionType(), "EntityStateGrabbed") != 0? std::optional<Ent::Gen::EntityStateGrabbed>{}: std::optional<Ent::Gen::EntityStateGrabbed>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGrabbed ResponsiblePointer_ActorState_::setEntityStateGrabbed() const
        {
            return Ent::Gen::EntityStateGrabbed(node->setUnionType("EntityStateGrabbed"));
        }
        inline std::optional<Ent::Gen::EntityStateGrabbedIn> ResponsiblePointer_ActorState_::EntityStateGrabbedIn() const
        {
            return strcmp(node->getUnionType(), "EntityStateGrabbedIn") != 0? std::optional<Ent::Gen::EntityStateGrabbedIn>{}: std::optional<Ent::Gen::EntityStateGrabbedIn>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGrabbedIn ResponsiblePointer_ActorState_::setEntityStateGrabbedIn() const
        {
            return Ent::Gen::EntityStateGrabbedIn(node->setUnionType("EntityStateGrabbedIn"));
        }
        inline std::optional<Ent::Gen::EntityStateGrabbedOut> ResponsiblePointer_ActorState_::EntityStateGrabbedOut() const
        {
            return strcmp(node->getUnionType(), "EntityStateGrabbedOut") != 0? std::optional<Ent::Gen::EntityStateGrabbedOut>{}: std::optional<Ent::Gen::EntityStateGrabbedOut>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGrabbedOut ResponsiblePointer_ActorState_::setEntityStateGrabbedOut() const
        {
            return Ent::Gen::EntityStateGrabbedOut(node->setUnionType("EntityStateGrabbedOut"));
        }
        inline std::optional<Ent::Gen::EntityStateGrasp> ResponsiblePointer_ActorState_::EntityStateGrasp() const
        {
            return strcmp(node->getUnionType(), "EntityStateGrasp") != 0? std::optional<Ent::Gen::EntityStateGrasp>{}: std::optional<Ent::Gen::EntityStateGrasp>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGrasp ResponsiblePointer_ActorState_::setEntityStateGrasp() const
        {
            return Ent::Gen::EntityStateGrasp(node->setUnionType("EntityStateGrasp"));
        }
        inline std::optional<Ent::Gen::EntityStateGroundedJump> ResponsiblePointer_ActorState_::EntityStateGroundedJump() const
        {
            return strcmp(node->getUnionType(), "EntityStateGroundedJump") != 0? std::optional<Ent::Gen::EntityStateGroundedJump>{}: std::optional<Ent::Gen::EntityStateGroundedJump>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateGroundedJump ResponsiblePointer_ActorState_::setEntityStateGroundedJump() const
        {
            return Ent::Gen::EntityStateGroundedJump(node->setUnionType("EntityStateGroundedJump"));
        }
        inline std::optional<Ent::Gen::EntityStateHide> ResponsiblePointer_ActorState_::EntityStateHide() const
        {
            return strcmp(node->getUnionType(), "EntityStateHide") != 0? std::optional<Ent::Gen::EntityStateHide>{}: std::optional<Ent::Gen::EntityStateHide>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateHide ResponsiblePointer_ActorState_::setEntityStateHide() const
        {
            return Ent::Gen::EntityStateHide(node->setUnionType("EntityStateHide"));
        }
        inline std::optional<Ent::Gen::EntityStateHideIn> ResponsiblePointer_ActorState_::EntityStateHideIn() const
        {
            return strcmp(node->getUnionType(), "EntityStateHideIn") != 0? std::optional<Ent::Gen::EntityStateHideIn>{}: std::optional<Ent::Gen::EntityStateHideIn>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateHideIn ResponsiblePointer_ActorState_::setEntityStateHideIn() const
        {
            return Ent::Gen::EntityStateHideIn(node->setUnionType("EntityStateHideIn"));
        }
        inline std::optional<Ent::Gen::EntityStateHideOut> ResponsiblePointer_ActorState_::EntityStateHideOut() const
        {
            return strcmp(node->getUnionType(), "EntityStateHideOut") != 0? std::optional<Ent::Gen::EntityStateHideOut>{}: std::optional<Ent::Gen::EntityStateHideOut>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateHideOut ResponsiblePointer_ActorState_::setEntityStateHideOut() const
        {
            return Ent::Gen::EntityStateHideOut(node->setUnionType("EntityStateHideOut"));
        }
        inline std::optional<Ent::Gen::EntityStateHintFull> ResponsiblePointer_ActorState_::EntityStateHintFull() const
        {
            return strcmp(node->getUnionType(), "EntityStateHintFull") != 0? std::optional<Ent::Gen::EntityStateHintFull>{}: std::optional<Ent::Gen::EntityStateHintFull>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateHintFull ResponsiblePointer_ActorState_::setEntityStateHintFull() const
        {
            return Ent::Gen::EntityStateHintFull(node->setUnionType("EntityStateHintFull"));
        }
        inline std::optional<Ent::Gen::EntityStateHintLight> ResponsiblePointer_ActorState_::EntityStateHintLight() const
        {
            return strcmp(node->getUnionType(), "EntityStateHintLight") != 0? std::optional<Ent::Gen::EntityStateHintLight>{}: std::optional<Ent::Gen::EntityStateHintLight>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateHintLight ResponsiblePointer_ActorState_::setEntityStateHintLight() const
        {
            return Ent::Gen::EntityStateHintLight(node->setUnionType("EntityStateHintLight"));
        }
        inline std::optional<Ent::Gen::EntityStateHintNone> ResponsiblePointer_ActorState_::EntityStateHintNone() const
        {
            return strcmp(node->getUnionType(), "EntityStateHintNone") != 0? std::optional<Ent::Gen::EntityStateHintNone>{}: std::optional<Ent::Gen::EntityStateHintNone>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateHintNone ResponsiblePointer_ActorState_::setEntityStateHintNone() const
        {
            return Ent::Gen::EntityStateHintNone(node->setUnionType("EntityStateHintNone"));
        }
        inline std::optional<Ent::Gen::EntityStateHitWall> ResponsiblePointer_ActorState_::EntityStateHitWall() const
        {
            return strcmp(node->getUnionType(), "EntityStateHitWall") != 0? std::optional<Ent::Gen::EntityStateHitWall>{}: std::optional<Ent::Gen::EntityStateHitWall>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateHitWall ResponsiblePointer_ActorState_::setEntityStateHitWall() const
        {
            return Ent::Gen::EntityStateHitWall(node->setUnionType("EntityStateHitWall"));
        }
        inline std::optional<Ent::Gen::EntityStateHoldingStaffVertebras> ResponsiblePointer_ActorState_::EntityStateHoldingStaffVertebras() const
        {
            return strcmp(node->getUnionType(), "EntityStateHoldingStaffVertebras") != 0? std::optional<Ent::Gen::EntityStateHoldingStaffVertebras>{}: std::optional<Ent::Gen::EntityStateHoldingStaffVertebras>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateHoldingStaffVertebras ResponsiblePointer_ActorState_::setEntityStateHoldingStaffVertebras() const
        {
            return Ent::Gen::EntityStateHoldingStaffVertebras(node->setUnionType("EntityStateHoldingStaffVertebras"));
        }
        inline std::optional<Ent::Gen::EntityStateImmersedJump> ResponsiblePointer_ActorState_::EntityStateImmersedJump() const
        {
            return strcmp(node->getUnionType(), "EntityStateImmersedJump") != 0? std::optional<Ent::Gen::EntityStateImmersedJump>{}: std::optional<Ent::Gen::EntityStateImmersedJump>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateImmersedJump ResponsiblePointer_ActorState_::setEntityStateImmersedJump() const
        {
            return Ent::Gen::EntityStateImmersedJump(node->setUnionType("EntityStateImmersedJump"));
        }
        inline std::optional<Ent::Gen::EntityStateInVertebraeArea> ResponsiblePointer_ActorState_::EntityStateInVertebraeArea() const
        {
            return strcmp(node->getUnionType(), "EntityStateInVertebraeArea") != 0? std::optional<Ent::Gen::EntityStateInVertebraeArea>{}: std::optional<Ent::Gen::EntityStateInVertebraeArea>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateInVertebraeArea ResponsiblePointer_ActorState_::setEntityStateInVertebraeArea() const
        {
            return Ent::Gen::EntityStateInVertebraeArea(node->setUnionType("EntityStateInVertebraeArea"));
        }
        inline std::optional<Ent::Gen::EntityStateIncapacitated> ResponsiblePointer_ActorState_::EntityStateIncapacitated() const
        {
            return strcmp(node->getUnionType(), "EntityStateIncapacitated") != 0? std::optional<Ent::Gen::EntityStateIncapacitated>{}: std::optional<Ent::Gen::EntityStateIncapacitated>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateIncapacitated ResponsiblePointer_ActorState_::setEntityStateIncapacitated() const
        {
            return Ent::Gen::EntityStateIncapacitated(node->setUnionType("EntityStateIncapacitated"));
        }
        inline std::optional<Ent::Gen::EntityStateInconvertible> ResponsiblePointer_ActorState_::EntityStateInconvertible() const
        {
            return strcmp(node->getUnionType(), "EntityStateInconvertible") != 0? std::optional<Ent::Gen::EntityStateInconvertible>{}: std::optional<Ent::Gen::EntityStateInconvertible>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateInconvertible ResponsiblePointer_ActorState_::setEntityStateInconvertible() const
        {
            return Ent::Gen::EntityStateInconvertible(node->setUnionType("EntityStateInconvertible"));
        }
        inline std::optional<Ent::Gen::EntityStateInjured> ResponsiblePointer_ActorState_::EntityStateInjured() const
        {
            return strcmp(node->getUnionType(), "EntityStateInjured") != 0? std::optional<Ent::Gen::EntityStateInjured>{}: std::optional<Ent::Gen::EntityStateInjured>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateInjured ResponsiblePointer_ActorState_::setEntityStateInjured() const
        {
            return Ent::Gen::EntityStateInjured(node->setUnionType("EntityStateInjured"));
        }
        inline std::optional<Ent::Gen::EntityStateInteractedGPE> ResponsiblePointer_ActorState_::EntityStateInteractedGPE() const
        {
            return strcmp(node->getUnionType(), "EntityStateInteractedGPE") != 0? std::optional<Ent::Gen::EntityStateInteractedGPE>{}: std::optional<Ent::Gen::EntityStateInteractedGPE>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateInteractedGPE ResponsiblePointer_ActorState_::setEntityStateInteractedGPE() const
        {
            return Ent::Gen::EntityStateInteractedGPE(node->setUnionType("EntityStateInteractedGPE"));
        }
        inline std::optional<Ent::Gen::EntityStateJumpHeightMultiplier> ResponsiblePointer_ActorState_::EntityStateJumpHeightMultiplier() const
        {
            return strcmp(node->getUnionType(), "EntityStateJumpHeightMultiplier") != 0? std::optional<Ent::Gen::EntityStateJumpHeightMultiplier>{}: std::optional<Ent::Gen::EntityStateJumpHeightMultiplier>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateJumpHeightMultiplier ResponsiblePointer_ActorState_::setEntityStateJumpHeightMultiplier() const
        {
            return Ent::Gen::EntityStateJumpHeightMultiplier(node->setUnionType("EntityStateJumpHeightMultiplier"));
        }
        inline std::optional<Ent::Gen::EntityStateJustStarted> ResponsiblePointer_ActorState_::EntityStateJustStarted() const
        {
            return strcmp(node->getUnionType(), "EntityStateJustStarted") != 0? std::optional<Ent::Gen::EntityStateJustStarted>{}: std::optional<Ent::Gen::EntityStateJustStarted>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateJustStarted ResponsiblePointer_ActorState_::setEntityStateJustStarted() const
        {
            return Ent::Gen::EntityStateJustStarted(node->setUnionType("EntityStateJustStarted"));
        }
        inline std::optional<Ent::Gen::EntityStateLateralDodge> ResponsiblePointer_ActorState_::EntityStateLateralDodge() const
        {
            return strcmp(node->getUnionType(), "EntityStateLateralDodge") != 0? std::optional<Ent::Gen::EntityStateLateralDodge>{}: std::optional<Ent::Gen::EntityStateLateralDodge>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateLateralDodge ResponsiblePointer_ActorState_::setEntityStateLateralDodge() const
        {
            return Ent::Gen::EntityStateLateralDodge(node->setUnionType("EntityStateLateralDodge"));
        }
        inline std::optional<Ent::Gen::EntityStateLateralLand> ResponsiblePointer_ActorState_::EntityStateLateralLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateLateralLand") != 0? std::optional<Ent::Gen::EntityStateLateralLand>{}: std::optional<Ent::Gen::EntityStateLateralLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateLateralLand ResponsiblePointer_ActorState_::setEntityStateLateralLand() const
        {
            return Ent::Gen::EntityStateLateralLand(node->setUnionType("EntityStateLateralLand"));
        }
        inline std::optional<Ent::Gen::EntityStateManageChildEntityPool> ResponsiblePointer_ActorState_::EntityStateManageChildEntityPool() const
        {
            return strcmp(node->getUnionType(), "EntityStateManageChildEntityPool") != 0? std::optional<Ent::Gen::EntityStateManageChildEntityPool>{}: std::optional<Ent::Gen::EntityStateManageChildEntityPool>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateManageChildEntityPool ResponsiblePointer_ActorState_::setEntityStateManageChildEntityPool() const
        {
            return Ent::Gen::EntityStateManageChildEntityPool(node->setUnionType("EntityStateManageChildEntityPool"));
        }
        inline std::optional<Ent::Gen::EntityStateMask> ResponsiblePointer_ActorState_::EntityStateMask() const
        {
            return strcmp(node->getUnionType(), "EntityStateMask") != 0? std::optional<Ent::Gen::EntityStateMask>{}: std::optional<Ent::Gen::EntityStateMask>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateMask ResponsiblePointer_ActorState_::setEntityStateMask() const
        {
            return Ent::Gen::EntityStateMask(node->setUnionType("EntityStateMask"));
        }
        inline std::optional<Ent::Gen::EntityStateMeditateToInteract> ResponsiblePointer_ActorState_::EntityStateMeditateToInteract() const
        {
            return strcmp(node->getUnionType(), "EntityStateMeditateToInteract") != 0? std::optional<Ent::Gen::EntityStateMeditateToInteract>{}: std::optional<Ent::Gen::EntityStateMeditateToInteract>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateMeditateToInteract ResponsiblePointer_ActorState_::setEntityStateMeditateToInteract() const
        {
            return Ent::Gen::EntityStateMeditateToInteract(node->setUnionType("EntityStateMeditateToInteract"));
        }
        inline std::optional<Ent::Gen::EntityStateMineRespawning> ResponsiblePointer_ActorState_::EntityStateMineRespawning() const
        {
            return strcmp(node->getUnionType(), "EntityStateMineRespawning") != 0? std::optional<Ent::Gen::EntityStateMineRespawning>{}: std::optional<Ent::Gen::EntityStateMineRespawning>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateMineRespawning ResponsiblePointer_ActorState_::setEntityStateMineRespawning() const
        {
            return Ent::Gen::EntityStateMineRespawning(node->setUnionType("EntityStateMineRespawning"));
        }
        inline std::optional<Ent::Gen::EntityStateMineScaling> ResponsiblePointer_ActorState_::EntityStateMineScaling() const
        {
            return strcmp(node->getUnionType(), "EntityStateMineScaling") != 0? std::optional<Ent::Gen::EntityStateMineScaling>{}: std::optional<Ent::Gen::EntityStateMineScaling>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateMineScaling ResponsiblePointer_ActorState_::setEntityStateMineScaling() const
        {
            return Ent::Gen::EntityStateMineScaling(node->setUnionType("EntityStateMineScaling"));
        }
        inline std::optional<Ent::Gen::EntityStateMotionConstrained> ResponsiblePointer_ActorState_::EntityStateMotionConstrained() const
        {
            return strcmp(node->getUnionType(), "EntityStateMotionConstrained") != 0? std::optional<Ent::Gen::EntityStateMotionConstrained>{}: std::optional<Ent::Gen::EntityStateMotionConstrained>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateMotionConstrained ResponsiblePointer_ActorState_::setEntityStateMotionConstrained() const
        {
            return Ent::Gen::EntityStateMotionConstrained(node->setUnionType("EntityStateMotionConstrained"));
        }
        inline std::optional<Ent::Gen::EntityStateMotionConstrainedLand> ResponsiblePointer_ActorState_::EntityStateMotionConstrainedLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateMotionConstrainedLand") != 0? std::optional<Ent::Gen::EntityStateMotionConstrainedLand>{}: std::optional<Ent::Gen::EntityStateMotionConstrainedLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateMotionConstrainedLand ResponsiblePointer_ActorState_::setEntityStateMotionConstrainedLand() const
        {
            return Ent::Gen::EntityStateMotionConstrainedLand(node->setUnionType("EntityStateMotionConstrainedLand"));
        }
        inline std::optional<Ent::Gen::EntityStateMoveOnOffMeshLink> ResponsiblePointer_ActorState_::EntityStateMoveOnOffMeshLink() const
        {
            return strcmp(node->getUnionType(), "EntityStateMoveOnOffMeshLink") != 0? std::optional<Ent::Gen::EntityStateMoveOnOffMeshLink>{}: std::optional<Ent::Gen::EntityStateMoveOnOffMeshLink>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateMoveOnOffMeshLink ResponsiblePointer_ActorState_::setEntityStateMoveOnOffMeshLink() const
        {
            return Ent::Gen::EntityStateMoveOnOffMeshLink(node->setUnionType("EntityStateMoveOnOffMeshLink"));
        }
        inline std::optional<Ent::Gen::EntityStateOrderingAttack> ResponsiblePointer_ActorState_::EntityStateOrderingAttack() const
        {
            return strcmp(node->getUnionType(), "EntityStateOrderingAttack") != 0? std::optional<Ent::Gen::EntityStateOrderingAttack>{}: std::optional<Ent::Gen::EntityStateOrderingAttack>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateOrderingAttack ResponsiblePointer_ActorState_::setEntityStateOrderingAttack() const
        {
            return Ent::Gen::EntityStateOrderingAttack(node->setUnionType("EntityStateOrderingAttack"));
        }
        inline std::optional<Ent::Gen::EntityStateOrientedDrift> ResponsiblePointer_ActorState_::EntityStateOrientedDrift() const
        {
            return strcmp(node->getUnionType(), "EntityStateOrientedDrift") != 0? std::optional<Ent::Gen::EntityStateOrientedDrift>{}: std::optional<Ent::Gen::EntityStateOrientedDrift>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateOrientedDrift ResponsiblePointer_ActorState_::setEntityStateOrientedDrift() const
        {
            return Ent::Gen::EntityStateOrientedDrift(node->setUnionType("EntityStateOrientedDrift"));
        }
        inline std::optional<Ent::Gen::EntityStateParried> ResponsiblePointer_ActorState_::EntityStateParried() const
        {
            return strcmp(node->getUnionType(), "EntityStateParried") != 0? std::optional<Ent::Gen::EntityStateParried>{}: std::optional<Ent::Gen::EntityStateParried>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateParried ResponsiblePointer_ActorState_::setEntityStateParried() const
        {
            return Ent::Gen::EntityStateParried(node->setUnionType("EntityStateParried"));
        }
        inline std::optional<Ent::Gen::EntityStateParry> ResponsiblePointer_ActorState_::EntityStateParry() const
        {
            return strcmp(node->getUnionType(), "EntityStateParry") != 0? std::optional<Ent::Gen::EntityStateParry>{}: std::optional<Ent::Gen::EntityStateParry>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateParry ResponsiblePointer_ActorState_::setEntityStateParry() const
        {
            return Ent::Gen::EntityStateParry(node->setUnionType("EntityStateParry"));
        }
        inline std::optional<Ent::Gen::EntityStateParryCooldown> ResponsiblePointer_ActorState_::EntityStateParryCooldown() const
        {
            return strcmp(node->getUnionType(), "EntityStateParryCooldown") != 0? std::optional<Ent::Gen::EntityStateParryCooldown>{}: std::optional<Ent::Gen::EntityStateParryCooldown>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateParryCooldown ResponsiblePointer_ActorState_::setEntityStateParryCooldown() const
        {
            return Ent::Gen::EntityStateParryCooldown(node->setUnionType("EntityStateParryCooldown"));
        }
        inline std::optional<Ent::Gen::EntityStatePhysicsIdle> ResponsiblePointer_ActorState_::EntityStatePhysicsIdle() const
        {
            return strcmp(node->getUnionType(), "EntityStatePhysicsIdle") != 0? std::optional<Ent::Gen::EntityStatePhysicsIdle>{}: std::optional<Ent::Gen::EntityStatePhysicsIdle>(node->getUnionData());
        }
        inline Ent::Gen::EntityStatePhysicsIdle ResponsiblePointer_ActorState_::setEntityStatePhysicsIdle() const
        {
            return Ent::Gen::EntityStatePhysicsIdle(node->setUnionType("EntityStatePhysicsIdle"));
        }
        inline std::optional<Ent::Gen::EntityStatePhysicsMove> ResponsiblePointer_ActorState_::EntityStatePhysicsMove() const
        {
            return strcmp(node->getUnionType(), "EntityStatePhysicsMove") != 0? std::optional<Ent::Gen::EntityStatePhysicsMove>{}: std::optional<Ent::Gen::EntityStatePhysicsMove>(node->getUnionData());
        }
        inline Ent::Gen::EntityStatePhysicsMove ResponsiblePointer_ActorState_::setEntityStatePhysicsMove() const
        {
            return Ent::Gen::EntityStatePhysicsMove(node->setUnionType("EntityStatePhysicsMove"));
        }
        inline std::optional<Ent::Gen::EntityStatePickableDistributor> ResponsiblePointer_ActorState_::EntityStatePickableDistributor() const
        {
            return strcmp(node->getUnionType(), "EntityStatePickableDistributor") != 0? std::optional<Ent::Gen::EntityStatePickableDistributor>{}: std::optional<Ent::Gen::EntityStatePickableDistributor>(node->getUnionData());
        }
        inline Ent::Gen::EntityStatePickableDistributor ResponsiblePointer_ActorState_::setEntityStatePickableDistributor() const
        {
            return Ent::Gen::EntityStatePickableDistributor(node->setUnionType("EntityStatePickableDistributor"));
        }
        inline std::optional<Ent::Gen::EntityStatePlayer> ResponsiblePointer_ActorState_::EntityStatePlayer() const
        {
            return strcmp(node->getUnionType(), "EntityStatePlayer") != 0? std::optional<Ent::Gen::EntityStatePlayer>{}: std::optional<Ent::Gen::EntityStatePlayer>(node->getUnionData());
        }
        inline Ent::Gen::EntityStatePlayer ResponsiblePointer_ActorState_::setEntityStatePlayer() const
        {
            return Ent::Gen::EntityStatePlayer(node->setUnionType("EntityStatePlayer"));
        }
        inline std::optional<Ent::Gen::EntityStatePlungeLand> ResponsiblePointer_ActorState_::EntityStatePlungeLand() const
        {
            return strcmp(node->getUnionType(), "EntityStatePlungeLand") != 0? std::optional<Ent::Gen::EntityStatePlungeLand>{}: std::optional<Ent::Gen::EntityStatePlungeLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStatePlungeLand ResponsiblePointer_ActorState_::setEntityStatePlungeLand() const
        {
            return Ent::Gen::EntityStatePlungeLand(node->setUnionType("EntityStatePlungeLand"));
        }
        inline std::optional<Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh> ResponsiblePointer_ActorState_::EntityStatePrepareToHoldingOnToNavigationMesh() const
        {
            return strcmp(node->getUnionType(), "EntityStatePrepareToHoldingOnToNavigationMesh") != 0? std::optional<Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh>{}: std::optional<Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh>(node->getUnionData());
        }
        inline Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh ResponsiblePointer_ActorState_::setEntityStatePrepareToHoldingOnToNavigationMesh() const
        {
            return Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh(node->setUnionType("EntityStatePrepareToHoldingOnToNavigationMesh"));
        }
        inline std::optional<Ent::Gen::EntityStateRaise> ResponsiblePointer_ActorState_::EntityStateRaise() const
        {
            return strcmp(node->getUnionType(), "EntityStateRaise") != 0? std::optional<Ent::Gen::EntityStateRaise>{}: std::optional<Ent::Gen::EntityStateRaise>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateRaise ResponsiblePointer_ActorState_::setEntityStateRaise() const
        {
            return Ent::Gen::EntityStateRaise(node->setUnionType("EntityStateRaise"));
        }
        inline std::optional<Ent::Gen::EntityStateReadyToGiveOrder> ResponsiblePointer_ActorState_::EntityStateReadyToGiveOrder() const
        {
            return strcmp(node->getUnionType(), "EntityStateReadyToGiveOrder") != 0? std::optional<Ent::Gen::EntityStateReadyToGiveOrder>{}: std::optional<Ent::Gen::EntityStateReadyToGiveOrder>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateReadyToGiveOrder ResponsiblePointer_ActorState_::setEntityStateReadyToGiveOrder() const
        {
            return Ent::Gen::EntityStateReadyToGiveOrder(node->setUnionType("EntityStateReadyToGiveOrder"));
        }
        inline std::optional<Ent::Gen::EntityStateRecoverLand> ResponsiblePointer_ActorState_::EntityStateRecoverLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateRecoverLand") != 0? std::optional<Ent::Gen::EntityStateRecoverLand>{}: std::optional<Ent::Gen::EntityStateRecoverLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateRecoverLand ResponsiblePointer_ActorState_::setEntityStateRecoverLand() const
        {
            return Ent::Gen::EntityStateRecoverLand(node->setUnionType("EntityStateRecoverLand"));
        }
        inline std::optional<Ent::Gen::EntityStateRegainCapacity> ResponsiblePointer_ActorState_::EntityStateRegainCapacity() const
        {
            return strcmp(node->getUnionType(), "EntityStateRegainCapacity") != 0? std::optional<Ent::Gen::EntityStateRegainCapacity>{}: std::optional<Ent::Gen::EntityStateRegainCapacity>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateRegainCapacity ResponsiblePointer_ActorState_::setEntityStateRegainCapacity() const
        {
            return Ent::Gen::EntityStateRegainCapacity(node->setUnionType("EntityStateRegainCapacity"));
        }
        inline std::optional<Ent::Gen::EntityStateReserveMountSlots> ResponsiblePointer_ActorState_::EntityStateReserveMountSlots() const
        {
            return strcmp(node->getUnionType(), "EntityStateReserveMountSlots") != 0? std::optional<Ent::Gen::EntityStateReserveMountSlots>{}: std::optional<Ent::Gen::EntityStateReserveMountSlots>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateReserveMountSlots ResponsiblePointer_ActorState_::setEntityStateReserveMountSlots() const
        {
            return Ent::Gen::EntityStateReserveMountSlots(node->setUnionType("EntityStateReserveMountSlots"));
        }
        inline std::optional<Ent::Gen::EntityStateRespawn> ResponsiblePointer_ActorState_::EntityStateRespawn() const
        {
            return strcmp(node->getUnionType(), "EntityStateRespawn") != 0? std::optional<Ent::Gen::EntityStateRespawn>{}: std::optional<Ent::Gen::EntityStateRespawn>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateRespawn ResponsiblePointer_ActorState_::setEntityStateRespawn() const
        {
            return Ent::Gen::EntityStateRespawn(node->setUnionType("EntityStateRespawn"));
        }
        inline std::optional<Ent::Gen::EntityStateRespawnability> ResponsiblePointer_ActorState_::EntityStateRespawnability() const
        {
            return strcmp(node->getUnionType(), "EntityStateRespawnability") != 0? std::optional<Ent::Gen::EntityStateRespawnability>{}: std::optional<Ent::Gen::EntityStateRespawnability>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateRespawnability ResponsiblePointer_ActorState_::setEntityStateRespawnability() const
        {
            return Ent::Gen::EntityStateRespawnability(node->setUnionType("EntityStateRespawnability"));
        }
        inline std::optional<Ent::Gen::EntityStateRevive> ResponsiblePointer_ActorState_::EntityStateRevive() const
        {
            return strcmp(node->getUnionType(), "EntityStateRevive") != 0? std::optional<Ent::Gen::EntityStateRevive>{}: std::optional<Ent::Gen::EntityStateRevive>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateRevive ResponsiblePointer_ActorState_::setEntityStateRevive() const
        {
            return Ent::Gen::EntityStateRevive(node->setUnionType("EntityStateRevive"));
        }
        inline std::optional<Ent::Gen::EntityStateSavePointActivated> ResponsiblePointer_ActorState_::EntityStateSavePointActivated() const
        {
            return strcmp(node->getUnionType(), "EntityStateSavePointActivated") != 0? std::optional<Ent::Gen::EntityStateSavePointActivated>{}: std::optional<Ent::Gen::EntityStateSavePointActivated>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSavePointActivated ResponsiblePointer_ActorState_::setEntityStateSavePointActivated() const
        {
            return Ent::Gen::EntityStateSavePointActivated(node->setUnionType("EntityStateSavePointActivated"));
        }
        inline std::optional<Ent::Gen::EntityStateSetSavePoint> ResponsiblePointer_ActorState_::EntityStateSetSavePoint() const
        {
            return strcmp(node->getUnionType(), "EntityStateSetSavePoint") != 0? std::optional<Ent::Gen::EntityStateSetSavePoint>{}: std::optional<Ent::Gen::EntityStateSetSavePoint>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSetSavePoint ResponsiblePointer_ActorState_::setEntityStateSetSavePoint() const
        {
            return Ent::Gen::EntityStateSetSavePoint(node->setUnionType("EntityStateSetSavePoint"));
        }
        inline std::optional<Ent::Gen::EntityStateShootHatchingEnergy> ResponsiblePointer_ActorState_::EntityStateShootHatchingEnergy() const
        {
            return strcmp(node->getUnionType(), "EntityStateShootHatchingEnergy") != 0? std::optional<Ent::Gen::EntityStateShootHatchingEnergy>{}: std::optional<Ent::Gen::EntityStateShootHatchingEnergy>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateShootHatchingEnergy ResponsiblePointer_ActorState_::setEntityStateShootHatchingEnergy() const
        {
            return Ent::Gen::EntityStateShootHatchingEnergy(node->setUnionType("EntityStateShootHatchingEnergy"));
        }
        inline std::optional<Ent::Gen::EntityStateSlowMotion> ResponsiblePointer_ActorState_::EntityStateSlowMotion() const
        {
            return strcmp(node->getUnionType(), "EntityStateSlowMotion") != 0? std::optional<Ent::Gen::EntityStateSlowMotion>{}: std::optional<Ent::Gen::EntityStateSlowMotion>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSlowMotion ResponsiblePointer_ActorState_::setEntityStateSlowMotion() const
        {
            return Ent::Gen::EntityStateSlowMotion(node->setUnionType("EntityStateSlowMotion"));
        }
        inline std::optional<Ent::Gen::EntityStateSnappedToHatchingTarget> ResponsiblePointer_ActorState_::EntityStateSnappedToHatchingTarget() const
        {
            return strcmp(node->getUnionType(), "EntityStateSnappedToHatchingTarget") != 0? std::optional<Ent::Gen::EntityStateSnappedToHatchingTarget>{}: std::optional<Ent::Gen::EntityStateSnappedToHatchingTarget>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSnappedToHatchingTarget ResponsiblePointer_ActorState_::setEntityStateSnappedToHatchingTarget() const
        {
            return Ent::Gen::EntityStateSnappedToHatchingTarget(node->setUnionType("EntityStateSnappedToHatchingTarget"));
        }
        inline std::optional<Ent::Gen::EntityStateSoftCollide> ResponsiblePointer_ActorState_::EntityStateSoftCollide() const
        {
            return strcmp(node->getUnionType(), "EntityStateSoftCollide") != 0? std::optional<Ent::Gen::EntityStateSoftCollide>{}: std::optional<Ent::Gen::EntityStateSoftCollide>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSoftCollide ResponsiblePointer_ActorState_::setEntityStateSoftCollide() const
        {
            return Ent::Gen::EntityStateSoftCollide(node->setUnionType("EntityStateSoftCollide"));
        }
        inline std::optional<Ent::Gen::EntityStateSpeedLimiter> ResponsiblePointer_ActorState_::EntityStateSpeedLimiter() const
        {
            return strcmp(node->getUnionType(), "EntityStateSpeedLimiter") != 0? std::optional<Ent::Gen::EntityStateSpeedLimiter>{}: std::optional<Ent::Gen::EntityStateSpeedLimiter>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSpeedLimiter ResponsiblePointer_ActorState_::setEntityStateSpeedLimiter() const
        {
            return Ent::Gen::EntityStateSpeedLimiter(node->setUnionType("EntityStateSpeedLimiter"));
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAnimalBeingCalled> ResponsiblePointer_ActorState_::EntityStateSpiritAnimalBeingCalled() const
        {
            return strcmp(node->getUnionType(), "EntityStateSpiritAnimalBeingCalled") != 0? std::optional<Ent::Gen::EntityStateSpiritAnimalBeingCalled>{}: std::optional<Ent::Gen::EntityStateSpiritAnimalBeingCalled>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSpiritAnimalBeingCalled ResponsiblePointer_ActorState_::setEntityStateSpiritAnimalBeingCalled() const
        {
            return Ent::Gen::EntityStateSpiritAnimalBeingCalled(node->setUnionType("EntityStateSpiritAnimalBeingCalled"));
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAnimalFleshForm> ResponsiblePointer_ActorState_::EntityStateSpiritAnimalFleshForm() const
        {
            return strcmp(node->getUnionType(), "EntityStateSpiritAnimalFleshForm") != 0? std::optional<Ent::Gen::EntityStateSpiritAnimalFleshForm>{}: std::optional<Ent::Gen::EntityStateSpiritAnimalFleshForm>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSpiritAnimalFleshForm ResponsiblePointer_ActorState_::setEntityStateSpiritAnimalFleshForm() const
        {
            return Ent::Gen::EntityStateSpiritAnimalFleshForm(node->setUnionType("EntityStateSpiritAnimalFleshForm"));
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAnimalSoulForm> ResponsiblePointer_ActorState_::EntityStateSpiritAnimalSoulForm() const
        {
            return strcmp(node->getUnionType(), "EntityStateSpiritAnimalSoulForm") != 0? std::optional<Ent::Gen::EntityStateSpiritAnimalSoulForm>{}: std::optional<Ent::Gen::EntityStateSpiritAnimalSoulForm>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSpiritAnimalSoulForm ResponsiblePointer_ActorState_::setEntityStateSpiritAnimalSoulForm() const
        {
            return Ent::Gen::EntityStateSpiritAnimalSoulForm(node->setUnionType("EntityStateSpiritAnimalSoulForm"));
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAttack> ResponsiblePointer_ActorState_::EntityStateSpiritAttack() const
        {
            return strcmp(node->getUnionType(), "EntityStateSpiritAttack") != 0? std::optional<Ent::Gen::EntityStateSpiritAttack>{}: std::optional<Ent::Gen::EntityStateSpiritAttack>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSpiritAttack ResponsiblePointer_ActorState_::setEntityStateSpiritAttack() const
        {
            return Ent::Gen::EntityStateSpiritAttack(node->setUnionType("EntityStateSpiritAttack"));
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAttacked> ResponsiblePointer_ActorState_::EntityStateSpiritAttacked() const
        {
            return strcmp(node->getUnionType(), "EntityStateSpiritAttacked") != 0? std::optional<Ent::Gen::EntityStateSpiritAttacked>{}: std::optional<Ent::Gen::EntityStateSpiritAttacked>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSpiritAttacked ResponsiblePointer_ActorState_::setEntityStateSpiritAttacked() const
        {
            return Ent::Gen::EntityStateSpiritAttacked(node->setUnionType("EntityStateSpiritAttacked"));
        }
        inline std::optional<Ent::Gen::EntityStateSpiritShrineDisabled> ResponsiblePointer_ActorState_::EntityStateSpiritShrineDisabled() const
        {
            return strcmp(node->getUnionType(), "EntityStateSpiritShrineDisabled") != 0? std::optional<Ent::Gen::EntityStateSpiritShrineDisabled>{}: std::optional<Ent::Gen::EntityStateSpiritShrineDisabled>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSpiritShrineDisabled ResponsiblePointer_ActorState_::setEntityStateSpiritShrineDisabled() const
        {
            return Ent::Gen::EntityStateSpiritShrineDisabled(node->setUnionType("EntityStateSpiritShrineDisabled"));
        }
        inline std::optional<Ent::Gen::EntityStateSpiritShrineEnabled> ResponsiblePointer_ActorState_::EntityStateSpiritShrineEnabled() const
        {
            return strcmp(node->getUnionType(), "EntityStateSpiritShrineEnabled") != 0? std::optional<Ent::Gen::EntityStateSpiritShrineEnabled>{}: std::optional<Ent::Gen::EntityStateSpiritShrineEnabled>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateSpiritShrineEnabled ResponsiblePointer_ActorState_::setEntityStateSpiritShrineEnabled() const
        {
            return Ent::Gen::EntityStateSpiritShrineEnabled(node->setUnionType("EntityStateSpiritShrineEnabled"));
        }
        inline std::optional<Ent::Gen::EntityStateStaffOwnedVertebras> ResponsiblePointer_ActorState_::EntityStateStaffOwnedVertebras() const
        {
            return strcmp(node->getUnionType(), "EntityStateStaffOwnedVertebras") != 0? std::optional<Ent::Gen::EntityStateStaffOwnedVertebras>{}: std::optional<Ent::Gen::EntityStateStaffOwnedVertebras>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStaffOwnedVertebras ResponsiblePointer_ActorState_::setEntityStateStaffOwnedVertebras() const
        {
            return Ent::Gen::EntityStateStaffOwnedVertebras(node->setUnionType("EntityStateStaffOwnedVertebras"));
        }
        inline std::optional<Ent::Gen::EntityStateStaffVertebrasAutoRefill> ResponsiblePointer_ActorState_::EntityStateStaffVertebrasAutoRefill() const
        {
            return strcmp(node->getUnionType(), "EntityStateStaffVertebrasAutoRefill") != 0? std::optional<Ent::Gen::EntityStateStaffVertebrasAutoRefill>{}: std::optional<Ent::Gen::EntityStateStaffVertebrasAutoRefill>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStaffVertebrasAutoRefill ResponsiblePointer_ActorState_::setEntityStateStaffVertebrasAutoRefill() const
        {
            return Ent::Gen::EntityStateStaffVertebrasAutoRefill(node->setUnionType("EntityStateStaffVertebrasAutoRefill"));
        }
        inline std::optional<Ent::Gen::EntityStateStalactiteFallen> ResponsiblePointer_ActorState_::EntityStateStalactiteFallen() const
        {
            return strcmp(node->getUnionType(), "EntityStateStalactiteFallen") != 0? std::optional<Ent::Gen::EntityStateStalactiteFallen>{}: std::optional<Ent::Gen::EntityStateStalactiteFallen>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStalactiteFallen ResponsiblePointer_ActorState_::setEntityStateStalactiteFallen() const
        {
            return Ent::Gen::EntityStateStalactiteFallen(node->setUnionType("EntityStateStalactiteFallen"));
        }
        inline std::optional<Ent::Gen::EntityStateStalactiteReadyToFall> ResponsiblePointer_ActorState_::EntityStateStalactiteReadyToFall() const
        {
            return strcmp(node->getUnionType(), "EntityStateStalactiteReadyToFall") != 0? std::optional<Ent::Gen::EntityStateStalactiteReadyToFall>{}: std::optional<Ent::Gen::EntityStateStalactiteReadyToFall>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStalactiteReadyToFall ResponsiblePointer_ActorState_::setEntityStateStalactiteReadyToFall() const
        {
            return Ent::Gen::EntityStateStalactiteReadyToFall(node->setUnionType("EntityStateStalactiteReadyToFall"));
        }
        inline std::optional<Ent::Gen::EntityStateStickedLand> ResponsiblePointer_ActorState_::EntityStateStickedLand() const
        {
            return strcmp(node->getUnionType(), "EntityStateStickedLand") != 0? std::optional<Ent::Gen::EntityStateStickedLand>{}: std::optional<Ent::Gen::EntityStateStickedLand>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStickedLand ResponsiblePointer_ActorState_::setEntityStateStickedLand() const
        {
            return Ent::Gen::EntityStateStickedLand(node->setUnionType("EntityStateStickedLand"));
        }
        inline std::optional<Ent::Gen::EntityStateStrafeDodge> ResponsiblePointer_ActorState_::EntityStateStrafeDodge() const
        {
            return strcmp(node->getUnionType(), "EntityStateStrafeDodge") != 0? std::optional<Ent::Gen::EntityStateStrafeDodge>{}: std::optional<Ent::Gen::EntityStateStrafeDodge>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStrafeDodge ResponsiblePointer_ActorState_::setEntityStateStrafeDodge() const
        {
            return Ent::Gen::EntityStateStrafeDodge(node->setUnionType("EntityStateStrafeDodge"));
        }
        inline std::optional<Ent::Gen::EntityStateStrongAttack> ResponsiblePointer_ActorState_::EntityStateStrongAttack() const
        {
            return strcmp(node->getUnionType(), "EntityStateStrongAttack") != 0? std::optional<Ent::Gen::EntityStateStrongAttack>{}: std::optional<Ent::Gen::EntityStateStrongAttack>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStrongAttack ResponsiblePointer_ActorState_::setEntityStateStrongAttack() const
        {
            return Ent::Gen::EntityStateStrongAttack(node->setUnionType("EntityStateStrongAttack"));
        }
        inline std::optional<Ent::Gen::EntityStateStrongAttackCharged> ResponsiblePointer_ActorState_::EntityStateStrongAttackCharged() const
        {
            return strcmp(node->getUnionType(), "EntityStateStrongAttackCharged") != 0? std::optional<Ent::Gen::EntityStateStrongAttackCharged>{}: std::optional<Ent::Gen::EntityStateStrongAttackCharged>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStrongAttackCharged ResponsiblePointer_ActorState_::setEntityStateStrongAttackCharged() const
        {
            return Ent::Gen::EntityStateStrongAttackCharged(node->setUnionType("EntityStateStrongAttackCharged"));
        }
        inline std::optional<Ent::Gen::EntityStateStrongAttackCharging> ResponsiblePointer_ActorState_::EntityStateStrongAttackCharging() const
        {
            return strcmp(node->getUnionType(), "EntityStateStrongAttackCharging") != 0? std::optional<Ent::Gen::EntityStateStrongAttackCharging>{}: std::optional<Ent::Gen::EntityStateStrongAttackCharging>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStrongAttackCharging ResponsiblePointer_ActorState_::setEntityStateStrongAttackCharging() const
        {
            return Ent::Gen::EntityStateStrongAttackCharging(node->setUnionType("EntityStateStrongAttackCharging"));
        }
        inline std::optional<Ent::Gen::EntityStateStrongAttackJumped> ResponsiblePointer_ActorState_::EntityStateStrongAttackJumped() const
        {
            return strcmp(node->getUnionType(), "EntityStateStrongAttackJumped") != 0? std::optional<Ent::Gen::EntityStateStrongAttackJumped>{}: std::optional<Ent::Gen::EntityStateStrongAttackJumped>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateStrongAttackJumped ResponsiblePointer_ActorState_::setEntityStateStrongAttackJumped() const
        {
            return Ent::Gen::EntityStateStrongAttackJumped(node->setUnionType("EntityStateStrongAttackJumped"));
        }
        inline std::optional<Ent::Gen::EntityStateTakeDamageOnMount> ResponsiblePointer_ActorState_::EntityStateTakeDamageOnMount() const
        {
            return strcmp(node->getUnionType(), "EntityStateTakeDamageOnMount") != 0? std::optional<Ent::Gen::EntityStateTakeDamageOnMount>{}: std::optional<Ent::Gen::EntityStateTakeDamageOnMount>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateTakeDamageOnMount ResponsiblePointer_ActorState_::setEntityStateTakeDamageOnMount() const
        {
            return Ent::Gen::EntityStateTakeDamageOnMount(node->setUnionType("EntityStateTakeDamageOnMount"));
        }
        inline std::optional<Ent::Gen::EntityStateTooDeep> ResponsiblePointer_ActorState_::EntityStateTooDeep() const
        {
            return strcmp(node->getUnionType(), "EntityStateTooDeep") != 0? std::optional<Ent::Gen::EntityStateTooDeep>{}: std::optional<Ent::Gen::EntityStateTooDeep>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateTooDeep ResponsiblePointer_ActorState_::setEntityStateTooDeep() const
        {
            return Ent::Gen::EntityStateTooDeep(node->setUnionType("EntityStateTooDeep"));
        }
        inline std::optional<Ent::Gen::EntityStateTreeMetamorphosis> ResponsiblePointer_ActorState_::EntityStateTreeMetamorphosis() const
        {
            return strcmp(node->getUnionType(), "EntityStateTreeMetamorphosis") != 0? std::optional<Ent::Gen::EntityStateTreeMetamorphosis>{}: std::optional<Ent::Gen::EntityStateTreeMetamorphosis>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateTreeMetamorphosis ResponsiblePointer_ActorState_::setEntityStateTreeMetamorphosis() const
        {
            return Ent::Gen::EntityStateTreeMetamorphosis(node->setUnionType("EntityStateTreeMetamorphosis"));
        }
        inline std::optional<Ent::Gen::EntityStateTreeMetamorphosisUsingScale> ResponsiblePointer_ActorState_::EntityStateTreeMetamorphosisUsingScale() const
        {
            return strcmp(node->getUnionType(), "EntityStateTreeMetamorphosisUsingScale") != 0? std::optional<Ent::Gen::EntityStateTreeMetamorphosisUsingScale>{}: std::optional<Ent::Gen::EntityStateTreeMetamorphosisUsingScale>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateTreeMetamorphosisUsingScale ResponsiblePointer_ActorState_::setEntityStateTreeMetamorphosisUsingScale() const
        {
            return Ent::Gen::EntityStateTreeMetamorphosisUsingScale(node->setUnionType("EntityStateTreeMetamorphosisUsingScale"));
        }
        inline std::optional<Ent::Gen::EntityStateTreeSwitchTransition> ResponsiblePointer_ActorState_::EntityStateTreeSwitchTransition() const
        {
            return strcmp(node->getUnionType(), "EntityStateTreeSwitchTransition") != 0? std::optional<Ent::Gen::EntityStateTreeSwitchTransition>{}: std::optional<Ent::Gen::EntityStateTreeSwitchTransition>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateTreeSwitchTransition ResponsiblePointer_ActorState_::setEntityStateTreeSwitchTransition() const
        {
            return Ent::Gen::EntityStateTreeSwitchTransition(node->setUnionType("EntityStateTreeSwitchTransition"));
        }
        inline std::optional<Ent::Gen::EntityStateTreeTurretTargeting> ResponsiblePointer_ActorState_::EntityStateTreeTurretTargeting() const
        {
            return strcmp(node->getUnionType(), "EntityStateTreeTurretTargeting") != 0? std::optional<Ent::Gen::EntityStateTreeTurretTargeting>{}: std::optional<Ent::Gen::EntityStateTreeTurretTargeting>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateTreeTurretTargeting ResponsiblePointer_ActorState_::setEntityStateTreeTurretTargeting() const
        {
            return Ent::Gen::EntityStateTreeTurretTargeting(node->setUnionType("EntityStateTreeTurretTargeting"));
        }
        inline std::optional<Ent::Gen::EntityStateTriggerBeamTargetEvent> ResponsiblePointer_ActorState_::EntityStateTriggerBeamTargetEvent() const
        {
            return strcmp(node->getUnionType(), "EntityStateTriggerBeamTargetEvent") != 0? std::optional<Ent::Gen::EntityStateTriggerBeamTargetEvent>{}: std::optional<Ent::Gen::EntityStateTriggerBeamTargetEvent>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateTriggerBeamTargetEvent ResponsiblePointer_ActorState_::setEntityStateTriggerBeamTargetEvent() const
        {
            return Ent::Gen::EntityStateTriggerBeamTargetEvent(node->setUnionType("EntityStateTriggerBeamTargetEvent"));
        }
        inline std::optional<Ent::Gen::EntityStateTryUnmount> ResponsiblePointer_ActorState_::EntityStateTryUnmount() const
        {
            return strcmp(node->getUnionType(), "EntityStateTryUnmount") != 0? std::optional<Ent::Gen::EntityStateTryUnmount>{}: std::optional<Ent::Gen::EntityStateTryUnmount>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateTryUnmount ResponsiblePointer_ActorState_::setEntityStateTryUnmount() const
        {
            return Ent::Gen::EntityStateTryUnmount(node->setUnionType("EntityStateTryUnmount"));
        }
        inline std::optional<Ent::Gen::EntityStateUndergroundCavity> ResponsiblePointer_ActorState_::EntityStateUndergroundCavity() const
        {
            return strcmp(node->getUnionType(), "EntityStateUndergroundCavity") != 0? std::optional<Ent::Gen::EntityStateUndergroundCavity>{}: std::optional<Ent::Gen::EntityStateUndergroundCavity>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateUndergroundCavity ResponsiblePointer_ActorState_::setEntityStateUndergroundCavity() const
        {
            return Ent::Gen::EntityStateUndergroundCavity(node->setUnionType("EntityStateUndergroundCavity"));
        }
        inline std::optional<Ent::Gen::EntityStateUseAsActiveCheckpoint> ResponsiblePointer_ActorState_::EntityStateUseAsActiveCheckpoint() const
        {
            return strcmp(node->getUnionType(), "EntityStateUseAsActiveCheckpoint") != 0? std::optional<Ent::Gen::EntityStateUseAsActiveCheckpoint>{}: std::optional<Ent::Gen::EntityStateUseAsActiveCheckpoint>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateUseAsActiveCheckpoint ResponsiblePointer_ActorState_::setEntityStateUseAsActiveCheckpoint() const
        {
            return Ent::Gen::EntityStateUseAsActiveCheckpoint(node->setUnionType("EntityStateUseAsActiveCheckpoint"));
        }
        inline std::optional<Ent::Gen::EntityStateWaitToJumpAgain> ResponsiblePointer_ActorState_::EntityStateWaitToJumpAgain() const
        {
            return strcmp(node->getUnionType(), "EntityStateWaitToJumpAgain") != 0? std::optional<Ent::Gen::EntityStateWaitToJumpAgain>{}: std::optional<Ent::Gen::EntityStateWaitToJumpAgain>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateWaitToJumpAgain ResponsiblePointer_ActorState_::setEntityStateWaitToJumpAgain() const
        {
            return Ent::Gen::EntityStateWaitToJumpAgain(node->setUnionType("EntityStateWaitToJumpAgain"));
        }
        inline std::optional<Ent::Gen::EntityStateWallRun> ResponsiblePointer_ActorState_::EntityStateWallRun() const
        {
            return strcmp(node->getUnionType(), "EntityStateWallRun") != 0? std::optional<Ent::Gen::EntityStateWallRun>{}: std::optional<Ent::Gen::EntityStateWallRun>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateWallRun ResponsiblePointer_ActorState_::setEntityStateWallRun() const
        {
            return Ent::Gen::EntityStateWallRun(node->setUnionType("EntityStateWallRun"));
        }
        inline std::optional<Ent::Gen::EntityStateWallRunDrop> ResponsiblePointer_ActorState_::EntityStateWallRunDrop() const
        {
            return strcmp(node->getUnionType(), "EntityStateWallRunDrop") != 0? std::optional<Ent::Gen::EntityStateWallRunDrop>{}: std::optional<Ent::Gen::EntityStateWallRunDrop>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateWallRunDrop ResponsiblePointer_ActorState_::setEntityStateWallRunDrop() const
        {
            return Ent::Gen::EntityStateWallRunDrop(node->setUnionType("EntityStateWallRunDrop"));
        }
        inline std::optional<Ent::Gen::EntityStateWallRunJump> ResponsiblePointer_ActorState_::EntityStateWallRunJump() const
        {
            return strcmp(node->getUnionType(), "EntityStateWallRunJump") != 0? std::optional<Ent::Gen::EntityStateWallRunJump>{}: std::optional<Ent::Gen::EntityStateWallRunJump>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateWallRunJump ResponsiblePointer_ActorState_::setEntityStateWallRunJump() const
        {
            return Ent::Gen::EntityStateWallRunJump(node->setUnionType("EntityStateWallRunJump"));
        }
        inline std::optional<Ent::Gen::EntityStateWaterfallEndJump> ResponsiblePointer_ActorState_::EntityStateWaterfallEndJump() const
        {
            return strcmp(node->getUnionType(), "EntityStateWaterfallEndJump") != 0? std::optional<Ent::Gen::EntityStateWaterfallEndJump>{}: std::optional<Ent::Gen::EntityStateWaterfallEndJump>(node->getUnionData());
        }
        inline Ent::Gen::EntityStateWaterfallEndJump ResponsiblePointer_ActorState_::setEntityStateWaterfallEndJump() const
        {
            return Ent::Gen::EntityStateWaterfallEndJump(node->setUnionType("EntityStateWaterfallEndJump"));
        }
        // SpawnState
        inline Ent::Gen::String SpawnState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool SpawnState::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::ResponsiblePointer_ActorState_ SpawnState::val() const
        {
            return Ent::Gen::ResponsiblePointer_ActorState_(node->at("val"));
        }
        // RespawnState
        inline Ent::Gen::String RespawnState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool RespawnState::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::ResponsiblePointer_ActorState_ RespawnState::val() const
        {
            return Ent::Gen::ResponsiblePointer_ActorState_(node->at("val"));
        }
        // RenderManager_DepthOfFieldConfig
        inline Ent::Gen::Float RenderManager_DepthOfFieldConfig::FarTransitionDistance() const
        {
            return Ent::Gen::Float(node->at("FarTransitionDistance"));
        }
        inline Ent::Gen::Float RenderManager_DepthOfFieldConfig::Multiplier() const
        {
            return Ent::Gen::Float(node->at("Multiplier"));
        }
        inline Ent::Gen::Float RenderManager_DepthOfFieldConfig::NearTransitionDistance() const
        {
            return Ent::Gen::Float(node->at("NearTransitionDistance"));
        }
        inline Ent::Gen::String RenderManager_DepthOfFieldConfig::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RegenerationManager_EnergyAreaSetting
        inline Ent::Gen::Float RegenerationManager_EnergyAreaSetting::RegenValue() const
        {
            return Ent::Gen::Float(node->at("RegenValue"));
        }
        inline Ent::Gen::Float RegenerationManager_EnergyAreaSetting::SmoothMargin() const
        {
            return Ent::Gen::Float(node->at("SmoothMargin"));
        }
        inline Ent::Gen::String RegenerationManager_EnergyAreaSetting::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RegenAreaTransitionSettings
        inline Ent::Gen::ScaleConverter RegenAreaTransitionSettings::TransitionWaveRadialSpeed() const
        {
            return Ent::Gen::ScaleConverter(node->at("TransitionWaveRadialSpeed"));
        }
        inline Ent::Gen::Float RegenAreaTransitionSettings::TransitionWaveWidth() const
        {
            return Ent::Gen::Float(node->at("TransitionWaveWidth"));
        }
        inline Ent::Gen::String RegenAreaTransitionSettings::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TransitionSettings
        inline Ent::Gen::String TransitionSettings::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool TransitionSettings::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::RegenAreaTransitionSettings TransitionSettings::val() const
        {
            return Ent::Gen::RegenAreaTransitionSettings(node->at("val"));
        }
        // ReflectionTools_EnumSchema
        inline Ent::Gen::String ReflectionTools_EnumSchema::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline PrimArray<Ent::Gen::String> ReflectionTools_EnumSchema::Values() const
        {
            return PrimArray<Ent::Gen::String>(node->at("Values"));
        }
        inline Ent::Gen::String ReflectionTools_EnumSchema::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline PrimArray<Ent::Gen::String> ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods::ParamTypes() const
        {
            return PrimArray<Ent::Gen::String>(node->at("ParamTypes"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods::ReturnType() const
        {
            return Ent::Gen::String(node->at("ReturnType"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData::Type_() const
        {
            return Ent::Gen::String(node->at("Type"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember::Type_() const
        {
            return Ent::Gen::String(node->at("Type"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Bool ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency::Optional() const
        {
            return Ent::Gen::Bool(node->at("Optional"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectionTools_FlatBufferSchemaDependenciesExporter
        inline Ent::Gen::String ReflectionTools_FlatBufferSchemaDependenciesExporter::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String ReflectionTools_FlatBufferSchemaDependenciesExporter::className() const
        {
            return Ent::Gen::String(node->at("className"));
        }
        inline Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> ReflectionTools_FlatBufferSchemaDependenciesExporter::dependencies() const
        {
            return Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency>(node->at("dependencies"));
        }
        // ReflectionTools_ClassReflectionSchema
        inline PrimArray<Ent::Gen::String> ReflectionTools_ClassReflectionSchema::BaseRecursive() const
        {
            return PrimArray<Ent::Gen::String>(node->at("BaseRecursive"));
        }
        inline Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> ReflectionTools_ClassReflectionSchema::Dependencies() const
        {
            return Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency>(node->at("Dependencies"));
        }
        inline Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember> ReflectionTools_ClassReflectionSchema::Members() const
        {
            return Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember>(node->at("Members"));
        }
        inline Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData> ReflectionTools_ClassReflectionSchema::Metadata() const
        {
            return Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData>(node->at("Metadata"));
        }
        inline Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> ReflectionTools_ClassReflectionSchema::Methods() const
        {
            return Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods>(node->at("Methods"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> ReflectionTools_ClassReflectionSchema::RPCMethods() const
        {
            return Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods>(node->at("RPCMethods"));
        }
        inline Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> ReflectionTools_ClassReflectionSchema::Signals() const
        {
            return Array<Ent::Gen::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods>(node->at("Signals"));
        }
        inline Ent::Gen::String ReflectionTools_ClassReflectionSchema::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectionTools_ReflectionSchema
        inline Array<Ent::Gen::ReflectionTools_EnumSchema> ReflectionTools_ReflectionSchema::Enums() const
        {
            return Array<Ent::Gen::ReflectionTools_EnumSchema>(node->at("Enums"));
        }
        inline Array<Ent::Gen::ReflectionTools_ClassReflectionSchema> ReflectionTools_ReflectionSchema::Schemas() const
        {
            return Array<Ent::Gen::ReflectionTools_ClassReflectionSchema>(node->at("Schemas"));
        }
        inline Ent::Gen::String ReflectionTools_ReflectionSchema::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectionMethodParameter
        inline Ent::Gen::String ReflectionMethodParameter::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int ReflectionMethodParameter::containerType() const
        {
            return Ent::Gen::Int(node->at("containerType"));
        }
        inline Ent::Gen::Int ReflectionMethodParameter::elementType() const
        {
            return Ent::Gen::Int(node->at("elementType"));
        }
        inline Ent::Gen::String ReflectionMethodParameter::elementTypeName() const
        {
            return Ent::Gen::String(node->at("elementTypeName"));
        }
        inline Ent::Gen::String ReflectionMethodParameter::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        inline Ent::Gen::String ReflectionMethodParameter::typeName() const
        {
            return Ent::Gen::String(node->at("typeName"));
        }
        // ReflectionMethod
        inline Ent::Gen::String ReflectionMethod::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::ReflectionMethodParameter> ReflectionMethod::inputs() const
        {
            return Array<Ent::Gen::ReflectionMethodParameter>(node->at("inputs"));
        }
        inline Ent::Gen::String ReflectionMethod::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        inline Array<Ent::Gen::ReflectionMethodParameter> ReflectionMethod::outputs() const
        {
            return Array<Ent::Gen::ReflectionMethodParameter>(node->at("outputs"));
        }
        inline Ent::Gen::Bool ReflectionMethod::threadSafe() const
        {
            return Ent::Gen::Bool(node->at("threadSafe"));
        }
        // ReflectionEnum
        inline Ent::Gen::String ReflectionEnum::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String ReflectionEnum::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        inline PrimArray<Ent::Gen::String> ReflectionEnum::names() const
        {
            return PrimArray<Ent::Gen::String>(node->at("names"));
        }
        inline PrimArray<Ent::Gen::Int> ReflectionEnum::values() const
        {
            return PrimArray<Ent::Gen::Int>(node->at("values"));
        }
        // ReflectionClass
        inline Ent::Gen::String ReflectionClass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::ReflectionMethod> ReflectionClass::methods() const
        {
            return Array<Ent::Gen::ReflectionMethod>(node->at("methods"));
        }
        inline Ent::Gen::String ReflectionClass::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        // ReflectionDb
        inline Ent::Gen::String ReflectionDb::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::ReflectionClass> ReflectionDb::classes() const
        {
            return Array<Ent::Gen::ReflectionClass>(node->at("classes"));
        }
        inline Array<Ent::Gen::ReflectionEnum> ReflectionDb::enums() const
        {
            return Array<Ent::Gen::ReflectionEnum>(node->at("enums"));
        }
        // ReflectedMaterialGroup
        inline PrimArray<Ent::Gen::String> ReflectedMaterialGroup::Materials() const
        {
            return PrimArray<Ent::Gen::String>(node->at("Materials"));
        }
        inline PrimArray<Ent::Gen::String> ReflectedMaterialGroup::Tags() const
        {
            return PrimArray<Ent::Gen::String>(node->at("Tags"));
        }
        inline Ent::Gen::String ReflectedMaterialGroup::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectedMaterialGroupVector
        inline Ent::Gen::Map<char const*, Ent::Gen::ReflectedMaterialGroup> ReflectedMaterialGroupVector::Groups() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::ReflectedMaterialGroup>(node->at("Groups"));
        }
        inline Ent::Gen::String ReflectedMaterialGroupVector::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectedDetailMaterial
        inline Ent::Gen::String ReflectedDetailMaterial::AlbedoMap() const
        {
            return Ent::Gen::String(node->at("AlbedoMap"));
        }
        inline Ent::Gen::String ReflectedDetailMaterial::CavityMap() const
        {
            return Ent::Gen::String(node->at("CavityMap"));
        }
        inline Ent::Gen::Vector3i ReflectedDetailMaterial::DebugAlbedo() const
        {
            return Ent::Gen::Vector3i(node->at("DebugAlbedo"));
        }
        inline Ent::Gen::String ReflectedDetailMaterial::EmissiveMap() const
        {
            return Ent::Gen::String(node->at("EmissiveMap"));
        }
        inline Ent::Gen::String ReflectedDetailMaterial::HeightMap() const
        {
            return Ent::Gen::String(node->at("HeightMap"));
        }
        inline Ent::Gen::String ReflectedDetailMaterial::NormalMap() const
        {
            return Ent::Gen::String(node->at("NormalMap"));
        }
        inline Ent::Gen::String ReflectedDetailMaterial::RoughMap() const
        {
            return Ent::Gen::String(node->at("RoughMap"));
        }
        inline Ent::Gen::String ReflectedDetailMaterial::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectedDetailMaterialVariants
        inline Ent::Gen::String ReflectedDetailMaterialVariants::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String ReflectedDetailMaterialVariants::PhysicsMaterialName() const
        {
            return Ent::Gen::String(node->at("PhysicsMaterialName"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::ReflectedDetailMaterial> ReflectedDetailMaterialVariants::Variants() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::ReflectedDetailMaterial>(node->at("Variants"));
        }
        inline Ent::Gen::String ReflectedDetailMaterialVariants::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReflectedDetailMaterialBank
        inline Array<Ent::Gen::ReflectedDetailMaterialVariants> ReflectedDetailMaterialBank::Bank() const
        {
            return Array<Ent::Gen::ReflectedDetailMaterialVariants>(node->at("Bank"));
        }
        inline PrimArray<Ent::Gen::String> ReflectedDetailMaterialBank::Filters() const
        {
            return PrimArray<Ent::Gen::String>(node->at("Filters"));
        }
        inline Ent::Gen::ReflectedMaterialGroupVector ReflectedDetailMaterialBank::Groups() const
        {
            return Ent::Gen::ReflectedMaterialGroupVector(node->at("Groups"));
        }
        inline Ent::Gen::String ReflectedDetailMaterialBank::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RecastNavmeshGenerationParameters
        inline Ent::Gen::Float RecastNavmeshGenerationParameters::CreatureHeight() const
        {
            return Ent::Gen::Float(node->at("CreatureHeight"));
        }
        inline Ent::Gen::Float RecastNavmeshGenerationParameters::CreatureRadius() const
        {
            return Ent::Gen::Float(node->at("CreatureRadius"));
        }
        inline Ent::Gen::String RecastNavmeshGenerationParameters::CreatureType() const
        {
            return Ent::Gen::String(node->at("CreatureType"));
        }
        inline Ent::Gen::Float RecastNavmeshGenerationParameters::DeepWaterDepth() const
        {
            return Ent::Gen::Float(node->at("DeepWaterDepth"));
        }
        inline Ent::Gen::Bool RecastNavmeshGenerationParameters::MarkWaterAreas() const
        {
            return Ent::Gen::Bool(node->at("MarkWaterAreas"));
        }
        inline Ent::Gen::Float RecastNavmeshGenerationParameters::MaxClimbHeight() const
        {
            return Ent::Gen::Float(node->at("MaxClimbHeight"));
        }
        inline Ent::Gen::Float RecastNavmeshGenerationParameters::MaxWalkableSlopeAngle() const
        {
            return Ent::Gen::Float(node->at("MaxWalkableSlopeAngle"));
        }
        inline Ent::Gen::Float RecastNavmeshGenerationParameters::MinWaterDepth() const
        {
            return Ent::Gen::Float(node->at("MinWaterDepth"));
        }
        inline Ent::Gen::Float RecastNavmeshGenerationParameters::VoxelPrecision() const
        {
            return Ent::Gen::Float(node->at("VoxelPrecision"));
        }
        inline Ent::Gen::String RecastNavmeshGenerationParameters::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // sPhysicsJointDesc
        inline Ent::Gen::sJointBallDesc sPhysicsJointDesc::Ball() const
        {
            return Ent::Gen::sJointBallDesc(node->at("Ball"));
        }
        inline Ent::Gen::sJointFixedDesc sPhysicsJointDesc::Fixed() const
        {
            return Ent::Gen::sJointFixedDesc(node->at("Fixed"));
        }
        inline Ent::Gen::sJointHingeDesc sPhysicsJointDesc::Hinge() const
        {
            return Ent::Gen::sJointHingeDesc(node->at("Hinge"));
        }
        inline Ent::Gen::String sPhysicsJointDesc::JointType() const
        {
            return Ent::Gen::String(node->at("JointType"));
        }
        inline Ent::Gen::sJointSliderDesc sPhysicsJointDesc::Slider() const
        {
            return Ent::Gen::sJointSliderDesc(node->at("Slider"));
        }
        inline Ent::Gen::sJointSwingTwistDesc sPhysicsJointDesc::SwingTwist() const
        {
            return Ent::Gen::sJointSwingTwistDesc(node->at("SwingTwist"));
        }
        inline Ent::Gen::sJointUniversalDesc sPhysicsJointDesc::Universal() const
        {
            return Ent::Gen::sJointUniversalDesc(node->at("Universal"));
        }
        inline Ent::Gen::String sPhysicsJointDesc::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline PrimArray<Ent::Gen::String> sPhysicsJointDesc::flags() const
        {
            return PrimArray<Ent::Gen::String>(node->at("flags"));
        }
        inline Ent::Gen::Int sPhysicsJointDesc::idRigodBodyA() const
        {
            return Ent::Gen::Int(node->at("idRigodBodyA"));
        }
        inline Ent::Gen::Int sPhysicsJointDesc::idRigodBodyB() const
        {
            return Ent::Gen::Int(node->at("idRigodBodyB"));
        }
        inline Ent::Gen::Quat sPhysicsJointDesc::orientation() const
        {
            return Ent::Gen::Quat(node->at("orientation"));
        }
        inline Ent::Gen::String sPhysicsJointDesc::parent() const
        {
            return Ent::Gen::String(node->at("parent"));
        }
        inline Ent::Gen::Vector3 sPhysicsJointDesc::translation() const
        {
            return Ent::Gen::Vector3(node->at("translation"));
        }
        // sPhysicShape
        inline Ent::Gen::sPhysicsShapeBox sPhysicShape::Box() const
        {
            return Ent::Gen::sPhysicsShapeBox(node->at("Box"));
        }
        inline Ent::Gen::sPhysicsShapeCapsule sPhysicShape::Capsule() const
        {
            return Ent::Gen::sPhysicsShapeCapsule(node->at("Capsule"));
        }
        inline Ent::Gen::sPhysicsShapeCylinder sPhysicShape::Cylinder() const
        {
            return Ent::Gen::sPhysicsShapeCylinder(node->at("Cylinder"));
        }
        inline Ent::Gen::sPhysicsShapeMesh sPhysicShape::Mesh() const
        {
            return Ent::Gen::sPhysicsShapeMesh(node->at("Mesh"));
        }
        inline Ent::Gen::String sPhysicShape::PhysicsMaterial() const
        {
            return Ent::Gen::String(node->at("PhysicsMaterial"));
        }
        inline Ent::Gen::sPhysicsShapeSphere sPhysicShape::Sphere() const
        {
            return Ent::Gen::sPhysicsShapeSphere(node->at("Sphere"));
        }
        inline Ent::Gen::String sPhysicShape::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 sPhysicShape::angles() const
        {
            return Ent::Gen::Vector3(node->at("angles"));
        }
        inline Ent::Gen::Quat sPhysicShape::orientation() const
        {
            return Ent::Gen::Quat(node->at("orientation"));
        }
        inline Ent::Gen::Float sPhysicShape::scale() const
        {
            return Ent::Gen::Float(node->at("scale"));
        }
        inline Ent::Gen::Vector3 sPhysicShape::translation() const
        {
            return Ent::Gen::Vector3(node->at("translation"));
        }
        // sRigidBodyDesc
        inline Ent::Gen::String sRigidBodyDesc::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 sRigidBodyDesc::angles() const
        {
            return Ent::Gen::Vector3(node->at("angles"));
        }
        inline PrimArray<Ent::Gen::String> sRigidBodyDesc::flags() const
        {
            return PrimArray<Ent::Gen::String>(node->at("flags"));
        }
        inline Ent::Gen::Int sRigidBodyDesc::id() const
        {
            return Ent::Gen::Int(node->at("id"));
        }
        inline Ent::Gen::String sRigidBodyDesc::motionType() const
        {
            return Ent::Gen::String(node->at("motionType"));
        }
        inline Ent::Gen::Quat sRigidBodyDesc::orientation() const
        {
            return Ent::Gen::Quat(node->at("orientation"));
        }
        inline Ent::Gen::String sRigidBodyDesc::parent() const
        {
            return Ent::Gen::String(node->at("parent"));
        }
        inline Ent::Gen::Float sRigidBodyDesc::scale() const
        {
            return Ent::Gen::Float(node->at("scale"));
        }
        inline Array<Ent::Gen::sPhysicShape> sRigidBodyDesc::shapes() const
        {
            return Array<Ent::Gen::sPhysicShape>(node->at("shapes"));
        }
        inline Ent::Gen::Vector3 sRigidBodyDesc::translation() const
        {
            return Ent::Gen::Vector3(node->at("translation"));
        }
        // Transform3D
        inline Ent::Gen::String Transform3D::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Quat Transform3D::orientation() const
        {
            return Ent::Gen::Quat(node->at("orientation"));
        }
        inline Ent::Gen::Vector3 Transform3D::scale() const
        {
            return Ent::Gen::Vector3(node->at("scale"));
        }
        inline Ent::Gen::Vector3 Transform3D::translation() const
        {
            return Ent::Gen::Vector3(node->at("translation"));
        }
        // ProjectileShooterData
        inline Ent::Gen::EntityRef ProjectileShooterData::SubEntity() const
        {
            return Ent::Gen::EntityRef(node->at("SubEntity"));
        }
        inline Ent::Gen::String ProjectileShooterData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ProjectileData
        inline Ent::Gen::String ProjectileData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ProjectileData::canCollideWithOtherProjectiles() const
        {
            return Ent::Gen::Bool(node->at("canCollideWithOtherProjectiles"));
        }
        inline Ent::Gen::Float ProjectileData::damages() const
        {
            return Ent::Gen::Float(node->at("damages"));
        }
        inline Ent::Gen::Float ProjectileData::deleteAfterPlantTimer() const
        {
            return Ent::Gen::Float(node->at("deleteAfterPlantTimer"));
        }
        inline Ent::Gen::Bool ProjectileData::destroyOnHit() const
        {
            return Ent::Gen::Bool(node->at("destroyOnHit"));
        }
        inline Ent::Gen::Float ProjectileData::distanceFromBodyAtLaunch() const
        {
            return Ent::Gen::Float(node->at("distanceFromBodyAtLaunch"));
        }
        inline Ent::Gen::Bool ProjectileData::explodeOnFire() const
        {
            return Ent::Gen::Bool(node->at("explodeOnFire"));
        }
        inline Ent::Gen::Float ProjectileData::explosionShockForce() const
        {
            return Ent::Gen::Float(node->at("explosionShockForce"));
        }
        inline PrimArray<Ent::Gen::String> ProjectileData::gameEffectOnHit() const
        {
            return PrimArray<Ent::Gen::String>(node->at("gameEffectOnHit"));
        }
        inline Ent::Gen::Float ProjectileData::gravity() const
        {
            return Ent::Gen::Float(node->at("gravity"));
        }
        inline Ent::Gen::Bool ProjectileData::hasNoCollision() const
        {
            return Ent::Gen::Bool(node->at("hasNoCollision"));
        }
        inline Ent::Gen::Vector3 ProjectileData::hitSourceOffset() const
        {
            return Ent::Gen::Vector3(node->at("hitSourceOffset"));
        }
        inline Ent::Gen::Float ProjectileData::homingInRangeAnticipationDist() const
        {
            return Ent::Gen::Float(node->at("homingInRangeAnticipationDist"));
        }
        inline Ent::Gen::Float ProjectileData::homingMaxAngle() const
        {
            return Ent::Gen::Float(node->at("homingMaxAngle"));
        }
        inline Ent::Gen::Float ProjectileData::homingMaxFlightTime() const
        {
            return Ent::Gen::Float(node->at("homingMaxFlightTime"));
        }
        inline Ent::Gen::Float ProjectileData::homingMaxInFrontAnticipationDist() const
        {
            return Ent::Gen::Float(node->at("homingMaxInFrontAnticipationDist"));
        }
        inline Ent::Gen::Float ProjectileData::homingMaxTotalAnticipationDist() const
        {
            return Ent::Gen::Float(node->at("homingMaxTotalAnticipationDist"));
        }
        inline PrimArray<Ent::Gen::Float> ProjectileData::homingTotalAnticipationRatioSpeeds() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("homingTotalAnticipationRatioSpeeds"));
        }
        inline Ent::Gen::Float ProjectileData::impact() const
        {
            return Ent::Gen::Float(node->at("impact"));
        }
        inline Ent::Gen::Bool ProjectileData::isRegenProjectile() const
        {
            return Ent::Gen::Bool(node->at("isRegenProjectile"));
        }
        inline Ent::Gen::Bool ProjectileData::isThrowable() const
        {
            return Ent::Gen::Bool(node->at("isThrowable"));
        }
        inline Ent::Gen::Vector3 ProjectileData::launchRotation() const
        {
            return Ent::Gen::Vector3(node->at("launchRotation"));
        }
        inline Ent::Gen::Float ProjectileData::launchSpeed() const
        {
            return Ent::Gen::Float(node->at("launchSpeed"));
        }
        inline Ent::Gen::Float ProjectileData::noiseLevelOnImpact() const
        {
            return Ent::Gen::Float(node->at("noiseLevelOnImpact"));
        }
        inline Ent::Gen::Bool ProjectileData::shouldBeVisibleBeforeShoot() const
        {
            return Ent::Gen::Bool(node->at("shouldBeVisibleBeforeShoot"));
        }
        inline Ent::Gen::Float ProjectileData::smoothTime() const
        {
            return Ent::Gen::Float(node->at("smoothTime"));
        }
        inline Ent::Gen::Bool ProjectileData::stopOnWater() const
        {
            return Ent::Gen::Bool(node->at("stopOnWater"));
        }
        inline Ent::Gen::Float ProjectileData::straightDistance() const
        {
            return Ent::Gen::Float(node->at("straightDistance"));
        }
        inline Ent::Gen::Bool ProjectileData::visibleInFlight() const
        {
            return Ent::Gen::Bool(node->at("visibleInFlight"));
        }
        // ProgressSoundEventData
        inline Ent::Gen::String ProgressSoundEventData::DecreaseEventName() const
        {
            return Ent::Gen::String(node->at("DecreaseEventName"));
        }
        inline Ent::Gen::Float ProgressSoundEventData::DecreaseStartThreshold() const
        {
            return Ent::Gen::Float(node->at("DecreaseStartThreshold"));
        }
        inline Ent::Gen::Float ProgressSoundEventData::DecreaseStopThreshold() const
        {
            return Ent::Gen::Float(node->at("DecreaseStopThreshold"));
        }
        inline Ent::Gen::String ProgressSoundEventData::EventBank() const
        {
            return Ent::Gen::String(node->at("EventBank"));
        }
        inline Ent::Gen::Bool ProgressSoundEventData::EventLooping() const
        {
            return Ent::Gen::Bool(node->at("EventLooping"));
        }
        inline Ent::Gen::String ProgressSoundEventData::IncreaseEventName() const
        {
            return Ent::Gen::String(node->at("IncreaseEventName"));
        }
        inline Ent::Gen::Float ProgressSoundEventData::IncreaseStartThreshold() const
        {
            return Ent::Gen::Float(node->at("IncreaseStartThreshold"));
        }
        inline Ent::Gen::Float ProgressSoundEventData::IncreaseStopThreshold() const
        {
            return Ent::Gen::Float(node->at("IncreaseStopThreshold"));
        }
        inline Ent::Gen::String ProgressSoundEventData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PrimitiveShape
        inline Ent::Gen::Float PrimitiveShape::SDFPadding() const
        {
            return Ent::Gen::Float(node->at("SDFPadding"));
        }
        inline Ent::Gen::Float PrimitiveShape::SDFVoxelSize() const
        {
            return Ent::Gen::Float(node->at("SDFVoxelSize"));
        }
        inline Ent::Gen::String PrimitiveShape::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShapeSphere
        inline Ent::Gen::Float ShapeSphere::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::PrimitiveShape ShapeSphere::Super() const
        {
            return Ent::Gen::PrimitiveShape(node->at("Super"));
        }
        inline Ent::Gen::String ShapeSphere::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShapeBox
        inline Ent::Gen::Vector3 ShapeBox::Size() const
        {
            return Ent::Gen::Vector3(node->at("Size"));
        }
        inline Ent::Gen::PrimitiveShape ShapeBox::Super() const
        {
            return Ent::Gen::PrimitiveShape(node->at("Super"));
        }
        inline Ent::Gen::String ShapeBox::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PrimitiveData
        inline Ent::Gen::Float PrimitiveData::Height() const
        {
            return Ent::Gen::Float(node->at("Height"));
        }
        inline Ent::Gen::Float PrimitiveData::Length() const
        {
            return Ent::Gen::Float(node->at("Length"));
        }
        inline Ent::Gen::Float PrimitiveData::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::Float PrimitiveData::Width() const
        {
            return Ent::Gen::Float(node->at("Width"));
        }
        inline Ent::Gen::String PrimitiveData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PredictionBehaviorDuration
        inline Ent::Gen::Float PredictionBehaviorDuration::Locked() const
        {
            return Ent::Gen::Float(node->at("Locked"));
        }
        inline Ent::Gen::Float PredictionBehaviorDuration::Step() const
        {
            return Ent::Gen::Float(node->at("Step"));
        }
        inline Ent::Gen::Float PredictionBehaviorDuration::Total() const
        {
            return Ent::Gen::Float(node->at("Total"));
        }
        inline Ent::Gen::String PredictionBehaviorDuration::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PredictionBehaviorData
        inline Ent::Gen::PredictionBehaviorDuration PredictionBehaviorData::Duration() const
        {
            return Ent::Gen::PredictionBehaviorDuration(node->at("Duration"));
        }
        inline Ent::Gen::String PredictionBehaviorData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // constraintPlaneWorldPosition
        inline Ent::Gen::String constraintPlaneWorldPosition::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool constraintPlaneWorldPosition::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Position constraintPlaneWorldPosition::val() const
        {
            return Ent::Gen::Position(node->at("val"));
        }
        // ProjectileTrajectory
        inline Ent::Gen::String ProjectileTrajectory::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 ProjectileTrajectory::m_direction() const
        {
            return Ent::Gen::Vector3(node->at("m_direction"));
        }
        inline Ent::Gen::Position ProjectileTrajectory::m_position() const
        {
            return Ent::Gen::Position(node->at("m_position"));
        }
        inline Ent::Gen::Float ProjectileTrajectory::m_speed() const
        {
            return Ent::Gen::Float(node->at("m_speed"));
        }
        inline Ent::Gen::Float ProjectileTrajectory::m_straightDistance() const
        {
            return Ent::Gen::Float(node->at("m_straightDistance"));
        }
        // PlayRatio
        inline Ent::Gen::String PlayRatio::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool PlayRatio::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float PlayRatio::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // PhysicsMaterial
        inline PrimArray<Ent::Gen::String> PhysicsMaterial::ClimbablePerSize() const
        {
            return PrimArray<Ent::Gen::String>(node->at("ClimbablePerSize"));
        }
        inline Ent::Gen::Int PhysicsMaterial::MaterialId() const
        {
            return Ent::Gen::Int(node->at("MaterialId"));
        }
        inline Ent::Gen::String PhysicsMaterial::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::PrimitiveSet<char const*> PhysicsMaterial::Tags() const
        {
            return Ent::Gen::PrimitiveSet<char const*>(node->at("Tags"));
        }
        inline Ent::Gen::String PhysicsMaterial::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsEffectsManager_PhysicsLimits
        inline Ent::Gen::Int PhysicsEffectsManager_PhysicsLimits::AvgShapesPerRigidBody() const
        {
            return Ent::Gen::Int(node->at("AvgShapesPerRigidBody"));
        }
        inline Ent::Gen::Int PhysicsEffectsManager_PhysicsLimits::MaxDynamicRigidBodies() const
        {
            return Ent::Gen::Int(node->at("MaxDynamicRigidBodies"));
        }
        inline Ent::Gen::Int PhysicsEffectsManager_PhysicsLimits::MaxNonContactPairs() const
        {
            return Ent::Gen::Int(node->at("MaxNonContactPairs"));
        }
        inline Ent::Gen::Int PhysicsEffectsManager_PhysicsLimits::MaxStaticRigidBodies() const
        {
            return Ent::Gen::Int(node->at("MaxStaticRigidBodies"));
        }
        inline Ent::Gen::Int PhysicsEffectsManager_PhysicsLimits::MaxTriggerRigidBodies() const
        {
            return Ent::Gen::Int(node->at("MaxTriggerRigidBodies"));
        }
        inline Ent::Gen::String PhysicsEffectsManager_PhysicsLimits::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PerceiverComponentInput_usePerception
        inline Ent::Gen::String PerceiverComponentInput_usePerception::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool PerceiverComponentInput_usePerception::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool PerceiverComponentInput_usePerception::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // RadiusChange
        inline Ent::Gen::ScaleConverter RadiusChange::Entry() const
        {
            return Ent::Gen::ScaleConverter(node->at("Entry"));
        }
        inline Ent::Gen::ScaleConverter RadiusChange::Exit() const
        {
            return Ent::Gen::ScaleConverter(node->at("Exit"));
        }
        inline Ent::Gen::Pasta_Easing_Curve RadiusChange::InBetweenEasing() const
        {
            return Ent::Gen::Pasta_Easing_Curve(node->at("InBetweenEasing"));
        }
        inline Ent::Gen::String RadiusChange::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Parameters
        inline Ent::Gen::String Parameters::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool Parameters::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::SmoothScaleComponentInput_Parameters Parameters::val() const
        {
            return Ent::Gen::SmoothScaleComponentInput_Parameters(node->at("val"));
        }
        // Game_OwnershipDebugger
        inline PrimArray<Ent::Gen::OwnershipModuleDebugWindow> Game_OwnershipDebugger::Display() const
        {
            return PrimArray<Ent::Gen::OwnershipModuleDebugWindow>(node->at("Display"));
        }
        inline Ent::Gen::String Game_OwnershipDebugger::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // OutfitPiece
        inline Ent::Gen::EntityRef OutfitPiece::EntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("EntityRef"));
        }
        inline Ent::Gen::OutfitPieceType OutfitPiece::Slot() const
        {
            return Ent::Gen::OutfitPieceType(node->at("Slot"));
        }
        inline Ent::Gen::String OutfitPiece::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Orientation
        inline Ent::Gen::String Orientation::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool Orientation::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Quat Orientation::val() const
        {
            return Ent::Gen::Quat(node->at("val"));
        }
        // Online
        // MusicCategory
        inline Ent::Gen::String MusicCategory::EventName() const
        {
            return Ent::Gen::String(node->at("EventName"));
        }
        inline Ent::Gen::String MusicCategory::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Int MusicCategory::Weight() const
        {
            return Ent::Gen::Int(node->at("Weight"));
        }
        inline Ent::Gen::String MusicCategory::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MoveCapacityData_OrientationSpeed
        inline Ent::Gen::String MoveCapacityData_OrientationSpeed::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 MoveCapacityData_OrientationSpeed::factor() const
        {
            return Ent::Gen::Vector3(node->at("factor"));
        }
        inline Ent::Gen::Vector3 MoveCapacityData_OrientationSpeed::rate() const
        {
            return Ent::Gen::Vector3(node->at("rate"));
        }
        inline Ent::Gen::ScaleConverter MoveCapacityData_OrientationSpeed::rotationRollFromAngularSpeed() const
        {
            return Ent::Gen::ScaleConverter(node->at("rotationRollFromAngularSpeed"));
        }
        inline Ent::Gen::ScaleConverter MoveCapacityData_OrientationSpeed::speedFactorFromSpeedSlow() const
        {
            return Ent::Gen::ScaleConverter(node->at("speedFactorFromSpeedSlow"));
        }
        inline Ent::Gen::Vector3 MoveCapacityData_OrientationSpeed::speedMax() const
        {
            return Ent::Gen::Vector3(node->at("speedMax"));
        }
        inline Ent::Gen::Vector3 MoveCapacityData_OrientationSpeed::steeringAngle() const
        {
            return Ent::Gen::Vector3(node->at("steeringAngle"));
        }
        // MountableSnapLine_ControlPoint
        inline Ent::Gen::String MountableSnapLine_ControlPoint::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int MountableSnapLine_ControlPoint::boneId() const
        {
            return Ent::Gen::Int(node->at("boneId"));
        }
        inline Ent::Gen::Vector3 MountableSnapLine_ControlPoint::offset() const
        {
            return Ent::Gen::Vector3(node->at("offset"));
        }
        inline Ent::Gen::Float MountableSnapLine_ControlPoint::radius() const
        {
            return Ent::Gen::Float(node->at("radius"));
        }
        // MountableData
        inline Ent::Gen::Int MountableData::HotspotID() const
        {
            return Ent::Gen::Int(node->at("HotspotID"));
        }
        inline Ent::Gen::String MountableData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MinReviveRatio
        inline Ent::Gen::String MinReviveRatio::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool MinReviveRatio::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float MinReviveRatio::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // MinRespawnDistance
        inline Ent::Gen::String MinRespawnDistance::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool MinRespawnDistance::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float MinRespawnDistance::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // MinDistanceToRespawnPosition
        inline Ent::Gen::String MinDistanceToRespawnPosition::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool MinDistanceToRespawnPosition::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float MinDistanceToRespawnPosition::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // MeshesItem
        inline Ent::Gen::String MeshesItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String MeshesItem::mesh() const
        {
            return Ent::Gen::String(node->at("mesh"));
        }
        // RUNTIME_LODsItem
        inline Array<Ent::Gen::MeshesItem> RUNTIME_LODsItem::Meshes() const
        {
            return Array<Ent::Gen::MeshesItem>(node->at("Meshes"));
        }
        inline Ent::Gen::String RUNTIME_LODsItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MeshNavigationBehaviorData
        inline Ent::Gen::Float MeshNavigationBehaviorData::DeltaAngleMinToPrepareToHoldingOnToNavigationMesh() const
        {
            return Ent::Gen::Float(node->at("DeltaAngleMinToPrepareToHoldingOnToNavigationMesh"));
        }
        inline Ent::Gen::Bool MeshNavigationBehaviorData::EdgeTransitionConstraintAllowed() const
        {
            return Ent::Gen::Bool(node->at("EdgeTransitionConstraintAllowed"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::EdgeTransitionConstraintLedgeAngle() const
        {
            return Ent::Gen::Float(node->at("EdgeTransitionConstraintLedgeAngle"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::EdgeTransitionConstraintWallAngle() const
        {
            return Ent::Gen::Float(node->at("EdgeTransitionConstraintWallAngle"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::MaxNormalAngle() const
        {
            return Ent::Gen::Float(node->at("MaxNormalAngle"));
        }
        inline Ent::Gen::MeshNavigationAllowedMode MeshNavigationBehaviorData::MeshNavigationAllowedMode() const
        {
            return Ent::Gen::MeshNavigationAllowedMode(node->at("MeshNavigationAllowedMode"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::OrientationRateToPrepareToHoldingOnToNavigationMesh() const
        {
            return Ent::Gen::Float(node->at("OrientationRateToPrepareToHoldingOnToNavigationMesh"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::RayCastLengthLegFactor() const
        {
            return Ent::Gen::Float(node->at("RayCastLengthLegFactor"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::RayCastLengthSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("RayCastLengthSpeedFactor"));
        }
        inline Ent::Gen::Bool MeshNavigationBehaviorData::RollAllowed() const
        {
            return Ent::Gen::Bool(node->at("RollAllowed"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::SlopeAngleMinForWall() const
        {
            return Ent::Gen::Float(node->at("SlopeAngleMinForWall"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::SlopeAngleMinToAllowStickedLand() const
        {
            return Ent::Gen::Float(node->at("SlopeAngleMinToAllowStickedLand"));
        }
        inline Ent::Gen::Bool MeshNavigationBehaviorData::StickToAnyNormalAllowed() const
        {
            return Ent::Gen::Bool(node->at("StickToAnyNormalAllowed"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::VerticalAngleMinToUseLandingTreeAnimation() const
        {
            return Ent::Gen::Float(node->at("VerticalAngleMinToUseLandingTreeAnimation"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::WallFrontProbeLengthFactor() const
        {
            return Ent::Gen::Float(node->at("WallFrontProbeLengthFactor"));
        }
        inline Ent::Gen::Float MeshNavigationBehaviorData::WallRepulseFactor() const
        {
            return Ent::Gen::Float(node->at("WallRepulseFactor"));
        }
        inline Ent::Gen::String MeshNavigationBehaviorData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VolumeConstraintDataGD
        inline Ent::Gen::Vector3 VolumeConstraintDataGD::CameraConstraintLocalAxis() const
        {
            return Ent::Gen::Vector3(node->at("CameraConstraintLocalAxis"));
        }
        inline Ent::Gen::Matrix44 VolumeConstraintDataGD::Matrix() const
        {
            return Ent::Gen::Matrix44(node->at("Matrix"));
        }
        inline Ent::Gen::TransitionNeighborData VolumeConstraintDataGD::Neighbors() const
        {
            return Ent::Gen::TransitionNeighborData(node->at("Neighbors"));
        }
        inline Ent::Gen::Vector3 VolumeConstraintDataGD::Size() const
        {
            return Ent::Gen::Vector3(node->at("Size"));
        }
        inline PrimArray<Ent::Gen::String> VolumeConstraintDataGD::Tags() const
        {
            return PrimArray<Ent::Gen::String>(node->at("Tags"));
        }
        inline Ent::Gen::String VolumeConstraintDataGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Game_MacroNavMeshStamper
        inline Ent::Gen::Vector3 Game_MacroNavMeshStamper::BoundingBox() const
        {
            return Ent::Gen::Vector3(node->at("BoundingBox"));
        }
        inline Ent::Gen::Matrix44 Game_MacroNavMeshStamper::Matrix() const
        {
            return Ent::Gen::Matrix44(node->at("Matrix"));
        }
        inline Ent::Gen::String Game_MacroNavMeshStamper::NavmeshPath() const
        {
            return Ent::Gen::String(node->at("NavmeshPath"));
        }
        inline Ent::Gen::Vector3 Game_MacroNavMeshStamper::Position() const
        {
            return Ent::Gen::Vector3(node->at("Position"));
        }
        inline Ent::Gen::Float Game_MacroNavMeshStamper::RotationZ() const
        {
            return Ent::Gen::Float(node->at("RotationZ"));
        }
        inline Ent::Gen::Bool Game_MacroNavMeshStamper::StickToGround() const
        {
            return Ent::Gen::Bool(node->at("StickToGround"));
        }
        inline Ent::Gen::String Game_MacroNavMeshStamper::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PointCloudInstanceDataResource
        inline Ent::Gen::String PointCloudInstanceDataResource::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int PointCloudInstanceDataResource::index() const
        {
            return Ent::Gen::Int(node->at("index"));
        }
        inline Ent::Gen::Matrix43 PointCloudInstanceDataResource::matrix() const
        {
            return Ent::Gen::Matrix43(node->at("matrix"));
        }
        // PointCloudChunk
        inline Ent::Gen::String PointCloudChunk::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int PointCloudChunk::chunkPosX() const
        {
            return Ent::Gen::Int(node->at("chunkPosX"));
        }
        inline Ent::Gen::Int PointCloudChunk::chunkPosY() const
        {
            return Ent::Gen::Int(node->at("chunkPosY"));
        }
        inline Ent::Gen::Int PointCloudChunk::chunkPosZ() const
        {
            return Ent::Gen::Int(node->at("chunkPosZ"));
        }
        inline Array<Ent::Gen::PointCloudInstanceDataResource> PointCloudChunk::instances() const
        {
            return Array<Ent::Gen::PointCloudInstanceDataResource>(node->at("instances"));
        }
        // MapOfObjectItem_A
        inline Ent::Gen::String MapOfObjectItem_A::Value() const
        {
            return Ent::Gen::String(node->at("Value"));
        }
        inline Ent::Gen::String MapOfObjectItem_A::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Manager_EntityID
        // Manager
        inline Ent::Gen::Manager_EntityID Manager::EntityID() const
        {
            return Ent::Gen::Manager_EntityID(node->at("EntityID"));
        }
        inline Ent::Gen::String Manager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // WorldManager
        inline Ent::Gen::Manager WorldManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String WorldManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // WaveManager
        inline Ent::Gen::Manager WaveManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String WaveManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // WaterManager
        inline Ent::Gen::Manager WaterManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::Float WaterManager::WaterHeight() const
        {
            return Ent::Gen::Float(node->at("WaterHeight"));
        }
        inline Ent::Gen::String WaterManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VisualManager
        inline Ent::Gen::Manager VisualManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String VisualManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VegetationManager
        inline Ent::Gen::Float VegetationManager::BuryDepth() const
        {
            return Ent::Gen::Float(node->at("BuryDepth"));
        }
        inline Ent::Gen::Float VegetationManager::BuryScaleThreshold() const
        {
            return Ent::Gen::Float(node->at("BuryScaleThreshold"));
        }
        inline Ent::Gen::Bool VegetationManager::BuryVeget() const
        {
            return Ent::Gen::Bool(node->at("BuryVeget"));
        }
        inline Ent::Gen::Float VegetationManager::FadeOutScaleThreshold() const
        {
            return Ent::Gen::Float(node->at("FadeOutScaleThreshold"));
        }
        inline Ent::Gen::Bool VegetationManager::FadeOutVeget() const
        {
            return Ent::Gen::Bool(node->at("FadeOutVeget"));
        }
        inline Ent::Gen::Float VegetationManager::FullScaleGrowDistanceHysteresis() const
        {
            return Ent::Gen::Float(node->at("FullScaleGrowDistanceHysteresis"));
        }
        inline Ent::Gen::Float VegetationManager::FullScaleGrowDistanceThreshold() const
        {
            return Ent::Gen::Float(node->at("FullScaleGrowDistanceThreshold"));
        }
        inline Ent::Gen::Float VegetationManager::FullScaleGrowMaxRatio() const
        {
            return Ent::Gen::Float(node->at("FullScaleGrowMaxRatio"));
        }
        inline Ent::Gen::Float VegetationManager::FullScaleGrowMinRatio() const
        {
            return Ent::Gen::Float(node->at("FullScaleGrowMinRatio"));
        }
        inline Ent::Gen::Float VegetationManager::GlobalDistanceMultiplier() const
        {
            return Ent::Gen::Float(node->at("GlobalDistanceMultiplier"));
        }
        inline Ent::Gen::Bool VegetationManager::PreloadVegetation() const
        {
            return Ent::Gen::Bool(node->at("PreloadVegetation"));
        }
        inline Ent::Gen::Bool VegetationManager::RegenInterpolation() const
        {
            return Ent::Gen::Bool(node->at("RegenInterpolation"));
        }
        inline Ent::Gen::Float VegetationManager::ScaleSpeed() const
        {
            return Ent::Gen::Float(node->at("ScaleSpeed"));
        }
        inline Ent::Gen::Manager VegetationManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String VegetationManager::VegetationBankPath() const
        {
            return Ent::Gen::String(node->at("VegetationBankPath"));
        }
        inline Ent::Gen::String VegetationManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TrailManager
        inline Ent::Gen::Manager TrailManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String TrailManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TerrainManager
        inline Ent::Gen::Manager TerrainManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String TerrainManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SyncTempoManager
        inline Ent::Gen::Int SyncTempoManager::DefaultTempo() const
        {
            return Ent::Gen::Int(node->at("DefaultTempo"));
        }
        inline Ent::Gen::String SyncTempoManager::RTPC_Tempo() const
        {
            return Ent::Gen::String(node->at("RTPC_Tempo"));
        }
        inline Ent::Gen::String SyncTempoManager::StartSyncClickEvent() const
        {
            return Ent::Gen::String(node->at("StartSyncClickEvent"));
        }
        inline Ent::Gen::String SyncTempoManager::StartSyncEvent() const
        {
            return Ent::Gen::String(node->at("StartSyncEvent"));
        }
        inline Ent::Gen::String SyncTempoManager::StopSyncClickEvent() const
        {
            return Ent::Gen::String(node->at("StopSyncClickEvent"));
        }
        inline Ent::Gen::String SyncTempoManager::StopSyncEvent() const
        {
            return Ent::Gen::String(node->at("StopSyncEvent"));
        }
        inline Ent::Gen::Manager SyncTempoManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String SyncTempoManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // StreamingManager
        inline Ent::Gen::Bool StreamingManager::DisableStreaming() const
        {
            return Ent::Gen::Bool(node->at("DisableStreaming"));
        }
        inline Ent::Gen::Manager StreamingManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String StreamingManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SpatialMapManager
        inline Ent::Gen::Manager SpatialMapManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String SpatialMapManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShamanVisionManager
        inline Ent::Gen::Float ShamanVisionManager::HighlightFactorGoddess() const
        {
            return Ent::Gen::Float(node->at("HighlightFactorGoddess"));
        }
        inline Ent::Gen::Float ShamanVisionManager::HighlightFactorPlayer() const
        {
            return Ent::Gen::Float(node->at("HighlightFactorPlayer"));
        }
        inline Ent::Gen::Float ShamanVisionManager::HighlightFactorSpecie() const
        {
            return Ent::Gen::Float(node->at("HighlightFactorSpecie"));
        }
        inline Ent::Gen::Bool ShamanVisionManager::ShowEnemiesState() const
        {
            return Ent::Gen::Bool(node->at("ShowEnemiesState"));
        }
        inline Ent::Gen::Bool ShamanVisionManager::ShowInjuredState() const
        {
            return Ent::Gen::Bool(node->at("ShowInjuredState"));
        }
        inline Ent::Gen::Bool ShamanVisionManager::ShowPlayersState() const
        {
            return Ent::Gen::Bool(node->at("ShowPlayersState"));
        }
        inline Ent::Gen::Bool ShamanVisionManager::ShowPrisonersState() const
        {
            return Ent::Gen::Bool(node->at("ShowPrisonersState"));
        }
        inline Ent::Gen::Bool ShamanVisionManager::ShowSpecieIcons() const
        {
            return Ent::Gen::Bool(node->at("ShowSpecieIcons"));
        }
        inline Ent::Gen::Float ShamanVisionManager::StateMinSizeDistance() const
        {
            return Ent::Gen::Float(node->at("StateMinSizeDistance"));
        }
        inline Ent::Gen::Manager ShamanVisionManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::Float ShamanVisionManager::TimerFactorGoddess() const
        {
            return Ent::Gen::Float(node->at("TimerFactorGoddess"));
        }
        inline Ent::Gen::Float ShamanVisionManager::TimerFactorPlayer() const
        {
            return Ent::Gen::Float(node->at("TimerFactorPlayer"));
        }
        inline Ent::Gen::Float ShamanVisionManager::TimerFactorSpecie() const
        {
            return Ent::Gen::Float(node->at("TimerFactorSpecie"));
        }
        inline Ent::Gen::String ShamanVisionManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SensorManager
        inline Ent::Gen::Int SensorManager::SensorPoolSize() const
        {
            return Ent::Gen::Int(node->at("SensorPoolSize"));
        }
        inline Ent::Gen::Manager SensorManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String SensorManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Scheduler
        inline Ent::Gen::Manager Scheduler::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String Scheduler::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SceneManager
        inline Ent::Gen::Manager SceneManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String SceneManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ResourceDebugger
        inline Ent::Gen::Manager ResourceDebugger::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String ResourceDebugger::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReloadManager
        inline Ent::Gen::Manager ReloadManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String ReloadManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RegionManager
        inline Ent::Gen::Manager RegionManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String RegionManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RPCServerManager
        inline Ent::Gen::Manager RPCServerManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String RPCServerManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RPCMarshallingTests
        inline Ent::Gen::Manager RPCMarshallingTests::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String RPCMarshallingTests::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // QualityManager
        inline Ent::Gen::Float QualityManager::EntityLODDistanceHysteresis() const
        {
            return Ent::Gen::Float(node->at("EntityLODDistanceHysteresis"));
        }
        inline Ent::Gen::Manager QualityManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String QualityManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PlayerManager
        inline Ent::Gen::String PlayerManager::SaveGame() const
        {
            return Ent::Gen::String(node->at("SaveGame"));
        }
        inline Ent::Gen::Manager PlayerManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String PlayerManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsEffectsManager
        inline Ent::Gen::Float PhysicsEffectsManager::GravityConstant() const
        {
            return Ent::Gen::Float(node->at("GravityConstant"));
        }
        inline Ent::Gen::PhysicsEffectsManager_PhysicsLimits PhysicsEffectsManager::Limits() const
        {
            return Ent::Gen::PhysicsEffectsManager_PhysicsLimits(node->at("Limits"));
        }
        inline Array<Ent::Gen::PhysicsMaterial> PhysicsEffectsManager::MaterialBank() const
        {
            return Array<Ent::Gen::PhysicsMaterial>(node->at("MaterialBank"));
        }
        inline Ent::Gen::Manager PhysicsEffectsManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String PhysicsEffectsManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PestoManager
        inline Ent::Gen::Manager PestoManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String PestoManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PerceptionManager
        inline PrimArray<Ent::Gen::Float> PerceptionManager::DistanceMultipliers() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("DistanceMultipliers"));
        }
        inline Ent::Gen::Manager PerceptionManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String PerceptionManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ParticleManager
        inline Ent::Gen::Int ParticleManager::PoolSize() const
        {
            return Ent::Gen::Int(node->at("PoolSize"));
        }
        inline Ent::Gen::Manager ParticleManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String ParticleManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // NavMeshManager
        inline Ent::Gen::Float NavMeshManager::NavMeshMaxHeight() const
        {
            return Ent::Gen::Float(node->at("NavMeshMaxHeight"));
        }
        inline Ent::Gen::Float NavMeshManager::NavMeshMaxSize() const
        {
            return Ent::Gen::Float(node->at("NavMeshMaxSize"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::RecastNavmeshGenerationParameters> NavMeshManager::RecastParameters() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::RecastNavmeshGenerationParameters>(node->at("RecastParameters"));
        }
        inline Ent::Gen::Manager NavMeshManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::Float NavMeshManager::TileMargin() const
        {
            return Ent::Gen::Float(node->at("TileMargin"));
        }
        inline Ent::Gen::Float NavMeshManager::TileSize() const
        {
            return Ent::Gen::Float(node->at("TileSize"));
        }
        inline Ent::Gen::Float NavMeshManager::VerticalTolerance() const
        {
            return Ent::Gen::Float(node->at("VerticalTolerance"));
        }
        inline Ent::Gen::String NavMeshManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // LoadSaveManager
        inline Ent::Gen::String LoadSaveManager::ClothDataFile() const
        {
            return Ent::Gen::String(node->at("ClothDataFile"));
        }
        inline Ent::Gen::String LoadSaveManager::IconDataFile() const
        {
            return Ent::Gen::String(node->at("IconDataFile"));
        }
        inline Ent::Gen::Manager LoadSaveManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String LoadSaveManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // LightManager
        inline Ent::Gen::Manager LightManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String LightManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InputManager
        inline Ent::Gen::Manager InputManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String InputManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InfoboardManager
        inline Ent::Gen::Manager InfoboardManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String InfoboardManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HeightMapManager
        inline Ent::Gen::Manager HeightMapManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String HeightMapManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GroundTypeManager
        inline Ent::Gen::Manager GroundTypeManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String GroundTypeManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameMasterManager
        inline Ent::Gen::Float GameMasterManager::MaxTimeBetweenSoulOpportunityRespawn() const
        {
            return Ent::Gen::Float(node->at("MaxTimeBetweenSoulOpportunityRespawn"));
        }
        inline Ent::Gen::Float GameMasterManager::MinDistBetweenSoulOpportunityRespawn() const
        {
            return Ent::Gen::Float(node->at("MinDistBetweenSoulOpportunityRespawn"));
        }
        inline Ent::Gen::Float GameMasterManager::RadiusWithoutEnemy() const
        {
            return Ent::Gen::Float(node->at("RadiusWithoutEnemy"));
        }
        inline Ent::Gen::Float GameMasterManager::SoulOpportunitySpawnRadius() const
        {
            return Ent::Gen::Float(node->at("SoulOpportunitySpawnRadius"));
        }
        inline Ent::Gen::Float GameMasterManager::SoulOpportunityUnspawnInsideFrustumRadius() const
        {
            return Ent::Gen::Float(node->at("SoulOpportunityUnspawnInsideFrustumRadius"));
        }
        inline Ent::Gen::Float GameMasterManager::SoulOpportunityUnspawnOutsideFrustumRadius() const
        {
            return Ent::Gen::Float(node->at("SoulOpportunityUnspawnOutsideFrustumRadius"));
        }
        inline Ent::Gen::Manager GameMasterManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String GameMasterManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameEffectManager
        inline Ent::Gen::String GameEffectManager::GameEffectFileExtension() const
        {
            return Ent::Gen::String(node->at("GameEffectFileExtension"));
        }
        inline Ent::Gen::String GameEffectManager::GameEffectsRootPath() const
        {
            return Ent::Gen::String(node->at("GameEffectsRootPath"));
        }
        inline Ent::Gen::Manager GameEffectManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String GameEffectManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidManager
        inline Ent::Gen::Manager FluidManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String FluidManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidGameplayQueriesManager
        inline Ent::Gen::Manager FluidGameplayQueriesManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String FluidGameplayQueriesManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FightManager
        inline Ent::Gen::Manager FightManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String FightManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EventManager
        inline Ent::Gen::Manager EventManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String EventManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnvironmentManager
        inline Ent::Gen::Manager EnvironmentManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String EnvironmentManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityManager
        inline Ent::Gen::Manager EntityManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String EntityManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DialogManager
        inline Ent::Gen::String DialogManager::DialogFileExtension() const
        {
            return Ent::Gen::String(node->at("DialogFileExtension"));
        }
        inline Ent::Gen::String DialogManager::DialogsRootPath() const
        {
            return Ent::Gen::String(node->at("DialogsRootPath"));
        }
        inline Ent::Gen::Manager DialogManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String DialogManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BoidsManager
        inline Ent::Gen::Float BoidsManager::FirstRootSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("FirstRootSpeedFactor"));
        }
        inline Ent::Gen::Float BoidsManager::MergeEntityDistanceMultiplier() const
        {
            return Ent::Gen::Float(node->at("MergeEntityDistanceMultiplier"));
        }
        inline Ent::Gen::Manager BoidsManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String BoidsManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String BoidsManager::boidPresets() const
        {
            return Ent::Gen::String(node->at("boidPresets"));
        }
        // BillboardManager
        inline Ent::Gen::Manager BillboardManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String BillboardManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BehaviorManager
        inline Ent::Gen::Manager BehaviorManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String BehaviorManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimalManager
        inline Ent::Gen::Manager AnimalManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String AnimalManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String AnimalManager::animalName() const
        {
            return Ent::Gen::String(node->at("animalName"));
        }
        // ActorManager
        inline Array<PrimArray<Ent::Gen::Float>> ActorManager::SizePerceptionRanges() const
        {
            return Array<PrimArray<Ent::Gen::Float>>(node->at("SizePerceptionRanges"));
        }
        inline PrimArray<Ent::Gen::Float> ActorManager::Sizes() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("Sizes"));
        }
        inline Ent::Gen::Manager ActorManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String ActorManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateManager
        inline Ent::Gen::String ActionStateManager::ArbiterConfigFile() const
        {
            return Ent::Gen::String(node->at("ArbiterConfigFile"));
        }
        inline Ent::Gen::Bool ActionStateManager::ForceTraceActorState() const
        {
            return Ent::Gen::Bool(node->at("ForceTraceActorState"));
        }
        inline Ent::Gen::Manager ActionStateManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String ActionStateManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MoveCapacityData_ReachSpeed
        inline Ent::Gen::String MoveCapacityData_ReachSpeed::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float MoveCapacityData_ReachSpeed::acceleration() const
        {
            return Ent::Gen::Float(node->at("acceleration"));
        }
        inline Ent::Gen::Float MoveCapacityData_ReachSpeed::deceleration() const
        {
            return Ent::Gen::Float(node->at("deceleration"));
        }
        inline Ent::Gen::LocomotionMode MoveCapacityData_ReachSpeed::name() const
        {
            return Ent::Gen::LocomotionMode(node->at("name"));
        }
        // ListItem
        inline Ent::Gen::String ListItem::EntityPath() const
        {
            return Ent::Gen::String(node->at("EntityPath"));
        }
        inline Ent::Gen::EntityRef ListItem::EntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("EntityRef"));
        }
        inline Ent::Gen::String ListItem::Tag() const
        {
            return Ent::Gen::String(node->at("Tag"));
        }
        inline Ent::Gen::String ListItem::Thumbnail() const
        {
            return Ent::Gen::String(node->at("Thumbnail"));
        }
        inline Ent::Gen::String ListItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Light
        inline Ent::Gen::Float Light::Brightness() const
        {
            return Ent::Gen::Float(node->at("Brightness"));
        }
        inline Ent::Gen::Bool Light::Cast_Shadows() const
        {
            return Ent::Gen::Bool(node->at("Cast Shadows"));
        }
        inline Ent::Gen::Vector3 Light::Color() const
        {
            return Ent::Gen::Vector3(node->at("Color"));
        }
        inline Ent::Gen::Float Light::Dpsm_Plane_Threshold() const
        {
            return Ent::Gen::Float(node->at("Dpsm Plane Threshold"));
        }
        inline Ent::Gen::Float Light::Dpsm_Seam_Offset() const
        {
            return Ent::Gen::Float(node->at("Dpsm Seam Offset"));
        }
        inline Ent::Gen::Bool Light::Enabled() const
        {
            return Ent::Gen::Bool(node->at("Enabled"));
        }
        inline Ent::Gen::Float Light::Linear_attenuation_start() const
        {
            return Ent::Gen::Float(node->at("Linear attenuation start"));
        }
        inline Ent::Gen::Float Light::Linear_attenuation_stop() const
        {
            return Ent::Gen::Float(node->at("Linear attenuation stop"));
        }
        inline Ent::Gen::Float Light::Radial_attenuation_start() const
        {
            return Ent::Gen::Float(node->at("Radial attenuation start"));
        }
        inline Ent::Gen::Float Light::Radial_attenuation_stop() const
        {
            return Ent::Gen::Float(node->at("Radial attenuation stop"));
        }
        inline Ent::Gen::Float Light::Shadow_Depth_Bias() const
        {
            return Ent::Gen::Float(node->at("Shadow Depth Bias"));
        }
        inline Ent::Gen::Float Light::Shadow_Depth_Bias_Factor() const
        {
            return Ent::Gen::Float(node->at("Shadow Depth Bias Factor"));
        }
        inline Ent::Gen::LightType Light::Type_() const
        {
            return Ent::Gen::LightType(node->at("Type"));
        }
        inline Ent::Gen::Bool Light::Volumetric_Fog() const
        {
            return Ent::Gen::Bool(node->at("Volumetric Fog"));
        }
        inline Ent::Gen::String Light::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // LightAttackData
        inline Ent::Gen::ResponsiblePointer_ActorState_ LightAttackData::LightAttackState() const
        {
            return Ent::Gen::ResponsiblePointer_ActorState_(node->at("LightAttackState"));
        }
        inline Ent::Gen::String LightAttackData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // lightAttackData
        inline Ent::Gen::String lightAttackData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool lightAttackData::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::LightAttackData lightAttackData::val() const
        {
            return Ent::Gen::LightAttackData(node->at("val"));
        }
        // LedgePositionInfo
        // JumpHeightMultiplier
        inline Ent::Gen::String JumpHeightMultiplier::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool JumpHeightMultiplier::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float JumpHeightMultiplier::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // IsActive
        inline Ent::Gen::String IsActive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool IsActive::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool IsActive::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // Invincible
        inline Ent::Gen::String Invincible::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool Invincible::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool Invincible::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // TaggedEntityRef
        inline Ent::Gen::EntityRef TaggedEntityRef::EntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("EntityRef"));
        }
        inline PrimArray<Ent::Gen::InventoryTags> TaggedEntityRef::Tags() const
        {
            return PrimArray<Ent::Gen::InventoryTags>(node->at("Tags"));
        }
        inline Ent::Gen::String TaggedEntityRef::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TrailProperties
        inline Ent::Gen::Bool TrailProperties::ComputeSplineCurvilinearUV() const
        {
            return Ent::Gen::Bool(node->at("ComputeSplineCurvilinearUV"));
        }
        inline Ent::Gen::Float TrailProperties::Duration() const
        {
            return Ent::Gen::Float(node->at("Duration"));
        }
        inline PrimArray<Ent::Gen::Int> TrailProperties::FadeLuminosity() const
        {
            return PrimArray<Ent::Gen::Int>(node->at("FadeLuminosity"));
        }
        inline PrimArray<Ent::Gen::Int> TrailProperties::FadeSize() const
        {
            return PrimArray<Ent::Gen::Int>(node->at("FadeSize"));
        }
        inline Ent::Gen::Vector3 TrailProperties::FrontalAxis() const
        {
            return Ent::Gen::Vector3(node->at("FrontalAxis"));
        }
        inline Ent::Gen::Vector3 TrailProperties::HorizontalAxis() const
        {
            return Ent::Gen::Vector3(node->at("HorizontalAxis"));
        }
        inline Ent::Gen::InterpolationMethod TrailProperties::InterpolationMethod() const
        {
            return Ent::Gen::InterpolationMethod(node->at("InterpolationMethod"));
        }
        inline Ent::Gen::Float TrailProperties::IntervalBetweenTrailPoints() const
        {
            return Ent::Gen::Float(node->at("IntervalBetweenTrailPoints"));
        }
        inline Ent::Gen::Float TrailProperties::Luminosity() const
        {
            return Ent::Gen::Float(node->at("Luminosity"));
        }
        inline Ent::Gen::String TrailProperties::LuminosityCurvePath() const
        {
            return Ent::Gen::String(node->at("LuminosityCurvePath"));
        }
        inline Ent::Gen::Float TrailProperties::LuminosityVariability() const
        {
            return Ent::Gen::Float(node->at("LuminosityVariability"));
        }
        inline Ent::Gen::Int TrailProperties::NbSplinePointsBetweenTrailPoints() const
        {
            return Ent::Gen::Int(node->at("NbSplinePointsBetweenTrailPoints"));
        }
        inline Array<Ent::Gen::TrailRendererProperties> TrailProperties::RenderingProperties() const
        {
            return Array<Ent::Gen::TrailRendererProperties>(node->at("RenderingProperties"));
        }
        inline Ent::Gen::TrailRenderingType TrailProperties::RenderingType() const
        {
            return Ent::Gen::TrailRenderingType(node->at("RenderingType"));
        }
        inline Ent::Gen::Vector2 TrailProperties::Size() const
        {
            return Ent::Gen::Vector2(node->at("Size"));
        }
        inline Ent::Gen::String TrailProperties::SizeCurvePath() const
        {
            return Ent::Gen::String(node->at("SizeCurvePath"));
        }
        inline Ent::Gen::Vector2 TrailProperties::SizeVariability() const
        {
            return Ent::Gen::Vector2(node->at("SizeVariability"));
        }
        inline Ent::Gen::Bool TrailProperties::TrimTransparentPoints() const
        {
            return Ent::Gen::Bool(node->at("TrimTransparentPoints"));
        }
        inline Ent::Gen::TrailUVUnwrappingMode TrailProperties::UVUnwrappingMode() const
        {
            return Ent::Gen::TrailUVUnwrappingMode(node->at("UVUnwrappingMode"));
        }
        inline Ent::Gen::String TrailProperties::UVZoomCurvilinearCurvePath() const
        {
            return Ent::Gen::String(node->at("UVZoomCurvilinearCurvePath"));
        }
        inline Ent::Gen::Vector3 TrailProperties::VerticalAxis() const
        {
            return Ent::Gen::Vector3(node->at("VerticalAxis"));
        }
        inline Ent::Gen::String TrailProperties::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Interactor
        inline Ent::Gen::String Interactor::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool Interactor::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        // InputCollisionBehaviorData
        inline Ent::Gen::Float InputCollisionBehaviorData::AltitudeMax() const
        {
            return Ent::Gen::Float(node->at("AltitudeMax"));
        }
        inline Ent::Gen::Float InputCollisionBehaviorData::DepthMax() const
        {
            return Ent::Gen::Float(node->at("DepthMax"));
        }
        inline Ent::Gen::Float InputCollisionBehaviorData::FrontAngle() const
        {
            return Ent::Gen::Float(node->at("FrontAngle"));
        }
        inline Ent::Gen::Float InputCollisionBehaviorData::RadiusCoeff() const
        {
            return Ent::Gen::Float(node->at("RadiusCoeff"));
        }
        inline Ent::Gen::String InputCollisionBehaviorData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InertiaTensor
        inline Ent::Gen::String InertiaTensor::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool InertiaTensor::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Vector3 InertiaTensor::val() const
        {
            return Ent::Gen::Vector3(node->at("val"));
        }
        // ImpactAndSolidityData
        inline Ent::Gen::String ImpactAndSolidityData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline PrimArray<Ent::Gen::Float> ImpactAndSolidityData::impactPercent() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("impactPercent"));
        }
        inline Ent::Gen::Float ImpactAndSolidityData::solidity() const
        {
            return Ent::Gen::Float(node->at("solidity"));
        }
        inline Ent::Gen::Bool ImpactAndSolidityData::unbreakable() const
        {
            return Ent::Gen::Bool(node->at("unbreakable"));
        }
        inline Ent::Gen::Float ImpactAndSolidityData::velocityImpactMax() const
        {
            return Ent::Gen::Float(node->at("velocityImpactMax"));
        }
        // ID
        // PhysicsReplicateData
        inline Ent::Gen::Vector3 PhysicsReplicateData::AngularV() const
        {
            return Ent::Gen::Vector3(node->at("AngularV"));
        }
        inline Ent::Gen::ID PhysicsReplicateData::ID() const
        {
            return Ent::Gen::ID(node->at("ID"));
        }
        inline Ent::Gen::Vector3 PhysicsReplicateData::LinearV() const
        {
            return Ent::Gen::Vector3(node->at("LinearV"));
        }
        inline Ent::Gen::Position PhysicsReplicateData::Position() const
        {
            return Ent::Gen::Position(node->at("Position"));
        }
        inline Ent::Gen::Quat PhysicsReplicateData::Rotation() const
        {
            return Ent::Gen::Quat(node->at("Rotation"));
        }
        inline Ent::Gen::String PhysicsReplicateData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PickableDistributorComponentData
        inline Ent::Gen::EntityRef PickableDistributorComponentData::EntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("EntityRef"));
        }
        inline Ent::Gen::HotSpotType PickableDistributorComponentData::HotspotType() const
        {
            return Ent::Gen::HotSpotType(node->at("HotspotType"));
        }
        inline Ent::Gen::String PickableDistributorComponentData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HotspotData
        inline Ent::Gen::String HotspotData::Bone() const
        {
            return Ent::Gen::String(node->at("Bone"));
        }
        inline Ent::Gen::Vector3 HotspotData::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::Quat HotspotData::Orientation() const
        {
            return Ent::Gen::Quat(node->at("Orientation"));
        }
        inline Ent::Gen::Float HotspotData::Scale() const
        {
            return Ent::Gen::Float(node->at("Scale"));
        }
        inline Ent::Gen::PrimitiveSet<char const*> HotspotData::Tags() const
        {
            return Ent::Gen::PrimitiveSet<char const*>(node->at("Tags"));
        }
        inline Ent::Gen::EntityRef HotspotData::TargetEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("TargetEntityRef"));
        }
        inline Ent::Gen::HotSpotType HotspotData::Type_() const
        {
            return Ent::Gen::HotSpotType(node->at("Type"));
        }
        inline Ent::Gen::String HotspotData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HitWallEnvironmentData
        inline Ent::Gen::Float HitWallEnvironmentData::NormalAngleMax() const
        {
            return Ent::Gen::Float(node->at("NormalAngleMax"));
        }
        inline Ent::Gen::Float HitWallEnvironmentData::NormalAngleMin() const
        {
            return Ent::Gen::Float(node->at("NormalAngleMin"));
        }
        inline Ent::Gen::Float HitWallEnvironmentData::RetimingVerticalAngleMax() const
        {
            return Ent::Gen::Float(node->at("RetimingVerticalAngleMax"));
        }
        inline Ent::Gen::Float HitWallEnvironmentData::RetimingVerticalAngleMin() const
        {
            return Ent::Gen::Float(node->at("RetimingVerticalAngleMin"));
        }
        inline Ent::Gen::String HitWallEnvironmentData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HitWallData
        inline Ent::Gen::Float HitWallData::AverageSpeedThreshold() const
        {
            return Ent::Gen::Float(node->at("AverageSpeedThreshold"));
        }
        inline Ent::Gen::Float HitWallData::ContactAngleMax() const
        {
            return Ent::Gen::Float(node->at("ContactAngleMax"));
        }
        inline Ent::Gen::HitWallEnvironmentData HitWallData::DefaultEnvironmentData() const
        {
            return Ent::Gen::HitWallEnvironmentData(node->at("DefaultEnvironmentData"));
        }
        inline Ent::Gen::HitWallEnvironmentData HitWallData::GroundedEnvironmentData() const
        {
            return Ent::Gen::HitWallEnvironmentData(node->at("GroundedEnvironmentData"));
        }
        inline Ent::Gen::Float HitWallData::HitWallFallHeightThreshold() const
        {
            return Ent::Gen::Float(node->at("HitWallFallHeightThreshold"));
        }
        inline Ent::Gen::Float HitWallData::OrientationAlignementFactor() const
        {
            return Ent::Gen::Float(node->at("OrientationAlignementFactor"));
        }
        inline Ent::Gen::Float HitWallData::RetimingHorizontalAngleMax() const
        {
            return Ent::Gen::Float(node->at("RetimingHorizontalAngleMax"));
        }
        inline Ent::Gen::String HitWallData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HeadCollisionBehaviorData
        inline Ent::Gen::String HeadCollisionBehaviorData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float HeadCollisionBehaviorData::disableDuration() const
        {
            return Ent::Gen::Float(node->at("disableDuration"));
        }
        inline Ent::Gen::Float HeadCollisionBehaviorData::enableDuration() const
        {
            return Ent::Gen::Float(node->at("enableDuration"));
        }
        inline Ent::Gen::Vector3 HeadCollisionBehaviorData::headOffset() const
        {
            return Ent::Gen::Vector3(node->at("headOffset"));
        }
        inline Ent::Gen::Bool HeadCollisionBehaviorData::isEnabled() const
        {
            return Ent::Gen::Bool(node->at("isEnabled"));
        }
        inline Ent::Gen::Float HeadCollisionBehaviorData::radiusCoeff() const
        {
            return Ent::Gen::Float(node->at("radiusCoeff"));
        }
        inline Ent::Gen::ScaleConverter HeadCollisionBehaviorData::slopeInfluence() const
        {
            return Ent::Gen::ScaleConverter(node->at("slopeInfluence"));
        }
        inline Ent::Gen::Float HeadCollisionBehaviorData::softCollisionRigidbodyCoeff() const
        {
            return Ent::Gen::Float(node->at("softCollisionRigidbodyCoeff"));
        }
        inline Ent::Gen::Float HeadCollisionBehaviorData::softCollisionVisualCoeff() const
        {
            return Ent::Gen::Float(node->at("softCollisionVisualCoeff"));
        }
        inline Ent::Gen::ScaleConverter HeadCollisionBehaviorData::speedInfluence() const
        {
            return Ent::Gen::ScaleConverter(node->at("speedInfluence"));
        }
        inline Ent::Gen::ScaleConverter HeadCollisionBehaviorData::visualSmoothOut() const
        {
            return Ent::Gen::ScaleConverter(node->at("visualSmoothOut"));
        }
        // VelocityObstaclesManager
        inline Ent::Gen::Float VelocityObstaclesManager::AcceptableAccelerationForAvoidance() const
        {
            return Ent::Gen::Float(node->at("AcceptableAccelerationForAvoidance"));
        }
        inline Ent::Gen::Bool VelocityObstaclesManager::Active() const
        {
            return Ent::Gen::Bool(node->at("Active"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::AvoidanceRadiusAdaptabilityFactor() const
        {
            return Ent::Gen::Float(node->at("AvoidanceRadiusAdaptabilityFactor"));
        }
        inline Ent::Gen::Map<SizeEnum, PrimArray<Ent::Gen::GroupAvoidanceEnum>> VelocityObstaclesManager::GroupsAvoidanceIgnoredBySize() const
        {
            return Ent::Gen::Map<SizeEnum, PrimArray<Ent::Gen::GroupAvoidanceEnum>>(node->at("GroupsAvoidanceIgnoredBySize"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::RunningSpeed() const
        {
            return Ent::Gen::Float(node->at("RunningSpeed"));
        }
        inline Ent::Gen::Int VelocityObstaclesManager::SimMaxNeighbors() const
        {
            return Ent::Gen::Int(node->at("SimMaxNeighbors"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::SimMaxSpeed() const
        {
            return Ent::Gen::Float(node->at("SimMaxSpeed"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::SimNeighborDist() const
        {
            return Ent::Gen::Float(node->at("SimNeighborDist"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::SimPrefSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("SimPrefSpeedFactor"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::SimRadius() const
        {
            return Ent::Gen::Float(node->at("SimRadius"));
        }
        inline Ent::Gen::Int VelocityObstaclesManager::SimSlowDownWhenAvoiding() const
        {
            return Ent::Gen::Int(node->at("SimSlowDownWhenAvoiding"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::SimTimeHorizon() const
        {
            return Ent::Gen::Float(node->at("SimTimeHorizon"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::SimTimeHorizonObst() const
        {
            return Ent::Gen::Float(node->at("SimTimeHorizonObst"));
        }
        inline Ent::Gen::Manager VelocityObstaclesManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::Float VelocityObstaclesManager::WalkingSpeed() const
        {
            return Ent::Gen::Float(node->at("WalkingSpeed"));
        }
        inline Ent::Gen::String VelocityObstaclesManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GroundTypeData
        inline Ent::Gen::Float GroundTypeData::GrainRangeMax() const
        {
            return Ent::Gen::Float(node->at("GrainRangeMax"));
        }
        inline Ent::Gen::Float GroundTypeData::GrainRangeMin() const
        {
            return Ent::Gen::Float(node->at("GrainRangeMin"));
        }
        inline Ent::Gen::String GroundTypeData::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Float GroundTypeData::RegenRangeMax() const
        {
            return Ent::Gen::Float(node->at("RegenRangeMax"));
        }
        inline Ent::Gen::Float GroundTypeData::RegenRangeMin() const
        {
            return Ent::Gen::Float(node->at("RegenRangeMin"));
        }
        inline Ent::Gen::String GroundTypeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GrasperInteractionData
        inline Ent::Gen::String GrasperInteractionData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float GrasperInteractionData::anticipationSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("anticipationSpeedFactor"));
        }
        inline Ent::Gen::Float GrasperInteractionData::attackDamages() const
        {
            return Ent::Gen::Float(node->at("attackDamages"));
        }
        inline Ent::Gen::Float GrasperInteractionData::deltaAngleMax() const
        {
            return Ent::Gen::Float(node->at("deltaAngleMax"));
        }
        inline Ent::Gen::Float GrasperInteractionData::distanceHysteris() const
        {
            return Ent::Gen::Float(node->at("distanceHysteris"));
        }
        inline Ent::Gen::Float GrasperInteractionData::distanceMax() const
        {
            return Ent::Gen::Float(node->at("distanceMax"));
        }
        inline Ent::Gen::Float GrasperInteractionData::graspDurationMax() const
        {
            return Ent::Gen::Float(node->at("graspDurationMax"));
        }
        inline Ent::Gen::Float GrasperInteractionData::graspOutVisualRotationRate() const
        {
            return Ent::Gen::Float(node->at("graspOutVisualRotationRate"));
        }
        inline Ent::Gen::Float GrasperInteractionData::graspStrength() const
        {
            return Ent::Gen::Float(node->at("graspStrength"));
        }
        inline Ent::Gen::String GrasperInteractionData::interactableBoneName() const
        {
            return Ent::Gen::String(node->at("interactableBoneName"));
        }
        inline Ent::Gen::ScaleConverter GrasperInteractionData::syncDeltaRotationDuration() const
        {
            return Ent::Gen::ScaleConverter(node->at("syncDeltaRotationDuration"));
        }
        inline Ent::Gen::ScaleConverter GrasperInteractionData::syncDeltaTranslationDuration() const
        {
            return Ent::Gen::ScaleConverter(node->at("syncDeltaTranslationDuration"));
        }
        // GraspableInteractionData
        inline Ent::Gen::String GraspableInteractionData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float GraspableInteractionData::graspStrength() const
        {
            return Ent::Gen::Float(node->at("graspStrength"));
        }
        inline Ent::Gen::Float GraspableInteractionData::graspedDurationMax() const
        {
            return Ent::Gen::Float(node->at("graspedDurationMax"));
        }
        inline Ent::Gen::HotSpotType GraspableInteractionData::hotspotType() const
        {
            return Ent::Gen::HotSpotType(node->at("hotspotType"));
        }
        inline Ent::Gen::ScaleConverter GraspableInteractionData::impactRetiming() const
        {
            return Ent::Gen::ScaleConverter(node->at("impactRetiming"));
        }
        inline Ent::Gen::Float GraspableInteractionData::incapacitatedTime() const
        {
            return Ent::Gen::Float(node->at("incapacitatedTime"));
        }
        inline Ent::Gen::String GraspableInteractionData::interactableBoneName() const
        {
            return Ent::Gen::String(node->at("interactableBoneName"));
        }
        inline Ent::Gen::Float GraspableInteractionData::visualRotationRate() const
        {
            return Ent::Gen::Float(node->at("visualRotationRate"));
        }
        // GraspResistanceData
        inline Ent::Gen::String GraspResistanceData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float GraspResistanceData::resistanceMax() const
        {
            return Ent::Gen::Float(node->at("resistanceMax"));
        }
        inline Ent::Gen::ScaleConverter GraspResistanceData::strengthMultiplierCurve() const
        {
            return Ent::Gen::ScaleConverter(node->at("strengthMultiplierCurve"));
        }
        // GeometryStamper
        inline Ent::Gen::Transform3D GeometryStamper::Transform() const
        {
            return Ent::Gen::Transform3D(node->at("Transform"));
        }
        inline Ent::Gen::String GeometryStamper::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SkinnedPhysMeshStamper
        inline Ent::Gen::GeometryStamper SkinnedPhysMeshStamper::Super() const
        {
            return Ent::Gen::GeometryStamper(node->at("Super"));
        }
        inline Ent::Gen::String SkinnedPhysMeshStamper::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MeshStamper
        inline Ent::Gen::String MeshStamper::MeshFilePath() const
        {
            return Ent::Gen::String(node->at("MeshFilePath"));
        }
        inline Ent::Gen::GeometryStamper MeshStamper::Super() const
        {
            return Ent::Gen::GeometryStamper(node->at("Super"));
        }
        inline Ent::Gen::Walkability MeshStamper::Walkability() const
        {
            return Ent::Gen::Walkability(node->at("Walkability"));
        }
        inline Ent::Gen::String MeshStamper::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameTimeInMs
        // GameProfile
        inline Ent::Gen::Map<char const*, Array<Array<Ent::Gen::Tuple<Ent::Gen::GameTimeInMs, Ent::Gen::Float>>>> GameProfile::TypedScoreOverTimeList() const
        {
            return Ent::Gen::Map<char const*, Array<Array<Ent::Gen::Tuple<Ent::Gen::GameTimeInMs, Ent::Gen::Float>>>>(node->at("TypedScoreOverTimeList"));
        }
        inline Ent::Gen::String GameProfile::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameSoftCollisionData
        inline Ent::Gen::Float GameSoftCollisionData::DecelerationFactor() const
        {
            return Ent::Gen::Float(node->at("DecelerationFactor"));
        }
        inline Ent::Gen::Float GameSoftCollisionData::InsidePenetrationCoeff() const
        {
            return Ent::Gen::Float(node->at("InsidePenetrationCoeff"));
        }
        inline Ent::Gen::Float GameSoftCollisionData::MaxSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("MaxSpeedFactor"));
        }
        inline Ent::Gen::Float GameSoftCollisionData::MinSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("MinSpeedFactor"));
        }
        inline Ent::Gen::SpeedMode GameSoftCollisionData::MinSpeedMode() const
        {
            return Ent::Gen::SpeedMode(node->at("MinSpeedMode"));
        }
        inline Ent::Gen::Float GameSoftCollisionData::StuckDuration() const
        {
            return Ent::Gen::Float(node->at("StuckDuration"));
        }
        inline Ent::Gen::Float GameSoftCollisionData::StuckPenetrationCoeff() const
        {
            return Ent::Gen::Float(node->at("StuckPenetrationCoeff"));
        }
        inline Ent::Gen::String GameSoftCollisionData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameSnapData
        inline Ent::Gen::String GameSnapData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float GameSnapData::creatureSizeCoeff() const
        {
            return Ent::Gen::Float(node->at("creatureSizeCoeff"));
        }
        inline Ent::Gen::Float GameSnapData::dirCoeff() const
        {
            return Ent::Gen::Float(node->at("dirCoeff"));
        }
        inline Ent::Gen::Float GameSnapData::distCoeff() const
        {
            return Ent::Gen::Float(node->at("distCoeff"));
        }
        inline Ent::Gen::Float GameSnapData::maxAngle() const
        {
            return Ent::Gen::Float(node->at("maxAngle"));
        }
        inline Ent::Gen::Float GameSnapData::maxDist() const
        {
            return Ent::Gen::Float(node->at("maxDist"));
        }
        // GameSlopeData
        inline Ent::Gen::Float GameSlopeData::AngleMin() const
        {
            return Ent::Gen::Float(node->at("AngleMin"));
        }
        inline Ent::Gen::Float GameSlopeData::AngleMinHysteresis() const
        {
            return Ent::Gen::Float(node->at("AngleMinHysteresis"));
        }
        inline Ent::Gen::Float GameSlopeData::ForceAgainstSlopeAdherenceMin() const
        {
            return Ent::Gen::Float(node->at("ForceAgainstSlopeAdherenceMin"));
        }
        inline Ent::Gen::Float GameSlopeData::ForceAgainstSlopeAdherenceMinHysteresis() const
        {
            return Ent::Gen::Float(node->at("ForceAgainstSlopeAdherenceMinHysteresis"));
        }
        inline Ent::Gen::Float GameSlopeData::OrientationDotMin() const
        {
            return Ent::Gen::Float(node->at("OrientationDotMin"));
        }
        inline Ent::Gen::Float GameSlopeData::OrientationDotMinHysteresis() const
        {
            return Ent::Gen::Float(node->at("OrientationDotMinHysteresis"));
        }
        inline Ent::Gen::String GameSlopeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameShamanVisionData
        inline Ent::Gen::Float GameShamanVisionData::AudioAngle() const
        {
            return Ent::Gen::Float(node->at("AudioAngle"));
        }
        inline Ent::Gen::Float GameShamanVisionData::IconDisableDisplayDuration() const
        {
            return Ent::Gen::Float(node->at("IconDisableDisplayDuration"));
        }
        inline Ent::Gen::Float GameShamanVisionData::IconDisplayDuration() const
        {
            return Ent::Gen::Float(node->at("IconDisplayDuration"));
        }
        inline Ent::Gen::Float GameShamanVisionData::IconEnableDisplayDuration() const
        {
            return Ent::Gen::Float(node->at("IconEnableDisplayDuration"));
        }
        inline Ent::Gen::ScaleConverter GameShamanVisionData::IntensityGoddess() const
        {
            return Ent::Gen::ScaleConverter(node->at("IntensityGoddess"));
        }
        inline Ent::Gen::ScaleConverter GameShamanVisionData::IntensityPlayer() const
        {
            return Ent::Gen::ScaleConverter(node->at("IntensityPlayer"));
        }
        inline Ent::Gen::ScaleConverter GameShamanVisionData::IntensitySpecie() const
        {
            return Ent::Gen::ScaleConverter(node->at("IntensitySpecie"));
        }
        inline Ent::Gen::ScaleConverter GameShamanVisionData::PerceptionGoddess() const
        {
            return Ent::Gen::ScaleConverter(node->at("PerceptionGoddess"));
        }
        inline Ent::Gen::ScaleConverter GameShamanVisionData::PerceptionPlayer() const
        {
            return Ent::Gen::ScaleConverter(node->at("PerceptionPlayer"));
        }
        inline Ent::Gen::ScaleConverter GameShamanVisionData::PerceptionSpecie() const
        {
            return Ent::Gen::ScaleConverter(node->at("PerceptionSpecie"));
        }
        inline Ent::Gen::String GameShamanVisionData::Sound_Locate_HeartBeat() const
        {
            return Ent::Gen::String(node->at("Sound_Locate_HeartBeat"));
        }
        inline Ent::Gen::String GameShamanVisionData::Sound_UI_Locate_HeartBeat_Stop() const
        {
            return Ent::Gen::String(node->at("Sound_UI_Locate_HeartBeat_Stop"));
        }
        inline Ent::Gen::String GameShamanVisionData::Sound_UI_Locate_In() const
        {
            return Ent::Gen::String(node->at("Sound_UI_Locate_In"));
        }
        inline Ent::Gen::String GameShamanVisionData::Sound_UI_Locate_Out() const
        {
            return Ent::Gen::String(node->at("Sound_UI_Locate_Out"));
        }
        inline Ent::Gen::String GameShamanVisionData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameReviveData
        inline Ent::Gen::Float GameReviveData::AnimPlayRatioSpeedIn() const
        {
            return Ent::Gen::Float(node->at("AnimPlayRatioSpeedIn"));
        }
        inline Ent::Gen::Float GameReviveData::AnimPlayRatioSpeedOut() const
        {
            return Ent::Gen::Float(node->at("AnimPlayRatioSpeedOut"));
        }
        inline Ent::Gen::Float GameReviveData::AnimPlayRatioSpeedRate() const
        {
            return Ent::Gen::Float(node->at("AnimPlayRatioSpeedRate"));
        }
        inline Ent::Gen::String GameReviveData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameRespawnData
        inline Ent::Gen::Float GameRespawnData::RespawnDelayOnDeath() const
        {
            return Ent::Gen::Float(node->at("RespawnDelayOnDeath"));
        }
        inline Ent::Gen::Float GameRespawnData::SetRespawnPlaceAsCheckpointDuration() const
        {
            return Ent::Gen::Float(node->at("SetRespawnPlaceAsCheckpointDuration"));
        }
        inline Ent::Gen::String GameRespawnData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GamePropelData
        inline Ent::Gen::Float GamePropelData::AttractorFactorFallThreshold() const
        {
            return Ent::Gen::Float(node->at("AttractorFactorFallThreshold"));
        }
        inline Ent::Gen::Float GamePropelData::AttractorFactorRaiseThreshold() const
        {
            return Ent::Gen::Float(node->at("AttractorFactorRaiseThreshold"));
        }
        inline Ent::Gen::Float GamePropelData::EnterAngleMin() const
        {
            return Ent::Gen::Float(node->at("EnterAngleMin"));
        }
        inline Ent::Gen::Float GamePropelData::EnterSpeedMin() const
        {
            return Ent::Gen::Float(node->at("EnterSpeedMin"));
        }
        inline PrimArray<Ent::Gen::Float> GamePropelData::Speed() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("Speed"));
        }
        inline Ent::Gen::String GamePropelData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameParryData
        inline Ent::Gen::Float GameParryData::Cooldown() const
        {
            return Ent::Gen::Float(node->at("Cooldown"));
        }
        inline Ent::Gen::String GameParryData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GamePadSpeedBehaviorData
        inline Ent::Gen::ScaleConverter GamePadSpeedBehaviorData::DeadZoneThreshold() const
        {
            return Ent::Gen::ScaleConverter(node->at("DeadZoneThreshold"));
        }
        inline Ent::Gen::Float GamePadSpeedBehaviorData::JoyAcceleration() const
        {
            return Ent::Gen::Float(node->at("JoyAcceleration"));
        }
        inline Ent::Gen::Float GamePadSpeedBehaviorData::PostponeDelayMax() const
        {
            return Ent::Gen::Float(node->at("PostponeDelayMax"));
        }
        inline Ent::Gen::Float GamePadSpeedBehaviorData::PostponeNormMax() const
        {
            return Ent::Gen::Float(node->at("PostponeNormMax"));
        }
        inline Ent::Gen::Float GamePadSpeedBehaviorData::SpeedFastMinDuration() const
        {
            return Ent::Gen::Float(node->at("SpeedFastMinDuration"));
        }
        inline Ent::Gen::Float GamePadSpeedBehaviorData::SpeedMediumThreshold() const
        {
            return Ent::Gen::Float(node->at("SpeedMediumThreshold"));
        }
        inline Ent::Gen::ScaleConverter GamePadSpeedBehaviorData::SpeedSlowThreshold() const
        {
            return Ent::Gen::ScaleConverter(node->at("SpeedSlowThreshold"));
        }
        inline Ent::Gen::String GamePadSpeedBehaviorData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GamePadNavigationData
        inline Ent::Gen::String GamePadNavigationData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float GamePadNavigationData::clamberDirectionDeltaAngle() const
        {
            return Ent::Gen::Float(node->at("clamberDirectionDeltaAngle"));
        }
        inline Ent::Gen::Float GamePadNavigationData::invertInputFactor() const
        {
            return Ent::Gen::Float(node->at("invertInputFactor"));
        }
        inline Ent::Gen::Float GamePadNavigationData::joyLockedAngularSpeedMax() const
        {
            return Ent::Gen::Float(node->at("joyLockedAngularSpeedMax"));
        }
        inline Ent::Gen::Float GamePadNavigationData::meshNavigationMaxDeltaAngleToKeepInputLock() const
        {
            return Ent::Gen::Float(node->at("meshNavigationMaxDeltaAngleToKeepInputLock"));
        }
        inline Ent::Gen::Float GamePadNavigationData::normalAlignmentToKeepTrajectory() const
        {
            return Ent::Gen::Float(node->at("normalAlignmentToKeepTrajectory"));
        }
        // GameLODData
        inline PrimArray<Ent::Gen::Float> GameLODData::CreatureDistance() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("CreatureDistance"));
        }
        inline Ent::Gen::String GameLODData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameInfoDB
        inline Ent::Gen::Map<char const*, Ent::Gen::Map<char const*, Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_>> GameInfoDB::Store() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::Map<char const*, Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_>>(node->at("Store"));
        }
        inline Ent::Gen::String GameInfoDB::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameImmersionData
        inline Ent::Gen::String GameImmersionData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float GameImmersionData::friction() const
        {
            return Ent::Gen::Float(node->at("friction"));
        }
        inline Ent::Gen::Float GameImmersionData::immersedFactor() const
        {
            return Ent::Gen::Float(node->at("immersedFactor"));
        }
        inline Ent::Gen::Float GameImmersionData::immersedFactorMaxToJump() const
        {
            return Ent::Gen::Float(node->at("immersedFactorMaxToJump"));
        }
        inline Ent::Gen::Float GameImmersionData::pitchMaxAngleToJump() const
        {
            return Ent::Gen::Float(node->at("pitchMaxAngleToJump"));
        }
        inline Ent::Gen::Float GameImmersionData::pitchMinAngleToJump() const
        {
            return Ent::Gen::Float(node->at("pitchMinAngleToJump"));
        }
        inline Ent::Gen::ScaleConverter GameImmersionData::reachSurfaceAcceleration() const
        {
            return Ent::Gen::ScaleConverter(node->at("reachSurfaceAcceleration"));
        }
        inline Ent::Gen::Float GameImmersionData::speedZMinToJump() const
        {
            return Ent::Gen::Float(node->at("speedZMinToJump"));
        }
        // GameFlyData_FlyUp
        inline Ent::Gen::Float GameFlyData_FlyUp::Acceleration() const
        {
            return Ent::Gen::Float(node->at("Acceleration"));
        }
        inline Ent::Gen::Float GameFlyData_FlyUp::Deceleration() const
        {
            return Ent::Gen::Float(node->at("Deceleration"));
        }
        inline Ent::Gen::Float GameFlyData_FlyUp::ExitDeceleration() const
        {
            return Ent::Gen::Float(node->at("ExitDeceleration"));
        }
        inline Ent::Gen::Float GameFlyData_FlyUp::PitchStart() const
        {
            return Ent::Gen::Float(node->at("PitchStart"));
        }
        inline Ent::Gen::ScaleConverter GameFlyData_FlyUp::SpeedFactor() const
        {
            return Ent::Gen::ScaleConverter(node->at("SpeedFactor"));
        }
        inline Ent::Gen::String GameFlyData_FlyUp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameFlyData_FlyDown
        inline Ent::Gen::ScaleConverter GameFlyData_FlyDown::Acceleration() const
        {
            return Ent::Gen::ScaleConverter(node->at("Acceleration"));
        }
        inline Ent::Gen::ScaleConverter GameFlyData_FlyDown::Deceleration() const
        {
            return Ent::Gen::ScaleConverter(node->at("Deceleration"));
        }
        inline Ent::Gen::Float GameFlyData_FlyDown::ExitDeceleration() const
        {
            return Ent::Gen::Float(node->at("ExitDeceleration"));
        }
        inline Ent::Gen::Float GameFlyData_FlyDown::PitchStart() const
        {
            return Ent::Gen::Float(node->at("PitchStart"));
        }
        inline Ent::Gen::Float GameFlyData_FlyDown::SpeedSlowFactor() const
        {
            return Ent::Gen::Float(node->at("SpeedSlowFactor"));
        }
        inline Ent::Gen::String GameFlyData_FlyDown::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameFlyData_Flap
        inline Ent::Gen::Float GameFlyData_Flap::RollMin() const
        {
            return Ent::Gen::Float(node->at("RollMin"));
        }
        inline Ent::Gen::String GameFlyData_Flap::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameFlyData_Dive
        inline Ent::Gen::ScaleConverter GameFlyData_Dive::Acceleration() const
        {
            return Ent::Gen::ScaleConverter(node->at("Acceleration"));
        }
        inline Ent::Gen::ScaleConverter GameFlyData_Dive::Deceleration() const
        {
            return Ent::Gen::ScaleConverter(node->at("Deceleration"));
        }
        inline Ent::Gen::Float GameFlyData_Dive::ExitDeceleration() const
        {
            return Ent::Gen::Float(node->at("ExitDeceleration"));
        }
        inline Ent::Gen::Float GameFlyData_Dive::SpeedFastFactor() const
        {
            return Ent::Gen::Float(node->at("SpeedFastFactor"));
        }
        inline Ent::Gen::String GameFlyData_Dive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameFlyData_Centrifugal
        inline Ent::Gen::ScaleConverter GameFlyData_Centrifugal::Acceleration() const
        {
            return Ent::Gen::ScaleConverter(node->at("Acceleration"));
        }
        inline Ent::Gen::String GameFlyData_Centrifugal::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameFlyData
        inline Ent::Gen::GameFlyData_Centrifugal GameFlyData::Centrifugal() const
        {
            return Ent::Gen::GameFlyData_Centrifugal(node->at("Centrifugal"));
        }
        inline Ent::Gen::GameFlyData_Dive GameFlyData::Dive() const
        {
            return Ent::Gen::GameFlyData_Dive(node->at("Dive"));
        }
        inline Ent::Gen::GameFlyData_Flap GameFlyData::Flap() const
        {
            return Ent::Gen::GameFlyData_Flap(node->at("Flap"));
        }
        inline Ent::Gen::ScaleConverter GameFlyData::FlyBlendIn() const
        {
            return Ent::Gen::ScaleConverter(node->at("FlyBlendIn"));
        }
        inline Ent::Gen::GameFlyData_FlyDown GameFlyData::FlyDown() const
        {
            return Ent::Gen::GameFlyData_FlyDown(node->at("FlyDown"));
        }
        inline Ent::Gen::ScaleConverter GameFlyData::FlyExitBlendIn() const
        {
            return Ent::Gen::ScaleConverter(node->at("FlyExitBlendIn"));
        }
        inline Ent::Gen::ScaleConverter GameFlyData::FlyPitchCoeffFromSpeedCoeff() const
        {
            return Ent::Gen::ScaleConverter(node->at("FlyPitchCoeffFromSpeedCoeff"));
        }
        inline Ent::Gen::GameFlyData_FlyUp GameFlyData::FlyUp() const
        {
            return Ent::Gen::GameFlyData_FlyUp(node->at("FlyUp"));
        }
        inline Ent::Gen::String GameFlyData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameFluidData_HeightThreshold
        inline Ent::Gen::Float GameFluidData_HeightThreshold::Damage() const
        {
            return Ent::Gen::Float(node->at("Damage"));
        }
        inline Ent::Gen::Float GameFluidData_HeightThreshold::Depth() const
        {
            return Ent::Gen::Float(node->at("Depth"));
        }
        inline Ent::Gen::HitStyle GameFluidData_HeightThreshold::HitStyle() const
        {
            return Ent::Gen::HitStyle(node->at("HitStyle"));
        }
        inline Ent::Gen::Float GameFluidData_HeightThreshold::Impact() const
        {
            return Ent::Gen::Float(node->at("Impact"));
        }
        inline Ent::Gen::String GameFluidData_HeightThreshold::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameFluidData
        inline PrimArray<Ent::Gen::Float> GameFluidData::FlowSpeedInfluences() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("FlowSpeedInfluences"));
        }
        inline Array<Array<Ent::Gen::GameFluidData_HeightThreshold>> GameFluidData::HeightThresholds() const
        {
            return Array<Array<Ent::Gen::GameFluidData_HeightThreshold>>(node->at("HeightThresholds"));
        }
        inline Ent::Gen::String GameFluidData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameFeetCatchUpData
        inline Ent::Gen::String GameFeetCatchUpData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::ScaleConverter GameFeetCatchUpData::aerialRate() const
        {
            return Ent::Gen::ScaleConverter(node->at("aerialRate"));
        }
        inline Ent::Gen::ScaleConverter GameFeetCatchUpData::groundRate() const
        {
            return Ent::Gen::ScaleConverter(node->at("groundRate"));
        }
        inline Ent::Gen::Map<SizeEnum, Ent::Gen::Bool> GameFeetCatchUpData::useHeightmapPerSize() const
        {
            return Ent::Gen::Map<SizeEnum, Ent::Gen::Bool>(node->at("useHeightmapPerSize"));
        }
        // GameEdgeData
        inline Ent::Gen::Float GameEdgeData::EdgeAngleMax() const
        {
            return Ent::Gen::Float(node->at("EdgeAngleMax"));
        }
        inline Ent::Gen::Float GameEdgeData::EdgeSizeMin() const
        {
            return Ent::Gen::Float(node->at("EdgeSizeMin"));
        }
        inline Ent::Gen::String GameEdgeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameDeathData
        inline Ent::Gen::String GameDeathData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float GameDeathData::defaultFreedDelay() const
        {
            return Ent::Gen::Float(node->at("defaultFreedDelay"));
        }
        inline Ent::Gen::Float GameDeathData::immersedFreedDelay() const
        {
            return Ent::Gen::Float(node->at("immersedFreedDelay"));
        }
        inline Ent::Gen::Float GameDeathData::leavingLavaDelay() const
        {
            return Ent::Gen::Float(node->at("leavingLavaDelay"));
        }
        inline Ent::Gen::Float GameDeathData::meetingLavaDelay() const
        {
            return Ent::Gen::Float(node->at("meetingLavaDelay"));
        }
        // GameClockManager_TimeOfDay
        inline Ent::Gen::Int GameClockManager_TimeOfDay::Hour() const
        {
            return Ent::Gen::Int(node->at("Hour"));
        }
        inline Ent::Gen::Int GameClockManager_TimeOfDay::Minute() const
        {
            return Ent::Gen::Int(node->at("Minute"));
        }
        inline Ent::Gen::String GameClockManager_TimeOfDay::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameClockManager_GameDate
        inline Ent::Gen::Int GameClockManager_GameDate::DayOfYear() const
        {
            return Ent::Gen::Int(node->at("DayOfYear"));
        }
        inline Ent::Gen::String GameClockManager_GameDate::Season() const
        {
            return Ent::Gen::String(node->at("Season"));
        }
        inline Ent::Gen::GameClockManager_TimeOfDay GameClockManager_GameDate::TimeOfDay() const
        {
            return Ent::Gen::GameClockManager_TimeOfDay(node->at("TimeOfDay"));
        }
        inline Ent::Gen::Int GameClockManager_GameDate::Year() const
        {
            return Ent::Gen::Int(node->at("Year"));
        }
        inline Ent::Gen::String GameClockManager_GameDate::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameClockManager
        inline Ent::Gen::Int GameClockManager::DayDurationInMin() const
        {
            return Ent::Gen::Int(node->at("DayDurationInMin"));
        }
        inline Ent::Gen::Int GameClockManager::DayDurationInMs() const
        {
            return Ent::Gen::Int(node->at("DayDurationInMs"));
        }
        inline Ent::Gen::Int GameClockManager::FallDurationInDay() const
        {
            return Ent::Gen::Int(node->at("FallDurationInDay"));
        }
        inline Ent::Gen::Bool GameClockManager::FreezeTime() const
        {
            return Ent::Gen::Bool(node->at("FreezeTime"));
        }
        inline Ent::Gen::Int GameClockManager::SpringDurationInDay() const
        {
            return Ent::Gen::Int(node->at("SpringDurationInDay"));
        }
        inline Ent::Gen::GameClockManager_GameDate GameClockManager::StartTime() const
        {
            return Ent::Gen::GameClockManager_GameDate(node->at("StartTime"));
        }
        inline Ent::Gen::Int GameClockManager::SummerDurationInDay() const
        {
            return Ent::Gen::Int(node->at("SummerDurationInDay"));
        }
        inline Ent::Gen::Manager GameClockManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::Int GameClockManager::WinterDurationInDay() const
        {
            return Ent::Gen::Int(node->at("WinterDurationInDay"));
        }
        inline Ent::Gen::String GameClockManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameBiteData
        inline PrimArray<Ent::Gen::Float> GameBiteData::BiterShakeStamina() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("BiterShakeStamina"));
        }
        inline PrimArray<Ent::Gen::Float> GameBiteData::BiterStrength() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("BiterStrength"));
        }
        inline PrimArray<Ent::Gen::Float> GameBiteData::BittenResistance() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("BittenResistance"));
        }
        inline PrimArray<Ent::Gen::Float> GameBiteData::BittenShakeExhaustion() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("BittenShakeExhaustion"));
        }
        inline Ent::Gen::String GameBiteData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameBeamSnapData
        inline Ent::Gen::Float GameBeamSnapData::Max2DDist() const
        {
            return Ent::Gen::Float(node->at("Max2DDist"));
        }
        inline Ent::Gen::Float GameBeamSnapData::Max2DDistScoreCoeff() const
        {
            return Ent::Gen::Float(node->at("Max2DDistScoreCoeff"));
        }
        inline Ent::Gen::Float GameBeamSnapData::Max3DDistScoreCoeff() const
        {
            return Ent::Gen::Float(node->at("Max3DDistScoreCoeff"));
        }
        inline Ent::Gen::Float GameBeamSnapData::MinCameraDepth() const
        {
            return Ent::Gen::Float(node->at("MinCameraDepth"));
        }
        inline Ent::Gen::String GameBeamSnapData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FurProperties
        inline Ent::Gen::Float FurProperties::AngularShift() const
        {
            return Ent::Gen::Float(node->at("AngularShift"));
        }
        inline Ent::Gen::Float FurProperties::AzimuthalRoughness() const
        {
            return Ent::Gen::Float(node->at("AzimuthalRoughness"));
        }
        inline Ent::Gen::Float FurProperties::FinsMaskUScale() const
        {
            return Ent::Gen::Float(node->at("FinsMaskUScale"));
        }
        inline Ent::Gen::Int FurProperties::FinsTextureArrayIndex() const
        {
            return Ent::Gen::Int(node->at("FinsTextureArrayIndex"));
        }
        inline Ent::Gen::Float FurProperties::FocusShadowDistanceOffset() const
        {
            return Ent::Gen::Float(node->at("FocusShadowDistanceOffset"));
        }
        inline Ent::Gen::Float FurProperties::LinearAbsorption() const
        {
            return Ent::Gen::Float(node->at("LinearAbsorption"));
        }
        inline Ent::Gen::Float FurProperties::MultiScatteringPower() const
        {
            return Ent::Gen::Float(node->at("MultiScatteringPower"));
        }
        inline Ent::Gen::Float FurProperties::MultiScatteringWrap() const
        {
            return Ent::Gen::Float(node->at("MultiScatteringWrap"));
        }
        inline Ent::Gen::Float FurProperties::Roughness() const
        {
            return Ent::Gen::Float(node->at("Roughness"));
        }
        inline Ent::Gen::Vector3 FurProperties::SpecularFactor() const
        {
            return Ent::Gen::Vector3(node->at("SpecularFactor"));
        }
        inline Ent::Gen::Float FurProperties::Stiffness() const
        {
            return Ent::Gen::Float(node->at("Stiffness"));
        }
        inline Ent::Gen::Float FurProperties::Thickness() const
        {
            return Ent::Gen::Float(node->at("Thickness"));
        }
        inline Ent::Gen::Bool FurProperties::UseNewLighting() const
        {
            return Ent::Gen::Bool(node->at("UseNewLighting"));
        }
        inline Ent::Gen::Float FurProperties::Weight() const
        {
            return Ent::Gen::Float(node->at("Weight"));
        }
        inline Ent::Gen::String FurProperties::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float FurProperties::focusShadowRelativeThickness() const
        {
            return Ent::Gen::Float(node->at("focusShadowRelativeThickness"));
        }
        // FreezeData
        inline Ent::Gen::String FreezeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float FreezeData::deltaTimeFactor() const
        {
            return Ent::Gen::Float(node->at("deltaTimeFactor"));
        }
        inline Ent::Gen::eventStringHash FreezeData::eventStringHash() const
        {
            return Ent::Gen::eventStringHash(node->at("eventStringHash"));
        }
        inline Ent::Gen::Float FreezeData::stateDuration() const
        {
            return Ent::Gen::Float(node->at("stateDuration"));
        }
        inline Ent::Gen::Float FreezeData::transitionInDuration() const
        {
            return Ent::Gen::Float(node->at("transitionInDuration"));
        }
        inline Ent::Gen::Float FreezeData::transitionOutDuration() const
        {
            return Ent::Gen::Float(node->at("transitionOutDuration"));
        }
        // ForceMultiplier
        inline Ent::Gen::String ForceMultiplier::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ForceMultiplier::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float ForceMultiplier::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // ForceBlendInReachRequired
        inline Ent::Gen::String ForceBlendInReachRequired::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ForceBlendInReachRequired::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool ForceBlendInReachRequired::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // ForceBlendIn
        inline Ent::Gen::String ForceBlendIn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ForceBlendIn::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float ForceBlendIn::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // FluidVolumeComponentGD_SimulationParameters
        inline Ent::Gen::Float FluidVolumeComponentGD_SimulationParameters::Evaporation() const
        {
            return Ent::Gen::Float(node->at("Evaporation"));
        }
        inline Ent::Gen::Float FluidVolumeComponentGD_SimulationParameters::Momentum() const
        {
            return Ent::Gen::Float(node->at("Momentum"));
        }
        inline Ent::Gen::Float FluidVolumeComponentGD_SimulationParameters::Precision() const
        {
            return Ent::Gen::Float(node->at("Precision"));
        }
        inline Ent::Gen::Float FluidVolumeComponentGD_SimulationParameters::Viscosity() const
        {
            return Ent::Gen::Float(node->at("Viscosity"));
        }
        inline Ent::Gen::String FluidVolumeComponentGD_SimulationParameters::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidVolumeComponentGD_HeightMapData
        inline Ent::Gen::String FluidVolumeComponentGD_HeightMapData::Path() const
        {
            return Ent::Gen::String(node->at("Path"));
        }
        inline Ent::Gen::String FluidVolumeComponentGD_HeightMapData::TerrainName() const
        {
            return Ent::Gen::String(node->at("TerrainName"));
        }
        inline Ent::Gen::Vector2 FluidVolumeComponentGD_HeightMapData::WorldSize() const
        {
            return Ent::Gen::Vector2(node->at("WorldSize"));
        }
        inline Ent::Gen::String FluidVolumeComponentGD_HeightMapData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidVolumeComponentGD_FluidVolumeData
        inline Ent::Gen::FluidVolumeComponentGD_HeightMapData FluidVolumeComponentGD_FluidVolumeData::HeightMap() const
        {
            return Ent::Gen::FluidVolumeComponentGD_HeightMapData(node->at("HeightMap"));
        }
        inline Ent::Gen::Vector2 FluidVolumeComponentGD_FluidVolumeData::InHeightMapWorldSizeOffset() const
        {
            return Ent::Gen::Vector2(node->at("InHeightMapWorldSizeOffset"));
        }
        inline Ent::Gen::String FluidVolumeComponentGD_FluidVolumeData::Material() const
        {
            return Ent::Gen::String(node->at("Material"));
        }
        inline Ent::Gen::FluidVolumeComponentGD_SimulationParameters FluidVolumeComponentGD_FluidVolumeData::Simulation() const
        {
            return Ent::Gen::FluidVolumeComponentGD_SimulationParameters(node->at("Simulation"));
        }
        inline Ent::Gen::Vector2 FluidVolumeComponentGD_FluidVolumeData::WorldSize() const
        {
            return Ent::Gen::Vector2(node->at("WorldSize"));
        }
        inline Ent::Gen::String FluidVolumeComponentGD_FluidVolumeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ImmersedBehaviorData
        inline Ent::Gen::String ImmersedBehaviorData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ImmersedBehaviorData::canClimbWaterfall() const
        {
            return Ent::Gen::Bool(node->at("canClimbWaterfall"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::constrainedToPlaneForce() const
        {
            return Ent::Gen::Float(node->at("constrainedToPlaneForce"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::delayBetweenImpulses() const
        {
            return Ent::Gen::Float(node->at("delayBetweenImpulses"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::depth() const
        {
            return Ent::Gen::Float(node->at("depth"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::depthHysteresisCoeff() const
        {
            return Ent::Gen::Float(node->at("depthHysteresisCoeff"));
        }
        inline Ent::Gen::ScaleConverter ImmersedBehaviorData::depthMaxRange() const
        {
            return Ent::Gen::ScaleConverter(node->at("depthMaxRange"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::flotation() const
        {
            return Ent::Gen::Float(node->at("flotation"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::immersionEndWaterfallJump() const
        {
            return Ent::Gen::Float(node->at("immersionEndWaterfallJump"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::impulseForce() const
        {
            return Ent::Gen::Float(node->at("impulseForce"));
        }
        inline Ent::Gen::Bool ImmersedBehaviorData::isAllowed() const
        {
            return Ent::Gen::Bool(node->at("isAllowed"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::minTooDeepPushSpeed() const
        {
            return Ent::Gen::Float(node->at("minTooDeepPushSpeed"));
        }
        inline Ent::Gen::Float ImmersedBehaviorData::reachSurfaceAccelerationCoeff() const
        {
            return Ent::Gen::Float(node->at("reachSurfaceAccelerationCoeff"));
        }
        inline Ent::Gen::Map<FluidTypeEnum, Ent::Gen::ScaleConverter> ImmersedBehaviorData::slowDowns() const
        {
            return Ent::Gen::Map<FluidTypeEnum, Ent::Gen::ScaleConverter>(node->at("slowDowns"));
        }
        // FluidData
        inline Ent::Gen::String FluidData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::constraintPlaneWorldPosition FluidData::constraintPlaneWorldPosition() const
        {
            return Ent::Gen::constraintPlaneWorldPosition(node->at("constraintPlaneWorldPosition"));
        }
        inline Ent::Gen::Float FluidData::depth() const
        {
            return Ent::Gen::Float(node->at("depth"));
        }
        inline Ent::Gen::Float FluidData::energy() const
        {
            return Ent::Gen::Float(node->at("energy"));
        }
        inline Ent::Gen::Vector3 FluidData::fluidCurrent() const
        {
            return Ent::Gen::Vector3(node->at("fluidCurrent"));
        }
        inline Ent::Gen::Bool FluidData::hasDepthImpactOnControl() const
        {
            return Ent::Gen::Bool(node->at("hasDepthImpactOnControl"));
        }
        inline Ent::Gen::Bool FluidData::isWaterfall() const
        {
            return Ent::Gen::Bool(node->at("isWaterfall"));
        }
        inline Ent::Gen::Float FluidData::level() const
        {
            return Ent::Gen::Float(node->at("level"));
        }
        inline Ent::Gen::Vector3 FluidData::normal() const
        {
            return Ent::Gen::Vector3(node->at("normal"));
        }
        inline Ent::Gen::FluidType FluidData::type() const
        {
            return Ent::Gen::FluidType(node->at("type"));
        }
        // FloatRange
        inline Ent::Gen::Vector2 FloatRange::MinMax() const
        {
            return Ent::Gen::Vector2(node->at("MinMax"));
        }
        inline Ent::Gen::String FloatRange::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SmallActorSpawnRuleData
        inline Ent::Gen::String SmallActorSpawnRuleData::AudioEventName() const
        {
            return Ent::Gen::String(node->at("AudioEventName"));
        }
        inline Ent::Gen::String SmallActorSpawnRuleData::AudioEventSoundBank() const
        {
            return Ent::Gen::String(node->at("AudioEventSoundBank"));
        }
        inline Ent::Gen::FloatRange SmallActorSpawnRuleData::DayTimeRange() const
        {
            return Ent::Gen::FloatRange(node->at("DayTimeRange"));
        }
        inline Ent::Gen::FloatRange SmallActorSpawnRuleData::DistanceRange() const
        {
            return Ent::Gen::FloatRange(node->at("DistanceRange"));
        }
        inline Ent::Gen::FloatRange SmallActorSpawnRuleData::PrecipitationRange() const
        {
            return Ent::Gen::FloatRange(node->at("PrecipitationRange"));
        }
        inline Ent::Gen::FloatRange SmallActorSpawnRuleData::RegenRange() const
        {
            return Ent::Gen::FloatRange(node->at("RegenRange"));
        }
        inline Ent::Gen::Float SmallActorSpawnRuleData::SpawnProbability() const
        {
            return Ent::Gen::Float(node->at("SpawnProbability"));
        }
        inline Ent::Gen::String SmallActorSpawnRuleData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SmallActorSpawnPointData
        inline Ent::Gen::Float SmallActorSpawnPointData::SelectionProbability() const
        {
            return Ent::Gen::Float(node->at("SelectionProbability"));
        }
        inline Array<Ent::Gen::SmallActorSpawnRuleData> SmallActorSpawnPointData::SpawnRules() const
        {
            return Array<Ent::Gen::SmallActorSpawnRuleData>(node->at("SpawnRules"));
        }
        inline Ent::Gen::String SmallActorSpawnPointData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoundOpportunitiesConfig
        inline Ent::Gen::Map<char const*, Ent::Gen::SmallActorSpawnPointData> SoundOpportunitiesConfig::SmallActorSpawnRules() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::SmallActorSpawnPointData>(node->at("SmallActorSpawnRules"));
        }
        inline Ent::Gen::String SoundOpportunitiesConfig::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FadeDuration
        inline Ent::Gen::String FadeDuration::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool FadeDuration::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float FadeDuration::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // FadeDelay
        inline Ent::Gen::String FadeDelay::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool FadeDelay::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float FadeDelay::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // FactionSpecieRelationData
        inline Ent::Gen::String FactionSpecieRelationData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String FactionSpecieRelationData::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        inline Ent::Gen::String FactionSpecieRelationData::specie() const
        {
            return Ent::Gen::String(node->at("specie"));
        }
        // FactionRelationData
        inline Ent::Gen::String FactionRelationData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String FactionRelationData::faction1() const
        {
            return Ent::Gen::String(node->at("faction1"));
        }
        inline Ent::Gen::String FactionRelationData::faction2() const
        {
            return Ent::Gen::String(node->at("faction2"));
        }
        inline Ent::Gen::String FactionRelationData::relation() const
        {
            return Ent::Gen::String(node->at("relation"));
        }
        // FactionData
        inline Ent::Gen::String FactionData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String FactionData::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        // FactionManager
        inline Array<Ent::Gen::FactionSpecieRelationData> FactionManager::FactionSpecieRelations() const
        {
            return Array<Ent::Gen::FactionSpecieRelationData>(node->at("FactionSpecieRelations"));
        }
        inline Array<Ent::Gen::FactionData> FactionManager::Factions() const
        {
            return Array<Ent::Gen::FactionData>(node->at("Factions"));
        }
        inline Array<Ent::Gen::FactionRelationData> FactionManager::Relations() const
        {
            return Array<Ent::Gen::FactionRelationData>(node->at("Relations"));
        }
        inline Ent::Gen::Manager FactionManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String FactionManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EventMusic
        inline Ent::Gen::String EventMusic::PlayerDeathBank() const
        {
            return Ent::Gen::String(node->at("PlayerDeathBank"));
        }
        inline Ent::Gen::String EventMusic::PlayerDeathEvent() const
        {
            return Ent::Gen::String(node->at("PlayerDeathEvent"));
        }
        inline Ent::Gen::Int EventMusic::PlayerDeathMusicPriority() const
        {
            return Ent::Gen::Int(node->at("PlayerDeathMusicPriority"));
        }
        inline Ent::Gen::Float EventMusic::PlayerDeathTimeOnStack() const
        {
            return Ent::Gen::Float(node->at("PlayerDeathTimeOnStack"));
        }
        inline Ent::Gen::String EventMusic::PlayerVictoryBank() const
        {
            return Ent::Gen::String(node->at("PlayerVictoryBank"));
        }
        inline Ent::Gen::String EventMusic::PlayerVictoryEvent() const
        {
            return Ent::Gen::String(node->at("PlayerVictoryEvent"));
        }
        inline Ent::Gen::String EventMusic::ReleaseCreatureBankPrefix() const
        {
            return Ent::Gen::String(node->at("ReleaseCreatureBankPrefix"));
        }
        inline Ent::Gen::String EventMusic::ReleaseCreatureEventPrefix() const
        {
            return Ent::Gen::String(node->at("ReleaseCreatureEventPrefix"));
        }
        inline Ent::Gen::Int EventMusic::ReleaseCreatureMusicPriority() const
        {
            return Ent::Gen::Int(node->at("ReleaseCreatureMusicPriority"));
        }
        inline Ent::Gen::Float EventMusic::ReleaseCreatureTimeOnStack() const
        {
            return Ent::Gen::Float(node->at("ReleaseCreatureTimeOnStack"));
        }
        inline Ent::Gen::String EventMusic::ReleaseSoulBankPrefix() const
        {
            return Ent::Gen::String(node->at("ReleaseSoulBankPrefix"));
        }
        inline Ent::Gen::String EventMusic::ReleaseSoulEventPrefix() const
        {
            return Ent::Gen::String(node->at("ReleaseSoulEventPrefix"));
        }
        inline Ent::Gen::Int EventMusic::ReleaseSoulMusicPriority() const
        {
            return Ent::Gen::Int(node->at("ReleaseSoulMusicPriority"));
        }
        inline Ent::Gen::Float EventMusic::ReleaseSoulTimeOnStack() const
        {
            return Ent::Gen::Float(node->at("ReleaseSoulTimeOnStack"));
        }
        inline Ent::Gen::SyncTempoMode EventMusic::SynchronizationMode() const
        {
            return Ent::Gen::SyncTempoMode(node->at("SynchronizationMode"));
        }
        inline Ent::Gen::String EventMusic::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MusicManager
        inline Array<Ent::Gen::MusicCategory> MusicManager::Categories() const
        {
            return Array<Ent::Gen::MusicCategory>(node->at("Categories"));
        }
        inline Ent::Gen::EventMusic MusicManager::EventMusicParam() const
        {
            return Ent::Gen::EventMusic(node->at("EventMusicParam"));
        }
        inline PrimArray<Ent::Gen::String> MusicManager::PlayerMusicTypes() const
        {
            return PrimArray<Ent::Gen::String>(node->at("PlayerMusicTypes"));
        }
        inline Ent::Gen::String MusicManager::RTPCMixWorldPrefix() const
        {
            return Ent::Gen::String(node->at("RTPCMixWorldPrefix"));
        }
        inline Ent::Gen::String MusicManager::RelationsParamPath() const
        {
            return Ent::Gen::String(node->at("RelationsParamPath"));
        }
        inline Ent::Gen::ShowdownMusic MusicManager::ShowdownMusicParam() const
        {
            return Ent::Gen::ShowdownMusic(node->at("ShowdownMusicParam"));
        }
        inline Ent::Gen::Manager MusicManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::UIMusic MusicManager::UIMusicParam() const
        {
            return Ent::Gen::UIMusic(node->at("UIMusicParam"));
        }
        inline PrimArray<Ent::Gen::String> MusicManager::WorldMusicTypes() const
        {
            return PrimArray<Ent::Gen::String>(node->at("WorldMusicTypes"));
        }
        inline Ent::Gen::String MusicManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EventCameraData
        inline Ent::Gen::Float EventCameraData::BlendCameraTime() const
        {
            return Ent::Gen::Float(node->at("BlendCameraTime"));
        }
        inline Ent::Gen::Bool EventCameraData::CameraAimTriggerActor() const
        {
            return Ent::Gen::Bool(node->at("CameraAimTriggerActor"));
        }
        inline Array<Ent::Gen::Vector3> EventCameraData::CameraOffsets() const
        {
            return Array<Ent::Gen::Vector3>(node->at("CameraOffsets"));
        }
        inline Ent::Gen::Float EventCameraData::DOFFarStart() const
        {
            return Ent::Gen::Float(node->at("DOFFarStart"));
        }
        inline Ent::Gen::Float EventCameraData::DOFFarStop() const
        {
            return Ent::Gen::Float(node->at("DOFFarStop"));
        }
        inline Ent::Gen::Float EventCameraData::DOFMultiplier() const
        {
            return Ent::Gen::Float(node->at("DOFMultiplier"));
        }
        inline Ent::Gen::Float EventCameraData::DOFNearStart() const
        {
            return Ent::Gen::Float(node->at("DOFNearStart"));
        }
        inline Ent::Gen::Float EventCameraData::DOFNearStop() const
        {
            return Ent::Gen::Float(node->at("DOFNearStop"));
        }
        inline Ent::Gen::Bool EventCameraData::DOFRelativeTarget() const
        {
            return Ent::Gen::Bool(node->at("DOFRelativeTarget"));
        }
        inline Ent::Gen::Float EventCameraData::EventCameraTime() const
        {
            return Ent::Gen::Float(node->at("EventCameraTime"));
        }
        inline Ent::Gen::Float EventCameraData::FOV() const
        {
            return Ent::Gen::Float(node->at("FOV"));
        }
        inline Ent::Gen::Bool EventCameraData::FixedCam() const
        {
            return Ent::Gen::Bool(node->at("FixedCam"));
        }
        inline Ent::Gen::Bool EventCameraData::FollowCam() const
        {
            return Ent::Gen::Bool(node->at("FollowCam"));
        }
        inline Ent::Gen::Bool EventCameraData::FollowTarget() const
        {
            return Ent::Gen::Bool(node->at("FollowTarget"));
        }
        inline Ent::Gen::Float EventCameraData::OffsetsBlendTime() const
        {
            return Ent::Gen::Float(node->at("OffsetsBlendTime"));
        }
        inline Ent::Gen::Bool EventCameraData::PositionsAngularBlend() const
        {
            return Ent::Gen::Bool(node->at("PositionsAngularBlend"));
        }
        inline Ent::Gen::Float EventCameraData::PositionsBlendTime() const
        {
            return Ent::Gen::Float(node->at("PositionsBlendTime"));
        }
        inline Array<Ent::Gen::Vector3> EventCameraData::TargetOffsets() const
        {
            return Array<Ent::Gen::Vector3>(node->at("TargetOffsets"));
        }
        inline Ent::Gen::Bool EventCameraData::UseDOF() const
        {
            return Ent::Gen::Bool(node->at("UseDOF"));
        }
        inline Ent::Gen::Bool EventCameraData::UseOffsetsSpline() const
        {
            return Ent::Gen::Bool(node->at("UseOffsetsSpline"));
        }
        inline Ent::Gen::Bool EventCameraData::UsePositionsSpline() const
        {
            return Ent::Gen::Bool(node->at("UsePositionsSpline"));
        }
        inline Ent::Gen::Bool EventCameraData::UseTriggerActorPosition() const
        {
            return Ent::Gen::Bool(node->at("UseTriggerActorPosition"));
        }
        inline Ent::Gen::Bool EventCameraData::UseTriggerActorSight() const
        {
            return Ent::Gen::Bool(node->at("UseTriggerActorSight"));
        }
        inline Ent::Gen::String EventCameraData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStaffOwnedVertebras_Inputs
        inline Ent::Gen::String EntityStateStaffOwnedVertebras_Inputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int EntityStateStaffOwnedVertebras_Inputs::ownedVertebrasNumber() const
        {
            return Ent::Gen::Int(node->at("ownedVertebrasNumber"));
        }
        // EntityStateSet
        inline Array<Ent::Gen::ResponsiblePointer_ActorState_> EntityStateSet::EntityStates() const
        {
            return Array<Ent::Gen::ResponsiblePointer_ActorState_>(node->at("EntityStates"));
        }
        inline Ent::Gen::String EntityStateSet::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PlayerState
        inline Ent::Gen::String PlayerState::ActiveScene() const
        {
            return Ent::Gen::String(node->at("ActiveScene"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::Map<char const*, Ent::Gen::EntityStateSet>> PlayerState::DynamicStates() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::Map<char const*, Ent::Gen::EntityStateSet>>(node->at("DynamicStates"));
        }
        inline Ent::Gen::GameInfoDB PlayerState::GameInfoDB() const
        {
            return Ent::Gen::GameInfoDB(node->at("GameInfoDB"));
        }
        inline Ent::Gen::Int PlayerState::Version() const
        {
            return Ent::Gen::Int(node->at("Version"));
        }
        inline Ent::Gen::String PlayerState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateMotionConstrained_Inputs
        inline Ent::Gen::Bool EntityStateMotionConstrained_Inputs::ConstrainedLanding() const
        {
            return Ent::Gen::Bool(node->at("ConstrainedLanding"));
        }
        inline Ent::Gen::Bool EntityStateMotionConstrained_Inputs::InputCorrection() const
        {
            return Ent::Gen::Bool(node->at("InputCorrection"));
        }
        inline Ent::Gen::Bool EntityStateMotionConstrained_Inputs::StayOnCurve() const
        {
            return Ent::Gen::Bool(node->at("StayOnCurve"));
        }
        inline Ent::Gen::String EntityStateMotionConstrained_Inputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateManageChildEntityPool_Inputs
        inline Ent::Gen::Float EntityStateManageChildEntityPool_Inputs::DistanceMaxFromCamera() const
        {
            return Ent::Gen::Float(node->at("DistanceMaxFromCamera"));
        }
        inline Ent::Gen::Float EntityStateManageChildEntityPool_Inputs::DistanceMaxFromSpawner() const
        {
            return Ent::Gen::Float(node->at("DistanceMaxFromSpawner"));
        }
        inline Ent::Gen::Float EntityStateManageChildEntityPool_Inputs::SafeDistanceAroundPlayer() const
        {
            return Ent::Gen::Float(node->at("SafeDistanceAroundPlayer"));
        }
        inline Ent::Gen::EntityRef EntityStateManageChildEntityPool_Inputs::SpawnerEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("SpawnerEntityRef"));
        }
        inline Ent::Gen::Float EntityStateManageChildEntityPool_Inputs::UnspawnDelay() const
        {
            return Ent::Gen::Float(node->at("UnspawnDelay"));
        }
        inline Ent::Gen::Float EntityStateManageChildEntityPool_Inputs::UnspawnRadius() const
        {
            return Ent::Gen::Float(node->at("UnspawnRadius"));
        }
        inline Ent::Gen::String EntityStateManageChildEntityPool_Inputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateIncapacitated_Inputs
        inline Ent::Gen::Float EntityStateIncapacitated_Inputs::Time() const
        {
            return Ent::Gen::Float(node->at("Time"));
        }
        inline Ent::Gen::String EntityStateIncapacitated_Inputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateChargeMode_EntityStateChargeModeInputs
        inline Ent::Gen::MoveCapacityData_OrientationSpeed EntityStateChargeMode_EntityStateChargeModeInputs::AngularSpeed() const
        {
            return Ent::Gen::MoveCapacityData_OrientationSpeed(node->at("AngularSpeed"));
        }
        inline Ent::Gen::Float EntityStateChargeMode_EntityStateChargeModeInputs::ForceMultiplier() const
        {
            return Ent::Gen::Float(node->at("ForceMultiplier"));
        }
        inline Ent::Gen::String EntityStateChargeMode_EntityStateChargeModeInputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityLODData
        inline Ent::Gen::EntityRef EntityLODData::EntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("EntityRef"));
        }
        inline Ent::Gen::Float EntityLODData::MaxDist() const
        {
            return Ent::Gen::Float(node->at("MaxDist"));
        }
        inline Ent::Gen::String EntityLODData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityID
        // VegetationPCloudData
        inline PrimArray<Ent::Gen::EnergyValue> VegetationPCloudData::EnergyValues() const
        {
            return PrimArray<Ent::Gen::EnergyValue>(node->at("EnergyValues"));
        }
        inline Ent::Gen::String VegetationPCloudData::PCloudPath() const
        {
            return Ent::Gen::String(node->at("PCloudPath"));
        }
        inline PrimArray<Ent::Gen::String> VegetationPCloudData::UsedVegetations() const
        {
            return PrimArray<Ent::Gen::String>(node->at("UsedVegetations"));
        }
        inline Ent::Gen::String VegetationPCloudData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RegenData
        inline PrimArray<Ent::Gen::EnergyValue> RegenData::EnergyValues() const
        {
            return PrimArray<Ent::Gen::EnergyValue>(node->at("EnergyValues"));
        }
        inline Array<Ent::Gen::EntityLODData> RegenData::LODData() const
        {
            return Array<Ent::Gen::EntityLODData>(node->at("LODData"));
        }
        inline Ent::Gen::String RegenData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergySideData
        inline Ent::Gen::EntityRef EnergySideData::EntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("EntityRef"));
        }
        inline Ent::Gen::String EnergySideData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReviveEnergyComponentInput_EnergySide
        inline Ent::Gen::String ReviveEnergyComponentInput_EnergySide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ReviveEnergyComponentInput_EnergySide::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::EnergySide ReviveEnergyComponentInput_EnergySide::val() const
        {
            return Ent::Gen::EnergySide(node->at("val"));
        }
        // EntityStateRevive_Inputs
        inline Ent::Gen::Float EntityStateRevive_Inputs::Damages() const
        {
            return Ent::Gen::Float(node->at("Damages"));
        }
        inline Ent::Gen::EnergySide EntityStateRevive_Inputs::EnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::String EntityStateRevive_Inputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCreatureHatching_Inputs
        inline Ent::Gen::EnergySide EntityStateCreatureHatching_Inputs::EnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::Bool EntityStateCreatureHatching_Inputs::ForceSuccess() const
        {
            return Ent::Gen::Bool(node->at("ForceSuccess"));
        }
        inline Ent::Gen::MinReviveRatio EntityStateCreatureHatching_Inputs::MinReviveRatio() const
        {
            return Ent::Gen::MinReviveRatio(node->at("MinReviveRatio"));
        }
        inline Ent::Gen::String EntityStateCreatureHatching_Inputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergySideEvent
        inline Ent::Gen::Float EnergySideEvent::ElapsedTime() const
        {
            return Ent::Gen::Float(node->at("ElapsedTime"));
        }
        inline Ent::Gen::EnergySide EnergySideEvent::EnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::String EnergySideEvent::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RegenerationManager
        inline Ent::Gen::EnergyValue RegenerationManager::BackgroundEnergyValue() const
        {
            return Ent::Gen::EnergyValue(node->at("BackgroundEnergyValue"));
        }
        inline Ent::Gen::RegenAreaTransitionSettings RegenerationManager::DefaultTransitionWaveSettings() const
        {
            return Ent::Gen::RegenAreaTransitionSettings(node->at("DefaultTransitionWaveSettings"));
        }
        inline Ent::Gen::Map<EnergyIntensityEnum, Ent::Gen::RegenerationManager_EnergyAreaSetting> RegenerationManager::EnergyAreaSettingsMap() const
        {
            return Ent::Gen::Map<EnergyIntensityEnum, Ent::Gen::RegenerationManager_EnergyAreaSetting>(node->at("EnergyAreaSettingsMap"));
        }
        inline Ent::Gen::Float RegenerationManager::EnergyStrongValueThreshold() const
        {
            return Ent::Gen::Float(node->at("EnergyStrongValueThreshold"));
        }
        inline Ent::Gen::Int RegenerationManager::MaxDispatchedRegenQueries() const
        {
            return Ent::Gen::Int(node->at("MaxDispatchedRegenQueries"));
        }
        inline Ent::Gen::Int RegenerationManager::MaxDynamicRegenEffectCount() const
        {
            return Ent::Gen::Int(node->at("MaxDynamicRegenEffectCount"));
        }
        inline Ent::Gen::Int RegenerationManager::MaxRegenAreaPerCluster() const
        {
            return Ent::Gen::Int(node->at("MaxRegenAreaPerCluster"));
        }
        inline Ent::Gen::Int RegenerationManager::RegenAreaClusterWorldSize() const
        {
            return Ent::Gen::Int(node->at("RegenAreaClusterWorldSize"));
        }
        inline Ent::Gen::Bool RegenerationManager::RegenAreaClustering() const
        {
            return Ent::Gen::Bool(node->at("RegenAreaClustering"));
        }
        inline Ent::Gen::Manager RegenerationManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String RegenerationManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergyPoolGD_EnergyArea
        inline Ent::Gen::EnergyIntensity EnergyPoolGD_EnergyArea::Intensity() const
        {
            return Ent::Gen::EnergyIntensity(node->at("Intensity"));
        }
        inline Ent::Gen::Vector3 EnergyPoolGD_EnergyArea::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::Int EnergyPoolGD_EnergyArea::Priority() const
        {
            return Ent::Gen::Int(node->at("Priority"));
        }
        inline Ent::Gen::variant_MeshShape_ShapeSphere_ShapeBox_ EnergyPoolGD_EnergyArea::Shape() const
        {
            return Ent::Gen::variant_MeshShape_ShapeSphere_ShapeBox_(node->at("Shape"));
        }
        inline Ent::Gen::String EnergyPoolGD_EnergyArea::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EndPosition
        inline Ent::Gen::String EndPosition::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool EndPosition::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Position EndPosition::val() const
        {
            return Ent::Gen::Position(node->at("val"));
        }
        // Enabled
        inline Ent::Gen::String Enabled::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool Enabled::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool Enabled::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // EDITOR_Mesh
        inline Ent::Gen::String EDITOR_Mesh::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int EDITOR_Mesh::id() const
        {
            return Ent::Gen::Int(node->at("id"));
        }
        inline Ent::Gen::String EDITOR_Mesh::path() const
        {
            return Ent::Gen::String(node->at("path"));
        }
        // EDITOR_LODsItem
        inline Ent::Gen::String EDITOR_LODsItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int EDITOR_LODsItem::lod() const
        {
            return Ent::Gen::Int(node->at("lod"));
        }
        inline PrimArray<Ent::Gen::String> EDITOR_LODsItem::wvis() const
        {
            return PrimArray<Ent::Gen::String>(node->at("wvis"));
        }
        // DisplaceNoiseListItem
        inline Ent::Gen::Float DisplaceNoiseListItem::DisplaceDistance() const
        {
            return Ent::Gen::Float(node->at("DisplaceDistance"));
        }
        inline Ent::Gen::Float DisplaceNoiseListItem::LuminanceCenter() const
        {
            return Ent::Gen::Float(node->at("LuminanceCenter"));
        }
        inline Ent::Gen::Int DisplaceNoiseListItem::MapChannel() const
        {
            return Ent::Gen::Int(node->at("MapChannel"));
        }
        inline Ent::Gen::String DisplaceNoiseListItem::MotifName() const
        {
            return Ent::Gen::String(node->at("MotifName"));
        }
        inline Ent::Gen::Float DisplaceNoiseListItem::MotifOffsetX() const
        {
            return Ent::Gen::Float(node->at("MotifOffsetX"));
        }
        inline Ent::Gen::Float DisplaceNoiseListItem::MotifOffsetY() const
        {
            return Ent::Gen::Float(node->at("MotifOffsetY"));
        }
        inline Ent::Gen::Float DisplaceNoiseListItem::MotifRotationZ() const
        {
            return Ent::Gen::Float(node->at("MotifRotationZ"));
        }
        inline Ent::Gen::Float DisplaceNoiseListItem::MotifSizeX() const
        {
            return Ent::Gen::Float(node->at("MotifSizeX"));
        }
        inline Ent::Gen::Float DisplaceNoiseListItem::MotifSizeY() const
        {
            return Ent::Gen::Float(node->at("MotifSizeY"));
        }
        inline Ent::Gen::String DisplaceNoiseListItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DisableFluid
        inline Ent::Gen::String DisableFluid::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool DisableFluid::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool DisableFluid::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // DeltaTimeFactor
        inline Ent::Gen::String DeltaTimeFactor::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool DeltaTimeFactor::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float DeltaTimeFactor::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // DebugManager_PlayerState
        // DebugManager_ComponentID
        inline Ent::Gen::String DebugManager_ComponentID::ComponentNameID() const
        {
            return Ent::Gen::String(node->at("ComponentNameID"));
        }
        inline Ent::Gen::EntityID DebugManager_ComponentID::EntityID() const
        {
            return Ent::Gen::EntityID(node->at("EntityID"));
        }
        inline Ent::Gen::String DebugManager_ComponentID::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DebugDisplayFlags
        inline Ent::Gen::Bool DebugDisplayFlags::Activate() const
        {
            return Ent::Gen::Bool(node->at("Activate"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::ActiveRTPCHunt() const
        {
            return Ent::Gen::Bool(node->at("ActiveRTPCHunt"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::ActiveWeatherSystem() const
        {
            return Ent::Gen::Bool(node->at("ActiveWeatherSystem"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::AssertOnPestoErrors() const
        {
            return Ent::Gen::Bool(node->at("AssertOnPestoErrors"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayActorStateArbiter() const
        {
            return Ent::Gen::Bool(node->at("DisplayActorStateArbiter"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAnalytics() const
        {
            return Ent::Gen::Bool(node->at("DisplayAnalytics"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousClan() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousClan"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousCreatureList() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousCreatureList"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousDecision() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousDecision"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousEntityList() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousEntityList"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousInfo() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousInfo"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousListClan() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousListClan"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousLogMessage() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousLogMessage"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousMaster() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousMaster"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousPhysical() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousPhysical"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousPosition() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousPosition"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousPredator() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousPredator"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousPsychological() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousPsychological"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousSound() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousSound"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayAutonomousUnlocked() const
        {
            return Ent::Gen::Bool(node->at("DisplayAutonomousUnlocked"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayBehavior() const
        {
            return Ent::Gen::Bool(node->at("DisplayBehavior"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayBlendShapeDebug() const
        {
            return Ent::Gen::Bool(node->at("DisplayBlendShapeDebug"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayBrainMonitor() const
        {
            return Ent::Gen::Bool(node->at("DisplayBrainMonitor"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCPU() const
        {
            return Ent::Gen::Bool(node->at("DisplayCPU"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCompass() const
        {
            return Ent::Gen::Bool(node->at("DisplayCompass"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayComponentCacheDebugger() const
        {
            return Ent::Gen::Bool(node->at("DisplayComponentCacheDebugger"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayComponentsDependencies() const
        {
            return Ent::Gen::Bool(node->at("DisplayComponentsDependencies"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayConnectionWarning() const
        {
            return Ent::Gen::Bool(node->at("DisplayConnectionWarning"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListAggressive() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListAggressive"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListDanger() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListDanger"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListDetection() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListDetection"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListDistance() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListDistance"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListHelp() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListHelp"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListPresence() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListPresence"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListSpecie() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListSpecie"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListState() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListState"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListThreat() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListThreat"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListTrust() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListTrust"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayCreatureListVisibility() const
        {
            return Ent::Gen::Bool(node->at("DisplayCreatureListVisibility"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayDecalsDebug() const
        {
            return Ent::Gen::Bool(node->at("DisplayDecalsDebug"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayDistanceTool() const
        {
            return Ent::Gen::Bool(node->at("DisplayDistanceTool"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayDrawDebugFromLastSteppedFrame() const
        {
            return Ent::Gen::Bool(node->at("DisplayDrawDebugFromLastSteppedFrame"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayEnergyPools() const
        {
            return Ent::Gen::Bool(node->at("DisplayEnergyPools"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayEntities() const
        {
            return Ent::Gen::Bool(node->at("DisplayEntities"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayEntitiesWithErrors() const
        {
            return Ent::Gen::Bool(node->at("DisplayEntitiesWithErrors"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayEntityClan() const
        {
            return Ent::Gen::Bool(node->at("DisplayEntityClan"));
        }
        inline Ent::Gen::Float DebugDisplayFlags::DisplayEntityDistanceMax() const
        {
            return Ent::Gen::Float(node->at("DisplayEntityDistanceMax"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayFPS() const
        {
            return Ent::Gen::Bool(node->at("DisplayFPS"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayGameMaster() const
        {
            return Ent::Gen::Bool(node->at("DisplayGameMaster"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayGamepadStateViewer() const
        {
            return Ent::Gen::Bool(node->at("DisplayGamepadStateViewer"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayGestureMenu() const
        {
            return Ent::Gen::Bool(node->at("DisplayGestureMenu"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayGoToPosition() const
        {
            return Ent::Gen::Bool(node->at("DisplayGoToPosition"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayHeightProbe() const
        {
            return Ent::Gen::Bool(node->at("DisplayHeightProbe"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayHitDebugger() const
        {
            return Ent::Gen::Bool(node->at("DisplayHitDebugger"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayHotSpot() const
        {
            return Ent::Gen::Bool(node->at("DisplayHotSpot"));
        }
        inline Ent::Gen::Float DebugDisplayFlags::DisplayHotspotDistanceMax() const
        {
            return Ent::Gen::Float(node->at("DisplayHotspotDistanceMax"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayManagersInfos() const
        {
            return Ent::Gen::Bool(node->at("DisplayManagersInfos"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayMaterialBank() const
        {
            return Ent::Gen::Bool(node->at("DisplayMaterialBank"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayMeshRasterizerInfos() const
        {
            return Ent::Gen::Bool(node->at("DisplayMeshRasterizerInfos"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayObjectFilterHistory() const
        {
            return Ent::Gen::Bool(node->at("DisplayObjectFilterHistory"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayOrder() const
        {
            return Ent::Gen::Bool(node->at("DisplayOrder"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPadEmulator() const
        {
            return Ent::Gen::Bool(node->at("DisplayPadEmulator"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayParticleTool() const
        {
            return Ent::Gen::Bool(node->at("DisplayParticleTool"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPathSystem() const
        {
            return Ent::Gen::Bool(node->at("DisplayPathSystem"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPesto() const
        {
            return Ent::Gen::Bool(node->at("DisplayPesto"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPestoCPUMarkers() const
        {
            return Ent::Gen::Bool(node->at("DisplayPestoCPUMarkers"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPhysicsPicker() const
        {
            return Ent::Gen::Bool(node->at("DisplayPhysicsPicker"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPivot() const
        {
            return Ent::Gen::Bool(node->at("DisplayPivot"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPlayerInteraction() const
        {
            return Ent::Gen::Bool(node->at("DisplayPlayerInteraction"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPositionPicker() const
        {
            return Ent::Gen::Bool(node->at("DisplayPositionPicker"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayProjectileThrower() const
        {
            return Ent::Gen::Bool(node->at("DisplayProjectileThrower"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayPseudos() const
        {
            return Ent::Gen::Bool(node->at("DisplayPseudos"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayQualityManager() const
        {
            return Ent::Gen::Bool(node->at("DisplayQualityManager"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayRPCCalls() const
        {
            return Ent::Gen::Bool(node->at("DisplayRPCCalls"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayReloadNotifications() const
        {
            return Ent::Gen::Bool(node->at("DisplayReloadNotifications"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplaySelectedPestoEntity() const
        {
            return Ent::Gen::Bool(node->at("DisplaySelectedPestoEntity"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayStringHashTranslator() const
        {
            return Ent::Gen::Bool(node->at("DisplayStringHashTranslator"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayTimer() const
        {
            return Ent::Gen::Bool(node->at("DisplayTimer"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::DisplayTreesStates() const
        {
            return Ent::Gen::Bool(node->at("DisplayTreesStates"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::EditorGuiAllowsComponentsSplitView() const
        {
            return Ent::Gen::Bool(node->at("EditorGuiAllowsComponentsSplitView"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::EditorGuiListenGamepad() const
        {
            return Ent::Gen::Bool(node->at("EditorGuiListenGamepad"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::EditorGuiListenKeyboard() const
        {
            return Ent::Gen::Bool(node->at("EditorGuiListenKeyboard"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::OpenEntityWindows() const
        {
            return Ent::Gen::Bool(node->at("OpenEntityWindows"));
        }
        inline Ent::Gen::Bool DebugDisplayFlags::UseTransformEditor() const
        {
            return Ent::Gen::Bool(node->at("UseTransformEditor"));
        }
        inline Ent::Gen::String DebugDisplayFlags::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DebugManager
        inline PrimArray<Ent::Gen::String> DebugManager::CheatCodes() const
        {
            return PrimArray<Ent::Gen::String>(node->at("CheatCodes"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::Bool> DebugManager::DisplayComponentType() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::Bool>(node->at("DisplayComponentType"));
        }
        inline Ent::Gen::Bool DebugManager::DisplayManagerWindow() const
        {
            return Ent::Gen::Bool(node->at("DisplayManagerWindow"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::Bool> DebugManager::DisplayNodeType() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::Bool>(node->at("DisplayNodeType"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::Bool> DebugManager::DisplayNodeTypeWithAlwaysAutoResize() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::Bool>(node->at("DisplayNodeTypeWithAlwaysAutoResize"));
        }
        inline Ent::Gen::Bool DebugManager::DisplayResourceWindow() const
        {
            return Ent::Gen::Bool(node->at("DisplayResourceWindow"));
        }
        inline Ent::Gen::DebugDisplayFlags DebugManager::Flags() const
        {
            return Ent::Gen::DebugDisplayFlags(node->at("Flags"));
        }
        inline Ent::Gen::Online DebugManager::Online() const
        {
            return Ent::Gen::Online(node->at("Online"));
        }
        inline Ent::Gen::DebugManager_PlayerState DebugManager::PlayerState() const
        {
            return Ent::Gen::DebugManager_PlayerState(node->at("PlayerState"));
        }
        inline Ent::Gen::String DebugManager::StreamPublicationCommand() const
        {
            return Ent::Gen::String(node->at("StreamPublicationCommand"));
        }
        inline Ent::Gen::String DebugManager::StreamingServerIP() const
        {
            return Ent::Gen::String(node->at("StreamingServerIP"));
        }
        inline Ent::Gen::Manager DebugManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Array<Ent::Gen::TrackedEntitiesItem> DebugManager::TrackedEntities() const
        {
            return Array<Ent::Gen::TrackedEntitiesItem>(node->at("TrackedEntities"));
        }
        inline Array<Ent::Gen::DebugManager_ComponentID> DebugManager::TrackedEntitiesSplitComponents() const
        {
            return Array<Ent::Gen::DebugManager_ComponentID>(node->at("TrackedEntitiesSplitComponents"));
        }
        inline Ent::Gen::Bool DebugManager::WipAnimation() const
        {
            return Ent::Gen::Bool(node->at("WipAnimation"));
        }
        inline Ent::Gen::String DebugManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DamagesInstant
        inline Ent::Gen::String DamagesInstant::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float DamagesInstant::damage() const
        {
            return Ent::Gen::Float(node->at("damage"));
        }
        inline Ent::Gen::Float DamagesInstant::impact() const
        {
            return Ent::Gen::Float(node->at("impact"));
        }
        // DamageGauge
        inline Ent::Gen::String DamageGauge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool DamageGauge::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Float DamageGauge::val() const
        {
            return Ent::Gen::Float(node->at("val"));
        }
        // CreatureTypeData
        inline Ent::Gen::String CreatureTypeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String CreatureTypeData::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        inline Ent::Gen::Float CreatureTypeData::value() const
        {
            return Ent::Gen::Float(node->at("value"));
        }
        // CreatureProfile__CreatureProfileFact
        inline Ent::Gen::GameTimeInMs CreatureProfile__CreatureProfileFact::TimeOfCreation() const
        {
            return Ent::Gen::GameTimeInMs(node->at("TimeOfCreation"));
        }
        inline Ent::Gen::String CreatureProfile__CreatureProfileFact::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CreatureProfile
        inline Array<Array<Ent::Gen::CreatureProfile__CreatureProfileFact>> CreatureProfile::Facts() const
        {
            return Array<Array<Ent::Gen::CreatureProfile__CreatureProfileFact>>(node->at("Facts"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::Float> CreatureProfile::ValueMap() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::Float>(node->at("ValueMap"));
        }
        inline Ent::Gen::String CreatureProfile::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CreatureDangerousness
        inline Ent::Gen::String CreatureDangerousness::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int CreatureDangerousness::dangerousness() const
        {
            return Ent::Gen::Int(node->at("dangerousness"));
        }
        // ConstrainedMoveContextInput
        inline Ent::Gen::Float ConstrainedMoveContextInput::CurvatureNormalizationRadius() const
        {
            return Ent::Gen::Float(node->at("CurvatureNormalizationRadius"));
        }
        inline Ent::Gen::Int ConstrainedMoveContextInput::PowerMethodIterationMaxCount() const
        {
            return Ent::Gen::Int(node->at("PowerMethodIterationMaxCount"));
        }
        inline Ent::Gen::Float ConstrainedMoveContextInput::PowerMethodIterationThreshold() const
        {
            return Ent::Gen::Float(node->at("PowerMethodIterationThreshold"));
        }
        inline Ent::Gen::Float ConstrainedMoveContextInput::RaycastAngleThreshold() const
        {
            return Ent::Gen::Float(node->at("RaycastAngleThreshold"));
        }
        inline Ent::Gen::Int ConstrainedMoveContextInput::RaycastCount() const
        {
            return Ent::Gen::Int(node->at("RaycastCount"));
        }
        inline Ent::Gen::Float ConstrainedMoveContextInput::RaycastLength() const
        {
            return Ent::Gen::Float(node->at("RaycastLength"));
        }
        inline Ent::Gen::Float ConstrainedMoveContextInput::RaycastStep() const
        {
            return Ent::Gen::Float(node->at("RaycastStep"));
        }
        inline Ent::Gen::String ConstrainedMoveContextInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ConstrainedInputData
        inline Ent::Gen::Float ConstrainedInputData::DiagonalSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("DiagonalSpeedFactor"));
        }
        inline Ent::Gen::Float ConstrainedInputData::DirectionHysteresisAngle() const
        {
            return Ent::Gen::Float(node->at("DirectionHysteresisAngle"));
        }
        inline Ent::Gen::Float ConstrainedInputData::LateralSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("LateralSpeedFactor"));
        }
        inline Ent::Gen::String ConstrainedInputData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ConditionalRigidityAttribute_RigidityParameter
        inline Ent::Gen::ScaleConverter ConditionalRigidityAttribute_RigidityParameter::Rigidity() const
        {
            return Ent::Gen::ScaleConverter(node->at("Rigidity"));
        }
        inline Ent::Gen::Float ConditionalRigidityAttribute_RigidityParameter::SpeedDown() const
        {
            return Ent::Gen::Float(node->at("SpeedDown"));
        }
        inline Ent::Gen::Float ConditionalRigidityAttribute_RigidityParameter::SpeedUp() const
        {
            return Ent::Gen::Float(node->at("SpeedUp"));
        }
        inline Ent::Gen::String ConditionalRigidityAttribute_RigidityParameter::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ConditionalRigidityAttribute_Attributes
        inline Ent::Gen::ConditionalRigidityAttribute_RigidityParameter ConditionalRigidityAttribute_Attributes::DirectionAngular() const
        {
            return Ent::Gen::ConditionalRigidityAttribute_RigidityParameter(node->at("DirectionAngular"));
        }
        inline Ent::Gen::ConditionalRigidityAttribute_RigidityParameter ConditionalRigidityAttribute_Attributes::DirectionLinear() const
        {
            return Ent::Gen::ConditionalRigidityAttribute_RigidityParameter(node->at("DirectionLinear"));
        }
        inline Ent::Gen::ConditionalRigidityAttribute_RigidityParameter ConditionalRigidityAttribute_Attributes::OscillationAngular() const
        {
            return Ent::Gen::ConditionalRigidityAttribute_RigidityParameter(node->at("OscillationAngular"));
        }
        inline Ent::Gen::ConditionalRigidityAttribute_RigidityParameter ConditionalRigidityAttribute_Attributes::OscillationLinear() const
        {
            return Ent::Gen::ConditionalRigidityAttribute_RigidityParameter(node->at("OscillationLinear"));
        }
        inline Ent::Gen::String ConditionalRigidityAttribute_Attributes::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ComponentInputBase
        // ComponentInputEmpty
        inline Ent::Gen::ComponentInputBase ComponentInputEmpty::Super() const
        {
            return Ent::Gen::ComponentInputBase(node->at("Super"));
        }
        inline Ent::Gen::String ComponentInputEmpty::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ComponentInput
        inline Ent::Gen::Enabled ComponentInput::Enabled() const
        {
            return Ent::Gen::Enabled(node->at("Enabled"));
        }
        inline Ent::Gen::ComponentInputBase ComponentInput::Super() const
        {
            return Ent::Gen::ComponentInputBase(node->at("Super"));
        }
        inline Ent::Gen::String ComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // WallRunComponentInput
        inline Ent::Gen::ComponentInput WallRunComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String WallRunComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VelocityObstacleComponentInput
        inline Ent::Gen::ComponentInput VelocityObstacleComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String VelocityObstacleComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // UnifiedPhysicsDataComponentInput
        inline Ent::Gen::ComponentInput UnifiedPhysicsDataComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String UnifiedPhysicsDataComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SpiritAnimalShrineComponentInput
        inline Ent::Gen::ComponentInput SpiritAnimalShrineComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String SpiritAnimalShrineComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoundEmitterComponentInput
        inline Ent::Gen::ComponentInput SoundEmitterComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String SoundEmitterComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::computePitchAngle SoundEmitterComponentInput::computePitchAngle() const
        {
            return Ent::Gen::computePitchAngle(node->at("computePitchAngle"));
        }
        // SoftCollisionComponentInput
        inline Ent::Gen::ComponentInput SoftCollisionComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String SoftCollisionComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SmoothScaleComponentInput
        inline Ent::Gen::Parameters SmoothScaleComponentInput::Parameters() const
        {
            return Ent::Gen::Parameters(node->at("Parameters"));
        }
        inline Ent::Gen::ScaleFactor SmoothScaleComponentInput::ScaleFactor() const
        {
            return Ent::Gen::ScaleFactor(node->at("ScaleFactor"));
        }
        inline Ent::Gen::ComponentInput SmoothScaleComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String SmoothScaleComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ScriptComponentInput
        inline Ent::Gen::ComponentInput ScriptComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String ScriptComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReviveEnergyComponentInput
        inline Ent::Gen::ReviveEnergyComponentInput_EnergySide ReviveEnergyComponentInput::EnergySide() const
        {
            return Ent::Gen::ReviveEnergyComponentInput_EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::ComponentInput ReviveEnergyComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String ReviveEnergyComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RespawnabilityComponentInput
        inline Ent::Gen::ComponentInput RespawnabilityComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String RespawnabilityComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RagdollComponentInput
        inline Ent::Gen::ComponentInput RagdollComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String RagdollComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsImpactMakerComponentInput
        inline Ent::Gen::ForceMultiplier PhysicsImpactMakerComponentInput::ForceMultiplier() const
        {
            return Ent::Gen::ForceMultiplier(node->at("ForceMultiplier"));
        }
        inline Ent::Gen::ComponentInput PhysicsImpactMakerComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String PhysicsImpactMakerComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsComponentInput
        inline Ent::Gen::ComponentInput PhysicsComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String PhysicsComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PerceiverComponentInput
        inline Ent::Gen::ComponentInput PerceiverComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String PerceiverComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::PerceiverComponentInput_usePerception PerceiverComponentInput::usePerception() const
        {
            return Ent::Gen::PerceiverComponentInput_usePerception(node->at("usePerception"));
        }
        // PerceivableComponentInput
        inline Ent::Gen::ComponentInput PerceivableComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String PerceivableComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::isPerceivable PerceivableComponentInput::isPerceivable() const
        {
            return Ent::Gen::isPerceivable(node->at("isPerceivable"));
        }
        inline Ent::Gen::isPerceivableForEnemies PerceivableComponentInput::isPerceivableForEnemies() const
        {
            return Ent::Gen::isPerceivableForEnemies(node->at("isPerceivableForEnemies"));
        }
        inline Ent::Gen::soundEmissionStrength PerceivableComponentInput::soundEmissionStrength() const
        {
            return Ent::Gen::soundEmissionStrength(node->at("soundEmissionStrength"));
        }
        // OutfitWearerComponentInput
        inline Ent::Gen::FadeDelay OutfitWearerComponentInput::FadeDelay() const
        {
            return Ent::Gen::FadeDelay(node->at("FadeDelay"));
        }
        inline Ent::Gen::FadeDuration OutfitWearerComponentInput::FadeDuration() const
        {
            return Ent::Gen::FadeDuration(node->at("FadeDuration"));
        }
        inline PrimArray<Ent::Gen::InventoryTags> OutfitWearerComponentInput::OutfitTags() const
        {
            return PrimArray<Ent::Gen::InventoryTags>(node->at("OutfitTags"));
        }
        inline Ent::Gen::ComponentInput OutfitWearerComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String OutfitWearerComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MountIKControllerComponentInput
        inline Ent::Gen::ComponentInput MountIKControllerComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String MountIKControllerComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // LifeComponentInput
        inline Ent::Gen::DamageGauge LifeComponentInput::DamageGauge() const
        {
            return Ent::Gen::DamageGauge(node->at("DamageGauge"));
        }
        inline Ent::Gen::ComponentInput LifeComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String LifeComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InteractorComponentInput
        inline Ent::Gen::EndPosition InteractorComponentInput::EndPosition() const
        {
            return Ent::Gen::EndPosition(node->at("EndPosition"));
        }
        inline Ent::Gen::IsActive InteractorComponentInput::IsActive() const
        {
            return Ent::Gen::IsActive(node->at("IsActive"));
        }
        inline Ent::Gen::ComponentInput InteractorComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String InteractorComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InteractableGPEComponentInput
        inline Ent::Gen::Interactor InteractableGPEComponentInput::Interactor() const
        {
            return Ent::Gen::Interactor(node->at("Interactor"));
        }
        inline Ent::Gen::ComponentInput InteractableGPEComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String InteractableGPEComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GrasperComponentInput
        inline Ent::Gen::ComponentInput GrasperComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String GrasperComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::enableSynchronization GrasperComponentInput::enableSynchronization() const
        {
            return Ent::Gen::enableSynchronization(node->at("enableSynchronization"));
        }
        inline Ent::Gen::tryGrasp GrasperComponentInput::tryGrasp() const
        {
            return Ent::Gen::tryGrasp(node->at("tryGrasp"));
        }
        // GraspableComponentInput
        inline Ent::Gen::ComponentInput GraspableComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String GraspableComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::allowedTypesItem> GraspableComponentInput::allowedTypes() const
        {
            return Array<Ent::Gen::allowedTypesItem>(node->at("allowedTypes"));
        }
        inline Ent::Gen::retiming GraspableComponentInput::retiming() const
        {
            return Ent::Gen::retiming(node->at("retiming"));
        }
        // FluidComponentInput
        inline Ent::Gen::DisableFluid FluidComponentInput::DisableFluid() const
        {
            return Ent::Gen::DisableFluid(node->at("DisableFluid"));
        }
        inline Ent::Gen::ComponentInput FluidComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String FluidComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergySpoutComponentInput
        inline Ent::Gen::ComponentInput EnergySpoutComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String EnergySpoutComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CreatureAIComponentInput
        inline Ent::Gen::ComponentInput CreatureAIComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String CreatureAIComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::resetCreatureRequest CreatureAIComponentInput::resetCreatureRequest() const
        {
            return Ent::Gen::resetCreatureRequest(node->at("resetCreatureRequest"));
        }
        inline Ent::Gen::usePerception CreatureAIComponentInput::usePerception() const
        {
            return Ent::Gen::usePerception(node->at("usePerception"));
        }
        // CinematicComponentInput
        inline Ent::Gen::ComponentInput CinematicComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String CinematicComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ChargedJumpComponentInput
        inline Ent::Gen::ComponentInput ChargedJumpComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String ChargedJumpComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::jumpPower ChargedJumpComponentInput::jumpPower() const
        {
            return Ent::Gen::jumpPower(node->at("jumpPower"));
        }
        // CharacterControllerComponentInput
        inline Ent::Gen::JumpHeightMultiplier CharacterControllerComponentInput::JumpHeightMultiplier() const
        {
            return Ent::Gen::JumpHeightMultiplier(node->at("JumpHeightMultiplier"));
        }
        inline Ent::Gen::RigidbodyScaleMultiplier CharacterControllerComponentInput::RigidbodyScaleMultiplier() const
        {
            return Ent::Gen::RigidbodyScaleMultiplier(node->at("RigidbodyScaleMultiplier"));
        }
        inline Ent::Gen::RigidbodyScalingSpeed CharacterControllerComponentInput::RigidbodyScalingSpeed() const
        {
            return Ent::Gen::RigidbodyScalingSpeed(node->at("RigidbodyScalingSpeed"));
        }
        inline Ent::Gen::ComponentInput CharacterControllerComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String CharacterControllerComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BreakableComponentInput
        inline Ent::Gen::ComponentInput BreakableComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String BreakableComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BeamTargetComponentInput
        inline Ent::Gen::ComponentInput BeamTargetComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String BeamTargetComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AttackTriggerComponentInput
        inline Ent::Gen::ComponentInput AttackTriggerComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String AttackTriggerComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AttackComponentInput
        inline Ent::Gen::ComponentInput AttackComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String AttackComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationTransformDriverComponentInput
        inline Ent::Gen::ComponentInput AnimationTransformDriverComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String AnimationTransformDriverComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ComponentGD
        // WildObject
        inline Ent::Gen::String WildObject::GdPath() const
        {
            return Ent::Gen::String(node->at("GdPath"));
        }
        inline Ent::Gen::String WildObject::ObjectType() const
        {
            return Ent::Gen::String(node->at("ObjectType"));
        }
        inline Ent::Gen::ComponentGD WildObject::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String WildObject::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // WallRunGD
        inline Ent::Gen::ComponentGD WallRunGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String WallRunGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float WallRunGD::dropAirControlDelay() const
        {
            return Ent::Gen::Float(node->at("dropAirControlDelay"));
        }
        inline Ent::Gen::Float WallRunGD::dropCoyoteJumpMaxTime() const
        {
            return Ent::Gen::Float(node->at("dropCoyoteJumpMaxTime"));
        }
        inline Ent::Gen::Float WallRunGD::dropTrajectoryRotationYaw() const
        {
            return Ent::Gen::Float(node->at("dropTrajectoryRotationYaw"));
        }
        inline Ent::Gen::Float WallRunGD::dropVisualRotationYawRateFactor() const
        {
            return Ent::Gen::Float(node->at("dropVisualRotationYawRateFactor"));
        }
        inline Ent::Gen::Float WallRunGD::jumpRiseMinCoeffToEnter() const
        {
            return Ent::Gen::Float(node->at("jumpRiseMinCoeffToEnter"));
        }
        inline Ent::Gen::Float WallRunGD::jumpTrajectoryRotationYaw() const
        {
            return Ent::Gen::Float(node->at("jumpTrajectoryRotationYaw"));
        }
        inline Ent::Gen::Float WallRunGD::jumpVisualRotationYawRateFactor() const
        {
            return Ent::Gen::Float(node->at("jumpVisualRotationYawRateFactor"));
        }
        inline Ent::Gen::Float WallRunGD::probeLengthCoeff() const
        {
            return Ent::Gen::Float(node->at("probeLengthCoeff"));
        }
        inline Ent::Gen::Float WallRunGD::probeRadiusCoeff() const
        {
            return Ent::Gen::Float(node->at("probeRadiusCoeff"));
        }
        inline Ent::Gen::Int WallRunGD::probeRayCastCount() const
        {
            return Ent::Gen::Int(node->at("probeRayCastCount"));
        }
        inline Ent::Gen::Float WallRunGD::probeRotationAngle() const
        {
            return Ent::Gen::Float(node->at("probeRotationAngle"));
        }
        inline Ent::Gen::Float WallRunGD::runDurationMax() const
        {
            return Ent::Gen::Float(node->at("runDurationMax"));
        }
        inline Ent::Gen::Float WallRunGD::runDurationMin() const
        {
            return Ent::Gen::Float(node->at("runDurationMin"));
        }
        inline Ent::Gen::Float WallRunGD::runForwardSpeedNormMinToEnter() const
        {
            return Ent::Gen::Float(node->at("runForwardSpeedNormMinToEnter"));
        }
        inline Ent::Gen::Float WallRunGD::runOrientationRateFactor() const
        {
            return Ent::Gen::Float(node->at("runOrientationRateFactor"));
        }
        inline Ent::Gen::Float WallRunGD::runRequiredDirectionDeltaAngleMax() const
        {
            return Ent::Gen::Float(node->at("runRequiredDirectionDeltaAngleMax"));
        }
        inline Ent::Gen::Float WallRunGD::runRequiredDirectionDeltaAngleMin() const
        {
            return Ent::Gen::Float(node->at("runRequiredDirectionDeltaAngleMin"));
        }
        inline Ent::Gen::Float WallRunGD::runRequiredSpeedNormMin() const
        {
            return Ent::Gen::Float(node->at("runRequiredSpeedNormMin"));
        }
        inline Ent::Gen::Float WallRunGD::runSightDeltaAngleMaxtoEnter() const
        {
            return Ent::Gen::Float(node->at("runSightDeltaAngleMaxtoEnter"));
        }
        inline Ent::Gen::Float WallRunGD::runSlopeAngleHysteresis() const
        {
            return Ent::Gen::Float(node->at("runSlopeAngleHysteresis"));
        }
        inline Ent::Gen::Float WallRunGD::runSlopeAngleMax() const
        {
            return Ent::Gen::Float(node->at("runSlopeAngleMax"));
        }
        inline Ent::Gen::Float WallRunGD::runSlopeAngleMin() const
        {
            return Ent::Gen::Float(node->at("runSlopeAngleMin"));
        }
        inline Ent::Gen::String WallRunGD::runTrajectoryRotationPitchCurveResourcePath() const
        {
            return Ent::Gen::String(node->at("runTrajectoryRotationPitchCurveResourcePath"));
        }
        inline Ent::Gen::Float WallRunGD::runTrajectoryRotationYaw() const
        {
            return Ent::Gen::Float(node->at("runTrajectoryRotationYaw"));
        }
        inline Ent::Gen::Float WallRunGD::runVerticalSpeedNormMaxToEnter() const
        {
            return Ent::Gen::Float(node->at("runVerticalSpeedNormMaxToEnter"));
        }
        inline Ent::Gen::Float WallRunGD::runVerticalSpeedNormMinToEnter() const
        {
            return Ent::Gen::Float(node->at("runVerticalSpeedNormMinToEnter"));
        }
        // VoxelSimulationGD
        inline Ent::Gen::Float VoxelSimulationGD::EDITOR_voxelSize() const
        {
            return Ent::Gen::Float(node->at("EDITOR_voxelSize"));
        }
        inline Ent::Gen::ComponentGD VoxelSimulationGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String VoxelSimulationGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VolumeConstraintGD
        inline Array<Ent::Gen::VolumeConstraintDataGD> VolumeConstraintGD::Constraints() const
        {
            return Array<Ent::Gen::VolumeConstraintDataGD>(node->at("Constraints"));
        }
        inline Ent::Gen::ComponentGD VolumeConstraintGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String VolumeConstraintGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VisualGD
        inline Ent::Gen::Bool VisualGD::AlwaysStatic() const
        {
            return Ent::Gen::Bool(node->at("AlwaysStatic"));
        }
        inline Ent::Gen::Bool VisualGD::EDITOR_GenerateFur() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_GenerateFur"));
        }
        inline Array<Ent::Gen::EDITOR_LODsItem> VisualGD::EDITOR_LODs() const
        {
            return Array<Ent::Gen::EDITOR_LODsItem>(node->at("EDITOR_LODs"));
        }
        inline Ent::Gen::String VisualGD::MaterialGroup() const
        {
            return Ent::Gen::String(node->at("MaterialGroup"));
        }
        inline Ent::Gen::Float VisualGD::RUNTIME_LODScale() const
        {
            return Ent::Gen::Float(node->at("RUNTIME_LODScale"));
        }
        inline Array<Ent::Gen::RUNTIME_LODsItem> VisualGD::RUNTIME_LODs() const
        {
            return Array<Ent::Gen::RUNTIME_LODsItem>(node->at("RUNTIME_LODs"));
        }
        inline Ent::Gen::ComponentGD VisualGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String VisualGD::VisualResourcePath() const
        {
            return Ent::Gen::String(node->at("VisualResourcePath"));
        }
        inline Ent::Gen::String VisualGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VelocityObstacleGD
        inline Ent::Gen::Float VelocityObstacleGD::AccelerationAfterAvoidance() const
        {
            return Ent::Gen::Float(node->at("AccelerationAfterAvoidance"));
        }
        inline Ent::Gen::Float VelocityObstacleGD::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::ComponentGD VelocityObstacleGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String VelocityObstacleGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // UnifiedPhysicsDataGD
        inline Ent::Gen::ComponentGD UnifiedPhysicsDataGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String UnifiedPhysicsDataGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TriggerEventCameraGD
        inline Ent::Gen::EventCameraData TriggerEventCameraGD::EventCameraData() const
        {
            return Ent::Gen::EventCameraData(node->at("EventCameraData"));
        }
        inline PrimArray<Ent::Gen::String> TriggerEventCameraGD::PlayAnimBeforeTrigger() const
        {
            return PrimArray<Ent::Gen::String>(node->at("PlayAnimBeforeTrigger"));
        }
        inline Array<PrimArray<Ent::Gen::String>> TriggerEventCameraGD::PlayAnimsWhenTriggered() const
        {
            return Array<PrimArray<Ent::Gen::String>>(node->at("PlayAnimsWhenTriggered"));
        }
        inline Ent::Gen::Float TriggerEventCameraGD::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::ComponentGD TriggerEventCameraGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Bool TriggerEventCameraGD::UseDuration() const
        {
            return Ent::Gen::Bool(node->at("UseDuration"));
        }
        inline Ent::Gen::Bool TriggerEventCameraGD::UsePhysics() const
        {
            return Ent::Gen::Bool(node->at("UsePhysics"));
        }
        inline Ent::Gen::Bool TriggerEventCameraGD::UseRadius() const
        {
            return Ent::Gen::Bool(node->at("UseRadius"));
        }
        inline Ent::Gen::String TriggerEventCameraGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TransformGD
        inline Ent::Gen::Bool TransformGD::EDITOR_InheritScaleFromSubSceneHolder() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_InheritScaleFromSubSceneHolder"));
        }
        inline Ent::Gen::Bool TransformGD::EDITOR_PropagateScaleToSubScene() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_PropagateScaleToSubScene"));
        }
        inline Ent::Gen::Matrix33 TransformGD::Matrix() const
        {
            return Ent::Gen::Matrix33(node->at("Matrix"));
        }
        inline Ent::Gen::Quat TransformGD::Orientation() const
        {
            return Ent::Gen::Quat(node->at("Orientation"));
        }
        inline Ent::Gen::Vector3 TransformGD::Position() const
        {
            return Ent::Gen::Vector3(node->at("Position"));
        }
        inline Ent::Gen::Vector3 TransformGD::Scale() const
        {
            return Ent::Gen::Vector3(node->at("Scale"));
        }
        inline Ent::Gen::ComponentGD TransformGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String TransformGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TestUnion
        inline Ent::Gen::ComponentGD TestUnion::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ TestUnion::Union() const
        {
            return Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(node->at("Union"));
        }
        inline Array<Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_> TestUnion::UnionArray() const
        {
            return Array<Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_>(node->at("UnionArray"));
        }
        inline Array<Ent::Gen::UnionObjectArrayItem> TestUnion::UnionObjectArray() const
        {
            return Array<Ent::Gen::UnionObjectArrayItem>(node->at("UnionObjectArray"));
        }
        inline Ent::Gen::String TestUnion::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TestTagsList
        inline Ent::Gen::Float TestTagsList::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::ComponentGD TestTagsList::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::TagsList TestTagsList::Tags() const
        {
            return Ent::Gen::TagsList(node->at("Tags"));
        }
        inline Ent::Gen::String TestTagsList::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TestSetOfObject
        inline Ent::Gen::Map<char const*, Ent::Gen::MapOfObjectItem_A> TestSetOfObject::MapOfObject() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::MapOfObjectItem_A>(node->at("MapOfObject"));
        }
        inline Ent::Gen::ObjectSet<char const*, Ent::Gen::SetOfObjectItem> TestSetOfObject::SetOfObject() const
        {
            return Ent::Gen::ObjectSet<char const*, Ent::Gen::SetOfObjectItem>(node->at("SetOfObject"));
        }
        inline Ent::Gen::ComponentGD TestSetOfObject::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String TestSetOfObject::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TestEntityRef
        inline Ent::Gen::ComponentGD TestEntityRef::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::EntityRef TestEntityRef::TestRef() const
        {
            return Ent::Gen::EntityRef(node->at("TestRef"));
        }
        inline Ent::Gen::String TestEntityRef::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TestDefaultValues
        inline Ent::Gen::Float TestDefaultValues::DoubleWithDefaultValue() const
        {
            return Ent::Gen::Float(node->at("DoubleWithDefaultValue"));
        }
        inline Ent::Gen::Matrix33 TestDefaultValues::Matrix() const
        {
            return Ent::Gen::Matrix33(node->at("Matrix"));
        }
        inline Ent::Gen::Matrix33 TestDefaultValues::Matrix2() const
        {
            return Ent::Gen::Matrix33(node->at("Matrix2"));
        }
        inline Ent::Gen::ComponentGD TestDefaultValues::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String TestDefaultValues::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::TestPropertyDefaultValues2 TestDefaultValues::propertyWithDefault() const
        {
            return Ent::Gen::TestPropertyDefaultValues2(node->at("propertyWithDefault"));
        }
        // TestCreature
        inline Ent::Gen::EntityRef TestCreature::FullCursed() const
        {
            return Ent::Gen::EntityRef(node->at("FullCursed"));
        }
        inline Ent::Gen::EntityRef TestCreature::FullLush() const
        {
            return Ent::Gen::EntityRef(node->at("FullLush"));
        }
        inline Ent::Gen::EntityRef TestCreature::SklCursed() const
        {
            return Ent::Gen::EntityRef(node->at("SklCursed"));
        }
        inline Ent::Gen::EntityRef TestCreature::SklLush() const
        {
            return Ent::Gen::EntityRef(node->at("SklLush"));
        }
        inline Ent::Gen::EntityRef TestCreature::SklNeutral() const
        {
            return Ent::Gen::EntityRef(node->at("SklNeutral"));
        }
        inline Ent::Gen::ComponentGD TestCreature::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String TestCreature::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TestArrays
        inline PrimArray<Ent::Gen::Float> TestArrays::DefaultValue() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("DefaultValue"));
        }
        inline PrimArray<Ent::Gen::Float> TestArrays::OverridedDefaultValue() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("OverridedDefaultValue"));
        }
        inline PrimArray<Ent::Gen::Float> TestArrays::OverridedPrefabValue() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("OverridedPrefabValue"));
        }
        inline PrimArray<Ent::Gen::Float> TestArrays::PrefabValue() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("PrefabValue"));
        }
        inline Ent::Gen::ComponentGD TestArrays::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ TestArrays::Variant() const
        {
            return Ent::Gen::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(node->at("Variant"));
        }
        inline Ent::Gen::String TestArrays::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TerrainSurfaceObject
        inline Ent::Gen::String TerrainSurfaceObject::EDITOR_tso() const
        {
            return Ent::Gen::String(node->at("EDITOR_tso"));
        }
        inline Ent::Gen::ComponentGD TerrainSurfaceObject::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String TerrainSurfaceObject::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TerrainGD
        inline Ent::Gen::Int TerrainGD::EDITOR_AlbedoType() const
        {
            return Ent::Gen::Int(node->at("EDITOR_AlbedoType"));
        }
        inline Ent::Gen::Float TerrainGD::EDITOR_CavityAlbedoStrength() const
        {
            return Ent::Gen::Float(node->at("EDITOR_CavityAlbedoStrength"));
        }
        inline Ent::Gen::Float TerrainGD::EDITOR_CavityStrength() const
        {
            return Ent::Gen::Float(node->at("EDITOR_CavityStrength"));
        }
        inline Ent::Gen::Float TerrainGD::EDITOR_CollisionDecimateHmm() const
        {
            return Ent::Gen::Float(node->at("EDITOR_CollisionDecimateHmm"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_ComputeSurfaceObjectTerrain() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_ComputeSurfaceObjectTerrain"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_DebugMode() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_DebugMode"));
        }
        inline Ent::Gen::Int TerrainGD::EDITOR_DetailMapFalloff() const
        {
            return Ent::Gen::Int(node->at("EDITOR_DetailMapFalloff"));
        }
        inline Ent::Gen::Float TerrainGD::EDITOR_DetailScale() const
        {
            return Ent::Gen::Float(node->at("EDITOR_DetailScale"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_DisableSeedParams() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_DisableSeedParams"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_DisplayAlbedo() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_DisplayAlbedo"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_DisplayFinal() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_DisplayFinal"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_Distributed() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_Distributed"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_Erosion() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_Erosion"));
        }
        inline Ent::Gen::Int TerrainGD::EDITOR_ErosionType() const
        {
            return Ent::Gen::Int(node->at("EDITOR_ErosionType"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_ExportCollision() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_ExportCollision"));
        }
        inline Ent::Gen::Int TerrainGD::EDITOR_ExportQuality() const
        {
            return Ent::Gen::Int(node->at("EDITOR_ExportQuality"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_LocalSndbs() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_LocalSndbs"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_MergeTSOPreview() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_MergeTSOPreview"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_MultiLayerHeightmap() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_MultiLayerHeightmap"));
        }
        inline Ent::Gen::String TerrainGD::EDITOR_Path() const
        {
            return Ent::Gen::String(node->at("EDITOR_Path"));
        }
        inline Ent::Gen::Int TerrainGD::EDITOR_PreviewQuality() const
        {
            return Ent::Gen::Int(node->at("EDITOR_PreviewQuality"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_ProcessDetailMap() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_ProcessDetailMap"));
        }
        inline Ent::Gen::Int TerrainGD::EDITOR_SeedTextureSizeReduce() const
        {
            return Ent::Gen::Int(node->at("EDITOR_SeedTextureSizeReduce"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_SuperimposeSeeds() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_SuperimposeSeeds"));
        }
        inline Ent::Gen::Float TerrainGD::EDITOR_SurfaceObjectDecimate() const
        {
            return Ent::Gen::Float(node->at("EDITOR_SurfaceObjectDecimate"));
        }
        inline Ent::Gen::Float TerrainGD::EDITOR_SurfaceObjectDecimateHmm() const
        {
            return Ent::Gen::Float(node->at("EDITOR_SurfaceObjectDecimateHmm"));
        }
        inline Ent::Gen::String TerrainGD::EDITOR_TerrainWildMat() const
        {
            return Ent::Gen::String(node->at("EDITOR_TerrainWildMat"));
        }
        inline Ent::Gen::Int TerrainGD::EDITOR_TriPerMeter() const
        {
            return Ent::Gen::Int(node->at("EDITOR_TriPerMeter"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_WMErosionComputeDistant() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_WMErosionComputeDistant"));
        }
        inline Ent::Gen::Bool TerrainGD::EDITOR_WMErosionPreview() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_WMErosionPreview"));
        }
        inline Ent::Gen::ComponentGD TerrainGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Terrain_TerrainMeta TerrainGD::TerrainMeta() const
        {
            return Ent::Gen::Terrain_TerrainMeta(node->at("TerrainMeta"));
        }
        inline Ent::Gen::String TerrainGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TeamGD
        inline Ent::Gen::ComponentGD TeamGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String TeamGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SystemicCreature
        inline PrimArray<Ent::Gen::String> SystemicCreature::BehaviorModifierTagList() const
        {
            return PrimArray<Ent::Gen::String>(node->at("BehaviorModifierTagList"));
        }
        inline Ent::Gen::String SystemicCreature::BehaviorPath() const
        {
            return Ent::Gen::String(node->at("BehaviorPath"));
        }
        inline Ent::Gen::String SystemicCreature::BehaviorState() const
        {
            return Ent::Gen::String(node->at("BehaviorState"));
        }
        inline Ent::Gen::Bool SystemicCreature::Burried() const
        {
            return Ent::Gen::Bool(node->at("Burried"));
        }
        inline Ent::Gen::Bool SystemicCreature::CameraTarget() const
        {
            return Ent::Gen::Bool(node->at("CameraTarget"));
        }
        inline Ent::Gen::Bool SystemicCreature::CanBeMaster() const
        {
            return Ent::Gen::Bool(node->at("CanBeMaster"));
        }
        inline Ent::Gen::String SystemicCreature::Faction() const
        {
            return Ent::Gen::String(node->at("Faction"));
        }
        inline Ent::Gen::String SystemicCreature::Inventory() const
        {
            return Ent::Gen::String(node->at("Inventory"));
        }
        inline Ent::Gen::Bool SystemicCreature::Invincible() const
        {
            return Ent::Gen::Bool(node->at("Invincible"));
        }
        inline Ent::Gen::Float SystemicCreature::Life() const
        {
            return Ent::Gen::Float(node->at("Life"));
        }
        inline Ent::Gen::String SystemicCreature::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Bool SystemicCreature::PlayerSpawn() const
        {
            return Ent::Gen::Bool(node->at("PlayerSpawn"));
        }
        inline PrimArray<Ent::Gen::String> SystemicCreature::ScriptList() const
        {
            return PrimArray<Ent::Gen::String>(node->at("ScriptList"));
        }
        inline Ent::Gen::String SystemicCreature::Spawner() const
        {
            return Ent::Gen::String(node->at("Spawner"));
        }
        inline Ent::Gen::ComponentGD SystemicCreature::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SystemicCreature::UniqueID() const
        {
            return Ent::Gen::String(node->at("UniqueID"));
        }
        inline Ent::Gen::Bool SystemicCreature::Warrior() const
        {
            return Ent::Gen::Bool(node->at("Warrior"));
        }
        inline Ent::Gen::String SystemicCreature::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // StreamingLocatorGD
        inline Ent::Gen::Vector3 StreamingLocatorGD::CenterOffset() const
        {
            return Ent::Gen::Vector3(node->at("CenterOffset"));
        }
        inline Ent::Gen::Float StreamingLocatorGD::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::ComponentGD StreamingLocatorGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String StreamingLocatorGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // StreamableUnitGD
        inline Ent::Gen::EntityRef StreamableUnitGD::BaseImpostor() const
        {
            return Ent::Gen::EntityRef(node->at("BaseImpostor"));
        }
        inline Ent::Gen::Vector3 StreamableUnitGD::BoxSize() const
        {
            return Ent::Gen::Vector3(node->at("BoxSize"));
        }
        inline Ent::Gen::Vector3 StreamableUnitGD::CenterOffset() const
        {
            return Ent::Gen::Vector3(node->at("CenterOffset"));
        }
        inline Ent::Gen::EntityRef StreamableUnitGD::EnergyPool() const
        {
            return Ent::Gen::EntityRef(node->at("EnergyPool"));
        }
        inline PrimArray<Ent::Gen::EntityRef> StreamableUnitGD::FullEntities() const
        {
            return PrimArray<Ent::Gen::EntityRef>(node->at("FullEntities"));
        }
        inline Ent::Gen::EntityRef StreamableUnitGD::FullEntitiesHolder() const
        {
            return Ent::Gen::EntityRef(node->at("FullEntitiesHolder"));
        }
        inline Ent::Gen::Float StreamableUnitGD::Hysteresis() const
        {
            return Ent::Gen::Float(node->at("Hysteresis"));
        }
        inline Ent::Gen::ComponentGD StreamableUnitGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::EntityRef> StreamableUnitGD::VariantImpostors() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::EntityRef>(node->at("VariantImpostors"));
        }
        inline Ent::Gen::String StreamableUnitGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // StickToTerrain
        inline Ent::Gen::Float StickToTerrain::NormalRatio() const
        {
            return Ent::Gen::Float(node->at("NormalRatio"));
        }
        inline Ent::Gen::ComponentGD StickToTerrain::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Float StickToTerrain::ZOffset() const
        {
            return Ent::Gen::Float(node->at("ZOffset"));
        }
        inline Ent::Gen::String StickToTerrain::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float StickToTerrain::precisionRadius() const
        {
            return Ent::Gen::Float(node->at("precisionRadius"));
        }
        inline Ent::Gen::Bool StickToTerrain::useNormal() const
        {
            return Ent::Gen::Bool(node->at("useNormal"));
        }
        // StaticObjectGD
        inline Ent::Gen::Bool StaticObjectGD::EDITOR_IsCave() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_IsCave"));
        }
        inline Ent::Gen::Bool StaticObjectGD::EDITOR_UsedInMultiLayerHeightmap() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_UsedInMultiLayerHeightmap"));
        }
        inline Ent::Gen::ComponentGD StaticObjectGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Bool StaticObjectGD::Visual() const
        {
            return Ent::Gen::Bool(node->at("Visual"));
        }
        inline Ent::Gen::String StaticObjectGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // StaffVertebrasGD
        inline Ent::Gen::Int StaffVertebrasGD::BeginVertebraRefillThreshold() const
        {
            return Ent::Gen::Int(node->at("BeginVertebraRefillThreshold"));
        }
        inline Ent::Gen::Int StaffVertebrasGD::EndVertebraRefillThreshold() const
        {
            return Ent::Gen::Int(node->at("EndVertebraRefillThreshold"));
        }
        inline PrimArray<Ent::Gen::String> StaffVertebrasGD::HotspotNames() const
        {
            return PrimArray<Ent::Gen::String>(node->at("HotspotNames"));
        }
        inline Ent::Gen::Int StaffVertebrasGD::MaxVertebraCount() const
        {
            return Ent::Gen::Int(node->at("MaxVertebraCount"));
        }
        inline Ent::Gen::Int StaffVertebrasGD::OwnedVertebraStartCount() const
        {
            return Ent::Gen::Int(node->at("OwnedVertebraStartCount"));
        }
        inline Ent::Gen::Float StaffVertebrasGD::RefillVertebraTimer() const
        {
            return Ent::Gen::Float(node->at("RefillVertebraTimer"));
        }
        inline Ent::Gen::ComponentGD StaffVertebrasGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String StaffVertebrasGD::VertebraGRCPath1() const
        {
            return Ent::Gen::String(node->at("VertebraGRCPath1"));
        }
        inline Ent::Gen::String StaffVertebrasGD::VertebraGRCPath2() const
        {
            return Ent::Gen::String(node->at("VertebraGRCPath2"));
        }
        inline Ent::Gen::String StaffVertebrasGD::VertebraGRCPath3() const
        {
            return Ent::Gen::String(node->at("VertebraGRCPath3"));
        }
        inline Ent::Gen::String StaffVertebrasGD::VertebraGRCPath4() const
        {
            return Ent::Gen::String(node->at("VertebraGRCPath4"));
        }
        inline Ent::Gen::String StaffVertebrasGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SpiritAnimalsHolderGD
        inline PrimArray<Ent::Gen::EntityRef> SpiritAnimalsHolderGD::EntityRefs() const
        {
            return PrimArray<Ent::Gen::EntityRef>(node->at("EntityRefs"));
        }
        inline Ent::Gen::ComponentGD SpiritAnimalsHolderGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SpiritAnimalsHolderGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SpiritAnimalShrineGD
        inline Ent::Gen::Float SpiritAnimalShrineGD::InteractionDuration() const
        {
            return Ent::Gen::Float(node->at("InteractionDuration"));
        }
        inline Ent::Gen::Specie SpiritAnimalShrineGD::Specie() const
        {
            return Ent::Gen::Specie(node->at("Specie"));
        }
        inline Ent::Gen::ComponentGD SpiritAnimalShrineGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Float SpiritAnimalShrineGD::TimeHysteresis() const
        {
            return Ent::Gen::Float(node->at("TimeHysteresis"));
        }
        inline Ent::Gen::String SpiritAnimalShrineGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SpiritAnimalGD
        inline Ent::Gen::Float SpiritAnimalGD::DeadDurationBeforeRevive() const
        {
            return Ent::Gen::Float(node->at("DeadDurationBeforeRevive"));
        }
        inline Ent::Gen::Float SpiritAnimalGD::SoulCooldownFromDeath() const
        {
            return Ent::Gen::Float(node->at("SoulCooldownFromDeath"));
        }
        inline Ent::Gen::Float SpiritAnimalGD::SoulCooldownFromSpiritAttack() const
        {
            return Ent::Gen::Float(node->at("SoulCooldownFromSpiritAttack"));
        }
        inline Ent::Gen::Float SpiritAnimalGD::SpiritAttackHoldDuration() const
        {
            return Ent::Gen::Float(node->at("SpiritAttackHoldDuration"));
        }
        inline Ent::Gen::ComponentGD SpiritAnimalGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SpiritAnimalGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoundOpportunityComponentGD
        inline Ent::Gen::String SoundOpportunityComponentGD::EDITOR_FilterTag() const
        {
            return Ent::Gen::String(node->at("EDITOR_FilterTag"));
        }
        inline Array<Ent::Gen::SoundOpportunityRangeDescription> SoundOpportunityComponentGD::RangeDescriptions() const
        {
            return Array<Ent::Gen::SoundOpportunityRangeDescription>(node->at("RangeDescriptions"));
        }
        inline Ent::Gen::ComponentGD SoundOpportunityComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SoundOpportunityComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoundEmitterGD
        inline Ent::Gen::Float SoundEmitterGD::ActivationDistance() const
        {
            return Ent::Gen::Float(node->at("ActivationDistance"));
        }
        inline PrimArray<Ent::Gen::String> SoundEmitterGD::ActivationSound() const
        {
            return PrimArray<Ent::Gen::String>(node->at("ActivationSound"));
        }
        inline Ent::Gen::SyncTempoMode SoundEmitterGD::ActivationSync() const
        {
            return Ent::Gen::SyncTempoMode(node->at("ActivationSync"));
        }
        inline Ent::Gen::String SoundEmitterGD::AuxSend() const
        {
            return Ent::Gen::String(node->at("AuxSend"));
        }
        inline PrimArray<Ent::Gen::String> SoundEmitterGD::Bank() const
        {
            return PrimArray<Ent::Gen::String>(node->at("Bank"));
        }
        inline Ent::Gen::Float SoundEmitterGD::BoidRadius() const
        {
            return Ent::Gen::Float(node->at("BoidRadius"));
        }
        inline Ent::Gen::Float SoundEmitterGD::BoidRadiusToInnerEdgeRatio() const
        {
            return Ent::Gen::Float(node->at("BoidRadiusToInnerEdgeRatio"));
        }
        inline Ent::Gen::Float SoundEmitterGD::BoidRadiusToOuterEdgeRatio() const
        {
            return Ent::Gen::Float(node->at("BoidRadiusToOuterEdgeRatio"));
        }
        inline Ent::Gen::Bool SoundEmitterGD::BoidRealPositionComputation() const
        {
            return Ent::Gen::Bool(node->at("BoidRealPositionComputation"));
        }
        inline Ent::Gen::String SoundEmitterGD::CreatureType() const
        {
            return Ent::Gen::String(node->at("CreatureType"));
        }
        inline Ent::Gen::Bool SoundEmitterGD::Echoes() const
        {
            return Ent::Gen::Bool(node->at("Echoes"));
        }
        inline Ent::Gen::Float SoundEmitterGD::EchoesSend() const
        {
            return Ent::Gen::Float(node->at("EchoesSend"));
        }
        inline Ent::Gen::Float SoundEmitterGD::EventDistance() const
        {
            return Ent::Gen::Float(node->at("EventDistance"));
        }
        inline Ent::Gen::SoundEventMapping SoundEmitterGD::EventMapping() const
        {
            return Ent::Gen::SoundEventMapping(node->at("EventMapping"));
        }
        inline PrimArray<Ent::Gen::String> SoundEmitterGD::InEvents() const
        {
            return PrimArray<Ent::Gen::String>(node->at("InEvents"));
        }
        inline Ent::Gen::SoundOcclusionData SoundEmitterGD::OcclusionData() const
        {
            return Ent::Gen::SoundOcclusionData(node->at("OcclusionData"));
        }
        inline PrimArray<Ent::Gen::String> SoundEmitterGD::OutEvents() const
        {
            return PrimArray<Ent::Gen::String>(node->at("OutEvents"));
        }
        inline Ent::Gen::ComponentGD SoundEmitterGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline PrimArray<Ent::Gen::String> SoundEmitterGD::UnactivationSound() const
        {
            return PrimArray<Ent::Gen::String>(node->at("UnactivationSound"));
        }
        inline Ent::Gen::SyncTempoMode SoundEmitterGD::UnactivationSync() const
        {
            return Ent::Gen::SyncTempoMode(node->at("UnactivationSync"));
        }
        inline Ent::Gen::Bool SoundEmitterGD::UseLocalAltitudeRTPC() const
        {
            return Ent::Gen::Bool(node->at("UseLocalAltitudeRTPC"));
        }
        inline Ent::Gen::Bool SoundEmitterGD::UseOcclusion() const
        {
            return Ent::Gen::Bool(node->at("UseOcclusion"));
        }
        inline Ent::Gen::String SoundEmitterGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool SoundEmitterGD::dopplerActivated() const
        {
            return Ent::Gen::Bool(node->at("dopplerActivated"));
        }
        inline Ent::Gen::Bool SoundEmitterGD::sendSoundAreaEvents() const
        {
            return Ent::Gen::Bool(node->at("sendSoundAreaEvents"));
        }
        inline Ent::Gen::Float SoundEmitterGD::waterDeepAltitude() const
        {
            return Ent::Gen::Float(node->at("waterDeepAltitude"));
        }
        inline Ent::Gen::Float SoundEmitterGD::waterPuddleAltitude() const
        {
            return Ent::Gen::Float(node->at("waterPuddleAltitude"));
        }
        // SoundAreaGD
        inline Ent::Gen::String SoundAreaGD::EventEnter() const
        {
            return Ent::Gen::String(node->at("EventEnter"));
        }
        inline Ent::Gen::String SoundAreaGD::EventExit() const
        {
            return Ent::Gen::String(node->at("EventExit"));
        }
        inline Ent::Gen::ComponentGD SoundAreaGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SoundAreaGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoulRespawnOpportunityGD
        inline Ent::Gen::EnergySide SoulRespawnOpportunityGD::ForceEnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("ForceEnergySide"));
        }
        inline Ent::Gen::Int SoulRespawnOpportunityGD::MaxDensityCount() const
        {
            return Ent::Gen::Int(node->at("MaxDensityCount"));
        }
        inline Ent::Gen::Float SoulRespawnOpportunityGD::MaxDensityRadius() const
        {
            return Ent::Gen::Float(node->at("MaxDensityRadius"));
        }
        inline Ent::Gen::Vector3 SoulRespawnOpportunityGD::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::Int SoulRespawnOpportunityGD::SlotCount() const
        {
            return Ent::Gen::Int(node->at("SlotCount"));
        }
        inline Ent::Gen::Specie SoulRespawnOpportunityGD::Specie() const
        {
            return Ent::Gen::Specie(node->at("Specie"));
        }
        inline Ent::Gen::ComponentGD SoulRespawnOpportunityGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SoulRespawnOpportunityGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoftCollisionGD
        inline Ent::Gen::Float SoftCollisionGD::PenetrationCoeffSmoothRate() const
        {
            return Ent::Gen::Float(node->at("PenetrationCoeffSmoothRate"));
        }
        inline Ent::Gen::ComponentGD SoftCollisionGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::SoftCollisionGD_VegetationDetectionParameters SoftCollisionGD::VegetationDetectionParam() const
        {
            return Ent::Gen::SoftCollisionGD_VegetationDetectionParameters(node->at("VegetationDetectionParam"));
        }
        inline Ent::Gen::String SoftCollisionGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SmoothScaleComponentGD
        inline Ent::Gen::ComponentGD SmoothScaleComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SmoothScaleComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SideMapGateGD
        inline Ent::Gen::String SideMapGateGD::SideMapName() const
        {
            return Ent::Gen::String(node->at("SideMapName"));
        }
        inline Ent::Gen::ComponentGD SideMapGateGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SideMapGateGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShapeshiftStatueGD
        inline Ent::Gen::EntityRef ShapeshiftStatueGD::AssociatedEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("AssociatedEntityRef"));
        }
        inline Ent::Gen::ComponentGD ShapeshiftStatueGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ShapeshiftStatueGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShamanVisionGD
        inline Ent::Gen::ComponentGD ShamanVisionGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ShamanVisionGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShamanItemGD
        inline PrimArray<Ent::Gen::String> ShamanItemGD::BoneNames() const
        {
            return PrimArray<Ent::Gen::String>(node->at("BoneNames"));
        }
        inline Ent::Gen::EntityRef ShamanItemGD::OppositeItemEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("OppositeItemEntityRef"));
        }
        inline Ent::Gen::Int ShamanItemGD::StartPartCount() const
        {
            return Ent::Gen::Int(node->at("StartPartCount"));
        }
        inline Ent::Gen::ComponentGD ShamanItemGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ShamanItemGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SensorVoxelsGD
        inline Ent::Gen::ComponentGD SensorVoxelsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Array<Ent::Gen::TaggedSDF> SensorVoxelsGD::TaggedSDFs() const
        {
            return Array<Ent::Gen::TaggedSDF>(node->at("TaggedSDFs"));
        }
        inline Ent::Gen::String SensorVoxelsGD::VoxelsDataPath() const
        {
            return Ent::Gen::String(node->at("VoxelsDataPath"));
        }
        inline Ent::Gen::String SensorVoxelsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SensorControllerGD
        inline Ent::Gen::ComponentGD SensorControllerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SensorControllerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SeedPatch
        inline Ent::Gen::Bool SeedPatch::AddVertexColor() const
        {
            return Ent::Gen::Bool(node->at("AddVertexColor"));
        }
        inline Ent::Gen::Matrix33 SeedPatch::LocalMatrix() const
        {
            return Ent::Gen::Matrix33(node->at("LocalMatrix"));
        }
        inline Ent::Gen::String SeedPatch::MeshFile() const
        {
            return Ent::Gen::String(node->at("MeshFile"));
        }
        inline Ent::Gen::String SeedPatch::NoiseName() const
        {
            return Ent::Gen::String(node->at("NoiseName"));
        }
        inline Ent::Gen::Float SeedPatch::NoiseOffsetX() const
        {
            return Ent::Gen::Float(node->at("NoiseOffsetX"));
        }
        inline Ent::Gen::Float SeedPatch::NoiseOffsetY() const
        {
            return Ent::Gen::Float(node->at("NoiseOffsetY"));
        }
        inline Ent::Gen::Float SeedPatch::NoiseSizeX() const
        {
            return Ent::Gen::Float(node->at("NoiseSizeX"));
        }
        inline Ent::Gen::Float SeedPatch::NoiseSizeY() const
        {
            return Ent::Gen::Float(node->at("NoiseSizeY"));
        }
        inline Ent::Gen::String SeedPatch::SeedName() const
        {
            return Ent::Gen::String(node->at("SeedName"));
        }
        inline Ent::Gen::Bool SeedPatch::SeedOverride() const
        {
            return Ent::Gen::Bool(node->at("SeedOverride"));
        }
        inline Ent::Gen::SeedPatchDataList SeedPatch::SeedPatchDataList() const
        {
            return Ent::Gen::SeedPatchDataList(node->at("SeedPatchDataList"));
        }
        inline Ent::Gen::SeedPatchDatas SeedPatch::SeedPatchDatas() const
        {
            return Ent::Gen::SeedPatchDatas(node->at("SeedPatchDatas"));
        }
        inline Ent::Gen::Int SeedPatch::Subdivision() const
        {
            return Ent::Gen::Int(node->at("Subdivision"));
        }
        inline Ent::Gen::ComponentGD SeedPatch::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SeedPatch::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ScriptComponentGD
        inline Ent::Gen::Map<char const*, Ent::Gen::TypedValue> ScriptComponentGD::CommonDataMap() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::TypedValue>(node->at("CommonDataMap"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::ScriptPathAndDataSet> ScriptComponentGD::ScriptsMap() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::ScriptPathAndDataSet>(node->at("ScriptsMap"));
        }
        inline Ent::Gen::ComponentGD ScriptComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ScriptComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ReviveEnergyGD
        inline Ent::Gen::Float ReviveEnergyGD::HatchingCost() const
        {
            return Ent::Gen::Float(node->at("HatchingCost"));
        }
        inline Ent::Gen::Float ReviveEnergyGD::HatchingDuration() const
        {
            return Ent::Gen::Float(node->at("HatchingDuration"));
        }
        inline Ent::Gen::EnergySide ReviveEnergyGD::InitEnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("InitEnergySide"));
        }
        inline Ent::Gen::ComponentGD ReviveEnergyGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ReviveEnergyGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RespawnabilityGD
        inline Ent::Gen::Bool RespawnabilityGD::CheckIsInCameraFrustum() const
        {
            return Ent::Gen::Bool(node->at("CheckIsInCameraFrustum"));
        }
        inline Ent::Gen::MinDistanceToRespawnPosition RespawnabilityGD::MinDistanceToRespawnPosition() const
        {
            return Ent::Gen::MinDistanceToRespawnPosition(node->at("MinDistanceToRespawnPosition"));
        }
        inline Ent::Gen::MinRespawnDistance RespawnabilityGD::MinRespawnDistance() const
        {
            return Ent::Gen::MinRespawnDistance(node->at("MinRespawnDistance"));
        }
        inline Ent::Gen::RespawnState RespawnabilityGD::RespawnState() const
        {
            return Ent::Gen::RespawnState(node->at("RespawnState"));
        }
        inline Ent::Gen::ComponentGD RespawnabilityGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String RespawnabilityGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RespawnPlaceGD
        inline Ent::Gen::Bool RespawnPlaceGD::AlwaysAvailable() const
        {
            return Ent::Gen::Bool(node->at("AlwaysAvailable"));
        }
        inline Ent::Gen::ComponentGD RespawnPlaceGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String RespawnPlaceGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RegenerableVegetationGD
        inline PrimArray<Ent::Gen::EnergyValue> RegenerableVegetationGD::EnergyValues() const
        {
            return PrimArray<Ent::Gen::EnergyValue>(node->at("EnergyValues"));
        }
        inline Ent::Gen::String RegenerableVegetationGD::PCloudPath() const
        {
            return Ent::Gen::String(node->at("PCloudPath"));
        }
        inline Ent::Gen::ComponentGD RegenerableVegetationGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline PrimArray<Ent::Gen::String> RegenerableVegetationGD::UsedVegetations() const
        {
            return PrimArray<Ent::Gen::String>(node->at("UsedVegetations"));
        }
        inline Array<Ent::Gen::VegetationPCloudData> RegenerableVegetationGD::VegetationPClouds() const
        {
            return Array<Ent::Gen::VegetationPCloudData>(node->at("VegetationPClouds"));
        }
        inline Ent::Gen::String RegenerableVegetationGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RegenSwitcherGD
        inline Ent::Gen::Bool RegenSwitcherGD::ParentTransforms() const
        {
            return Ent::Gen::Bool(node->at("ParentTransforms"));
        }
        inline Array<Ent::Gen::RegenData> RegenSwitcherGD::RegenData() const
        {
            return Array<Ent::Gen::RegenData>(node->at("RegenData"));
        }
        inline Ent::Gen::RegenSwitchBehavior RegenSwitcherGD::RegenSwitchBehavior() const
        {
            return Ent::Gen::RegenSwitchBehavior(node->at("RegenSwitchBehavior"));
        }
        inline Ent::Gen::ComponentGD RegenSwitcherGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String RegenSwitcherGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RagdollGD
        inline Ent::Gen::String RagdollGD::RagdollType() const
        {
            return Ent::Gen::String(node->at("RagdollType"));
        }
        inline Ent::Gen::ComponentGD RagdollGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String RagdollGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // QuickCreatureSwitchGD
        inline PrimArray<Ent::Gen::EntityRef> QuickCreatureSwitchGD::CreatureEntityRefs() const
        {
            return PrimArray<Ent::Gen::EntityRef>(node->at("CreatureEntityRefs"));
        }
        inline Ent::Gen::ComponentGD QuickCreatureSwitchGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String QuickCreatureSwitchGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ProtoComponentGD
        inline Ent::Gen::ComponentGD ProtoComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ProtoComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ProjectileShooterGD
        inline Ent::Gen::Map<char const*, Ent::Gen::ProjectileShooterData> ProjectileShooterGD::ProjectileShooterData() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::ProjectileShooterData>(node->at("ProjectileShooterData"));
        }
        inline Ent::Gen::ComponentGD ProjectileShooterGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ProjectileShooterGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PlayerComponentGD
        inline Ent::Gen::ComponentGD PlayerComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PlayerComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PickableDistributorComponentGD
        inline Ent::Gen::Float PickableDistributorComponentGD::PickableGrowingTime() const
        {
            return Ent::Gen::Float(node->at("PickableGrowingTime"));
        }
        inline Ent::Gen::Float PickableDistributorComponentGD::PickablePickedUpCooldownTime() const
        {
            return Ent::Gen::Float(node->at("PickablePickedUpCooldownTime"));
        }
        inline Array<Ent::Gen::PickableDistributorComponentData> PickableDistributorComponentGD::PickablesList() const
        {
            return Array<Ent::Gen::PickableDistributorComponentData>(node->at("PickablesList"));
        }
        inline Ent::Gen::ComponentGD PickableDistributorComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PickableDistributorComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PickableComponentGD
        inline Array<Ent::Gen::ResponsiblePointer_ActorState_> PickableComponentGD::StatesForPicker() const
        {
            return Array<Ent::Gen::ResponsiblePointer_ActorState_>(node->at("StatesForPicker"));
        }
        inline Ent::Gen::ComponentGD PickableComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PickableComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsTriggerGD
        inline PrimArray<Ent::Gen::String> PhysicsTriggerGD::RequiredComponents() const
        {
            return PrimArray<Ent::Gen::String>(node->at("RequiredComponents"));
        }
        inline Ent::Gen::ComponentGD PhysicsTriggerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PhysicsTriggerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsMeshProviderGD
        inline Ent::Gen::Bool PhysicsMeshProviderGD::EdgeTransitionConstraintAllowed() const
        {
            return Ent::Gen::Bool(node->at("EdgeTransitionConstraintAllowed"));
        }
        inline Ent::Gen::ComponentGD PhysicsMeshProviderGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PhysicsMeshProviderGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsMeshDeformerGD
        inline Ent::Gen::ComponentGD PhysicsMeshDeformerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PhysicsMeshDeformerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsImpactMakerGD
        inline Ent::Gen::Float PhysicsImpactMakerGD::AttackAngle() const
        {
            return Ent::Gen::Float(node->at("AttackAngle"));
        }
        inline Ent::Gen::Bool PhysicsImpactMakerGD::BreakEverything() const
        {
            return Ent::Gen::Bool(node->at("BreakEverything"));
        }
        inline Ent::Gen::ScaleConverter PhysicsImpactMakerGD::DamageAndImpactBySpeed() const
        {
            return Ent::Gen::ScaleConverter(node->at("DamageAndImpactBySpeed"));
        }
        inline Ent::Gen::String PhysicsImpactMakerGD::DamageTag() const
        {
            return Ent::Gen::String(node->at("DamageTag"));
        }
        inline Ent::Gen::Float PhysicsImpactMakerGD::DirectionInfluence() const
        {
            return Ent::Gen::Float(node->at("DirectionInfluence"));
        }
        inline Ent::Gen::Float PhysicsImpactMakerGD::DirectionUpdateThreshold() const
        {
            return Ent::Gen::Float(node->at("DirectionUpdateThreshold"));
        }
        inline Ent::Gen::ScaleConverter PhysicsImpactMakerGD::ForceBySpeed() const
        {
            return Ent::Gen::ScaleConverter(node->at("ForceBySpeed"));
        }
        inline Ent::Gen::String PhysicsImpactMakerGD::HitImpactTag() const
        {
            return Ent::Gen::String(node->at("HitImpactTag"));
        }
        inline Ent::Gen::Float PhysicsImpactMakerGD::Restitution() const
        {
            return Ent::Gen::Float(node->at("Restitution"));
        }
        inline Ent::Gen::Float PhysicsImpactMakerGD::SmoothedSpeedControlRate() const
        {
            return Ent::Gen::Float(node->at("SmoothedSpeedControlRate"));
        }
        inline Ent::Gen::ComponentGD PhysicsImpactMakerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PhysicsImpactMakerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsGD
        inline Ent::Gen::Bool PhysicsGD::AffectByHit() const
        {
            return Ent::Gen::Bool(node->at("AffectByHit"));
        }
        inline Ent::Gen::Float PhysicsGD::AngularDamping() const
        {
            return Ent::Gen::Float(node->at("AngularDamping"));
        }
        inline Ent::Gen::Vector3 PhysicsGD::AxisRestriction() const
        {
            return Ent::Gen::Vector3(node->at("AxisRestriction"));
        }
        inline Ent::Gen::Bool PhysicsGD::CameraIgnored() const
        {
            return Ent::Gen::Bool(node->at("CameraIgnored"));
        }
        inline Ent::Gen::Bool PhysicsGD::Ccd() const
        {
            return Ent::Gen::Bool(node->at("Ccd"));
        }
        inline PrimArray<Ent::Gen::String> PhysicsGD::EDITOR_MeshColliders() const
        {
            return PrimArray<Ent::Gen::String>(node->at("EDITOR_MeshColliders"));
        }
        inline Ent::Gen::String PhysicsGD::EDITOR_MeshEdges() const
        {
            return Ent::Gen::String(node->at("EDITOR_MeshEdges"));
        }
        inline Ent::Gen::String PhysicsGD::EDITOR_NavMeshStamper() const
        {
            return Ent::Gen::String(node->at("EDITOR_NavMeshStamper"));
        }
        inline Ent::Gen::Float PhysicsGD::EnergyLoss() const
        {
            return Ent::Gen::Float(node->at("EnergyLoss"));
        }
        inline Ent::Gen::Float PhysicsGD::Friction() const
        {
            return Ent::Gen::Float(node->at("Friction"));
        }
        inline Ent::Gen::Bool PhysicsGD::HasGravity() const
        {
            return Ent::Gen::Bool(node->at("HasGravity"));
        }
        inline Ent::Gen::InertiaTensor PhysicsGD::InertiaTensor() const
        {
            return Ent::Gen::InertiaTensor(node->at("InertiaTensor"));
        }
        inline Ent::Gen::Float PhysicsGD::LinearDamping() const
        {
            return Ent::Gen::Float(node->at("LinearDamping"));
        }
        inline Ent::Gen::Float PhysicsGD::Mass() const
        {
            return Ent::Gen::Float(node->at("Mass"));
        }
        inline Ent::Gen::Float PhysicsGD::MaxAngularVelocity() const
        {
            return Ent::Gen::Float(node->at("MaxAngularVelocity"));
        }
        inline Ent::Gen::Float PhysicsGD::MaxLinearVelocity() const
        {
            return Ent::Gen::Float(node->at("MaxLinearVelocity"));
        }
        inline PrimArray<Ent::Gen::String> PhysicsGD::MeshColliders() const
        {
            return PrimArray<Ent::Gen::String>(node->at("MeshColliders"));
        }
        inline Ent::Gen::String PhysicsGD::MeshEdges() const
        {
            return Ent::Gen::String(node->at("MeshEdges"));
        }
        inline Ent::Gen::String PhysicsGD::MotionType() const
        {
            return Ent::Gen::String(node->at("MotionType"));
        }
        inline Ent::Gen::String PhysicsGD::NavMeshStamper() const
        {
            return Ent::Gen::String(node->at("NavMeshStamper"));
        }
        inline Ent::Gen::Vector3 PhysicsGD::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::Vector3 PhysicsGD::OffsetRotation() const
        {
            return Ent::Gen::Vector3(node->at("OffsetRotation"));
        }
        inline Ent::Gen::Bool PhysicsGD::OneWayBodiesDriveTransform() const
        {
            return Ent::Gen::Bool(node->at("OneWayBodiesDriveTransform"));
        }
        inline Ent::Gen::String PhysicsGD::PhysicsMaterial() const
        {
            return Ent::Gen::String(node->at("PhysicsMaterial"));
        }
        inline Ent::Gen::PrimitiveColliderType PhysicsGD::PrimitiveCollider() const
        {
            return Ent::Gen::PrimitiveColliderType(node->at("PrimitiveCollider"));
        }
        inline PrimArray<Ent::Gen::Size> PhysicsGD::PrimitiveColliderSizeLayerMask() const
        {
            return PrimArray<Ent::Gen::Size>(node->at("PrimitiveColliderSizeLayerMask"));
        }
        inline Ent::Gen::Float PhysicsGD::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::Float PhysicsGD::Restitution() const
        {
            return Ent::Gen::Float(node->at("Restitution"));
        }
        inline PrimArray<Ent::Gen::PhysicsLayer> PhysicsGD::SelfFilter() const
        {
            return PrimArray<Ent::Gen::PhysicsLayer>(node->at("SelfFilter"));
        }
        inline Ent::Gen::Vector3 PhysicsGD::Size() const
        {
            return Ent::Gen::Vector3(node->at("Size"));
        }
        inline Ent::Gen::Bool PhysicsGD::Sleep() const
        {
            return Ent::Gen::Bool(node->at("Sleep"));
        }
        inline Ent::Gen::ComponentGD PhysicsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline PrimArray<Ent::Gen::PhysicsLayer> PhysicsGD::TargetFilter() const
        {
            return PrimArray<Ent::Gen::PhysicsLayer>(node->at("TargetFilter"));
        }
        inline Ent::Gen::Bool PhysicsGD::Walkable() const
        {
            return Ent::Gen::Bool(node->at("Walkable"));
        }
        inline Ent::Gen::String PhysicsGD::WalkableSoundSwitch() const
        {
            return Ent::Gen::String(node->at("WalkableSoundSwitch"));
        }
        inline Ent::Gen::String PhysicsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PhysicsDataGD
        inline Array<Ent::Gen::EDITOR_Mesh> PhysicsDataGD::EDITOR_Shapes() const
        {
            return Array<Ent::Gen::EDITOR_Mesh>(node->at("EDITOR_Shapes"));
        }
        inline Ent::Gen::Bool PhysicsDataGD::EDITOR_isTrigger() const
        {
            return Ent::Gen::Bool(node->at("EDITOR_isTrigger"));
        }
        inline Ent::Gen::ComponentGD PhysicsDataGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PhysicsDataGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::sPhysicsJointDesc> PhysicsDataGD::joints() const
        {
            return Array<Ent::Gen::sPhysicsJointDesc>(node->at("joints"));
        }
        inline Array<Ent::Gen::sRigidBodyDesc> PhysicsDataGD::rigidBodies() const
        {
            return Array<Ent::Gen::sRigidBodyDesc>(node->at("rigidBodies"));
        }
        // PerceiverGD
        inline Ent::Gen::ComponentGD PerceiverGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PerceiverGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float PerceiverGD::m_coneAngle() const
        {
            return Ent::Gen::Float(node->at("m_coneAngle"));
        }
        inline Ent::Gen::Float PerceiverGD::m_farSoundDistance() const
        {
            return Ent::Gen::Float(node->at("m_farSoundDistance"));
        }
        inline Ent::Gen::Float PerceiverGD::m_longRangeDistance() const
        {
            return Ent::Gen::Float(node->at("m_longRangeDistance"));
        }
        inline Ent::Gen::Float PerceiverGD::m_lowRangeDistance() const
        {
            return Ent::Gen::Float(node->at("m_lowRangeDistance"));
        }
        inline Ent::Gen::Float PerceiverGD::m_middleRangeDistance() const
        {
            return Ent::Gen::Float(node->at("m_middleRangeDistance"));
        }
        inline Ent::Gen::Float PerceiverGD::m_middleSoundDistance() const
        {
            return Ent::Gen::Float(node->at("m_middleSoundDistance"));
        }
        inline Ent::Gen::Float PerceiverGD::m_nearSoundDistance() const
        {
            return Ent::Gen::Float(node->at("m_nearSoundDistance"));
        }
        inline Ent::Gen::Float PerceiverGD::m_perceptionHeightMultiplier() const
        {
            return Ent::Gen::Float(node->at("m_perceptionHeightMultiplier"));
        }
        inline Ent::Gen::Float PerceiverGD::m_perceptionHeightMultiplierHeightMax() const
        {
            return Ent::Gen::Float(node->at("m_perceptionHeightMultiplierHeightMax"));
        }
        inline Ent::Gen::Bool PerceiverGD::m_rayCastCheck() const
        {
            return Ent::Gen::Bool(node->at("m_rayCastCheck"));
        }
        // PerceivableGD
        inline Ent::Gen::ComponentGD PerceivableGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PerceivableGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float PerceivableGD::m_perceivedDistanceMultiplier() const
        {
            return Ent::Gen::Float(node->at("m_perceivedDistanceMultiplier"));
        }
        inline Ent::Gen::SoundEmissionStrength PerceivableGD::m_soundCrouch() const
        {
            return Ent::Gen::SoundEmissionStrength(node->at("m_soundCrouch"));
        }
        inline Ent::Gen::SoundEmissionStrength PerceivableGD::m_soundImmobile() const
        {
            return Ent::Gen::SoundEmissionStrength(node->at("m_soundImmobile"));
        }
        inline Ent::Gen::SoundEmissionStrength PerceivableGD::m_soundRun() const
        {
            return Ent::Gen::SoundEmissionStrength(node->at("m_soundRun"));
        }
        inline Ent::Gen::SoundEmissionStrength PerceivableGD::m_soundWalk() const
        {
            return Ent::Gen::SoundEmissionStrength(node->at("m_soundWalk"));
        }
        inline PrimArray<Ent::Gen::String> PerceivableGD::m_tags() const
        {
            return PrimArray<Ent::Gen::String>(node->at("m_tags"));
        }
        // OutfitWearerGD
        inline Ent::Gen::EntityRef OutfitWearerGD::InventoryEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("InventoryEntityRef"));
        }
        inline Ent::Gen::Float OutfitWearerGD::OutfitFadeDelay() const
        {
            return Ent::Gen::Float(node->at("OutfitFadeDelay"));
        }
        inline Ent::Gen::Float OutfitWearerGD::OutfitFadeDuration() const
        {
            return Ent::Gen::Float(node->at("OutfitFadeDuration"));
        }
        inline Ent::Gen::ComponentGD OutfitWearerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String OutfitWearerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // OutfitGD
        inline Array<Ent::Gen::MountableSnapLine_ControlPoint> OutfitGD::SnapLine() const
        {
            return Array<Ent::Gen::MountableSnapLine_ControlPoint>(node->at("SnapLine"));
        }
        inline Ent::Gen::SoundEventMapping OutfitGD::SoundEventMappingRules() const
        {
            return Ent::Gen::SoundEventMapping(node->at("SoundEventMappingRules"));
        }
        inline Ent::Gen::ComponentGD OutfitGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String OutfitGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::OutfitPiece> OutfitGD::clothes() const
        {
            return Array<Ent::Gen::OutfitPiece>(node->at("clothes"));
        }
        inline Ent::Gen::String OutfitGD::faction() const
        {
            return Ent::Gen::String(node->at("faction"));
        }
        inline Ent::Gen::String OutfitGD::overrideSpeciesAudioCategory() const
        {
            return Ent::Gen::String(node->at("overrideSpeciesAudioCategory"));
        }
        inline PrimArray<Ent::Gen::String> OutfitGD::soundBank() const
        {
            return PrimArray<Ent::Gen::String>(node->at("soundBank"));
        }
        inline Ent::Gen::String OutfitGD::soundTag() const
        {
            return Ent::Gen::String(node->at("soundTag"));
        }
        inline Ent::Gen::StyleMode OutfitGD::specialOutfitStyle() const
        {
            return Ent::Gen::StyleMode(node->at("specialOutfitStyle"));
        }
        inline Ent::Gen::Bool OutfitGD::spirit() const
        {
            return Ent::Gen::Bool(node->at("spirit"));
        }
        // NotVisibleInSubscene
        inline Ent::Gen::ComponentGD NotVisibleInSubscene::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String NotVisibleInSubscene::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // NetworkNode
        inline Ent::Gen::ComponentGD NetworkNode::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String NetworkNode::Tag() const
        {
            return Ent::Gen::String(node->at("Tag"));
        }
        inline Ent::Gen::String NetworkNode::ThumbnailMesh() const
        {
            return Ent::Gen::String(node->at("ThumbnailMesh"));
        }
        inline Ent::Gen::String NetworkNode::Type_() const
        {
            return Ent::Gen::String(node->at("Type"));
        }
        inline Ent::Gen::String NetworkNode::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // NetworkLink
        inline Ent::Gen::String NetworkLink::Source() const
        {
            return Ent::Gen::String(node->at("Source"));
        }
        inline Ent::Gen::EntityRef NetworkLink::SourceEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("SourceEntityRef"));
        }
        inline Ent::Gen::ComponentGD NetworkLink::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String NetworkLink::Target() const
        {
            return Ent::Gen::String(node->at("Target"));
        }
        inline Ent::Gen::EntityRef NetworkLink::TargetEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("TargetEntityRef"));
        }
        inline Ent::Gen::String NetworkLink::ThumbnailMesh() const
        {
            return Ent::Gen::String(node->at("ThumbnailMesh"));
        }
        inline Ent::Gen::String NetworkLink::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // NetGD
        inline Ent::Gen::ComponentGD NetGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String NetGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // NavMeshActivatorGD
        inline Ent::Gen::Float NavMeshActivatorGD::ActivationZoneSize() const
        {
            return Ent::Gen::Float(node->at("ActivationZoneSize"));
        }
        inline PrimArray<Ent::Gen::String> NavMeshActivatorGD::SizeLayerMask() const
        {
            return PrimArray<Ent::Gen::String>(node->at("SizeLayerMask"));
        }
        inline Ent::Gen::ComponentGD NavMeshActivatorGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String NavMeshActivatorGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MultiThumbnail
        inline Array<Ent::Gen::ListItem> MultiThumbnail::List() const
        {
            return Array<Ent::Gen::ListItem>(node->at("List"));
        }
        inline Ent::Gen::ComponentGD MultiThumbnail::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String MultiThumbnail::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MounterGD
        inline Ent::Gen::String MounterGD::HotspotName() const
        {
            return Ent::Gen::String(node->at("HotspotName"));
        }
        inline Ent::Gen::ComponentGD MounterGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String MounterGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MountableGD
        inline PrimArray<Ent::Gen::String> MountableGD::HotspotNames() const
        {
            return PrimArray<Ent::Gen::String>(node->at("HotspotNames"));
        }
        inline Array<Ent::Gen::MountableSnapLine_ControlPoint> MountableGD::SnapLine() const
        {
            return Array<Ent::Gen::MountableSnapLine_ControlPoint>(node->at("SnapLine"));
        }
        inline Ent::Gen::ComponentGD MountableGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String MountableGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MountIKControllerGD
        inline Ent::Gen::ComponentGD MountIKControllerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String MountIKControllerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float MountIKControllerGD::horizontalSpineLeanFactor() const
        {
            return Ent::Gen::Float(node->at("horizontalSpineLeanFactor"));
        }
        // MissionHolderGD
        inline Ent::Gen::Bool MissionHolderGD::Private() const
        {
            return Ent::Gen::Bool(node->at("Private"));
        }
        inline Ent::Gen::ComponentGD MissionHolderGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String MissionHolderGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MeshNavigationInfosGD
        inline Ent::Gen::ComponentGD MeshNavigationInfosGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String MeshNavigationInfosGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Mesh
        inline Ent::Gen::String Mesh::File() const
        {
            return Ent::Gen::String(node->at("File"));
        }
        inline Ent::Gen::ComponentGD Mesh::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String Mesh::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // LifeComponentGD
        inline Ent::Gen::Float LifeComponentGD::AttackCancelDamagesThreshold() const
        {
            return Ent::Gen::Float(node->at("AttackCancelDamagesThreshold"));
        }
        inline Ent::Gen::Float LifeComponentGD::ClearDamagesWhenNoCombatAfterTime() const
        {
            return Ent::Gen::Float(node->at("ClearDamagesWhenNoCombatAfterTime"));
        }
        inline Ent::Gen::Float LifeComponentGD::DamagesRecoverSpeed() const
        {
            return Ent::Gen::Float(node->at("DamagesRecoverSpeed"));
        }
        inline Ent::Gen::Float LifeComponentGD::DamagesShield() const
        {
            return Ent::Gen::Float(node->at("DamagesShield"));
        }
        inline Ent::Gen::Float LifeComponentGD::DeathThreshold() const
        {
            return Ent::Gen::Float(node->at("DeathThreshold"));
        }
        inline Ent::Gen::Float LifeComponentGD::InjuredDamagesThreshold() const
        {
            return Ent::Gen::Float(node->at("InjuredDamagesThreshold"));
        }
        inline Ent::Gen::Float LifeComponentGD::MinLifeWhenSpending() const
        {
            return Ent::Gen::Float(node->at("MinLifeWhenSpending"));
        }
        inline Ent::Gen::Bool LifeComponentGD::ShouldCrashWhenFlyingInjured() const
        {
            return Ent::Gen::Bool(node->at("ShouldCrashWhenFlyingInjured"));
        }
        inline Ent::Gen::ComponentGD LifeComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Float LifeComponentGD::VelocityDamagesMax() const
        {
            return Ent::Gen::Float(node->at("VelocityDamagesMax"));
        }
        inline Ent::Gen::String LifeComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // LDPrimitive
        inline Ent::Gen::Bool LDPrimitive::NonDisuptive() const
        {
            return Ent::Gen::Bool(node->at("NonDisuptive"));
        }
        inline Ent::Gen::PrimitiveData LDPrimitive::PrimitiveData() const
        {
            return Ent::Gen::PrimitiveData(node->at("PrimitiveData"));
        }
        inline Ent::Gen::String LDPrimitive::PrimitiveType() const
        {
            return Ent::Gen::String(node->at("PrimitiveType"));
        }
        inline Ent::Gen::ComponentGD LDPrimitive::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String LDPrimitive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ItemHolderGD
        inline Ent::Gen::String ItemHolderGD::HotspotDefault() const
        {
            return Ent::Gen::String(node->at("HotspotDefault"));
        }
        inline Ent::Gen::String ItemHolderGD::HotspotHandLeft() const
        {
            return Ent::Gen::String(node->at("HotspotHandLeft"));
        }
        inline Ent::Gen::String ItemHolderGD::HotspotHandRight() const
        {
            return Ent::Gen::String(node->at("HotspotHandRight"));
        }
        inline Ent::Gen::ComponentGD ItemHolderGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Bool ItemHolderGD::Visible() const
        {
            return Ent::Gen::Bool(node->at("Visible"));
        }
        inline Ent::Gen::String ItemHolderGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InventoryGD
        inline Ent::Gen::ComponentGD InventoryGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Array<Ent::Gen::TaggedEntityRef> InventoryGD::TaggedEntityRefs() const
        {
            return Array<Ent::Gen::TaggedEntityRef>(node->at("TaggedEntityRefs"));
        }
        inline Ent::Gen::String InventoryGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InterestPointGD
        inline Ent::Gen::Float InterestPointGD::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::ComponentGD InterestPointGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::TagsList InterestPointGD::Tags() const
        {
            return Ent::Gen::TagsList(node->at("Tags"));
        }
        inline Ent::Gen::String InterestPointGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InteractableGPEGD
        inline Ent::Gen::ResponsiblePointer_ActorState_ InteractableGPEGD::GPEActorState() const
        {
            return Ent::Gen::ResponsiblePointer_ActorState_(node->at("GPEActorState"));
        }
        inline Ent::Gen::GPEType InteractableGPEGD::GPEType() const
        {
            return Ent::Gen::GPEType(node->at("GPEType"));
        }
        inline Ent::Gen::String InteractableGPEGD::HotspotName() const
        {
            return Ent::Gen::String(node->at("HotspotName"));
        }
        inline Ent::Gen::ResponsiblePointer_ActorState_ InteractableGPEGD::InteractionModeActorState() const
        {
            return Ent::Gen::ResponsiblePointer_ActorState_(node->at("InteractionModeActorState"));
        }
        inline Ent::Gen::ComponentGD InteractableGPEGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String InteractableGPEGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InfoboardRegistererGD
        inline Ent::Gen::String InfoboardRegistererGD::InfoboardName() const
        {
            return Ent::Gen::String(node->at("InfoboardName"));
        }
        inline Ent::Gen::ComponentGD InfoboardRegistererGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String InfoboardRegistererGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // IncapacitateComponentGD
        inline PrimArray<Ent::Gen::HitStyle> IncapacitateComponentGD::HitStyleTriggers() const
        {
            return PrimArray<Ent::Gen::HitStyle>(node->at("HitStyleTriggers"));
        }
        inline Ent::Gen::ScaleConverter IncapacitateComponentGD::ImpactMultiplierCurve() const
        {
            return Ent::Gen::ScaleConverter(node->at("ImpactMultiplierCurve"));
        }
        inline Ent::Gen::ScaleConverter IncapacitateComponentGD::IncapacitateTimeCurve() const
        {
            return Ent::Gen::ScaleConverter(node->at("IncapacitateTimeCurve"));
        }
        inline Ent::Gen::ScaleConverter IncapacitateComponentGD::IncapacitateTimeMultiplierCurve() const
        {
            return Ent::Gen::ScaleConverter(node->at("IncapacitateTimeMultiplierCurve"));
        }
        inline Ent::Gen::ComponentGD IncapacitateComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String IncapacitateComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HotspotsGD
        inline Ent::Gen::Map<char const*, Ent::Gen::HotspotData> HotspotsGD::HotspotsMap() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::HotspotData>(node->at("HotspotsMap"));
        }
        inline Ent::Gen::ComponentGD HotspotsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String HotspotsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HitTriggerGD
        inline Ent::Gen::ComponentGD HitTriggerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String HitTriggerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HeightObj
        inline Array<Ent::Gen::DisplaceNoiseListItem> HeightObj::DisplaceNoiseList() const
        {
            return Array<Ent::Gen::DisplaceNoiseListItem>(node->at("DisplaceNoiseList"));
        }
        inline Ent::Gen::Int HeightObj::EditorSubdivision() const
        {
            return Ent::Gen::Int(node->at("EditorSubdivision"));
        }
        inline Ent::Gen::Matrix33 HeightObj::LocalMatrix() const
        {
            return Ent::Gen::Matrix33(node->at("LocalMatrix"));
        }
        inline Ent::Gen::String HeightObj::MeshFile() const
        {
            return Ent::Gen::String(node->at("MeshFile"));
        }
        inline Ent::Gen::String HeightObj::MeshName() const
        {
            return Ent::Gen::String(node->at("MeshName"));
        }
        inline Ent::Gen::Int HeightObj::Priority() const
        {
            return Ent::Gen::Int(node->at("Priority"));
        }
        inline Ent::Gen::Int HeightObj::Subdivision() const
        {
            return Ent::Gen::Int(node->at("Subdivision"));
        }
        inline Ent::Gen::ComponentGD HeightObj::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String HeightObj::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HeightMapComponentGD
        inline Ent::Gen::String HeightMapComponentGD::HeightMapArchivePath() const
        {
            return Ent::Gen::String(node->at("HeightMapArchivePath"));
        }
        inline PrimArray<Ent::Gen::String> HeightMapComponentGD::HeightMapPaths() const
        {
            return PrimArray<Ent::Gen::String>(node->at("HeightMapPaths"));
        }
        inline Ent::Gen::Float HeightMapComponentGD::HeightScale() const
        {
            return Ent::Gen::Float(node->at("HeightScale"));
        }
        inline Ent::Gen::ComponentGD HeightMapComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Bool HeightMapComponentGD::SwapX() const
        {
            return Ent::Gen::Bool(node->at("SwapX"));
        }
        inline Ent::Gen::Bool HeightMapComponentGD::SwapY() const
        {
            return Ent::Gen::Bool(node->at("SwapY"));
        }
        inline Ent::Gen::Vector2 HeightMapComponentGD::WorldSize() const
        {
            return Ent::Gen::Vector2(node->at("WorldSize"));
        }
        inline Ent::Gen::String HeightMapComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HealthAreaGD
        inline Ent::Gen::Float HealthAreaGD::EnergyRestorationRate() const
        {
            return Ent::Gen::Float(node->at("EnergyRestorationRate"));
        }
        inline Ent::Gen::EnergySide HealthAreaGD::FactionSide() const
        {
            return Ent::Gen::EnergySide(node->at("FactionSide"));
        }
        inline Ent::Gen::Float HealthAreaGD::LifeRestorationRate() const
        {
            return Ent::Gen::Float(node->at("LifeRestorationRate"));
        }
        inline Ent::Gen::Float HealthAreaGD::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::Float HealthAreaGD::ReviveRestorationRate() const
        {
            return Ent::Gen::Float(node->at("ReviveRestorationRate"));
        }
        inline Ent::Gen::ComponentGD HealthAreaGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String HealthAreaGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HealerGD
        inline Ent::Gen::ComponentGD HealerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String HealerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HealTriggerGD
        inline Ent::Gen::ComponentGD HealTriggerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String HealTriggerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // HealPumpGD
        inline Ent::Gen::Float HealPumpGD::AlliesLifeAgentPerSecond() const
        {
            return Ent::Gen::Float(node->at("AlliesLifeAgentPerSecond"));
        }
        inline Ent::Gen::Float HealPumpGD::EnemiesLifeAgentPerSecond() const
        {
            return Ent::Gen::Float(node->at("EnemiesLifeAgentPerSecond"));
        }
        inline Ent::Gen::Float HealPumpGD::LifeAmountRatio() const
        {
            return Ent::Gen::Float(node->at("LifeAmountRatio"));
        }
        inline Ent::Gen::Float HealPumpGD::Range() const
        {
            return Ent::Gen::Float(node->at("Range"));
        }
        inline Ent::Gen::ComponentGD HealPumpGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String HealPumpGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GroundTypeSamplerGD
        inline Ent::Gen::String GroundTypeSamplerGD::GroundTypeMapPath() const
        {
            return Ent::Gen::String(node->at("GroundTypeMapPath"));
        }
        inline Ent::Gen::ComponentGD GroundTypeSamplerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String GroundTypeSamplerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GrasperGD
        inline Ent::Gen::ComponentGD GrasperGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String GrasperGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float GrasperGD::bestInteractionDeltaAngleCoeff() const
        {
            return Ent::Gen::Float(node->at("bestInteractionDeltaAngleCoeff"));
        }
        inline Ent::Gen::Float GrasperGD::bestInteractionDistanceCoeff() const
        {
            return Ent::Gen::Float(node->at("bestInteractionDistanceCoeff"));
        }
        inline Ent::Gen::Map<GraspTypeEnum, Ent::Gen::GrasperInteractionData> GrasperGD::interactionDatas() const
        {
            return Ent::Gen::Map<GraspTypeEnum, Ent::Gen::GrasperInteractionData>(node->at("interactionDatas"));
        }
        inline Ent::Gen::Float GrasperGD::jumpRiseMinCoeffToEnter() const
        {
            return Ent::Gen::Float(node->at("jumpRiseMinCoeffToEnter"));
        }
        inline Ent::Gen::GraspResistanceData GrasperGD::resistanceData() const
        {
            return Ent::Gen::GraspResistanceData(node->at("resistanceData"));
        }
        inline Ent::Gen::String GrasperGD::sensorHotspotName() const
        {
            return Ent::Gen::String(node->at("sensorHotspotName"));
        }
        // GraspableGD
        inline Ent::Gen::ComponentGD GraspableGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String GraspableGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Map<GraspTypeEnum, Ent::Gen::GraspableInteractionData> GraspableGD::interactionDatas() const
        {
            return Ent::Gen::Map<GraspTypeEnum, Ent::Gen::GraspableInteractionData>(node->at("interactionDatas"));
        }
        inline Ent::Gen::GraspResistanceData GraspableGD::resistanceData() const
        {
            return Ent::Gen::GraspResistanceData(node->at("resistanceData"));
        }
        // GameEffectSpawnerGD
        inline Array<Ent::Gen::sGameEffectTemplate> GameEffectSpawnerGD::StartGameEffects() const
        {
            return Array<Ent::Gen::sGameEffectTemplate>(node->at("StartGameEffects"));
        }
        inline Ent::Gen::ComponentGD GameEffectSpawnerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String GameEffectSpawnerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FurComponentGD
        inline Ent::Gen::FurProperties FurComponentGD::Properties() const
        {
            return Ent::Gen::FurProperties(node->at("Properties"));
        }
        inline Ent::Gen::ComponentGD FurComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String FurComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidVolumeComponentGD
        inline Ent::Gen::FluidVolumeComponentGD_FluidVolumeData FluidVolumeComponentGD::FluidVolume() const
        {
            return Ent::Gen::FluidVolumeComponentGD_FluidVolumeData(node->at("FluidVolume"));
        }
        inline Ent::Gen::ComponentGD FluidVolumeComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String FluidVolumeComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidViewGD
        inline Ent::Gen::ComponentGD FluidViewGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String FluidViewGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidGD
        inline Ent::Gen::Bool FluidGD::IsWaterPlane() const
        {
            return Ent::Gen::Bool(node->at("IsWaterPlane"));
        }
        inline Ent::Gen::ComponentGD FluidGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String FluidGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float FluidGD::constrainedPlaneOffset() const
        {
            return Ent::Gen::Float(node->at("constrainedPlaneOffset"));
        }
        inline Ent::Gen::Vector3 FluidGD::fluidCurrent() const
        {
            return Ent::Gen::Vector3(node->at("fluidCurrent"));
        }
        inline Ent::Gen::Bool FluidGD::hasDepthLimit() const
        {
            return Ent::Gen::Bool(node->at("hasDepthLimit"));
        }
        inline Ent::Gen::Bool FluidGD::isWaterfall() const
        {
            return Ent::Gen::Bool(node->at("isWaterfall"));
        }
        inline Ent::Gen::FluidType FluidGD::type() const
        {
            return Ent::Gen::FluidType(node->at("type"));
        }
        inline Ent::Gen::Bool FluidGD::useHalfShape() const
        {
            return Ent::Gen::Bool(node->at("useHalfShape"));
        }
        // FluidFXEntitySpawnerGD
        inline Ent::Gen::Precision FluidFXEntitySpawnerGD::SamplingPrecision() const
        {
            return Ent::Gen::Precision(node->at("SamplingPrecision"));
        }
        inline Array<Ent::Gen::SpawningParameter> FluidFXEntitySpawnerGD::SpawningParameters() const
        {
            return Array<Ent::Gen::SpawningParameter>(node->at("SpawningParameters"));
        }
        inline Ent::Gen::ComponentGD FluidFXEntitySpawnerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Float FluidFXEntitySpawnerGD::UpdatePeriod() const
        {
            return Ent::Gen::Float(node->at("UpdatePeriod"));
        }
        inline Ent::Gen::String FluidFXEntitySpawnerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FireSensorGD
        inline Ent::Gen::ComponentGD FireSensorGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String FireSensorGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EventTriggerGD
        inline PrimArray<Ent::Gen::String> EventTriggerGD::Events() const
        {
            return PrimArray<Ent::Gen::String>(node->at("Events"));
        }
        inline Ent::Gen::ComponentGD EventTriggerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String EventTriggerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EventHandlerGD
        inline Ent::Gen::ComponentGD EventHandlerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String EventHandlerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnvStampGD
        inline Ent::Gen::Float EnvStampGD::RegenStateChangeDuration() const
        {
            return Ent::Gen::Float(node->at("RegenStateChangeDuration"));
        }
        inline Ent::Gen::Map<EnergySideEnum, Array<Ent::Gen::sEnvStamp>> EnvStampGD::Stamps() const
        {
            return Ent::Gen::Map<EnergySideEnum, Array<Ent::Gen::sEnvStamp>>(node->at("Stamps"));
        }
        inline Ent::Gen::ComponentGD EnvStampGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String EnvStampGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergySpoutGD
        inline Ent::Gen::Float EnergySpoutGD::EnergySpeed() const
        {
            return Ent::Gen::Float(node->at("EnergySpeed"));
        }
        inline Ent::Gen::EntityRef EnergySpoutGD::ListenerEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("ListenerEntityRef"));
        }
        inline Ent::Gen::Float EnergySpoutGD::MinDistanceBetweenRegen() const
        {
            return Ent::Gen::Float(node->at("MinDistanceBetweenRegen"));
        }
        inline Ent::Gen::Float EnergySpoutGD::MinTimeBetweenRegen() const
        {
            return Ent::Gen::Float(node->at("MinTimeBetweenRegen"));
        }
        inline Ent::Gen::Float EnergySpoutGD::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::String EnergySpoutGD::SplineRegenEffectName() const
        {
            return Ent::Gen::String(node->at("SplineRegenEffectName"));
        }
        inline Ent::Gen::ComponentGD EnergySpoutGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String EnergySpoutGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergySideSwitcherGD
        inline Ent::Gen::Map<EnergySideEnum, Ent::Gen::EnergySideData> EnergySideSwitcherGD::EnergySideData() const
        {
            return Ent::Gen::Map<EnergySideEnum, Ent::Gen::EnergySideData>(node->at("EnergySideData"));
        }
        inline Ent::Gen::EntityRef EnergySideSwitcherGD::ReviveEnergyEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("ReviveEnergyEntityRef"));
        }
        inline Ent::Gen::ComponentGD EnergySideSwitcherGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String EnergySideSwitcherGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergyPoolGD
        inline Array<Ent::Gen::EnergyPoolGD_EnergyArea> EnergyPoolGD::EnergyAreas() const
        {
            return Array<Ent::Gen::EnergyPoolGD_EnergyArea>(node->at("EnergyAreas"));
        }
        inline Ent::Gen::Bool EnergyPoolGD::FactionOverride() const
        {
            return Ent::Gen::Bool(node->at("FactionOverride"));
        }
        inline Ent::Gen::ComponentGD EnergyPoolGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::TransitionSettings EnergyPoolGD::TransitionSettings() const
        {
            return Ent::Gen::TransitionSettings(node->at("TransitionSettings"));
        }
        inline Ent::Gen::String EnergyPoolGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergyNetworkListenerGD
        inline Ent::Gen::ComponentGD EnergyNetworkListenerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String EnergyNetworkListenerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergyDrainGD
        inline Ent::Gen::EntityRef EnergyDrainGD::PoolEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("PoolEntityRef"));
        }
        inline Ent::Gen::ComponentGD EnergyDrainGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String EnergyDrainGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EnergyCrookGD
        inline Ent::Gen::EntityRef EnergyCrookGD::FatherEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("FatherEntityRef"));
        }
        inline Ent::Gen::Float EnergyCrookGD::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::Float EnergyCrookGD::RegenScale() const
        {
            return Ent::Gen::Float(node->at("RegenScale"));
        }
        inline Ent::Gen::ComponentGD EnergyCrookGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String EnergyCrookGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DummyComponentGD
        inline Ent::Gen::ComponentGD DummyComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String DummyComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DiveAttackGD
        inline Ent::Gen::ComponentGD DiveAttackGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String DiveAttackGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DistanceTriggerGD
        inline PrimArray<Ent::Gen::Float> DistanceTriggerGD::Distances() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("Distances"));
        }
        inline PrimArray<Ent::Gen::Float> DistanceTriggerGD::Hystereses() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("Hystereses"));
        }
        inline Ent::Gen::ComponentGD DistanceTriggerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String DistanceTriggerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FightDistanceTriggerGD
        inline Ent::Gen::DistanceTriggerGD FightDistanceTriggerGD::Super() const
        {
            return Ent::Gen::DistanceTriggerGD(node->at("Super"));
        }
        inline Ent::Gen::String FightDistanceTriggerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // DebugGridGD
        inline Ent::Gen::Int DebugGridGD::Height() const
        {
            return Ent::Gen::Int(node->at("Height"));
        }
        inline Ent::Gen::ComponentGD DebugGridGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Int DebugGridGD::Width() const
        {
            return Ent::Gen::Int(node->at("Width"));
        }
        inline Ent::Gen::String DebugGridGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CustomThumbnail
        inline Ent::Gen::ComponentGD CustomThumbnail::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::ThumbPath CustomThumbnail::Thumbnail() const
        {
            return Ent::Gen::ThumbPath(node->at("Thumbnail"));
        }
        inline Ent::Gen::String CustomThumbnail::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CreatureUIGD
        inline Ent::Gen::Float CreatureUIGD::LifeBarLength() const
        {
            return Ent::Gen::Float(node->at("LifeBarLength"));
        }
        inline Ent::Gen::Float CreatureUIGD::LifeBarWidth() const
        {
            return Ent::Gen::Float(node->at("LifeBarWidth"));
        }
        inline Ent::Gen::Float CreatureUIGD::LifeBarZOffset() const
        {
            return Ent::Gen::Float(node->at("LifeBarZOffset"));
        }
        inline Ent::Gen::Bool CreatureUIGD::ShowLifeBar() const
        {
            return Ent::Gen::Bool(node->at("ShowLifeBar"));
        }
        inline Ent::Gen::ComponentGD CreatureUIGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String CreatureUIGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ConstrainedMoveGD
        inline Ent::Gen::ConstrainedMoveContextInput ConstrainedMoveGD::ConstrainedMoveContextInput() const
        {
            return Ent::Gen::ConstrainedMoveContextInput(node->at("ConstrainedMoveContextInput"));
        }
        inline Ent::Gen::ComponentGD ConstrainedMoveGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ConstrainedMoveGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ConnectorGD
        inline Ent::Gen::ComponentGD ConnectorGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ConnectorGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ComponentWithProtoCodeGD
        inline Ent::Gen::ComponentGD ComponentWithProtoCodeGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ComponentWithProtoCodeGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ClothAnimationGD
        inline Ent::Gen::String ClothAnimationGD::ClothSkeletonPath() const
        {
            return Ent::Gen::String(node->at("ClothSkeletonPath"));
        }
        inline Ent::Gen::Float ClothAnimationGD::PhysicsDamping() const
        {
            return Ent::Gen::Float(node->at("PhysicsDamping"));
        }
        inline Ent::Gen::Bool ClothAnimationGD::PhysicsFixedDt() const
        {
            return Ent::Gen::Bool(node->at("PhysicsFixedDt"));
        }
        inline Ent::Gen::Vector3 ClothAnimationGD::PhysicsGravity() const
        {
            return Ent::Gen::Vector3(node->at("PhysicsGravity"));
        }
        inline Ent::Gen::Float ClothAnimationGD::PhysicsMass() const
        {
            return Ent::Gen::Float(node->at("PhysicsMass"));
        }
        inline Ent::Gen::Float ClothAnimationGD::PhysicsSpeedInfluence() const
        {
            return Ent::Gen::Float(node->at("PhysicsSpeedInfluence"));
        }
        inline Ent::Gen::Bool ClothAnimationGD::PhysicsUseDefaultProperties() const
        {
            return Ent::Gen::Bool(node->at("PhysicsUseDefaultProperties"));
        }
        inline Ent::Gen::ComponentGD ClothAnimationGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ClothAnimationGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ChildEntityPoolComponentGD
        inline Ent::Gen::Bool ChildEntityPoolComponentGD::AddStateAtStart() const
        {
            return Ent::Gen::Bool(node->at("AddStateAtStart"));
        }
        inline Ent::Gen::Bool ChildEntityPoolComponentGD::AttachToParent() const
        {
            return Ent::Gen::Bool(node->at("AttachToParent"));
        }
        inline PrimArray<Ent::Gen::EntityRef> ChildEntityPoolComponentGD::EntityRefs() const
        {
            return PrimArray<Ent::Gen::EntityRef>(node->at("EntityRefs"));
        }
        inline Ent::Gen::SpawnState ChildEntityPoolComponentGD::SpawnState() const
        {
            return Ent::Gen::SpawnState(node->at("SpawnState"));
        }
        inline Ent::Gen::ComponentGD ChildEntityPoolComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ChildEntityPoolComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CharacterPlatformGD
        inline Ent::Gen::ComponentGD CharacterPlatformGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String CharacterPlatformGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CameraDataGD
        inline Ent::Gen::String CameraDataGD::CameraDataResourcePath() const
        {
            return Ent::Gen::String(node->at("CameraDataResourcePath"));
        }
        inline Ent::Gen::ComponentGD CameraDataGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String CameraDataGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BreakableGD
        inline Ent::Gen::EntityRef BreakableGD::AssemblyEntity() const
        {
            return Ent::Gen::EntityRef(node->at("AssemblyEntity"));
        }
        inline Ent::Gen::String BreakableGD::BreakSoundBank() const
        {
            return Ent::Gen::String(node->at("BreakSoundBank"));
        }
        inline Ent::Gen::String BreakableGD::BreakSoundEvent() const
        {
            return Ent::Gen::String(node->at("BreakSoundEvent"));
        }
        inline Ent::Gen::EntityRef BreakableGD::ChildEntity() const
        {
            return Ent::Gen::EntityRef(node->at("ChildEntity"));
        }
        inline Ent::Gen::Float BreakableGD::FadeoutDuration() const
        {
            return Ent::Gen::Float(node->at("FadeoutDuration"));
        }
        inline Ent::Gen::String BreakableGD::GameEffectOnBreaking() const
        {
            return Ent::Gen::String(node->at("GameEffectOnBreaking"));
        }
        inline Ent::Gen::Float BreakableGD::MaxContactAngle() const
        {
            return Ent::Gen::Float(node->at("MaxContactAngle"));
        }
        inline Ent::Gen::ComponentGD BreakableGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Float BreakableGD::TimeBeforeFade() const
        {
            return Ent::Gen::Float(node->at("TimeBeforeFade"));
        }
        inline Ent::Gen::EntityRef BreakableGD::UnbrokenEntity() const
        {
            return Ent::Gen::EntityRef(node->at("UnbrokenEntity"));
        }
        inline Ent::Gen::String BreakableGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool BreakableGD::isBreakableWithAttack() const
        {
            return Ent::Gen::Bool(node->at("isBreakableWithAttack"));
        }
        // BittenGD
        inline Ent::Gen::Float BittenGD::MaxAngle() const
        {
            return Ent::Gen::Float(node->at("MaxAngle"));
        }
        inline Ent::Gen::ComponentGD BittenGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String BittenGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AttackTriggerGD
        inline Ent::Gen::ComponentGD AttackTriggerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AttackTriggerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AssemblyGD
        inline Ent::Gen::ComponentGD AssemblyGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AssemblyGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationTransformDriverGD
        inline Ent::Gen::ComponentGD AnimationTransformDriverGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationTransformDriverGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationPlaylistGD
        inline PrimArray<Ent::Gen::String> AnimationPlaylistGD::PlayAnim() const
        {
            return PrimArray<Ent::Gen::String>(node->at("PlayAnim"));
        }
        inline Ent::Gen::Int AnimationPlaylistGD::PlayAnimInputID() const
        {
            return Ent::Gen::Int(node->at("PlayAnimInputID"));
        }
        inline Ent::Gen::Bool AnimationPlaylistGD::RandomizeStartTime() const
        {
            return Ent::Gen::Bool(node->at("RandomizeStartTime"));
        }
        inline Ent::Gen::ComponentGD AnimationPlaylistGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationPlaylistGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationPhysicsChainConstraintsGD
        inline Ent::Gen::String AnimationPhysicsChainConstraintsGD::BoneNamePrefix() const
        {
            return Ent::Gen::String(node->at("BoneNamePrefix"));
        }
        inline Ent::Gen::ComponentGD AnimationPhysicsChainConstraintsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationPhysicsChainConstraintsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationModelGD
        inline Ent::Gen::ComponentGD AnimationModelGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationModelGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Map<LocomotionModeEnum, Ent::Gen::Map<SpeedModeEnum, Ent::Gen::Float>> AnimationModelGD::additionalSpeedDebug() const
        {
            return Ent::Gen::Map<LocomotionModeEnum, Ent::Gen::Map<SpeedModeEnum, Ent::Gen::Float>>(node->at("additionalSpeedDebug"));
        }
        inline Ent::Gen::Bool AnimationModelGD::isLandAnimDriven() const
        {
            return Ent::Gen::Bool(node->at("isLandAnimDriven"));
        }
        inline Ent::Gen::Bool AnimationModelGD::isTurnAllowed() const
        {
            return Ent::Gen::Bool(node->at("isTurnAllowed"));
        }
        inline Ent::Gen::Float AnimationModelGD::playRatioFactor() const
        {
            return Ent::Gen::Float(node->at("playRatioFactor"));
        }
        inline Ent::Gen::Float AnimationModelGD::scalePlayRatioCoeffInfluence() const
        {
            return Ent::Gen::Float(node->at("scalePlayRatioCoeffInfluence"));
        }
        inline Ent::Gen::Float AnimationModelGD::startRunPlayRatioFactor() const
        {
            return Ent::Gen::Float(node->at("startRunPlayRatioFactor"));
        }
        inline Ent::Gen::Float AnimationModelGD::turnPlayRatioFactor() const
        {
            return Ent::Gen::Float(node->at("turnPlayRatioFactor"));
        }
        // AnimationHitsConstraintsGD
        inline Ent::Gen::ComponentGD AnimationHitsConstraintsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationHitsConstraintsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Component
        inline char const* Component::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::AIContextGD> Component::AIContextGD() const
        {
            return strcmp(node->getUnionType(), "AIContextGD") != 0? std::optional<Ent::Gen::AIContextGD>{}: std::optional<Ent::Gen::AIContextGD>(node->getUnionData());
        }
        inline Ent::Gen::AIContextGD Component::setAIContextGD() const
        {
            return Ent::Gen::AIContextGD(node->setUnionType("AIContextGD"));
        }
        inline std::optional<Ent::Gen::ActorGD> Component::ActorGD() const
        {
            return strcmp(node->getUnionType(), "ActorGD") != 0? std::optional<Ent::Gen::ActorGD>{}: std::optional<Ent::Gen::ActorGD>(node->getUnionData());
        }
        inline Ent::Gen::ActorGD Component::setActorGD() const
        {
            return Ent::Gen::ActorGD(node->setUnionType("ActorGD"));
        }
        inline std::optional<Ent::Gen::AnimationControllerGD> Component::AnimationControllerGD() const
        {
            return strcmp(node->getUnionType(), "AnimationControllerGD") != 0? std::optional<Ent::Gen::AnimationControllerGD>{}: std::optional<Ent::Gen::AnimationControllerGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationControllerGD Component::setAnimationControllerGD() const
        {
            return Ent::Gen::AnimationControllerGD(node->setUnionType("AnimationControllerGD"));
        }
        inline std::optional<Ent::Gen::AnimationEventsGeneratorGD> Component::AnimationEventsGeneratorGD() const
        {
            return strcmp(node->getUnionType(), "AnimationEventsGeneratorGD") != 0? std::optional<Ent::Gen::AnimationEventsGeneratorGD>{}: std::optional<Ent::Gen::AnimationEventsGeneratorGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationEventsGeneratorGD Component::setAnimationEventsGeneratorGD() const
        {
            return Ent::Gen::AnimationEventsGeneratorGD(node->setUnionType("AnimationEventsGeneratorGD"));
        }
        inline std::optional<Ent::Gen::AnimationGenericConstraintsGD> Component::AnimationGenericConstraintsGD() const
        {
            return strcmp(node->getUnionType(), "AnimationGenericConstraintsGD") != 0? std::optional<Ent::Gen::AnimationGenericConstraintsGD>{}: std::optional<Ent::Gen::AnimationGenericConstraintsGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationGenericConstraintsGD Component::setAnimationGenericConstraintsGD() const
        {
            return Ent::Gen::AnimationGenericConstraintsGD(node->setUnionType("AnimationGenericConstraintsGD"));
        }
        inline std::optional<Ent::Gen::AnimationHitsConstraintsGD> Component::AnimationHitsConstraintsGD() const
        {
            return strcmp(node->getUnionType(), "AnimationHitsConstraintsGD") != 0? std::optional<Ent::Gen::AnimationHitsConstraintsGD>{}: std::optional<Ent::Gen::AnimationHitsConstraintsGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationHitsConstraintsGD Component::setAnimationHitsConstraintsGD() const
        {
            return Ent::Gen::AnimationHitsConstraintsGD(node->setUnionType("AnimationHitsConstraintsGD"));
        }
        inline std::optional<Ent::Gen::AnimationLegsConstraintsGD> Component::AnimationLegsConstraintsGD() const
        {
            return strcmp(node->getUnionType(), "AnimationLegsConstraintsGD") != 0? std::optional<Ent::Gen::AnimationLegsConstraintsGD>{}: std::optional<Ent::Gen::AnimationLegsConstraintsGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationLegsConstraintsGD Component::setAnimationLegsConstraintsGD() const
        {
            return Ent::Gen::AnimationLegsConstraintsGD(node->setUnionType("AnimationLegsConstraintsGD"));
        }
        inline std::optional<Ent::Gen::AnimationModelGD> Component::AnimationModelGD() const
        {
            return strcmp(node->getUnionType(), "AnimationModelGD") != 0? std::optional<Ent::Gen::AnimationModelGD>{}: std::optional<Ent::Gen::AnimationModelGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationModelGD Component::setAnimationModelGD() const
        {
            return Ent::Gen::AnimationModelGD(node->setUnionType("AnimationModelGD"));
        }
        inline std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD> Component::AnimationPhysicsChainConstraintsGD() const
        {
            return strcmp(node->getUnionType(), "AnimationPhysicsChainConstraintsGD") != 0? std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD>{}: std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationPhysicsChainConstraintsGD Component::setAnimationPhysicsChainConstraintsGD() const
        {
            return Ent::Gen::AnimationPhysicsChainConstraintsGD(node->setUnionType("AnimationPhysicsChainConstraintsGD"));
        }
        inline std::optional<Ent::Gen::AnimationPlaylistGD> Component::AnimationPlaylistGD() const
        {
            return strcmp(node->getUnionType(), "AnimationPlaylistGD") != 0? std::optional<Ent::Gen::AnimationPlaylistGD>{}: std::optional<Ent::Gen::AnimationPlaylistGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationPlaylistGD Component::setAnimationPlaylistGD() const
        {
            return Ent::Gen::AnimationPlaylistGD(node->setUnionType("AnimationPlaylistGD"));
        }
        inline std::optional<Ent::Gen::AnimationTailConstraintsGD> Component::AnimationTailConstraintsGD() const
        {
            return strcmp(node->getUnionType(), "AnimationTailConstraintsGD") != 0? std::optional<Ent::Gen::AnimationTailConstraintsGD>{}: std::optional<Ent::Gen::AnimationTailConstraintsGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationTailConstraintsGD Component::setAnimationTailConstraintsGD() const
        {
            return Ent::Gen::AnimationTailConstraintsGD(node->setUnionType("AnimationTailConstraintsGD"));
        }
        inline std::optional<Ent::Gen::AnimationTransformDriverGD> Component::AnimationTransformDriverGD() const
        {
            return strcmp(node->getUnionType(), "AnimationTransformDriverGD") != 0? std::optional<Ent::Gen::AnimationTransformDriverGD>{}: std::optional<Ent::Gen::AnimationTransformDriverGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationTransformDriverGD Component::setAnimationTransformDriverGD() const
        {
            return Ent::Gen::AnimationTransformDriverGD(node->setUnionType("AnimationTransformDriverGD"));
        }
        inline std::optional<Ent::Gen::AnimationTreeConstraintsGD> Component::AnimationTreeConstraintsGD() const
        {
            return strcmp(node->getUnionType(), "AnimationTreeConstraintsGD") != 0? std::optional<Ent::Gen::AnimationTreeConstraintsGD>{}: std::optional<Ent::Gen::AnimationTreeConstraintsGD>(node->getUnionData());
        }
        inline Ent::Gen::AnimationTreeConstraintsGD Component::setAnimationTreeConstraintsGD() const
        {
            return Ent::Gen::AnimationTreeConstraintsGD(node->setUnionType("AnimationTreeConstraintsGD"));
        }
        inline std::optional<Ent::Gen::AssemblyGD> Component::AssemblyGD() const
        {
            return strcmp(node->getUnionType(), "AssemblyGD") != 0? std::optional<Ent::Gen::AssemblyGD>{}: std::optional<Ent::Gen::AssemblyGD>(node->getUnionData());
        }
        inline Ent::Gen::AssemblyGD Component::setAssemblyGD() const
        {
            return Ent::Gen::AssemblyGD(node->setUnionType("AssemblyGD"));
        }
        inline std::optional<Ent::Gen::AttackComponentGD> Component::AttackComponentGD() const
        {
            return strcmp(node->getUnionType(), "AttackComponentGD") != 0? std::optional<Ent::Gen::AttackComponentGD>{}: std::optional<Ent::Gen::AttackComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::AttackComponentGD Component::setAttackComponentGD() const
        {
            return Ent::Gen::AttackComponentGD(node->setUnionType("AttackComponentGD"));
        }
        inline std::optional<Ent::Gen::AttackTriggerGD> Component::AttackTriggerGD() const
        {
            return strcmp(node->getUnionType(), "AttackTriggerGD") != 0? std::optional<Ent::Gen::AttackTriggerGD>{}: std::optional<Ent::Gen::AttackTriggerGD>(node->getUnionData());
        }
        inline Ent::Gen::AttackTriggerGD Component::setAttackTriggerGD() const
        {
            return Ent::Gen::AttackTriggerGD(node->setUnionType("AttackTriggerGD"));
        }
        inline std::optional<Ent::Gen::BeamTargetGD> Component::BeamTargetGD() const
        {
            return strcmp(node->getUnionType(), "BeamTargetGD") != 0? std::optional<Ent::Gen::BeamTargetGD>{}: std::optional<Ent::Gen::BeamTargetGD>(node->getUnionData());
        }
        inline Ent::Gen::BeamTargetGD Component::setBeamTargetGD() const
        {
            return Ent::Gen::BeamTargetGD(node->setUnionType("BeamTargetGD"));
        }
        inline std::optional<Ent::Gen::BittenGD> Component::BittenGD() const
        {
            return strcmp(node->getUnionType(), "BittenGD") != 0? std::optional<Ent::Gen::BittenGD>{}: std::optional<Ent::Gen::BittenGD>(node->getUnionData());
        }
        inline Ent::Gen::BittenGD Component::setBittenGD() const
        {
            return Ent::Gen::BittenGD(node->setUnionType("BittenGD"));
        }
        inline std::optional<Ent::Gen::BoidsGD> Component::BoidsGD() const
        {
            return strcmp(node->getUnionType(), "BoidsGD") != 0? std::optional<Ent::Gen::BoidsGD>{}: std::optional<Ent::Gen::BoidsGD>(node->getUnionData());
        }
        inline Ent::Gen::BoidsGD Component::setBoidsGD() const
        {
            return Ent::Gen::BoidsGD(node->setUnionType("BoidsGD"));
        }
        inline std::optional<Ent::Gen::BreakableGD> Component::BreakableGD() const
        {
            return strcmp(node->getUnionType(), "BreakableGD") != 0? std::optional<Ent::Gen::BreakableGD>{}: std::optional<Ent::Gen::BreakableGD>(node->getUnionData());
        }
        inline Ent::Gen::BreakableGD Component::setBreakableGD() const
        {
            return Ent::Gen::BreakableGD(node->setUnionType("BreakableGD"));
        }
        inline std::optional<Ent::Gen::CameraDataGD> Component::CameraDataGD() const
        {
            return strcmp(node->getUnionType(), "CameraDataGD") != 0? std::optional<Ent::Gen::CameraDataGD>{}: std::optional<Ent::Gen::CameraDataGD>(node->getUnionData());
        }
        inline Ent::Gen::CameraDataGD Component::setCameraDataGD() const
        {
            return Ent::Gen::CameraDataGD(node->setUnionType("CameraDataGD"));
        }
        inline std::optional<Ent::Gen::CameraSetterGD> Component::CameraSetterGD() const
        {
            return strcmp(node->getUnionType(), "CameraSetterGD") != 0? std::optional<Ent::Gen::CameraSetterGD>{}: std::optional<Ent::Gen::CameraSetterGD>(node->getUnionData());
        }
        inline Ent::Gen::CameraSetterGD Component::setCameraSetterGD() const
        {
            return Ent::Gen::CameraSetterGD(node->setUnionType("CameraSetterGD"));
        }
        inline std::optional<Ent::Gen::CharacterControllerGD> Component::CharacterControllerGD() const
        {
            return strcmp(node->getUnionType(), "CharacterControllerGD") != 0? std::optional<Ent::Gen::CharacterControllerGD>{}: std::optional<Ent::Gen::CharacterControllerGD>(node->getUnionData());
        }
        inline Ent::Gen::CharacterControllerGD Component::setCharacterControllerGD() const
        {
            return Ent::Gen::CharacterControllerGD(node->setUnionType("CharacterControllerGD"));
        }
        inline std::optional<Ent::Gen::CharacterPlatformGD> Component::CharacterPlatformGD() const
        {
            return strcmp(node->getUnionType(), "CharacterPlatformGD") != 0? std::optional<Ent::Gen::CharacterPlatformGD>{}: std::optional<Ent::Gen::CharacterPlatformGD>(node->getUnionData());
        }
        inline Ent::Gen::CharacterPlatformGD Component::setCharacterPlatformGD() const
        {
            return Ent::Gen::CharacterPlatformGD(node->setUnionType("CharacterPlatformGD"));
        }
        inline std::optional<Ent::Gen::ChargedJumpGD> Component::ChargedJumpGD() const
        {
            return strcmp(node->getUnionType(), "ChargedJumpGD") != 0? std::optional<Ent::Gen::ChargedJumpGD>{}: std::optional<Ent::Gen::ChargedJumpGD>(node->getUnionData());
        }
        inline Ent::Gen::ChargedJumpGD Component::setChargedJumpGD() const
        {
            return Ent::Gen::ChargedJumpGD(node->setUnionType("ChargedJumpGD"));
        }
        inline std::optional<Ent::Gen::ChildEntityPoolComponentGD> Component::ChildEntityPoolComponentGD() const
        {
            return strcmp(node->getUnionType(), "ChildEntityPoolComponentGD") != 0? std::optional<Ent::Gen::ChildEntityPoolComponentGD>{}: std::optional<Ent::Gen::ChildEntityPoolComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::ChildEntityPoolComponentGD Component::setChildEntityPoolComponentGD() const
        {
            return Ent::Gen::ChildEntityPoolComponentGD(node->setUnionType("ChildEntityPoolComponentGD"));
        }
        inline std::optional<Ent::Gen::CinematicGD> Component::CinematicGD() const
        {
            return strcmp(node->getUnionType(), "CinematicGD") != 0? std::optional<Ent::Gen::CinematicGD>{}: std::optional<Ent::Gen::CinematicGD>(node->getUnionData());
        }
        inline Ent::Gen::CinematicGD Component::setCinematicGD() const
        {
            return Ent::Gen::CinematicGD(node->setUnionType("CinematicGD"));
        }
        inline std::optional<Ent::Gen::ClothAnimationGD> Component::ClothAnimationGD() const
        {
            return strcmp(node->getUnionType(), "ClothAnimationGD") != 0? std::optional<Ent::Gen::ClothAnimationGD>{}: std::optional<Ent::Gen::ClothAnimationGD>(node->getUnionData());
        }
        inline Ent::Gen::ClothAnimationGD Component::setClothAnimationGD() const
        {
            return Ent::Gen::ClothAnimationGD(node->setUnionType("ClothAnimationGD"));
        }
        inline std::optional<Ent::Gen::ClothGD> Component::ClothGD() const
        {
            return strcmp(node->getUnionType(), "ClothGD") != 0? std::optional<Ent::Gen::ClothGD>{}: std::optional<Ent::Gen::ClothGD>(node->getUnionData());
        }
        inline Ent::Gen::ClothGD Component::setClothGD() const
        {
            return Ent::Gen::ClothGD(node->setUnionType("ClothGD"));
        }
        inline std::optional<Ent::Gen::ComponentWithProtoCodeGD> Component::ComponentWithProtoCodeGD() const
        {
            return strcmp(node->getUnionType(), "ComponentWithProtoCodeGD") != 0? std::optional<Ent::Gen::ComponentWithProtoCodeGD>{}: std::optional<Ent::Gen::ComponentWithProtoCodeGD>(node->getUnionData());
        }
        inline Ent::Gen::ComponentWithProtoCodeGD Component::setComponentWithProtoCodeGD() const
        {
            return Ent::Gen::ComponentWithProtoCodeGD(node->setUnionType("ComponentWithProtoCodeGD"));
        }
        inline std::optional<Ent::Gen::ConnectorGD> Component::ConnectorGD() const
        {
            return strcmp(node->getUnionType(), "ConnectorGD") != 0? std::optional<Ent::Gen::ConnectorGD>{}: std::optional<Ent::Gen::ConnectorGD>(node->getUnionData());
        }
        inline Ent::Gen::ConnectorGD Component::setConnectorGD() const
        {
            return Ent::Gen::ConnectorGD(node->setUnionType("ConnectorGD"));
        }
        inline std::optional<Ent::Gen::ConstrainedMoveGD> Component::ConstrainedMoveGD() const
        {
            return strcmp(node->getUnionType(), "ConstrainedMoveGD") != 0? std::optional<Ent::Gen::ConstrainedMoveGD>{}: std::optional<Ent::Gen::ConstrainedMoveGD>(node->getUnionData());
        }
        inline Ent::Gen::ConstrainedMoveGD Component::setConstrainedMoveGD() const
        {
            return Ent::Gen::ConstrainedMoveGD(node->setUnionType("ConstrainedMoveGD"));
        }
        inline std::optional<Ent::Gen::CreatureAIGD> Component::CreatureAIGD() const
        {
            return strcmp(node->getUnionType(), "CreatureAIGD") != 0? std::optional<Ent::Gen::CreatureAIGD>{}: std::optional<Ent::Gen::CreatureAIGD>(node->getUnionData());
        }
        inline Ent::Gen::CreatureAIGD Component::setCreatureAIGD() const
        {
            return Ent::Gen::CreatureAIGD(node->setUnionType("CreatureAIGD"));
        }
        inline std::optional<Ent::Gen::CreatureGD> Component::CreatureGD() const
        {
            return strcmp(node->getUnionType(), "CreatureGD") != 0? std::optional<Ent::Gen::CreatureGD>{}: std::optional<Ent::Gen::CreatureGD>(node->getUnionData());
        }
        inline Ent::Gen::CreatureGD Component::setCreatureGD() const
        {
            return Ent::Gen::CreatureGD(node->setUnionType("CreatureGD"));
        }
        inline std::optional<Ent::Gen::CreatureUIGD> Component::CreatureUIGD() const
        {
            return strcmp(node->getUnionType(), "CreatureUIGD") != 0? std::optional<Ent::Gen::CreatureUIGD>{}: std::optional<Ent::Gen::CreatureUIGD>(node->getUnionData());
        }
        inline Ent::Gen::CreatureUIGD Component::setCreatureUIGD() const
        {
            return Ent::Gen::CreatureUIGD(node->setUnionType("CreatureUIGD"));
        }
        inline std::optional<Ent::Gen::CustomThumbnail> Component::CustomThumbnail() const
        {
            return strcmp(node->getUnionType(), "CustomThumbnail") != 0? std::optional<Ent::Gen::CustomThumbnail>{}: std::optional<Ent::Gen::CustomThumbnail>(node->getUnionData());
        }
        inline Ent::Gen::CustomThumbnail Component::setCustomThumbnail() const
        {
            return Ent::Gen::CustomThumbnail(node->setUnionType("CustomThumbnail"));
        }
        inline std::optional<Ent::Gen::DebugGridGD> Component::DebugGridGD() const
        {
            return strcmp(node->getUnionType(), "DebugGridGD") != 0? std::optional<Ent::Gen::DebugGridGD>{}: std::optional<Ent::Gen::DebugGridGD>(node->getUnionData());
        }
        inline Ent::Gen::DebugGridGD Component::setDebugGridGD() const
        {
            return Ent::Gen::DebugGridGD(node->setUnionType("DebugGridGD"));
        }
        inline std::optional<Ent::Gen::DistanceTriggerGD> Component::DistanceTriggerGD() const
        {
            return strcmp(node->getUnionType(), "DistanceTriggerGD") != 0? std::optional<Ent::Gen::DistanceTriggerGD>{}: std::optional<Ent::Gen::DistanceTriggerGD>(node->getUnionData());
        }
        inline Ent::Gen::DistanceTriggerGD Component::setDistanceTriggerGD() const
        {
            return Ent::Gen::DistanceTriggerGD(node->setUnionType("DistanceTriggerGD"));
        }
        inline std::optional<Ent::Gen::DiveAttackGD> Component::DiveAttackGD() const
        {
            return strcmp(node->getUnionType(), "DiveAttackGD") != 0? std::optional<Ent::Gen::DiveAttackGD>{}: std::optional<Ent::Gen::DiveAttackGD>(node->getUnionData());
        }
        inline Ent::Gen::DiveAttackGD Component::setDiveAttackGD() const
        {
            return Ent::Gen::DiveAttackGD(node->setUnionType("DiveAttackGD"));
        }
        inline std::optional<Ent::Gen::DummyComponentGD> Component::DummyComponentGD() const
        {
            return strcmp(node->getUnionType(), "DummyComponentGD") != 0? std::optional<Ent::Gen::DummyComponentGD>{}: std::optional<Ent::Gen::DummyComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::DummyComponentGD Component::setDummyComponentGD() const
        {
            return Ent::Gen::DummyComponentGD(node->setUnionType("DummyComponentGD"));
        }
        inline std::optional<Ent::Gen::EnergyCrookGD> Component::EnergyCrookGD() const
        {
            return strcmp(node->getUnionType(), "EnergyCrookGD") != 0? std::optional<Ent::Gen::EnergyCrookGD>{}: std::optional<Ent::Gen::EnergyCrookGD>(node->getUnionData());
        }
        inline Ent::Gen::EnergyCrookGD Component::setEnergyCrookGD() const
        {
            return Ent::Gen::EnergyCrookGD(node->setUnionType("EnergyCrookGD"));
        }
        inline std::optional<Ent::Gen::EnergyDrainGD> Component::EnergyDrainGD() const
        {
            return strcmp(node->getUnionType(), "EnergyDrainGD") != 0? std::optional<Ent::Gen::EnergyDrainGD>{}: std::optional<Ent::Gen::EnergyDrainGD>(node->getUnionData());
        }
        inline Ent::Gen::EnergyDrainGD Component::setEnergyDrainGD() const
        {
            return Ent::Gen::EnergyDrainGD(node->setUnionType("EnergyDrainGD"));
        }
        inline std::optional<Ent::Gen::EnergyNetworkListenerGD> Component::EnergyNetworkListenerGD() const
        {
            return strcmp(node->getUnionType(), "EnergyNetworkListenerGD") != 0? std::optional<Ent::Gen::EnergyNetworkListenerGD>{}: std::optional<Ent::Gen::EnergyNetworkListenerGD>(node->getUnionData());
        }
        inline Ent::Gen::EnergyNetworkListenerGD Component::setEnergyNetworkListenerGD() const
        {
            return Ent::Gen::EnergyNetworkListenerGD(node->setUnionType("EnergyNetworkListenerGD"));
        }
        inline std::optional<Ent::Gen::EnergyPoolGD> Component::EnergyPoolGD() const
        {
            return strcmp(node->getUnionType(), "EnergyPoolGD") != 0? std::optional<Ent::Gen::EnergyPoolGD>{}: std::optional<Ent::Gen::EnergyPoolGD>(node->getUnionData());
        }
        inline Ent::Gen::EnergyPoolGD Component::setEnergyPoolGD() const
        {
            return Ent::Gen::EnergyPoolGD(node->setUnionType("EnergyPoolGD"));
        }
        inline std::optional<Ent::Gen::EnergySideSwitcherGD> Component::EnergySideSwitcherGD() const
        {
            return strcmp(node->getUnionType(), "EnergySideSwitcherGD") != 0? std::optional<Ent::Gen::EnergySideSwitcherGD>{}: std::optional<Ent::Gen::EnergySideSwitcherGD>(node->getUnionData());
        }
        inline Ent::Gen::EnergySideSwitcherGD Component::setEnergySideSwitcherGD() const
        {
            return Ent::Gen::EnergySideSwitcherGD(node->setUnionType("EnergySideSwitcherGD"));
        }
        inline std::optional<Ent::Gen::EnergySpoutGD> Component::EnergySpoutGD() const
        {
            return strcmp(node->getUnionType(), "EnergySpoutGD") != 0? std::optional<Ent::Gen::EnergySpoutGD>{}: std::optional<Ent::Gen::EnergySpoutGD>(node->getUnionData());
        }
        inline Ent::Gen::EnergySpoutGD Component::setEnergySpoutGD() const
        {
            return Ent::Gen::EnergySpoutGD(node->setUnionType("EnergySpoutGD"));
        }
        inline std::optional<Ent::Gen::EnvStampGD> Component::EnvStampGD() const
        {
            return strcmp(node->getUnionType(), "EnvStampGD") != 0? std::optional<Ent::Gen::EnvStampGD>{}: std::optional<Ent::Gen::EnvStampGD>(node->getUnionData());
        }
        inline Ent::Gen::EnvStampGD Component::setEnvStampGD() const
        {
            return Ent::Gen::EnvStampGD(node->setUnionType("EnvStampGD"));
        }
        inline std::optional<Ent::Gen::EventHandlerGD> Component::EventHandlerGD() const
        {
            return strcmp(node->getUnionType(), "EventHandlerGD") != 0? std::optional<Ent::Gen::EventHandlerGD>{}: std::optional<Ent::Gen::EventHandlerGD>(node->getUnionData());
        }
        inline Ent::Gen::EventHandlerGD Component::setEventHandlerGD() const
        {
            return Ent::Gen::EventHandlerGD(node->setUnionType("EventHandlerGD"));
        }
        inline std::optional<Ent::Gen::EventTriggerGD> Component::EventTriggerGD() const
        {
            return strcmp(node->getUnionType(), "EventTriggerGD") != 0? std::optional<Ent::Gen::EventTriggerGD>{}: std::optional<Ent::Gen::EventTriggerGD>(node->getUnionData());
        }
        inline Ent::Gen::EventTriggerGD Component::setEventTriggerGD() const
        {
            return Ent::Gen::EventTriggerGD(node->setUnionType("EventTriggerGD"));
        }
        inline std::optional<Ent::Gen::FightDistanceTriggerGD> Component::FightDistanceTriggerGD() const
        {
            return strcmp(node->getUnionType(), "FightDistanceTriggerGD") != 0? std::optional<Ent::Gen::FightDistanceTriggerGD>{}: std::optional<Ent::Gen::FightDistanceTriggerGD>(node->getUnionData());
        }
        inline Ent::Gen::FightDistanceTriggerGD Component::setFightDistanceTriggerGD() const
        {
            return Ent::Gen::FightDistanceTriggerGD(node->setUnionType("FightDistanceTriggerGD"));
        }
        inline std::optional<Ent::Gen::FireSensorGD> Component::FireSensorGD() const
        {
            return strcmp(node->getUnionType(), "FireSensorGD") != 0? std::optional<Ent::Gen::FireSensorGD>{}: std::optional<Ent::Gen::FireSensorGD>(node->getUnionData());
        }
        inline Ent::Gen::FireSensorGD Component::setFireSensorGD() const
        {
            return Ent::Gen::FireSensorGD(node->setUnionType("FireSensorGD"));
        }
        inline std::optional<Ent::Gen::FluidFXEntitySpawnerGD> Component::FluidFXEntitySpawnerGD() const
        {
            return strcmp(node->getUnionType(), "FluidFXEntitySpawnerGD") != 0? std::optional<Ent::Gen::FluidFXEntitySpawnerGD>{}: std::optional<Ent::Gen::FluidFXEntitySpawnerGD>(node->getUnionData());
        }
        inline Ent::Gen::FluidFXEntitySpawnerGD Component::setFluidFXEntitySpawnerGD() const
        {
            return Ent::Gen::FluidFXEntitySpawnerGD(node->setUnionType("FluidFXEntitySpawnerGD"));
        }
        inline std::optional<Ent::Gen::FluidGD> Component::FluidGD() const
        {
            return strcmp(node->getUnionType(), "FluidGD") != 0? std::optional<Ent::Gen::FluidGD>{}: std::optional<Ent::Gen::FluidGD>(node->getUnionData());
        }
        inline Ent::Gen::FluidGD Component::setFluidGD() const
        {
            return Ent::Gen::FluidGD(node->setUnionType("FluidGD"));
        }
        inline std::optional<Ent::Gen::FluidViewGD> Component::FluidViewGD() const
        {
            return strcmp(node->getUnionType(), "FluidViewGD") != 0? std::optional<Ent::Gen::FluidViewGD>{}: std::optional<Ent::Gen::FluidViewGD>(node->getUnionData());
        }
        inline Ent::Gen::FluidViewGD Component::setFluidViewGD() const
        {
            return Ent::Gen::FluidViewGD(node->setUnionType("FluidViewGD"));
        }
        inline std::optional<Ent::Gen::FluidVolumeComponentGD> Component::FluidVolumeComponentGD() const
        {
            return strcmp(node->getUnionType(), "FluidVolumeComponentGD") != 0? std::optional<Ent::Gen::FluidVolumeComponentGD>{}: std::optional<Ent::Gen::FluidVolumeComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::FluidVolumeComponentGD Component::setFluidVolumeComponentGD() const
        {
            return Ent::Gen::FluidVolumeComponentGD(node->setUnionType("FluidVolumeComponentGD"));
        }
        inline std::optional<Ent::Gen::FurComponentGD> Component::FurComponentGD() const
        {
            return strcmp(node->getUnionType(), "FurComponentGD") != 0? std::optional<Ent::Gen::FurComponentGD>{}: std::optional<Ent::Gen::FurComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::FurComponentGD Component::setFurComponentGD() const
        {
            return Ent::Gen::FurComponentGD(node->setUnionType("FurComponentGD"));
        }
        inline std::optional<Ent::Gen::GameEffectSpawnerGD> Component::GameEffectSpawnerGD() const
        {
            return strcmp(node->getUnionType(), "GameEffectSpawnerGD") != 0? std::optional<Ent::Gen::GameEffectSpawnerGD>{}: std::optional<Ent::Gen::GameEffectSpawnerGD>(node->getUnionData());
        }
        inline Ent::Gen::GameEffectSpawnerGD Component::setGameEffectSpawnerGD() const
        {
            return Ent::Gen::GameEffectSpawnerGD(node->setUnionType("GameEffectSpawnerGD"));
        }
        inline std::optional<Ent::Gen::GraspableGD> Component::GraspableGD() const
        {
            return strcmp(node->getUnionType(), "GraspableGD") != 0? std::optional<Ent::Gen::GraspableGD>{}: std::optional<Ent::Gen::GraspableGD>(node->getUnionData());
        }
        inline Ent::Gen::GraspableGD Component::setGraspableGD() const
        {
            return Ent::Gen::GraspableGD(node->setUnionType("GraspableGD"));
        }
        inline std::optional<Ent::Gen::GrasperGD> Component::GrasperGD() const
        {
            return strcmp(node->getUnionType(), "GrasperGD") != 0? std::optional<Ent::Gen::GrasperGD>{}: std::optional<Ent::Gen::GrasperGD>(node->getUnionData());
        }
        inline Ent::Gen::GrasperGD Component::setGrasperGD() const
        {
            return Ent::Gen::GrasperGD(node->setUnionType("GrasperGD"));
        }
        inline std::optional<Ent::Gen::GroundTypeSamplerGD> Component::GroundTypeSamplerGD() const
        {
            return strcmp(node->getUnionType(), "GroundTypeSamplerGD") != 0? std::optional<Ent::Gen::GroundTypeSamplerGD>{}: std::optional<Ent::Gen::GroundTypeSamplerGD>(node->getUnionData());
        }
        inline Ent::Gen::GroundTypeSamplerGD Component::setGroundTypeSamplerGD() const
        {
            return Ent::Gen::GroundTypeSamplerGD(node->setUnionType("GroundTypeSamplerGD"));
        }
        inline std::optional<Ent::Gen::HealPumpGD> Component::HealPumpGD() const
        {
            return strcmp(node->getUnionType(), "HealPumpGD") != 0? std::optional<Ent::Gen::HealPumpGD>{}: std::optional<Ent::Gen::HealPumpGD>(node->getUnionData());
        }
        inline Ent::Gen::HealPumpGD Component::setHealPumpGD() const
        {
            return Ent::Gen::HealPumpGD(node->setUnionType("HealPumpGD"));
        }
        inline std::optional<Ent::Gen::HealTriggerGD> Component::HealTriggerGD() const
        {
            return strcmp(node->getUnionType(), "HealTriggerGD") != 0? std::optional<Ent::Gen::HealTriggerGD>{}: std::optional<Ent::Gen::HealTriggerGD>(node->getUnionData());
        }
        inline Ent::Gen::HealTriggerGD Component::setHealTriggerGD() const
        {
            return Ent::Gen::HealTriggerGD(node->setUnionType("HealTriggerGD"));
        }
        inline std::optional<Ent::Gen::HealerGD> Component::HealerGD() const
        {
            return strcmp(node->getUnionType(), "HealerGD") != 0? std::optional<Ent::Gen::HealerGD>{}: std::optional<Ent::Gen::HealerGD>(node->getUnionData());
        }
        inline Ent::Gen::HealerGD Component::setHealerGD() const
        {
            return Ent::Gen::HealerGD(node->setUnionType("HealerGD"));
        }
        inline std::optional<Ent::Gen::HealthAreaGD> Component::HealthAreaGD() const
        {
            return strcmp(node->getUnionType(), "HealthAreaGD") != 0? std::optional<Ent::Gen::HealthAreaGD>{}: std::optional<Ent::Gen::HealthAreaGD>(node->getUnionData());
        }
        inline Ent::Gen::HealthAreaGD Component::setHealthAreaGD() const
        {
            return Ent::Gen::HealthAreaGD(node->setUnionType("HealthAreaGD"));
        }
        inline std::optional<Ent::Gen::HeightMapComponentGD> Component::HeightMapComponentGD() const
        {
            return strcmp(node->getUnionType(), "HeightMapComponentGD") != 0? std::optional<Ent::Gen::HeightMapComponentGD>{}: std::optional<Ent::Gen::HeightMapComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::HeightMapComponentGD Component::setHeightMapComponentGD() const
        {
            return Ent::Gen::HeightMapComponentGD(node->setUnionType("HeightMapComponentGD"));
        }
        inline std::optional<Ent::Gen::HeightObj> Component::HeightObj() const
        {
            return strcmp(node->getUnionType(), "HeightObj") != 0? std::optional<Ent::Gen::HeightObj>{}: std::optional<Ent::Gen::HeightObj>(node->getUnionData());
        }
        inline Ent::Gen::HeightObj Component::setHeightObj() const
        {
            return Ent::Gen::HeightObj(node->setUnionType("HeightObj"));
        }
        inline std::optional<Ent::Gen::HitTriggerGD> Component::HitTriggerGD() const
        {
            return strcmp(node->getUnionType(), "HitTriggerGD") != 0? std::optional<Ent::Gen::HitTriggerGD>{}: std::optional<Ent::Gen::HitTriggerGD>(node->getUnionData());
        }
        inline Ent::Gen::HitTriggerGD Component::setHitTriggerGD() const
        {
            return Ent::Gen::HitTriggerGD(node->setUnionType("HitTriggerGD"));
        }
        inline std::optional<Ent::Gen::HotspotsGD> Component::HotspotsGD() const
        {
            return strcmp(node->getUnionType(), "HotspotsGD") != 0? std::optional<Ent::Gen::HotspotsGD>{}: std::optional<Ent::Gen::HotspotsGD>(node->getUnionData());
        }
        inline Ent::Gen::HotspotsGD Component::setHotspotsGD() const
        {
            return Ent::Gen::HotspotsGD(node->setUnionType("HotspotsGD"));
        }
        inline std::optional<Ent::Gen::IncapacitateComponentGD> Component::IncapacitateComponentGD() const
        {
            return strcmp(node->getUnionType(), "IncapacitateComponentGD") != 0? std::optional<Ent::Gen::IncapacitateComponentGD>{}: std::optional<Ent::Gen::IncapacitateComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::IncapacitateComponentGD Component::setIncapacitateComponentGD() const
        {
            return Ent::Gen::IncapacitateComponentGD(node->setUnionType("IncapacitateComponentGD"));
        }
        inline std::optional<Ent::Gen::InfoboardRegistererGD> Component::InfoboardRegistererGD() const
        {
            return strcmp(node->getUnionType(), "InfoboardRegistererGD") != 0? std::optional<Ent::Gen::InfoboardRegistererGD>{}: std::optional<Ent::Gen::InfoboardRegistererGD>(node->getUnionData());
        }
        inline Ent::Gen::InfoboardRegistererGD Component::setInfoboardRegistererGD() const
        {
            return Ent::Gen::InfoboardRegistererGD(node->setUnionType("InfoboardRegistererGD"));
        }
        inline std::optional<Ent::Gen::InteractableGPEGD> Component::InteractableGPEGD() const
        {
            return strcmp(node->getUnionType(), "InteractableGPEGD") != 0? std::optional<Ent::Gen::InteractableGPEGD>{}: std::optional<Ent::Gen::InteractableGPEGD>(node->getUnionData());
        }
        inline Ent::Gen::InteractableGPEGD Component::setInteractableGPEGD() const
        {
            return Ent::Gen::InteractableGPEGD(node->setUnionType("InteractableGPEGD"));
        }
        inline std::optional<Ent::Gen::InteractorGD> Component::InteractorGD() const
        {
            return strcmp(node->getUnionType(), "InteractorGD") != 0? std::optional<Ent::Gen::InteractorGD>{}: std::optional<Ent::Gen::InteractorGD>(node->getUnionData());
        }
        inline Ent::Gen::InteractorGD Component::setInteractorGD() const
        {
            return Ent::Gen::InteractorGD(node->setUnionType("InteractorGD"));
        }
        inline std::optional<Ent::Gen::InterestPointGD> Component::InterestPointGD() const
        {
            return strcmp(node->getUnionType(), "InterestPointGD") != 0? std::optional<Ent::Gen::InterestPointGD>{}: std::optional<Ent::Gen::InterestPointGD>(node->getUnionData());
        }
        inline Ent::Gen::InterestPointGD Component::setInterestPointGD() const
        {
            return Ent::Gen::InterestPointGD(node->setUnionType("InterestPointGD"));
        }
        inline std::optional<Ent::Gen::InventoryGD> Component::InventoryGD() const
        {
            return strcmp(node->getUnionType(), "InventoryGD") != 0? std::optional<Ent::Gen::InventoryGD>{}: std::optional<Ent::Gen::InventoryGD>(node->getUnionData());
        }
        inline Ent::Gen::InventoryGD Component::setInventoryGD() const
        {
            return Ent::Gen::InventoryGD(node->setUnionType("InventoryGD"));
        }
        inline std::optional<Ent::Gen::ItemHolderGD> Component::ItemHolderGD() const
        {
            return strcmp(node->getUnionType(), "ItemHolderGD") != 0? std::optional<Ent::Gen::ItemHolderGD>{}: std::optional<Ent::Gen::ItemHolderGD>(node->getUnionData());
        }
        inline Ent::Gen::ItemHolderGD Component::setItemHolderGD() const
        {
            return Ent::Gen::ItemHolderGD(node->setUnionType("ItemHolderGD"));
        }
        inline std::optional<Ent::Gen::LDPrimitive> Component::LDPrimitive() const
        {
            return strcmp(node->getUnionType(), "LDPrimitive") != 0? std::optional<Ent::Gen::LDPrimitive>{}: std::optional<Ent::Gen::LDPrimitive>(node->getUnionData());
        }
        inline Ent::Gen::LDPrimitive Component::setLDPrimitive() const
        {
            return Ent::Gen::LDPrimitive(node->setUnionType("LDPrimitive"));
        }
        inline std::optional<Ent::Gen::LifeComponentGD> Component::LifeComponentGD() const
        {
            return strcmp(node->getUnionType(), "LifeComponentGD") != 0? std::optional<Ent::Gen::LifeComponentGD>{}: std::optional<Ent::Gen::LifeComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::LifeComponentGD Component::setLifeComponentGD() const
        {
            return Ent::Gen::LifeComponentGD(node->setUnionType("LifeComponentGD"));
        }
        inline std::optional<Ent::Gen::LightComponentGD> Component::LightComponentGD() const
        {
            return strcmp(node->getUnionType(), "LightComponentGD") != 0? std::optional<Ent::Gen::LightComponentGD>{}: std::optional<Ent::Gen::LightComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::LightComponentGD Component::setLightComponentGD() const
        {
            return Ent::Gen::LightComponentGD(node->setUnionType("LightComponentGD"));
        }
        inline std::optional<Ent::Gen::Mesh> Component::Mesh() const
        {
            return strcmp(node->getUnionType(), "Mesh") != 0? std::optional<Ent::Gen::Mesh>{}: std::optional<Ent::Gen::Mesh>(node->getUnionData());
        }
        inline Ent::Gen::Mesh Component::setMesh() const
        {
            return Ent::Gen::Mesh(node->setUnionType("Mesh"));
        }
        inline std::optional<Ent::Gen::MeshNavigationInfosGD> Component::MeshNavigationInfosGD() const
        {
            return strcmp(node->getUnionType(), "MeshNavigationInfosGD") != 0? std::optional<Ent::Gen::MeshNavigationInfosGD>{}: std::optional<Ent::Gen::MeshNavigationInfosGD>(node->getUnionData());
        }
        inline Ent::Gen::MeshNavigationInfosGD Component::setMeshNavigationInfosGD() const
        {
            return Ent::Gen::MeshNavigationInfosGD(node->setUnionType("MeshNavigationInfosGD"));
        }
        inline std::optional<Ent::Gen::MissionHolderGD> Component::MissionHolderGD() const
        {
            return strcmp(node->getUnionType(), "MissionHolderGD") != 0? std::optional<Ent::Gen::MissionHolderGD>{}: std::optional<Ent::Gen::MissionHolderGD>(node->getUnionData());
        }
        inline Ent::Gen::MissionHolderGD Component::setMissionHolderGD() const
        {
            return Ent::Gen::MissionHolderGD(node->setUnionType("MissionHolderGD"));
        }
        inline std::optional<Ent::Gen::MountIKControllerGD> Component::MountIKControllerGD() const
        {
            return strcmp(node->getUnionType(), "MountIKControllerGD") != 0? std::optional<Ent::Gen::MountIKControllerGD>{}: std::optional<Ent::Gen::MountIKControllerGD>(node->getUnionData());
        }
        inline Ent::Gen::MountIKControllerGD Component::setMountIKControllerGD() const
        {
            return Ent::Gen::MountIKControllerGD(node->setUnionType("MountIKControllerGD"));
        }
        inline std::optional<Ent::Gen::MountableGD> Component::MountableGD() const
        {
            return strcmp(node->getUnionType(), "MountableGD") != 0? std::optional<Ent::Gen::MountableGD>{}: std::optional<Ent::Gen::MountableGD>(node->getUnionData());
        }
        inline Ent::Gen::MountableGD Component::setMountableGD() const
        {
            return Ent::Gen::MountableGD(node->setUnionType("MountableGD"));
        }
        inline std::optional<Ent::Gen::MounterGD> Component::MounterGD() const
        {
            return strcmp(node->getUnionType(), "MounterGD") != 0? std::optional<Ent::Gen::MounterGD>{}: std::optional<Ent::Gen::MounterGD>(node->getUnionData());
        }
        inline Ent::Gen::MounterGD Component::setMounterGD() const
        {
            return Ent::Gen::MounterGD(node->setUnionType("MounterGD"));
        }
        inline std::optional<Ent::Gen::MultiThumbnail> Component::MultiThumbnail() const
        {
            return strcmp(node->getUnionType(), "MultiThumbnail") != 0? std::optional<Ent::Gen::MultiThumbnail>{}: std::optional<Ent::Gen::MultiThumbnail>(node->getUnionData());
        }
        inline Ent::Gen::MultiThumbnail Component::setMultiThumbnail() const
        {
            return Ent::Gen::MultiThumbnail(node->setUnionType("MultiThumbnail"));
        }
        inline std::optional<Ent::Gen::NavMeshActivatorGD> Component::NavMeshActivatorGD() const
        {
            return strcmp(node->getUnionType(), "NavMeshActivatorGD") != 0? std::optional<Ent::Gen::NavMeshActivatorGD>{}: std::optional<Ent::Gen::NavMeshActivatorGD>(node->getUnionData());
        }
        inline Ent::Gen::NavMeshActivatorGD Component::setNavMeshActivatorGD() const
        {
            return Ent::Gen::NavMeshActivatorGD(node->setUnionType("NavMeshActivatorGD"));
        }
        inline std::optional<Ent::Gen::NavMeshStamperGD> Component::NavMeshStamperGD() const
        {
            return strcmp(node->getUnionType(), "NavMeshStamperGD") != 0? std::optional<Ent::Gen::NavMeshStamperGD>{}: std::optional<Ent::Gen::NavMeshStamperGD>(node->getUnionData());
        }
        inline Ent::Gen::NavMeshStamperGD Component::setNavMeshStamperGD() const
        {
            return Ent::Gen::NavMeshStamperGD(node->setUnionType("NavMeshStamperGD"));
        }
        inline std::optional<Ent::Gen::NetGD> Component::NetGD() const
        {
            return strcmp(node->getUnionType(), "NetGD") != 0? std::optional<Ent::Gen::NetGD>{}: std::optional<Ent::Gen::NetGD>(node->getUnionData());
        }
        inline Ent::Gen::NetGD Component::setNetGD() const
        {
            return Ent::Gen::NetGD(node->setUnionType("NetGD"));
        }
        inline std::optional<Ent::Gen::NetworkLink> Component::NetworkLink() const
        {
            return strcmp(node->getUnionType(), "NetworkLink") != 0? std::optional<Ent::Gen::NetworkLink>{}: std::optional<Ent::Gen::NetworkLink>(node->getUnionData());
        }
        inline Ent::Gen::NetworkLink Component::setNetworkLink() const
        {
            return Ent::Gen::NetworkLink(node->setUnionType("NetworkLink"));
        }
        inline std::optional<Ent::Gen::NetworkNode> Component::NetworkNode() const
        {
            return strcmp(node->getUnionType(), "NetworkNode") != 0? std::optional<Ent::Gen::NetworkNode>{}: std::optional<Ent::Gen::NetworkNode>(node->getUnionData());
        }
        inline Ent::Gen::NetworkNode Component::setNetworkNode() const
        {
            return Ent::Gen::NetworkNode(node->setUnionType("NetworkNode"));
        }
        inline std::optional<Ent::Gen::NotVisibleInSubscene> Component::NotVisibleInSubscene() const
        {
            return strcmp(node->getUnionType(), "NotVisibleInSubscene") != 0? std::optional<Ent::Gen::NotVisibleInSubscene>{}: std::optional<Ent::Gen::NotVisibleInSubscene>(node->getUnionData());
        }
        inline Ent::Gen::NotVisibleInSubscene Component::setNotVisibleInSubscene() const
        {
            return Ent::Gen::NotVisibleInSubscene(node->setUnionType("NotVisibleInSubscene"));
        }
        inline std::optional<Ent::Gen::OutfitGD> Component::OutfitGD() const
        {
            return strcmp(node->getUnionType(), "OutfitGD") != 0? std::optional<Ent::Gen::OutfitGD>{}: std::optional<Ent::Gen::OutfitGD>(node->getUnionData());
        }
        inline Ent::Gen::OutfitGD Component::setOutfitGD() const
        {
            return Ent::Gen::OutfitGD(node->setUnionType("OutfitGD"));
        }
        inline std::optional<Ent::Gen::OutfitWearerGD> Component::OutfitWearerGD() const
        {
            return strcmp(node->getUnionType(), "OutfitWearerGD") != 0? std::optional<Ent::Gen::OutfitWearerGD>{}: std::optional<Ent::Gen::OutfitWearerGD>(node->getUnionData());
        }
        inline Ent::Gen::OutfitWearerGD Component::setOutfitWearerGD() const
        {
            return Ent::Gen::OutfitWearerGD(node->setUnionType("OutfitWearerGD"));
        }
        inline std::optional<Ent::Gen::PathFinderGD> Component::PathFinderGD() const
        {
            return strcmp(node->getUnionType(), "PathFinderGD") != 0? std::optional<Ent::Gen::PathFinderGD>{}: std::optional<Ent::Gen::PathFinderGD>(node->getUnionData());
        }
        inline Ent::Gen::PathFinderGD Component::setPathFinderGD() const
        {
            return Ent::Gen::PathFinderGD(node->setUnionType("PathFinderGD"));
        }
        inline std::optional<Ent::Gen::PerceivableGD> Component::PerceivableGD() const
        {
            return strcmp(node->getUnionType(), "PerceivableGD") != 0? std::optional<Ent::Gen::PerceivableGD>{}: std::optional<Ent::Gen::PerceivableGD>(node->getUnionData());
        }
        inline Ent::Gen::PerceivableGD Component::setPerceivableGD() const
        {
            return Ent::Gen::PerceivableGD(node->setUnionType("PerceivableGD"));
        }
        inline std::optional<Ent::Gen::PerceiverGD> Component::PerceiverGD() const
        {
            return strcmp(node->getUnionType(), "PerceiverGD") != 0? std::optional<Ent::Gen::PerceiverGD>{}: std::optional<Ent::Gen::PerceiverGD>(node->getUnionData());
        }
        inline Ent::Gen::PerceiverGD Component::setPerceiverGD() const
        {
            return Ent::Gen::PerceiverGD(node->setUnionType("PerceiverGD"));
        }
        inline std::optional<Ent::Gen::PhysicsDataGD> Component::PhysicsDataGD() const
        {
            return strcmp(node->getUnionType(), "PhysicsDataGD") != 0? std::optional<Ent::Gen::PhysicsDataGD>{}: std::optional<Ent::Gen::PhysicsDataGD>(node->getUnionData());
        }
        inline Ent::Gen::PhysicsDataGD Component::setPhysicsDataGD() const
        {
            return Ent::Gen::PhysicsDataGD(node->setUnionType("PhysicsDataGD"));
        }
        inline std::optional<Ent::Gen::PhysicsGD> Component::PhysicsGD() const
        {
            return strcmp(node->getUnionType(), "PhysicsGD") != 0? std::optional<Ent::Gen::PhysicsGD>{}: std::optional<Ent::Gen::PhysicsGD>(node->getUnionData());
        }
        inline Ent::Gen::PhysicsGD Component::setPhysicsGD() const
        {
            return Ent::Gen::PhysicsGD(node->setUnionType("PhysicsGD"));
        }
        inline std::optional<Ent::Gen::PhysicsImpactMakerGD> Component::PhysicsImpactMakerGD() const
        {
            return strcmp(node->getUnionType(), "PhysicsImpactMakerGD") != 0? std::optional<Ent::Gen::PhysicsImpactMakerGD>{}: std::optional<Ent::Gen::PhysicsImpactMakerGD>(node->getUnionData());
        }
        inline Ent::Gen::PhysicsImpactMakerGD Component::setPhysicsImpactMakerGD() const
        {
            return Ent::Gen::PhysicsImpactMakerGD(node->setUnionType("PhysicsImpactMakerGD"));
        }
        inline std::optional<Ent::Gen::PhysicsMeshDeformerGD> Component::PhysicsMeshDeformerGD() const
        {
            return strcmp(node->getUnionType(), "PhysicsMeshDeformerGD") != 0? std::optional<Ent::Gen::PhysicsMeshDeformerGD>{}: std::optional<Ent::Gen::PhysicsMeshDeformerGD>(node->getUnionData());
        }
        inline Ent::Gen::PhysicsMeshDeformerGD Component::setPhysicsMeshDeformerGD() const
        {
            return Ent::Gen::PhysicsMeshDeformerGD(node->setUnionType("PhysicsMeshDeformerGD"));
        }
        inline std::optional<Ent::Gen::PhysicsMeshProviderGD> Component::PhysicsMeshProviderGD() const
        {
            return strcmp(node->getUnionType(), "PhysicsMeshProviderGD") != 0? std::optional<Ent::Gen::PhysicsMeshProviderGD>{}: std::optional<Ent::Gen::PhysicsMeshProviderGD>(node->getUnionData());
        }
        inline Ent::Gen::PhysicsMeshProviderGD Component::setPhysicsMeshProviderGD() const
        {
            return Ent::Gen::PhysicsMeshProviderGD(node->setUnionType("PhysicsMeshProviderGD"));
        }
        inline std::optional<Ent::Gen::PhysicsTriggerGD> Component::PhysicsTriggerGD() const
        {
            return strcmp(node->getUnionType(), "PhysicsTriggerGD") != 0? std::optional<Ent::Gen::PhysicsTriggerGD>{}: std::optional<Ent::Gen::PhysicsTriggerGD>(node->getUnionData());
        }
        inline Ent::Gen::PhysicsTriggerGD Component::setPhysicsTriggerGD() const
        {
            return Ent::Gen::PhysicsTriggerGD(node->setUnionType("PhysicsTriggerGD"));
        }
        inline std::optional<Ent::Gen::PickableComponentGD> Component::PickableComponentGD() const
        {
            return strcmp(node->getUnionType(), "PickableComponentGD") != 0? std::optional<Ent::Gen::PickableComponentGD>{}: std::optional<Ent::Gen::PickableComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::PickableComponentGD Component::setPickableComponentGD() const
        {
            return Ent::Gen::PickableComponentGD(node->setUnionType("PickableComponentGD"));
        }
        inline std::optional<Ent::Gen::PickableDistributorComponentGD> Component::PickableDistributorComponentGD() const
        {
            return strcmp(node->getUnionType(), "PickableDistributorComponentGD") != 0? std::optional<Ent::Gen::PickableDistributorComponentGD>{}: std::optional<Ent::Gen::PickableDistributorComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::PickableDistributorComponentGD Component::setPickableDistributorComponentGD() const
        {
            return Ent::Gen::PickableDistributorComponentGD(node->setUnionType("PickableDistributorComponentGD"));
        }
        inline std::optional<Ent::Gen::PlayerComponentGD> Component::PlayerComponentGD() const
        {
            return strcmp(node->getUnionType(), "PlayerComponentGD") != 0? std::optional<Ent::Gen::PlayerComponentGD>{}: std::optional<Ent::Gen::PlayerComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::PlayerComponentGD Component::setPlayerComponentGD() const
        {
            return Ent::Gen::PlayerComponentGD(node->setUnionType("PlayerComponentGD"));
        }
        inline std::optional<Ent::Gen::ProjectileGD> Component::ProjectileGD() const
        {
            return strcmp(node->getUnionType(), "ProjectileGD") != 0? std::optional<Ent::Gen::ProjectileGD>{}: std::optional<Ent::Gen::ProjectileGD>(node->getUnionData());
        }
        inline Ent::Gen::ProjectileGD Component::setProjectileGD() const
        {
            return Ent::Gen::ProjectileGD(node->setUnionType("ProjectileGD"));
        }
        inline std::optional<Ent::Gen::ProjectileShooterGD> Component::ProjectileShooterGD() const
        {
            return strcmp(node->getUnionType(), "ProjectileShooterGD") != 0? std::optional<Ent::Gen::ProjectileShooterGD>{}: std::optional<Ent::Gen::ProjectileShooterGD>(node->getUnionData());
        }
        inline Ent::Gen::ProjectileShooterGD Component::setProjectileShooterGD() const
        {
            return Ent::Gen::ProjectileShooterGD(node->setUnionType("ProjectileShooterGD"));
        }
        inline std::optional<Ent::Gen::ProtoComponentGD> Component::ProtoComponentGD() const
        {
            return strcmp(node->getUnionType(), "ProtoComponentGD") != 0? std::optional<Ent::Gen::ProtoComponentGD>{}: std::optional<Ent::Gen::ProtoComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::ProtoComponentGD Component::setProtoComponentGD() const
        {
            return Ent::Gen::ProtoComponentGD(node->setUnionType("ProtoComponentGD"));
        }
        inline std::optional<Ent::Gen::QuickCreatureSwitchGD> Component::QuickCreatureSwitchGD() const
        {
            return strcmp(node->getUnionType(), "QuickCreatureSwitchGD") != 0? std::optional<Ent::Gen::QuickCreatureSwitchGD>{}: std::optional<Ent::Gen::QuickCreatureSwitchGD>(node->getUnionData());
        }
        inline Ent::Gen::QuickCreatureSwitchGD Component::setQuickCreatureSwitchGD() const
        {
            return Ent::Gen::QuickCreatureSwitchGD(node->setUnionType("QuickCreatureSwitchGD"));
        }
        inline std::optional<Ent::Gen::RagdollGD> Component::RagdollGD() const
        {
            return strcmp(node->getUnionType(), "RagdollGD") != 0? std::optional<Ent::Gen::RagdollGD>{}: std::optional<Ent::Gen::RagdollGD>(node->getUnionData());
        }
        inline Ent::Gen::RagdollGD Component::setRagdollGD() const
        {
            return Ent::Gen::RagdollGD(node->setUnionType("RagdollGD"));
        }
        inline std::optional<Ent::Gen::RegenSwitcherGD> Component::RegenSwitcherGD() const
        {
            return strcmp(node->getUnionType(), "RegenSwitcherGD") != 0? std::optional<Ent::Gen::RegenSwitcherGD>{}: std::optional<Ent::Gen::RegenSwitcherGD>(node->getUnionData());
        }
        inline Ent::Gen::RegenSwitcherGD Component::setRegenSwitcherGD() const
        {
            return Ent::Gen::RegenSwitcherGD(node->setUnionType("RegenSwitcherGD"));
        }
        inline std::optional<Ent::Gen::RegenerableVegetationGD> Component::RegenerableVegetationGD() const
        {
            return strcmp(node->getUnionType(), "RegenerableVegetationGD") != 0? std::optional<Ent::Gen::RegenerableVegetationGD>{}: std::optional<Ent::Gen::RegenerableVegetationGD>(node->getUnionData());
        }
        inline Ent::Gen::RegenerableVegetationGD Component::setRegenerableVegetationGD() const
        {
            return Ent::Gen::RegenerableVegetationGD(node->setUnionType("RegenerableVegetationGD"));
        }
        inline std::optional<Ent::Gen::RespawnPlaceGD> Component::RespawnPlaceGD() const
        {
            return strcmp(node->getUnionType(), "RespawnPlaceGD") != 0? std::optional<Ent::Gen::RespawnPlaceGD>{}: std::optional<Ent::Gen::RespawnPlaceGD>(node->getUnionData());
        }
        inline Ent::Gen::RespawnPlaceGD Component::setRespawnPlaceGD() const
        {
            return Ent::Gen::RespawnPlaceGD(node->setUnionType("RespawnPlaceGD"));
        }
        inline std::optional<Ent::Gen::RespawnabilityGD> Component::RespawnabilityGD() const
        {
            return strcmp(node->getUnionType(), "RespawnabilityGD") != 0? std::optional<Ent::Gen::RespawnabilityGD>{}: std::optional<Ent::Gen::RespawnabilityGD>(node->getUnionData());
        }
        inline Ent::Gen::RespawnabilityGD Component::setRespawnabilityGD() const
        {
            return Ent::Gen::RespawnabilityGD(node->setUnionType("RespawnabilityGD"));
        }
        inline std::optional<Ent::Gen::ReviveEnergyGD> Component::ReviveEnergyGD() const
        {
            return strcmp(node->getUnionType(), "ReviveEnergyGD") != 0? std::optional<Ent::Gen::ReviveEnergyGD>{}: std::optional<Ent::Gen::ReviveEnergyGD>(node->getUnionData());
        }
        inline Ent::Gen::ReviveEnergyGD Component::setReviveEnergyGD() const
        {
            return Ent::Gen::ReviveEnergyGD(node->setUnionType("ReviveEnergyGD"));
        }
        inline std::optional<Ent::Gen::ScriptComponentGD> Component::ScriptComponentGD() const
        {
            return strcmp(node->getUnionType(), "ScriptComponentGD") != 0? std::optional<Ent::Gen::ScriptComponentGD>{}: std::optional<Ent::Gen::ScriptComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::ScriptComponentGD Component::setScriptComponentGD() const
        {
            return Ent::Gen::ScriptComponentGD(node->setUnionType("ScriptComponentGD"));
        }
        inline std::optional<Ent::Gen::SeedPatch> Component::SeedPatch() const
        {
            return strcmp(node->getUnionType(), "SeedPatch") != 0? std::optional<Ent::Gen::SeedPatch>{}: std::optional<Ent::Gen::SeedPatch>(node->getUnionData());
        }
        inline Ent::Gen::SeedPatch Component::setSeedPatch() const
        {
            return Ent::Gen::SeedPatch(node->setUnionType("SeedPatch"));
        }
        inline std::optional<Ent::Gen::SensorControllerGD> Component::SensorControllerGD() const
        {
            return strcmp(node->getUnionType(), "SensorControllerGD") != 0? std::optional<Ent::Gen::SensorControllerGD>{}: std::optional<Ent::Gen::SensorControllerGD>(node->getUnionData());
        }
        inline Ent::Gen::SensorControllerGD Component::setSensorControllerGD() const
        {
            return Ent::Gen::SensorControllerGD(node->setUnionType("SensorControllerGD"));
        }
        inline std::optional<Ent::Gen::SensorVoxelsGD> Component::SensorVoxelsGD() const
        {
            return strcmp(node->getUnionType(), "SensorVoxelsGD") != 0? std::optional<Ent::Gen::SensorVoxelsGD>{}: std::optional<Ent::Gen::SensorVoxelsGD>(node->getUnionData());
        }
        inline Ent::Gen::SensorVoxelsGD Component::setSensorVoxelsGD() const
        {
            return Ent::Gen::SensorVoxelsGD(node->setUnionType("SensorVoxelsGD"));
        }
        inline std::optional<Ent::Gen::ShamanItemGD> Component::ShamanItemGD() const
        {
            return strcmp(node->getUnionType(), "ShamanItemGD") != 0? std::optional<Ent::Gen::ShamanItemGD>{}: std::optional<Ent::Gen::ShamanItemGD>(node->getUnionData());
        }
        inline Ent::Gen::ShamanItemGD Component::setShamanItemGD() const
        {
            return Ent::Gen::ShamanItemGD(node->setUnionType("ShamanItemGD"));
        }
        inline std::optional<Ent::Gen::ShamanVisionGD> Component::ShamanVisionGD() const
        {
            return strcmp(node->getUnionType(), "ShamanVisionGD") != 0? std::optional<Ent::Gen::ShamanVisionGD>{}: std::optional<Ent::Gen::ShamanVisionGD>(node->getUnionData());
        }
        inline Ent::Gen::ShamanVisionGD Component::setShamanVisionGD() const
        {
            return Ent::Gen::ShamanVisionGD(node->setUnionType("ShamanVisionGD"));
        }
        inline std::optional<Ent::Gen::ShapeshiftStatueGD> Component::ShapeshiftStatueGD() const
        {
            return strcmp(node->getUnionType(), "ShapeshiftStatueGD") != 0? std::optional<Ent::Gen::ShapeshiftStatueGD>{}: std::optional<Ent::Gen::ShapeshiftStatueGD>(node->getUnionData());
        }
        inline Ent::Gen::ShapeshiftStatueGD Component::setShapeshiftStatueGD() const
        {
            return Ent::Gen::ShapeshiftStatueGD(node->setUnionType("ShapeshiftStatueGD"));
        }
        inline std::optional<Ent::Gen::SideMapGateGD> Component::SideMapGateGD() const
        {
            return strcmp(node->getUnionType(), "SideMapGateGD") != 0? std::optional<Ent::Gen::SideMapGateGD>{}: std::optional<Ent::Gen::SideMapGateGD>(node->getUnionData());
        }
        inline Ent::Gen::SideMapGateGD Component::setSideMapGateGD() const
        {
            return Ent::Gen::SideMapGateGD(node->setUnionType("SideMapGateGD"));
        }
        inline std::optional<Ent::Gen::SmoothScaleComponentGD> Component::SmoothScaleComponentGD() const
        {
            return strcmp(node->getUnionType(), "SmoothScaleComponentGD") != 0? std::optional<Ent::Gen::SmoothScaleComponentGD>{}: std::optional<Ent::Gen::SmoothScaleComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::SmoothScaleComponentGD Component::setSmoothScaleComponentGD() const
        {
            return Ent::Gen::SmoothScaleComponentGD(node->setUnionType("SmoothScaleComponentGD"));
        }
        inline std::optional<Ent::Gen::SoftCollisionGD> Component::SoftCollisionGD() const
        {
            return strcmp(node->getUnionType(), "SoftCollisionGD") != 0? std::optional<Ent::Gen::SoftCollisionGD>{}: std::optional<Ent::Gen::SoftCollisionGD>(node->getUnionData());
        }
        inline Ent::Gen::SoftCollisionGD Component::setSoftCollisionGD() const
        {
            return Ent::Gen::SoftCollisionGD(node->setUnionType("SoftCollisionGD"));
        }
        inline std::optional<Ent::Gen::SoulRespawnOpportunityGD> Component::SoulRespawnOpportunityGD() const
        {
            return strcmp(node->getUnionType(), "SoulRespawnOpportunityGD") != 0? std::optional<Ent::Gen::SoulRespawnOpportunityGD>{}: std::optional<Ent::Gen::SoulRespawnOpportunityGD>(node->getUnionData());
        }
        inline Ent::Gen::SoulRespawnOpportunityGD Component::setSoulRespawnOpportunityGD() const
        {
            return Ent::Gen::SoulRespawnOpportunityGD(node->setUnionType("SoulRespawnOpportunityGD"));
        }
        inline std::optional<Ent::Gen::SoundAreaGD> Component::SoundAreaGD() const
        {
            return strcmp(node->getUnionType(), "SoundAreaGD") != 0? std::optional<Ent::Gen::SoundAreaGD>{}: std::optional<Ent::Gen::SoundAreaGD>(node->getUnionData());
        }
        inline Ent::Gen::SoundAreaGD Component::setSoundAreaGD() const
        {
            return Ent::Gen::SoundAreaGD(node->setUnionType("SoundAreaGD"));
        }
        inline std::optional<Ent::Gen::SoundEmitterGD> Component::SoundEmitterGD() const
        {
            return strcmp(node->getUnionType(), "SoundEmitterGD") != 0? std::optional<Ent::Gen::SoundEmitterGD>{}: std::optional<Ent::Gen::SoundEmitterGD>(node->getUnionData());
        }
        inline Ent::Gen::SoundEmitterGD Component::setSoundEmitterGD() const
        {
            return Ent::Gen::SoundEmitterGD(node->setUnionType("SoundEmitterGD"));
        }
        inline std::optional<Ent::Gen::SoundOpportunityComponentGD> Component::SoundOpportunityComponentGD() const
        {
            return strcmp(node->getUnionType(), "SoundOpportunityComponentGD") != 0? std::optional<Ent::Gen::SoundOpportunityComponentGD>{}: std::optional<Ent::Gen::SoundOpportunityComponentGD>(node->getUnionData());
        }
        inline Ent::Gen::SoundOpportunityComponentGD Component::setSoundOpportunityComponentGD() const
        {
            return Ent::Gen::SoundOpportunityComponentGD(node->setUnionType("SoundOpportunityComponentGD"));
        }
        inline std::optional<Ent::Gen::SpiritAnimalGD> Component::SpiritAnimalGD() const
        {
            return strcmp(node->getUnionType(), "SpiritAnimalGD") != 0? std::optional<Ent::Gen::SpiritAnimalGD>{}: std::optional<Ent::Gen::SpiritAnimalGD>(node->getUnionData());
        }
        inline Ent::Gen::SpiritAnimalGD Component::setSpiritAnimalGD() const
        {
            return Ent::Gen::SpiritAnimalGD(node->setUnionType("SpiritAnimalGD"));
        }
        inline std::optional<Ent::Gen::SpiritAnimalShrineGD> Component::SpiritAnimalShrineGD() const
        {
            return strcmp(node->getUnionType(), "SpiritAnimalShrineGD") != 0? std::optional<Ent::Gen::SpiritAnimalShrineGD>{}: std::optional<Ent::Gen::SpiritAnimalShrineGD>(node->getUnionData());
        }
        inline Ent::Gen::SpiritAnimalShrineGD Component::setSpiritAnimalShrineGD() const
        {
            return Ent::Gen::SpiritAnimalShrineGD(node->setUnionType("SpiritAnimalShrineGD"));
        }
        inline std::optional<Ent::Gen::SpiritAnimalsHolderGD> Component::SpiritAnimalsHolderGD() const
        {
            return strcmp(node->getUnionType(), "SpiritAnimalsHolderGD") != 0? std::optional<Ent::Gen::SpiritAnimalsHolderGD>{}: std::optional<Ent::Gen::SpiritAnimalsHolderGD>(node->getUnionData());
        }
        inline Ent::Gen::SpiritAnimalsHolderGD Component::setSpiritAnimalsHolderGD() const
        {
            return Ent::Gen::SpiritAnimalsHolderGD(node->setUnionType("SpiritAnimalsHolderGD"));
        }
        inline std::optional<Ent::Gen::StaffVertebrasGD> Component::StaffVertebrasGD() const
        {
            return strcmp(node->getUnionType(), "StaffVertebrasGD") != 0? std::optional<Ent::Gen::StaffVertebrasGD>{}: std::optional<Ent::Gen::StaffVertebrasGD>(node->getUnionData());
        }
        inline Ent::Gen::StaffVertebrasGD Component::setStaffVertebrasGD() const
        {
            return Ent::Gen::StaffVertebrasGD(node->setUnionType("StaffVertebrasGD"));
        }
        inline std::optional<Ent::Gen::StaticObjectGD> Component::StaticObjectGD() const
        {
            return strcmp(node->getUnionType(), "StaticObjectGD") != 0? std::optional<Ent::Gen::StaticObjectGD>{}: std::optional<Ent::Gen::StaticObjectGD>(node->getUnionData());
        }
        inline Ent::Gen::StaticObjectGD Component::setStaticObjectGD() const
        {
            return Ent::Gen::StaticObjectGD(node->setUnionType("StaticObjectGD"));
        }
        inline std::optional<Ent::Gen::StickToTerrain> Component::StickToTerrain() const
        {
            return strcmp(node->getUnionType(), "StickToTerrain") != 0? std::optional<Ent::Gen::StickToTerrain>{}: std::optional<Ent::Gen::StickToTerrain>(node->getUnionData());
        }
        inline Ent::Gen::StickToTerrain Component::setStickToTerrain() const
        {
            return Ent::Gen::StickToTerrain(node->setUnionType("StickToTerrain"));
        }
        inline std::optional<Ent::Gen::StreamableUnitGD> Component::StreamableUnitGD() const
        {
            return strcmp(node->getUnionType(), "StreamableUnitGD") != 0? std::optional<Ent::Gen::StreamableUnitGD>{}: std::optional<Ent::Gen::StreamableUnitGD>(node->getUnionData());
        }
        inline Ent::Gen::StreamableUnitGD Component::setStreamableUnitGD() const
        {
            return Ent::Gen::StreamableUnitGD(node->setUnionType("StreamableUnitGD"));
        }
        inline std::optional<Ent::Gen::StreamingLocatorGD> Component::StreamingLocatorGD() const
        {
            return strcmp(node->getUnionType(), "StreamingLocatorGD") != 0? std::optional<Ent::Gen::StreamingLocatorGD>{}: std::optional<Ent::Gen::StreamingLocatorGD>(node->getUnionData());
        }
        inline Ent::Gen::StreamingLocatorGD Component::setStreamingLocatorGD() const
        {
            return Ent::Gen::StreamingLocatorGD(node->setUnionType("StreamingLocatorGD"));
        }
        inline std::optional<Ent::Gen::SubScene> Component::SubScene() const
        {
            return strcmp(node->getUnionType(), "SubScene") != 0? std::optional<Ent::Gen::SubScene>{}: std::optional<Ent::Gen::SubScene>(node->getUnionData());
        }
        inline Ent::Gen::SubScene Component::setSubScene() const
        {
            return Ent::Gen::SubScene(node->setUnionType("SubScene"));
        }
        inline std::optional<Ent::Gen::SystemicCreature> Component::SystemicCreature() const
        {
            return strcmp(node->getUnionType(), "SystemicCreature") != 0? std::optional<Ent::Gen::SystemicCreature>{}: std::optional<Ent::Gen::SystemicCreature>(node->getUnionData());
        }
        inline Ent::Gen::SystemicCreature Component::setSystemicCreature() const
        {
            return Ent::Gen::SystemicCreature(node->setUnionType("SystemicCreature"));
        }
        inline std::optional<Ent::Gen::TeamGD> Component::TeamGD() const
        {
            return strcmp(node->getUnionType(), "TeamGD") != 0? std::optional<Ent::Gen::TeamGD>{}: std::optional<Ent::Gen::TeamGD>(node->getUnionData());
        }
        inline Ent::Gen::TeamGD Component::setTeamGD() const
        {
            return Ent::Gen::TeamGD(node->setUnionType("TeamGD"));
        }
        inline std::optional<Ent::Gen::TerrainGD> Component::TerrainGD() const
        {
            return strcmp(node->getUnionType(), "TerrainGD") != 0? std::optional<Ent::Gen::TerrainGD>{}: std::optional<Ent::Gen::TerrainGD>(node->getUnionData());
        }
        inline Ent::Gen::TerrainGD Component::setTerrainGD() const
        {
            return Ent::Gen::TerrainGD(node->setUnionType("TerrainGD"));
        }
        inline std::optional<Ent::Gen::TerrainSurfaceObject> Component::TerrainSurfaceObject() const
        {
            return strcmp(node->getUnionType(), "TerrainSurfaceObject") != 0? std::optional<Ent::Gen::TerrainSurfaceObject>{}: std::optional<Ent::Gen::TerrainSurfaceObject>(node->getUnionData());
        }
        inline Ent::Gen::TerrainSurfaceObject Component::setTerrainSurfaceObject() const
        {
            return Ent::Gen::TerrainSurfaceObject(node->setUnionType("TerrainSurfaceObject"));
        }
        inline std::optional<Ent::Gen::TestArrays> Component::TestArrays() const
        {
            return strcmp(node->getUnionType(), "TestArrays") != 0? std::optional<Ent::Gen::TestArrays>{}: std::optional<Ent::Gen::TestArrays>(node->getUnionData());
        }
        inline Ent::Gen::TestArrays Component::setTestArrays() const
        {
            return Ent::Gen::TestArrays(node->setUnionType("TestArrays"));
        }
        inline std::optional<Ent::Gen::TestCreature> Component::TestCreature() const
        {
            return strcmp(node->getUnionType(), "TestCreature") != 0? std::optional<Ent::Gen::TestCreature>{}: std::optional<Ent::Gen::TestCreature>(node->getUnionData());
        }
        inline Ent::Gen::TestCreature Component::setTestCreature() const
        {
            return Ent::Gen::TestCreature(node->setUnionType("TestCreature"));
        }
        inline std::optional<Ent::Gen::TestDefaultValues> Component::TestDefaultValues() const
        {
            return strcmp(node->getUnionType(), "TestDefaultValues") != 0? std::optional<Ent::Gen::TestDefaultValues>{}: std::optional<Ent::Gen::TestDefaultValues>(node->getUnionData());
        }
        inline Ent::Gen::TestDefaultValues Component::setTestDefaultValues() const
        {
            return Ent::Gen::TestDefaultValues(node->setUnionType("TestDefaultValues"));
        }
        inline std::optional<Ent::Gen::TestEntityRef> Component::TestEntityRef() const
        {
            return strcmp(node->getUnionType(), "TestEntityRef") != 0? std::optional<Ent::Gen::TestEntityRef>{}: std::optional<Ent::Gen::TestEntityRef>(node->getUnionData());
        }
        inline Ent::Gen::TestEntityRef Component::setTestEntityRef() const
        {
            return Ent::Gen::TestEntityRef(node->setUnionType("TestEntityRef"));
        }
        inline std::optional<Ent::Gen::TestSetOfObject> Component::TestSetOfObject() const
        {
            return strcmp(node->getUnionType(), "TestSetOfObject") != 0? std::optional<Ent::Gen::TestSetOfObject>{}: std::optional<Ent::Gen::TestSetOfObject>(node->getUnionData());
        }
        inline Ent::Gen::TestSetOfObject Component::setTestSetOfObject() const
        {
            return Ent::Gen::TestSetOfObject(node->setUnionType("TestSetOfObject"));
        }
        inline std::optional<Ent::Gen::TestTagsList> Component::TestTagsList() const
        {
            return strcmp(node->getUnionType(), "TestTagsList") != 0? std::optional<Ent::Gen::TestTagsList>{}: std::optional<Ent::Gen::TestTagsList>(node->getUnionData());
        }
        inline Ent::Gen::TestTagsList Component::setTestTagsList() const
        {
            return Ent::Gen::TestTagsList(node->setUnionType("TestTagsList"));
        }
        inline std::optional<Ent::Gen::TestUnion> Component::TestUnion() const
        {
            return strcmp(node->getUnionType(), "TestUnion") != 0? std::optional<Ent::Gen::TestUnion>{}: std::optional<Ent::Gen::TestUnion>(node->getUnionData());
        }
        inline Ent::Gen::TestUnion Component::setTestUnion() const
        {
            return Ent::Gen::TestUnion(node->setUnionType("TestUnion"));
        }
        inline std::optional<Ent::Gen::TransformGD> Component::TransformGD() const
        {
            return strcmp(node->getUnionType(), "TransformGD") != 0? std::optional<Ent::Gen::TransformGD>{}: std::optional<Ent::Gen::TransformGD>(node->getUnionData());
        }
        inline Ent::Gen::TransformGD Component::setTransformGD() const
        {
            return Ent::Gen::TransformGD(node->setUnionType("TransformGD"));
        }
        inline std::optional<Ent::Gen::TriggerEventCameraGD> Component::TriggerEventCameraGD() const
        {
            return strcmp(node->getUnionType(), "TriggerEventCameraGD") != 0? std::optional<Ent::Gen::TriggerEventCameraGD>{}: std::optional<Ent::Gen::TriggerEventCameraGD>(node->getUnionData());
        }
        inline Ent::Gen::TriggerEventCameraGD Component::setTriggerEventCameraGD() const
        {
            return Ent::Gen::TriggerEventCameraGD(node->setUnionType("TriggerEventCameraGD"));
        }
        inline std::optional<Ent::Gen::UnifiedPhysicsDataGD> Component::UnifiedPhysicsDataGD() const
        {
            return strcmp(node->getUnionType(), "UnifiedPhysicsDataGD") != 0? std::optional<Ent::Gen::UnifiedPhysicsDataGD>{}: std::optional<Ent::Gen::UnifiedPhysicsDataGD>(node->getUnionData());
        }
        inline Ent::Gen::UnifiedPhysicsDataGD Component::setUnifiedPhysicsDataGD() const
        {
            return Ent::Gen::UnifiedPhysicsDataGD(node->setUnionType("UnifiedPhysicsDataGD"));
        }
        inline std::optional<Ent::Gen::UnitTestComponent> Component::UnitTestComponent() const
        {
            return strcmp(node->getUnionType(), "UnitTestComponent") != 0? std::optional<Ent::Gen::UnitTestComponent>{}: std::optional<Ent::Gen::UnitTestComponent>(node->getUnionData());
        }
        inline Ent::Gen::UnitTestComponent Component::setUnitTestComponent() const
        {
            return Ent::Gen::UnitTestComponent(node->setUnionType("UnitTestComponent"));
        }
        inline std::optional<Ent::Gen::VelocityObstacleGD> Component::VelocityObstacleGD() const
        {
            return strcmp(node->getUnionType(), "VelocityObstacleGD") != 0? std::optional<Ent::Gen::VelocityObstacleGD>{}: std::optional<Ent::Gen::VelocityObstacleGD>(node->getUnionData());
        }
        inline Ent::Gen::VelocityObstacleGD Component::setVelocityObstacleGD() const
        {
            return Ent::Gen::VelocityObstacleGD(node->setUnionType("VelocityObstacleGD"));
        }
        inline std::optional<Ent::Gen::VisualGD> Component::VisualGD() const
        {
            return strcmp(node->getUnionType(), "VisualGD") != 0? std::optional<Ent::Gen::VisualGD>{}: std::optional<Ent::Gen::VisualGD>(node->getUnionData());
        }
        inline Ent::Gen::VisualGD Component::setVisualGD() const
        {
            return Ent::Gen::VisualGD(node->setUnionType("VisualGD"));
        }
        inline std::optional<Ent::Gen::VolumeConstraintGD> Component::VolumeConstraintGD() const
        {
            return strcmp(node->getUnionType(), "VolumeConstraintGD") != 0? std::optional<Ent::Gen::VolumeConstraintGD>{}: std::optional<Ent::Gen::VolumeConstraintGD>(node->getUnionData());
        }
        inline Ent::Gen::VolumeConstraintGD Component::setVolumeConstraintGD() const
        {
            return Ent::Gen::VolumeConstraintGD(node->setUnionType("VolumeConstraintGD"));
        }
        inline std::optional<Ent::Gen::VoxelSimulationGD> Component::VoxelSimulationGD() const
        {
            return strcmp(node->getUnionType(), "VoxelSimulationGD") != 0? std::optional<Ent::Gen::VoxelSimulationGD>{}: std::optional<Ent::Gen::VoxelSimulationGD>(node->getUnionData());
        }
        inline Ent::Gen::VoxelSimulationGD Component::setVoxelSimulationGD() const
        {
            return Ent::Gen::VoxelSimulationGD(node->setUnionType("VoxelSimulationGD"));
        }
        inline std::optional<Ent::Gen::WallRunGD> Component::WallRunGD() const
        {
            return strcmp(node->getUnionType(), "WallRunGD") != 0? std::optional<Ent::Gen::WallRunGD>{}: std::optional<Ent::Gen::WallRunGD>(node->getUnionData());
        }
        inline Ent::Gen::WallRunGD Component::setWallRunGD() const
        {
            return Ent::Gen::WallRunGD(node->setUnionType("WallRunGD"));
        }
        inline std::optional<Ent::Gen::WildObject> Component::WildObject() const
        {
            return strcmp(node->getUnionType(), "WildObject") != 0? std::optional<Ent::Gen::WildObject>{}: std::optional<Ent::Gen::WildObject>(node->getUnionData());
        }
        inline Ent::Gen::WildObject Component::setWildObject() const
        {
            return Ent::Gen::WildObject(node->setUnionType("WildObject"));
        }
        // Object_Components
        inline char const* Object_Components::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::AIContextGD> Object_Components::AIContextGD() const
        {
            auto sub = getSubNode("AIContextGD");
            return sub == nullptr? std::optional<Ent::Gen::AIContextGD>{}: std::optional<Ent::Gen::AIContextGD>(getSubNode("AIContextGD"));
        }
        inline Ent::Gen::AIContextGD Object_Components::addAIContextGD() const
        {
            return Ent::Gen::AIContextGD(addSubNode("AIContextGD"));
        }
        inline void Object_Components::removeAIContextGD() const
        {
            node->mapErase("AIContextGD");
        }
        inline std::optional<Ent::Gen::ActorGD> Object_Components::ActorGD() const
        {
            auto sub = getSubNode("ActorGD");
            return sub == nullptr? std::optional<Ent::Gen::ActorGD>{}: std::optional<Ent::Gen::ActorGD>(getSubNode("ActorGD"));
        }
        inline Ent::Gen::ActorGD Object_Components::addActorGD() const
        {
            return Ent::Gen::ActorGD(addSubNode("ActorGD"));
        }
        inline void Object_Components::removeActorGD() const
        {
            node->mapErase("ActorGD");
        }
        inline std::optional<Ent::Gen::AnimationControllerGD> Object_Components::AnimationControllerGD() const
        {
            auto sub = getSubNode("AnimationControllerGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationControllerGD>{}: std::optional<Ent::Gen::AnimationControllerGD>(getSubNode("AnimationControllerGD"));
        }
        inline Ent::Gen::AnimationControllerGD Object_Components::addAnimationControllerGD() const
        {
            return Ent::Gen::AnimationControllerGD(addSubNode("AnimationControllerGD"));
        }
        inline void Object_Components::removeAnimationControllerGD() const
        {
            node->mapErase("AnimationControllerGD");
        }
        inline std::optional<Ent::Gen::AnimationEventsGeneratorGD> Object_Components::AnimationEventsGeneratorGD() const
        {
            auto sub = getSubNode("AnimationEventsGeneratorGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationEventsGeneratorGD>{}: std::optional<Ent::Gen::AnimationEventsGeneratorGD>(getSubNode("AnimationEventsGeneratorGD"));
        }
        inline Ent::Gen::AnimationEventsGeneratorGD Object_Components::addAnimationEventsGeneratorGD() const
        {
            return Ent::Gen::AnimationEventsGeneratorGD(addSubNode("AnimationEventsGeneratorGD"));
        }
        inline void Object_Components::removeAnimationEventsGeneratorGD() const
        {
            node->mapErase("AnimationEventsGeneratorGD");
        }
        inline std::optional<Ent::Gen::AnimationGenericConstraintsGD> Object_Components::AnimationGenericConstraintsGD() const
        {
            auto sub = getSubNode("AnimationGenericConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationGenericConstraintsGD>{}: std::optional<Ent::Gen::AnimationGenericConstraintsGD>(getSubNode("AnimationGenericConstraintsGD"));
        }
        inline Ent::Gen::AnimationGenericConstraintsGD Object_Components::addAnimationGenericConstraintsGD() const
        {
            return Ent::Gen::AnimationGenericConstraintsGD(addSubNode("AnimationGenericConstraintsGD"));
        }
        inline void Object_Components::removeAnimationGenericConstraintsGD() const
        {
            node->mapErase("AnimationGenericConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationHitsConstraintsGD> Object_Components::AnimationHitsConstraintsGD() const
        {
            auto sub = getSubNode("AnimationHitsConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationHitsConstraintsGD>{}: std::optional<Ent::Gen::AnimationHitsConstraintsGD>(getSubNode("AnimationHitsConstraintsGD"));
        }
        inline Ent::Gen::AnimationHitsConstraintsGD Object_Components::addAnimationHitsConstraintsGD() const
        {
            return Ent::Gen::AnimationHitsConstraintsGD(addSubNode("AnimationHitsConstraintsGD"));
        }
        inline void Object_Components::removeAnimationHitsConstraintsGD() const
        {
            node->mapErase("AnimationHitsConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationLegsConstraintsGD> Object_Components::AnimationLegsConstraintsGD() const
        {
            auto sub = getSubNode("AnimationLegsConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationLegsConstraintsGD>{}: std::optional<Ent::Gen::AnimationLegsConstraintsGD>(getSubNode("AnimationLegsConstraintsGD"));
        }
        inline Ent::Gen::AnimationLegsConstraintsGD Object_Components::addAnimationLegsConstraintsGD() const
        {
            return Ent::Gen::AnimationLegsConstraintsGD(addSubNode("AnimationLegsConstraintsGD"));
        }
        inline void Object_Components::removeAnimationLegsConstraintsGD() const
        {
            node->mapErase("AnimationLegsConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationModelGD> Object_Components::AnimationModelGD() const
        {
            auto sub = getSubNode("AnimationModelGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationModelGD>{}: std::optional<Ent::Gen::AnimationModelGD>(getSubNode("AnimationModelGD"));
        }
        inline Ent::Gen::AnimationModelGD Object_Components::addAnimationModelGD() const
        {
            return Ent::Gen::AnimationModelGD(addSubNode("AnimationModelGD"));
        }
        inline void Object_Components::removeAnimationModelGD() const
        {
            node->mapErase("AnimationModelGD");
        }
        inline std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD> Object_Components::AnimationPhysicsChainConstraintsGD() const
        {
            auto sub = getSubNode("AnimationPhysicsChainConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD>{}: std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD>(getSubNode("AnimationPhysicsChainConstraintsGD"));
        }
        inline Ent::Gen::AnimationPhysicsChainConstraintsGD Object_Components::addAnimationPhysicsChainConstraintsGD() const
        {
            return Ent::Gen::AnimationPhysicsChainConstraintsGD(addSubNode("AnimationPhysicsChainConstraintsGD"));
        }
        inline void Object_Components::removeAnimationPhysicsChainConstraintsGD() const
        {
            node->mapErase("AnimationPhysicsChainConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationPlaylistGD> Object_Components::AnimationPlaylistGD() const
        {
            auto sub = getSubNode("AnimationPlaylistGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationPlaylistGD>{}: std::optional<Ent::Gen::AnimationPlaylistGD>(getSubNode("AnimationPlaylistGD"));
        }
        inline Ent::Gen::AnimationPlaylistGD Object_Components::addAnimationPlaylistGD() const
        {
            return Ent::Gen::AnimationPlaylistGD(addSubNode("AnimationPlaylistGD"));
        }
        inline void Object_Components::removeAnimationPlaylistGD() const
        {
            node->mapErase("AnimationPlaylistGD");
        }
        inline std::optional<Ent::Gen::AnimationTailConstraintsGD> Object_Components::AnimationTailConstraintsGD() const
        {
            auto sub = getSubNode("AnimationTailConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationTailConstraintsGD>{}: std::optional<Ent::Gen::AnimationTailConstraintsGD>(getSubNode("AnimationTailConstraintsGD"));
        }
        inline Ent::Gen::AnimationTailConstraintsGD Object_Components::addAnimationTailConstraintsGD() const
        {
            return Ent::Gen::AnimationTailConstraintsGD(addSubNode("AnimationTailConstraintsGD"));
        }
        inline void Object_Components::removeAnimationTailConstraintsGD() const
        {
            node->mapErase("AnimationTailConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationTransformDriverGD> Object_Components::AnimationTransformDriverGD() const
        {
            auto sub = getSubNode("AnimationTransformDriverGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationTransformDriverGD>{}: std::optional<Ent::Gen::AnimationTransformDriverGD>(getSubNode("AnimationTransformDriverGD"));
        }
        inline Ent::Gen::AnimationTransformDriverGD Object_Components::addAnimationTransformDriverGD() const
        {
            return Ent::Gen::AnimationTransformDriverGD(addSubNode("AnimationTransformDriverGD"));
        }
        inline void Object_Components::removeAnimationTransformDriverGD() const
        {
            node->mapErase("AnimationTransformDriverGD");
        }
        inline std::optional<Ent::Gen::AnimationTreeConstraintsGD> Object_Components::AnimationTreeConstraintsGD() const
        {
            auto sub = getSubNode("AnimationTreeConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationTreeConstraintsGD>{}: std::optional<Ent::Gen::AnimationTreeConstraintsGD>(getSubNode("AnimationTreeConstraintsGD"));
        }
        inline Ent::Gen::AnimationTreeConstraintsGD Object_Components::addAnimationTreeConstraintsGD() const
        {
            return Ent::Gen::AnimationTreeConstraintsGD(addSubNode("AnimationTreeConstraintsGD"));
        }
        inline void Object_Components::removeAnimationTreeConstraintsGD() const
        {
            node->mapErase("AnimationTreeConstraintsGD");
        }
        inline std::optional<Ent::Gen::AssemblyGD> Object_Components::AssemblyGD() const
        {
            auto sub = getSubNode("AssemblyGD");
            return sub == nullptr? std::optional<Ent::Gen::AssemblyGD>{}: std::optional<Ent::Gen::AssemblyGD>(getSubNode("AssemblyGD"));
        }
        inline Ent::Gen::AssemblyGD Object_Components::addAssemblyGD() const
        {
            return Ent::Gen::AssemblyGD(addSubNode("AssemblyGD"));
        }
        inline void Object_Components::removeAssemblyGD() const
        {
            node->mapErase("AssemblyGD");
        }
        inline std::optional<Ent::Gen::AttackComponentGD> Object_Components::AttackComponentGD() const
        {
            auto sub = getSubNode("AttackComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::AttackComponentGD>{}: std::optional<Ent::Gen::AttackComponentGD>(getSubNode("AttackComponentGD"));
        }
        inline Ent::Gen::AttackComponentGD Object_Components::addAttackComponentGD() const
        {
            return Ent::Gen::AttackComponentGD(addSubNode("AttackComponentGD"));
        }
        inline void Object_Components::removeAttackComponentGD() const
        {
            node->mapErase("AttackComponentGD");
        }
        inline std::optional<Ent::Gen::AttackTriggerGD> Object_Components::AttackTriggerGD() const
        {
            auto sub = getSubNode("AttackTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::AttackTriggerGD>{}: std::optional<Ent::Gen::AttackTriggerGD>(getSubNode("AttackTriggerGD"));
        }
        inline Ent::Gen::AttackTriggerGD Object_Components::addAttackTriggerGD() const
        {
            return Ent::Gen::AttackTriggerGD(addSubNode("AttackTriggerGD"));
        }
        inline void Object_Components::removeAttackTriggerGD() const
        {
            node->mapErase("AttackTriggerGD");
        }
        inline std::optional<Ent::Gen::BeamTargetGD> Object_Components::BeamTargetGD() const
        {
            auto sub = getSubNode("BeamTargetGD");
            return sub == nullptr? std::optional<Ent::Gen::BeamTargetGD>{}: std::optional<Ent::Gen::BeamTargetGD>(getSubNode("BeamTargetGD"));
        }
        inline Ent::Gen::BeamTargetGD Object_Components::addBeamTargetGD() const
        {
            return Ent::Gen::BeamTargetGD(addSubNode("BeamTargetGD"));
        }
        inline void Object_Components::removeBeamTargetGD() const
        {
            node->mapErase("BeamTargetGD");
        }
        inline std::optional<Ent::Gen::BittenGD> Object_Components::BittenGD() const
        {
            auto sub = getSubNode("BittenGD");
            return sub == nullptr? std::optional<Ent::Gen::BittenGD>{}: std::optional<Ent::Gen::BittenGD>(getSubNode("BittenGD"));
        }
        inline Ent::Gen::BittenGD Object_Components::addBittenGD() const
        {
            return Ent::Gen::BittenGD(addSubNode("BittenGD"));
        }
        inline void Object_Components::removeBittenGD() const
        {
            node->mapErase("BittenGD");
        }
        inline std::optional<Ent::Gen::BoidsGD> Object_Components::BoidsGD() const
        {
            auto sub = getSubNode("BoidsGD");
            return sub == nullptr? std::optional<Ent::Gen::BoidsGD>{}: std::optional<Ent::Gen::BoidsGD>(getSubNode("BoidsGD"));
        }
        inline Ent::Gen::BoidsGD Object_Components::addBoidsGD() const
        {
            return Ent::Gen::BoidsGD(addSubNode("BoidsGD"));
        }
        inline void Object_Components::removeBoidsGD() const
        {
            node->mapErase("BoidsGD");
        }
        inline std::optional<Ent::Gen::BreakableGD> Object_Components::BreakableGD() const
        {
            auto sub = getSubNode("BreakableGD");
            return sub == nullptr? std::optional<Ent::Gen::BreakableGD>{}: std::optional<Ent::Gen::BreakableGD>(getSubNode("BreakableGD"));
        }
        inline Ent::Gen::BreakableGD Object_Components::addBreakableGD() const
        {
            return Ent::Gen::BreakableGD(addSubNode("BreakableGD"));
        }
        inline void Object_Components::removeBreakableGD() const
        {
            node->mapErase("BreakableGD");
        }
        inline std::optional<Ent::Gen::CameraDataGD> Object_Components::CameraDataGD() const
        {
            auto sub = getSubNode("CameraDataGD");
            return sub == nullptr? std::optional<Ent::Gen::CameraDataGD>{}: std::optional<Ent::Gen::CameraDataGD>(getSubNode("CameraDataGD"));
        }
        inline Ent::Gen::CameraDataGD Object_Components::addCameraDataGD() const
        {
            return Ent::Gen::CameraDataGD(addSubNode("CameraDataGD"));
        }
        inline void Object_Components::removeCameraDataGD() const
        {
            node->mapErase("CameraDataGD");
        }
        inline std::optional<Ent::Gen::CameraSetterGD> Object_Components::CameraSetterGD() const
        {
            auto sub = getSubNode("CameraSetterGD");
            return sub == nullptr? std::optional<Ent::Gen::CameraSetterGD>{}: std::optional<Ent::Gen::CameraSetterGD>(getSubNode("CameraSetterGD"));
        }
        inline Ent::Gen::CameraSetterGD Object_Components::addCameraSetterGD() const
        {
            return Ent::Gen::CameraSetterGD(addSubNode("CameraSetterGD"));
        }
        inline void Object_Components::removeCameraSetterGD() const
        {
            node->mapErase("CameraSetterGD");
        }
        inline std::optional<Ent::Gen::CharacterControllerGD> Object_Components::CharacterControllerGD() const
        {
            auto sub = getSubNode("CharacterControllerGD");
            return sub == nullptr? std::optional<Ent::Gen::CharacterControllerGD>{}: std::optional<Ent::Gen::CharacterControllerGD>(getSubNode("CharacterControllerGD"));
        }
        inline Ent::Gen::CharacterControllerGD Object_Components::addCharacterControllerGD() const
        {
            return Ent::Gen::CharacterControllerGD(addSubNode("CharacterControllerGD"));
        }
        inline void Object_Components::removeCharacterControllerGD() const
        {
            node->mapErase("CharacterControllerGD");
        }
        inline std::optional<Ent::Gen::CharacterPlatformGD> Object_Components::CharacterPlatformGD() const
        {
            auto sub = getSubNode("CharacterPlatformGD");
            return sub == nullptr? std::optional<Ent::Gen::CharacterPlatformGD>{}: std::optional<Ent::Gen::CharacterPlatformGD>(getSubNode("CharacterPlatformGD"));
        }
        inline Ent::Gen::CharacterPlatformGD Object_Components::addCharacterPlatformGD() const
        {
            return Ent::Gen::CharacterPlatformGD(addSubNode("CharacterPlatformGD"));
        }
        inline void Object_Components::removeCharacterPlatformGD() const
        {
            node->mapErase("CharacterPlatformGD");
        }
        inline std::optional<Ent::Gen::ChargedJumpGD> Object_Components::ChargedJumpGD() const
        {
            auto sub = getSubNode("ChargedJumpGD");
            return sub == nullptr? std::optional<Ent::Gen::ChargedJumpGD>{}: std::optional<Ent::Gen::ChargedJumpGD>(getSubNode("ChargedJumpGD"));
        }
        inline Ent::Gen::ChargedJumpGD Object_Components::addChargedJumpGD() const
        {
            return Ent::Gen::ChargedJumpGD(addSubNode("ChargedJumpGD"));
        }
        inline void Object_Components::removeChargedJumpGD() const
        {
            node->mapErase("ChargedJumpGD");
        }
        inline std::optional<Ent::Gen::ChildEntityPoolComponentGD> Object_Components::ChildEntityPoolComponentGD() const
        {
            auto sub = getSubNode("ChildEntityPoolComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::ChildEntityPoolComponentGD>{}: std::optional<Ent::Gen::ChildEntityPoolComponentGD>(getSubNode("ChildEntityPoolComponentGD"));
        }
        inline Ent::Gen::ChildEntityPoolComponentGD Object_Components::addChildEntityPoolComponentGD() const
        {
            return Ent::Gen::ChildEntityPoolComponentGD(addSubNode("ChildEntityPoolComponentGD"));
        }
        inline void Object_Components::removeChildEntityPoolComponentGD() const
        {
            node->mapErase("ChildEntityPoolComponentGD");
        }
        inline std::optional<Ent::Gen::CinematicGD> Object_Components::CinematicGD() const
        {
            auto sub = getSubNode("CinematicGD");
            return sub == nullptr? std::optional<Ent::Gen::CinematicGD>{}: std::optional<Ent::Gen::CinematicGD>(getSubNode("CinematicGD"));
        }
        inline Ent::Gen::CinematicGD Object_Components::addCinematicGD() const
        {
            return Ent::Gen::CinematicGD(addSubNode("CinematicGD"));
        }
        inline void Object_Components::removeCinematicGD() const
        {
            node->mapErase("CinematicGD");
        }
        inline std::optional<Ent::Gen::ClothAnimationGD> Object_Components::ClothAnimationGD() const
        {
            auto sub = getSubNode("ClothAnimationGD");
            return sub == nullptr? std::optional<Ent::Gen::ClothAnimationGD>{}: std::optional<Ent::Gen::ClothAnimationGD>(getSubNode("ClothAnimationGD"));
        }
        inline Ent::Gen::ClothAnimationGD Object_Components::addClothAnimationGD() const
        {
            return Ent::Gen::ClothAnimationGD(addSubNode("ClothAnimationGD"));
        }
        inline void Object_Components::removeClothAnimationGD() const
        {
            node->mapErase("ClothAnimationGD");
        }
        inline std::optional<Ent::Gen::ClothGD> Object_Components::ClothGD() const
        {
            auto sub = getSubNode("ClothGD");
            return sub == nullptr? std::optional<Ent::Gen::ClothGD>{}: std::optional<Ent::Gen::ClothGD>(getSubNode("ClothGD"));
        }
        inline Ent::Gen::ClothGD Object_Components::addClothGD() const
        {
            return Ent::Gen::ClothGD(addSubNode("ClothGD"));
        }
        inline void Object_Components::removeClothGD() const
        {
            node->mapErase("ClothGD");
        }
        inline std::optional<Ent::Gen::ComponentWithProtoCodeGD> Object_Components::ComponentWithProtoCodeGD() const
        {
            auto sub = getSubNode("ComponentWithProtoCodeGD");
            return sub == nullptr? std::optional<Ent::Gen::ComponentWithProtoCodeGD>{}: std::optional<Ent::Gen::ComponentWithProtoCodeGD>(getSubNode("ComponentWithProtoCodeGD"));
        }
        inline Ent::Gen::ComponentWithProtoCodeGD Object_Components::addComponentWithProtoCodeGD() const
        {
            return Ent::Gen::ComponentWithProtoCodeGD(addSubNode("ComponentWithProtoCodeGD"));
        }
        inline void Object_Components::removeComponentWithProtoCodeGD() const
        {
            node->mapErase("ComponentWithProtoCodeGD");
        }
        inline std::optional<Ent::Gen::ConnectorGD> Object_Components::ConnectorGD() const
        {
            auto sub = getSubNode("ConnectorGD");
            return sub == nullptr? std::optional<Ent::Gen::ConnectorGD>{}: std::optional<Ent::Gen::ConnectorGD>(getSubNode("ConnectorGD"));
        }
        inline Ent::Gen::ConnectorGD Object_Components::addConnectorGD() const
        {
            return Ent::Gen::ConnectorGD(addSubNode("ConnectorGD"));
        }
        inline void Object_Components::removeConnectorGD() const
        {
            node->mapErase("ConnectorGD");
        }
        inline std::optional<Ent::Gen::ConstrainedMoveGD> Object_Components::ConstrainedMoveGD() const
        {
            auto sub = getSubNode("ConstrainedMoveGD");
            return sub == nullptr? std::optional<Ent::Gen::ConstrainedMoveGD>{}: std::optional<Ent::Gen::ConstrainedMoveGD>(getSubNode("ConstrainedMoveGD"));
        }
        inline Ent::Gen::ConstrainedMoveGD Object_Components::addConstrainedMoveGD() const
        {
            return Ent::Gen::ConstrainedMoveGD(addSubNode("ConstrainedMoveGD"));
        }
        inline void Object_Components::removeConstrainedMoveGD() const
        {
            node->mapErase("ConstrainedMoveGD");
        }
        inline std::optional<Ent::Gen::CreatureAIGD> Object_Components::CreatureAIGD() const
        {
            auto sub = getSubNode("CreatureAIGD");
            return sub == nullptr? std::optional<Ent::Gen::CreatureAIGD>{}: std::optional<Ent::Gen::CreatureAIGD>(getSubNode("CreatureAIGD"));
        }
        inline Ent::Gen::CreatureAIGD Object_Components::addCreatureAIGD() const
        {
            return Ent::Gen::CreatureAIGD(addSubNode("CreatureAIGD"));
        }
        inline void Object_Components::removeCreatureAIGD() const
        {
            node->mapErase("CreatureAIGD");
        }
        inline std::optional<Ent::Gen::CreatureGD> Object_Components::CreatureGD() const
        {
            auto sub = getSubNode("CreatureGD");
            return sub == nullptr? std::optional<Ent::Gen::CreatureGD>{}: std::optional<Ent::Gen::CreatureGD>(getSubNode("CreatureGD"));
        }
        inline Ent::Gen::CreatureGD Object_Components::addCreatureGD() const
        {
            return Ent::Gen::CreatureGD(addSubNode("CreatureGD"));
        }
        inline void Object_Components::removeCreatureGD() const
        {
            node->mapErase("CreatureGD");
        }
        inline std::optional<Ent::Gen::CreatureUIGD> Object_Components::CreatureUIGD() const
        {
            auto sub = getSubNode("CreatureUIGD");
            return sub == nullptr? std::optional<Ent::Gen::CreatureUIGD>{}: std::optional<Ent::Gen::CreatureUIGD>(getSubNode("CreatureUIGD"));
        }
        inline Ent::Gen::CreatureUIGD Object_Components::addCreatureUIGD() const
        {
            return Ent::Gen::CreatureUIGD(addSubNode("CreatureUIGD"));
        }
        inline void Object_Components::removeCreatureUIGD() const
        {
            node->mapErase("CreatureUIGD");
        }
        inline std::optional<Ent::Gen::CustomThumbnail> Object_Components::CustomThumbnail() const
        {
            auto sub = getSubNode("CustomThumbnail");
            return sub == nullptr? std::optional<Ent::Gen::CustomThumbnail>{}: std::optional<Ent::Gen::CustomThumbnail>(getSubNode("CustomThumbnail"));
        }
        inline Ent::Gen::CustomThumbnail Object_Components::addCustomThumbnail() const
        {
            return Ent::Gen::CustomThumbnail(addSubNode("CustomThumbnail"));
        }
        inline void Object_Components::removeCustomThumbnail() const
        {
            node->mapErase("CustomThumbnail");
        }
        inline std::optional<Ent::Gen::DebugGridGD> Object_Components::DebugGridGD() const
        {
            auto sub = getSubNode("DebugGridGD");
            return sub == nullptr? std::optional<Ent::Gen::DebugGridGD>{}: std::optional<Ent::Gen::DebugGridGD>(getSubNode("DebugGridGD"));
        }
        inline Ent::Gen::DebugGridGD Object_Components::addDebugGridGD() const
        {
            return Ent::Gen::DebugGridGD(addSubNode("DebugGridGD"));
        }
        inline void Object_Components::removeDebugGridGD() const
        {
            node->mapErase("DebugGridGD");
        }
        inline std::optional<Ent::Gen::DistanceTriggerGD> Object_Components::DistanceTriggerGD() const
        {
            auto sub = getSubNode("DistanceTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::DistanceTriggerGD>{}: std::optional<Ent::Gen::DistanceTriggerGD>(getSubNode("DistanceTriggerGD"));
        }
        inline Ent::Gen::DistanceTriggerGD Object_Components::addDistanceTriggerGD() const
        {
            return Ent::Gen::DistanceTriggerGD(addSubNode("DistanceTriggerGD"));
        }
        inline void Object_Components::removeDistanceTriggerGD() const
        {
            node->mapErase("DistanceTriggerGD");
        }
        inline std::optional<Ent::Gen::DiveAttackGD> Object_Components::DiveAttackGD() const
        {
            auto sub = getSubNode("DiveAttackGD");
            return sub == nullptr? std::optional<Ent::Gen::DiveAttackGD>{}: std::optional<Ent::Gen::DiveAttackGD>(getSubNode("DiveAttackGD"));
        }
        inline Ent::Gen::DiveAttackGD Object_Components::addDiveAttackGD() const
        {
            return Ent::Gen::DiveAttackGD(addSubNode("DiveAttackGD"));
        }
        inline void Object_Components::removeDiveAttackGD() const
        {
            node->mapErase("DiveAttackGD");
        }
        inline std::optional<Ent::Gen::DummyComponentGD> Object_Components::DummyComponentGD() const
        {
            auto sub = getSubNode("DummyComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::DummyComponentGD>{}: std::optional<Ent::Gen::DummyComponentGD>(getSubNode("DummyComponentGD"));
        }
        inline Ent::Gen::DummyComponentGD Object_Components::addDummyComponentGD() const
        {
            return Ent::Gen::DummyComponentGD(addSubNode("DummyComponentGD"));
        }
        inline void Object_Components::removeDummyComponentGD() const
        {
            node->mapErase("DummyComponentGD");
        }
        inline std::optional<Ent::Gen::EnergyCrookGD> Object_Components::EnergyCrookGD() const
        {
            auto sub = getSubNode("EnergyCrookGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergyCrookGD>{}: std::optional<Ent::Gen::EnergyCrookGD>(getSubNode("EnergyCrookGD"));
        }
        inline Ent::Gen::EnergyCrookGD Object_Components::addEnergyCrookGD() const
        {
            return Ent::Gen::EnergyCrookGD(addSubNode("EnergyCrookGD"));
        }
        inline void Object_Components::removeEnergyCrookGD() const
        {
            node->mapErase("EnergyCrookGD");
        }
        inline std::optional<Ent::Gen::EnergyDrainGD> Object_Components::EnergyDrainGD() const
        {
            auto sub = getSubNode("EnergyDrainGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergyDrainGD>{}: std::optional<Ent::Gen::EnergyDrainGD>(getSubNode("EnergyDrainGD"));
        }
        inline Ent::Gen::EnergyDrainGD Object_Components::addEnergyDrainGD() const
        {
            return Ent::Gen::EnergyDrainGD(addSubNode("EnergyDrainGD"));
        }
        inline void Object_Components::removeEnergyDrainGD() const
        {
            node->mapErase("EnergyDrainGD");
        }
        inline std::optional<Ent::Gen::EnergyNetworkListenerGD> Object_Components::EnergyNetworkListenerGD() const
        {
            auto sub = getSubNode("EnergyNetworkListenerGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergyNetworkListenerGD>{}: std::optional<Ent::Gen::EnergyNetworkListenerGD>(getSubNode("EnergyNetworkListenerGD"));
        }
        inline Ent::Gen::EnergyNetworkListenerGD Object_Components::addEnergyNetworkListenerGD() const
        {
            return Ent::Gen::EnergyNetworkListenerGD(addSubNode("EnergyNetworkListenerGD"));
        }
        inline void Object_Components::removeEnergyNetworkListenerGD() const
        {
            node->mapErase("EnergyNetworkListenerGD");
        }
        inline std::optional<Ent::Gen::EnergyPoolGD> Object_Components::EnergyPoolGD() const
        {
            auto sub = getSubNode("EnergyPoolGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergyPoolGD>{}: std::optional<Ent::Gen::EnergyPoolGD>(getSubNode("EnergyPoolGD"));
        }
        inline Ent::Gen::EnergyPoolGD Object_Components::addEnergyPoolGD() const
        {
            return Ent::Gen::EnergyPoolGD(addSubNode("EnergyPoolGD"));
        }
        inline void Object_Components::removeEnergyPoolGD() const
        {
            node->mapErase("EnergyPoolGD");
        }
        inline std::optional<Ent::Gen::EnergySideSwitcherGD> Object_Components::EnergySideSwitcherGD() const
        {
            auto sub = getSubNode("EnergySideSwitcherGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergySideSwitcherGD>{}: std::optional<Ent::Gen::EnergySideSwitcherGD>(getSubNode("EnergySideSwitcherGD"));
        }
        inline Ent::Gen::EnergySideSwitcherGD Object_Components::addEnergySideSwitcherGD() const
        {
            return Ent::Gen::EnergySideSwitcherGD(addSubNode("EnergySideSwitcherGD"));
        }
        inline void Object_Components::removeEnergySideSwitcherGD() const
        {
            node->mapErase("EnergySideSwitcherGD");
        }
        inline std::optional<Ent::Gen::EnergySpoutGD> Object_Components::EnergySpoutGD() const
        {
            auto sub = getSubNode("EnergySpoutGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergySpoutGD>{}: std::optional<Ent::Gen::EnergySpoutGD>(getSubNode("EnergySpoutGD"));
        }
        inline Ent::Gen::EnergySpoutGD Object_Components::addEnergySpoutGD() const
        {
            return Ent::Gen::EnergySpoutGD(addSubNode("EnergySpoutGD"));
        }
        inline void Object_Components::removeEnergySpoutGD() const
        {
            node->mapErase("EnergySpoutGD");
        }
        inline std::optional<Ent::Gen::EnvStampGD> Object_Components::EnvStampGD() const
        {
            auto sub = getSubNode("EnvStampGD");
            return sub == nullptr? std::optional<Ent::Gen::EnvStampGD>{}: std::optional<Ent::Gen::EnvStampGD>(getSubNode("EnvStampGD"));
        }
        inline Ent::Gen::EnvStampGD Object_Components::addEnvStampGD() const
        {
            return Ent::Gen::EnvStampGD(addSubNode("EnvStampGD"));
        }
        inline void Object_Components::removeEnvStampGD() const
        {
            node->mapErase("EnvStampGD");
        }
        inline std::optional<Ent::Gen::EventHandlerGD> Object_Components::EventHandlerGD() const
        {
            auto sub = getSubNode("EventHandlerGD");
            return sub == nullptr? std::optional<Ent::Gen::EventHandlerGD>{}: std::optional<Ent::Gen::EventHandlerGD>(getSubNode("EventHandlerGD"));
        }
        inline Ent::Gen::EventHandlerGD Object_Components::addEventHandlerGD() const
        {
            return Ent::Gen::EventHandlerGD(addSubNode("EventHandlerGD"));
        }
        inline void Object_Components::removeEventHandlerGD() const
        {
            node->mapErase("EventHandlerGD");
        }
        inline std::optional<Ent::Gen::EventTriggerGD> Object_Components::EventTriggerGD() const
        {
            auto sub = getSubNode("EventTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::EventTriggerGD>{}: std::optional<Ent::Gen::EventTriggerGD>(getSubNode("EventTriggerGD"));
        }
        inline Ent::Gen::EventTriggerGD Object_Components::addEventTriggerGD() const
        {
            return Ent::Gen::EventTriggerGD(addSubNode("EventTriggerGD"));
        }
        inline void Object_Components::removeEventTriggerGD() const
        {
            node->mapErase("EventTriggerGD");
        }
        inline std::optional<Ent::Gen::FightDistanceTriggerGD> Object_Components::FightDistanceTriggerGD() const
        {
            auto sub = getSubNode("FightDistanceTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::FightDistanceTriggerGD>{}: std::optional<Ent::Gen::FightDistanceTriggerGD>(getSubNode("FightDistanceTriggerGD"));
        }
        inline Ent::Gen::FightDistanceTriggerGD Object_Components::addFightDistanceTriggerGD() const
        {
            return Ent::Gen::FightDistanceTriggerGD(addSubNode("FightDistanceTriggerGD"));
        }
        inline void Object_Components::removeFightDistanceTriggerGD() const
        {
            node->mapErase("FightDistanceTriggerGD");
        }
        inline std::optional<Ent::Gen::FireSensorGD> Object_Components::FireSensorGD() const
        {
            auto sub = getSubNode("FireSensorGD");
            return sub == nullptr? std::optional<Ent::Gen::FireSensorGD>{}: std::optional<Ent::Gen::FireSensorGD>(getSubNode("FireSensorGD"));
        }
        inline Ent::Gen::FireSensorGD Object_Components::addFireSensorGD() const
        {
            return Ent::Gen::FireSensorGD(addSubNode("FireSensorGD"));
        }
        inline void Object_Components::removeFireSensorGD() const
        {
            node->mapErase("FireSensorGD");
        }
        inline std::optional<Ent::Gen::FluidFXEntitySpawnerGD> Object_Components::FluidFXEntitySpawnerGD() const
        {
            auto sub = getSubNode("FluidFXEntitySpawnerGD");
            return sub == nullptr? std::optional<Ent::Gen::FluidFXEntitySpawnerGD>{}: std::optional<Ent::Gen::FluidFXEntitySpawnerGD>(getSubNode("FluidFXEntitySpawnerGD"));
        }
        inline Ent::Gen::FluidFXEntitySpawnerGD Object_Components::addFluidFXEntitySpawnerGD() const
        {
            return Ent::Gen::FluidFXEntitySpawnerGD(addSubNode("FluidFXEntitySpawnerGD"));
        }
        inline void Object_Components::removeFluidFXEntitySpawnerGD() const
        {
            node->mapErase("FluidFXEntitySpawnerGD");
        }
        inline std::optional<Ent::Gen::FluidGD> Object_Components::FluidGD() const
        {
            auto sub = getSubNode("FluidGD");
            return sub == nullptr? std::optional<Ent::Gen::FluidGD>{}: std::optional<Ent::Gen::FluidGD>(getSubNode("FluidGD"));
        }
        inline Ent::Gen::FluidGD Object_Components::addFluidGD() const
        {
            return Ent::Gen::FluidGD(addSubNode("FluidGD"));
        }
        inline void Object_Components::removeFluidGD() const
        {
            node->mapErase("FluidGD");
        }
        inline std::optional<Ent::Gen::FluidViewGD> Object_Components::FluidViewGD() const
        {
            auto sub = getSubNode("FluidViewGD");
            return sub == nullptr? std::optional<Ent::Gen::FluidViewGD>{}: std::optional<Ent::Gen::FluidViewGD>(getSubNode("FluidViewGD"));
        }
        inline Ent::Gen::FluidViewGD Object_Components::addFluidViewGD() const
        {
            return Ent::Gen::FluidViewGD(addSubNode("FluidViewGD"));
        }
        inline void Object_Components::removeFluidViewGD() const
        {
            node->mapErase("FluidViewGD");
        }
        inline std::optional<Ent::Gen::FluidVolumeComponentGD> Object_Components::FluidVolumeComponentGD() const
        {
            auto sub = getSubNode("FluidVolumeComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::FluidVolumeComponentGD>{}: std::optional<Ent::Gen::FluidVolumeComponentGD>(getSubNode("FluidVolumeComponentGD"));
        }
        inline Ent::Gen::FluidVolumeComponentGD Object_Components::addFluidVolumeComponentGD() const
        {
            return Ent::Gen::FluidVolumeComponentGD(addSubNode("FluidVolumeComponentGD"));
        }
        inline void Object_Components::removeFluidVolumeComponentGD() const
        {
            node->mapErase("FluidVolumeComponentGD");
        }
        inline std::optional<Ent::Gen::FurComponentGD> Object_Components::FurComponentGD() const
        {
            auto sub = getSubNode("FurComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::FurComponentGD>{}: std::optional<Ent::Gen::FurComponentGD>(getSubNode("FurComponentGD"));
        }
        inline Ent::Gen::FurComponentGD Object_Components::addFurComponentGD() const
        {
            return Ent::Gen::FurComponentGD(addSubNode("FurComponentGD"));
        }
        inline void Object_Components::removeFurComponentGD() const
        {
            node->mapErase("FurComponentGD");
        }
        inline std::optional<Ent::Gen::GameEffectSpawnerGD> Object_Components::GameEffectSpawnerGD() const
        {
            auto sub = getSubNode("GameEffectSpawnerGD");
            return sub == nullptr? std::optional<Ent::Gen::GameEffectSpawnerGD>{}: std::optional<Ent::Gen::GameEffectSpawnerGD>(getSubNode("GameEffectSpawnerGD"));
        }
        inline Ent::Gen::GameEffectSpawnerGD Object_Components::addGameEffectSpawnerGD() const
        {
            return Ent::Gen::GameEffectSpawnerGD(addSubNode("GameEffectSpawnerGD"));
        }
        inline void Object_Components::removeGameEffectSpawnerGD() const
        {
            node->mapErase("GameEffectSpawnerGD");
        }
        inline std::optional<Ent::Gen::GraspableGD> Object_Components::GraspableGD() const
        {
            auto sub = getSubNode("GraspableGD");
            return sub == nullptr? std::optional<Ent::Gen::GraspableGD>{}: std::optional<Ent::Gen::GraspableGD>(getSubNode("GraspableGD"));
        }
        inline Ent::Gen::GraspableGD Object_Components::addGraspableGD() const
        {
            return Ent::Gen::GraspableGD(addSubNode("GraspableGD"));
        }
        inline void Object_Components::removeGraspableGD() const
        {
            node->mapErase("GraspableGD");
        }
        inline std::optional<Ent::Gen::GrasperGD> Object_Components::GrasperGD() const
        {
            auto sub = getSubNode("GrasperGD");
            return sub == nullptr? std::optional<Ent::Gen::GrasperGD>{}: std::optional<Ent::Gen::GrasperGD>(getSubNode("GrasperGD"));
        }
        inline Ent::Gen::GrasperGD Object_Components::addGrasperGD() const
        {
            return Ent::Gen::GrasperGD(addSubNode("GrasperGD"));
        }
        inline void Object_Components::removeGrasperGD() const
        {
            node->mapErase("GrasperGD");
        }
        inline std::optional<Ent::Gen::GroundTypeSamplerGD> Object_Components::GroundTypeSamplerGD() const
        {
            auto sub = getSubNode("GroundTypeSamplerGD");
            return sub == nullptr? std::optional<Ent::Gen::GroundTypeSamplerGD>{}: std::optional<Ent::Gen::GroundTypeSamplerGD>(getSubNode("GroundTypeSamplerGD"));
        }
        inline Ent::Gen::GroundTypeSamplerGD Object_Components::addGroundTypeSamplerGD() const
        {
            return Ent::Gen::GroundTypeSamplerGD(addSubNode("GroundTypeSamplerGD"));
        }
        inline void Object_Components::removeGroundTypeSamplerGD() const
        {
            node->mapErase("GroundTypeSamplerGD");
        }
        inline std::optional<Ent::Gen::HealPumpGD> Object_Components::HealPumpGD() const
        {
            auto sub = getSubNode("HealPumpGD");
            return sub == nullptr? std::optional<Ent::Gen::HealPumpGD>{}: std::optional<Ent::Gen::HealPumpGD>(getSubNode("HealPumpGD"));
        }
        inline Ent::Gen::HealPumpGD Object_Components::addHealPumpGD() const
        {
            return Ent::Gen::HealPumpGD(addSubNode("HealPumpGD"));
        }
        inline void Object_Components::removeHealPumpGD() const
        {
            node->mapErase("HealPumpGD");
        }
        inline std::optional<Ent::Gen::HealTriggerGD> Object_Components::HealTriggerGD() const
        {
            auto sub = getSubNode("HealTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::HealTriggerGD>{}: std::optional<Ent::Gen::HealTriggerGD>(getSubNode("HealTriggerGD"));
        }
        inline Ent::Gen::HealTriggerGD Object_Components::addHealTriggerGD() const
        {
            return Ent::Gen::HealTriggerGD(addSubNode("HealTriggerGD"));
        }
        inline void Object_Components::removeHealTriggerGD() const
        {
            node->mapErase("HealTriggerGD");
        }
        inline std::optional<Ent::Gen::HealerGD> Object_Components::HealerGD() const
        {
            auto sub = getSubNode("HealerGD");
            return sub == nullptr? std::optional<Ent::Gen::HealerGD>{}: std::optional<Ent::Gen::HealerGD>(getSubNode("HealerGD"));
        }
        inline Ent::Gen::HealerGD Object_Components::addHealerGD() const
        {
            return Ent::Gen::HealerGD(addSubNode("HealerGD"));
        }
        inline void Object_Components::removeHealerGD() const
        {
            node->mapErase("HealerGD");
        }
        inline std::optional<Ent::Gen::HealthAreaGD> Object_Components::HealthAreaGD() const
        {
            auto sub = getSubNode("HealthAreaGD");
            return sub == nullptr? std::optional<Ent::Gen::HealthAreaGD>{}: std::optional<Ent::Gen::HealthAreaGD>(getSubNode("HealthAreaGD"));
        }
        inline Ent::Gen::HealthAreaGD Object_Components::addHealthAreaGD() const
        {
            return Ent::Gen::HealthAreaGD(addSubNode("HealthAreaGD"));
        }
        inline void Object_Components::removeHealthAreaGD() const
        {
            node->mapErase("HealthAreaGD");
        }
        inline std::optional<Ent::Gen::HeightMapComponentGD> Object_Components::HeightMapComponentGD() const
        {
            auto sub = getSubNode("HeightMapComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::HeightMapComponentGD>{}: std::optional<Ent::Gen::HeightMapComponentGD>(getSubNode("HeightMapComponentGD"));
        }
        inline Ent::Gen::HeightMapComponentGD Object_Components::addHeightMapComponentGD() const
        {
            return Ent::Gen::HeightMapComponentGD(addSubNode("HeightMapComponentGD"));
        }
        inline void Object_Components::removeHeightMapComponentGD() const
        {
            node->mapErase("HeightMapComponentGD");
        }
        inline std::optional<Ent::Gen::HeightObj> Object_Components::HeightObj() const
        {
            auto sub = getSubNode("HeightObj");
            return sub == nullptr? std::optional<Ent::Gen::HeightObj>{}: std::optional<Ent::Gen::HeightObj>(getSubNode("HeightObj"));
        }
        inline Ent::Gen::HeightObj Object_Components::addHeightObj() const
        {
            return Ent::Gen::HeightObj(addSubNode("HeightObj"));
        }
        inline void Object_Components::removeHeightObj() const
        {
            node->mapErase("HeightObj");
        }
        inline std::optional<Ent::Gen::HitTriggerGD> Object_Components::HitTriggerGD() const
        {
            auto sub = getSubNode("HitTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::HitTriggerGD>{}: std::optional<Ent::Gen::HitTriggerGD>(getSubNode("HitTriggerGD"));
        }
        inline Ent::Gen::HitTriggerGD Object_Components::addHitTriggerGD() const
        {
            return Ent::Gen::HitTriggerGD(addSubNode("HitTriggerGD"));
        }
        inline void Object_Components::removeHitTriggerGD() const
        {
            node->mapErase("HitTriggerGD");
        }
        inline std::optional<Ent::Gen::HotspotsGD> Object_Components::HotspotsGD() const
        {
            auto sub = getSubNode("HotspotsGD");
            return sub == nullptr? std::optional<Ent::Gen::HotspotsGD>{}: std::optional<Ent::Gen::HotspotsGD>(getSubNode("HotspotsGD"));
        }
        inline Ent::Gen::HotspotsGD Object_Components::addHotspotsGD() const
        {
            return Ent::Gen::HotspotsGD(addSubNode("HotspotsGD"));
        }
        inline void Object_Components::removeHotspotsGD() const
        {
            node->mapErase("HotspotsGD");
        }
        inline std::optional<Ent::Gen::IncapacitateComponentGD> Object_Components::IncapacitateComponentGD() const
        {
            auto sub = getSubNode("IncapacitateComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::IncapacitateComponentGD>{}: std::optional<Ent::Gen::IncapacitateComponentGD>(getSubNode("IncapacitateComponentGD"));
        }
        inline Ent::Gen::IncapacitateComponentGD Object_Components::addIncapacitateComponentGD() const
        {
            return Ent::Gen::IncapacitateComponentGD(addSubNode("IncapacitateComponentGD"));
        }
        inline void Object_Components::removeIncapacitateComponentGD() const
        {
            node->mapErase("IncapacitateComponentGD");
        }
        inline std::optional<Ent::Gen::InfoboardRegistererGD> Object_Components::InfoboardRegistererGD() const
        {
            auto sub = getSubNode("InfoboardRegistererGD");
            return sub == nullptr? std::optional<Ent::Gen::InfoboardRegistererGD>{}: std::optional<Ent::Gen::InfoboardRegistererGD>(getSubNode("InfoboardRegistererGD"));
        }
        inline Ent::Gen::InfoboardRegistererGD Object_Components::addInfoboardRegistererGD() const
        {
            return Ent::Gen::InfoboardRegistererGD(addSubNode("InfoboardRegistererGD"));
        }
        inline void Object_Components::removeInfoboardRegistererGD() const
        {
            node->mapErase("InfoboardRegistererGD");
        }
        inline std::optional<Ent::Gen::InteractableGPEGD> Object_Components::InteractableGPEGD() const
        {
            auto sub = getSubNode("InteractableGPEGD");
            return sub == nullptr? std::optional<Ent::Gen::InteractableGPEGD>{}: std::optional<Ent::Gen::InteractableGPEGD>(getSubNode("InteractableGPEGD"));
        }
        inline Ent::Gen::InteractableGPEGD Object_Components::addInteractableGPEGD() const
        {
            return Ent::Gen::InteractableGPEGD(addSubNode("InteractableGPEGD"));
        }
        inline void Object_Components::removeInteractableGPEGD() const
        {
            node->mapErase("InteractableGPEGD");
        }
        inline std::optional<Ent::Gen::InteractorGD> Object_Components::InteractorGD() const
        {
            auto sub = getSubNode("InteractorGD");
            return sub == nullptr? std::optional<Ent::Gen::InteractorGD>{}: std::optional<Ent::Gen::InteractorGD>(getSubNode("InteractorGD"));
        }
        inline Ent::Gen::InteractorGD Object_Components::addInteractorGD() const
        {
            return Ent::Gen::InteractorGD(addSubNode("InteractorGD"));
        }
        inline void Object_Components::removeInteractorGD() const
        {
            node->mapErase("InteractorGD");
        }
        inline std::optional<Ent::Gen::InterestPointGD> Object_Components::InterestPointGD() const
        {
            auto sub = getSubNode("InterestPointGD");
            return sub == nullptr? std::optional<Ent::Gen::InterestPointGD>{}: std::optional<Ent::Gen::InterestPointGD>(getSubNode("InterestPointGD"));
        }
        inline Ent::Gen::InterestPointGD Object_Components::addInterestPointGD() const
        {
            return Ent::Gen::InterestPointGD(addSubNode("InterestPointGD"));
        }
        inline void Object_Components::removeInterestPointGD() const
        {
            node->mapErase("InterestPointGD");
        }
        inline std::optional<Ent::Gen::InventoryGD> Object_Components::InventoryGD() const
        {
            auto sub = getSubNode("InventoryGD");
            return sub == nullptr? std::optional<Ent::Gen::InventoryGD>{}: std::optional<Ent::Gen::InventoryGD>(getSubNode("InventoryGD"));
        }
        inline Ent::Gen::InventoryGD Object_Components::addInventoryGD() const
        {
            return Ent::Gen::InventoryGD(addSubNode("InventoryGD"));
        }
        inline void Object_Components::removeInventoryGD() const
        {
            node->mapErase("InventoryGD");
        }
        inline std::optional<Ent::Gen::ItemHolderGD> Object_Components::ItemHolderGD() const
        {
            auto sub = getSubNode("ItemHolderGD");
            return sub == nullptr? std::optional<Ent::Gen::ItemHolderGD>{}: std::optional<Ent::Gen::ItemHolderGD>(getSubNode("ItemHolderGD"));
        }
        inline Ent::Gen::ItemHolderGD Object_Components::addItemHolderGD() const
        {
            return Ent::Gen::ItemHolderGD(addSubNode("ItemHolderGD"));
        }
        inline void Object_Components::removeItemHolderGD() const
        {
            node->mapErase("ItemHolderGD");
        }
        inline std::optional<Ent::Gen::LDPrimitive> Object_Components::LDPrimitive() const
        {
            auto sub = getSubNode("LDPrimitive");
            return sub == nullptr? std::optional<Ent::Gen::LDPrimitive>{}: std::optional<Ent::Gen::LDPrimitive>(getSubNode("LDPrimitive"));
        }
        inline Ent::Gen::LDPrimitive Object_Components::addLDPrimitive() const
        {
            return Ent::Gen::LDPrimitive(addSubNode("LDPrimitive"));
        }
        inline void Object_Components::removeLDPrimitive() const
        {
            node->mapErase("LDPrimitive");
        }
        inline std::optional<Ent::Gen::LifeComponentGD> Object_Components::LifeComponentGD() const
        {
            auto sub = getSubNode("LifeComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::LifeComponentGD>{}: std::optional<Ent::Gen::LifeComponentGD>(getSubNode("LifeComponentGD"));
        }
        inline Ent::Gen::LifeComponentGD Object_Components::addLifeComponentGD() const
        {
            return Ent::Gen::LifeComponentGD(addSubNode("LifeComponentGD"));
        }
        inline void Object_Components::removeLifeComponentGD() const
        {
            node->mapErase("LifeComponentGD");
        }
        inline std::optional<Ent::Gen::LightComponentGD> Object_Components::LightComponentGD() const
        {
            auto sub = getSubNode("LightComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::LightComponentGD>{}: std::optional<Ent::Gen::LightComponentGD>(getSubNode("LightComponentGD"));
        }
        inline Ent::Gen::LightComponentGD Object_Components::addLightComponentGD() const
        {
            return Ent::Gen::LightComponentGD(addSubNode("LightComponentGD"));
        }
        inline void Object_Components::removeLightComponentGD() const
        {
            node->mapErase("LightComponentGD");
        }
        inline std::optional<Ent::Gen::Mesh> Object_Components::Mesh() const
        {
            auto sub = getSubNode("Mesh");
            return sub == nullptr? std::optional<Ent::Gen::Mesh>{}: std::optional<Ent::Gen::Mesh>(getSubNode("Mesh"));
        }
        inline Ent::Gen::Mesh Object_Components::addMesh() const
        {
            return Ent::Gen::Mesh(addSubNode("Mesh"));
        }
        inline void Object_Components::removeMesh() const
        {
            node->mapErase("Mesh");
        }
        inline std::optional<Ent::Gen::MeshNavigationInfosGD> Object_Components::MeshNavigationInfosGD() const
        {
            auto sub = getSubNode("MeshNavigationInfosGD");
            return sub == nullptr? std::optional<Ent::Gen::MeshNavigationInfosGD>{}: std::optional<Ent::Gen::MeshNavigationInfosGD>(getSubNode("MeshNavigationInfosGD"));
        }
        inline Ent::Gen::MeshNavigationInfosGD Object_Components::addMeshNavigationInfosGD() const
        {
            return Ent::Gen::MeshNavigationInfosGD(addSubNode("MeshNavigationInfosGD"));
        }
        inline void Object_Components::removeMeshNavigationInfosGD() const
        {
            node->mapErase("MeshNavigationInfosGD");
        }
        inline std::optional<Ent::Gen::MissionHolderGD> Object_Components::MissionHolderGD() const
        {
            auto sub = getSubNode("MissionHolderGD");
            return sub == nullptr? std::optional<Ent::Gen::MissionHolderGD>{}: std::optional<Ent::Gen::MissionHolderGD>(getSubNode("MissionHolderGD"));
        }
        inline Ent::Gen::MissionHolderGD Object_Components::addMissionHolderGD() const
        {
            return Ent::Gen::MissionHolderGD(addSubNode("MissionHolderGD"));
        }
        inline void Object_Components::removeMissionHolderGD() const
        {
            node->mapErase("MissionHolderGD");
        }
        inline std::optional<Ent::Gen::MountIKControllerGD> Object_Components::MountIKControllerGD() const
        {
            auto sub = getSubNode("MountIKControllerGD");
            return sub == nullptr? std::optional<Ent::Gen::MountIKControllerGD>{}: std::optional<Ent::Gen::MountIKControllerGD>(getSubNode("MountIKControllerGD"));
        }
        inline Ent::Gen::MountIKControllerGD Object_Components::addMountIKControllerGD() const
        {
            return Ent::Gen::MountIKControllerGD(addSubNode("MountIKControllerGD"));
        }
        inline void Object_Components::removeMountIKControllerGD() const
        {
            node->mapErase("MountIKControllerGD");
        }
        inline std::optional<Ent::Gen::MountableGD> Object_Components::MountableGD() const
        {
            auto sub = getSubNode("MountableGD");
            return sub == nullptr? std::optional<Ent::Gen::MountableGD>{}: std::optional<Ent::Gen::MountableGD>(getSubNode("MountableGD"));
        }
        inline Ent::Gen::MountableGD Object_Components::addMountableGD() const
        {
            return Ent::Gen::MountableGD(addSubNode("MountableGD"));
        }
        inline void Object_Components::removeMountableGD() const
        {
            node->mapErase("MountableGD");
        }
        inline std::optional<Ent::Gen::MounterGD> Object_Components::MounterGD() const
        {
            auto sub = getSubNode("MounterGD");
            return sub == nullptr? std::optional<Ent::Gen::MounterGD>{}: std::optional<Ent::Gen::MounterGD>(getSubNode("MounterGD"));
        }
        inline Ent::Gen::MounterGD Object_Components::addMounterGD() const
        {
            return Ent::Gen::MounterGD(addSubNode("MounterGD"));
        }
        inline void Object_Components::removeMounterGD() const
        {
            node->mapErase("MounterGD");
        }
        inline std::optional<Ent::Gen::MultiThumbnail> Object_Components::MultiThumbnail() const
        {
            auto sub = getSubNode("MultiThumbnail");
            return sub == nullptr? std::optional<Ent::Gen::MultiThumbnail>{}: std::optional<Ent::Gen::MultiThumbnail>(getSubNode("MultiThumbnail"));
        }
        inline Ent::Gen::MultiThumbnail Object_Components::addMultiThumbnail() const
        {
            return Ent::Gen::MultiThumbnail(addSubNode("MultiThumbnail"));
        }
        inline void Object_Components::removeMultiThumbnail() const
        {
            node->mapErase("MultiThumbnail");
        }
        inline std::optional<Ent::Gen::NavMeshActivatorGD> Object_Components::NavMeshActivatorGD() const
        {
            auto sub = getSubNode("NavMeshActivatorGD");
            return sub == nullptr? std::optional<Ent::Gen::NavMeshActivatorGD>{}: std::optional<Ent::Gen::NavMeshActivatorGD>(getSubNode("NavMeshActivatorGD"));
        }
        inline Ent::Gen::NavMeshActivatorGD Object_Components::addNavMeshActivatorGD() const
        {
            return Ent::Gen::NavMeshActivatorGD(addSubNode("NavMeshActivatorGD"));
        }
        inline void Object_Components::removeNavMeshActivatorGD() const
        {
            node->mapErase("NavMeshActivatorGD");
        }
        inline std::optional<Ent::Gen::NavMeshStamperGD> Object_Components::NavMeshStamperGD() const
        {
            auto sub = getSubNode("NavMeshStamperGD");
            return sub == nullptr? std::optional<Ent::Gen::NavMeshStamperGD>{}: std::optional<Ent::Gen::NavMeshStamperGD>(getSubNode("NavMeshStamperGD"));
        }
        inline Ent::Gen::NavMeshStamperGD Object_Components::addNavMeshStamperGD() const
        {
            return Ent::Gen::NavMeshStamperGD(addSubNode("NavMeshStamperGD"));
        }
        inline void Object_Components::removeNavMeshStamperGD() const
        {
            node->mapErase("NavMeshStamperGD");
        }
        inline std::optional<Ent::Gen::NetGD> Object_Components::NetGD() const
        {
            auto sub = getSubNode("NetGD");
            return sub == nullptr? std::optional<Ent::Gen::NetGD>{}: std::optional<Ent::Gen::NetGD>(getSubNode("NetGD"));
        }
        inline Ent::Gen::NetGD Object_Components::addNetGD() const
        {
            return Ent::Gen::NetGD(addSubNode("NetGD"));
        }
        inline void Object_Components::removeNetGD() const
        {
            node->mapErase("NetGD");
        }
        inline std::optional<Ent::Gen::NetworkLink> Object_Components::NetworkLink() const
        {
            auto sub = getSubNode("NetworkLink");
            return sub == nullptr? std::optional<Ent::Gen::NetworkLink>{}: std::optional<Ent::Gen::NetworkLink>(getSubNode("NetworkLink"));
        }
        inline Ent::Gen::NetworkLink Object_Components::addNetworkLink() const
        {
            return Ent::Gen::NetworkLink(addSubNode("NetworkLink"));
        }
        inline void Object_Components::removeNetworkLink() const
        {
            node->mapErase("NetworkLink");
        }
        inline std::optional<Ent::Gen::NetworkNode> Object_Components::NetworkNode() const
        {
            auto sub = getSubNode("NetworkNode");
            return sub == nullptr? std::optional<Ent::Gen::NetworkNode>{}: std::optional<Ent::Gen::NetworkNode>(getSubNode("NetworkNode"));
        }
        inline Ent::Gen::NetworkNode Object_Components::addNetworkNode() const
        {
            return Ent::Gen::NetworkNode(addSubNode("NetworkNode"));
        }
        inline void Object_Components::removeNetworkNode() const
        {
            node->mapErase("NetworkNode");
        }
        inline std::optional<Ent::Gen::NotVisibleInSubscene> Object_Components::NotVisibleInSubscene() const
        {
            auto sub = getSubNode("NotVisibleInSubscene");
            return sub == nullptr? std::optional<Ent::Gen::NotVisibleInSubscene>{}: std::optional<Ent::Gen::NotVisibleInSubscene>(getSubNode("NotVisibleInSubscene"));
        }
        inline Ent::Gen::NotVisibleInSubscene Object_Components::addNotVisibleInSubscene() const
        {
            return Ent::Gen::NotVisibleInSubscene(addSubNode("NotVisibleInSubscene"));
        }
        inline void Object_Components::removeNotVisibleInSubscene() const
        {
            node->mapErase("NotVisibleInSubscene");
        }
        inline std::optional<Ent::Gen::OutfitGD> Object_Components::OutfitGD() const
        {
            auto sub = getSubNode("OutfitGD");
            return sub == nullptr? std::optional<Ent::Gen::OutfitGD>{}: std::optional<Ent::Gen::OutfitGD>(getSubNode("OutfitGD"));
        }
        inline Ent::Gen::OutfitGD Object_Components::addOutfitGD() const
        {
            return Ent::Gen::OutfitGD(addSubNode("OutfitGD"));
        }
        inline void Object_Components::removeOutfitGD() const
        {
            node->mapErase("OutfitGD");
        }
        inline std::optional<Ent::Gen::OutfitWearerGD> Object_Components::OutfitWearerGD() const
        {
            auto sub = getSubNode("OutfitWearerGD");
            return sub == nullptr? std::optional<Ent::Gen::OutfitWearerGD>{}: std::optional<Ent::Gen::OutfitWearerGD>(getSubNode("OutfitWearerGD"));
        }
        inline Ent::Gen::OutfitWearerGD Object_Components::addOutfitWearerGD() const
        {
            return Ent::Gen::OutfitWearerGD(addSubNode("OutfitWearerGD"));
        }
        inline void Object_Components::removeOutfitWearerGD() const
        {
            node->mapErase("OutfitWearerGD");
        }
        inline std::optional<Ent::Gen::PathFinderGD> Object_Components::PathFinderGD() const
        {
            auto sub = getSubNode("PathFinderGD");
            return sub == nullptr? std::optional<Ent::Gen::PathFinderGD>{}: std::optional<Ent::Gen::PathFinderGD>(getSubNode("PathFinderGD"));
        }
        inline Ent::Gen::PathFinderGD Object_Components::addPathFinderGD() const
        {
            return Ent::Gen::PathFinderGD(addSubNode("PathFinderGD"));
        }
        inline void Object_Components::removePathFinderGD() const
        {
            node->mapErase("PathFinderGD");
        }
        inline std::optional<Ent::Gen::PerceivableGD> Object_Components::PerceivableGD() const
        {
            auto sub = getSubNode("PerceivableGD");
            return sub == nullptr? std::optional<Ent::Gen::PerceivableGD>{}: std::optional<Ent::Gen::PerceivableGD>(getSubNode("PerceivableGD"));
        }
        inline Ent::Gen::PerceivableGD Object_Components::addPerceivableGD() const
        {
            return Ent::Gen::PerceivableGD(addSubNode("PerceivableGD"));
        }
        inline void Object_Components::removePerceivableGD() const
        {
            node->mapErase("PerceivableGD");
        }
        inline std::optional<Ent::Gen::PerceiverGD> Object_Components::PerceiverGD() const
        {
            auto sub = getSubNode("PerceiverGD");
            return sub == nullptr? std::optional<Ent::Gen::PerceiverGD>{}: std::optional<Ent::Gen::PerceiverGD>(getSubNode("PerceiverGD"));
        }
        inline Ent::Gen::PerceiverGD Object_Components::addPerceiverGD() const
        {
            return Ent::Gen::PerceiverGD(addSubNode("PerceiverGD"));
        }
        inline void Object_Components::removePerceiverGD() const
        {
            node->mapErase("PerceiverGD");
        }
        inline std::optional<Ent::Gen::PhysicsDataGD> Object_Components::PhysicsDataGD() const
        {
            auto sub = getSubNode("PhysicsDataGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsDataGD>{}: std::optional<Ent::Gen::PhysicsDataGD>(getSubNode("PhysicsDataGD"));
        }
        inline Ent::Gen::PhysicsDataGD Object_Components::addPhysicsDataGD() const
        {
            return Ent::Gen::PhysicsDataGD(addSubNode("PhysicsDataGD"));
        }
        inline void Object_Components::removePhysicsDataGD() const
        {
            node->mapErase("PhysicsDataGD");
        }
        inline std::optional<Ent::Gen::PhysicsGD> Object_Components::PhysicsGD() const
        {
            auto sub = getSubNode("PhysicsGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsGD>{}: std::optional<Ent::Gen::PhysicsGD>(getSubNode("PhysicsGD"));
        }
        inline Ent::Gen::PhysicsGD Object_Components::addPhysicsGD() const
        {
            return Ent::Gen::PhysicsGD(addSubNode("PhysicsGD"));
        }
        inline void Object_Components::removePhysicsGD() const
        {
            node->mapErase("PhysicsGD");
        }
        inline std::optional<Ent::Gen::PhysicsImpactMakerGD> Object_Components::PhysicsImpactMakerGD() const
        {
            auto sub = getSubNode("PhysicsImpactMakerGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsImpactMakerGD>{}: std::optional<Ent::Gen::PhysicsImpactMakerGD>(getSubNode("PhysicsImpactMakerGD"));
        }
        inline Ent::Gen::PhysicsImpactMakerGD Object_Components::addPhysicsImpactMakerGD() const
        {
            return Ent::Gen::PhysicsImpactMakerGD(addSubNode("PhysicsImpactMakerGD"));
        }
        inline void Object_Components::removePhysicsImpactMakerGD() const
        {
            node->mapErase("PhysicsImpactMakerGD");
        }
        inline std::optional<Ent::Gen::PhysicsMeshDeformerGD> Object_Components::PhysicsMeshDeformerGD() const
        {
            auto sub = getSubNode("PhysicsMeshDeformerGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsMeshDeformerGD>{}: std::optional<Ent::Gen::PhysicsMeshDeformerGD>(getSubNode("PhysicsMeshDeformerGD"));
        }
        inline Ent::Gen::PhysicsMeshDeformerGD Object_Components::addPhysicsMeshDeformerGD() const
        {
            return Ent::Gen::PhysicsMeshDeformerGD(addSubNode("PhysicsMeshDeformerGD"));
        }
        inline void Object_Components::removePhysicsMeshDeformerGD() const
        {
            node->mapErase("PhysicsMeshDeformerGD");
        }
        inline std::optional<Ent::Gen::PhysicsMeshProviderGD> Object_Components::PhysicsMeshProviderGD() const
        {
            auto sub = getSubNode("PhysicsMeshProviderGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsMeshProviderGD>{}: std::optional<Ent::Gen::PhysicsMeshProviderGD>(getSubNode("PhysicsMeshProviderGD"));
        }
        inline Ent::Gen::PhysicsMeshProviderGD Object_Components::addPhysicsMeshProviderGD() const
        {
            return Ent::Gen::PhysicsMeshProviderGD(addSubNode("PhysicsMeshProviderGD"));
        }
        inline void Object_Components::removePhysicsMeshProviderGD() const
        {
            node->mapErase("PhysicsMeshProviderGD");
        }
        inline std::optional<Ent::Gen::PhysicsTriggerGD> Object_Components::PhysicsTriggerGD() const
        {
            auto sub = getSubNode("PhysicsTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsTriggerGD>{}: std::optional<Ent::Gen::PhysicsTriggerGD>(getSubNode("PhysicsTriggerGD"));
        }
        inline Ent::Gen::PhysicsTriggerGD Object_Components::addPhysicsTriggerGD() const
        {
            return Ent::Gen::PhysicsTriggerGD(addSubNode("PhysicsTriggerGD"));
        }
        inline void Object_Components::removePhysicsTriggerGD() const
        {
            node->mapErase("PhysicsTriggerGD");
        }
        inline std::optional<Ent::Gen::PickableComponentGD> Object_Components::PickableComponentGD() const
        {
            auto sub = getSubNode("PickableComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::PickableComponentGD>{}: std::optional<Ent::Gen::PickableComponentGD>(getSubNode("PickableComponentGD"));
        }
        inline Ent::Gen::PickableComponentGD Object_Components::addPickableComponentGD() const
        {
            return Ent::Gen::PickableComponentGD(addSubNode("PickableComponentGD"));
        }
        inline void Object_Components::removePickableComponentGD() const
        {
            node->mapErase("PickableComponentGD");
        }
        inline std::optional<Ent::Gen::PickableDistributorComponentGD> Object_Components::PickableDistributorComponentGD() const
        {
            auto sub = getSubNode("PickableDistributorComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::PickableDistributorComponentGD>{}: std::optional<Ent::Gen::PickableDistributorComponentGD>(getSubNode("PickableDistributorComponentGD"));
        }
        inline Ent::Gen::PickableDistributorComponentGD Object_Components::addPickableDistributorComponentGD() const
        {
            return Ent::Gen::PickableDistributorComponentGD(addSubNode("PickableDistributorComponentGD"));
        }
        inline void Object_Components::removePickableDistributorComponentGD() const
        {
            node->mapErase("PickableDistributorComponentGD");
        }
        inline std::optional<Ent::Gen::PlayerComponentGD> Object_Components::PlayerComponentGD() const
        {
            auto sub = getSubNode("PlayerComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::PlayerComponentGD>{}: std::optional<Ent::Gen::PlayerComponentGD>(getSubNode("PlayerComponentGD"));
        }
        inline Ent::Gen::PlayerComponentGD Object_Components::addPlayerComponentGD() const
        {
            return Ent::Gen::PlayerComponentGD(addSubNode("PlayerComponentGD"));
        }
        inline void Object_Components::removePlayerComponentGD() const
        {
            node->mapErase("PlayerComponentGD");
        }
        inline std::optional<Ent::Gen::ProjectileGD> Object_Components::ProjectileGD() const
        {
            auto sub = getSubNode("ProjectileGD");
            return sub == nullptr? std::optional<Ent::Gen::ProjectileGD>{}: std::optional<Ent::Gen::ProjectileGD>(getSubNode("ProjectileGD"));
        }
        inline Ent::Gen::ProjectileGD Object_Components::addProjectileGD() const
        {
            return Ent::Gen::ProjectileGD(addSubNode("ProjectileGD"));
        }
        inline void Object_Components::removeProjectileGD() const
        {
            node->mapErase("ProjectileGD");
        }
        inline std::optional<Ent::Gen::ProjectileShooterGD> Object_Components::ProjectileShooterGD() const
        {
            auto sub = getSubNode("ProjectileShooterGD");
            return sub == nullptr? std::optional<Ent::Gen::ProjectileShooterGD>{}: std::optional<Ent::Gen::ProjectileShooterGD>(getSubNode("ProjectileShooterGD"));
        }
        inline Ent::Gen::ProjectileShooterGD Object_Components::addProjectileShooterGD() const
        {
            return Ent::Gen::ProjectileShooterGD(addSubNode("ProjectileShooterGD"));
        }
        inline void Object_Components::removeProjectileShooterGD() const
        {
            node->mapErase("ProjectileShooterGD");
        }
        inline std::optional<Ent::Gen::ProtoComponentGD> Object_Components::ProtoComponentGD() const
        {
            auto sub = getSubNode("ProtoComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::ProtoComponentGD>{}: std::optional<Ent::Gen::ProtoComponentGD>(getSubNode("ProtoComponentGD"));
        }
        inline Ent::Gen::ProtoComponentGD Object_Components::addProtoComponentGD() const
        {
            return Ent::Gen::ProtoComponentGD(addSubNode("ProtoComponentGD"));
        }
        inline void Object_Components::removeProtoComponentGD() const
        {
            node->mapErase("ProtoComponentGD");
        }
        inline std::optional<Ent::Gen::QuickCreatureSwitchGD> Object_Components::QuickCreatureSwitchGD() const
        {
            auto sub = getSubNode("QuickCreatureSwitchGD");
            return sub == nullptr? std::optional<Ent::Gen::QuickCreatureSwitchGD>{}: std::optional<Ent::Gen::QuickCreatureSwitchGD>(getSubNode("QuickCreatureSwitchGD"));
        }
        inline Ent::Gen::QuickCreatureSwitchGD Object_Components::addQuickCreatureSwitchGD() const
        {
            return Ent::Gen::QuickCreatureSwitchGD(addSubNode("QuickCreatureSwitchGD"));
        }
        inline void Object_Components::removeQuickCreatureSwitchGD() const
        {
            node->mapErase("QuickCreatureSwitchGD");
        }
        inline std::optional<Ent::Gen::RagdollGD> Object_Components::RagdollGD() const
        {
            auto sub = getSubNode("RagdollGD");
            return sub == nullptr? std::optional<Ent::Gen::RagdollGD>{}: std::optional<Ent::Gen::RagdollGD>(getSubNode("RagdollGD"));
        }
        inline Ent::Gen::RagdollGD Object_Components::addRagdollGD() const
        {
            return Ent::Gen::RagdollGD(addSubNode("RagdollGD"));
        }
        inline void Object_Components::removeRagdollGD() const
        {
            node->mapErase("RagdollGD");
        }
        inline std::optional<Ent::Gen::RegenSwitcherGD> Object_Components::RegenSwitcherGD() const
        {
            auto sub = getSubNode("RegenSwitcherGD");
            return sub == nullptr? std::optional<Ent::Gen::RegenSwitcherGD>{}: std::optional<Ent::Gen::RegenSwitcherGD>(getSubNode("RegenSwitcherGD"));
        }
        inline Ent::Gen::RegenSwitcherGD Object_Components::addRegenSwitcherGD() const
        {
            return Ent::Gen::RegenSwitcherGD(addSubNode("RegenSwitcherGD"));
        }
        inline void Object_Components::removeRegenSwitcherGD() const
        {
            node->mapErase("RegenSwitcherGD");
        }
        inline std::optional<Ent::Gen::RegenerableVegetationGD> Object_Components::RegenerableVegetationGD() const
        {
            auto sub = getSubNode("RegenerableVegetationGD");
            return sub == nullptr? std::optional<Ent::Gen::RegenerableVegetationGD>{}: std::optional<Ent::Gen::RegenerableVegetationGD>(getSubNode("RegenerableVegetationGD"));
        }
        inline Ent::Gen::RegenerableVegetationGD Object_Components::addRegenerableVegetationGD() const
        {
            return Ent::Gen::RegenerableVegetationGD(addSubNode("RegenerableVegetationGD"));
        }
        inline void Object_Components::removeRegenerableVegetationGD() const
        {
            node->mapErase("RegenerableVegetationGD");
        }
        inline std::optional<Ent::Gen::RespawnPlaceGD> Object_Components::RespawnPlaceGD() const
        {
            auto sub = getSubNode("RespawnPlaceGD");
            return sub == nullptr? std::optional<Ent::Gen::RespawnPlaceGD>{}: std::optional<Ent::Gen::RespawnPlaceGD>(getSubNode("RespawnPlaceGD"));
        }
        inline Ent::Gen::RespawnPlaceGD Object_Components::addRespawnPlaceGD() const
        {
            return Ent::Gen::RespawnPlaceGD(addSubNode("RespawnPlaceGD"));
        }
        inline void Object_Components::removeRespawnPlaceGD() const
        {
            node->mapErase("RespawnPlaceGD");
        }
        inline std::optional<Ent::Gen::RespawnabilityGD> Object_Components::RespawnabilityGD() const
        {
            auto sub = getSubNode("RespawnabilityGD");
            return sub == nullptr? std::optional<Ent::Gen::RespawnabilityGD>{}: std::optional<Ent::Gen::RespawnabilityGD>(getSubNode("RespawnabilityGD"));
        }
        inline Ent::Gen::RespawnabilityGD Object_Components::addRespawnabilityGD() const
        {
            return Ent::Gen::RespawnabilityGD(addSubNode("RespawnabilityGD"));
        }
        inline void Object_Components::removeRespawnabilityGD() const
        {
            node->mapErase("RespawnabilityGD");
        }
        inline std::optional<Ent::Gen::ReviveEnergyGD> Object_Components::ReviveEnergyGD() const
        {
            auto sub = getSubNode("ReviveEnergyGD");
            return sub == nullptr? std::optional<Ent::Gen::ReviveEnergyGD>{}: std::optional<Ent::Gen::ReviveEnergyGD>(getSubNode("ReviveEnergyGD"));
        }
        inline Ent::Gen::ReviveEnergyGD Object_Components::addReviveEnergyGD() const
        {
            return Ent::Gen::ReviveEnergyGD(addSubNode("ReviveEnergyGD"));
        }
        inline void Object_Components::removeReviveEnergyGD() const
        {
            node->mapErase("ReviveEnergyGD");
        }
        inline std::optional<Ent::Gen::ScriptComponentGD> Object_Components::ScriptComponentGD() const
        {
            auto sub = getSubNode("ScriptComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::ScriptComponentGD>{}: std::optional<Ent::Gen::ScriptComponentGD>(getSubNode("ScriptComponentGD"));
        }
        inline Ent::Gen::ScriptComponentGD Object_Components::addScriptComponentGD() const
        {
            return Ent::Gen::ScriptComponentGD(addSubNode("ScriptComponentGD"));
        }
        inline void Object_Components::removeScriptComponentGD() const
        {
            node->mapErase("ScriptComponentGD");
        }
        inline std::optional<Ent::Gen::SeedPatch> Object_Components::SeedPatch() const
        {
            auto sub = getSubNode("SeedPatch");
            return sub == nullptr? std::optional<Ent::Gen::SeedPatch>{}: std::optional<Ent::Gen::SeedPatch>(getSubNode("SeedPatch"));
        }
        inline Ent::Gen::SeedPatch Object_Components::addSeedPatch() const
        {
            return Ent::Gen::SeedPatch(addSubNode("SeedPatch"));
        }
        inline void Object_Components::removeSeedPatch() const
        {
            node->mapErase("SeedPatch");
        }
        inline std::optional<Ent::Gen::SensorControllerGD> Object_Components::SensorControllerGD() const
        {
            auto sub = getSubNode("SensorControllerGD");
            return sub == nullptr? std::optional<Ent::Gen::SensorControllerGD>{}: std::optional<Ent::Gen::SensorControllerGD>(getSubNode("SensorControllerGD"));
        }
        inline Ent::Gen::SensorControllerGD Object_Components::addSensorControllerGD() const
        {
            return Ent::Gen::SensorControllerGD(addSubNode("SensorControllerGD"));
        }
        inline void Object_Components::removeSensorControllerGD() const
        {
            node->mapErase("SensorControllerGD");
        }
        inline std::optional<Ent::Gen::SensorVoxelsGD> Object_Components::SensorVoxelsGD() const
        {
            auto sub = getSubNode("SensorVoxelsGD");
            return sub == nullptr? std::optional<Ent::Gen::SensorVoxelsGD>{}: std::optional<Ent::Gen::SensorVoxelsGD>(getSubNode("SensorVoxelsGD"));
        }
        inline Ent::Gen::SensorVoxelsGD Object_Components::addSensorVoxelsGD() const
        {
            return Ent::Gen::SensorVoxelsGD(addSubNode("SensorVoxelsGD"));
        }
        inline void Object_Components::removeSensorVoxelsGD() const
        {
            node->mapErase("SensorVoxelsGD");
        }
        inline std::optional<Ent::Gen::ShamanItemGD> Object_Components::ShamanItemGD() const
        {
            auto sub = getSubNode("ShamanItemGD");
            return sub == nullptr? std::optional<Ent::Gen::ShamanItemGD>{}: std::optional<Ent::Gen::ShamanItemGD>(getSubNode("ShamanItemGD"));
        }
        inline Ent::Gen::ShamanItemGD Object_Components::addShamanItemGD() const
        {
            return Ent::Gen::ShamanItemGD(addSubNode("ShamanItemGD"));
        }
        inline void Object_Components::removeShamanItemGD() const
        {
            node->mapErase("ShamanItemGD");
        }
        inline std::optional<Ent::Gen::ShamanVisionGD> Object_Components::ShamanVisionGD() const
        {
            auto sub = getSubNode("ShamanVisionGD");
            return sub == nullptr? std::optional<Ent::Gen::ShamanVisionGD>{}: std::optional<Ent::Gen::ShamanVisionGD>(getSubNode("ShamanVisionGD"));
        }
        inline Ent::Gen::ShamanVisionGD Object_Components::addShamanVisionGD() const
        {
            return Ent::Gen::ShamanVisionGD(addSubNode("ShamanVisionGD"));
        }
        inline void Object_Components::removeShamanVisionGD() const
        {
            node->mapErase("ShamanVisionGD");
        }
        inline std::optional<Ent::Gen::ShapeshiftStatueGD> Object_Components::ShapeshiftStatueGD() const
        {
            auto sub = getSubNode("ShapeshiftStatueGD");
            return sub == nullptr? std::optional<Ent::Gen::ShapeshiftStatueGD>{}: std::optional<Ent::Gen::ShapeshiftStatueGD>(getSubNode("ShapeshiftStatueGD"));
        }
        inline Ent::Gen::ShapeshiftStatueGD Object_Components::addShapeshiftStatueGD() const
        {
            return Ent::Gen::ShapeshiftStatueGD(addSubNode("ShapeshiftStatueGD"));
        }
        inline void Object_Components::removeShapeshiftStatueGD() const
        {
            node->mapErase("ShapeshiftStatueGD");
        }
        inline std::optional<Ent::Gen::SideMapGateGD> Object_Components::SideMapGateGD() const
        {
            auto sub = getSubNode("SideMapGateGD");
            return sub == nullptr? std::optional<Ent::Gen::SideMapGateGD>{}: std::optional<Ent::Gen::SideMapGateGD>(getSubNode("SideMapGateGD"));
        }
        inline Ent::Gen::SideMapGateGD Object_Components::addSideMapGateGD() const
        {
            return Ent::Gen::SideMapGateGD(addSubNode("SideMapGateGD"));
        }
        inline void Object_Components::removeSideMapGateGD() const
        {
            node->mapErase("SideMapGateGD");
        }
        inline std::optional<Ent::Gen::SmoothScaleComponentGD> Object_Components::SmoothScaleComponentGD() const
        {
            auto sub = getSubNode("SmoothScaleComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::SmoothScaleComponentGD>{}: std::optional<Ent::Gen::SmoothScaleComponentGD>(getSubNode("SmoothScaleComponentGD"));
        }
        inline Ent::Gen::SmoothScaleComponentGD Object_Components::addSmoothScaleComponentGD() const
        {
            return Ent::Gen::SmoothScaleComponentGD(addSubNode("SmoothScaleComponentGD"));
        }
        inline void Object_Components::removeSmoothScaleComponentGD() const
        {
            node->mapErase("SmoothScaleComponentGD");
        }
        inline std::optional<Ent::Gen::SoftCollisionGD> Object_Components::SoftCollisionGD() const
        {
            auto sub = getSubNode("SoftCollisionGD");
            return sub == nullptr? std::optional<Ent::Gen::SoftCollisionGD>{}: std::optional<Ent::Gen::SoftCollisionGD>(getSubNode("SoftCollisionGD"));
        }
        inline Ent::Gen::SoftCollisionGD Object_Components::addSoftCollisionGD() const
        {
            return Ent::Gen::SoftCollisionGD(addSubNode("SoftCollisionGD"));
        }
        inline void Object_Components::removeSoftCollisionGD() const
        {
            node->mapErase("SoftCollisionGD");
        }
        inline std::optional<Ent::Gen::SoulRespawnOpportunityGD> Object_Components::SoulRespawnOpportunityGD() const
        {
            auto sub = getSubNode("SoulRespawnOpportunityGD");
            return sub == nullptr? std::optional<Ent::Gen::SoulRespawnOpportunityGD>{}: std::optional<Ent::Gen::SoulRespawnOpportunityGD>(getSubNode("SoulRespawnOpportunityGD"));
        }
        inline Ent::Gen::SoulRespawnOpportunityGD Object_Components::addSoulRespawnOpportunityGD() const
        {
            return Ent::Gen::SoulRespawnOpportunityGD(addSubNode("SoulRespawnOpportunityGD"));
        }
        inline void Object_Components::removeSoulRespawnOpportunityGD() const
        {
            node->mapErase("SoulRespawnOpportunityGD");
        }
        inline std::optional<Ent::Gen::SoundAreaGD> Object_Components::SoundAreaGD() const
        {
            auto sub = getSubNode("SoundAreaGD");
            return sub == nullptr? std::optional<Ent::Gen::SoundAreaGD>{}: std::optional<Ent::Gen::SoundAreaGD>(getSubNode("SoundAreaGD"));
        }
        inline Ent::Gen::SoundAreaGD Object_Components::addSoundAreaGD() const
        {
            return Ent::Gen::SoundAreaGD(addSubNode("SoundAreaGD"));
        }
        inline void Object_Components::removeSoundAreaGD() const
        {
            node->mapErase("SoundAreaGD");
        }
        inline std::optional<Ent::Gen::SoundEmitterGD> Object_Components::SoundEmitterGD() const
        {
            auto sub = getSubNode("SoundEmitterGD");
            return sub == nullptr? std::optional<Ent::Gen::SoundEmitterGD>{}: std::optional<Ent::Gen::SoundEmitterGD>(getSubNode("SoundEmitterGD"));
        }
        inline Ent::Gen::SoundEmitterGD Object_Components::addSoundEmitterGD() const
        {
            return Ent::Gen::SoundEmitterGD(addSubNode("SoundEmitterGD"));
        }
        inline void Object_Components::removeSoundEmitterGD() const
        {
            node->mapErase("SoundEmitterGD");
        }
        inline std::optional<Ent::Gen::SoundOpportunityComponentGD> Object_Components::SoundOpportunityComponentGD() const
        {
            auto sub = getSubNode("SoundOpportunityComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::SoundOpportunityComponentGD>{}: std::optional<Ent::Gen::SoundOpportunityComponentGD>(getSubNode("SoundOpportunityComponentGD"));
        }
        inline Ent::Gen::SoundOpportunityComponentGD Object_Components::addSoundOpportunityComponentGD() const
        {
            return Ent::Gen::SoundOpportunityComponentGD(addSubNode("SoundOpportunityComponentGD"));
        }
        inline void Object_Components::removeSoundOpportunityComponentGD() const
        {
            node->mapErase("SoundOpportunityComponentGD");
        }
        inline std::optional<Ent::Gen::SpiritAnimalGD> Object_Components::SpiritAnimalGD() const
        {
            auto sub = getSubNode("SpiritAnimalGD");
            return sub == nullptr? std::optional<Ent::Gen::SpiritAnimalGD>{}: std::optional<Ent::Gen::SpiritAnimalGD>(getSubNode("SpiritAnimalGD"));
        }
        inline Ent::Gen::SpiritAnimalGD Object_Components::addSpiritAnimalGD() const
        {
            return Ent::Gen::SpiritAnimalGD(addSubNode("SpiritAnimalGD"));
        }
        inline void Object_Components::removeSpiritAnimalGD() const
        {
            node->mapErase("SpiritAnimalGD");
        }
        inline std::optional<Ent::Gen::SpiritAnimalShrineGD> Object_Components::SpiritAnimalShrineGD() const
        {
            auto sub = getSubNode("SpiritAnimalShrineGD");
            return sub == nullptr? std::optional<Ent::Gen::SpiritAnimalShrineGD>{}: std::optional<Ent::Gen::SpiritAnimalShrineGD>(getSubNode("SpiritAnimalShrineGD"));
        }
        inline Ent::Gen::SpiritAnimalShrineGD Object_Components::addSpiritAnimalShrineGD() const
        {
            return Ent::Gen::SpiritAnimalShrineGD(addSubNode("SpiritAnimalShrineGD"));
        }
        inline void Object_Components::removeSpiritAnimalShrineGD() const
        {
            node->mapErase("SpiritAnimalShrineGD");
        }
        inline std::optional<Ent::Gen::SpiritAnimalsHolderGD> Object_Components::SpiritAnimalsHolderGD() const
        {
            auto sub = getSubNode("SpiritAnimalsHolderGD");
            return sub == nullptr? std::optional<Ent::Gen::SpiritAnimalsHolderGD>{}: std::optional<Ent::Gen::SpiritAnimalsHolderGD>(getSubNode("SpiritAnimalsHolderGD"));
        }
        inline Ent::Gen::SpiritAnimalsHolderGD Object_Components::addSpiritAnimalsHolderGD() const
        {
            return Ent::Gen::SpiritAnimalsHolderGD(addSubNode("SpiritAnimalsHolderGD"));
        }
        inline void Object_Components::removeSpiritAnimalsHolderGD() const
        {
            node->mapErase("SpiritAnimalsHolderGD");
        }
        inline std::optional<Ent::Gen::StaffVertebrasGD> Object_Components::StaffVertebrasGD() const
        {
            auto sub = getSubNode("StaffVertebrasGD");
            return sub == nullptr? std::optional<Ent::Gen::StaffVertebrasGD>{}: std::optional<Ent::Gen::StaffVertebrasGD>(getSubNode("StaffVertebrasGD"));
        }
        inline Ent::Gen::StaffVertebrasGD Object_Components::addStaffVertebrasGD() const
        {
            return Ent::Gen::StaffVertebrasGD(addSubNode("StaffVertebrasGD"));
        }
        inline void Object_Components::removeStaffVertebrasGD() const
        {
            node->mapErase("StaffVertebrasGD");
        }
        inline std::optional<Ent::Gen::StaticObjectGD> Object_Components::StaticObjectGD() const
        {
            auto sub = getSubNode("StaticObjectGD");
            return sub == nullptr? std::optional<Ent::Gen::StaticObjectGD>{}: std::optional<Ent::Gen::StaticObjectGD>(getSubNode("StaticObjectGD"));
        }
        inline Ent::Gen::StaticObjectGD Object_Components::addStaticObjectGD() const
        {
            return Ent::Gen::StaticObjectGD(addSubNode("StaticObjectGD"));
        }
        inline void Object_Components::removeStaticObjectGD() const
        {
            node->mapErase("StaticObjectGD");
        }
        inline std::optional<Ent::Gen::StickToTerrain> Object_Components::StickToTerrain() const
        {
            auto sub = getSubNode("StickToTerrain");
            return sub == nullptr? std::optional<Ent::Gen::StickToTerrain>{}: std::optional<Ent::Gen::StickToTerrain>(getSubNode("StickToTerrain"));
        }
        inline Ent::Gen::StickToTerrain Object_Components::addStickToTerrain() const
        {
            return Ent::Gen::StickToTerrain(addSubNode("StickToTerrain"));
        }
        inline void Object_Components::removeStickToTerrain() const
        {
            node->mapErase("StickToTerrain");
        }
        inline std::optional<Ent::Gen::StreamableUnitGD> Object_Components::StreamableUnitGD() const
        {
            auto sub = getSubNode("StreamableUnitGD");
            return sub == nullptr? std::optional<Ent::Gen::StreamableUnitGD>{}: std::optional<Ent::Gen::StreamableUnitGD>(getSubNode("StreamableUnitGD"));
        }
        inline Ent::Gen::StreamableUnitGD Object_Components::addStreamableUnitGD() const
        {
            return Ent::Gen::StreamableUnitGD(addSubNode("StreamableUnitGD"));
        }
        inline void Object_Components::removeStreamableUnitGD() const
        {
            node->mapErase("StreamableUnitGD");
        }
        inline std::optional<Ent::Gen::StreamingLocatorGD> Object_Components::StreamingLocatorGD() const
        {
            auto sub = getSubNode("StreamingLocatorGD");
            return sub == nullptr? std::optional<Ent::Gen::StreamingLocatorGD>{}: std::optional<Ent::Gen::StreamingLocatorGD>(getSubNode("StreamingLocatorGD"));
        }
        inline Ent::Gen::StreamingLocatorGD Object_Components::addStreamingLocatorGD() const
        {
            return Ent::Gen::StreamingLocatorGD(addSubNode("StreamingLocatorGD"));
        }
        inline void Object_Components::removeStreamingLocatorGD() const
        {
            node->mapErase("StreamingLocatorGD");
        }
        inline std::optional<Ent::Gen::SubScene> Object_Components::SubScene() const
        {
            auto sub = getSubNode("SubScene");
            return sub == nullptr? std::optional<Ent::Gen::SubScene>{}: std::optional<Ent::Gen::SubScene>(getSubNode("SubScene"));
        }
        inline Ent::Gen::SubScene Object_Components::addSubScene() const
        {
            return Ent::Gen::SubScene(addSubNode("SubScene"));
        }
        inline void Object_Components::removeSubScene() const
        {
            node->mapErase("SubScene");
        }
        inline std::optional<Ent::Gen::SystemicCreature> Object_Components::SystemicCreature() const
        {
            auto sub = getSubNode("SystemicCreature");
            return sub == nullptr? std::optional<Ent::Gen::SystemicCreature>{}: std::optional<Ent::Gen::SystemicCreature>(getSubNode("SystemicCreature"));
        }
        inline Ent::Gen::SystemicCreature Object_Components::addSystemicCreature() const
        {
            return Ent::Gen::SystemicCreature(addSubNode("SystemicCreature"));
        }
        inline void Object_Components::removeSystemicCreature() const
        {
            node->mapErase("SystemicCreature");
        }
        inline std::optional<Ent::Gen::TeamGD> Object_Components::TeamGD() const
        {
            auto sub = getSubNode("TeamGD");
            return sub == nullptr? std::optional<Ent::Gen::TeamGD>{}: std::optional<Ent::Gen::TeamGD>(getSubNode("TeamGD"));
        }
        inline Ent::Gen::TeamGD Object_Components::addTeamGD() const
        {
            return Ent::Gen::TeamGD(addSubNode("TeamGD"));
        }
        inline void Object_Components::removeTeamGD() const
        {
            node->mapErase("TeamGD");
        }
        inline std::optional<Ent::Gen::TerrainGD> Object_Components::TerrainGD() const
        {
            auto sub = getSubNode("TerrainGD");
            return sub == nullptr? std::optional<Ent::Gen::TerrainGD>{}: std::optional<Ent::Gen::TerrainGD>(getSubNode("TerrainGD"));
        }
        inline Ent::Gen::TerrainGD Object_Components::addTerrainGD() const
        {
            return Ent::Gen::TerrainGD(addSubNode("TerrainGD"));
        }
        inline void Object_Components::removeTerrainGD() const
        {
            node->mapErase("TerrainGD");
        }
        inline std::optional<Ent::Gen::TerrainSurfaceObject> Object_Components::TerrainSurfaceObject() const
        {
            auto sub = getSubNode("TerrainSurfaceObject");
            return sub == nullptr? std::optional<Ent::Gen::TerrainSurfaceObject>{}: std::optional<Ent::Gen::TerrainSurfaceObject>(getSubNode("TerrainSurfaceObject"));
        }
        inline Ent::Gen::TerrainSurfaceObject Object_Components::addTerrainSurfaceObject() const
        {
            return Ent::Gen::TerrainSurfaceObject(addSubNode("TerrainSurfaceObject"));
        }
        inline void Object_Components::removeTerrainSurfaceObject() const
        {
            node->mapErase("TerrainSurfaceObject");
        }
        inline std::optional<Ent::Gen::TestArrays> Object_Components::TestArrays() const
        {
            auto sub = getSubNode("TestArrays");
            return sub == nullptr? std::optional<Ent::Gen::TestArrays>{}: std::optional<Ent::Gen::TestArrays>(getSubNode("TestArrays"));
        }
        inline Ent::Gen::TestArrays Object_Components::addTestArrays() const
        {
            return Ent::Gen::TestArrays(addSubNode("TestArrays"));
        }
        inline void Object_Components::removeTestArrays() const
        {
            node->mapErase("TestArrays");
        }
        inline std::optional<Ent::Gen::TestCreature> Object_Components::TestCreature() const
        {
            auto sub = getSubNode("TestCreature");
            return sub == nullptr? std::optional<Ent::Gen::TestCreature>{}: std::optional<Ent::Gen::TestCreature>(getSubNode("TestCreature"));
        }
        inline Ent::Gen::TestCreature Object_Components::addTestCreature() const
        {
            return Ent::Gen::TestCreature(addSubNode("TestCreature"));
        }
        inline void Object_Components::removeTestCreature() const
        {
            node->mapErase("TestCreature");
        }
        inline std::optional<Ent::Gen::TestDefaultValues> Object_Components::TestDefaultValues() const
        {
            auto sub = getSubNode("TestDefaultValues");
            return sub == nullptr? std::optional<Ent::Gen::TestDefaultValues>{}: std::optional<Ent::Gen::TestDefaultValues>(getSubNode("TestDefaultValues"));
        }
        inline Ent::Gen::TestDefaultValues Object_Components::addTestDefaultValues() const
        {
            return Ent::Gen::TestDefaultValues(addSubNode("TestDefaultValues"));
        }
        inline void Object_Components::removeTestDefaultValues() const
        {
            node->mapErase("TestDefaultValues");
        }
        inline std::optional<Ent::Gen::TestEntityRef> Object_Components::TestEntityRef() const
        {
            auto sub = getSubNode("TestEntityRef");
            return sub == nullptr? std::optional<Ent::Gen::TestEntityRef>{}: std::optional<Ent::Gen::TestEntityRef>(getSubNode("TestEntityRef"));
        }
        inline Ent::Gen::TestEntityRef Object_Components::addTestEntityRef() const
        {
            return Ent::Gen::TestEntityRef(addSubNode("TestEntityRef"));
        }
        inline void Object_Components::removeTestEntityRef() const
        {
            node->mapErase("TestEntityRef");
        }
        inline std::optional<Ent::Gen::TestSetOfObject> Object_Components::TestSetOfObject() const
        {
            auto sub = getSubNode("TestSetOfObject");
            return sub == nullptr? std::optional<Ent::Gen::TestSetOfObject>{}: std::optional<Ent::Gen::TestSetOfObject>(getSubNode("TestSetOfObject"));
        }
        inline Ent::Gen::TestSetOfObject Object_Components::addTestSetOfObject() const
        {
            return Ent::Gen::TestSetOfObject(addSubNode("TestSetOfObject"));
        }
        inline void Object_Components::removeTestSetOfObject() const
        {
            node->mapErase("TestSetOfObject");
        }
        inline std::optional<Ent::Gen::TestTagsList> Object_Components::TestTagsList() const
        {
            auto sub = getSubNode("TestTagsList");
            return sub == nullptr? std::optional<Ent::Gen::TestTagsList>{}: std::optional<Ent::Gen::TestTagsList>(getSubNode("TestTagsList"));
        }
        inline Ent::Gen::TestTagsList Object_Components::addTestTagsList() const
        {
            return Ent::Gen::TestTagsList(addSubNode("TestTagsList"));
        }
        inline void Object_Components::removeTestTagsList() const
        {
            node->mapErase("TestTagsList");
        }
        inline std::optional<Ent::Gen::TestUnion> Object_Components::TestUnion() const
        {
            auto sub = getSubNode("TestUnion");
            return sub == nullptr? std::optional<Ent::Gen::TestUnion>{}: std::optional<Ent::Gen::TestUnion>(getSubNode("TestUnion"));
        }
        inline Ent::Gen::TestUnion Object_Components::addTestUnion() const
        {
            return Ent::Gen::TestUnion(addSubNode("TestUnion"));
        }
        inline void Object_Components::removeTestUnion() const
        {
            node->mapErase("TestUnion");
        }
        inline std::optional<Ent::Gen::TransformGD> Object_Components::TransformGD() const
        {
            auto sub = getSubNode("TransformGD");
            return sub == nullptr? std::optional<Ent::Gen::TransformGD>{}: std::optional<Ent::Gen::TransformGD>(getSubNode("TransformGD"));
        }
        inline Ent::Gen::TransformGD Object_Components::addTransformGD() const
        {
            return Ent::Gen::TransformGD(addSubNode("TransformGD"));
        }
        inline void Object_Components::removeTransformGD() const
        {
            node->mapErase("TransformGD");
        }
        inline std::optional<Ent::Gen::TriggerEventCameraGD> Object_Components::TriggerEventCameraGD() const
        {
            auto sub = getSubNode("TriggerEventCameraGD");
            return sub == nullptr? std::optional<Ent::Gen::TriggerEventCameraGD>{}: std::optional<Ent::Gen::TriggerEventCameraGD>(getSubNode("TriggerEventCameraGD"));
        }
        inline Ent::Gen::TriggerEventCameraGD Object_Components::addTriggerEventCameraGD() const
        {
            return Ent::Gen::TriggerEventCameraGD(addSubNode("TriggerEventCameraGD"));
        }
        inline void Object_Components::removeTriggerEventCameraGD() const
        {
            node->mapErase("TriggerEventCameraGD");
        }
        inline std::optional<Ent::Gen::UnifiedPhysicsDataGD> Object_Components::UnifiedPhysicsDataGD() const
        {
            auto sub = getSubNode("UnifiedPhysicsDataGD");
            return sub == nullptr? std::optional<Ent::Gen::UnifiedPhysicsDataGD>{}: std::optional<Ent::Gen::UnifiedPhysicsDataGD>(getSubNode("UnifiedPhysicsDataGD"));
        }
        inline Ent::Gen::UnifiedPhysicsDataGD Object_Components::addUnifiedPhysicsDataGD() const
        {
            return Ent::Gen::UnifiedPhysicsDataGD(addSubNode("UnifiedPhysicsDataGD"));
        }
        inline void Object_Components::removeUnifiedPhysicsDataGD() const
        {
            node->mapErase("UnifiedPhysicsDataGD");
        }
        inline std::optional<Ent::Gen::UnitTestComponent> Object_Components::UnitTestComponent() const
        {
            auto sub = getSubNode("UnitTestComponent");
            return sub == nullptr? std::optional<Ent::Gen::UnitTestComponent>{}: std::optional<Ent::Gen::UnitTestComponent>(getSubNode("UnitTestComponent"));
        }
        inline Ent::Gen::UnitTestComponent Object_Components::addUnitTestComponent() const
        {
            return Ent::Gen::UnitTestComponent(addSubNode("UnitTestComponent"));
        }
        inline void Object_Components::removeUnitTestComponent() const
        {
            node->mapErase("UnitTestComponent");
        }
        inline std::optional<Ent::Gen::VelocityObstacleGD> Object_Components::VelocityObstacleGD() const
        {
            auto sub = getSubNode("VelocityObstacleGD");
            return sub == nullptr? std::optional<Ent::Gen::VelocityObstacleGD>{}: std::optional<Ent::Gen::VelocityObstacleGD>(getSubNode("VelocityObstacleGD"));
        }
        inline Ent::Gen::VelocityObstacleGD Object_Components::addVelocityObstacleGD() const
        {
            return Ent::Gen::VelocityObstacleGD(addSubNode("VelocityObstacleGD"));
        }
        inline void Object_Components::removeVelocityObstacleGD() const
        {
            node->mapErase("VelocityObstacleGD");
        }
        inline std::optional<Ent::Gen::VisualGD> Object_Components::VisualGD() const
        {
            auto sub = getSubNode("VisualGD");
            return sub == nullptr? std::optional<Ent::Gen::VisualGD>{}: std::optional<Ent::Gen::VisualGD>(getSubNode("VisualGD"));
        }
        inline Ent::Gen::VisualGD Object_Components::addVisualGD() const
        {
            return Ent::Gen::VisualGD(addSubNode("VisualGD"));
        }
        inline void Object_Components::removeVisualGD() const
        {
            node->mapErase("VisualGD");
        }
        inline std::optional<Ent::Gen::VolumeConstraintGD> Object_Components::VolumeConstraintGD() const
        {
            auto sub = getSubNode("VolumeConstraintGD");
            return sub == nullptr? std::optional<Ent::Gen::VolumeConstraintGD>{}: std::optional<Ent::Gen::VolumeConstraintGD>(getSubNode("VolumeConstraintGD"));
        }
        inline Ent::Gen::VolumeConstraintGD Object_Components::addVolumeConstraintGD() const
        {
            return Ent::Gen::VolumeConstraintGD(addSubNode("VolumeConstraintGD"));
        }
        inline void Object_Components::removeVolumeConstraintGD() const
        {
            node->mapErase("VolumeConstraintGD");
        }
        inline std::optional<Ent::Gen::VoxelSimulationGD> Object_Components::VoxelSimulationGD() const
        {
            auto sub = getSubNode("VoxelSimulationGD");
            return sub == nullptr? std::optional<Ent::Gen::VoxelSimulationGD>{}: std::optional<Ent::Gen::VoxelSimulationGD>(getSubNode("VoxelSimulationGD"));
        }
        inline Ent::Gen::VoxelSimulationGD Object_Components::addVoxelSimulationGD() const
        {
            return Ent::Gen::VoxelSimulationGD(addSubNode("VoxelSimulationGD"));
        }
        inline void Object_Components::removeVoxelSimulationGD() const
        {
            node->mapErase("VoxelSimulationGD");
        }
        inline std::optional<Ent::Gen::WallRunGD> Object_Components::WallRunGD() const
        {
            auto sub = getSubNode("WallRunGD");
            return sub == nullptr? std::optional<Ent::Gen::WallRunGD>{}: std::optional<Ent::Gen::WallRunGD>(getSubNode("WallRunGD"));
        }
        inline Ent::Gen::WallRunGD Object_Components::addWallRunGD() const
        {
            return Ent::Gen::WallRunGD(addSubNode("WallRunGD"));
        }
        inline void Object_Components::removeWallRunGD() const
        {
            node->mapErase("WallRunGD");
        }
        inline std::optional<Ent::Gen::WildObject> Object_Components::WildObject() const
        {
            auto sub = getSubNode("WildObject");
            return sub == nullptr? std::optional<Ent::Gen::WildObject>{}: std::optional<Ent::Gen::WildObject>(getSubNode("WildObject"));
        }
        inline Ent::Gen::WildObject Object_Components::addWildObject() const
        {
            return Ent::Gen::WildObject(addSubNode("WildObject"));
        }
        inline void Object_Components::removeWildObject() const
        {
            node->mapErase("WildObject");
        }
        // GameEffect
        inline Ent::Gen::Float GameEffect::Duration() const
        {
            return Ent::Gen::Float(node->at("Duration"));
        }
        inline Ent::Gen::String GameEffect::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Float GameEffect::PerceptionDistance() const
        {
            return Ent::Gen::Float(node->at("PerceptionDistance"));
        }
        inline Ent::Gen::Float GameEffect::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::RadiusChange GameEffect::RadiusChange() const
        {
            return Ent::Gen::RadiusChange(node->at("RadiusChange"));
        }
        inline Ent::Gen::Float GameEffect::RadiusChangeDuration() const
        {
            return Ent::Gen::Float(node->at("RadiusChangeDuration"));
        }
        inline Ent::Gen::Float GameEffect::RadiusStart() const
        {
            return Ent::Gen::Float(node->at("RadiusStart"));
        }
        inline Ent::Gen::Float GameEffect::RadiusStop() const
        {
            return Ent::Gen::Float(node->at("RadiusStop"));
        }
        inline Ent::Gen::Component GameEffect::Super() const
        {
            return Ent::Gen::Component(node->at("Super"));
        }
        inline Ent::Gen::Float GameEffect::TimeBeforeStart() const
        {
            return Ent::Gen::Float(node->at("TimeBeforeStart"));
        }
        inline Ent::Gen::String GameEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // WindTurbulenceEffect
        inline Ent::Gen::Float WindTurbulenceEffect::BendStrength() const
        {
            return Ent::Gen::Float(node->at("BendStrength"));
        }
        inline Ent::Gen::Float WindTurbulenceEffect::GlobalStrength() const
        {
            return Ent::Gen::Float(node->at("GlobalStrength"));
        }
        inline Ent::Gen::GameEffect WindTurbulenceEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::Float WindTurbulenceEffect::TurbulenceStrength() const
        {
            return Ent::Gen::Float(node->at("TurbulenceStrength"));
        }
        inline Ent::Gen::Bool WindTurbulenceEffect::UseGlobalStrength() const
        {
            return Ent::Gen::Bool(node->at("UseGlobalStrength"));
        }
        inline Ent::Gen::Float WindTurbulenceEffect::WindShakeStrength() const
        {
            return Ent::Gen::Float(node->at("WindShakeStrength"));
        }
        inline Ent::Gen::WindTurbulenceType WindTurbulenceEffect::WindTurbulenceType() const
        {
            return Ent::Gen::WindTurbulenceType(node->at("WindTurbulenceType"));
        }
        inline Ent::Gen::String WindTurbulenceEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ShakeEffect
        inline Ent::Gen::Float ShakeEffect::DistanceAttenuation() const
        {
            return Ent::Gen::Float(node->at("DistanceAttenuation"));
        }
        inline Ent::Gen::Float ShakeEffect::Strength() const
        {
            return Ent::Gen::Float(node->at("Strength"));
        }
        inline Ent::Gen::GameEffect ShakeEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::String ShakeEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RepulseEffect
        inline Ent::Gen::Bool RepulseEffect::ApplyOnTrees() const
        {
            return Ent::Gen::Bool(node->at("ApplyOnTrees"));
        }
        inline Ent::Gen::Float RepulseEffect::DistanceAttenuation() const
        {
            return Ent::Gen::Float(node->at("DistanceAttenuation"));
        }
        inline Ent::Gen::Float RepulseEffect::Strength() const
        {
            return Ent::Gen::Float(node->at("Strength"));
        }
        inline Ent::Gen::GameEffect RepulseEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::String RepulseEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RegenEffect
        inline Ent::Gen::EnergyValue RegenEffect::EnergyValue() const
        {
            return Ent::Gen::EnergyValue(node->at("EnergyValue"));
        }
        inline Ent::Gen::RegenField RegenEffect::Field() const
        {
            return Ent::Gen::RegenField(node->at("Field"));
        }
        inline Ent::Gen::Float RegenEffect::InnerMultiplier() const
        {
            return Ent::Gen::Float(node->at("InnerMultiplier"));
        }
        inline Ent::Gen::Float RegenEffect::InnerRadius() const
        {
            return Ent::Gen::Float(node->at("InnerRadius"));
        }
        inline Ent::Gen::Float RegenEffect::Margin() const
        {
            return Ent::Gen::Float(node->at("Margin"));
        }
        inline Ent::Gen::Float RegenEffect::OuterMultiplier() const
        {
            return Ent::Gen::Float(node->at("OuterMultiplier"));
        }
        inline Ent::Gen::EnergySide RegenEffect::State() const
        {
            return Ent::Gen::EnergySide(node->at("State"));
        }
        inline Ent::Gen::GameEffect RegenEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::Bool RegenEffect::UseNewRegen() const
        {
            return Ent::Gen::Bool(node->at("UseNewRegen"));
        }
        inline Ent::Gen::String RegenEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FollowerCallEffect
        inline Ent::Gen::String FollowerCallEffect::CallType() const
        {
            return Ent::Gen::String(node->at("CallType"));
        }
        inline Ent::Gen::Bool FollowerCallEffect::QuickOrder() const
        {
            return Ent::Gen::Bool(node->at("QuickOrder"));
        }
        inline Ent::Gen::Specie FollowerCallEffect::Specie() const
        {
            return Ent::Gen::Specie(node->at("Specie"));
        }
        inline Ent::Gen::GameEffect FollowerCallEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::String FollowerCallEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // FluidEffect
        inline Ent::Gen::Bool FluidEffect::DisplayFX() const
        {
            return Ent::Gen::Bool(node->at("DisplayFX"));
        }
        inline Ent::Gen::EnergySide FluidEffect::EnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::GameEffect FluidEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::Float FluidEffect::VolumePerSecond() const
        {
            return Ent::Gen::Float(node->at("VolumePerSecond"));
        }
        inline Ent::Gen::String FluidEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CallForHelpEffect
        inline Ent::Gen::String CallForHelpEffect::CallType() const
        {
            return Ent::Gen::String(node->at("CallType"));
        }
        inline Ent::Gen::GameEffect CallForHelpEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::String CallForHelpEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BeamEffect
        inline Ent::Gen::Bool BeamEffect::AlwaysActive() const
        {
            return Ent::Gen::Bool(node->at("AlwaysActive"));
        }
        inline Ent::Gen::Bool BeamEffect::AutoChose() const
        {
            return Ent::Gen::Bool(node->at("AutoChose"));
        }
        inline Ent::Gen::Bool BeamEffect::CheckForTrees() const
        {
            return Ent::Gen::Bool(node->at("CheckForTrees"));
        }
        inline Ent::Gen::Bool BeamEffect::EmittedByEnvironment() const
        {
            return Ent::Gen::Bool(node->at("EmittedByEnvironment"));
        }
        inline Ent::Gen::FreezeData BeamEffect::FreezeData() const
        {
            return Ent::Gen::FreezeData(node->at("FreezeData"));
        }
        inline Ent::Gen::Float BeamEffect::Impact() const
        {
            return Ent::Gen::Float(node->at("Impact"));
        }
        inline Ent::Gen::Bool BeamEffect::OneShot() const
        {
            return Ent::Gen::Bool(node->at("OneShot"));
        }
        inline Ent::Gen::Float BeamEffect::Power() const
        {
            return Ent::Gen::Float(node->at("Power"));
        }
        inline Ent::Gen::Float BeamEffect::ProjectileShieldRadius() const
        {
            return Ent::Gen::Float(node->at("ProjectileShieldRadius"));
        }
        inline Ent::Gen::EnergySide BeamEffect::Side() const
        {
            return Ent::Gen::EnergySide(node->at("Side"));
        }
        inline Ent::Gen::GameEffect BeamEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::String BeamEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BeamDetectionEffect
        inline Ent::Gen::GameEffect BeamDetectionEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::String BeamDetectionEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Components
        inline char const* Components::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::AIContextGD> Components::AIContextGD() const
        {
            auto sub = getSubNode("AIContextGD");
            return sub == nullptr? std::optional<Ent::Gen::AIContextGD>{}: std::optional<Ent::Gen::AIContextGD>(getSubNode("AIContextGD"));
        }
        inline Ent::Gen::AIContextGD Components::addAIContextGD() const
        {
            return Ent::Gen::AIContextGD(addSubNode("AIContextGD"));
        }
        inline void Components::removeAIContextGD() const
        {
            node->mapErase("AIContextGD");
        }
        inline std::optional<Ent::Gen::ActorGD> Components::ActorGD() const
        {
            auto sub = getSubNode("ActorGD");
            return sub == nullptr? std::optional<Ent::Gen::ActorGD>{}: std::optional<Ent::Gen::ActorGD>(getSubNode("ActorGD"));
        }
        inline Ent::Gen::ActorGD Components::addActorGD() const
        {
            return Ent::Gen::ActorGD(addSubNode("ActorGD"));
        }
        inline void Components::removeActorGD() const
        {
            node->mapErase("ActorGD");
        }
        inline std::optional<Ent::Gen::AnimationControllerGD> Components::AnimationControllerGD() const
        {
            auto sub = getSubNode("AnimationControllerGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationControllerGD>{}: std::optional<Ent::Gen::AnimationControllerGD>(getSubNode("AnimationControllerGD"));
        }
        inline Ent::Gen::AnimationControllerGD Components::addAnimationControllerGD() const
        {
            return Ent::Gen::AnimationControllerGD(addSubNode("AnimationControllerGD"));
        }
        inline void Components::removeAnimationControllerGD() const
        {
            node->mapErase("AnimationControllerGD");
        }
        inline std::optional<Ent::Gen::AnimationEventsGeneratorGD> Components::AnimationEventsGeneratorGD() const
        {
            auto sub = getSubNode("AnimationEventsGeneratorGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationEventsGeneratorGD>{}: std::optional<Ent::Gen::AnimationEventsGeneratorGD>(getSubNode("AnimationEventsGeneratorGD"));
        }
        inline Ent::Gen::AnimationEventsGeneratorGD Components::addAnimationEventsGeneratorGD() const
        {
            return Ent::Gen::AnimationEventsGeneratorGD(addSubNode("AnimationEventsGeneratorGD"));
        }
        inline void Components::removeAnimationEventsGeneratorGD() const
        {
            node->mapErase("AnimationEventsGeneratorGD");
        }
        inline std::optional<Ent::Gen::AnimationGenericConstraintsGD> Components::AnimationGenericConstraintsGD() const
        {
            auto sub = getSubNode("AnimationGenericConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationGenericConstraintsGD>{}: std::optional<Ent::Gen::AnimationGenericConstraintsGD>(getSubNode("AnimationGenericConstraintsGD"));
        }
        inline Ent::Gen::AnimationGenericConstraintsGD Components::addAnimationGenericConstraintsGD() const
        {
            return Ent::Gen::AnimationGenericConstraintsGD(addSubNode("AnimationGenericConstraintsGD"));
        }
        inline void Components::removeAnimationGenericConstraintsGD() const
        {
            node->mapErase("AnimationGenericConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationHitsConstraintsGD> Components::AnimationHitsConstraintsGD() const
        {
            auto sub = getSubNode("AnimationHitsConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationHitsConstraintsGD>{}: std::optional<Ent::Gen::AnimationHitsConstraintsGD>(getSubNode("AnimationHitsConstraintsGD"));
        }
        inline Ent::Gen::AnimationHitsConstraintsGD Components::addAnimationHitsConstraintsGD() const
        {
            return Ent::Gen::AnimationHitsConstraintsGD(addSubNode("AnimationHitsConstraintsGD"));
        }
        inline void Components::removeAnimationHitsConstraintsGD() const
        {
            node->mapErase("AnimationHitsConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationLegsConstraintsGD> Components::AnimationLegsConstraintsGD() const
        {
            auto sub = getSubNode("AnimationLegsConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationLegsConstraintsGD>{}: std::optional<Ent::Gen::AnimationLegsConstraintsGD>(getSubNode("AnimationLegsConstraintsGD"));
        }
        inline Ent::Gen::AnimationLegsConstraintsGD Components::addAnimationLegsConstraintsGD() const
        {
            return Ent::Gen::AnimationLegsConstraintsGD(addSubNode("AnimationLegsConstraintsGD"));
        }
        inline void Components::removeAnimationLegsConstraintsGD() const
        {
            node->mapErase("AnimationLegsConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationModelGD> Components::AnimationModelGD() const
        {
            auto sub = getSubNode("AnimationModelGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationModelGD>{}: std::optional<Ent::Gen::AnimationModelGD>(getSubNode("AnimationModelGD"));
        }
        inline Ent::Gen::AnimationModelGD Components::addAnimationModelGD() const
        {
            return Ent::Gen::AnimationModelGD(addSubNode("AnimationModelGD"));
        }
        inline void Components::removeAnimationModelGD() const
        {
            node->mapErase("AnimationModelGD");
        }
        inline std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD> Components::AnimationPhysicsChainConstraintsGD() const
        {
            auto sub = getSubNode("AnimationPhysicsChainConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD>{}: std::optional<Ent::Gen::AnimationPhysicsChainConstraintsGD>(getSubNode("AnimationPhysicsChainConstraintsGD"));
        }
        inline Ent::Gen::AnimationPhysicsChainConstraintsGD Components::addAnimationPhysicsChainConstraintsGD() const
        {
            return Ent::Gen::AnimationPhysicsChainConstraintsGD(addSubNode("AnimationPhysicsChainConstraintsGD"));
        }
        inline void Components::removeAnimationPhysicsChainConstraintsGD() const
        {
            node->mapErase("AnimationPhysicsChainConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationPlaylistGD> Components::AnimationPlaylistGD() const
        {
            auto sub = getSubNode("AnimationPlaylistGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationPlaylistGD>{}: std::optional<Ent::Gen::AnimationPlaylistGD>(getSubNode("AnimationPlaylistGD"));
        }
        inline Ent::Gen::AnimationPlaylistGD Components::addAnimationPlaylistGD() const
        {
            return Ent::Gen::AnimationPlaylistGD(addSubNode("AnimationPlaylistGD"));
        }
        inline void Components::removeAnimationPlaylistGD() const
        {
            node->mapErase("AnimationPlaylistGD");
        }
        inline std::optional<Ent::Gen::AnimationTailConstraintsGD> Components::AnimationTailConstraintsGD() const
        {
            auto sub = getSubNode("AnimationTailConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationTailConstraintsGD>{}: std::optional<Ent::Gen::AnimationTailConstraintsGD>(getSubNode("AnimationTailConstraintsGD"));
        }
        inline Ent::Gen::AnimationTailConstraintsGD Components::addAnimationTailConstraintsGD() const
        {
            return Ent::Gen::AnimationTailConstraintsGD(addSubNode("AnimationTailConstraintsGD"));
        }
        inline void Components::removeAnimationTailConstraintsGD() const
        {
            node->mapErase("AnimationTailConstraintsGD");
        }
        inline std::optional<Ent::Gen::AnimationTransformDriverGD> Components::AnimationTransformDriverGD() const
        {
            auto sub = getSubNode("AnimationTransformDriverGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationTransformDriverGD>{}: std::optional<Ent::Gen::AnimationTransformDriverGD>(getSubNode("AnimationTransformDriverGD"));
        }
        inline Ent::Gen::AnimationTransformDriverGD Components::addAnimationTransformDriverGD() const
        {
            return Ent::Gen::AnimationTransformDriverGD(addSubNode("AnimationTransformDriverGD"));
        }
        inline void Components::removeAnimationTransformDriverGD() const
        {
            node->mapErase("AnimationTransformDriverGD");
        }
        inline std::optional<Ent::Gen::AnimationTreeConstraintsGD> Components::AnimationTreeConstraintsGD() const
        {
            auto sub = getSubNode("AnimationTreeConstraintsGD");
            return sub == nullptr? std::optional<Ent::Gen::AnimationTreeConstraintsGD>{}: std::optional<Ent::Gen::AnimationTreeConstraintsGD>(getSubNode("AnimationTreeConstraintsGD"));
        }
        inline Ent::Gen::AnimationTreeConstraintsGD Components::addAnimationTreeConstraintsGD() const
        {
            return Ent::Gen::AnimationTreeConstraintsGD(addSubNode("AnimationTreeConstraintsGD"));
        }
        inline void Components::removeAnimationTreeConstraintsGD() const
        {
            node->mapErase("AnimationTreeConstraintsGD");
        }
        inline std::optional<Ent::Gen::AssemblyGD> Components::AssemblyGD() const
        {
            auto sub = getSubNode("AssemblyGD");
            return sub == nullptr? std::optional<Ent::Gen::AssemblyGD>{}: std::optional<Ent::Gen::AssemblyGD>(getSubNode("AssemblyGD"));
        }
        inline Ent::Gen::AssemblyGD Components::addAssemblyGD() const
        {
            return Ent::Gen::AssemblyGD(addSubNode("AssemblyGD"));
        }
        inline void Components::removeAssemblyGD() const
        {
            node->mapErase("AssemblyGD");
        }
        inline std::optional<Ent::Gen::AttackComponentGD> Components::AttackComponentGD() const
        {
            auto sub = getSubNode("AttackComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::AttackComponentGD>{}: std::optional<Ent::Gen::AttackComponentGD>(getSubNode("AttackComponentGD"));
        }
        inline Ent::Gen::AttackComponentGD Components::addAttackComponentGD() const
        {
            return Ent::Gen::AttackComponentGD(addSubNode("AttackComponentGD"));
        }
        inline void Components::removeAttackComponentGD() const
        {
            node->mapErase("AttackComponentGD");
        }
        inline std::optional<Ent::Gen::AttackTriggerGD> Components::AttackTriggerGD() const
        {
            auto sub = getSubNode("AttackTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::AttackTriggerGD>{}: std::optional<Ent::Gen::AttackTriggerGD>(getSubNode("AttackTriggerGD"));
        }
        inline Ent::Gen::AttackTriggerGD Components::addAttackTriggerGD() const
        {
            return Ent::Gen::AttackTriggerGD(addSubNode("AttackTriggerGD"));
        }
        inline void Components::removeAttackTriggerGD() const
        {
            node->mapErase("AttackTriggerGD");
        }
        inline std::optional<Ent::Gen::BeamTargetGD> Components::BeamTargetGD() const
        {
            auto sub = getSubNode("BeamTargetGD");
            return sub == nullptr? std::optional<Ent::Gen::BeamTargetGD>{}: std::optional<Ent::Gen::BeamTargetGD>(getSubNode("BeamTargetGD"));
        }
        inline Ent::Gen::BeamTargetGD Components::addBeamTargetGD() const
        {
            return Ent::Gen::BeamTargetGD(addSubNode("BeamTargetGD"));
        }
        inline void Components::removeBeamTargetGD() const
        {
            node->mapErase("BeamTargetGD");
        }
        inline std::optional<Ent::Gen::BittenGD> Components::BittenGD() const
        {
            auto sub = getSubNode("BittenGD");
            return sub == nullptr? std::optional<Ent::Gen::BittenGD>{}: std::optional<Ent::Gen::BittenGD>(getSubNode("BittenGD"));
        }
        inline Ent::Gen::BittenGD Components::addBittenGD() const
        {
            return Ent::Gen::BittenGD(addSubNode("BittenGD"));
        }
        inline void Components::removeBittenGD() const
        {
            node->mapErase("BittenGD");
        }
        inline std::optional<Ent::Gen::BoidsGD> Components::BoidsGD() const
        {
            auto sub = getSubNode("BoidsGD");
            return sub == nullptr? std::optional<Ent::Gen::BoidsGD>{}: std::optional<Ent::Gen::BoidsGD>(getSubNode("BoidsGD"));
        }
        inline Ent::Gen::BoidsGD Components::addBoidsGD() const
        {
            return Ent::Gen::BoidsGD(addSubNode("BoidsGD"));
        }
        inline void Components::removeBoidsGD() const
        {
            node->mapErase("BoidsGD");
        }
        inline std::optional<Ent::Gen::BreakableGD> Components::BreakableGD() const
        {
            auto sub = getSubNode("BreakableGD");
            return sub == nullptr? std::optional<Ent::Gen::BreakableGD>{}: std::optional<Ent::Gen::BreakableGD>(getSubNode("BreakableGD"));
        }
        inline Ent::Gen::BreakableGD Components::addBreakableGD() const
        {
            return Ent::Gen::BreakableGD(addSubNode("BreakableGD"));
        }
        inline void Components::removeBreakableGD() const
        {
            node->mapErase("BreakableGD");
        }
        inline std::optional<Ent::Gen::CameraDataGD> Components::CameraDataGD() const
        {
            auto sub = getSubNode("CameraDataGD");
            return sub == nullptr? std::optional<Ent::Gen::CameraDataGD>{}: std::optional<Ent::Gen::CameraDataGD>(getSubNode("CameraDataGD"));
        }
        inline Ent::Gen::CameraDataGD Components::addCameraDataGD() const
        {
            return Ent::Gen::CameraDataGD(addSubNode("CameraDataGD"));
        }
        inline void Components::removeCameraDataGD() const
        {
            node->mapErase("CameraDataGD");
        }
        inline std::optional<Ent::Gen::CameraSetterGD> Components::CameraSetterGD() const
        {
            auto sub = getSubNode("CameraSetterGD");
            return sub == nullptr? std::optional<Ent::Gen::CameraSetterGD>{}: std::optional<Ent::Gen::CameraSetterGD>(getSubNode("CameraSetterGD"));
        }
        inline Ent::Gen::CameraSetterGD Components::addCameraSetterGD() const
        {
            return Ent::Gen::CameraSetterGD(addSubNode("CameraSetterGD"));
        }
        inline void Components::removeCameraSetterGD() const
        {
            node->mapErase("CameraSetterGD");
        }
        inline std::optional<Ent::Gen::CharacterControllerGD> Components::CharacterControllerGD() const
        {
            auto sub = getSubNode("CharacterControllerGD");
            return sub == nullptr? std::optional<Ent::Gen::CharacterControllerGD>{}: std::optional<Ent::Gen::CharacterControllerGD>(getSubNode("CharacterControllerGD"));
        }
        inline Ent::Gen::CharacterControllerGD Components::addCharacterControllerGD() const
        {
            return Ent::Gen::CharacterControllerGD(addSubNode("CharacterControllerGD"));
        }
        inline void Components::removeCharacterControllerGD() const
        {
            node->mapErase("CharacterControllerGD");
        }
        inline std::optional<Ent::Gen::CharacterPlatformGD> Components::CharacterPlatformGD() const
        {
            auto sub = getSubNode("CharacterPlatformGD");
            return sub == nullptr? std::optional<Ent::Gen::CharacterPlatformGD>{}: std::optional<Ent::Gen::CharacterPlatformGD>(getSubNode("CharacterPlatformGD"));
        }
        inline Ent::Gen::CharacterPlatformGD Components::addCharacterPlatformGD() const
        {
            return Ent::Gen::CharacterPlatformGD(addSubNode("CharacterPlatformGD"));
        }
        inline void Components::removeCharacterPlatformGD() const
        {
            node->mapErase("CharacterPlatformGD");
        }
        inline std::optional<Ent::Gen::ChargedJumpGD> Components::ChargedJumpGD() const
        {
            auto sub = getSubNode("ChargedJumpGD");
            return sub == nullptr? std::optional<Ent::Gen::ChargedJumpGD>{}: std::optional<Ent::Gen::ChargedJumpGD>(getSubNode("ChargedJumpGD"));
        }
        inline Ent::Gen::ChargedJumpGD Components::addChargedJumpGD() const
        {
            return Ent::Gen::ChargedJumpGD(addSubNode("ChargedJumpGD"));
        }
        inline void Components::removeChargedJumpGD() const
        {
            node->mapErase("ChargedJumpGD");
        }
        inline std::optional<Ent::Gen::ChildEntityPoolComponentGD> Components::ChildEntityPoolComponentGD() const
        {
            auto sub = getSubNode("ChildEntityPoolComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::ChildEntityPoolComponentGD>{}: std::optional<Ent::Gen::ChildEntityPoolComponentGD>(getSubNode("ChildEntityPoolComponentGD"));
        }
        inline Ent::Gen::ChildEntityPoolComponentGD Components::addChildEntityPoolComponentGD() const
        {
            return Ent::Gen::ChildEntityPoolComponentGD(addSubNode("ChildEntityPoolComponentGD"));
        }
        inline void Components::removeChildEntityPoolComponentGD() const
        {
            node->mapErase("ChildEntityPoolComponentGD");
        }
        inline std::optional<Ent::Gen::CinematicGD> Components::CinematicGD() const
        {
            auto sub = getSubNode("CinematicGD");
            return sub == nullptr? std::optional<Ent::Gen::CinematicGD>{}: std::optional<Ent::Gen::CinematicGD>(getSubNode("CinematicGD"));
        }
        inline Ent::Gen::CinematicGD Components::addCinematicGD() const
        {
            return Ent::Gen::CinematicGD(addSubNode("CinematicGD"));
        }
        inline void Components::removeCinematicGD() const
        {
            node->mapErase("CinematicGD");
        }
        inline std::optional<Ent::Gen::ClothAnimationGD> Components::ClothAnimationGD() const
        {
            auto sub = getSubNode("ClothAnimationGD");
            return sub == nullptr? std::optional<Ent::Gen::ClothAnimationGD>{}: std::optional<Ent::Gen::ClothAnimationGD>(getSubNode("ClothAnimationGD"));
        }
        inline Ent::Gen::ClothAnimationGD Components::addClothAnimationGD() const
        {
            return Ent::Gen::ClothAnimationGD(addSubNode("ClothAnimationGD"));
        }
        inline void Components::removeClothAnimationGD() const
        {
            node->mapErase("ClothAnimationGD");
        }
        inline std::optional<Ent::Gen::ClothGD> Components::ClothGD() const
        {
            auto sub = getSubNode("ClothGD");
            return sub == nullptr? std::optional<Ent::Gen::ClothGD>{}: std::optional<Ent::Gen::ClothGD>(getSubNode("ClothGD"));
        }
        inline Ent::Gen::ClothGD Components::addClothGD() const
        {
            return Ent::Gen::ClothGD(addSubNode("ClothGD"));
        }
        inline void Components::removeClothGD() const
        {
            node->mapErase("ClothGD");
        }
        inline std::optional<Ent::Gen::ComponentWithProtoCodeGD> Components::ComponentWithProtoCodeGD() const
        {
            auto sub = getSubNode("ComponentWithProtoCodeGD");
            return sub == nullptr? std::optional<Ent::Gen::ComponentWithProtoCodeGD>{}: std::optional<Ent::Gen::ComponentWithProtoCodeGD>(getSubNode("ComponentWithProtoCodeGD"));
        }
        inline Ent::Gen::ComponentWithProtoCodeGD Components::addComponentWithProtoCodeGD() const
        {
            return Ent::Gen::ComponentWithProtoCodeGD(addSubNode("ComponentWithProtoCodeGD"));
        }
        inline void Components::removeComponentWithProtoCodeGD() const
        {
            node->mapErase("ComponentWithProtoCodeGD");
        }
        inline std::optional<Ent::Gen::ConnectorGD> Components::ConnectorGD() const
        {
            auto sub = getSubNode("ConnectorGD");
            return sub == nullptr? std::optional<Ent::Gen::ConnectorGD>{}: std::optional<Ent::Gen::ConnectorGD>(getSubNode("ConnectorGD"));
        }
        inline Ent::Gen::ConnectorGD Components::addConnectorGD() const
        {
            return Ent::Gen::ConnectorGD(addSubNode("ConnectorGD"));
        }
        inline void Components::removeConnectorGD() const
        {
            node->mapErase("ConnectorGD");
        }
        inline std::optional<Ent::Gen::ConstrainedMoveGD> Components::ConstrainedMoveGD() const
        {
            auto sub = getSubNode("ConstrainedMoveGD");
            return sub == nullptr? std::optional<Ent::Gen::ConstrainedMoveGD>{}: std::optional<Ent::Gen::ConstrainedMoveGD>(getSubNode("ConstrainedMoveGD"));
        }
        inline Ent::Gen::ConstrainedMoveGD Components::addConstrainedMoveGD() const
        {
            return Ent::Gen::ConstrainedMoveGD(addSubNode("ConstrainedMoveGD"));
        }
        inline void Components::removeConstrainedMoveGD() const
        {
            node->mapErase("ConstrainedMoveGD");
        }
        inline std::optional<Ent::Gen::CreatureAIGD> Components::CreatureAIGD() const
        {
            auto sub = getSubNode("CreatureAIGD");
            return sub == nullptr? std::optional<Ent::Gen::CreatureAIGD>{}: std::optional<Ent::Gen::CreatureAIGD>(getSubNode("CreatureAIGD"));
        }
        inline Ent::Gen::CreatureAIGD Components::addCreatureAIGD() const
        {
            return Ent::Gen::CreatureAIGD(addSubNode("CreatureAIGD"));
        }
        inline void Components::removeCreatureAIGD() const
        {
            node->mapErase("CreatureAIGD");
        }
        inline std::optional<Ent::Gen::CreatureGD> Components::CreatureGD() const
        {
            auto sub = getSubNode("CreatureGD");
            return sub == nullptr? std::optional<Ent::Gen::CreatureGD>{}: std::optional<Ent::Gen::CreatureGD>(getSubNode("CreatureGD"));
        }
        inline Ent::Gen::CreatureGD Components::addCreatureGD() const
        {
            return Ent::Gen::CreatureGD(addSubNode("CreatureGD"));
        }
        inline void Components::removeCreatureGD() const
        {
            node->mapErase("CreatureGD");
        }
        inline std::optional<Ent::Gen::CreatureUIGD> Components::CreatureUIGD() const
        {
            auto sub = getSubNode("CreatureUIGD");
            return sub == nullptr? std::optional<Ent::Gen::CreatureUIGD>{}: std::optional<Ent::Gen::CreatureUIGD>(getSubNode("CreatureUIGD"));
        }
        inline Ent::Gen::CreatureUIGD Components::addCreatureUIGD() const
        {
            return Ent::Gen::CreatureUIGD(addSubNode("CreatureUIGD"));
        }
        inline void Components::removeCreatureUIGD() const
        {
            node->mapErase("CreatureUIGD");
        }
        inline std::optional<Ent::Gen::CustomThumbnail> Components::CustomThumbnail() const
        {
            auto sub = getSubNode("CustomThumbnail");
            return sub == nullptr? std::optional<Ent::Gen::CustomThumbnail>{}: std::optional<Ent::Gen::CustomThumbnail>(getSubNode("CustomThumbnail"));
        }
        inline Ent::Gen::CustomThumbnail Components::addCustomThumbnail() const
        {
            return Ent::Gen::CustomThumbnail(addSubNode("CustomThumbnail"));
        }
        inline void Components::removeCustomThumbnail() const
        {
            node->mapErase("CustomThumbnail");
        }
        inline std::optional<Ent::Gen::DebugGridGD> Components::DebugGridGD() const
        {
            auto sub = getSubNode("DebugGridGD");
            return sub == nullptr? std::optional<Ent::Gen::DebugGridGD>{}: std::optional<Ent::Gen::DebugGridGD>(getSubNode("DebugGridGD"));
        }
        inline Ent::Gen::DebugGridGD Components::addDebugGridGD() const
        {
            return Ent::Gen::DebugGridGD(addSubNode("DebugGridGD"));
        }
        inline void Components::removeDebugGridGD() const
        {
            node->mapErase("DebugGridGD");
        }
        inline std::optional<Ent::Gen::DistanceTriggerGD> Components::DistanceTriggerGD() const
        {
            auto sub = getSubNode("DistanceTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::DistanceTriggerGD>{}: std::optional<Ent::Gen::DistanceTriggerGD>(getSubNode("DistanceTriggerGD"));
        }
        inline Ent::Gen::DistanceTriggerGD Components::addDistanceTriggerGD() const
        {
            return Ent::Gen::DistanceTriggerGD(addSubNode("DistanceTriggerGD"));
        }
        inline void Components::removeDistanceTriggerGD() const
        {
            node->mapErase("DistanceTriggerGD");
        }
        inline std::optional<Ent::Gen::DiveAttackGD> Components::DiveAttackGD() const
        {
            auto sub = getSubNode("DiveAttackGD");
            return sub == nullptr? std::optional<Ent::Gen::DiveAttackGD>{}: std::optional<Ent::Gen::DiveAttackGD>(getSubNode("DiveAttackGD"));
        }
        inline Ent::Gen::DiveAttackGD Components::addDiveAttackGD() const
        {
            return Ent::Gen::DiveAttackGD(addSubNode("DiveAttackGD"));
        }
        inline void Components::removeDiveAttackGD() const
        {
            node->mapErase("DiveAttackGD");
        }
        inline std::optional<Ent::Gen::DummyComponentGD> Components::DummyComponentGD() const
        {
            auto sub = getSubNode("DummyComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::DummyComponentGD>{}: std::optional<Ent::Gen::DummyComponentGD>(getSubNode("DummyComponentGD"));
        }
        inline Ent::Gen::DummyComponentGD Components::addDummyComponentGD() const
        {
            return Ent::Gen::DummyComponentGD(addSubNode("DummyComponentGD"));
        }
        inline void Components::removeDummyComponentGD() const
        {
            node->mapErase("DummyComponentGD");
        }
        inline std::optional<Ent::Gen::EnergyCrookGD> Components::EnergyCrookGD() const
        {
            auto sub = getSubNode("EnergyCrookGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergyCrookGD>{}: std::optional<Ent::Gen::EnergyCrookGD>(getSubNode("EnergyCrookGD"));
        }
        inline Ent::Gen::EnergyCrookGD Components::addEnergyCrookGD() const
        {
            return Ent::Gen::EnergyCrookGD(addSubNode("EnergyCrookGD"));
        }
        inline void Components::removeEnergyCrookGD() const
        {
            node->mapErase("EnergyCrookGD");
        }
        inline std::optional<Ent::Gen::EnergyDrainGD> Components::EnergyDrainGD() const
        {
            auto sub = getSubNode("EnergyDrainGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergyDrainGD>{}: std::optional<Ent::Gen::EnergyDrainGD>(getSubNode("EnergyDrainGD"));
        }
        inline Ent::Gen::EnergyDrainGD Components::addEnergyDrainGD() const
        {
            return Ent::Gen::EnergyDrainGD(addSubNode("EnergyDrainGD"));
        }
        inline void Components::removeEnergyDrainGD() const
        {
            node->mapErase("EnergyDrainGD");
        }
        inline std::optional<Ent::Gen::EnergyNetworkListenerGD> Components::EnergyNetworkListenerGD() const
        {
            auto sub = getSubNode("EnergyNetworkListenerGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergyNetworkListenerGD>{}: std::optional<Ent::Gen::EnergyNetworkListenerGD>(getSubNode("EnergyNetworkListenerGD"));
        }
        inline Ent::Gen::EnergyNetworkListenerGD Components::addEnergyNetworkListenerGD() const
        {
            return Ent::Gen::EnergyNetworkListenerGD(addSubNode("EnergyNetworkListenerGD"));
        }
        inline void Components::removeEnergyNetworkListenerGD() const
        {
            node->mapErase("EnergyNetworkListenerGD");
        }
        inline std::optional<Ent::Gen::EnergyPoolGD> Components::EnergyPoolGD() const
        {
            auto sub = getSubNode("EnergyPoolGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergyPoolGD>{}: std::optional<Ent::Gen::EnergyPoolGD>(getSubNode("EnergyPoolGD"));
        }
        inline Ent::Gen::EnergyPoolGD Components::addEnergyPoolGD() const
        {
            return Ent::Gen::EnergyPoolGD(addSubNode("EnergyPoolGD"));
        }
        inline void Components::removeEnergyPoolGD() const
        {
            node->mapErase("EnergyPoolGD");
        }
        inline std::optional<Ent::Gen::EnergySideSwitcherGD> Components::EnergySideSwitcherGD() const
        {
            auto sub = getSubNode("EnergySideSwitcherGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergySideSwitcherGD>{}: std::optional<Ent::Gen::EnergySideSwitcherGD>(getSubNode("EnergySideSwitcherGD"));
        }
        inline Ent::Gen::EnergySideSwitcherGD Components::addEnergySideSwitcherGD() const
        {
            return Ent::Gen::EnergySideSwitcherGD(addSubNode("EnergySideSwitcherGD"));
        }
        inline void Components::removeEnergySideSwitcherGD() const
        {
            node->mapErase("EnergySideSwitcherGD");
        }
        inline std::optional<Ent::Gen::EnergySpoutGD> Components::EnergySpoutGD() const
        {
            auto sub = getSubNode("EnergySpoutGD");
            return sub == nullptr? std::optional<Ent::Gen::EnergySpoutGD>{}: std::optional<Ent::Gen::EnergySpoutGD>(getSubNode("EnergySpoutGD"));
        }
        inline Ent::Gen::EnergySpoutGD Components::addEnergySpoutGD() const
        {
            return Ent::Gen::EnergySpoutGD(addSubNode("EnergySpoutGD"));
        }
        inline void Components::removeEnergySpoutGD() const
        {
            node->mapErase("EnergySpoutGD");
        }
        inline std::optional<Ent::Gen::EnvStampGD> Components::EnvStampGD() const
        {
            auto sub = getSubNode("EnvStampGD");
            return sub == nullptr? std::optional<Ent::Gen::EnvStampGD>{}: std::optional<Ent::Gen::EnvStampGD>(getSubNode("EnvStampGD"));
        }
        inline Ent::Gen::EnvStampGD Components::addEnvStampGD() const
        {
            return Ent::Gen::EnvStampGD(addSubNode("EnvStampGD"));
        }
        inline void Components::removeEnvStampGD() const
        {
            node->mapErase("EnvStampGD");
        }
        inline std::optional<Ent::Gen::EventHandlerGD> Components::EventHandlerGD() const
        {
            auto sub = getSubNode("EventHandlerGD");
            return sub == nullptr? std::optional<Ent::Gen::EventHandlerGD>{}: std::optional<Ent::Gen::EventHandlerGD>(getSubNode("EventHandlerGD"));
        }
        inline Ent::Gen::EventHandlerGD Components::addEventHandlerGD() const
        {
            return Ent::Gen::EventHandlerGD(addSubNode("EventHandlerGD"));
        }
        inline void Components::removeEventHandlerGD() const
        {
            node->mapErase("EventHandlerGD");
        }
        inline std::optional<Ent::Gen::EventTriggerGD> Components::EventTriggerGD() const
        {
            auto sub = getSubNode("EventTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::EventTriggerGD>{}: std::optional<Ent::Gen::EventTriggerGD>(getSubNode("EventTriggerGD"));
        }
        inline Ent::Gen::EventTriggerGD Components::addEventTriggerGD() const
        {
            return Ent::Gen::EventTriggerGD(addSubNode("EventTriggerGD"));
        }
        inline void Components::removeEventTriggerGD() const
        {
            node->mapErase("EventTriggerGD");
        }
        inline std::optional<Ent::Gen::FightDistanceTriggerGD> Components::FightDistanceTriggerGD() const
        {
            auto sub = getSubNode("FightDistanceTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::FightDistanceTriggerGD>{}: std::optional<Ent::Gen::FightDistanceTriggerGD>(getSubNode("FightDistanceTriggerGD"));
        }
        inline Ent::Gen::FightDistanceTriggerGD Components::addFightDistanceTriggerGD() const
        {
            return Ent::Gen::FightDistanceTriggerGD(addSubNode("FightDistanceTriggerGD"));
        }
        inline void Components::removeFightDistanceTriggerGD() const
        {
            node->mapErase("FightDistanceTriggerGD");
        }
        inline std::optional<Ent::Gen::FireSensorGD> Components::FireSensorGD() const
        {
            auto sub = getSubNode("FireSensorGD");
            return sub == nullptr? std::optional<Ent::Gen::FireSensorGD>{}: std::optional<Ent::Gen::FireSensorGD>(getSubNode("FireSensorGD"));
        }
        inline Ent::Gen::FireSensorGD Components::addFireSensorGD() const
        {
            return Ent::Gen::FireSensorGD(addSubNode("FireSensorGD"));
        }
        inline void Components::removeFireSensorGD() const
        {
            node->mapErase("FireSensorGD");
        }
        inline std::optional<Ent::Gen::FluidFXEntitySpawnerGD> Components::FluidFXEntitySpawnerGD() const
        {
            auto sub = getSubNode("FluidFXEntitySpawnerGD");
            return sub == nullptr? std::optional<Ent::Gen::FluidFXEntitySpawnerGD>{}: std::optional<Ent::Gen::FluidFXEntitySpawnerGD>(getSubNode("FluidFXEntitySpawnerGD"));
        }
        inline Ent::Gen::FluidFXEntitySpawnerGD Components::addFluidFXEntitySpawnerGD() const
        {
            return Ent::Gen::FluidFXEntitySpawnerGD(addSubNode("FluidFXEntitySpawnerGD"));
        }
        inline void Components::removeFluidFXEntitySpawnerGD() const
        {
            node->mapErase("FluidFXEntitySpawnerGD");
        }
        inline std::optional<Ent::Gen::FluidGD> Components::FluidGD() const
        {
            auto sub = getSubNode("FluidGD");
            return sub == nullptr? std::optional<Ent::Gen::FluidGD>{}: std::optional<Ent::Gen::FluidGD>(getSubNode("FluidGD"));
        }
        inline Ent::Gen::FluidGD Components::addFluidGD() const
        {
            return Ent::Gen::FluidGD(addSubNode("FluidGD"));
        }
        inline void Components::removeFluidGD() const
        {
            node->mapErase("FluidGD");
        }
        inline std::optional<Ent::Gen::FluidViewGD> Components::FluidViewGD() const
        {
            auto sub = getSubNode("FluidViewGD");
            return sub == nullptr? std::optional<Ent::Gen::FluidViewGD>{}: std::optional<Ent::Gen::FluidViewGD>(getSubNode("FluidViewGD"));
        }
        inline Ent::Gen::FluidViewGD Components::addFluidViewGD() const
        {
            return Ent::Gen::FluidViewGD(addSubNode("FluidViewGD"));
        }
        inline void Components::removeFluidViewGD() const
        {
            node->mapErase("FluidViewGD");
        }
        inline std::optional<Ent::Gen::FluidVolumeComponentGD> Components::FluidVolumeComponentGD() const
        {
            auto sub = getSubNode("FluidVolumeComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::FluidVolumeComponentGD>{}: std::optional<Ent::Gen::FluidVolumeComponentGD>(getSubNode("FluidVolumeComponentGD"));
        }
        inline Ent::Gen::FluidVolumeComponentGD Components::addFluidVolumeComponentGD() const
        {
            return Ent::Gen::FluidVolumeComponentGD(addSubNode("FluidVolumeComponentGD"));
        }
        inline void Components::removeFluidVolumeComponentGD() const
        {
            node->mapErase("FluidVolumeComponentGD");
        }
        inline std::optional<Ent::Gen::FurComponentGD> Components::FurComponentGD() const
        {
            auto sub = getSubNode("FurComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::FurComponentGD>{}: std::optional<Ent::Gen::FurComponentGD>(getSubNode("FurComponentGD"));
        }
        inline Ent::Gen::FurComponentGD Components::addFurComponentGD() const
        {
            return Ent::Gen::FurComponentGD(addSubNode("FurComponentGD"));
        }
        inline void Components::removeFurComponentGD() const
        {
            node->mapErase("FurComponentGD");
        }
        inline std::optional<Ent::Gen::GameEffectSpawnerGD> Components::GameEffectSpawnerGD() const
        {
            auto sub = getSubNode("GameEffectSpawnerGD");
            return sub == nullptr? std::optional<Ent::Gen::GameEffectSpawnerGD>{}: std::optional<Ent::Gen::GameEffectSpawnerGD>(getSubNode("GameEffectSpawnerGD"));
        }
        inline Ent::Gen::GameEffectSpawnerGD Components::addGameEffectSpawnerGD() const
        {
            return Ent::Gen::GameEffectSpawnerGD(addSubNode("GameEffectSpawnerGD"));
        }
        inline void Components::removeGameEffectSpawnerGD() const
        {
            node->mapErase("GameEffectSpawnerGD");
        }
        inline std::optional<Ent::Gen::GraspableGD> Components::GraspableGD() const
        {
            auto sub = getSubNode("GraspableGD");
            return sub == nullptr? std::optional<Ent::Gen::GraspableGD>{}: std::optional<Ent::Gen::GraspableGD>(getSubNode("GraspableGD"));
        }
        inline Ent::Gen::GraspableGD Components::addGraspableGD() const
        {
            return Ent::Gen::GraspableGD(addSubNode("GraspableGD"));
        }
        inline void Components::removeGraspableGD() const
        {
            node->mapErase("GraspableGD");
        }
        inline std::optional<Ent::Gen::GrasperGD> Components::GrasperGD() const
        {
            auto sub = getSubNode("GrasperGD");
            return sub == nullptr? std::optional<Ent::Gen::GrasperGD>{}: std::optional<Ent::Gen::GrasperGD>(getSubNode("GrasperGD"));
        }
        inline Ent::Gen::GrasperGD Components::addGrasperGD() const
        {
            return Ent::Gen::GrasperGD(addSubNode("GrasperGD"));
        }
        inline void Components::removeGrasperGD() const
        {
            node->mapErase("GrasperGD");
        }
        inline std::optional<Ent::Gen::GroundTypeSamplerGD> Components::GroundTypeSamplerGD() const
        {
            auto sub = getSubNode("GroundTypeSamplerGD");
            return sub == nullptr? std::optional<Ent::Gen::GroundTypeSamplerGD>{}: std::optional<Ent::Gen::GroundTypeSamplerGD>(getSubNode("GroundTypeSamplerGD"));
        }
        inline Ent::Gen::GroundTypeSamplerGD Components::addGroundTypeSamplerGD() const
        {
            return Ent::Gen::GroundTypeSamplerGD(addSubNode("GroundTypeSamplerGD"));
        }
        inline void Components::removeGroundTypeSamplerGD() const
        {
            node->mapErase("GroundTypeSamplerGD");
        }
        inline std::optional<Ent::Gen::HealPumpGD> Components::HealPumpGD() const
        {
            auto sub = getSubNode("HealPumpGD");
            return sub == nullptr? std::optional<Ent::Gen::HealPumpGD>{}: std::optional<Ent::Gen::HealPumpGD>(getSubNode("HealPumpGD"));
        }
        inline Ent::Gen::HealPumpGD Components::addHealPumpGD() const
        {
            return Ent::Gen::HealPumpGD(addSubNode("HealPumpGD"));
        }
        inline void Components::removeHealPumpGD() const
        {
            node->mapErase("HealPumpGD");
        }
        inline std::optional<Ent::Gen::HealTriggerGD> Components::HealTriggerGD() const
        {
            auto sub = getSubNode("HealTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::HealTriggerGD>{}: std::optional<Ent::Gen::HealTriggerGD>(getSubNode("HealTriggerGD"));
        }
        inline Ent::Gen::HealTriggerGD Components::addHealTriggerGD() const
        {
            return Ent::Gen::HealTriggerGD(addSubNode("HealTriggerGD"));
        }
        inline void Components::removeHealTriggerGD() const
        {
            node->mapErase("HealTriggerGD");
        }
        inline std::optional<Ent::Gen::HealerGD> Components::HealerGD() const
        {
            auto sub = getSubNode("HealerGD");
            return sub == nullptr? std::optional<Ent::Gen::HealerGD>{}: std::optional<Ent::Gen::HealerGD>(getSubNode("HealerGD"));
        }
        inline Ent::Gen::HealerGD Components::addHealerGD() const
        {
            return Ent::Gen::HealerGD(addSubNode("HealerGD"));
        }
        inline void Components::removeHealerGD() const
        {
            node->mapErase("HealerGD");
        }
        inline std::optional<Ent::Gen::HealthAreaGD> Components::HealthAreaGD() const
        {
            auto sub = getSubNode("HealthAreaGD");
            return sub == nullptr? std::optional<Ent::Gen::HealthAreaGD>{}: std::optional<Ent::Gen::HealthAreaGD>(getSubNode("HealthAreaGD"));
        }
        inline Ent::Gen::HealthAreaGD Components::addHealthAreaGD() const
        {
            return Ent::Gen::HealthAreaGD(addSubNode("HealthAreaGD"));
        }
        inline void Components::removeHealthAreaGD() const
        {
            node->mapErase("HealthAreaGD");
        }
        inline std::optional<Ent::Gen::HeightMapComponentGD> Components::HeightMapComponentGD() const
        {
            auto sub = getSubNode("HeightMapComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::HeightMapComponentGD>{}: std::optional<Ent::Gen::HeightMapComponentGD>(getSubNode("HeightMapComponentGD"));
        }
        inline Ent::Gen::HeightMapComponentGD Components::addHeightMapComponentGD() const
        {
            return Ent::Gen::HeightMapComponentGD(addSubNode("HeightMapComponentGD"));
        }
        inline void Components::removeHeightMapComponentGD() const
        {
            node->mapErase("HeightMapComponentGD");
        }
        inline std::optional<Ent::Gen::HeightObj> Components::HeightObj() const
        {
            auto sub = getSubNode("HeightObj");
            return sub == nullptr? std::optional<Ent::Gen::HeightObj>{}: std::optional<Ent::Gen::HeightObj>(getSubNode("HeightObj"));
        }
        inline Ent::Gen::HeightObj Components::addHeightObj() const
        {
            return Ent::Gen::HeightObj(addSubNode("HeightObj"));
        }
        inline void Components::removeHeightObj() const
        {
            node->mapErase("HeightObj");
        }
        inline std::optional<Ent::Gen::HitTriggerGD> Components::HitTriggerGD() const
        {
            auto sub = getSubNode("HitTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::HitTriggerGD>{}: std::optional<Ent::Gen::HitTriggerGD>(getSubNode("HitTriggerGD"));
        }
        inline Ent::Gen::HitTriggerGD Components::addHitTriggerGD() const
        {
            return Ent::Gen::HitTriggerGD(addSubNode("HitTriggerGD"));
        }
        inline void Components::removeHitTriggerGD() const
        {
            node->mapErase("HitTriggerGD");
        }
        inline std::optional<Ent::Gen::HotspotsGD> Components::HotspotsGD() const
        {
            auto sub = getSubNode("HotspotsGD");
            return sub == nullptr? std::optional<Ent::Gen::HotspotsGD>{}: std::optional<Ent::Gen::HotspotsGD>(getSubNode("HotspotsGD"));
        }
        inline Ent::Gen::HotspotsGD Components::addHotspotsGD() const
        {
            return Ent::Gen::HotspotsGD(addSubNode("HotspotsGD"));
        }
        inline void Components::removeHotspotsGD() const
        {
            node->mapErase("HotspotsGD");
        }
        inline std::optional<Ent::Gen::IncapacitateComponentGD> Components::IncapacitateComponentGD() const
        {
            auto sub = getSubNode("IncapacitateComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::IncapacitateComponentGD>{}: std::optional<Ent::Gen::IncapacitateComponentGD>(getSubNode("IncapacitateComponentGD"));
        }
        inline Ent::Gen::IncapacitateComponentGD Components::addIncapacitateComponentGD() const
        {
            return Ent::Gen::IncapacitateComponentGD(addSubNode("IncapacitateComponentGD"));
        }
        inline void Components::removeIncapacitateComponentGD() const
        {
            node->mapErase("IncapacitateComponentGD");
        }
        inline std::optional<Ent::Gen::InfoboardRegistererGD> Components::InfoboardRegistererGD() const
        {
            auto sub = getSubNode("InfoboardRegistererGD");
            return sub == nullptr? std::optional<Ent::Gen::InfoboardRegistererGD>{}: std::optional<Ent::Gen::InfoboardRegistererGD>(getSubNode("InfoboardRegistererGD"));
        }
        inline Ent::Gen::InfoboardRegistererGD Components::addInfoboardRegistererGD() const
        {
            return Ent::Gen::InfoboardRegistererGD(addSubNode("InfoboardRegistererGD"));
        }
        inline void Components::removeInfoboardRegistererGD() const
        {
            node->mapErase("InfoboardRegistererGD");
        }
        inline std::optional<Ent::Gen::InteractableGPEGD> Components::InteractableGPEGD() const
        {
            auto sub = getSubNode("InteractableGPEGD");
            return sub == nullptr? std::optional<Ent::Gen::InteractableGPEGD>{}: std::optional<Ent::Gen::InteractableGPEGD>(getSubNode("InteractableGPEGD"));
        }
        inline Ent::Gen::InteractableGPEGD Components::addInteractableGPEGD() const
        {
            return Ent::Gen::InteractableGPEGD(addSubNode("InteractableGPEGD"));
        }
        inline void Components::removeInteractableGPEGD() const
        {
            node->mapErase("InteractableGPEGD");
        }
        inline std::optional<Ent::Gen::InteractorGD> Components::InteractorGD() const
        {
            auto sub = getSubNode("InteractorGD");
            return sub == nullptr? std::optional<Ent::Gen::InteractorGD>{}: std::optional<Ent::Gen::InteractorGD>(getSubNode("InteractorGD"));
        }
        inline Ent::Gen::InteractorGD Components::addInteractorGD() const
        {
            return Ent::Gen::InteractorGD(addSubNode("InteractorGD"));
        }
        inline void Components::removeInteractorGD() const
        {
            node->mapErase("InteractorGD");
        }
        inline std::optional<Ent::Gen::InterestPointGD> Components::InterestPointGD() const
        {
            auto sub = getSubNode("InterestPointGD");
            return sub == nullptr? std::optional<Ent::Gen::InterestPointGD>{}: std::optional<Ent::Gen::InterestPointGD>(getSubNode("InterestPointGD"));
        }
        inline Ent::Gen::InterestPointGD Components::addInterestPointGD() const
        {
            return Ent::Gen::InterestPointGD(addSubNode("InterestPointGD"));
        }
        inline void Components::removeInterestPointGD() const
        {
            node->mapErase("InterestPointGD");
        }
        inline std::optional<Ent::Gen::InventoryGD> Components::InventoryGD() const
        {
            auto sub = getSubNode("InventoryGD");
            return sub == nullptr? std::optional<Ent::Gen::InventoryGD>{}: std::optional<Ent::Gen::InventoryGD>(getSubNode("InventoryGD"));
        }
        inline Ent::Gen::InventoryGD Components::addInventoryGD() const
        {
            return Ent::Gen::InventoryGD(addSubNode("InventoryGD"));
        }
        inline void Components::removeInventoryGD() const
        {
            node->mapErase("InventoryGD");
        }
        inline std::optional<Ent::Gen::ItemHolderGD> Components::ItemHolderGD() const
        {
            auto sub = getSubNode("ItemHolderGD");
            return sub == nullptr? std::optional<Ent::Gen::ItemHolderGD>{}: std::optional<Ent::Gen::ItemHolderGD>(getSubNode("ItemHolderGD"));
        }
        inline Ent::Gen::ItemHolderGD Components::addItemHolderGD() const
        {
            return Ent::Gen::ItemHolderGD(addSubNode("ItemHolderGD"));
        }
        inline void Components::removeItemHolderGD() const
        {
            node->mapErase("ItemHolderGD");
        }
        inline std::optional<Ent::Gen::LDPrimitive> Components::LDPrimitive() const
        {
            auto sub = getSubNode("LDPrimitive");
            return sub == nullptr? std::optional<Ent::Gen::LDPrimitive>{}: std::optional<Ent::Gen::LDPrimitive>(getSubNode("LDPrimitive"));
        }
        inline Ent::Gen::LDPrimitive Components::addLDPrimitive() const
        {
            return Ent::Gen::LDPrimitive(addSubNode("LDPrimitive"));
        }
        inline void Components::removeLDPrimitive() const
        {
            node->mapErase("LDPrimitive");
        }
        inline std::optional<Ent::Gen::LifeComponentGD> Components::LifeComponentGD() const
        {
            auto sub = getSubNode("LifeComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::LifeComponentGD>{}: std::optional<Ent::Gen::LifeComponentGD>(getSubNode("LifeComponentGD"));
        }
        inline Ent::Gen::LifeComponentGD Components::addLifeComponentGD() const
        {
            return Ent::Gen::LifeComponentGD(addSubNode("LifeComponentGD"));
        }
        inline void Components::removeLifeComponentGD() const
        {
            node->mapErase("LifeComponentGD");
        }
        inline std::optional<Ent::Gen::LightComponentGD> Components::LightComponentGD() const
        {
            auto sub = getSubNode("LightComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::LightComponentGD>{}: std::optional<Ent::Gen::LightComponentGD>(getSubNode("LightComponentGD"));
        }
        inline Ent::Gen::LightComponentGD Components::addLightComponentGD() const
        {
            return Ent::Gen::LightComponentGD(addSubNode("LightComponentGD"));
        }
        inline void Components::removeLightComponentGD() const
        {
            node->mapErase("LightComponentGD");
        }
        inline std::optional<Ent::Gen::Mesh> Components::Mesh() const
        {
            auto sub = getSubNode("Mesh");
            return sub == nullptr? std::optional<Ent::Gen::Mesh>{}: std::optional<Ent::Gen::Mesh>(getSubNode("Mesh"));
        }
        inline Ent::Gen::Mesh Components::addMesh() const
        {
            return Ent::Gen::Mesh(addSubNode("Mesh"));
        }
        inline void Components::removeMesh() const
        {
            node->mapErase("Mesh");
        }
        inline std::optional<Ent::Gen::MeshNavigationInfosGD> Components::MeshNavigationInfosGD() const
        {
            auto sub = getSubNode("MeshNavigationInfosGD");
            return sub == nullptr? std::optional<Ent::Gen::MeshNavigationInfosGD>{}: std::optional<Ent::Gen::MeshNavigationInfosGD>(getSubNode("MeshNavigationInfosGD"));
        }
        inline Ent::Gen::MeshNavigationInfosGD Components::addMeshNavigationInfosGD() const
        {
            return Ent::Gen::MeshNavigationInfosGD(addSubNode("MeshNavigationInfosGD"));
        }
        inline void Components::removeMeshNavigationInfosGD() const
        {
            node->mapErase("MeshNavigationInfosGD");
        }
        inline std::optional<Ent::Gen::MissionHolderGD> Components::MissionHolderGD() const
        {
            auto sub = getSubNode("MissionHolderGD");
            return sub == nullptr? std::optional<Ent::Gen::MissionHolderGD>{}: std::optional<Ent::Gen::MissionHolderGD>(getSubNode("MissionHolderGD"));
        }
        inline Ent::Gen::MissionHolderGD Components::addMissionHolderGD() const
        {
            return Ent::Gen::MissionHolderGD(addSubNode("MissionHolderGD"));
        }
        inline void Components::removeMissionHolderGD() const
        {
            node->mapErase("MissionHolderGD");
        }
        inline std::optional<Ent::Gen::MountIKControllerGD> Components::MountIKControllerGD() const
        {
            auto sub = getSubNode("MountIKControllerGD");
            return sub == nullptr? std::optional<Ent::Gen::MountIKControllerGD>{}: std::optional<Ent::Gen::MountIKControllerGD>(getSubNode("MountIKControllerGD"));
        }
        inline Ent::Gen::MountIKControllerGD Components::addMountIKControllerGD() const
        {
            return Ent::Gen::MountIKControllerGD(addSubNode("MountIKControllerGD"));
        }
        inline void Components::removeMountIKControllerGD() const
        {
            node->mapErase("MountIKControllerGD");
        }
        inline std::optional<Ent::Gen::MountableGD> Components::MountableGD() const
        {
            auto sub = getSubNode("MountableGD");
            return sub == nullptr? std::optional<Ent::Gen::MountableGD>{}: std::optional<Ent::Gen::MountableGD>(getSubNode("MountableGD"));
        }
        inline Ent::Gen::MountableGD Components::addMountableGD() const
        {
            return Ent::Gen::MountableGD(addSubNode("MountableGD"));
        }
        inline void Components::removeMountableGD() const
        {
            node->mapErase("MountableGD");
        }
        inline std::optional<Ent::Gen::MounterGD> Components::MounterGD() const
        {
            auto sub = getSubNode("MounterGD");
            return sub == nullptr? std::optional<Ent::Gen::MounterGD>{}: std::optional<Ent::Gen::MounterGD>(getSubNode("MounterGD"));
        }
        inline Ent::Gen::MounterGD Components::addMounterGD() const
        {
            return Ent::Gen::MounterGD(addSubNode("MounterGD"));
        }
        inline void Components::removeMounterGD() const
        {
            node->mapErase("MounterGD");
        }
        inline std::optional<Ent::Gen::MultiThumbnail> Components::MultiThumbnail() const
        {
            auto sub = getSubNode("MultiThumbnail");
            return sub == nullptr? std::optional<Ent::Gen::MultiThumbnail>{}: std::optional<Ent::Gen::MultiThumbnail>(getSubNode("MultiThumbnail"));
        }
        inline Ent::Gen::MultiThumbnail Components::addMultiThumbnail() const
        {
            return Ent::Gen::MultiThumbnail(addSubNode("MultiThumbnail"));
        }
        inline void Components::removeMultiThumbnail() const
        {
            node->mapErase("MultiThumbnail");
        }
        inline std::optional<Ent::Gen::NavMeshActivatorGD> Components::NavMeshActivatorGD() const
        {
            auto sub = getSubNode("NavMeshActivatorGD");
            return sub == nullptr? std::optional<Ent::Gen::NavMeshActivatorGD>{}: std::optional<Ent::Gen::NavMeshActivatorGD>(getSubNode("NavMeshActivatorGD"));
        }
        inline Ent::Gen::NavMeshActivatorGD Components::addNavMeshActivatorGD() const
        {
            return Ent::Gen::NavMeshActivatorGD(addSubNode("NavMeshActivatorGD"));
        }
        inline void Components::removeNavMeshActivatorGD() const
        {
            node->mapErase("NavMeshActivatorGD");
        }
        inline std::optional<Ent::Gen::NavMeshStamperGD> Components::NavMeshStamperGD() const
        {
            auto sub = getSubNode("NavMeshStamperGD");
            return sub == nullptr? std::optional<Ent::Gen::NavMeshStamperGD>{}: std::optional<Ent::Gen::NavMeshStamperGD>(getSubNode("NavMeshStamperGD"));
        }
        inline Ent::Gen::NavMeshStamperGD Components::addNavMeshStamperGD() const
        {
            return Ent::Gen::NavMeshStamperGD(addSubNode("NavMeshStamperGD"));
        }
        inline void Components::removeNavMeshStamperGD() const
        {
            node->mapErase("NavMeshStamperGD");
        }
        inline std::optional<Ent::Gen::NetGD> Components::NetGD() const
        {
            auto sub = getSubNode("NetGD");
            return sub == nullptr? std::optional<Ent::Gen::NetGD>{}: std::optional<Ent::Gen::NetGD>(getSubNode("NetGD"));
        }
        inline Ent::Gen::NetGD Components::addNetGD() const
        {
            return Ent::Gen::NetGD(addSubNode("NetGD"));
        }
        inline void Components::removeNetGD() const
        {
            node->mapErase("NetGD");
        }
        inline std::optional<Ent::Gen::NetworkLink> Components::NetworkLink() const
        {
            auto sub = getSubNode("NetworkLink");
            return sub == nullptr? std::optional<Ent::Gen::NetworkLink>{}: std::optional<Ent::Gen::NetworkLink>(getSubNode("NetworkLink"));
        }
        inline Ent::Gen::NetworkLink Components::addNetworkLink() const
        {
            return Ent::Gen::NetworkLink(addSubNode("NetworkLink"));
        }
        inline void Components::removeNetworkLink() const
        {
            node->mapErase("NetworkLink");
        }
        inline std::optional<Ent::Gen::NetworkNode> Components::NetworkNode() const
        {
            auto sub = getSubNode("NetworkNode");
            return sub == nullptr? std::optional<Ent::Gen::NetworkNode>{}: std::optional<Ent::Gen::NetworkNode>(getSubNode("NetworkNode"));
        }
        inline Ent::Gen::NetworkNode Components::addNetworkNode() const
        {
            return Ent::Gen::NetworkNode(addSubNode("NetworkNode"));
        }
        inline void Components::removeNetworkNode() const
        {
            node->mapErase("NetworkNode");
        }
        inline std::optional<Ent::Gen::NotVisibleInSubscene> Components::NotVisibleInSubscene() const
        {
            auto sub = getSubNode("NotVisibleInSubscene");
            return sub == nullptr? std::optional<Ent::Gen::NotVisibleInSubscene>{}: std::optional<Ent::Gen::NotVisibleInSubscene>(getSubNode("NotVisibleInSubscene"));
        }
        inline Ent::Gen::NotVisibleInSubscene Components::addNotVisibleInSubscene() const
        {
            return Ent::Gen::NotVisibleInSubscene(addSubNode("NotVisibleInSubscene"));
        }
        inline void Components::removeNotVisibleInSubscene() const
        {
            node->mapErase("NotVisibleInSubscene");
        }
        inline std::optional<Ent::Gen::OutfitGD> Components::OutfitGD() const
        {
            auto sub = getSubNode("OutfitGD");
            return sub == nullptr? std::optional<Ent::Gen::OutfitGD>{}: std::optional<Ent::Gen::OutfitGD>(getSubNode("OutfitGD"));
        }
        inline Ent::Gen::OutfitGD Components::addOutfitGD() const
        {
            return Ent::Gen::OutfitGD(addSubNode("OutfitGD"));
        }
        inline void Components::removeOutfitGD() const
        {
            node->mapErase("OutfitGD");
        }
        inline std::optional<Ent::Gen::OutfitWearerGD> Components::OutfitWearerGD() const
        {
            auto sub = getSubNode("OutfitWearerGD");
            return sub == nullptr? std::optional<Ent::Gen::OutfitWearerGD>{}: std::optional<Ent::Gen::OutfitWearerGD>(getSubNode("OutfitWearerGD"));
        }
        inline Ent::Gen::OutfitWearerGD Components::addOutfitWearerGD() const
        {
            return Ent::Gen::OutfitWearerGD(addSubNode("OutfitWearerGD"));
        }
        inline void Components::removeOutfitWearerGD() const
        {
            node->mapErase("OutfitWearerGD");
        }
        inline std::optional<Ent::Gen::PathFinderGD> Components::PathFinderGD() const
        {
            auto sub = getSubNode("PathFinderGD");
            return sub == nullptr? std::optional<Ent::Gen::PathFinderGD>{}: std::optional<Ent::Gen::PathFinderGD>(getSubNode("PathFinderGD"));
        }
        inline Ent::Gen::PathFinderGD Components::addPathFinderGD() const
        {
            return Ent::Gen::PathFinderGD(addSubNode("PathFinderGD"));
        }
        inline void Components::removePathFinderGD() const
        {
            node->mapErase("PathFinderGD");
        }
        inline std::optional<Ent::Gen::PerceivableGD> Components::PerceivableGD() const
        {
            auto sub = getSubNode("PerceivableGD");
            return sub == nullptr? std::optional<Ent::Gen::PerceivableGD>{}: std::optional<Ent::Gen::PerceivableGD>(getSubNode("PerceivableGD"));
        }
        inline Ent::Gen::PerceivableGD Components::addPerceivableGD() const
        {
            return Ent::Gen::PerceivableGD(addSubNode("PerceivableGD"));
        }
        inline void Components::removePerceivableGD() const
        {
            node->mapErase("PerceivableGD");
        }
        inline std::optional<Ent::Gen::PerceiverGD> Components::PerceiverGD() const
        {
            auto sub = getSubNode("PerceiverGD");
            return sub == nullptr? std::optional<Ent::Gen::PerceiverGD>{}: std::optional<Ent::Gen::PerceiverGD>(getSubNode("PerceiverGD"));
        }
        inline Ent::Gen::PerceiverGD Components::addPerceiverGD() const
        {
            return Ent::Gen::PerceiverGD(addSubNode("PerceiverGD"));
        }
        inline void Components::removePerceiverGD() const
        {
            node->mapErase("PerceiverGD");
        }
        inline std::optional<Ent::Gen::PhysicsDataGD> Components::PhysicsDataGD() const
        {
            auto sub = getSubNode("PhysicsDataGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsDataGD>{}: std::optional<Ent::Gen::PhysicsDataGD>(getSubNode("PhysicsDataGD"));
        }
        inline Ent::Gen::PhysicsDataGD Components::addPhysicsDataGD() const
        {
            return Ent::Gen::PhysicsDataGD(addSubNode("PhysicsDataGD"));
        }
        inline void Components::removePhysicsDataGD() const
        {
            node->mapErase("PhysicsDataGD");
        }
        inline std::optional<Ent::Gen::PhysicsGD> Components::PhysicsGD() const
        {
            auto sub = getSubNode("PhysicsGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsGD>{}: std::optional<Ent::Gen::PhysicsGD>(getSubNode("PhysicsGD"));
        }
        inline Ent::Gen::PhysicsGD Components::addPhysicsGD() const
        {
            return Ent::Gen::PhysicsGD(addSubNode("PhysicsGD"));
        }
        inline void Components::removePhysicsGD() const
        {
            node->mapErase("PhysicsGD");
        }
        inline std::optional<Ent::Gen::PhysicsImpactMakerGD> Components::PhysicsImpactMakerGD() const
        {
            auto sub = getSubNode("PhysicsImpactMakerGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsImpactMakerGD>{}: std::optional<Ent::Gen::PhysicsImpactMakerGD>(getSubNode("PhysicsImpactMakerGD"));
        }
        inline Ent::Gen::PhysicsImpactMakerGD Components::addPhysicsImpactMakerGD() const
        {
            return Ent::Gen::PhysicsImpactMakerGD(addSubNode("PhysicsImpactMakerGD"));
        }
        inline void Components::removePhysicsImpactMakerGD() const
        {
            node->mapErase("PhysicsImpactMakerGD");
        }
        inline std::optional<Ent::Gen::PhysicsMeshDeformerGD> Components::PhysicsMeshDeformerGD() const
        {
            auto sub = getSubNode("PhysicsMeshDeformerGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsMeshDeformerGD>{}: std::optional<Ent::Gen::PhysicsMeshDeformerGD>(getSubNode("PhysicsMeshDeformerGD"));
        }
        inline Ent::Gen::PhysicsMeshDeformerGD Components::addPhysicsMeshDeformerGD() const
        {
            return Ent::Gen::PhysicsMeshDeformerGD(addSubNode("PhysicsMeshDeformerGD"));
        }
        inline void Components::removePhysicsMeshDeformerGD() const
        {
            node->mapErase("PhysicsMeshDeformerGD");
        }
        inline std::optional<Ent::Gen::PhysicsMeshProviderGD> Components::PhysicsMeshProviderGD() const
        {
            auto sub = getSubNode("PhysicsMeshProviderGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsMeshProviderGD>{}: std::optional<Ent::Gen::PhysicsMeshProviderGD>(getSubNode("PhysicsMeshProviderGD"));
        }
        inline Ent::Gen::PhysicsMeshProviderGD Components::addPhysicsMeshProviderGD() const
        {
            return Ent::Gen::PhysicsMeshProviderGD(addSubNode("PhysicsMeshProviderGD"));
        }
        inline void Components::removePhysicsMeshProviderGD() const
        {
            node->mapErase("PhysicsMeshProviderGD");
        }
        inline std::optional<Ent::Gen::PhysicsTriggerGD> Components::PhysicsTriggerGD() const
        {
            auto sub = getSubNode("PhysicsTriggerGD");
            return sub == nullptr? std::optional<Ent::Gen::PhysicsTriggerGD>{}: std::optional<Ent::Gen::PhysicsTriggerGD>(getSubNode("PhysicsTriggerGD"));
        }
        inline Ent::Gen::PhysicsTriggerGD Components::addPhysicsTriggerGD() const
        {
            return Ent::Gen::PhysicsTriggerGD(addSubNode("PhysicsTriggerGD"));
        }
        inline void Components::removePhysicsTriggerGD() const
        {
            node->mapErase("PhysicsTriggerGD");
        }
        inline std::optional<Ent::Gen::PickableComponentGD> Components::PickableComponentGD() const
        {
            auto sub = getSubNode("PickableComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::PickableComponentGD>{}: std::optional<Ent::Gen::PickableComponentGD>(getSubNode("PickableComponentGD"));
        }
        inline Ent::Gen::PickableComponentGD Components::addPickableComponentGD() const
        {
            return Ent::Gen::PickableComponentGD(addSubNode("PickableComponentGD"));
        }
        inline void Components::removePickableComponentGD() const
        {
            node->mapErase("PickableComponentGD");
        }
        inline std::optional<Ent::Gen::PickableDistributorComponentGD> Components::PickableDistributorComponentGD() const
        {
            auto sub = getSubNode("PickableDistributorComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::PickableDistributorComponentGD>{}: std::optional<Ent::Gen::PickableDistributorComponentGD>(getSubNode("PickableDistributorComponentGD"));
        }
        inline Ent::Gen::PickableDistributorComponentGD Components::addPickableDistributorComponentGD() const
        {
            return Ent::Gen::PickableDistributorComponentGD(addSubNode("PickableDistributorComponentGD"));
        }
        inline void Components::removePickableDistributorComponentGD() const
        {
            node->mapErase("PickableDistributorComponentGD");
        }
        inline std::optional<Ent::Gen::PlayerComponentGD> Components::PlayerComponentGD() const
        {
            auto sub = getSubNode("PlayerComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::PlayerComponentGD>{}: std::optional<Ent::Gen::PlayerComponentGD>(getSubNode("PlayerComponentGD"));
        }
        inline Ent::Gen::PlayerComponentGD Components::addPlayerComponentGD() const
        {
            return Ent::Gen::PlayerComponentGD(addSubNode("PlayerComponentGD"));
        }
        inline void Components::removePlayerComponentGD() const
        {
            node->mapErase("PlayerComponentGD");
        }
        inline std::optional<Ent::Gen::ProjectileGD> Components::ProjectileGD() const
        {
            auto sub = getSubNode("ProjectileGD");
            return sub == nullptr? std::optional<Ent::Gen::ProjectileGD>{}: std::optional<Ent::Gen::ProjectileGD>(getSubNode("ProjectileGD"));
        }
        inline Ent::Gen::ProjectileGD Components::addProjectileGD() const
        {
            return Ent::Gen::ProjectileGD(addSubNode("ProjectileGD"));
        }
        inline void Components::removeProjectileGD() const
        {
            node->mapErase("ProjectileGD");
        }
        inline std::optional<Ent::Gen::ProjectileShooterGD> Components::ProjectileShooterGD() const
        {
            auto sub = getSubNode("ProjectileShooterGD");
            return sub == nullptr? std::optional<Ent::Gen::ProjectileShooterGD>{}: std::optional<Ent::Gen::ProjectileShooterGD>(getSubNode("ProjectileShooterGD"));
        }
        inline Ent::Gen::ProjectileShooterGD Components::addProjectileShooterGD() const
        {
            return Ent::Gen::ProjectileShooterGD(addSubNode("ProjectileShooterGD"));
        }
        inline void Components::removeProjectileShooterGD() const
        {
            node->mapErase("ProjectileShooterGD");
        }
        inline std::optional<Ent::Gen::ProtoComponentGD> Components::ProtoComponentGD() const
        {
            auto sub = getSubNode("ProtoComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::ProtoComponentGD>{}: std::optional<Ent::Gen::ProtoComponentGD>(getSubNode("ProtoComponentGD"));
        }
        inline Ent::Gen::ProtoComponentGD Components::addProtoComponentGD() const
        {
            return Ent::Gen::ProtoComponentGD(addSubNode("ProtoComponentGD"));
        }
        inline void Components::removeProtoComponentGD() const
        {
            node->mapErase("ProtoComponentGD");
        }
        inline std::optional<Ent::Gen::QuickCreatureSwitchGD> Components::QuickCreatureSwitchGD() const
        {
            auto sub = getSubNode("QuickCreatureSwitchGD");
            return sub == nullptr? std::optional<Ent::Gen::QuickCreatureSwitchGD>{}: std::optional<Ent::Gen::QuickCreatureSwitchGD>(getSubNode("QuickCreatureSwitchGD"));
        }
        inline Ent::Gen::QuickCreatureSwitchGD Components::addQuickCreatureSwitchGD() const
        {
            return Ent::Gen::QuickCreatureSwitchGD(addSubNode("QuickCreatureSwitchGD"));
        }
        inline void Components::removeQuickCreatureSwitchGD() const
        {
            node->mapErase("QuickCreatureSwitchGD");
        }
        inline std::optional<Ent::Gen::RagdollGD> Components::RagdollGD() const
        {
            auto sub = getSubNode("RagdollGD");
            return sub == nullptr? std::optional<Ent::Gen::RagdollGD>{}: std::optional<Ent::Gen::RagdollGD>(getSubNode("RagdollGD"));
        }
        inline Ent::Gen::RagdollGD Components::addRagdollGD() const
        {
            return Ent::Gen::RagdollGD(addSubNode("RagdollGD"));
        }
        inline void Components::removeRagdollGD() const
        {
            node->mapErase("RagdollGD");
        }
        inline std::optional<Ent::Gen::RegenSwitcherGD> Components::RegenSwitcherGD() const
        {
            auto sub = getSubNode("RegenSwitcherGD");
            return sub == nullptr? std::optional<Ent::Gen::RegenSwitcherGD>{}: std::optional<Ent::Gen::RegenSwitcherGD>(getSubNode("RegenSwitcherGD"));
        }
        inline Ent::Gen::RegenSwitcherGD Components::addRegenSwitcherGD() const
        {
            return Ent::Gen::RegenSwitcherGD(addSubNode("RegenSwitcherGD"));
        }
        inline void Components::removeRegenSwitcherGD() const
        {
            node->mapErase("RegenSwitcherGD");
        }
        inline std::optional<Ent::Gen::RegenerableVegetationGD> Components::RegenerableVegetationGD() const
        {
            auto sub = getSubNode("RegenerableVegetationGD");
            return sub == nullptr? std::optional<Ent::Gen::RegenerableVegetationGD>{}: std::optional<Ent::Gen::RegenerableVegetationGD>(getSubNode("RegenerableVegetationGD"));
        }
        inline Ent::Gen::RegenerableVegetationGD Components::addRegenerableVegetationGD() const
        {
            return Ent::Gen::RegenerableVegetationGD(addSubNode("RegenerableVegetationGD"));
        }
        inline void Components::removeRegenerableVegetationGD() const
        {
            node->mapErase("RegenerableVegetationGD");
        }
        inline std::optional<Ent::Gen::RespawnPlaceGD> Components::RespawnPlaceGD() const
        {
            auto sub = getSubNode("RespawnPlaceGD");
            return sub == nullptr? std::optional<Ent::Gen::RespawnPlaceGD>{}: std::optional<Ent::Gen::RespawnPlaceGD>(getSubNode("RespawnPlaceGD"));
        }
        inline Ent::Gen::RespawnPlaceGD Components::addRespawnPlaceGD() const
        {
            return Ent::Gen::RespawnPlaceGD(addSubNode("RespawnPlaceGD"));
        }
        inline void Components::removeRespawnPlaceGD() const
        {
            node->mapErase("RespawnPlaceGD");
        }
        inline std::optional<Ent::Gen::RespawnabilityGD> Components::RespawnabilityGD() const
        {
            auto sub = getSubNode("RespawnabilityGD");
            return sub == nullptr? std::optional<Ent::Gen::RespawnabilityGD>{}: std::optional<Ent::Gen::RespawnabilityGD>(getSubNode("RespawnabilityGD"));
        }
        inline Ent::Gen::RespawnabilityGD Components::addRespawnabilityGD() const
        {
            return Ent::Gen::RespawnabilityGD(addSubNode("RespawnabilityGD"));
        }
        inline void Components::removeRespawnabilityGD() const
        {
            node->mapErase("RespawnabilityGD");
        }
        inline std::optional<Ent::Gen::ReviveEnergyGD> Components::ReviveEnergyGD() const
        {
            auto sub = getSubNode("ReviveEnergyGD");
            return sub == nullptr? std::optional<Ent::Gen::ReviveEnergyGD>{}: std::optional<Ent::Gen::ReviveEnergyGD>(getSubNode("ReviveEnergyGD"));
        }
        inline Ent::Gen::ReviveEnergyGD Components::addReviveEnergyGD() const
        {
            return Ent::Gen::ReviveEnergyGD(addSubNode("ReviveEnergyGD"));
        }
        inline void Components::removeReviveEnergyGD() const
        {
            node->mapErase("ReviveEnergyGD");
        }
        inline std::optional<Ent::Gen::ScriptComponentGD> Components::ScriptComponentGD() const
        {
            auto sub = getSubNode("ScriptComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::ScriptComponentGD>{}: std::optional<Ent::Gen::ScriptComponentGD>(getSubNode("ScriptComponentGD"));
        }
        inline Ent::Gen::ScriptComponentGD Components::addScriptComponentGD() const
        {
            return Ent::Gen::ScriptComponentGD(addSubNode("ScriptComponentGD"));
        }
        inline void Components::removeScriptComponentGD() const
        {
            node->mapErase("ScriptComponentGD");
        }
        inline std::optional<Ent::Gen::SeedPatch> Components::SeedPatch() const
        {
            auto sub = getSubNode("SeedPatch");
            return sub == nullptr? std::optional<Ent::Gen::SeedPatch>{}: std::optional<Ent::Gen::SeedPatch>(getSubNode("SeedPatch"));
        }
        inline Ent::Gen::SeedPatch Components::addSeedPatch() const
        {
            return Ent::Gen::SeedPatch(addSubNode("SeedPatch"));
        }
        inline void Components::removeSeedPatch() const
        {
            node->mapErase("SeedPatch");
        }
        inline std::optional<Ent::Gen::SensorControllerGD> Components::SensorControllerGD() const
        {
            auto sub = getSubNode("SensorControllerGD");
            return sub == nullptr? std::optional<Ent::Gen::SensorControllerGD>{}: std::optional<Ent::Gen::SensorControllerGD>(getSubNode("SensorControllerGD"));
        }
        inline Ent::Gen::SensorControllerGD Components::addSensorControllerGD() const
        {
            return Ent::Gen::SensorControllerGD(addSubNode("SensorControllerGD"));
        }
        inline void Components::removeSensorControllerGD() const
        {
            node->mapErase("SensorControllerGD");
        }
        inline std::optional<Ent::Gen::SensorVoxelsGD> Components::SensorVoxelsGD() const
        {
            auto sub = getSubNode("SensorVoxelsGD");
            return sub == nullptr? std::optional<Ent::Gen::SensorVoxelsGD>{}: std::optional<Ent::Gen::SensorVoxelsGD>(getSubNode("SensorVoxelsGD"));
        }
        inline Ent::Gen::SensorVoxelsGD Components::addSensorVoxelsGD() const
        {
            return Ent::Gen::SensorVoxelsGD(addSubNode("SensorVoxelsGD"));
        }
        inline void Components::removeSensorVoxelsGD() const
        {
            node->mapErase("SensorVoxelsGD");
        }
        inline std::optional<Ent::Gen::ShamanItemGD> Components::ShamanItemGD() const
        {
            auto sub = getSubNode("ShamanItemGD");
            return sub == nullptr? std::optional<Ent::Gen::ShamanItemGD>{}: std::optional<Ent::Gen::ShamanItemGD>(getSubNode("ShamanItemGD"));
        }
        inline Ent::Gen::ShamanItemGD Components::addShamanItemGD() const
        {
            return Ent::Gen::ShamanItemGD(addSubNode("ShamanItemGD"));
        }
        inline void Components::removeShamanItemGD() const
        {
            node->mapErase("ShamanItemGD");
        }
        inline std::optional<Ent::Gen::ShamanVisionGD> Components::ShamanVisionGD() const
        {
            auto sub = getSubNode("ShamanVisionGD");
            return sub == nullptr? std::optional<Ent::Gen::ShamanVisionGD>{}: std::optional<Ent::Gen::ShamanVisionGD>(getSubNode("ShamanVisionGD"));
        }
        inline Ent::Gen::ShamanVisionGD Components::addShamanVisionGD() const
        {
            return Ent::Gen::ShamanVisionGD(addSubNode("ShamanVisionGD"));
        }
        inline void Components::removeShamanVisionGD() const
        {
            node->mapErase("ShamanVisionGD");
        }
        inline std::optional<Ent::Gen::ShapeshiftStatueGD> Components::ShapeshiftStatueGD() const
        {
            auto sub = getSubNode("ShapeshiftStatueGD");
            return sub == nullptr? std::optional<Ent::Gen::ShapeshiftStatueGD>{}: std::optional<Ent::Gen::ShapeshiftStatueGD>(getSubNode("ShapeshiftStatueGD"));
        }
        inline Ent::Gen::ShapeshiftStatueGD Components::addShapeshiftStatueGD() const
        {
            return Ent::Gen::ShapeshiftStatueGD(addSubNode("ShapeshiftStatueGD"));
        }
        inline void Components::removeShapeshiftStatueGD() const
        {
            node->mapErase("ShapeshiftStatueGD");
        }
        inline std::optional<Ent::Gen::SideMapGateGD> Components::SideMapGateGD() const
        {
            auto sub = getSubNode("SideMapGateGD");
            return sub == nullptr? std::optional<Ent::Gen::SideMapGateGD>{}: std::optional<Ent::Gen::SideMapGateGD>(getSubNode("SideMapGateGD"));
        }
        inline Ent::Gen::SideMapGateGD Components::addSideMapGateGD() const
        {
            return Ent::Gen::SideMapGateGD(addSubNode("SideMapGateGD"));
        }
        inline void Components::removeSideMapGateGD() const
        {
            node->mapErase("SideMapGateGD");
        }
        inline std::optional<Ent::Gen::SmoothScaleComponentGD> Components::SmoothScaleComponentGD() const
        {
            auto sub = getSubNode("SmoothScaleComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::SmoothScaleComponentGD>{}: std::optional<Ent::Gen::SmoothScaleComponentGD>(getSubNode("SmoothScaleComponentGD"));
        }
        inline Ent::Gen::SmoothScaleComponentGD Components::addSmoothScaleComponentGD() const
        {
            return Ent::Gen::SmoothScaleComponentGD(addSubNode("SmoothScaleComponentGD"));
        }
        inline void Components::removeSmoothScaleComponentGD() const
        {
            node->mapErase("SmoothScaleComponentGD");
        }
        inline std::optional<Ent::Gen::SoftCollisionGD> Components::SoftCollisionGD() const
        {
            auto sub = getSubNode("SoftCollisionGD");
            return sub == nullptr? std::optional<Ent::Gen::SoftCollisionGD>{}: std::optional<Ent::Gen::SoftCollisionGD>(getSubNode("SoftCollisionGD"));
        }
        inline Ent::Gen::SoftCollisionGD Components::addSoftCollisionGD() const
        {
            return Ent::Gen::SoftCollisionGD(addSubNode("SoftCollisionGD"));
        }
        inline void Components::removeSoftCollisionGD() const
        {
            node->mapErase("SoftCollisionGD");
        }
        inline std::optional<Ent::Gen::SoulRespawnOpportunityGD> Components::SoulRespawnOpportunityGD() const
        {
            auto sub = getSubNode("SoulRespawnOpportunityGD");
            return sub == nullptr? std::optional<Ent::Gen::SoulRespawnOpportunityGD>{}: std::optional<Ent::Gen::SoulRespawnOpportunityGD>(getSubNode("SoulRespawnOpportunityGD"));
        }
        inline Ent::Gen::SoulRespawnOpportunityGD Components::addSoulRespawnOpportunityGD() const
        {
            return Ent::Gen::SoulRespawnOpportunityGD(addSubNode("SoulRespawnOpportunityGD"));
        }
        inline void Components::removeSoulRespawnOpportunityGD() const
        {
            node->mapErase("SoulRespawnOpportunityGD");
        }
        inline std::optional<Ent::Gen::SoundAreaGD> Components::SoundAreaGD() const
        {
            auto sub = getSubNode("SoundAreaGD");
            return sub == nullptr? std::optional<Ent::Gen::SoundAreaGD>{}: std::optional<Ent::Gen::SoundAreaGD>(getSubNode("SoundAreaGD"));
        }
        inline Ent::Gen::SoundAreaGD Components::addSoundAreaGD() const
        {
            return Ent::Gen::SoundAreaGD(addSubNode("SoundAreaGD"));
        }
        inline void Components::removeSoundAreaGD() const
        {
            node->mapErase("SoundAreaGD");
        }
        inline std::optional<Ent::Gen::SoundEmitterGD> Components::SoundEmitterGD() const
        {
            auto sub = getSubNode("SoundEmitterGD");
            return sub == nullptr? std::optional<Ent::Gen::SoundEmitterGD>{}: std::optional<Ent::Gen::SoundEmitterGD>(getSubNode("SoundEmitterGD"));
        }
        inline Ent::Gen::SoundEmitterGD Components::addSoundEmitterGD() const
        {
            return Ent::Gen::SoundEmitterGD(addSubNode("SoundEmitterGD"));
        }
        inline void Components::removeSoundEmitterGD() const
        {
            node->mapErase("SoundEmitterGD");
        }
        inline std::optional<Ent::Gen::SoundOpportunityComponentGD> Components::SoundOpportunityComponentGD() const
        {
            auto sub = getSubNode("SoundOpportunityComponentGD");
            return sub == nullptr? std::optional<Ent::Gen::SoundOpportunityComponentGD>{}: std::optional<Ent::Gen::SoundOpportunityComponentGD>(getSubNode("SoundOpportunityComponentGD"));
        }
        inline Ent::Gen::SoundOpportunityComponentGD Components::addSoundOpportunityComponentGD() const
        {
            return Ent::Gen::SoundOpportunityComponentGD(addSubNode("SoundOpportunityComponentGD"));
        }
        inline void Components::removeSoundOpportunityComponentGD() const
        {
            node->mapErase("SoundOpportunityComponentGD");
        }
        inline std::optional<Ent::Gen::SpiritAnimalGD> Components::SpiritAnimalGD() const
        {
            auto sub = getSubNode("SpiritAnimalGD");
            return sub == nullptr? std::optional<Ent::Gen::SpiritAnimalGD>{}: std::optional<Ent::Gen::SpiritAnimalGD>(getSubNode("SpiritAnimalGD"));
        }
        inline Ent::Gen::SpiritAnimalGD Components::addSpiritAnimalGD() const
        {
            return Ent::Gen::SpiritAnimalGD(addSubNode("SpiritAnimalGD"));
        }
        inline void Components::removeSpiritAnimalGD() const
        {
            node->mapErase("SpiritAnimalGD");
        }
        inline std::optional<Ent::Gen::SpiritAnimalShrineGD> Components::SpiritAnimalShrineGD() const
        {
            auto sub = getSubNode("SpiritAnimalShrineGD");
            return sub == nullptr? std::optional<Ent::Gen::SpiritAnimalShrineGD>{}: std::optional<Ent::Gen::SpiritAnimalShrineGD>(getSubNode("SpiritAnimalShrineGD"));
        }
        inline Ent::Gen::SpiritAnimalShrineGD Components::addSpiritAnimalShrineGD() const
        {
            return Ent::Gen::SpiritAnimalShrineGD(addSubNode("SpiritAnimalShrineGD"));
        }
        inline void Components::removeSpiritAnimalShrineGD() const
        {
            node->mapErase("SpiritAnimalShrineGD");
        }
        inline std::optional<Ent::Gen::SpiritAnimalsHolderGD> Components::SpiritAnimalsHolderGD() const
        {
            auto sub = getSubNode("SpiritAnimalsHolderGD");
            return sub == nullptr? std::optional<Ent::Gen::SpiritAnimalsHolderGD>{}: std::optional<Ent::Gen::SpiritAnimalsHolderGD>(getSubNode("SpiritAnimalsHolderGD"));
        }
        inline Ent::Gen::SpiritAnimalsHolderGD Components::addSpiritAnimalsHolderGD() const
        {
            return Ent::Gen::SpiritAnimalsHolderGD(addSubNode("SpiritAnimalsHolderGD"));
        }
        inline void Components::removeSpiritAnimalsHolderGD() const
        {
            node->mapErase("SpiritAnimalsHolderGD");
        }
        inline std::optional<Ent::Gen::StaffVertebrasGD> Components::StaffVertebrasGD() const
        {
            auto sub = getSubNode("StaffVertebrasGD");
            return sub == nullptr? std::optional<Ent::Gen::StaffVertebrasGD>{}: std::optional<Ent::Gen::StaffVertebrasGD>(getSubNode("StaffVertebrasGD"));
        }
        inline Ent::Gen::StaffVertebrasGD Components::addStaffVertebrasGD() const
        {
            return Ent::Gen::StaffVertebrasGD(addSubNode("StaffVertebrasGD"));
        }
        inline void Components::removeStaffVertebrasGD() const
        {
            node->mapErase("StaffVertebrasGD");
        }
        inline std::optional<Ent::Gen::StaticObjectGD> Components::StaticObjectGD() const
        {
            auto sub = getSubNode("StaticObjectGD");
            return sub == nullptr? std::optional<Ent::Gen::StaticObjectGD>{}: std::optional<Ent::Gen::StaticObjectGD>(getSubNode("StaticObjectGD"));
        }
        inline Ent::Gen::StaticObjectGD Components::addStaticObjectGD() const
        {
            return Ent::Gen::StaticObjectGD(addSubNode("StaticObjectGD"));
        }
        inline void Components::removeStaticObjectGD() const
        {
            node->mapErase("StaticObjectGD");
        }
        inline std::optional<Ent::Gen::StickToTerrain> Components::StickToTerrain() const
        {
            auto sub = getSubNode("StickToTerrain");
            return sub == nullptr? std::optional<Ent::Gen::StickToTerrain>{}: std::optional<Ent::Gen::StickToTerrain>(getSubNode("StickToTerrain"));
        }
        inline Ent::Gen::StickToTerrain Components::addStickToTerrain() const
        {
            return Ent::Gen::StickToTerrain(addSubNode("StickToTerrain"));
        }
        inline void Components::removeStickToTerrain() const
        {
            node->mapErase("StickToTerrain");
        }
        inline std::optional<Ent::Gen::StreamableUnitGD> Components::StreamableUnitGD() const
        {
            auto sub = getSubNode("StreamableUnitGD");
            return sub == nullptr? std::optional<Ent::Gen::StreamableUnitGD>{}: std::optional<Ent::Gen::StreamableUnitGD>(getSubNode("StreamableUnitGD"));
        }
        inline Ent::Gen::StreamableUnitGD Components::addStreamableUnitGD() const
        {
            return Ent::Gen::StreamableUnitGD(addSubNode("StreamableUnitGD"));
        }
        inline void Components::removeStreamableUnitGD() const
        {
            node->mapErase("StreamableUnitGD");
        }
        inline std::optional<Ent::Gen::StreamingLocatorGD> Components::StreamingLocatorGD() const
        {
            auto sub = getSubNode("StreamingLocatorGD");
            return sub == nullptr? std::optional<Ent::Gen::StreamingLocatorGD>{}: std::optional<Ent::Gen::StreamingLocatorGD>(getSubNode("StreamingLocatorGD"));
        }
        inline Ent::Gen::StreamingLocatorGD Components::addStreamingLocatorGD() const
        {
            return Ent::Gen::StreamingLocatorGD(addSubNode("StreamingLocatorGD"));
        }
        inline void Components::removeStreamingLocatorGD() const
        {
            node->mapErase("StreamingLocatorGD");
        }
        inline std::optional<Ent::Gen::SubScene> Components::SubScene() const
        {
            auto sub = getSubNode("SubScene");
            return sub == nullptr? std::optional<Ent::Gen::SubScene>{}: std::optional<Ent::Gen::SubScene>(getSubNode("SubScene"));
        }
        inline Ent::Gen::SubScene Components::addSubScene() const
        {
            return Ent::Gen::SubScene(addSubNode("SubScene"));
        }
        inline void Components::removeSubScene() const
        {
            node->mapErase("SubScene");
        }
        inline std::optional<Ent::Gen::SystemicCreature> Components::SystemicCreature() const
        {
            auto sub = getSubNode("SystemicCreature");
            return sub == nullptr? std::optional<Ent::Gen::SystemicCreature>{}: std::optional<Ent::Gen::SystemicCreature>(getSubNode("SystemicCreature"));
        }
        inline Ent::Gen::SystemicCreature Components::addSystemicCreature() const
        {
            return Ent::Gen::SystemicCreature(addSubNode("SystemicCreature"));
        }
        inline void Components::removeSystemicCreature() const
        {
            node->mapErase("SystemicCreature");
        }
        inline std::optional<Ent::Gen::TeamGD> Components::TeamGD() const
        {
            auto sub = getSubNode("TeamGD");
            return sub == nullptr? std::optional<Ent::Gen::TeamGD>{}: std::optional<Ent::Gen::TeamGD>(getSubNode("TeamGD"));
        }
        inline Ent::Gen::TeamGD Components::addTeamGD() const
        {
            return Ent::Gen::TeamGD(addSubNode("TeamGD"));
        }
        inline void Components::removeTeamGD() const
        {
            node->mapErase("TeamGD");
        }
        inline std::optional<Ent::Gen::TerrainGD> Components::TerrainGD() const
        {
            auto sub = getSubNode("TerrainGD");
            return sub == nullptr? std::optional<Ent::Gen::TerrainGD>{}: std::optional<Ent::Gen::TerrainGD>(getSubNode("TerrainGD"));
        }
        inline Ent::Gen::TerrainGD Components::addTerrainGD() const
        {
            return Ent::Gen::TerrainGD(addSubNode("TerrainGD"));
        }
        inline void Components::removeTerrainGD() const
        {
            node->mapErase("TerrainGD");
        }
        inline std::optional<Ent::Gen::TerrainSurfaceObject> Components::TerrainSurfaceObject() const
        {
            auto sub = getSubNode("TerrainSurfaceObject");
            return sub == nullptr? std::optional<Ent::Gen::TerrainSurfaceObject>{}: std::optional<Ent::Gen::TerrainSurfaceObject>(getSubNode("TerrainSurfaceObject"));
        }
        inline Ent::Gen::TerrainSurfaceObject Components::addTerrainSurfaceObject() const
        {
            return Ent::Gen::TerrainSurfaceObject(addSubNode("TerrainSurfaceObject"));
        }
        inline void Components::removeTerrainSurfaceObject() const
        {
            node->mapErase("TerrainSurfaceObject");
        }
        inline std::optional<Ent::Gen::TestArrays> Components::TestArrays() const
        {
            auto sub = getSubNode("TestArrays");
            return sub == nullptr? std::optional<Ent::Gen::TestArrays>{}: std::optional<Ent::Gen::TestArrays>(getSubNode("TestArrays"));
        }
        inline Ent::Gen::TestArrays Components::addTestArrays() const
        {
            return Ent::Gen::TestArrays(addSubNode("TestArrays"));
        }
        inline void Components::removeTestArrays() const
        {
            node->mapErase("TestArrays");
        }
        inline std::optional<Ent::Gen::TestCreature> Components::TestCreature() const
        {
            auto sub = getSubNode("TestCreature");
            return sub == nullptr? std::optional<Ent::Gen::TestCreature>{}: std::optional<Ent::Gen::TestCreature>(getSubNode("TestCreature"));
        }
        inline Ent::Gen::TestCreature Components::addTestCreature() const
        {
            return Ent::Gen::TestCreature(addSubNode("TestCreature"));
        }
        inline void Components::removeTestCreature() const
        {
            node->mapErase("TestCreature");
        }
        inline std::optional<Ent::Gen::TestDefaultValues> Components::TestDefaultValues() const
        {
            auto sub = getSubNode("TestDefaultValues");
            return sub == nullptr? std::optional<Ent::Gen::TestDefaultValues>{}: std::optional<Ent::Gen::TestDefaultValues>(getSubNode("TestDefaultValues"));
        }
        inline Ent::Gen::TestDefaultValues Components::addTestDefaultValues() const
        {
            return Ent::Gen::TestDefaultValues(addSubNode("TestDefaultValues"));
        }
        inline void Components::removeTestDefaultValues() const
        {
            node->mapErase("TestDefaultValues");
        }
        inline std::optional<Ent::Gen::TestEntityRef> Components::TestEntityRef() const
        {
            auto sub = getSubNode("TestEntityRef");
            return sub == nullptr? std::optional<Ent::Gen::TestEntityRef>{}: std::optional<Ent::Gen::TestEntityRef>(getSubNode("TestEntityRef"));
        }
        inline Ent::Gen::TestEntityRef Components::addTestEntityRef() const
        {
            return Ent::Gen::TestEntityRef(addSubNode("TestEntityRef"));
        }
        inline void Components::removeTestEntityRef() const
        {
            node->mapErase("TestEntityRef");
        }
        inline std::optional<Ent::Gen::TestSetOfObject> Components::TestSetOfObject() const
        {
            auto sub = getSubNode("TestSetOfObject");
            return sub == nullptr? std::optional<Ent::Gen::TestSetOfObject>{}: std::optional<Ent::Gen::TestSetOfObject>(getSubNode("TestSetOfObject"));
        }
        inline Ent::Gen::TestSetOfObject Components::addTestSetOfObject() const
        {
            return Ent::Gen::TestSetOfObject(addSubNode("TestSetOfObject"));
        }
        inline void Components::removeTestSetOfObject() const
        {
            node->mapErase("TestSetOfObject");
        }
        inline std::optional<Ent::Gen::TestTagsList> Components::TestTagsList() const
        {
            auto sub = getSubNode("TestTagsList");
            return sub == nullptr? std::optional<Ent::Gen::TestTagsList>{}: std::optional<Ent::Gen::TestTagsList>(getSubNode("TestTagsList"));
        }
        inline Ent::Gen::TestTagsList Components::addTestTagsList() const
        {
            return Ent::Gen::TestTagsList(addSubNode("TestTagsList"));
        }
        inline void Components::removeTestTagsList() const
        {
            node->mapErase("TestTagsList");
        }
        inline std::optional<Ent::Gen::TestUnion> Components::TestUnion() const
        {
            auto sub = getSubNode("TestUnion");
            return sub == nullptr? std::optional<Ent::Gen::TestUnion>{}: std::optional<Ent::Gen::TestUnion>(getSubNode("TestUnion"));
        }
        inline Ent::Gen::TestUnion Components::addTestUnion() const
        {
            return Ent::Gen::TestUnion(addSubNode("TestUnion"));
        }
        inline void Components::removeTestUnion() const
        {
            node->mapErase("TestUnion");
        }
        inline std::optional<Ent::Gen::TransformGD> Components::TransformGD() const
        {
            auto sub = getSubNode("TransformGD");
            return sub == nullptr? std::optional<Ent::Gen::TransformGD>{}: std::optional<Ent::Gen::TransformGD>(getSubNode("TransformGD"));
        }
        inline Ent::Gen::TransformGD Components::addTransformGD() const
        {
            return Ent::Gen::TransformGD(addSubNode("TransformGD"));
        }
        inline void Components::removeTransformGD() const
        {
            node->mapErase("TransformGD");
        }
        inline std::optional<Ent::Gen::TriggerEventCameraGD> Components::TriggerEventCameraGD() const
        {
            auto sub = getSubNode("TriggerEventCameraGD");
            return sub == nullptr? std::optional<Ent::Gen::TriggerEventCameraGD>{}: std::optional<Ent::Gen::TriggerEventCameraGD>(getSubNode("TriggerEventCameraGD"));
        }
        inline Ent::Gen::TriggerEventCameraGD Components::addTriggerEventCameraGD() const
        {
            return Ent::Gen::TriggerEventCameraGD(addSubNode("TriggerEventCameraGD"));
        }
        inline void Components::removeTriggerEventCameraGD() const
        {
            node->mapErase("TriggerEventCameraGD");
        }
        inline std::optional<Ent::Gen::UnifiedPhysicsDataGD> Components::UnifiedPhysicsDataGD() const
        {
            auto sub = getSubNode("UnifiedPhysicsDataGD");
            return sub == nullptr? std::optional<Ent::Gen::UnifiedPhysicsDataGD>{}: std::optional<Ent::Gen::UnifiedPhysicsDataGD>(getSubNode("UnifiedPhysicsDataGD"));
        }
        inline Ent::Gen::UnifiedPhysicsDataGD Components::addUnifiedPhysicsDataGD() const
        {
            return Ent::Gen::UnifiedPhysicsDataGD(addSubNode("UnifiedPhysicsDataGD"));
        }
        inline void Components::removeUnifiedPhysicsDataGD() const
        {
            node->mapErase("UnifiedPhysicsDataGD");
        }
        inline std::optional<Ent::Gen::UnitTestComponent> Components::UnitTestComponent() const
        {
            auto sub = getSubNode("UnitTestComponent");
            return sub == nullptr? std::optional<Ent::Gen::UnitTestComponent>{}: std::optional<Ent::Gen::UnitTestComponent>(getSubNode("UnitTestComponent"));
        }
        inline Ent::Gen::UnitTestComponent Components::addUnitTestComponent() const
        {
            return Ent::Gen::UnitTestComponent(addSubNode("UnitTestComponent"));
        }
        inline void Components::removeUnitTestComponent() const
        {
            node->mapErase("UnitTestComponent");
        }
        inline std::optional<Ent::Gen::VelocityObstacleGD> Components::VelocityObstacleGD() const
        {
            auto sub = getSubNode("VelocityObstacleGD");
            return sub == nullptr? std::optional<Ent::Gen::VelocityObstacleGD>{}: std::optional<Ent::Gen::VelocityObstacleGD>(getSubNode("VelocityObstacleGD"));
        }
        inline Ent::Gen::VelocityObstacleGD Components::addVelocityObstacleGD() const
        {
            return Ent::Gen::VelocityObstacleGD(addSubNode("VelocityObstacleGD"));
        }
        inline void Components::removeVelocityObstacleGD() const
        {
            node->mapErase("VelocityObstacleGD");
        }
        inline std::optional<Ent::Gen::VisualGD> Components::VisualGD() const
        {
            auto sub = getSubNode("VisualGD");
            return sub == nullptr? std::optional<Ent::Gen::VisualGD>{}: std::optional<Ent::Gen::VisualGD>(getSubNode("VisualGD"));
        }
        inline Ent::Gen::VisualGD Components::addVisualGD() const
        {
            return Ent::Gen::VisualGD(addSubNode("VisualGD"));
        }
        inline void Components::removeVisualGD() const
        {
            node->mapErase("VisualGD");
        }
        inline std::optional<Ent::Gen::VolumeConstraintGD> Components::VolumeConstraintGD() const
        {
            auto sub = getSubNode("VolumeConstraintGD");
            return sub == nullptr? std::optional<Ent::Gen::VolumeConstraintGD>{}: std::optional<Ent::Gen::VolumeConstraintGD>(getSubNode("VolumeConstraintGD"));
        }
        inline Ent::Gen::VolumeConstraintGD Components::addVolumeConstraintGD() const
        {
            return Ent::Gen::VolumeConstraintGD(addSubNode("VolumeConstraintGD"));
        }
        inline void Components::removeVolumeConstraintGD() const
        {
            node->mapErase("VolumeConstraintGD");
        }
        inline std::optional<Ent::Gen::VoxelSimulationGD> Components::VoxelSimulationGD() const
        {
            auto sub = getSubNode("VoxelSimulationGD");
            return sub == nullptr? std::optional<Ent::Gen::VoxelSimulationGD>{}: std::optional<Ent::Gen::VoxelSimulationGD>(getSubNode("VoxelSimulationGD"));
        }
        inline Ent::Gen::VoxelSimulationGD Components::addVoxelSimulationGD() const
        {
            return Ent::Gen::VoxelSimulationGD(addSubNode("VoxelSimulationGD"));
        }
        inline void Components::removeVoxelSimulationGD() const
        {
            node->mapErase("VoxelSimulationGD");
        }
        inline std::optional<Ent::Gen::WallRunGD> Components::WallRunGD() const
        {
            auto sub = getSubNode("WallRunGD");
            return sub == nullptr? std::optional<Ent::Gen::WallRunGD>{}: std::optional<Ent::Gen::WallRunGD>(getSubNode("WallRunGD"));
        }
        inline Ent::Gen::WallRunGD Components::addWallRunGD() const
        {
            return Ent::Gen::WallRunGD(addSubNode("WallRunGD"));
        }
        inline void Components::removeWallRunGD() const
        {
            node->mapErase("WallRunGD");
        }
        inline std::optional<Ent::Gen::WildObject> Components::WildObject() const
        {
            auto sub = getSubNode("WildObject");
            return sub == nullptr? std::optional<Ent::Gen::WildObject>{}: std::optional<Ent::Gen::WildObject>(getSubNode("WildObject"));
        }
        inline Ent::Gen::WildObject Components::addWildObject() const
        {
            return Ent::Gen::WildObject(addSubNode("WildObject"));
        }
        inline void Components::removeWildObject() const
        {
            node->mapErase("WildObject");
        }
        // UIMessage
        inline Ent::Gen::Color UIMessage::Color() const
        {
            return Ent::Gen::Color(node->at("Color"));
        }
        inline Ent::Gen::Float UIMessage::Duration() const
        {
            return Ent::Gen::Float(node->at("Duration"));
        }
        inline Ent::Gen::String UIMessage::Icon() const
        {
            return Ent::Gen::String(node->at("Icon"));
        }
        inline Ent::Gen::Vector2 UIMessage::ScreenPosition() const
        {
            return Ent::Gen::Vector2(node->at("ScreenPosition"));
        }
        inline Ent::Gen::String UIMessage::Text() const
        {
            return Ent::Gen::String(node->at("Text"));
        }
        inline Ent::Gen::Float UIMessage::TextScale() const
        {
            return Ent::Gen::Float(node->at("TextScale"));
        }
        inline Ent::Gen::String UIMessage::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // UIManager
        inline Ent::Gen::Float UIManager::BarAlpha() const
        {
            return Ent::Gen::Float(node->at("BarAlpha"));
        }
        inline Ent::Gen::Float UIManager::BarHeight() const
        {
            return Ent::Gen::Float(node->at("BarHeight"));
        }
        inline Ent::Gen::Float UIManager::BarWidth() const
        {
            return Ent::Gen::Float(node->at("BarWidth"));
        }
        inline Ent::Gen::String UIManager::BlankMaterialPath() const
        {
            return Ent::Gen::String(node->at("BlankMaterialPath"));
        }
        inline Ent::Gen::Bool UIManager::EnableReticle() const
        {
            return Ent::Gen::Bool(node->at("EnableReticle"));
        }
        inline Ent::Gen::Bool UIManager::EnableReticleLock() const
        {
            return Ent::Gen::Bool(node->at("EnableReticleLock"));
        }
        inline Ent::Gen::String UIManager::Font() const
        {
            return Ent::Gen::String(node->at("Font"));
        }
        inline Ent::Gen::String UIManager::HaloBigGRC() const
        {
            return Ent::Gen::String(node->at("HaloBigGRC"));
        }
        inline Ent::Gen::String UIManager::HaloSmallGRC() const
        {
            return Ent::Gen::String(node->at("HaloSmallGRC"));
        }
        inline Array<Ent::Gen::UIMessage> UIManager::LaunchedMessages() const
        {
            return Array<Ent::Gen::UIMessage>(node->at("LaunchedMessages"));
        }
        inline Ent::Gen::UIMessage UIManager::LaunchedSceneMessage() const
        {
            return Ent::Gen::UIMessage(node->at("LaunchedSceneMessage"));
        }
        inline Ent::Gen::Bool UIManager::ShowFoodBar() const
        {
            return Ent::Gen::Bool(node->at("ShowFoodBar"));
        }
        inline Ent::Gen::Bool UIManager::ShowLifeBar() const
        {
            return Ent::Gen::Bool(node->at("ShowLifeBar"));
        }
        inline Ent::Gen::Bool UIManager::ShowOxygenBar() const
        {
            return Ent::Gen::Bool(node->at("ShowOxygenBar"));
        }
        inline Ent::Gen::Bool UIManager::ShowTempBar() const
        {
            return Ent::Gen::Bool(node->at("ShowTempBar"));
        }
        inline Ent::Gen::Bool UIManager::ShowThirstBar() const
        {
            return Ent::Gen::Bool(node->at("ShowThirstBar"));
        }
        inline Ent::Gen::Bool UIManager::ShowTiredBar() const
        {
            return Ent::Gen::Bool(node->at("ShowTiredBar"));
        }
        inline Ent::Gen::Manager UIManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String UIManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SoundManager
        inline Ent::Gen::Float SoundManager::AmbienceProbeLayerAttenuation() const
        {
            return Ent::Gen::Float(node->at("AmbienceProbeLayerAttenuation"));
        }
        inline Ent::Gen::Int SoundManager::AmbienceProbeLayerCount() const
        {
            return Ent::Gen::Int(node->at("AmbienceProbeLayerCount"));
        }
        inline Ent::Gen::Float SoundManager::AmbienceProbeLayerSpacing() const
        {
            return Ent::Gen::Float(node->at("AmbienceProbeLayerSpacing"));
        }
        inline Ent::Gen::Int SoundManager::AmbienceProbePerLayerCount() const
        {
            return Ent::Gen::Int(node->at("AmbienceProbePerLayerCount"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::String> SoundManager::AmbienceTagMapping() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::String>(node->at("AmbienceTagMapping"));
        }
        inline Ent::Gen::SoundManager_BiomeSoundBank SoundManager::BiomeSoundBank() const
        {
            return Ent::Gen::SoundManager_BiomeSoundBank(node->at("BiomeSoundBank"));
        }
        inline Ent::Gen::Float SoundManager::CallAnswerDelayMax() const
        {
            return Ent::Gen::Float(node->at("CallAnswerDelayMax"));
        }
        inline Ent::Gen::Float SoundManager::CallAnswerDelayMin() const
        {
            return Ent::Gen::Float(node->at("CallAnswerDelayMin"));
        }
        inline Ent::Gen::Float SoundManager::CallDistance() const
        {
            return Ent::Gen::Float(node->at("CallDistance"));
        }
        inline Ent::Gen::Map<StyleModeEnum, Ent::Gen::String> SoundManager::ClassStyleToHitActive() const
        {
            return Ent::Gen::Map<StyleModeEnum, Ent::Gen::String>(node->at("ClassStyleToHitActive"));
        }
        inline Array<Ent::Gen::CreatureTypeData> SoundManager::CreatureType() const
        {
            return Array<Ent::Gen::CreatureTypeData>(node->at("CreatureType"));
        }
        inline Ent::Gen::Bool SoundManager::DisplayListener() const
        {
            return Ent::Gen::Bool(node->at("DisplayListener"));
        }
        inline PrimArray<Ent::Gen::String> SoundManager::EchoEntityNames() const
        {
            return PrimArray<Ent::Gen::String>(node->at("EchoEntityNames"));
        }
        inline Ent::Gen::Bool SoundManager::Enabled() const
        {
            return Ent::Gen::Bool(node->at("Enabled"));
        }
        inline PrimArray<Ent::Gen::String> SoundManager::GroundSFX() const
        {
            return PrimArray<Ent::Gen::String>(node->at("GroundSFX"));
        }
        inline Ent::Gen::String SoundManager::GroundTypeWater() const
        {
            return Ent::Gen::String(node->at("GroundTypeWater"));
        }
        inline Ent::Gen::String SoundManager::GroundTypeWaterDeep() const
        {
            return Ent::Gen::String(node->at("GroundTypeWaterDeep"));
        }
        inline Ent::Gen::String SoundManager::GroundTypeWaterPuddle() const
        {
            return Ent::Gen::String(node->at("GroundTypeWaterPuddle"));
        }
        inline Array<Ent::Gen::GroundTypeData> SoundManager::GroundTypes() const
        {
            return Array<Ent::Gen::GroundTypeData>(node->at("GroundTypes"));
        }
        inline Ent::Gen::Float SoundManager::HitIntensityHigh() const
        {
            return Ent::Gen::Float(node->at("HitIntensityHigh"));
        }
        inline Ent::Gen::Float SoundManager::HitIntensityLow() const
        {
            return Ent::Gen::Float(node->at("HitIntensityLow"));
        }
        inline Ent::Gen::String SoundManager::InWaterEvent() const
        {
            return Ent::Gen::String(node->at("InWaterEvent"));
        }
        inline Ent::Gen::Float SoundManager::ListenerDistanceFromPlayer() const
        {
            return Ent::Gen::Float(node->at("ListenerDistanceFromPlayer"));
        }
        inline Ent::Gen::Bool SoundManager::ListenerOnFreeCam() const
        {
            return Ent::Gen::Bool(node->at("ListenerOnFreeCam"));
        }
        inline Ent::Gen::ScaleConverter SoundManager::OcclusionPlayerSpeedInfluenceSettings() const
        {
            return Ent::Gen::ScaleConverter(node->at("OcclusionPlayerSpeedInfluenceSettings"));
        }
        inline Ent::Gen::String SoundManager::OutWaterEvent() const
        {
            return Ent::Gen::String(node->at("OutWaterEvent"));
        }
        inline Ent::Gen::String SoundManager::RTPC_3DFrontBack() const
        {
            return Ent::Gen::String(node->at("RTPC_3DFrontBack"));
        }
        inline Ent::Gen::String SoundManager::RTPC_3DLeftRight() const
        {
            return Ent::Gen::String(node->at("RTPC_3DLeftRight"));
        }
        inline Ent::Gen::String SoundManager::RTPC_AbsoluteHeight() const
        {
            return Ent::Gen::String(node->at("RTPC_AbsoluteHeight"));
        }
        inline Ent::Gen::String SoundManager::RTPC_AmbSDFDistance() const
        {
            return Ent::Gen::String(node->at("RTPC_AmbSDFDistance"));
        }
        inline Ent::Gen::String SoundManager::RTPC_AmbientRegenLevel() const
        {
            return Ent::Gen::String(node->at("RTPC_AmbientRegenLevel"));
        }
        inline Ent::Gen::String SoundManager::RTPC_AngleToListener() const
        {
            return Ent::Gen::String(node->at("RTPC_AngleToListener"));
        }
        inline Ent::Gen::String SoundManager::RTPC_BoidLeavesCount() const
        {
            return Ent::Gen::String(node->at("RTPC_BoidLeavesCount"));
        }
        inline Ent::Gen::String SoundManager::RTPC_CreatureType() const
        {
            return Ent::Gen::String(node->at("RTPC_CreatureType"));
        }
        inline Ent::Gen::String SoundManager::RTPC_DayHour() const
        {
            return Ent::Gen::String(node->at("RTPC_DayHour"));
        }
        inline Ent::Gen::String SoundManager::RTPC_Distance() const
        {
            return Ent::Gen::String(node->at("RTPC_Distance"));
        }
        inline Ent::Gen::String SoundManager::RTPC_DreamFireDistance() const
        {
            return Ent::Gen::String(node->at("RTPC_DreamFireDistance"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityAttackVolume() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityAttackVolume"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityDoppler() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityDoppler"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityHitIntensity() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityHitIntensity"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityHitVolume() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityHitVolume"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityNodeRegen() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityNodeRegen"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityPitch() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityPitch"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityRunDuration() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityRunDuration"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityScale() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityScale"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntityShamanVisiblity() const
        {
            return Ent::Gen::String(node->at("RTPC_EntityShamanVisiblity"));
        }
        inline Ent::Gen::String SoundManager::RTPC_EntitySpeed() const
        {
            return Ent::Gen::String(node->at("RTPC_EntitySpeed"));
        }
        inline Ent::Gen::String SoundManager::RTPC_FernProximity() const
        {
            return Ent::Gen::String(node->at("RTPC_FernProximity"));
        }
        inline Ent::Gen::String SoundManager::RTPC_FlowersProximity() const
        {
            return Ent::Gen::String(node->at("RTPC_FlowersProximity"));
        }
        inline Ent::Gen::String SoundManager::RTPC_Fx_Speed() const
        {
            return Ent::Gen::String(node->at("RTPC_Fx_Speed"));
        }
        inline Ent::Gen::String SoundManager::RTPC_HunterDistance() const
        {
            return Ent::Gen::String(node->at("RTPC_HunterDistance"));
        }
        inline Ent::Gen::String SoundManager::RTPC_LocateClosestEntity() const
        {
            return Ent::Gen::String(node->at("RTPC_LocateClosestEntity"));
        }
        inline Ent::Gen::String SoundManager::RTPC_LocateEntityPan() const
        {
            return Ent::Gen::String(node->at("RTPC_LocateEntityPan"));
        }
        inline Ent::Gen::String SoundManager::RTPC_OuterToInnerProximityEdges() const
        {
            return Ent::Gen::String(node->at("RTPC_OuterToInnerProximityEdges"));
        }
        inline Ent::Gen::String SoundManager::RTPC_PCEnergy() const
        {
            return Ent::Gen::String(node->at("RTPC_PCEnergy"));
        }
        inline Ent::Gen::String SoundManager::RTPC_PCLife() const
        {
            return Ent::Gen::String(node->at("RTPC_PCLife"));
        }
        inline Ent::Gen::String SoundManager::RTPC_PCScale() const
        {
            return Ent::Gen::String(node->at("RTPC_PCScale"));
        }
        inline Ent::Gen::String SoundManager::RTPC_PCSpeed() const
        {
            return Ent::Gen::String(node->at("RTPC_PCSpeed"));
        }
        inline Ent::Gen::String SoundManager::RTPC_PcNPC() const
        {
            return Ent::Gen::String(node->at("RTPC_PcNPC"));
        }
        inline Ent::Gen::String SoundManager::RTPC_PlayerAbsoluteHeight() const
        {
            return Ent::Gen::String(node->at("RTPC_PlayerAbsoluteHeight"));
        }
        inline Ent::Gen::String SoundManager::RTPC_PlayerAcceleration() const
        {
            return Ent::Gen::String(node->at("RTPC_PlayerAcceleration"));
        }
        inline Ent::Gen::String SoundManager::RTPC_PlayerRelativeHeight() const
        {
            return Ent::Gen::String(node->at("RTPC_PlayerRelativeHeight"));
        }
        inline Ent::Gen::String SoundManager::RTPC_Progress() const
        {
            return Ent::Gen::String(node->at("RTPC_Progress"));
        }
        inline Ent::Gen::String SoundManager::RTPC_RainIntensity() const
        {
            return Ent::Gen::String(node->at("RTPC_RainIntensity"));
        }
        inline Ent::Gen::String SoundManager::RTPC_RelativeHeight() const
        {
            return Ent::Gen::String(node->at("RTPC_RelativeHeight"));
        }
        inline Ent::Gen::String SoundManager::RTPC_StormDistance() const
        {
            return Ent::Gen::String(node->at("RTPC_StormDistance"));
        }
        inline Ent::Gen::String SoundManager::RTPC_StormIntensity() const
        {
            return Ent::Gen::String(node->at("RTPC_StormIntensity"));
        }
        inline Ent::Gen::String SoundManager::RTPC_SwampProximity() const
        {
            return Ent::Gen::String(node->at("RTPC_SwampProximity"));
        }
        inline Ent::Gen::String SoundManager::RTPC_UnderwaterCameraActivator() const
        {
            return Ent::Gen::String(node->at("RTPC_UnderwaterCameraActivator"));
        }
        inline Ent::Gen::String SoundManager::RTPC_UnderwaterDepth() const
        {
            return Ent::Gen::String(node->at("RTPC_UnderwaterDepth"));
        }
        inline Ent::Gen::Float SoundManager::RainLevelStart() const
        {
            return Ent::Gen::Float(node->at("RainLevelStart"));
        }
        inline Ent::Gen::SoundOpportunitiesConfig SoundManager::SoundOpportunitiesConfig() const
        {
            return Ent::Gen::SoundOpportunitiesConfig(node->at("SoundOpportunitiesConfig"));
        }
        inline Ent::Gen::String SoundManager::SoundTagDataFile() const
        {
            return Ent::Gen::String(node->at("SoundTagDataFile"));
        }
        inline Ent::Gen::String SoundManager::Sound_GameEntity_Stop_All() const
        {
            return Ent::Gen::String(node->at("Sound_GameEntity_Stop_All"));
        }
        inline Ent::Gen::String SoundManager::Sound_GameObject_Dial_Stop() const
        {
            return Ent::Gen::String(node->at("Sound_GameObject_Dial_Stop"));
        }
        inline Ent::Gen::String SoundManager::Sound_Game_Pause_All() const
        {
            return Ent::Gen::String(node->at("Sound_Game_Pause_All"));
        }
        inline Ent::Gen::String SoundManager::Sound_Game_Resume_All() const
        {
            return Ent::Gen::String(node->at("Sound_Game_Resume_All"));
        }
        inline Ent::Gen::String SoundManager::SoundbankEventDataFile() const
        {
            return Ent::Gen::String(node->at("SoundbankEventDataFile"));
        }
        inline Ent::Gen::Map<SpecieEnum, Ent::Gen::String> SoundManager::SpeciesToHitActive() const
        {
            return Ent::Gen::Map<SpecieEnum, Ent::Gen::String>(node->at("SpeciesToHitActive"));
        }
        inline Ent::Gen::String SoundManager::StateId_MainBiomeType() const
        {
            return Ent::Gen::String(node->at("StateId_MainBiomeType"));
        }
        inline Ent::Gen::String SoundManager::StateId_RainLevel() const
        {
            return Ent::Gen::String(node->at("StateId_RainLevel"));
        }
        inline Ent::Gen::String SoundManager::State_NoRain() const
        {
            return Ent::Gen::String(node->at("State_NoRain"));
        }
        inline Ent::Gen::String SoundManager::State_Rain() const
        {
            return Ent::Gen::String(node->at("State_Rain"));
        }
        inline Ent::Gen::Manager SoundManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_Appeau() const
        {
            return Ent::Gen::String(node->at("SwitchId_Appeau"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_EntityState() const
        {
            return Ent::Gen::String(node->at("SwitchId_EntityState"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_GiveOrder_Tone() const
        {
            return Ent::Gen::String(node->at("SwitchId_GiveOrder_Tone"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_GiveOrder_Type() const
        {
            return Ent::Gen::String(node->at("SwitchId_GiveOrder_Type"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_GroundType() const
        {
            return Ent::Gen::String(node->at("SwitchId_GroundType"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_Hit_Active() const
        {
            return Ent::Gen::String(node->at("SwitchId_Hit_Active"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_Hit_Intensity() const
        {
            return Ent::Gen::String(node->at("SwitchId_Hit_Intensity"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_Hit_Style() const
        {
            return Ent::Gen::String(node->at("SwitchId_Hit_Style"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_Level() const
        {
            return Ent::Gen::String(node->at("SwitchId_Level"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_OutfitInteraction() const
        {
            return Ent::Gen::String(node->at("SwitchId_OutfitInteraction"));
        }
        inline Ent::Gen::String SoundManager::SwitchId_VegetType() const
        {
            return Ent::Gen::String(node->at("SwitchId_VegetType"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Attack() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Attack"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Cold() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Cold"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Defend() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Defend"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Examine() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Examine"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Flee() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Flee"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Follow() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Follow"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Hungry() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Hungry"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Hunt() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Hunt"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Idle() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Idle"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Protect() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Protect"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Sleep() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Sleep"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Thirst() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Thirst"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Threat() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Threat"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_EntityState_Wait() const
        {
            return Ent::Gen::String(node->at("SwitchState_EntityState_Wait"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_GiveOrder_Follow() const
        {
            return Ent::Gen::String(node->at("SwitchState_GiveOrder_Follow"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_GiveOrder_Insistent() const
        {
            return Ent::Gen::String(node->at("SwitchState_GiveOrder_Insistent"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_GiveOrder_Normal() const
        {
            return Ent::Gen::String(node->at("SwitchState_GiveOrder_Normal"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_GiveOrder_Wait() const
        {
            return Ent::Gen::String(node->at("SwitchState_GiveOrder_Wait"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_Level_High() const
        {
            return Ent::Gen::String(node->at("SwitchState_Level_High"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_Level_Low() const
        {
            return Ent::Gen::String(node->at("SwitchState_Level_Low"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_Level_Medium() const
        {
            return Ent::Gen::String(node->at("SwitchState_Level_Medium"));
        }
        inline Ent::Gen::String SoundManager::SwitchState_Level_VeryHigh() const
        {
            return Ent::Gen::String(node->at("SwitchState_Level_VeryHigh"));
        }
        inline Ent::Gen::String SoundManager::Switch_Ground_Prefix() const
        {
            return Ent::Gen::String(node->at("Switch_Ground_Prefix"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::Color> SoundManager::TagColors() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::Color>(node->at("TagColors"));
        }
        inline Ent::Gen::String SoundManager::UnderWaterBank() const
        {
            return Ent::Gen::String(node->at("UnderWaterBank"));
        }
        inline Ent::Gen::Bool SoundManager::UnderWaterOnPlayer() const
        {
            return Ent::Gen::Bool(node->at("UnderWaterOnPlayer"));
        }
        inline Ent::Gen::Float SoundManager::UnderwaterOutZone() const
        {
            return Ent::Gen::Float(node->at("UnderwaterOutZone"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::String> SoundManager::VegetationTagMapping() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::String>(node->at("VegetationTagMapping"));
        }
        inline Ent::Gen::Float SoundManager::VerticalUnderWaterOffset() const
        {
            return Ent::Gen::Float(node->at("VerticalUnderWaterOffset"));
        }
        inline Ent::Gen::Float SoundManager::VolumeRTPCScaleFactor() const
        {
            return Ent::Gen::Float(node->at("VolumeRTPCScaleFactor"));
        }
        inline Ent::Gen::String SoundManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // OnlineDebugger_BandwidthWindow_BandwithLimit
        inline Ent::Gen::String OnlineDebugger_BandwidthWindow_BandwithLimit::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Color OnlineDebugger_BandwidthWindow_BandwithLimit::color() const
        {
            return Ent::Gen::Color(node->at("color"));
        }
        inline Ent::Gen::Float OnlineDebugger_BandwidthWindow_BandwithLimit::limit() const
        {
            return Ent::Gen::Float(node->at("limit"));
        }
        // OnlineDebugger_BandwidthWindow
        inline Array<Ent::Gen::OnlineDebugger_BandwidthWindow_BandwithLimit> OnlineDebugger_BandwidthWindow::DownColor() const
        {
            return Array<Ent::Gen::OnlineDebugger_BandwidthWindow_BandwithLimit>(node->at("DownColor"));
        }
        inline Ent::Gen::Bool OnlineDebugger_BandwidthWindow::Enabled() const
        {
            return Ent::Gen::Bool(node->at("Enabled"));
        }
        inline Array<Ent::Gen::OnlineDebugger_BandwidthWindow_BandwithLimit> OnlineDebugger_BandwidthWindow::UpColor() const
        {
            return Array<Ent::Gen::OnlineDebugger_BandwidthWindow_BandwithLimit>(node->at("UpColor"));
        }
        inline Ent::Gen::String OnlineDebugger_BandwidthWindow::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // LightComponentGD
        inline Ent::Gen::Vector3 LightComponentGD::AngleOffset() const
        {
            return Ent::Gen::Vector3(node->at("AngleOffset"));
        }
        inline Ent::Gen::Float LightComponentGD::Brightness() const
        {
            return Ent::Gen::Float(node->at("Brightness"));
        }
        inline Ent::Gen::Bool LightComponentGD::CastShadow() const
        {
            return Ent::Gen::Bool(node->at("CastShadow"));
        }
        inline Ent::Gen::Color LightComponentGD::Color() const
        {
            return Ent::Gen::Color(node->at("Color"));
        }
        inline Ent::Gen::Vector3 LightComponentGD::Direction() const
        {
            return Ent::Gen::Vector3(node->at("Direction"));
        }
        inline Ent::Gen::Float LightComponentGD::LinearAttenuationStart() const
        {
            return Ent::Gen::Float(node->at("LinearAttenuationStart"));
        }
        inline Ent::Gen::Float LightComponentGD::LinearAttenuationStop() const
        {
            return Ent::Gen::Float(node->at("LinearAttenuationStop"));
        }
        inline Ent::Gen::Vector3 LightComponentGD::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::Float LightComponentGD::RadialAttenuationStart() const
        {
            return Ent::Gen::Float(node->at("RadialAttenuationStart"));
        }
        inline Ent::Gen::Float LightComponentGD::RadialAttenuationStop() const
        {
            return Ent::Gen::Float(node->at("RadialAttenuationStop"));
        }
        inline Ent::Gen::ComponentGD LightComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::LightType LightComponentGD::Type_() const
        {
            return Ent::Gen::LightType(node->at("Type"));
        }
        inline Ent::Gen::Bool LightComponentGD::VolumetricFog() const
        {
            return Ent::Gen::Bool(node->at("VolumetricFog"));
        }
        inline Ent::Gen::String LightComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GradientColor
        inline Ent::Gen::String GradientColor::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Color GradientColor::color() const
        {
            return Ent::Gen::Color(node->at("color"));
        }
        inline Ent::Gen::Float GradientColor::percent() const
        {
            return Ent::Gen::Float(node->at("percent"));
        }
        // EditorManager
        inline Ent::Gen::Bool EditorManager::ActivateMouseControl() const
        {
            return Ent::Gen::Bool(node->at("ActivateMouseControl"));
        }
        inline Ent::Gen::Bool EditorManager::DisableDisplayDebugEntityInfo() const
        {
            return Ent::Gen::Bool(node->at("DisableDisplayDebugEntityInfo"));
        }
        inline Ent::Gen::Bool EditorManager::GameBlockedWhenActive() const
        {
            return Ent::Gen::Bool(node->at("GameBlockedWhenActive"));
        }
        inline Ent::Gen::Float EditorManager::MoveZ_Blend() const
        {
            return Ent::Gen::Float(node->at("MoveZ_Blend"));
        }
        inline Ent::Gen::Float EditorManager::MoveZ_BlendJoy() const
        {
            return Ent::Gen::Float(node->at("MoveZ_BlendJoy"));
        }
        inline Ent::Gen::Float EditorManager::MoveZ_SpeedAtScreenWidthMax() const
        {
            return Ent::Gen::Float(node->at("MoveZ_SpeedAtScreenWidthMax"));
        }
        inline Ent::Gen::Float EditorManager::MoveZ_SpeedAtScreenWidthMin() const
        {
            return Ent::Gen::Float(node->at("MoveZ_SpeedAtScreenWidthMin"));
        }
        inline Ent::Gen::Float EditorManager::Rotate_AccelerationTime() const
        {
            return Ent::Gen::Float(node->at("Rotate_AccelerationTime"));
        }
        inline Ent::Gen::Float EditorManager::Rotate_Blend() const
        {
            return Ent::Gen::Float(node->at("Rotate_Blend"));
        }
        inline Ent::Gen::Float EditorManager::Rotate_Speed() const
        {
            return Ent::Gen::Float(node->at("Rotate_Speed"));
        }
        inline Ent::Gen::Float EditorManager::Scale_AccelerationTime() const
        {
            return Ent::Gen::Float(node->at("Scale_AccelerationTime"));
        }
        inline Ent::Gen::Float EditorManager::Scale_Blend() const
        {
            return Ent::Gen::Float(node->at("Scale_Blend"));
        }
        inline Ent::Gen::Float EditorManager::Scale_Speed() const
        {
            return Ent::Gen::Float(node->at("Scale_Speed"));
        }
        inline Ent::Gen::Float EditorManager::Selection_DistanceMax() const
        {
            return Ent::Gen::Float(node->at("Selection_DistanceMax"));
        }
        inline Ent::Gen::Manager EditorManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::Color EditorManager::Text_BackgroundColor() const
        {
            return Ent::Gen::Color(node->at("Text_BackgroundColor"));
        }
        inline Ent::Gen::Color EditorManager::Text_DefaultColor() const
        {
            return Ent::Gen::Color(node->at("Text_DefaultColor"));
        }
        inline Ent::Gen::Float EditorManager::Text_Scale() const
        {
            return Ent::Gen::Float(node->at("Text_Scale"));
        }
        inline Ent::Gen::Color EditorManager::Text_SelectedColor() const
        {
            return Ent::Gen::Color(node->at("Text_SelectedColor"));
        }
        inline Ent::Gen::String EditorManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BoidsGD
        inline Ent::Gen::Bool BoidsGD::AffectedByFluid() const
        {
            return Ent::Gen::Bool(node->at("AffectedByFluid"));
        }
        inline Ent::Gen::Bool BoidsGD::AllowMerge() const
        {
            return Ent::Gen::Bool(node->at("AllowMerge"));
        }
        inline Ent::Gen::Bool BoidsGD::AutoMoveRoot() const
        {
            return Ent::Gen::Bool(node->at("AutoMoveRoot"));
        }
        inline Ent::Gen::EntityRef BoidsGD::BudEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("BudEntityRef"));
        }
        inline Ent::Gen::Float BoidsGD::BudVisualScaleMax() const
        {
            return Ent::Gen::Float(node->at("BudVisualScaleMax"));
        }
        inline Ent::Gen::Float BoidsGD::BudVisualScaleMin() const
        {
            return Ent::Gen::Float(node->at("BudVisualScaleMin"));
        }
        inline Ent::Gen::Bool BoidsGD::DisplayMaster() const
        {
            return Ent::Gen::Bool(node->at("DisplayMaster"));
        }
        inline Ent::Gen::Float BoidsGD::FlockingAttackDamages() const
        {
            return Ent::Gen::Float(node->at("FlockingAttackDamages"));
        }
        inline Ent::Gen::Float BoidsGD::FluidSurfaceHeightOffset() const
        {
            return Ent::Gen::Float(node->at("FluidSurfaceHeightOffset"));
        }
        inline Ent::Gen::Bool BoidsGD::ForceOutsideWater() const
        {
            return Ent::Gen::Bool(node->at("ForceOutsideWater"));
        }
        inline Ent::Gen::EntityRef BoidsGD::FullEntityPoolRef() const
        {
            return Ent::Gen::EntityRef(node->at("FullEntityPoolRef"));
        }
        inline Ent::Gen::Float BoidsGD::GetBackToFlockingDuration() const
        {
            return Ent::Gen::Float(node->at("GetBackToFlockingDuration"));
        }
        inline Ent::Gen::Float BoidsGD::GhostDuration() const
        {
            return Ent::Gen::Float(node->at("GhostDuration"));
        }
        inline Ent::Gen::Bool BoidsGD::HackCanCreateHitRigidbody() const
        {
            return Ent::Gen::Bool(node->at("HackCanCreateHitRigidbody"));
        }
        inline Ent::Gen::Float BoidsGD::HierarchyDistanceMultiplier() const
        {
            return Ent::Gen::Float(node->at("HierarchyDistanceMultiplier"));
        }
        inline Ent::Gen::Float BoidsGD::InitialRadius() const
        {
            return Ent::Gen::Float(node->at("InitialRadius"));
        }
        inline Ent::Gen::Float BoidsGD::LightBrightness() const
        {
            return Ent::Gen::Float(node->at("LightBrightness"));
        }
        inline Ent::Gen::Color BoidsGD::LightColor() const
        {
            return Ent::Gen::Color(node->at("LightColor"));
        }
        inline Ent::Gen::Float BoidsGD::MainTargetHeight() const
        {
            return Ent::Gen::Float(node->at("MainTargetHeight"));
        }
        inline Ent::Gen::Float BoidsGD::MainTargetRotateDistance() const
        {
            return Ent::Gen::Float(node->at("MainTargetRotateDistance"));
        }
        inline Ent::Gen::Float BoidsGD::MainTargetSpeedMultiplier() const
        {
            return Ent::Gen::Float(node->at("MainTargetSpeedMultiplier"));
        }
        inline Ent::Gen::Float BoidsGD::MinRegenToWakeUp() const
        {
            return Ent::Gen::Float(node->at("MinRegenToWakeUp"));
        }
        inline Ent::Gen::Int BoidsGD::NbAgents() const
        {
            return Ent::Gen::Int(node->at("NbAgents"));
        }
        inline Ent::Gen::Int BoidsGD::NbAgentsPerZone() const
        {
            return Ent::Gen::Int(node->at("NbAgentsPerZone"));
        }
        inline Ent::Gen::String BoidsGD::ParamBlock() const
        {
            return Ent::Gen::String(node->at("ParamBlock"));
        }
        inline Ent::Gen::String BoidsGD::ParamBudAppear() const
        {
            return Ent::Gen::String(node->at("ParamBudAppear"));
        }
        inline Ent::Gen::String BoidsGD::ParamBudOpen() const
        {
            return Ent::Gen::String(node->at("ParamBudOpen"));
        }
        inline Ent::Gen::String BoidsGD::ParamHome() const
        {
            return Ent::Gen::String(node->at("ParamHome"));
        }
        inline Ent::Gen::String BoidsGD::ParamMove() const
        {
            return Ent::Gen::String(node->at("ParamMove"));
        }
        inline Ent::Gen::String BoidsGD::ParamSwim() const
        {
            return Ent::Gen::String(node->at("ParamSwim"));
        }
        inline Ent::Gen::String BoidsGD::ParamWakeUp() const
        {
            return Ent::Gen::String(node->at("ParamWakeUp"));
        }
        inline Ent::Gen::Float BoidsGD::PointCloudSearchRadius() const
        {
            return Ent::Gen::Float(node->at("PointCloudSearchRadius"));
        }
        inline Ent::Gen::String BoidsGD::PointCloudTag() const
        {
            return Ent::Gen::String(node->at("PointCloudTag"));
        }
        inline Ent::Gen::String BoidsGD::PresetName() const
        {
            return Ent::Gen::String(node->at("PresetName"));
        }
        inline Ent::Gen::String BoidsGD::PresetNameBud() const
        {
            return Ent::Gen::String(node->at("PresetNameBud"));
        }
        inline Ent::Gen::Float BoidsGD::RegenMaxThreshold() const
        {
            return Ent::Gen::Float(node->at("RegenMaxThreshold"));
        }
        inline Ent::Gen::ComponentGD BoidsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Float BoidsGD::VisualScaleMax() const
        {
            return Ent::Gen::Float(node->at("VisualScaleMax"));
        }
        inline Ent::Gen::Float BoidsGD::VisualScaleMin() const
        {
            return Ent::Gen::Float(node->at("VisualScaleMin"));
        }
        inline Ent::Gen::Float BoidsGD::WakeUpDuration() const
        {
            return Ent::Gen::Float(node->at("WakeUpDuration"));
        }
        inline Ent::Gen::String BoidsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Collider
        inline Ent::Gen::String Collider::BoneName() const
        {
            return Ent::Gen::String(node->at("BoneName"));
        }
        inline Ent::Gen::Float Collider::RadiusFactor() const
        {
            return Ent::Gen::Float(node->at("RadiusFactor"));
        }
        inline Ent::Gen::String Collider::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Codec
        // Zlib
        inline Ent::Gen::Codec Zlib::Super() const
        {
            return Ent::Gen::Codec(node->at("Super"));
        }
        inline Ent::Gen::String Zlib::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Lz4Fast
        inline Ent::Gen::Codec Lz4Fast::Super() const
        {
            return Ent::Gen::Codec(node->at("Super"));
        }
        inline Ent::Gen::String Lz4Fast::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ClimbEdgeData_LedgeData
        inline Ent::Gen::String ClimbEdgeData_LedgeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float ClimbEdgeData_LedgeData::ledgeApproachSpeedMaxZ() const
        {
            return Ent::Gen::Float(node->at("ledgeApproachSpeedMaxZ"));
        }
        inline Ent::Gen::Float ClimbEdgeData_LedgeData::ledgeDepthRadiusCoeff() const
        {
            return Ent::Gen::Float(node->at("ledgeDepthRadiusCoeff"));
        }
        inline Ent::Gen::Vector3 ClimbEdgeData_LedgeData::ledgeDetectionOffset() const
        {
            return Ent::Gen::Vector3(node->at("ledgeDetectionOffset"));
        }
        inline Ent::Gen::Float ClimbEdgeData_LedgeData::ledgeDetectionRadiusMultiplier() const
        {
            return Ent::Gen::Float(node->at("ledgeDetectionRadiusMultiplier"));
        }
        inline Ent::Gen::Float ClimbEdgeData_LedgeData::ledgeMaxDistance() const
        {
            return Ent::Gen::Float(node->at("ledgeMaxDistance"));
        }
        inline Ent::Gen::Float ClimbEdgeData_LedgeData::ledgeMaxHeightEpsilon() const
        {
            return Ent::Gen::Float(node->at("ledgeMaxHeightEpsilon"));
        }
        inline Ent::Gen::Float ClimbEdgeData_LedgeData::ledgeMinDepthEpsilon() const
        {
            return Ent::Gen::Float(node->at("ledgeMinDepthEpsilon"));
        }
        inline Ent::Gen::Float ClimbEdgeData_LedgeData::ledgeMinWidthEpsilon() const
        {
            return Ent::Gen::Float(node->at("ledgeMinWidthEpsilon"));
        }
        // ClimbEdgeData
        inline Ent::Gen::String ClimbEdgeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::ScaleConverter ClimbEdgeData::edgeDetectionAnticipation() const
        {
            return Ent::Gen::ScaleConverter(node->at("edgeDetectionAnticipation"));
        }
        inline Ent::Gen::Float ClimbEdgeData::edgeDetectionMaxFlotation() const
        {
            return Ent::Gen::Float(node->at("edgeDetectionMaxFlotation"));
        }
        inline Ent::Gen::ClimbEdgeData_LedgeData ClimbEdgeData::ledgeData() const
        {
            return Ent::Gen::ClimbEdgeData_LedgeData(node->at("ledgeData"));
        }
        inline Ent::Gen::ClimbEdgeData_LedgeData ClimbEdgeData::ledgeDataImmersed() const
        {
            return Ent::Gen::ClimbEdgeData_LedgeData(node->at("ledgeDataImmersed"));
        }
        // ClassMemberRef
        inline Ent::Gen::String ClassMemberRef::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String ClassMemberRef::class_() const
        {
            return Ent::Gen::String(node->at("class"));
        }
        inline Ent::Gen::String ClassMemberRef::member() const
        {
            return Ent::Gen::String(node->at("member"));
        }
        // ComponentSignalRef
        inline Ent::Gen::ClassMemberRef ComponentSignalRef::Signal() const
        {
            return Ent::Gen::ClassMemberRef(node->at("Signal"));
        }
        inline Ent::Gen::String ComponentSignalRef::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ComponentMethodRef
        inline Ent::Gen::ClassMemberRef ComponentMethodRef::Method() const
        {
            return Ent::Gen::ClassMemberRef(node->at("Method"));
        }
        inline Ent::Gen::String ComponentMethodRef::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Connection
        inline Ent::Gen::String Connection::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::ComponentMethodRef Connection::receiver() const
        {
            return Ent::Gen::ComponentMethodRef(node->at("receiver"));
        }
        inline Ent::Gen::ComponentSignalRef Connection::sender() const
        {
            return Ent::Gen::ComponentSignalRef(node->at("sender"));
        }
        // CinematicSlot
        inline Ent::Gen::String CinematicSlot::Anim() const
        {
            return Ent::Gen::String(node->at("Anim"));
        }
        inline Ent::Gen::Bool CinematicSlot::CameraHolder() const
        {
            return Ent::Gen::Bool(node->at("CameraHolder"));
        }
        inline Ent::Gen::Bool CinematicSlot::CanBeInstanciated() const
        {
            return Ent::Gen::Bool(node->at("CanBeInstanciated"));
        }
        inline Ent::Gen::Bool CinematicSlot::DestroyAfter() const
        {
            return Ent::Gen::Bool(node->at("DestroyAfter"));
        }
        inline Ent::Gen::EntityRef CinematicSlot::EntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("EntityRef"));
        }
        inline Ent::Gen::Bool CinematicSlot::EventCameraHolder() const
        {
            return Ent::Gen::Bool(node->at("EventCameraHolder"));
        }
        inline Ent::Gen::Float CinematicSlot::FOV() const
        {
            return Ent::Gen::Float(node->at("FOV"));
        }
        inline Ent::Gen::Float CinematicSlot::FadeInDelay() const
        {
            return Ent::Gen::Float(node->at("FadeInDelay"));
        }
        inline Ent::Gen::Float CinematicSlot::FadeOutDelay() const
        {
            return Ent::Gen::Float(node->at("FadeOutDelay"));
        }
        inline Ent::Gen::Transform3D CinematicSlot::InitTransform() const
        {
            return Ent::Gen::Transform3D(node->at("InitTransform"));
        }
        inline Ent::Gen::Bool CinematicSlot::MainRole() const
        {
            return Ent::Gen::Bool(node->at("MainRole"));
        }
        inline Ent::Gen::Bool CinematicSlot::Mandatory() const
        {
            return Ent::Gen::Bool(node->at("Mandatory"));
        }
        inline Ent::Gen::String CinematicSlot::Role() const
        {
            return Ent::Gen::String(node->at("Role"));
        }
        inline Ent::Gen::String CinematicSlot::RoleInNextSequence() const
        {
            return Ent::Gen::String(node->at("RoleInNextSequence"));
        }
        inline Ent::Gen::Bool CinematicSlot::Visible() const
        {
            return Ent::Gen::Bool(node->at("Visible"));
        }
        inline Ent::Gen::String CinematicSlot::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Sequence
        inline Ent::Gen::Float Sequence::ActivationDelay() const
        {
            return Ent::Gen::Float(node->at("ActivationDelay"));
        }
        inline Ent::Gen::Bool Sequence::AutoSwitchToNextSequence() const
        {
            return Ent::Gen::Bool(node->at("AutoSwitchToNextSequence"));
        }
        inline Ent::Gen::String Sequence::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::CinematicSlot> Sequence::actors() const
        {
            return Array<Ent::Gen::CinematicSlot>(node->at("actors"));
        }
        inline Ent::Gen::Bool Sequence::loop() const
        {
            return Ent::Gen::Bool(node->at("loop"));
        }
        inline Ent::Gen::String Sequence::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        // CinematicGD
        inline Ent::Gen::Float CinematicGD::ActivationDistance() const
        {
            return Ent::Gen::Float(node->at("ActivationDistance"));
        }
        inline Array<Ent::Gen::ResponsiblePointer_CineEvent_> CinematicGD::ScriptEvents() const
        {
            return Array<Ent::Gen::ResponsiblePointer_CineEvent_>(node->at("ScriptEvents"));
        }
        inline Array<Ent::Gen::Sequence> CinematicGD::Sequences() const
        {
            return Array<Ent::Gen::Sequence>(node->at("Sequences"));
        }
        inline Ent::Gen::Bool CinematicGD::Skippable() const
        {
            return Ent::Gen::Bool(node->at("Skippable"));
        }
        inline Ent::Gen::ComponentGD CinematicGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::CinematicUpdateType CinematicGD::UpdateType() const
        {
            return Ent::Gen::CinematicUpdateType(node->at("UpdateType"));
        }
        inline Ent::Gen::String CinematicGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEvent
        inline Ent::Gen::Bool CineEvent::Active() const
        {
            return Ent::Gen::Bool(node->at("Active"));
        }
        inline Ent::Gen::String CineEvent::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTrigger
        inline Ent::Gen::CineEvent CineEventTrigger::Super() const
        {
            return Ent::Gen::CineEvent(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTrigger::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTriggerPlaySound
        inline Ent::Gen::String CineEventTriggerPlaySound::SoundEventName() const
        {
            return Ent::Gen::String(node->at("SoundEventName"));
        }
        inline Ent::Gen::CineEventTrigger CineEventTriggerPlaySound::Super() const
        {
            return Ent::Gen::CineEventTrigger(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTriggerPlaySound::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTriggerPlaySequence
        inline Ent::Gen::Int CineEventTriggerPlaySequence::SequenceID() const
        {
            return Ent::Gen::Int(node->at("SequenceID"));
        }
        inline Ent::Gen::CineEventTrigger CineEventTriggerPlaySequence::Super() const
        {
            return Ent::Gen::CineEventTrigger(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTriggerPlaySequence::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTriggerGameStateChange
        inline Ent::Gen::String CineEventTriggerGameStateChange::GameStateName() const
        {
            return Ent::Gen::String(node->at("GameStateName"));
        }
        inline Ent::Gen::CineEventTrigger CineEventTriggerGameStateChange::Super() const
        {
            return Ent::Gen::CineEventTrigger(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTriggerGameStateChange::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTriggerEventHandlerPost
        inline Ent::Gen::String CineEventTriggerEventHandlerPost::EventCategory() const
        {
            return Ent::Gen::String(node->at("EventCategory"));
        }
        inline Ent::Gen::String CineEventTriggerEventHandlerPost::EventName() const
        {
            return Ent::Gen::String(node->at("EventName"));
        }
        inline Ent::Gen::CineEventTrigger CineEventTriggerEventHandlerPost::Super() const
        {
            return Ent::Gen::CineEventTrigger(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTriggerEventHandlerPost::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTriggerDisplayUIMessage
        inline Ent::Gen::CineEventTrigger CineEventTriggerDisplayUIMessage::Super() const
        {
            return Ent::Gen::CineEventTrigger(node->at("Super"));
        }
        inline Ent::Gen::UIMessage CineEventTriggerDisplayUIMessage::UIMessage() const
        {
            return Ent::Gen::UIMessage(node->at("UIMessage"));
        }
        inline Ent::Gen::String CineEventTriggerDisplayUIMessage::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTest
        inline Ent::Gen::Bool CineEventTest::InvertTest() const
        {
            return Ent::Gen::Bool(node->at("InvertTest"));
        }
        inline Ent::Gen::CineEvent CineEventTest::Super() const
        {
            return Ent::Gen::CineEvent(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTest::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTestIsCanceled
        inline Ent::Gen::CineEventTest CineEventTestIsCanceled::Super() const
        {
            return Ent::Gen::CineEventTest(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTestIsCanceled::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTestInput
        inline Ent::Gen::Bool CineEventTestInput::AnyButtonInput() const
        {
            return Ent::Gen::Bool(node->at("AnyButtonInput"));
        }
        inline Ent::Gen::Bool CineEventTestInput::AnyJoyInput() const
        {
            return Ent::Gen::Bool(node->at("AnyJoyInput"));
        }
        inline Ent::Gen::CineEventTest CineEventTestInput::Super() const
        {
            return Ent::Gen::CineEventTest(node->at("Super"));
        }
        inline Ent::Gen::Bool CineEventTestInput::TriangleButtonInput() const
        {
            return Ent::Gen::Bool(node->at("TriangleButtonInput"));
        }
        inline Ent::Gen::String CineEventTestInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTestEndCurrentSequence
        inline Ent::Gen::CineEventTest CineEventTestEndCurrentSequence::Super() const
        {
            return Ent::Gen::CineEventTest(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTestEndCurrentSequence::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CineEventTestCurrentGameState
        inline Ent::Gen::String CineEventTestCurrentGameState::GameStateName() const
        {
            return Ent::Gen::String(node->at("GameStateName"));
        }
        inline Ent::Gen::CineEventTest CineEventTestCurrentGameState::Super() const
        {
            return Ent::Gen::CineEventTest(node->at("Super"));
        }
        inline Ent::Gen::String CineEventTestCurrentGameState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CharacterControllerSlideData
        inline Ent::Gen::String CharacterControllerSlideData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::ScaleConverter CharacterControllerSlideData::adherenceRecoverSpeedDependingOnTheSlope() const
        {
            return Ent::Gen::ScaleConverter(node->at("adherenceRecoverSpeedDependingOnTheSlope"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::adherenceThresholdHysteresis() const
        {
            return Ent::Gen::Float(node->at("adherenceThresholdHysteresis"));
        }
        inline Ent::Gen::ScaleConverter CharacterControllerSlideData::adherenceThresholdRequiredToKeepControl() const
        {
            return Ent::Gen::ScaleConverter(node->at("adherenceThresholdRequiredToKeepControl"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::adherenceUsingDownwardSlopeDirection() const
        {
            return Ent::Gen::Float(node->at("adherenceUsingDownwardSlopeDirection"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::adherenceUsingSideSlopeDirection() const
        {
            return Ent::Gen::Float(node->at("adherenceUsingSideSlopeDirection"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::adherenceUsingUpwardSlopeDirection() const
        {
            return Ent::Gen::Float(node->at("adherenceUsingUpwardSlopeDirection"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::animblendInTime() const
        {
            return Ent::Gen::Float(node->at("animblendInTime"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::friction() const
        {
            return Ent::Gen::Float(node->at("friction"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::maxSlopeAngle() const
        {
            return Ent::Gen::Float(node->at("maxSlopeAngle"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::speedMediumCoeffHysteresis() const
        {
            return Ent::Gen::Float(node->at("speedMediumCoeffHysteresis"));
        }
        inline Ent::Gen::ScaleConverter CharacterControllerSlideData::speedMediumCoeffIn() const
        {
            return Ent::Gen::ScaleConverter(node->at("speedMediumCoeffIn"));
        }
        inline Ent::Gen::Float CharacterControllerSlideData::speedMediumCoeffMin() const
        {
            return Ent::Gen::Float(node->at("speedMediumCoeffMin"));
        }
        // CharacterControllerGroundNormalData
        inline Ent::Gen::Bool CharacterControllerGroundNormalData::AllowOtherCreatureCast() const
        {
            return Ent::Gen::Bool(node->at("AllowOtherCreatureCast"));
        }
        inline Ent::Gen::Float CharacterControllerGroundNormalData::PercentageEdgeTolerance() const
        {
            return Ent::Gen::Float(node->at("PercentageEdgeTolerance"));
        }
        inline Ent::Gen::Float CharacterControllerGroundNormalData::PercentageExtirpate() const
        {
            return Ent::Gen::Float(node->at("PercentageExtirpate"));
        }
        inline Ent::Gen::Float CharacterControllerGroundNormalData::WallAngle() const
        {
            return Ent::Gen::Float(node->at("WallAngle"));
        }
        inline Ent::Gen::ScaleConverter CharacterControllerGroundNormalData::WallCosAngleSpeedXYFactor() const
        {
            return Ent::Gen::ScaleConverter(node->at("WallCosAngleSpeedXYFactor"));
        }
        inline Ent::Gen::String CharacterControllerGroundNormalData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CharacterControllerClamberData
        inline Ent::Gen::Float CharacterControllerClamberData::DropOffAngle() const
        {
            return Ent::Gen::Float(node->at("DropOffAngle"));
        }
        inline Ent::Gen::Float CharacterControllerClamberData::EnterAngle() const
        {
            return Ent::Gen::Float(node->at("EnterAngle"));
        }
        inline Ent::Gen::Float CharacterControllerClamberData::ExitAngle() const
        {
            return Ent::Gen::Float(node->at("ExitAngle"));
        }
        inline Ent::Gen::Bool CharacterControllerClamberData::IsAllowed() const
        {
            return Ent::Gen::Bool(node->at("IsAllowed"));
        }
        inline Ent::Gen::ScaleConverter CharacterControllerClamberData::VerticalOrientationRatio() const
        {
            return Ent::Gen::ScaleConverter(node->at("VerticalOrientationRatio"));
        }
        inline Ent::Gen::String CharacterControllerClamberData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CapabilitiesAndTags
        inline Ent::Gen::PrimitiveSet<NavMeshCapabilityEnum> CapabilitiesAndTags::Capabilities() const
        {
            return Ent::Gen::PrimitiveSet<NavMeshCapabilityEnum>(node->at("Capabilities"));
        }
        inline Ent::Gen::PrimitiveSet<NavMeshTagEnum> CapabilitiesAndTags::Tags() const
        {
            return Ent::Gen::PrimitiveSet<NavMeshTagEnum>(node->at("Tags"));
        }
        inline Ent::Gen::String CapabilitiesAndTags::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ZoneStamper
        inline Ent::Gen::CapabilitiesAndTags ZoneStamper::CapabilitiesAndTags() const
        {
            return Ent::Gen::CapabilitiesAndTags(node->at("CapabilitiesAndTags"));
        }
        inline Ent::Gen::Float ZoneStamper::DownwardOffset() const
        {
            return Ent::Gen::Float(node->at("DownwardOffset"));
        }
        inline Ent::Gen::variant_EntityRef_NavMeshArea_ ZoneStamper::NavMeshArea() const
        {
            return Ent::Gen::variant_EntityRef_NavMeshArea_(node->at("NavMeshArea"));
        }
        inline Ent::Gen::Int ZoneStamper::Priority() const
        {
            return Ent::Gen::Int(node->at("Priority"));
        }
        inline Ent::Gen::variant_ZoneCylinderShape_ZoneMeshShape_ ZoneStamper::Shape() const
        {
            return Ent::Gen::variant_ZoneCylinderShape_ZoneMeshShape_(node->at("Shape"));
        }
        inline Ent::Gen::GeometryStamper ZoneStamper::Super() const
        {
            return Ent::Gen::GeometryStamper(node->at("Super"));
        }
        inline Ent::Gen::Float ZoneStamper::UpwardOffset() const
        {
            return Ent::Gen::Float(node->at("UpwardOffset"));
        }
        inline Ent::Gen::String ZoneStamper::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // OffMeshLink
        inline Ent::Gen::String OffMeshLink::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool OffMeshLink::bidirectional() const
        {
            return Ent::Gen::Bool(node->at("bidirectional"));
        }
        inline Ent::Gen::CapabilitiesAndTags OffMeshLink::capabilitiesAndTags() const
        {
            return Ent::Gen::CapabilitiesAndTags(node->at("capabilitiesAndTags"));
        }
        inline Ent::Gen::EntityRef OffMeshLink::destination() const
        {
            return Ent::Gen::EntityRef(node->at("destination"));
        }
        inline Ent::Gen::Float OffMeshLink::radius() const
        {
            return Ent::Gen::Float(node->at("radius"));
        }
        // NavMeshStamperGD
        inline Ent::Gen::Bool NavMeshStamperGD::IsActive() const
        {
            return Ent::Gen::Bool(node->at("IsActive"));
        }
        inline Array<Ent::Gen::MeshStamper> NavMeshStamperGD::MeshStampers() const
        {
            return Array<Ent::Gen::MeshStamper>(node->at("MeshStampers"));
        }
        inline Array<Ent::Gen::OffMeshLink> NavMeshStamperGD::OffMeshLinks() const
        {
            return Array<Ent::Gen::OffMeshLink>(node->at("OffMeshLinks"));
        }
        inline Array<Ent::Gen::SkinnedPhysMeshStamper> NavMeshStamperGD::SkinnedMeshStampers() const
        {
            return Array<Ent::Gen::SkinnedPhysMeshStamper>(node->at("SkinnedMeshStampers"));
        }
        inline Ent::Gen::ComponentGD NavMeshStamperGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Array<Ent::Gen::ZoneStamper> NavMeshStamperGD::ZoneStampers() const
        {
            return Array<Ent::Gen::ZoneStamper>(node->at("ZoneStampers"));
        }
        inline Ent::Gen::String NavMeshStamperGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CanTakeHit
        inline Ent::Gen::String CanTakeHit::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool CanTakeHit::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::Bool CanTakeHit::val() const
        {
            return Ent::Gen::Bool(node->at("val"));
        }
        // CreatureComponentInput
        inline Ent::Gen::CanTakeHit CreatureComponentInput::CanTakeHit() const
        {
            return Ent::Gen::CanTakeHit(node->at("CanTakeHit"));
        }
        inline Ent::Gen::DeltaTimeFactor CreatureComponentInput::DeltaTimeFactor() const
        {
            return Ent::Gen::DeltaTimeFactor(node->at("DeltaTimeFactor"));
        }
        inline Ent::Gen::Invincible CreatureComponentInput::Invincible() const
        {
            return Ent::Gen::Invincible(node->at("Invincible"));
        }
        inline Ent::Gen::ComponentInput CreatureComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::String CreatureComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CameraSetterGD
        inline Ent::Gen::Bool CameraSetterGD::SetPositionToHotspot() const
        {
            return Ent::Gen::Bool(node->at("SetPositionToHotspot"));
        }
        inline Ent::Gen::ComponentGD CameraSetterGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Bool CameraSetterGD::SwitchToType() const
        {
            return Ent::Gen::Bool(node->at("SwitchToType"));
        }
        inline Ent::Gen::CameraType CameraSetterGD::Type_() const
        {
            return Ent::Gen::CameraType(node->at("Type"));
        }
        inline Ent::Gen::String CameraSetterGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CameraSoundEvent
        inline Ent::Gen::String CameraSoundEvent::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String CameraSoundEvent::eventName() const
        {
            return Ent::Gen::String(node->at("eventName"));
        }
        inline Ent::Gen::String CameraSoundEvent::from_() const
        {
            return Ent::Gen::String(node->at("from"));
        }
        inline Ent::Gen::String CameraSoundEvent::to() const
        {
            return Ent::Gen::String(node->at("to"));
        }
        // CameraShakeData
        inline Ent::Gen::String CameraShakeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float CameraShakeData::shakeDuration() const
        {
            return Ent::Gen::Float(node->at("shakeDuration"));
        }
        inline Ent::Gen::Float CameraShakeData::shakeFrequency() const
        {
            return Ent::Gen::Float(node->at("shakeFrequency"));
        }
        inline Ent::Gen::Float CameraShakeData::shakeIntensity() const
        {
            return Ent::Gen::Float(node->at("shakeIntensity"));
        }
        inline Ent::Gen::Vector3 CameraShakeData::shakeRotation() const
        {
            return Ent::Gen::Vector3(node->at("shakeRotation"));
        }
        // ExplosionEffect
        inline Ent::Gen::Float ExplosionEffect::ControllerVibrationCoef() const
        {
            return Ent::Gen::Float(node->at("ControllerVibrationCoef"));
        }
        inline Ent::Gen::Float ExplosionEffect::DistanceReductionStep() const
        {
            return Ent::Gen::Float(node->at("DistanceReductionStep"));
        }
        inline Ent::Gen::Float ExplosionEffect::Force() const
        {
            return Ent::Gen::Float(node->at("Force"));
        }
        inline Ent::Gen::Float ExplosionEffect::ForceReductionByStep() const
        {
            return Ent::Gen::Float(node->at("ForceReductionByStep"));
        }
        inline Ent::Gen::Float ExplosionEffect::ShakeAttenuationRadius() const
        {
            return Ent::Gen::Float(node->at("ShakeAttenuationRadius"));
        }
        inline Ent::Gen::CameraShakeData ExplosionEffect::ShakeData() const
        {
            return Ent::Gen::CameraShakeData(node->at("ShakeData"));
        }
        inline Ent::Gen::Float ExplosionEffect::ShakeRadius() const
        {
            return Ent::Gen::Float(node->at("ShakeRadius"));
        }
        inline Ent::Gen::GameEffect ExplosionEffect::Super() const
        {
            return Ent::Gen::GameEffect(node->at("Super"));
        }
        inline Ent::Gen::String ExplosionEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CameraFreeData
        inline Ent::Gen::Float CameraFreeData::Acceleration() const
        {
            return Ent::Gen::Float(node->at("Acceleration"));
        }
        inline Ent::Gen::Float CameraFreeData::Deceleration() const
        {
            return Ent::Gen::Float(node->at("Deceleration"));
        }
        inline Ent::Gen::Float CameraFreeData::JoyThreshold() const
        {
            return Ent::Gen::Float(node->at("JoyThreshold"));
        }
        inline Ent::Gen::Float CameraFreeData::MoveBlend() const
        {
            return Ent::Gen::Float(node->at("MoveBlend"));
        }
        inline Ent::Gen::Float CameraFreeData::MoveSpeed() const
        {
            return Ent::Gen::Float(node->at("MoveSpeed"));
        }
        inline Ent::Gen::Float CameraFreeData::MoveSpeedZ() const
        {
            return Ent::Gen::Float(node->at("MoveSpeedZ"));
        }
        inline Ent::Gen::Float CameraFreeData::RotateBlendX() const
        {
            return Ent::Gen::Float(node->at("RotateBlendX"));
        }
        inline Ent::Gen::Float CameraFreeData::RotateBlendY() const
        {
            return Ent::Gen::Float(node->at("RotateBlendY"));
        }
        inline Ent::Gen::Float CameraFreeData::RotateSpeedX() const
        {
            return Ent::Gen::Float(node->at("RotateSpeedX"));
        }
        inline Ent::Gen::Float CameraFreeData::RotateSpeedY() const
        {
            return Ent::Gen::Float(node->at("RotateSpeedY"));
        }
        inline Ent::Gen::Float CameraFreeData::SpeedMax() const
        {
            return Ent::Gen::Float(node->at("SpeedMax"));
        }
        inline Ent::Gen::String CameraFreeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CameraEditorData
        inline Ent::Gen::Float CameraEditorData::DistanceMax() const
        {
            return Ent::Gen::Float(node->at("DistanceMax"));
        }
        inline Ent::Gen::Float CameraEditorData::DistanceMin() const
        {
            return Ent::Gen::Float(node->at("DistanceMin"));
        }
        inline Ent::Gen::Float CameraEditorData::MoveBlend() const
        {
            return Ent::Gen::Float(node->at("MoveBlend"));
        }
        inline Ent::Gen::Float CameraEditorData::MoveSpeedAtScreenWidthMax() const
        {
            return Ent::Gen::Float(node->at("MoveSpeedAtScreenWidthMax"));
        }
        inline Ent::Gen::Float CameraEditorData::MoveSpeedAtScreenWidthMin() const
        {
            return Ent::Gen::Float(node->at("MoveSpeedAtScreenWidthMin"));
        }
        inline Ent::Gen::Float CameraEditorData::RotateBlendX() const
        {
            return Ent::Gen::Float(node->at("RotateBlendX"));
        }
        inline Ent::Gen::Float CameraEditorData::RotateBlendY() const
        {
            return Ent::Gen::Float(node->at("RotateBlendY"));
        }
        inline Ent::Gen::Float CameraEditorData::RotateSpeedX() const
        {
            return Ent::Gen::Float(node->at("RotateSpeedX"));
        }
        inline Ent::Gen::Float CameraEditorData::RotateSpeedY() const
        {
            return Ent::Gen::Float(node->at("RotateSpeedY"));
        }
        inline Ent::Gen::Float CameraEditorData::ScreenWidthMax() const
        {
            return Ent::Gen::Float(node->at("ScreenWidthMax"));
        }
        inline Ent::Gen::Float CameraEditorData::ScreenWidthMin() const
        {
            return Ent::Gen::Float(node->at("ScreenWidthMin"));
        }
        inline Ent::Gen::Float CameraEditorData::ZoomBlend() const
        {
            return Ent::Gen::Float(node->at("ZoomBlend"));
        }
        inline Ent::Gen::Float CameraEditorData::ZoomSpeedAtScreenWidthMax() const
        {
            return Ent::Gen::Float(node->at("ZoomSpeedAtScreenWidthMax"));
        }
        inline Ent::Gen::Float CameraEditorData::ZoomSpeedAtScreenWidthMin() const
        {
            return Ent::Gen::Float(node->at("ZoomSpeedAtScreenWidthMin"));
        }
        inline Ent::Gen::String CameraEditorData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CameraManager
        inline Ent::Gen::Bool CameraManager::ActivateDoF() const
        {
            return Ent::Gen::Bool(node->at("ActivateDoF"));
        }
        inline Ent::Gen::Vector2 CameraManager::AnglesLevels() const
        {
            return Ent::Gen::Vector2(node->at("AnglesLevels"));
        }
        inline Ent::Gen::Bool CameraManager::CameraControlAxisInvertX() const
        {
            return Ent::Gen::Bool(node->at("CameraControlAxisInvertX"));
        }
        inline Ent::Gen::Bool CameraManager::CameraControlAxisInvertY() const
        {
            return Ent::Gen::Bool(node->at("CameraControlAxisInvertY"));
        }
        inline Ent::Gen::Vector2 CameraManager::DistanceFromTopPosition() const
        {
            return Ent::Gen::Vector2(node->at("DistanceFromTopPosition"));
        }
        inline Ent::Gen::CameraEditorData CameraManager::Editor() const
        {
            return Ent::Gen::CameraEditorData(node->at("Editor"));
        }
        inline Ent::Gen::CameraFreeData CameraManager::Free() const
        {
            return Ent::Gen::CameraFreeData(node->at("Free"));
        }
        inline Ent::Gen::Vector2 CameraManager::HeightLevel() const
        {
            return Ent::Gen::Vector2(node->at("HeightLevel"));
        }
        inline Ent::Gen::Float CameraManager::RotatePitchIn() const
        {
            return Ent::Gen::Float(node->at("RotatePitchIn"));
        }
        inline Ent::Gen::Float CameraManager::RotatePitchOut() const
        {
            return Ent::Gen::Float(node->at("RotatePitchOut"));
        }
        inline Ent::Gen::Float CameraManager::RotateYawIn() const
        {
            return Ent::Gen::Float(node->at("RotateYawIn"));
        }
        inline Ent::Gen::Float CameraManager::RotateYawOut() const
        {
            return Ent::Gen::Float(node->at("RotateYawOut"));
        }
        inline Ent::Gen::Float CameraManager::SpeedHorizontal() const
        {
            return Ent::Gen::Float(node->at("SpeedHorizontal"));
        }
        inline Ent::Gen::Float CameraManager::SpeedVertical() const
        {
            return Ent::Gen::Float(node->at("SpeedVertical"));
        }
        inline Ent::Gen::Manager CameraManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String CameraManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BoneStartPoint
        inline Ent::Gen::String BoneStartPoint::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool BoneStartPoint::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::String BoneStartPoint::val() const
        {
            return Ent::Gen::String(node->at("val"));
        }
        // InteractorGD
        inline PrimArray<Ent::Gen::String> InteractorGD::BeamEffectsNames() const
        {
            return PrimArray<Ent::Gen::String>(node->at("BeamEffectsNames"));
        }
        inline Ent::Gen::BoneStartPoint InteractorGD::BoneStartPoint() const
        {
            return Ent::Gen::BoneStartPoint(node->at("BoneStartPoint"));
        }
        inline Ent::Gen::Float InteractorGD::MaxBeamRange() const
        {
            return Ent::Gen::Float(node->at("MaxBeamRange"));
        }
        inline Ent::Gen::Float InteractorGD::RandomSphereCastsAngle() const
        {
            return Ent::Gen::Float(node->at("RandomSphereCastsAngle"));
        }
        inline Ent::Gen::Int InteractorGD::RandomSphereCastsNb() const
        {
            return Ent::Gen::Int(node->at("RandomSphereCastsNb"));
        }
        inline Ent::Gen::Float InteractorGD::RememberTargetMaxTime() const
        {
            return Ent::Gen::Float(node->at("RememberTargetMaxTime"));
        }
        inline Ent::Gen::Float InteractorGD::SphereCastRadius() const
        {
            return Ent::Gen::Float(node->at("SphereCastRadius"));
        }
        inline Ent::Gen::ComponentGD InteractorGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String InteractorGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BoneAnimation
        inline Ent::Gen::String BoneAnimation::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Array<Ent::Gen::Vector4> BoneAnimation::Rotations() const
        {
            return Array<Ent::Gen::Vector4>(node->at("Rotations"));
        }
        inline Array<Ent::Gen::Vector3> BoneAnimation::Scales() const
        {
            return Array<Ent::Gen::Vector3>(node->at("Scales"));
        }
        inline Array<Ent::Gen::Vector4> BoneAnimation::Translations() const
        {
            return Array<Ent::Gen::Vector4>(node->at("Translations"));
        }
        inline Ent::Gen::String BoneAnimation::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BoidSpeedMaxData
        inline Ent::Gen::Float BoidSpeedMaxData::Duration() const
        {
            return Ent::Gen::Float(node->at("Duration"));
        }
        inline Ent::Gen::Float BoidSpeedMaxData::SpeedMax() const
        {
            return Ent::Gen::Float(node->at("SpeedMax"));
        }
        inline Ent::Gen::String BoidSpeedMaxData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BlendShapeAnimation
        inline Ent::Gen::String BlendShapeAnimation::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline PrimArray<Ent::Gen::Float> BlendShapeAnimation::Weights() const
        {
            return PrimArray<Ent::Gen::Float>(node->at("Weights"));
        }
        inline Ent::Gen::String BlendShapeAnimation::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationIntermediateFormat
        inline Array<Ent::Gen::BlendShapeAnimation> AnimationIntermediateFormat::BlendShapeAnimations() const
        {
            return Array<Ent::Gen::BlendShapeAnimation>(node->at("BlendShapeAnimations"));
        }
        inline Array<Ent::Gen::BoneAnimation> AnimationIntermediateFormat::BoneAnimations() const
        {
            return Array<Ent::Gen::BoneAnimation>(node->at("BoneAnimations"));
        }
        inline Ent::Gen::Int AnimationIntermediateFormat::EndFrame() const
        {
            return Ent::Gen::Int(node->at("EndFrame"));
        }
        inline Ent::Gen::Float AnimationIntermediateFormat::EndTime() const
        {
            return Ent::Gen::Float(node->at("EndTime"));
        }
        inline Ent::Gen::Int AnimationIntermediateFormat::NumFrames() const
        {
            return Ent::Gen::Int(node->at("NumFrames"));
        }
        inline Ent::Gen::Float AnimationIntermediateFormat::Period() const
        {
            return Ent::Gen::Float(node->at("Period"));
        }
        inline Ent::Gen::Int AnimationIntermediateFormat::StartFrame() const
        {
            return Ent::Gen::Int(node->at("StartFrame"));
        }
        inline Ent::Gen::Float AnimationIntermediateFormat::StartTime() const
        {
            return Ent::Gen::Float(node->at("StartTime"));
        }
        inline Ent::Gen::String AnimationIntermediateFormat::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BiteData
        inline Ent::Gen::Bool BiteData::CanBiteBiped() const
        {
            return Ent::Gen::Bool(node->at("CanBiteBiped"));
        }
        inline Ent::Gen::Bool BiteData::CanBiteFriends() const
        {
            return Ent::Gen::Bool(node->at("CanBiteFriends"));
        }
        inline Ent::Gen::Bool BiteData::CheckHotspotOrientation() const
        {
            return Ent::Gen::Bool(node->at("CheckHotspotOrientation"));
        }
        inline Ent::Gen::String BiteData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool BiteData::bezierMove() const
        {
            return Ent::Gen::Bool(node->at("bezierMove"));
        }
        inline Ent::Gen::Float BiteData::biteDamagePerSec() const
        {
            return Ent::Gen::Float(node->at("biteDamagePerSec"));
        }
        inline Ent::Gen::Float BiteData::biteDefenseDamages() const
        {
            return Ent::Gen::Float(node->at("biteDefenseDamages"));
        }
        inline Ent::Gen::Float BiteData::biteDuration() const
        {
            return Ent::Gen::Float(node->at("biteDuration"));
        }
        inline Ent::Gen::Float BiteData::biteMaxRange() const
        {
            return Ent::Gen::Float(node->at("biteMaxRange"));
        }
        // BiomeSoundBank_sBiomeEnv
        inline Ent::Gen::String BiomeSoundBank_sBiomeEnv::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Float BiomeSoundBank_sBiomeEnv::Spread() const
        {
            return Ent::Gen::Float(node->at("Spread"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeEnv::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BiomeSoundBank_sBiomeSound
        inline Ent::Gen::String BiomeSoundBank_sBiomeSound::AuxSend() const
        {
            return Ent::Gen::String(node->at("AuxSend"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSound::Bank() const
        {
            return Ent::Gen::String(node->at("Bank"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSound::Event() const
        {
            return Ent::Gen::String(node->at("Event"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSound::Event_Stop() const
        {
            return Ent::Gen::String(node->at("Event_Stop"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSound::MainState() const
        {
            return Ent::Gen::String(node->at("MainState"));
        }
        inline Ent::Gen::BiomeSoundBank_sBiomeEnv BiomeSoundBank_sBiomeSound::Super() const
        {
            return Ent::Gen::BiomeSoundBank_sBiomeEnv(node->at("Super"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSound::Tag() const
        {
            return Ent::Gen::String(node->at("Tag"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSound::Volume() const
        {
            return Ent::Gen::String(node->at("Volume"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSound::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BiomeSoundBank_sBiomeSFX
        inline Ent::Gen::String BiomeSoundBank_sBiomeSFX::Rtpc() const
        {
            return Ent::Gen::String(node->at("Rtpc"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSFX::SFX() const
        {
            return Ent::Gen::String(node->at("SFX"));
        }
        inline Ent::Gen::BiomeSoundBank_sBiomeEnv BiomeSoundBank_sBiomeSFX::Super() const
        {
            return Ent::Gen::BiomeSoundBank_sBiomeEnv(node->at("Super"));
        }
        inline Ent::Gen::String BiomeSoundBank_sBiomeSFX::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BiomeSoundBank
        inline Array<Ent::Gen::BiomeSoundBank_sBiomeSFX> BiomeSoundBank::BiomeSFX() const
        {
            return Array<Ent::Gen::BiomeSoundBank_sBiomeSFX>(node->at("BiomeSFX"));
        }
        inline Array<Ent::Gen::BiomeSoundBank_sBiomeSound> BiomeSoundBank::BiomeSounds() const
        {
            return Array<Ent::Gen::BiomeSoundBank_sBiomeSound>(node->at("BiomeSounds"));
        }
        inline Ent::Gen::String BiomeSoundBank::DefaultBiomeName() const
        {
            return Ent::Gen::String(node->at("DefaultBiomeName"));
        }
        inline Ent::Gen::String BiomeSoundBank::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BillboardRendererProperties
        inline Ent::Gen::BillboardRenderingAttribute BillboardRendererProperties::Attribute() const
        {
            return Ent::Gen::BillboardRenderingAttribute(node->at("Attribute"));
        }
        inline Ent::Gen::BillboardCameraFacingQuadType BillboardRendererProperties::BillboardType() const
        {
            return Ent::Gen::BillboardCameraFacingQuadType(node->at("BillboardType"));
        }
        inline PrimArray<Ent::Gen::String> BillboardRendererProperties::ExtraMaterialPathArray() const
        {
            return PrimArray<Ent::Gen::String>(node->at("ExtraMaterialPathArray"));
        }
        inline Ent::Gen::String BillboardRendererProperties::MaterialPath() const
        {
            return Ent::Gen::String(node->at("MaterialPath"));
        }
        inline Ent::Gen::Int BillboardRendererProperties::NbMeshInstances() const
        {
            return Ent::Gen::Int(node->at("NbMeshInstances"));
        }
        inline Ent::Gen::Int BillboardRendererProperties::NbQuads() const
        {
            return Ent::Gen::Int(node->at("NbQuads"));
        }
        inline Ent::Gen::Vector3 BillboardRendererProperties::Offset() const
        {
            return Ent::Gen::Vector3(node->at("Offset"));
        }
        inline Ent::Gen::BillboardRenderingSides BillboardRendererProperties::Sides() const
        {
            return Ent::Gen::BillboardRenderingSides(node->at("Sides"));
        }
        inline Ent::Gen::String BillboardRendererProperties::VisualPath() const
        {
            return Ent::Gen::String(node->at("VisualPath"));
        }
        inline Ent::Gen::String BillboardRendererProperties::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BillboardProperties
        inline Ent::Gen::Float BillboardProperties::Duration() const
        {
            return Ent::Gen::Float(node->at("Duration"));
        }
        inline Ent::Gen::Bool BillboardProperties::Looping() const
        {
            return Ent::Gen::Bool(node->at("Looping"));
        }
        inline Ent::Gen::Float BillboardProperties::Luminosity() const
        {
            return Ent::Gen::Float(node->at("Luminosity"));
        }
        inline Ent::Gen::String BillboardProperties::LuminosityCurvePath() const
        {
            return Ent::Gen::String(node->at("LuminosityCurvePath"));
        }
        inline Ent::Gen::Float BillboardProperties::LuminosityVariability() const
        {
            return Ent::Gen::Float(node->at("LuminosityVariability"));
        }
        inline Array<Ent::Gen::BillboardRendererProperties> BillboardProperties::RenderingProperties() const
        {
            return Array<Ent::Gen::BillboardRendererProperties>(node->at("RenderingProperties"));
        }
        inline Ent::Gen::BillboardRenderingType BillboardProperties::RenderingType() const
        {
            return Ent::Gen::BillboardRenderingType(node->at("RenderingType"));
        }
        inline Ent::Gen::Vector3 BillboardProperties::Size() const
        {
            return Ent::Gen::Vector3(node->at("Size"));
        }
        inline Ent::Gen::String BillboardProperties::SizeCurvePath() const
        {
            return Ent::Gen::String(node->at("SizeCurvePath"));
        }
        inline Ent::Gen::Vector3 BillboardProperties::SizeVariability() const
        {
            return Ent::Gen::Vector3(node->at("SizeVariability"));
        }
        inline Ent::Gen::String BillboardProperties::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BehaviorTypedValue
        inline Ent::Gen::variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_ BehaviorTypedValue::Value() const
        {
            return Ent::Gen::variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_(node->at("Value"));
        }
        inline Ent::Gen::String BehaviorTypedValue::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BehaviorScriptData
        inline Ent::Gen::Map<char const*, Ent::Gen::BehaviorTypedValue> BehaviorScriptData::DataMap() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::BehaviorTypedValue>(node->at("DataMap"));
        }
        inline Ent::Gen::String BehaviorScriptData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Int BehaviorScriptData::attackAggressivityDecrease() const
        {
            return Ent::Gen::Int(node->at("attackAggressivityDecrease"));
        }
        inline Ent::Gen::Int BehaviorScriptData::hardFeelingsFriendlyHitCount() const
        {
            return Ent::Gen::Int(node->at("hardFeelingsFriendlyHitCount"));
        }
        inline Ent::Gen::Int BehaviorScriptData::hardFeelingsNotFriendlyHitCount() const
        {
            return Ent::Gen::Int(node->at("hardFeelingsNotFriendlyHitCount"));
        }
        inline Ent::Gen::Int BehaviorScriptData::panicAggressivityDecrease() const
        {
            return Ent::Gen::Int(node->at("panicAggressivityDecrease"));
        }
        inline Array<Ent::Gen::ShootSequenceData> BehaviorScriptData::shootSequence() const
        {
            return Array<Ent::Gen::ShootSequenceData>(node->at("shootSequence"));
        }
        // CreatureAIGD
        inline PrimArray<Ent::Gen::String> CreatureAIGD::BehaviorModifiersTags() const
        {
            return PrimArray<Ent::Gen::String>(node->at("BehaviorModifiersTags"));
        }
        inline Ent::Gen::String CreatureAIGD::BehaviorPath() const
        {
            return Ent::Gen::String(node->at("BehaviorPath"));
        }
        inline Ent::Gen::String CreatureAIGD::BehaviorState() const
        {
            return Ent::Gen::String(node->at("BehaviorState"));
        }
        inline Ent::Gen::Bool CreatureAIGD::CanBeMaster() const
        {
            return Ent::Gen::Bool(node->at("CanBeMaster"));
        }
        inline Ent::Gen::ComponentGD CreatureAIGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String CreatureAIGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::BehaviorScriptData CreatureAIGD::behaviorScriptData() const
        {
            return Ent::Gen::BehaviorScriptData(node->at("behaviorScriptData"));
        }
        inline Ent::Gen::Float CreatureAIGD::m_oblivionTimerAfterSuspicious() const
        {
            return Ent::Gen::Float(node->at("m_oblivionTimerAfterSuspicious"));
        }
        inline Ent::Gen::Float CreatureAIGD::m_oblivionTimerBeforeSuspicious() const
        {
            return Ent::Gen::Float(node->at("m_oblivionTimerBeforeSuspicious"));
        }
        inline Ent::Gen::Float CreatureAIGD::m_timerBeforeCertain() const
        {
            return Ent::Gen::Float(node->at("m_timerBeforeCertain"));
        }
        inline Ent::Gen::Float CreatureAIGD::m_timerBeforeSuspicious() const
        {
            return Ent::Gen::Float(node->at("m_timerBeforeSuspicious"));
        }
        // BeamTargetGD
        inline Ent::Gen::String BeamTargetGD::EventTriggered() const
        {
            return Ent::Gen::String(node->at("EventTriggered"));
        }
        inline Ent::Gen::HotSpotType BeamTargetGD::HotspotType() const
        {
            return Ent::Gen::HotSpotType(node->at("HotspotType"));
        }
        inline Ent::Gen::Float BeamTargetGD::InteractMaxDistance() const
        {
            return Ent::Gen::Float(node->at("InteractMaxDistance"));
        }
        inline Ent::Gen::Float BeamTargetGD::InteractionRadius() const
        {
            return Ent::Gen::Float(node->at("InteractionRadius"));
        }
        inline Ent::Gen::BeamStaffMode BeamTargetGD::Mode() const
        {
            return Ent::Gen::BeamStaffMode(node->at("Mode"));
        }
        inline Ent::Gen::ComponentGD BeamTargetGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String BeamTargetGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BaseParameters
        inline Ent::Gen::String BaseParameters::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float BaseParameters::additionalSpeedRequired() const
        {
            return Ent::Gen::Float(node->at("additionalSpeedRequired"));
        }
        inline Ent::Gen::Vector3 BaseParameters::direction() const
        {
            return Ent::Gen::Vector3(node->at("direction"));
        }
        inline Ent::Gen::Int BaseParameters::flags() const
        {
            return Ent::Gen::Int(node->at("flags"));
        }
        inline Ent::Gen::Float BaseParameters::force() const
        {
            return Ent::Gen::Float(node->at("force"));
        }
        inline Ent::Gen::Position BaseParameters::position() const
        {
            return Ent::Gen::Position(node->at("position"));
        }
        inline Ent::Gen::Bool BaseParameters::shouldIgnoreSourceContactsDuringHit() const
        {
            return Ent::Gen::Bool(node->at("shouldIgnoreSourceContactsDuringHit"));
        }
        inline Ent::Gen::Size BaseParameters::size() const
        {
            return Ent::Gen::Size(node->at("size"));
        }
        inline Ent::Gen::HitStyle BaseParameters::style() const
        {
            return Ent::Gen::HitStyle(node->at("style"));
        }
        inline Ent::Gen::HitType BaseParameters::type() const
        {
            return Ent::Gen::HitType(node->at("type"));
        }
        // Hit
        inline Ent::Gen::BaseParameters Hit::BaseParameters() const
        {
            return Ent::Gen::BaseParameters(node->at("BaseParameters"));
        }
        inline Ent::Gen::DamagesInstant Hit::DamageInstantParameters() const
        {
            return Ent::Gen::DamagesInstant(node->at("DamageInstantParameters"));
        }
        inline Ent::Gen::TargetCollision Hit::TargetCollision() const
        {
            return Ent::Gen::TargetCollision(node->at("TargetCollision"));
        }
        inline Ent::Gen::String Hit::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AttackPositionRetimingData_SpecieRetimingCoeff
        inline Ent::Gen::String AttackPositionRetimingData_SpecieRetimingCoeff::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float AttackPositionRetimingData_SpecieRetimingCoeff::defaultCoeff() const
        {
            return Ent::Gen::Float(node->at("defaultCoeff"));
        }
        inline Ent::Gen::Float AttackPositionRetimingData_SpecieRetimingCoeff::masterCoeff() const
        {
            return Ent::Gen::Float(node->at("masterCoeff"));
        }
        // AttackPositionRetimingData
        inline Ent::Gen::String AttackPositionRetimingData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float AttackPositionRetimingData::animTranslationCoeff() const
        {
            return Ent::Gen::Float(node->at("animTranslationCoeff"));
        }
        inline Ent::Gen::Map<SpecieEnum, Ent::Gen::AttackPositionRetimingData_SpecieRetimingCoeff> AttackPositionRetimingData::backwardRetimingCoeffBySpecie() const
        {
            return Ent::Gen::Map<SpecieEnum, Ent::Gen::AttackPositionRetimingData_SpecieRetimingCoeff>(node->at("backwardRetimingCoeffBySpecie"));
        }
        inline Ent::Gen::Float AttackPositionRetimingData::lengthMax() const
        {
            return Ent::Gen::Float(node->at("lengthMax"));
        }
        inline Ent::Gen::Float AttackPositionRetimingData::lengthMin() const
        {
            return Ent::Gen::Float(node->at("lengthMin"));
        }
        inline Ent::Gen::Float AttackPositionRetimingData::spherecastRadiusCoeff() const
        {
            return Ent::Gen::Float(node->at("spherecastRadiusCoeff"));
        }
        // AttackPhysicsForceData
        inline Ent::Gen::String AttackPhysicsForceData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float AttackPhysicsForceData::amount() const
        {
            return Ent::Gen::Float(node->at("amount"));
        }
        // AttackImpactData
        inline Ent::Gen::String AttackImpactData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float AttackImpactData::amount() const
        {
            return Ent::Gen::Float(node->at("amount"));
        }
        // AttackData
        inline Ent::Gen::AttackType AttackData::DefaultAttackType() const
        {
            return Ent::Gen::AttackType(node->at("DefaultAttackType"));
        }
        inline Ent::Gen::String AttackData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AttackDamageData
        inline Ent::Gen::String AttackDamageData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float AttackDamageData::amount() const
        {
            return Ent::Gen::Float(node->at("amount"));
        }
        // GameAttackData
        inline Ent::Gen::Float GameAttackData::AggressiveDuration() const
        {
            return Ent::Gen::Float(node->at("AggressiveDuration"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::CameraShakeData> GameAttackData::AttackCameraShakeData() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::CameraShakeData>(node->at("AttackCameraShakeData"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::AttackDamageData> GameAttackData::AttackDamageData() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::AttackDamageData>(node->at("AttackDamageData"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::AttackImpactData> GameAttackData::AttackImpactData() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::AttackImpactData>(node->at("AttackImpactData"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::AttackPhysicsForceData> GameAttackData::AttackPhysicsForceData() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::AttackPhysicsForceData>(node->at("AttackPhysicsForceData"));
        }
        inline Ent::Gen::ScaleConverter GameAttackData::DashTargetImpulse() const
        {
            return Ent::Gen::ScaleConverter(node->at("DashTargetImpulse"));
        }
        inline Ent::Gen::Float GameAttackData::ShapeAfterGlowTime() const
        {
            return Ent::Gen::Float(node->at("ShapeAfterGlowTime"));
        }
        inline Ent::Gen::Float GameAttackData::ShapeAnticipationTime() const
        {
            return Ent::Gen::Float(node->at("ShapeAnticipationTime"));
        }
        inline Ent::Gen::Float GameAttackData::ShapePassivedAnticipationTime() const
        {
            return Ent::Gen::Float(node->at("ShapePassivedAnticipationTime"));
        }
        inline Ent::Gen::Float GameAttackData::ShapeRadiusScale() const
        {
            return Ent::Gen::Float(node->at("ShapeRadiusScale"));
        }
        inline Ent::Gen::Float GameAttackData::SpeedLockedDelayAfterDodge() const
        {
            return Ent::Gen::Float(node->at("SpeedLockedDelayAfterDodge"));
        }
        inline Ent::Gen::Bool GameAttackData::UseMountAttack() const
        {
            return Ent::Gen::Bool(node->at("UseMountAttack"));
        }
        inline Ent::Gen::String GameAttackData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // GameManager
        inline Ent::Gen::Float GameManager::ActionAttackValidityTime() const
        {
            return Ent::Gen::Float(node->at("ActionAttackValidityTime"));
        }
        inline Ent::Gen::GameAttackData GameManager::AttackData() const
        {
            return Ent::Gen::GameAttackData(node->at("AttackData"));
        }
        inline Ent::Gen::FreezeData GameManager::BeamFreezeData() const
        {
            return Ent::Gen::FreezeData(node->at("BeamFreezeData"));
        }
        inline Ent::Gen::GameBeamSnapData GameManager::BeamSnapData() const
        {
            return Ent::Gen::GameBeamSnapData(node->at("BeamSnapData"));
        }
        inline Ent::Gen::GameBiteData GameManager::BiteData() const
        {
            return Ent::Gen::GameBiteData(node->at("BiteData"));
        }
        inline Ent::Gen::Map<char const*, Ent::Gen::Float> GameManager::CameraParamsSmoothData() const
        {
            return Ent::Gen::Map<char const*, Ent::Gen::Float>(node->at("CameraParamsSmoothData"));
        }
        inline Ent::Gen::ConstrainedInputData GameManager::ConstrainedInputData() const
        {
            return Ent::Gen::ConstrainedInputData(node->at("ConstrainedInputData"));
        }
        inline Ent::Gen::GameDeathData GameManager::DeathData() const
        {
            return Ent::Gen::GameDeathData(node->at("DeathData"));
        }
        inline Ent::Gen::Float GameManager::DefaultCameraParamsSmoothValue() const
        {
            return Ent::Gen::Float(node->at("DefaultCameraParamsSmoothValue"));
        }
        inline Ent::Gen::Int GameManager::DefaultGamePadID() const
        {
            return Ent::Gen::Int(node->at("DefaultGamePadID"));
        }
        inline Ent::Gen::GameEdgeData GameManager::EdgeData() const
        {
            return Ent::Gen::GameEdgeData(node->at("EdgeData"));
        }
        inline Ent::Gen::Bool GameManager::EnableSplashScreen() const
        {
            return Ent::Gen::Bool(node->at("EnableSplashScreen"));
        }
        inline Ent::Gen::GameFeetCatchUpData GameManager::FeetCatchUpData() const
        {
            return Ent::Gen::GameFeetCatchUpData(node->at("FeetCatchUpData"));
        }
        inline Ent::Gen::GameFluidData GameManager::FluidData() const
        {
            return Ent::Gen::GameFluidData(node->at("FluidData"));
        }
        inline Ent::Gen::GameFlyData GameManager::FlyData() const
        {
            return Ent::Gen::GameFlyData(node->at("FlyData"));
        }
        inline Ent::Gen::Float GameManager::GamePadAimHysteresis() const
        {
            return Ent::Gen::Float(node->at("GamePadAimHysteresis"));
        }
        inline Ent::Gen::Float GameManager::GamePadAimThreshold() const
        {
            return Ent::Gen::Float(node->at("GamePadAimThreshold"));
        }
        inline Ent::Gen::GamePadNavigationData GameManager::GamePadNavigationData() const
        {
            return Ent::Gen::GamePadNavigationData(node->at("GamePadNavigationData"));
        }
        inline Ent::Gen::Float GameManager::GamePadRumbleScale() const
        {
            return Ent::Gen::Float(node->at("GamePadRumbleScale"));
        }
        inline Ent::Gen::GamePadSpeedBehaviorData GameManager::GamePadSpeedBehaviorData() const
        {
            return Ent::Gen::GamePadSpeedBehaviorData(node->at("GamePadSpeedBehaviorData"));
        }
        inline Ent::Gen::Float GameManager::GameSpawnFadeInDelay() const
        {
            return Ent::Gen::Float(node->at("GameSpawnFadeInDelay"));
        }
        inline Ent::Gen::Float GameManager::GameSpawnFadeInDuration() const
        {
            return Ent::Gen::Float(node->at("GameSpawnFadeInDuration"));
        }
        inline Ent::Gen::CameraShakeData GameManager::HitShakeData() const
        {
            return Ent::Gen::CameraShakeData(node->at("HitShakeData"));
        }
        inline Array<Ent::Gen::GameImmersionData> GameManager::ImmersionData() const
        {
            return Array<Ent::Gen::GameImmersionData>(node->at("ImmersionData"));
        }
        inline Ent::Gen::ScaleConverter GameManager::InputCollisionAnticipationLength() const
        {
            return Ent::Gen::ScaleConverter(node->at("InputCollisionAnticipationLength"));
        }
        inline Ent::Gen::Float GameManager::InteractionDisplayHysteresis() const
        {
            return Ent::Gen::Float(node->at("InteractionDisplayHysteresis"));
        }
        inline Ent::Gen::Float GameManager::InteractionPressDuration() const
        {
            return Ent::Gen::Float(node->at("InteractionPressDuration"));
        }
        inline Ent::Gen::Float GameManager::InteractionScreenViewDistance() const
        {
            return Ent::Gen::Float(node->at("InteractionScreenViewDistance"));
        }
        inline Ent::Gen::String GameManager::IntroVideo() const
        {
            return Ent::Gen::String(node->at("IntroVideo"));
        }
        inline Ent::Gen::GameLODData GameManager::LODData() const
        {
            return Ent::Gen::GameLODData(node->at("LODData"));
        }
        inline Ent::Gen::GameImmersionData GameManager::LavaImmersionData() const
        {
            return Ent::Gen::GameImmersionData(node->at("LavaImmersionData"));
        }
        inline Ent::Gen::Float GameManager::LockTargetMaxDistance() const
        {
            return Ent::Gen::Float(node->at("LockTargetMaxDistance"));
        }
        inline Ent::Gen::Float GameManager::LockTargetScreenViewDistance() const
        {
            return Ent::Gen::Float(node->at("LockTargetScreenViewDistance"));
        }
        inline Ent::Gen::Float GameManager::Long_Press_Duration() const
        {
            return Ent::Gen::Float(node->at("Long Press Duration"));
        }
        inline Ent::Gen::Bool GameManager::MountOnlyOnFollower() const
        {
            return Ent::Gen::Bool(node->at("MountOnlyOnFollower"));
        }
        inline Ent::Gen::String GameManager::NewGameVideo() const
        {
            return Ent::Gen::String(node->at("NewGameVideo"));
        }
        inline Ent::Gen::String GameManager::NewGameVideoMusicStart() const
        {
            return Ent::Gen::String(node->at("NewGameVideoMusicStart"));
        }
        inline Ent::Gen::String GameManager::NewGameVideoMusicStop() const
        {
            return Ent::Gen::String(node->at("NewGameVideoMusicStop"));
        }
        inline Ent::Gen::GameParryData GameManager::ParryData() const
        {
            return Ent::Gen::GameParryData(node->at("ParryData"));
        }
        inline Ent::Gen::GamePropelData GameManager::PropelData() const
        {
            return Ent::Gen::GamePropelData(node->at("PropelData"));
        }
        inline Ent::Gen::GameRespawnData GameManager::RespawnData() const
        {
            return Ent::Gen::GameRespawnData(node->at("RespawnData"));
        }
        inline Ent::Gen::GameReviveData GameManager::ReviveData() const
        {
            return Ent::Gen::GameReviveData(node->at("ReviveData"));
        }
        inline Ent::Gen::GameShamanVisionData GameManager::ShamanVisionData() const
        {
            return Ent::Gen::GameShamanVisionData(node->at("ShamanVisionData"));
        }
        inline Ent::Gen::GameSlopeData GameManager::SlopeData() const
        {
            return Ent::Gen::GameSlopeData(node->at("SlopeData"));
        }
        inline Ent::Gen::GameSnapData GameManager::SnapData() const
        {
            return Ent::Gen::GameSnapData(node->at("SnapData"));
        }
        inline Ent::Gen::GameSoftCollisionData GameManager::SoftCollisionData() const
        {
            return Ent::Gen::GameSoftCollisionData(node->at("SoftCollisionData"));
        }
        inline Ent::Gen::String GameManager::Sound_TopView_Start() const
        {
            return Ent::Gen::String(node->at("Sound_TopView_Start"));
        }
        inline Ent::Gen::String GameManager::Sound_TopView_Stop() const
        {
            return Ent::Gen::String(node->at("Sound_TopView_Stop"));
        }
        inline Ent::Gen::Map<SizeEnum, Ent::Gen::Float> GameManager::SpeedMaxInUndergroundCavity() const
        {
            return Ent::Gen::Map<SizeEnum, Ent::Gen::Float>(node->at("SpeedMaxInUndergroundCavity"));
        }
        inline Ent::Gen::String GameManager::SplashScreenSoundStart() const
        {
            return Ent::Gen::String(node->at("SplashScreenSoundStart"));
        }
        inline Ent::Gen::String GameManager::SplashScreenSoundStop() const
        {
            return Ent::Gen::String(node->at("SplashScreenSoundStop"));
        }
        inline Ent::Gen::Manager GameManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::GameImmersionData GameManager::WaterImmersionData() const
        {
            return Ent::Gen::GameImmersionData(node->at("WaterImmersionData"));
        }
        inline Ent::Gen::String GameManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AreaNavigation
        inline Ent::Gen::CapabilitiesAndTags AreaNavigation::CapabilitiesAndTags() const
        {
            return Ent::Gen::CapabilitiesAndTags(node->at("CapabilitiesAndTags"));
        }
        inline Ent::Gen::Float AreaNavigation::GroundAreaCost() const
        {
            return Ent::Gen::Float(node->at("GroundAreaCost"));
        }
        inline Ent::Gen::Float AreaNavigation::WaterAreaCost() const
        {
            return Ent::Gen::Float(node->at("WaterAreaCost"));
        }
        inline Ent::Gen::String AreaNavigation::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PathFinderGD
        inline Ent::Gen::AreaNavigation PathFinderGD::NavigationCapacities() const
        {
            return Ent::Gen::AreaNavigation(node->at("NavigationCapacities"));
        }
        inline Ent::Gen::ComponentGD PathFinderGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String PathFinderGD::UsedNavMeshName() const
        {
            return Ent::Gen::String(node->at("UsedNavMeshName"));
        }
        inline Ent::Gen::String PathFinderGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationTreeConstraintsGD_GrowData
        inline Ent::Gen::Float AnimationTreeConstraintsGD_GrowData::DegrowShakeForce() const
        {
            return Ent::Gen::Float(node->at("DegrowShakeForce"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_GrowData::GrowShakeForce() const
        {
            return Ent::Gen::Float(node->at("GrowShakeForce"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_GrowData::GrowSpeed() const
        {
            return Ent::Gen::Float(node->at("GrowSpeed"));
        }
        inline Ent::Gen::GrowingState AnimationTreeConstraintsGD_GrowData::GrowingState() const
        {
            return Ent::Gen::GrowingState(node->at("GrowingState"));
        }
        inline Ent::Gen::ProgressSoundEventData AnimationTreeConstraintsGD_GrowData::ProgressSoundEventData() const
        {
            return Ent::Gen::ProgressSoundEventData(node->at("ProgressSoundEventData"));
        }
        inline Ent::Gen::String AnimationTreeConstraintsGD_GrowData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationTreeConstraintsGD_ForceData
        inline Ent::Gen::Bool AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluence() const
        {
            return Ent::Gen::Bool(node->at("AutoSetupForceInfluence"));
        }
        inline Ent::Gen::Int AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceLevelStart() const
        {
            return Ent::Gen::Int(node->at("AutoSetupForceInfluenceLevelStart"));
        }
        inline Ent::Gen::Int AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceLevelStop() const
        {
            return Ent::Gen::Int(node->at("AutoSetupForceInfluenceLevelStop"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceValueAfterStop() const
        {
            return Ent::Gen::Float(node->at("AutoSetupForceInfluenceValueAfterStop"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceValueBeforeStart() const
        {
            return Ent::Gen::Float(node->at("AutoSetupForceInfluenceValueBeforeStart"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceValueStart() const
        {
            return Ent::Gen::Float(node->at("AutoSetupForceInfluenceValueStart"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceValueStop() const
        {
            return Ent::Gen::Float(node->at("AutoSetupForceInfluenceValueStop"));
        }
        inline Ent::Gen::String AnimationTreeConstraintsGD_ForceData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationTreeConstraintsGD_BendData
        inline Ent::Gen::Bool AnimationTreeConstraintsGD_BendData::AcceptDrag() const
        {
            return Ent::Gen::Bool(node->at("AcceptDrag"));
        }
        inline Ent::Gen::Bool AnimationTreeConstraintsGD_BendData::AcceptDragOnBaseBone() const
        {
            return Ent::Gen::Bool(node->at("AcceptDragOnBaseBone"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_BendData::AttractDuration() const
        {
            return Ent::Gen::Float(node->at("AttractDuration"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_BendData::DragOnBaseBoneAttractionStartFactor() const
        {
            return Ent::Gen::Float(node->at("DragOnBaseBoneAttractionStartFactor"));
        }
        inline Ent::Gen::Int AnimationTreeConstraintsGD_BendData::MaxBendAngleFirstBone() const
        {
            return Ent::Gen::Int(node->at("MaxBendAngleFirstBone"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_BendData::MaxBendAngleValueAtFirstBone() const
        {
            return Ent::Gen::Float(node->at("MaxBendAngleValueAtFirstBone"));
        }
        inline Ent::Gen::Float AnimationTreeConstraintsGD_BendData::MaxBendAngleValueAtLastBone() const
        {
            return Ent::Gen::Float(node->at("MaxBendAngleValueAtLastBone"));
        }
        inline Ent::Gen::String AnimationTreeConstraintsGD_BendData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationTreeConstraintsGD
        inline Ent::Gen::AnimationTreeConstraintsGD_BendData AnimationTreeConstraintsGD::BendData() const
        {
            return Ent::Gen::AnimationTreeConstraintsGD_BendData(node->at("BendData"));
        }
        inline Ent::Gen::AnimationTreeConstraintsGD_ForceData AnimationTreeConstraintsGD::ForceData() const
        {
            return Ent::Gen::AnimationTreeConstraintsGD_ForceData(node->at("ForceData"));
        }
        inline Ent::Gen::AnimationTreeConstraintsGD_GrowData AnimationTreeConstraintsGD::GrowData() const
        {
            return Ent::Gen::AnimationTreeConstraintsGD_GrowData(node->at("GrowData"));
        }
        inline Ent::Gen::ComponentGD AnimationTreeConstraintsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationTreeConstraintsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationModelComponentInput_StyleMode
        inline Ent::Gen::String AnimationModelComponentInput_StyleMode::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AnimationModelComponentInput_StyleMode::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::StyleMode AnimationModelComponentInput_StyleMode::val() const
        {
            return Ent::Gen::StyleMode(node->at("val"));
        }
        // AnimationModelComponentInput_SpeedMode
        inline Ent::Gen::String AnimationModelComponentInput_SpeedMode::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AnimationModelComponentInput_SpeedMode::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::SpeedMode AnimationModelComponentInput_SpeedMode::val() const
        {
            return Ent::Gen::SpeedMode(node->at("val"));
        }
        // AnimationModelComponentInput_LocomotionMode
        inline Ent::Gen::String AnimationModelComponentInput_LocomotionMode::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AnimationModelComponentInput_LocomotionMode::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::LocomotionMode AnimationModelComponentInput_LocomotionMode::val() const
        {
            return Ent::Gen::LocomotionMode(node->at("val"));
        }
        // AnimationModelComponentInput_CarryMode
        inline Ent::Gen::String AnimationModelComponentInput_CarryMode::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AnimationModelComponentInput_CarryMode::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::CarryMode AnimationModelComponentInput_CarryMode::val() const
        {
            return Ent::Gen::CarryMode(node->at("val"));
        }
        // AnimationModelComponentInput_AttitudeMode
        inline Ent::Gen::String AnimationModelComponentInput_AttitudeMode::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AnimationModelComponentInput_AttitudeMode::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::AttitudeMode AnimationModelComponentInput_AttitudeMode::val() const
        {
            return Ent::Gen::AttitudeMode(node->at("val"));
        }
        // AnimationGenericConstraintsGD
        inline Ent::Gen::AnimationMode AnimationGenericConstraintsGD::AnimationMode() const
        {
            return Ent::Gen::AnimationMode(node->at("AnimationMode"));
        }
        inline Ent::Gen::Int AnimationGenericConstraintsGD::AnimationPass() const
        {
            return Ent::Gen::Int(node->at("AnimationPass"));
        }
        inline Ent::Gen::AnimationSpace AnimationGenericConstraintsGD::AnimationSpace() const
        {
            return Ent::Gen::AnimationSpace(node->at("AnimationSpace"));
        }
        inline Ent::Gen::Float AnimationGenericConstraintsGD::ControlRate() const
        {
            return Ent::Gen::Float(node->at("ControlRate"));
        }
        inline Ent::Gen::ComponentGD AnimationGenericConstraintsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationGenericConstraintsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationLegsConstraints_SlopeOffsetInfo
        inline Ent::Gen::Float AnimationLegsConstraints_SlopeOffsetInfo::MaxSlopeAngle() const
        {
            return Ent::Gen::Float(node->at("MaxSlopeAngle"));
        }
        inline Ent::Gen::Vector3 AnimationLegsConstraints_SlopeOffsetInfo::RotationOffset() const
        {
            return Ent::Gen::Vector3(node->at("RotationOffset"));
        }
        inline Ent::Gen::Vector3 AnimationLegsConstraints_SlopeOffsetInfo::TranslationOffset() const
        {
            return Ent::Gen::Vector3(node->at("TranslationOffset"));
        }
        inline Ent::Gen::String AnimationLegsConstraints_SlopeOffsetInfo::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationLegsConstraintsGD
        inline Ent::Gen::Bool AnimationLegsConstraintsGD::AllowHeightMapCastFallback() const
        {
            return Ent::Gen::Bool(node->at("AllowHeightMapCastFallback"));
        }
        inline Ent::Gen::AnimationLegsConstraints_SlopeOffsetInfo AnimationLegsConstraintsGD::AscendingSlopeOffsetInfo() const
        {
            return Ent::Gen::AnimationLegsConstraints_SlopeOffsetInfo(node->at("AscendingSlopeOffsetInfo"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::BackLegsCompensateExtensionThreshold() const
        {
            return Ent::Gen::Float(node->at("BackLegsCompensateExtensionThreshold"));
        }
        inline Ent::Gen::Vector2 AnimationLegsConstraintsGD::BackLegsHeightRangeForIKInfluence() const
        {
            return Ent::Gen::Vector2(node->at("BackLegsHeightRangeForIKInfluence"));
        }
        inline Ent::Gen::Bool AnimationLegsConstraintsGD::BoneBending() const
        {
            return Ent::Gen::Bool(node->at("BoneBending"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::BoneBendingAnticipation() const
        {
            return Ent::Gen::Float(node->at("BoneBendingAnticipation"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::BoneBendingAnticipationBackward() const
        {
            return Ent::Gen::Float(node->at("BoneBendingAnticipationBackward"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::BoneBendingLocomotionInfluenceSpeed() const
        {
            return Ent::Gen::Float(node->at("BoneBendingLocomotionInfluenceSpeed"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::CastDeltaDistToTriggerSmooth() const
        {
            return Ent::Gen::Float(node->at("CastDeltaDistToTriggerSmooth"));
        }
        inline Ent::Gen::AnimationLegsConstraints_SlopeOffsetInfo AnimationLegsConstraintsGD::DescendingSlopeOffsetInfo() const
        {
            return Ent::Gen::AnimationLegsConstraints_SlopeOffsetInfo(node->at("DescendingSlopeOffsetInfo"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::FeetInfluence() const
        {
            return Ent::Gen::Float(node->at("FeetInfluence"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::FrontLegsCompensateExtensionThreshold() const
        {
            return Ent::Gen::Float(node->at("FrontLegsCompensateExtensionThreshold"));
        }
        inline Ent::Gen::Vector2 AnimationLegsConstraintsGD::FrontLegsHeightRangeForIKInfluence() const
        {
            return Ent::Gen::Vector2(node->at("FrontLegsHeightRangeForIKInfluence"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::GlobalInfluence() const
        {
            return Ent::Gen::Float(node->at("GlobalInfluence"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::LegInfluence() const
        {
            return Ent::Gen::Float(node->at("LegInfluence"));
        }
        inline Ent::Gen::Bool AnimationLegsConstraintsGD::LegLock() const
        {
            return Ent::Gen::Bool(node->at("LegLock"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::MaxHeightForFootInfluence() const
        {
            return Ent::Gen::Float(node->at("MaxHeightForFootInfluence"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::ObstructionCastHitPosMarginOffsetFactor() const
        {
            return Ent::Gen::Float(node->at("ObstructionCastHitPosMarginOffsetFactor"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::ObstructionCastOffsetFactor() const
        {
            return Ent::Gen::Float(node->at("ObstructionCastOffsetFactor"));
        }
        inline Ent::Gen::Float AnimationLegsConstraintsGD::ObstructionCastSafeRadiusFactor() const
        {
            return Ent::Gen::Float(node->at("ObstructionCastSafeRadiusFactor"));
        }
        inline Ent::Gen::ScaleConverter AnimationLegsConstraintsGD::SpeedFactorFromLockedRootDistance() const
        {
            return Ent::Gen::ScaleConverter(node->at("SpeedFactorFromLockedRootDistance"));
        }
        inline Ent::Gen::ComponentGD AnimationLegsConstraintsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Bool AnimationLegsConstraintsGD::UseObstructionCast() const
        {
            return Ent::Gen::Bool(node->at("UseObstructionCast"));
        }
        inline Ent::Gen::String AnimationLegsConstraintsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationEventsGeneratorGD_TrackedBone
        inline Ent::Gen::String AnimationEventsGeneratorGD_TrackedBone::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Int AnimationEventsGeneratorGD_TrackedBone::OffsetFrameCountStart() const
        {
            return Ent::Gen::Int(node->at("OffsetFrameCountStart"));
        }
        inline Ent::Gen::Int AnimationEventsGeneratorGD_TrackedBone::OffsetFrameCountStop() const
        {
            return Ent::Gen::Int(node->at("OffsetFrameCountStop"));
        }
        inline Ent::Gen::String AnimationEventsGeneratorGD_TrackedBone::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationEventsGeneratorGD
        inline Ent::Gen::ComponentGD AnimationEventsGeneratorGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Array<Ent::Gen::AnimationEventsGeneratorGD_TrackedBone> AnimationEventsGeneratorGD::TrackedBones() const
        {
            return Array<Ent::Gen::AnimationEventsGeneratorGD_TrackedBone>(node->at("TrackedBones"));
        }
        inline Ent::Gen::String AnimationEventsGeneratorGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // MoveCapacityData_AnimTagTransitionGroup
        inline Ent::Gen::String MoveCapacityData_AnimTagTransitionGroup::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline PrimArray<Ent::Gen::AnimTag> MoveCapacityData_AnimTagTransitionGroup::animTags() const
        {
            return PrimArray<Ent::Gen::AnimTag>(node->at("animTags"));
        }
        inline Ent::Gen::Float MoveCapacityData_AnimTagTransitionGroup::blendIn() const
        {
            return Ent::Gen::Float(node->at("blendIn"));
        }
        // MoveCapacityData_AnimTagTimelineTransitionItem
        inline Ent::Gen::String MoveCapacityData_AnimTagTimelineTransitionItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::AnimTag MoveCapacityData_AnimTagTimelineTransitionItem::to() const
        {
            return Ent::Gen::AnimTag(node->at("to"));
        }
        inline Ent::Gen::AnimTagTimelineTransition MoveCapacityData_AnimTagTimelineTransitionItem::type() const
        {
            return Ent::Gen::AnimTagTimelineTransition(node->at("type"));
        }
        // MoveCapacityData_AnimTagTimelineTransitionTable
        inline Ent::Gen::String MoveCapacityData_AnimTagTimelineTransitionTable::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::AnimTag MoveCapacityData_AnimTagTimelineTransitionTable::from_() const
        {
            return Ent::Gen::AnimTag(node->at("from"));
        }
        inline Array<Ent::Gen::MoveCapacityData_AnimTagTimelineTransitionItem> MoveCapacityData_AnimTagTimelineTransitionTable::transitions() const
        {
            return Array<Ent::Gen::MoveCapacityData_AnimTagTimelineTransitionItem>(node->at("transitions"));
        }
        // MoveCapacityData
        inline Ent::Gen::String MoveCapacityData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float MoveCapacityData::airControlFactor() const
        {
            return Ent::Gen::Float(node->at("airControlFactor"));
        }
        inline Ent::Gen::Bool MoveCapacityData::allowClampSpeedBiggerThanLocomotionDuringBlend() const
        {
            return Ent::Gen::Bool(node->at("allowClampSpeedBiggerThanLocomotionDuringBlend"));
        }
        inline Ent::Gen::Bool MoveCapacityData::allowKeepAnimationPlayRatioUnclamped() const
        {
            return Ent::Gen::Bool(node->at("allowKeepAnimationPlayRatioUnclamped"));
        }
        inline Ent::Gen::Float MoveCapacityData::angularSpeedMaxFlyDumpFactor() const
        {
            return Ent::Gen::Float(node->at("angularSpeedMaxFlyDumpFactor"));
        }
        inline Ent::Gen::Float MoveCapacityData::angularSpeedMaxGroundDumpFactor() const
        {
            return Ent::Gen::Float(node->at("angularSpeedMaxGroundDumpFactor"));
        }
        inline Ent::Gen::Float MoveCapacityData::angularSpeedMaxRiderDumpFactor() const
        {
            return Ent::Gen::Float(node->at("angularSpeedMaxRiderDumpFactor"));
        }
        inline Ent::Gen::Float MoveCapacityData::angularSpeedMaxWaterDumpFactor() const
        {
            return Ent::Gen::Float(node->at("angularSpeedMaxWaterDumpFactor"));
        }
        inline Ent::Gen::MoveCapacityData_AnimTagTimelineTransitionTable MoveCapacityData::animTagTimelineTransitionTable() const
        {
            return Ent::Gen::MoveCapacityData_AnimTagTimelineTransitionTable(node->at("animTagTimelineTransitionTable"));
        }
        inline Ent::Gen::Float MoveCapacityData::brakeDeceleration() const
        {
            return Ent::Gen::Float(node->at("brakeDeceleration"));
        }
        inline Ent::Gen::Bool MoveCapacityData::canSpiritAttack() const
        {
            return Ent::Gen::Bool(node->at("canSpiritAttack"));
        }
        inline Ent::Gen::Bool MoveCapacityData::canUseCliffGrip() const
        {
            return Ent::Gen::Bool(node->at("canUseCliffGrip"));
        }
        inline Ent::Gen::Float MoveCapacityData::capsuleBigRadius() const
        {
            return Ent::Gen::Float(node->at("capsuleBigRadius"));
        }
        inline Ent::Gen::Float MoveCapacityData::capsuleEnormousRadius() const
        {
            return Ent::Gen::Float(node->at("capsuleEnormousRadius"));
        }
        inline Ent::Gen::Float MoveCapacityData::capsuleMediumRadius() const
        {
            return Ent::Gen::Float(node->at("capsuleMediumRadius"));
        }
        inline Ent::Gen::Float MoveCapacityData::capsuleSmallRadius() const
        {
            return Ent::Gen::Float(node->at("capsuleSmallRadius"));
        }
        inline Ent::Gen::Float MoveCapacityData::capsuleTinyRadius() const
        {
            return Ent::Gen::Float(node->at("capsuleTinyRadius"));
        }
        inline Ent::Gen::ScaleConverter MoveCapacityData::constraintDetectionAnticipation() const
        {
            return Ent::Gen::ScaleConverter(node->at("constraintDetectionAnticipation"));
        }
        inline Ent::Gen::Vector3 MoveCapacityData::constraintDetectionOffset() const
        {
            return Ent::Gen::Vector3(node->at("constraintDetectionOffset"));
        }
        inline Ent::Gen::Float MoveCapacityData::constraintDetectionRadiusMultiplier() const
        {
            return Ent::Gen::Float(node->at("constraintDetectionRadiusMultiplier"));
        }
        inline Ent::Gen::Float MoveCapacityData::coyoteJumpMaxTime() const
        {
            return Ent::Gen::Float(node->at("coyoteJumpMaxTime"));
        }
        inline Ent::Gen::Float MoveCapacityData::crashPreventionSafeguardFactor() const
        {
            return Ent::Gen::Float(node->at("crashPreventionSafeguardFactor"));
        }
        inline Ent::Gen::Float MoveCapacityData::defaultWorldUpSpeedFactor() const
        {
            return Ent::Gen::Float(node->at("defaultWorldUpSpeedFactor"));
        }
        inline Ent::Gen::Float MoveCapacityData::dodgeCooldownTime() const
        {
            return Ent::Gen::Float(node->at("dodgeCooldownTime"));
        }
        inline Ent::Gen::Bool MoveCapacityData::doubleJump() const
        {
            return Ent::Gen::Bool(node->at("doubleJump"));
        }
        inline Ent::Gen::ScaleConverter MoveCapacityData::dropPlaneLegLenFactor() const
        {
            return Ent::Gen::ScaleConverter(node->at("dropPlaneLegLenFactor"));
        }
        inline Ent::Gen::Bool MoveCapacityData::dropSyncTrajectoryAndVisual() const
        {
            return Ent::Gen::Bool(node->at("dropSyncTrajectoryAndVisual"));
        }
        inline Ent::Gen::Float MoveCapacityData::ellipseCoeff() const
        {
            return Ent::Gen::Float(node->at("ellipseCoeff"));
        }
        inline Ent::Gen::ScaleConverter MoveCapacityData::extirpateObstacleAcceleration() const
        {
            return Ent::Gen::ScaleConverter(node->at("extirpateObstacleAcceleration"));
        }
        inline Ent::Gen::Float MoveCapacityData::extirpateObstacleDuration() const
        {
            return Ent::Gen::Float(node->at("extirpateObstacleDuration"));
        }
        inline Ent::Gen::ScaleConverter MoveCapacityData::flyCentrifugalCoeff() const
        {
            return Ent::Gen::ScaleConverter(node->at("flyCentrifugalCoeff"));
        }
        inline Ent::Gen::Float MoveCapacityData::flyCentrifugalRate() const
        {
            return Ent::Gen::Float(node->at("flyCentrifugalRate"));
        }
        inline Ent::Gen::Float MoveCapacityData::jumpAnalogScale() const
        {
            return Ent::Gen::Float(node->at("jumpAnalogScale"));
        }
        inline Ent::Gen::Bool MoveCapacityData::jumpOntoPosition() const
        {
            return Ent::Gen::Bool(node->at("jumpOntoPosition"));
        }
        inline Ent::Gen::Float MoveCapacityData::legLength() const
        {
            return Ent::Gen::Float(node->at("legLength"));
        }
        inline Ent::Gen::Float MoveCapacityData::mass() const
        {
            return Ent::Gen::Float(node->at("mass"));
        }
        inline Ent::Gen::Float MoveCapacityData::maxAverageSpeedDuringJumpOnto() const
        {
            return Ent::Gen::Float(node->at("maxAverageSpeedDuringJumpOnto"));
        }
        inline Ent::Gen::Float MoveCapacityData::maxFlapTime() const
        {
            return Ent::Gen::Float(node->at("maxFlapTime"));
        }
        inline Ent::Gen::Float MoveCapacityData::maxTimeBetweenFlaps() const
        {
            return Ent::Gen::Float(node->at("maxTimeBetweenFlaps"));
        }
        inline Ent::Gen::Float MoveCapacityData::maxUnmountRetimingDist() const
        {
            return Ent::Gen::Float(node->at("maxUnmountRetimingDist"));
        }
        inline Ent::Gen::Float MoveCapacityData::minFlapTime() const
        {
            return Ent::Gen::Float(node->at("minFlapTime"));
        }
        inline Ent::Gen::Float MoveCapacityData::minSpeedToSteerPitch() const
        {
            return Ent::Gen::Float(node->at("minSpeedToSteerPitch"));
        }
        inline Ent::Gen::Float MoveCapacityData::minTimeBetweenFlaps() const
        {
            return Ent::Gen::Float(node->at("minTimeBetweenFlaps"));
        }
        inline Ent::Gen::Float MoveCapacityData::minimumDropTimeBeforeAClimbEdge() const
        {
            return Ent::Gen::Float(node->at("minimumDropTimeBeforeAClimbEdge"));
        }
        inline Ent::Gen::Int MoveCapacityData::nbAttackJump() const
        {
            return Ent::Gen::Int(node->at("nbAttackJump"));
        }
        inline Ent::Gen::MoveCapacityData_OrientationSpeed MoveCapacityData::orientationSpeedFly() const
        {
            return Ent::Gen::MoveCapacityData_OrientationSpeed(node->at("orientationSpeedFly"));
        }
        inline Ent::Gen::MoveCapacityData_OrientationSpeed MoveCapacityData::orientationSpeedGround() const
        {
            return Ent::Gen::MoveCapacityData_OrientationSpeed(node->at("orientationSpeedGround"));
        }
        inline Ent::Gen::MoveCapacityData_OrientationSpeed MoveCapacityData::orientationSpeedWater() const
        {
            return Ent::Gen::MoveCapacityData_OrientationSpeed(node->at("orientationSpeedWater"));
        }
        inline Ent::Gen::Float MoveCapacityData::patinateSpeedMinEnter() const
        {
            return Ent::Gen::Float(node->at("patinateSpeedMinEnter"));
        }
        inline Ent::Gen::Float MoveCapacityData::patinateSpeedMinExit() const
        {
            return Ent::Gen::Float(node->at("patinateSpeedMinExit"));
        }
        inline Ent::Gen::Float MoveCapacityData::reachSpeedAcceleration() const
        {
            return Ent::Gen::Float(node->at("reachSpeedAcceleration"));
        }
        inline Array<Ent::Gen::MoveCapacityData_ReachSpeed> MoveCapacityData::reachSpeedByLocomotion() const
        {
            return Array<Ent::Gen::MoveCapacityData_ReachSpeed>(node->at("reachSpeedByLocomotion"));
        }
        inline Ent::Gen::Float MoveCapacityData::reachSpeedDeceleration() const
        {
            return Ent::Gen::Float(node->at("reachSpeedDeceleration"));
        }
        inline Ent::Gen::Bool MoveCapacityData::reactToOtherCharacterBodyCollision() const
        {
            return Ent::Gen::Bool(node->at("reactToOtherCharacterBodyCollision"));
        }
        inline Ent::Gen::Float MoveCapacityData::rigidbodyScalingSpeed() const
        {
            return Ent::Gen::Float(node->at("rigidbodyScalingSpeed"));
        }
        inline Ent::Gen::Float MoveCapacityData::sphereCastRadiusRatio() const
        {
            return Ent::Gen::Float(node->at("sphereCastRadiusRatio"));
        }
        inline Ent::Gen::Float MoveCapacityData::sphereOverrideRadius() const
        {
            return Ent::Gen::Float(node->at("sphereOverrideRadius"));
        }
        inline Ent::Gen::Float MoveCapacityData::strafeBlendIn() const
        {
            return Ent::Gen::Float(node->at("strafeBlendIn"));
        }
        inline Ent::Gen::Float MoveCapacityData::strafeBlendWeightMinToChangeAnim() const
        {
            return Ent::Gen::Float(node->at("strafeBlendWeightMinToChangeAnim"));
        }
        inline Ent::Gen::Float MoveCapacityData::strafeOrientationRateFactor() const
        {
            return Ent::Gen::Float(node->at("strafeOrientationRateFactor"));
        }
        inline Ent::Gen::SpeedMode MoveCapacityData::strafeSpeedModeMax() const
        {
            return Ent::Gen::SpeedMode(node->at("strafeSpeedModeMax"));
        }
        inline Ent::Gen::Float MoveCapacityData::strafeStopOrientationRateFactor() const
        {
            return Ent::Gen::Float(node->at("strafeStopOrientationRateFactor"));
        }
        inline Ent::Gen::Float MoveCapacityData::strafeTurnAngleMin() const
        {
            return Ent::Gen::Float(node->at("strafeTurnAngleMin"));
        }
        inline Ent::Gen::Float MoveCapacityData::trajectoryRateFactorDuringLateralLand() const
        {
            return Ent::Gen::Float(node->at("trajectoryRateFactorDuringLateralLand"));
        }
        inline Ent::Gen::Float MoveCapacityData::turnAroundInputDirectionAngleDeltaMin() const
        {
            return Ent::Gen::Float(node->at("turnAroundInputDirectionAngleDeltaMin"));
        }
        inline Ent::Gen::Float MoveCapacityData::turnRotationMinRatioForNewTurn() const
        {
            return Ent::Gen::Float(node->at("turnRotationMinRatioForNewTurn"));
        }
        inline Ent::Gen::Float MoveCapacityData::turnRotationMinRatioToFinish() const
        {
            return Ent::Gen::Float(node->at("turnRotationMinRatioToFinish"));
        }
        // DirectionSync
        inline Ent::Gen::String DirectionSync::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool DirectionSync::isOpposite() const
        {
            return Ent::Gen::Bool(node->at("isOpposite"));
        }
        inline Ent::Gen::Bool DirectionSync::mirrorKey() const
        {
            return Ent::Gen::Bool(node->at("mirrorKey"));
        }
        inline Ent::Gen::Float DirectionSync::syncCoeff() const
        {
            return Ent::Gen::Float(node->at("syncCoeff"));
        }
        inline Ent::Gen::AnimTag DirectionSync::tag1() const
        {
            return Ent::Gen::AnimTag(node->at("tag1"));
        }
        inline Ent::Gen::AnimTag DirectionSync::tag2() const
        {
            return Ent::Gen::AnimTag(node->at("tag2"));
        }
        // DirectionSyncData
        inline Ent::Gen::String DirectionSyncData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::DirectionSync> DirectionSyncData::datas() const
        {
            return Array<Ent::Gen::DirectionSync>(node->at("datas"));
        }
        inline Ent::Gen::String DirectionSyncData::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        // AnimationManager
        inline Ent::Gen::Float AnimationManager::AnimationVariantDelayMax() const
        {
            return Ent::Gen::Float(node->at("AnimationVariantDelayMax"));
        }
        inline Ent::Gen::Float AnimationManager::AnimationVariantDelayMin() const
        {
            return Ent::Gen::Float(node->at("AnimationVariantDelayMin"));
        }
        inline Ent::Gen::Float AnimationManager::LookAtSlopeCoeff() const
        {
            return Ent::Gen::Float(node->at("LookAtSlopeCoeff"));
        }
        inline Ent::Gen::Float AnimationManager::PlayRatioMax() const
        {
            return Ent::Gen::Float(node->at("PlayRatioMax"));
        }
        inline Ent::Gen::Float AnimationManager::PlayRatioMin() const
        {
            return Ent::Gen::Float(node->at("PlayRatioMin"));
        }
        inline PrimArray<Ent::Gen::String> AnimationManager::RejectedMetadataStatus() const
        {
            return PrimArray<Ent::Gen::String>(node->at("RejectedMetadataStatus"));
        }
        inline Ent::Gen::Manager AnimationManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Array<Ent::Gen::DirectionSyncData> AnimationManager::SyncDatas() const
        {
            return Array<Ent::Gen::DirectionSyncData>(node->at("SyncDatas"));
        }
        inline Ent::Gen::String AnimationManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline PrimArray<Ent::Gen::String> AnimationManager::canDetachFromGroundAction() const
        {
            return PrimArray<Ent::Gen::String>(node->at("canDetachFromGroundAction"));
        }
        // AnimationModelComponentInput_AnimTag
        inline Ent::Gen::String AnimationModelComponentInput_AnimTag::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AnimationModelComponentInput_AnimTag::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::AnimTag AnimationModelComponentInput_AnimTag::val() const
        {
            return Ent::Gen::AnimTag(node->at("val"));
        }
        // AnimMirroringSpecData
        inline Ent::Gen::String AnimMirroringSpecData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String AnimMirroringSpecData::name() const
        {
            return Ent::Gen::String(node->at("name"));
        }
        inline Ent::Gen::String AnimMirroringSpecData::name2() const
        {
            return Ent::Gen::String(node->at("name2"));
        }
        inline Ent::Gen::String AnimMirroringSpecData::spec() const
        {
            return Ent::Gen::String(node->at("spec"));
        }
        // AnimMirroringData
        inline Ent::Gen::String AnimMirroringData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Array<Ent::Gen::AnimMirroringSpecData> AnimMirroringData::specs() const
        {
            return Array<Ent::Gen::AnimMirroringSpecData>(node->at("specs"));
        }
        // AnimationControllerGD
        inline Ent::Gen::String AnimationControllerGD::EDITOR_skeleton() const
        {
            return Ent::Gen::String(node->at("EDITOR_skeleton"));
        }
        inline Ent::Gen::ComponentGD AnimationControllerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationControllerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String AnimationControllerGD::animDatabase() const
        {
            return Ent::Gen::String(node->at("animDatabase"));
        }
        inline Ent::Gen::AnimMirroringData AnimationControllerGD::mirroringData() const
        {
            return Ent::Gen::AnimMirroringData(node->at("mirroringData"));
        }
        inline Ent::Gen::Float AnimationControllerGD::romLookAtInfluence() const
        {
            return Ent::Gen::Float(node->at("romLookAtInfluence"));
        }
        inline Ent::Gen::String AnimationControllerGD::skeleton() const
        {
            return Ent::Gen::String(node->at("skeleton"));
        }
        inline Ent::Gen::String AnimationControllerGD::syncDataName() const
        {
            return Ent::Gen::String(node->at("syncDataName"));
        }
        // AttackChargedData
        inline Ent::Gen::AnimAdditionalTag AttackChargedData::AnimationTag() const
        {
            return Ent::Gen::AnimAdditionalTag(node->at("AnimationTag"));
        }
        inline Ent::Gen::FloatRange AttackChargedData::ChargeRatio() const
        {
            return Ent::Gen::FloatRange(node->at("ChargeRatio"));
        }
        inline Ent::Gen::String AttackChargedData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // StrongAttackData
        inline Ent::Gen::ResponsiblePointer_ActorState_ StrongAttackData::StrongAttackState() const
        {
            return Ent::Gen::ResponsiblePointer_ActorState_(node->at("StrongAttackState"));
        }
        inline Ent::Gen::String StrongAttackData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float StrongAttackData::attackOrientationRate() const
        {
            return Ent::Gen::Float(node->at("attackOrientationRate"));
        }
        inline Array<Ent::Gen::AttackChargedData> StrongAttackData::chargedDatas() const
        {
            return Array<Ent::Gen::AttackChargedData>(node->at("chargedDatas"));
        }
        inline Ent::Gen::Float StrongAttackData::chargedMaxDuration() const
        {
            return Ent::Gen::Float(node->at("chargedMaxDuration"));
        }
        inline Ent::Gen::Float StrongAttackData::chargingDeceleration() const
        {
            return Ent::Gen::Float(node->at("chargingDeceleration"));
        }
        inline Ent::Gen::Float StrongAttackData::chargingOrientationRate() const
        {
            return Ent::Gen::Float(node->at("chargingOrientationRate"));
        }
        // strongAttackData
        inline Ent::Gen::String strongAttackData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool strongAttackData::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::StrongAttackData strongAttackData::val() const
        {
            return Ent::Gen::StrongAttackData(node->at("val"));
        }
        // AnalyticsManager_MongoDBConnection
        inline Ent::Gen::String AnalyticsManager_MongoDBConnection::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String AnalyticsManager_MongoDBConnection::collection() const
        {
            return Ent::Gen::String(node->at("collection"));
        }
        inline Ent::Gen::String AnalyticsManager_MongoDBConnection::database() const
        {
            return Ent::Gen::String(node->at("database"));
        }
        inline Ent::Gen::String AnalyticsManager_MongoDBConnection::uri() const
        {
            return Ent::Gen::String(node->at("uri"));
        }
        // AnalyticsManager
        inline Ent::Gen::Bool AnalyticsManager::EnableAnalyticsTeleportation() const
        {
            return Ent::Gen::Bool(node->at("EnableAnalyticsTeleportation"));
        }
        inline Ent::Gen::Bool AnalyticsManager::EnableEventLogger() const
        {
            return Ent::Gen::Bool(node->at("EnableEventLogger"));
        }
        inline Ent::Gen::AnalyticsManager_MongoDBConnection AnalyticsManager::MongoDBConnection() const
        {
            return Ent::Gen::AnalyticsManager_MongoDBConnection(node->at("MongoDBConnection"));
        }
        inline Array<Ent::Gen::ResponsiblePointer_AnalyticsObserverInterface_> AnalyticsManager::Plugins() const
        {
            return Array<Ent::Gen::ResponsiblePointer_AnalyticsObserverInterface_>(node->at("Plugins"));
        }
        inline Ent::Gen::Bool AnalyticsManager::StartPaused() const
        {
            return Ent::Gen::Bool(node->at("StartPaused"));
        }
        inline Ent::Gen::Manager AnalyticsManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String AnalyticsManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AirControlData
        inline Ent::Gen::Float AirControlData::AirControlBrake() const
        {
            return Ent::Gen::Float(node->at("AirControlBrake"));
        }
        inline Ent::Gen::Float AirControlData::AirControlBrakeAngleMin() const
        {
            return Ent::Gen::Float(node->at("AirControlBrakeAngleMin"));
        }
        inline Ent::Gen::ScaleConverter AirControlData::AirControlDirection() const
        {
            return Ent::Gen::ScaleConverter(node->at("AirControlDirection"));
        }
        inline Ent::Gen::Float AirControlData::AirControlSmooth() const
        {
            return Ent::Gen::Float(node->at("AirControlSmooth"));
        }
        inline Ent::Gen::Float AirControlData::AirControlSpeed() const
        {
            return Ent::Gen::Float(node->at("AirControlSpeed"));
        }
        inline Ent::Gen::Float AirControlData::AirControlSpeedAngleMax() const
        {
            return Ent::Gen::Float(node->at("AirControlSpeedAngleMax"));
        }
        inline Ent::Gen::String AirControlData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CharacterControllerFallData
        inline Ent::Gen::Float CharacterControllerFallData::Acceleration() const
        {
            return Ent::Gen::Float(node->at("Acceleration"));
        }
        inline Ent::Gen::AirControlData CharacterControllerFallData::AirControlData() const
        {
            return Ent::Gen::AirControlData(node->at("AirControlData"));
        }
        inline Ent::Gen::ScaleConverter CharacterControllerFallData::DamagesPerHeightFall() const
        {
            return Ent::Gen::ScaleConverter(node->at("DamagesPerHeightFall"));
        }
        inline Ent::Gen::Float CharacterControllerFallData::Friction() const
        {
            return Ent::Gen::Float(node->at("Friction"));
        }
        inline Ent::Gen::Float CharacterControllerFallData::MinHeightForDamageFall() const
        {
            return Ent::Gen::Float(node->at("MinHeightForDamageFall"));
        }
        inline Ent::Gen::Float CharacterControllerFallData::MinHeightForDeathFall() const
        {
            return Ent::Gen::Float(node->at("MinHeightForDeathFall"));
        }
        inline Ent::Gen::Float CharacterControllerFallData::MinHeightForRecoveryFall() const
        {
            return Ent::Gen::Float(node->at("MinHeightForRecoveryFall"));
        }
        inline Ent::Gen::String CharacterControllerFallData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CharacterControllerGD
        inline Ent::Gen::Bool CharacterControllerGD::AllowHeightMapFallback() const
        {
            return Ent::Gen::Bool(node->at("AllowHeightMapFallback"));
        }
        inline Ent::Gen::CharacterControllerClamberData CharacterControllerGD::ClamberData() const
        {
            return Ent::Gen::CharacterControllerClamberData(node->at("ClamberData"));
        }
        inline Ent::Gen::CharacterControllerFallData CharacterControllerGD::FallData() const
        {
            return Ent::Gen::CharacterControllerFallData(node->at("FallData"));
        }
        inline Ent::Gen::CharacterControllerGroundNormalData CharacterControllerGD::GroundNormalData() const
        {
            return Ent::Gen::CharacterControllerGroundNormalData(node->at("GroundNormalData"));
        }
        inline Ent::Gen::HeadCollisionBehaviorData CharacterControllerGD::HeadCollisionData() const
        {
            return Ent::Gen::HeadCollisionBehaviorData(node->at("HeadCollisionData"));
        }
        inline Ent::Gen::HitWallData CharacterControllerGD::HitWallData() const
        {
            return Ent::Gen::HitWallData(node->at("HitWallData"));
        }
        inline Ent::Gen::ImmersedBehaviorData CharacterControllerGD::ImmersedData() const
        {
            return Ent::Gen::ImmersedBehaviorData(node->at("ImmersedData"));
        }
        inline Ent::Gen::InputCollisionBehaviorData CharacterControllerGD::InputCollisionData() const
        {
            return Ent::Gen::InputCollisionBehaviorData(node->at("InputCollisionData"));
        }
        inline Ent::Gen::MeshNavigationBehaviorData CharacterControllerGD::MeshNavigationData() const
        {
            return Ent::Gen::MeshNavigationBehaviorData(node->at("MeshNavigationData"));
        }
        inline Ent::Gen::PredictionBehaviorData CharacterControllerGD::PredictionData() const
        {
            return Ent::Gen::PredictionBehaviorData(node->at("PredictionData"));
        }
        inline Ent::Gen::Vector3 CharacterControllerGD::RotationSmooth() const
        {
            return Ent::Gen::Vector3(node->at("RotationSmooth"));
        }
        inline Ent::Gen::CharacterControllerSlideData CharacterControllerGD::SlideData() const
        {
            return Ent::Gen::CharacterControllerSlideData(node->at("SlideData"));
        }
        inline Ent::Gen::ComponentGD CharacterControllerGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String CharacterControllerGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::ClimbEdgeData CharacterControllerGD::climbEdgeData() const
        {
            return Ent::Gen::ClimbEdgeData(node->at("climbEdgeData"));
        }
        inline Ent::Gen::MoveCapacityData CharacterControllerGD::moveCapacityData() const
        {
            return Ent::Gen::MoveCapacityData(node->at("moveCapacityData"));
        }
        // AerialAttackData
        inline Ent::Gen::ResponsiblePointer_ActorState_ AerialAttackData::AerialAttackState() const
        {
            return Ent::Gen::ResponsiblePointer_ActorState_(node->at("AerialAttackState"));
        }
        inline Ent::Gen::String AerialAttackData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float AerialAttackData::attackOrientationRate() const
        {
            return Ent::Gen::Float(node->at("attackOrientationRate"));
        }
        // AttackComponentGD_AerialAttackData
        inline Ent::Gen::String AttackComponentGD_AerialAttackData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AttackComponentGD_AerialAttackData::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::AerialAttackData AttackComponentGD_AerialAttackData::val() const
        {
            return Ent::Gen::AerialAttackData(node->at("val"));
        }
        // AttackComponentGD
        inline Ent::Gen::AttackComponentGD_AerialAttackData AttackComponentGD::AerialAttackData() const
        {
            return Ent::Gen::AttackComponentGD_AerialAttackData(node->at("AerialAttackData"));
        }
        inline Ent::Gen::ComponentGD AttackComponentGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AttackComponentGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::AttackPositionRetimingData AttackComponentGD::attackPositionRetimingData() const
        {
            return Ent::Gen::AttackPositionRetimingData(node->at("attackPositionRetimingData"));
        }
        inline Ent::Gen::lightAttackData AttackComponentGD::lightAttackData() const
        {
            return Ent::Gen::lightAttackData(node->at("lightAttackData"));
        }
        inline Ent::Gen::strongAttackData AttackComponentGD::strongAttackData() const
        {
            return Ent::Gen::strongAttackData(node->at("strongAttackData"));
        }
        // AdditionnalTag
        inline Ent::Gen::String AdditionnalTag::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AdditionnalTag::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::AnimAdditionalTag AdditionnalTag::val() const
        {
            return Ent::Gen::AnimAdditionalTag(node->at("val"));
        }
        // ActorStates
        inline char const* ActorStates::getType() const
        {
            return node->getUnionType();
        }
        inline std::optional<Ent::Gen::ActionAimProjectile> ActorStates::ActionAimProjectile() const
        {
            auto sub = getSubNode("ActionAimProjectile");
            return sub == nullptr? std::optional<Ent::Gen::ActionAimProjectile>{}: std::optional<Ent::Gen::ActionAimProjectile>(getSubNode("ActionAimProjectile"));
        }
        inline Ent::Gen::ActionAimProjectile ActorStates::addActionAimProjectile() const
        {
            return Ent::Gen::ActionAimProjectile(addSubNode("ActionAimProjectile"));
        }
        inline void ActorStates::removeActionAimProjectile() const
        {
            node->mapErase("ActionAimProjectile");
        }
        inline std::optional<Ent::Gen::ActionAttack> ActorStates::ActionAttack() const
        {
            auto sub = getSubNode("ActionAttack");
            return sub == nullptr? std::optional<Ent::Gen::ActionAttack>{}: std::optional<Ent::Gen::ActionAttack>(getSubNode("ActionAttack"));
        }
        inline Ent::Gen::ActionAttack ActorStates::addActionAttack() const
        {
            return Ent::Gen::ActionAttack(addSubNode("ActionAttack"));
        }
        inline void ActorStates::removeActionAttack() const
        {
            node->mapErase("ActionAttack");
        }
        inline std::optional<Ent::Gen::ActionAttackJumpOnto> ActorStates::ActionAttackJumpOnto() const
        {
            auto sub = getSubNode("ActionAttackJumpOnto");
            return sub == nullptr? std::optional<Ent::Gen::ActionAttackJumpOnto>{}: std::optional<Ent::Gen::ActionAttackJumpOnto>(getSubNode("ActionAttackJumpOnto"));
        }
        inline Ent::Gen::ActionAttackJumpOnto ActorStates::addActionAttackJumpOnto() const
        {
            return Ent::Gen::ActionAttackJumpOnto(addSubNode("ActionAttackJumpOnto"));
        }
        inline void ActorStates::removeActionAttackJumpOnto() const
        {
            node->mapErase("ActionAttackJumpOnto");
        }
        inline std::optional<Ent::Gen::ActionAttackStomp> ActorStates::ActionAttackStomp() const
        {
            auto sub = getSubNode("ActionAttackStomp");
            return sub == nullptr? std::optional<Ent::Gen::ActionAttackStomp>{}: std::optional<Ent::Gen::ActionAttackStomp>(getSubNode("ActionAttackStomp"));
        }
        inline Ent::Gen::ActionAttackStomp ActorStates::addActionAttackStomp() const
        {
            return Ent::Gen::ActionAttackStomp(addSubNode("ActionAttackStomp"));
        }
        inline void ActorStates::removeActionAttackStomp() const
        {
            node->mapErase("ActionAttackStomp");
        }
        inline std::optional<Ent::Gen::ActionBite> ActorStates::ActionBite() const
        {
            auto sub = getSubNode("ActionBite");
            return sub == nullptr? std::optional<Ent::Gen::ActionBite>{}: std::optional<Ent::Gen::ActionBite>(getSubNode("ActionBite"));
        }
        inline Ent::Gen::ActionBite ActorStates::addActionBite() const
        {
            return Ent::Gen::ActionBite(addSubNode("ActionBite"));
        }
        inline void ActorStates::removeActionBite() const
        {
            node->mapErase("ActionBite");
        }
        inline std::optional<Ent::Gen::ActionBiteIn> ActorStates::ActionBiteIn() const
        {
            auto sub = getSubNode("ActionBiteIn");
            return sub == nullptr? std::optional<Ent::Gen::ActionBiteIn>{}: std::optional<Ent::Gen::ActionBiteIn>(getSubNode("ActionBiteIn"));
        }
        inline Ent::Gen::ActionBiteIn ActorStates::addActionBiteIn() const
        {
            return Ent::Gen::ActionBiteIn(addSubNode("ActionBiteIn"));
        }
        inline void ActorStates::removeActionBiteIn() const
        {
            node->mapErase("ActionBiteIn");
        }
        inline std::optional<Ent::Gen::ActionBiteOut> ActorStates::ActionBiteOut() const
        {
            auto sub = getSubNode("ActionBiteOut");
            return sub == nullptr? std::optional<Ent::Gen::ActionBiteOut>{}: std::optional<Ent::Gen::ActionBiteOut>(getSubNode("ActionBiteOut"));
        }
        inline Ent::Gen::ActionBiteOut ActorStates::addActionBiteOut() const
        {
            return Ent::Gen::ActionBiteOut(addSubNode("ActionBiteOut"));
        }
        inline void ActorStates::removeActionBiteOut() const
        {
            node->mapErase("ActionBiteOut");
        }
        inline std::optional<Ent::Gen::ActionBittenState> ActorStates::ActionBittenState() const
        {
            auto sub = getSubNode("ActionBittenState");
            return sub == nullptr? std::optional<Ent::Gen::ActionBittenState>{}: std::optional<Ent::Gen::ActionBittenState>(getSubNode("ActionBittenState"));
        }
        inline Ent::Gen::ActionBittenState ActorStates::addActionBittenState() const
        {
            return Ent::Gen::ActionBittenState(addSubNode("ActionBittenState"));
        }
        inline void ActorStates::removeActionBittenState() const
        {
            node->mapErase("ActionBittenState");
        }
        inline std::optional<Ent::Gen::ActionBrake> ActorStates::ActionBrake() const
        {
            auto sub = getSubNode("ActionBrake");
            return sub == nullptr? std::optional<Ent::Gen::ActionBrake>{}: std::optional<Ent::Gen::ActionBrake>(getSubNode("ActionBrake"));
        }
        inline Ent::Gen::ActionBrake ActorStates::addActionBrake() const
        {
            return Ent::Gen::ActionBrake(addSubNode("ActionBrake"));
        }
        inline void ActorStates::removeActionBrake() const
        {
            node->mapErase("ActionBrake");
        }
        inline std::optional<Ent::Gen::ActionCallForHelp> ActorStates::ActionCallForHelp() const
        {
            auto sub = getSubNode("ActionCallForHelp");
            return sub == nullptr? std::optional<Ent::Gen::ActionCallForHelp>{}: std::optional<Ent::Gen::ActionCallForHelp>(getSubNode("ActionCallForHelp"));
        }
        inline Ent::Gen::ActionCallForHelp ActorStates::addActionCallForHelp() const
        {
            return Ent::Gen::ActionCallForHelp(addSubNode("ActionCallForHelp"));
        }
        inline void ActorStates::removeActionCallForHelp() const
        {
            node->mapErase("ActionCallForHelp");
        }
        inline std::optional<Ent::Gen::ActionCentrifugal> ActorStates::ActionCentrifugal() const
        {
            auto sub = getSubNode("ActionCentrifugal");
            return sub == nullptr? std::optional<Ent::Gen::ActionCentrifugal>{}: std::optional<Ent::Gen::ActionCentrifugal>(getSubNode("ActionCentrifugal"));
        }
        inline Ent::Gen::ActionCentrifugal ActorStates::addActionCentrifugal() const
        {
            return Ent::Gen::ActionCentrifugal(addSubNode("ActionCentrifugal"));
        }
        inline void ActorStates::removeActionCentrifugal() const
        {
            node->mapErase("ActionCentrifugal");
        }
        inline std::optional<Ent::Gen::ActionChangeMount> ActorStates::ActionChangeMount() const
        {
            auto sub = getSubNode("ActionChangeMount");
            return sub == nullptr? std::optional<Ent::Gen::ActionChangeMount>{}: std::optional<Ent::Gen::ActionChangeMount>(getSubNode("ActionChangeMount"));
        }
        inline Ent::Gen::ActionChangeMount ActorStates::addActionChangeMount() const
        {
            return Ent::Gen::ActionChangeMount(addSubNode("ActionChangeMount"));
        }
        inline void ActorStates::removeActionChangeMount() const
        {
            node->mapErase("ActionChangeMount");
        }
        inline std::optional<Ent::Gen::ActionChangeRidingSpot> ActorStates::ActionChangeRidingSpot() const
        {
            auto sub = getSubNode("ActionChangeRidingSpot");
            return sub == nullptr? std::optional<Ent::Gen::ActionChangeRidingSpot>{}: std::optional<Ent::Gen::ActionChangeRidingSpot>(getSubNode("ActionChangeRidingSpot"));
        }
        inline Ent::Gen::ActionChangeRidingSpot ActorStates::addActionChangeRidingSpot() const
        {
            return Ent::Gen::ActionChangeRidingSpot(addSubNode("ActionChangeRidingSpot"));
        }
        inline void ActorStates::removeActionChangeRidingSpot() const
        {
            node->mapErase("ActionChangeRidingSpot");
        }
        inline std::optional<Ent::Gen::ActionChosen> ActorStates::ActionChosen() const
        {
            auto sub = getSubNode("ActionChosen");
            return sub == nullptr? std::optional<Ent::Gen::ActionChosen>{}: std::optional<Ent::Gen::ActionChosen>(getSubNode("ActionChosen"));
        }
        inline Ent::Gen::ActionChosen ActorStates::addActionChosen() const
        {
            return Ent::Gen::ActionChosen(addSubNode("ActionChosen"));
        }
        inline void ActorStates::removeActionChosen() const
        {
            node->mapErase("ActionChosen");
        }
        inline std::optional<Ent::Gen::ActionCinematic> ActorStates::ActionCinematic() const
        {
            auto sub = getSubNode("ActionCinematic");
            return sub == nullptr? std::optional<Ent::Gen::ActionCinematic>{}: std::optional<Ent::Gen::ActionCinematic>(getSubNode("ActionCinematic"));
        }
        inline Ent::Gen::ActionCinematic ActorStates::addActionCinematic() const
        {
            return Ent::Gen::ActionCinematic(addSubNode("ActionCinematic"));
        }
        inline void ActorStates::removeActionCinematic() const
        {
            node->mapErase("ActionCinematic");
        }
        inline std::optional<Ent::Gen::ActionClamberDropOff> ActorStates::ActionClamberDropOff() const
        {
            auto sub = getSubNode("ActionClamberDropOff");
            return sub == nullptr? std::optional<Ent::Gen::ActionClamberDropOff>{}: std::optional<Ent::Gen::ActionClamberDropOff>(getSubNode("ActionClamberDropOff"));
        }
        inline Ent::Gen::ActionClamberDropOff ActorStates::addActionClamberDropOff() const
        {
            return Ent::Gen::ActionClamberDropOff(addSubNode("ActionClamberDropOff"));
        }
        inline void ActorStates::removeActionClamberDropOff() const
        {
            node->mapErase("ActionClamberDropOff");
        }
        inline std::optional<Ent::Gen::ActionClamberJump> ActorStates::ActionClamberJump() const
        {
            auto sub = getSubNode("ActionClamberJump");
            return sub == nullptr? std::optional<Ent::Gen::ActionClamberJump>{}: std::optional<Ent::Gen::ActionClamberJump>(getSubNode("ActionClamberJump"));
        }
        inline Ent::Gen::ActionClamberJump ActorStates::addActionClamberJump() const
        {
            return Ent::Gen::ActionClamberJump(addSubNode("ActionClamberJump"));
        }
        inline void ActorStates::removeActionClamberJump() const
        {
            node->mapErase("ActionClamberJump");
        }
        inline std::optional<Ent::Gen::ActionClamberJumpOff> ActorStates::ActionClamberJumpOff() const
        {
            auto sub = getSubNode("ActionClamberJumpOff");
            return sub == nullptr? std::optional<Ent::Gen::ActionClamberJumpOff>{}: std::optional<Ent::Gen::ActionClamberJumpOff>(getSubNode("ActionClamberJumpOff"));
        }
        inline Ent::Gen::ActionClamberJumpOff ActorStates::addActionClamberJumpOff() const
        {
            return Ent::Gen::ActionClamberJumpOff(addSubNode("ActionClamberJumpOff"));
        }
        inline void ActorStates::removeActionClamberJumpOff() const
        {
            node->mapErase("ActionClamberJumpOff");
        }
        inline std::optional<Ent::Gen::ActionClamberLand> ActorStates::ActionClamberLand() const
        {
            auto sub = getSubNode("ActionClamberLand");
            return sub == nullptr? std::optional<Ent::Gen::ActionClamberLand>{}: std::optional<Ent::Gen::ActionClamberLand>(getSubNode("ActionClamberLand"));
        }
        inline Ent::Gen::ActionClamberLand ActorStates::addActionClamberLand() const
        {
            return Ent::Gen::ActionClamberLand(addSubNode("ActionClamberLand"));
        }
        inline void ActorStates::removeActionClamberLand() const
        {
            node->mapErase("ActionClamberLand");
        }
        inline std::optional<Ent::Gen::ActionClamberMove> ActorStates::ActionClamberMove() const
        {
            auto sub = getSubNode("ActionClamberMove");
            return sub == nullptr? std::optional<Ent::Gen::ActionClamberMove>{}: std::optional<Ent::Gen::ActionClamberMove>(getSubNode("ActionClamberMove"));
        }
        inline Ent::Gen::ActionClamberMove ActorStates::addActionClamberMove() const
        {
            return Ent::Gen::ActionClamberMove(addSubNode("ActionClamberMove"));
        }
        inline void ActorStates::removeActionClamberMove() const
        {
            node->mapErase("ActionClamberMove");
        }
        inline std::optional<Ent::Gen::ActionClamberRise> ActorStates::ActionClamberRise() const
        {
            auto sub = getSubNode("ActionClamberRise");
            return sub == nullptr? std::optional<Ent::Gen::ActionClamberRise>{}: std::optional<Ent::Gen::ActionClamberRise>(getSubNode("ActionClamberRise"));
        }
        inline Ent::Gen::ActionClamberRise ActorStates::addActionClamberRise() const
        {
            return Ent::Gen::ActionClamberRise(addSubNode("ActionClamberRise"));
        }
        inline void ActorStates::removeActionClamberRise() const
        {
            node->mapErase("ActionClamberRise");
        }
        inline std::optional<Ent::Gen::ActionClimbEdge> ActorStates::ActionClimbEdge() const
        {
            auto sub = getSubNode("ActionClimbEdge");
            return sub == nullptr? std::optional<Ent::Gen::ActionClimbEdge>{}: std::optional<Ent::Gen::ActionClimbEdge>(getSubNode("ActionClimbEdge"));
        }
        inline Ent::Gen::ActionClimbEdge ActorStates::addActionClimbEdge() const
        {
            return Ent::Gen::ActionClimbEdge(addSubNode("ActionClimbEdge"));
        }
        inline void ActorStates::removeActionClimbEdge() const
        {
            node->mapErase("ActionClimbEdge");
        }
        inline std::optional<Ent::Gen::ActionCollapse> ActorStates::ActionCollapse() const
        {
            auto sub = getSubNode("ActionCollapse");
            return sub == nullptr? std::optional<Ent::Gen::ActionCollapse>{}: std::optional<Ent::Gen::ActionCollapse>(getSubNode("ActionCollapse"));
        }
        inline Ent::Gen::ActionCollapse ActorStates::addActionCollapse() const
        {
            return Ent::Gen::ActionCollapse(addSubNode("ActionCollapse"));
        }
        inline void ActorStates::removeActionCollapse() const
        {
            node->mapErase("ActionCollapse");
        }
        inline std::optional<Ent::Gen::ActionDecelerate> ActorStates::ActionDecelerate() const
        {
            auto sub = getSubNode("ActionDecelerate");
            return sub == nullptr? std::optional<Ent::Gen::ActionDecelerate>{}: std::optional<Ent::Gen::ActionDecelerate>(getSubNode("ActionDecelerate"));
        }
        inline Ent::Gen::ActionDecelerate ActorStates::addActionDecelerate() const
        {
            return Ent::Gen::ActionDecelerate(addSubNode("ActionDecelerate"));
        }
        inline void ActorStates::removeActionDecelerate() const
        {
            node->mapErase("ActionDecelerate");
        }
        inline std::optional<Ent::Gen::ActionDigUpTreasure> ActorStates::ActionDigUpTreasure() const
        {
            auto sub = getSubNode("ActionDigUpTreasure");
            return sub == nullptr? std::optional<Ent::Gen::ActionDigUpTreasure>{}: std::optional<Ent::Gen::ActionDigUpTreasure>(getSubNode("ActionDigUpTreasure"));
        }
        inline Ent::Gen::ActionDigUpTreasure ActorStates::addActionDigUpTreasure() const
        {
            return Ent::Gen::ActionDigUpTreasure(addSubNode("ActionDigUpTreasure"));
        }
        inline void ActorStates::removeActionDigUpTreasure() const
        {
            node->mapErase("ActionDigUpTreasure");
        }
        inline std::optional<Ent::Gen::ActionDisableAndFollow> ActorStates::ActionDisableAndFollow() const
        {
            auto sub = getSubNode("ActionDisableAndFollow");
            return sub == nullptr? std::optional<Ent::Gen::ActionDisableAndFollow>{}: std::optional<Ent::Gen::ActionDisableAndFollow>(getSubNode("ActionDisableAndFollow"));
        }
        inline Ent::Gen::ActionDisableAndFollow ActorStates::addActionDisableAndFollow() const
        {
            return Ent::Gen::ActionDisableAndFollow(addSubNode("ActionDisableAndFollow"));
        }
        inline void ActorStates::removeActionDisableAndFollow() const
        {
            node->mapErase("ActionDisableAndFollow");
        }
        inline std::optional<Ent::Gen::ActionDodge> ActorStates::ActionDodge() const
        {
            auto sub = getSubNode("ActionDodge");
            return sub == nullptr? std::optional<Ent::Gen::ActionDodge>{}: std::optional<Ent::Gen::ActionDodge>(getSubNode("ActionDodge"));
        }
        inline Ent::Gen::ActionDodge ActorStates::addActionDodge() const
        {
            return Ent::Gen::ActionDodge(addSubNode("ActionDodge"));
        }
        inline void ActorStates::removeActionDodge() const
        {
            node->mapErase("ActionDodge");
        }
        inline std::optional<Ent::Gen::ActionDrawAttention> ActorStates::ActionDrawAttention() const
        {
            auto sub = getSubNode("ActionDrawAttention");
            return sub == nullptr? std::optional<Ent::Gen::ActionDrawAttention>{}: std::optional<Ent::Gen::ActionDrawAttention>(getSubNode("ActionDrawAttention"));
        }
        inline Ent::Gen::ActionDrawAttention ActorStates::addActionDrawAttention() const
        {
            return Ent::Gen::ActionDrawAttention(addSubNode("ActionDrawAttention"));
        }
        inline void ActorStates::removeActionDrawAttention() const
        {
            node->mapErase("ActionDrawAttention");
        }
        inline std::optional<Ent::Gen::ActionDrawWeapon> ActorStates::ActionDrawWeapon() const
        {
            auto sub = getSubNode("ActionDrawWeapon");
            return sub == nullptr? std::optional<Ent::Gen::ActionDrawWeapon>{}: std::optional<Ent::Gen::ActionDrawWeapon>(getSubNode("ActionDrawWeapon"));
        }
        inline Ent::Gen::ActionDrawWeapon ActorStates::addActionDrawWeapon() const
        {
            return Ent::Gen::ActionDrawWeapon(addSubNode("ActionDrawWeapon"));
        }
        inline void ActorStates::removeActionDrawWeapon() const
        {
            node->mapErase("ActionDrawWeapon");
        }
        inline std::optional<Ent::Gen::ActionDrawWeaponState> ActorStates::ActionDrawWeaponState() const
        {
            auto sub = getSubNode("ActionDrawWeaponState");
            return sub == nullptr? std::optional<Ent::Gen::ActionDrawWeaponState>{}: std::optional<Ent::Gen::ActionDrawWeaponState>(getSubNode("ActionDrawWeaponState"));
        }
        inline Ent::Gen::ActionDrawWeaponState ActorStates::addActionDrawWeaponState() const
        {
            return Ent::Gen::ActionDrawWeaponState(addSubNode("ActionDrawWeaponState"));
        }
        inline void ActorStates::removeActionDrawWeaponState() const
        {
            node->mapErase("ActionDrawWeaponState");
        }
        inline std::optional<Ent::Gen::ActionDrift> ActorStates::ActionDrift() const
        {
            auto sub = getSubNode("ActionDrift");
            return sub == nullptr? std::optional<Ent::Gen::ActionDrift>{}: std::optional<Ent::Gen::ActionDrift>(getSubNode("ActionDrift"));
        }
        inline Ent::Gen::ActionDrift ActorStates::addActionDrift() const
        {
            return Ent::Gen::ActionDrift(addSubNode("ActionDrift"));
        }
        inline void ActorStates::removeActionDrift() const
        {
            node->mapErase("ActionDrift");
        }
        inline std::optional<Ent::Gen::ActionDrop> ActorStates::ActionDrop() const
        {
            auto sub = getSubNode("ActionDrop");
            return sub == nullptr? std::optional<Ent::Gen::ActionDrop>{}: std::optional<Ent::Gen::ActionDrop>(getSubNode("ActionDrop"));
        }
        inline Ent::Gen::ActionDrop ActorStates::addActionDrop() const
        {
            return Ent::Gen::ActionDrop(addSubNode("ActionDrop"));
        }
        inline void ActorStates::removeActionDrop() const
        {
            node->mapErase("ActionDrop");
        }
        inline std::optional<Ent::Gen::ActionEmote> ActorStates::ActionEmote() const
        {
            auto sub = getSubNode("ActionEmote");
            return sub == nullptr? std::optional<Ent::Gen::ActionEmote>{}: std::optional<Ent::Gen::ActionEmote>(getSubNode("ActionEmote"));
        }
        inline Ent::Gen::ActionEmote ActorStates::addActionEmote() const
        {
            return Ent::Gen::ActionEmote(addSubNode("ActionEmote"));
        }
        inline void ActorStates::removeActionEmote() const
        {
            node->mapErase("ActionEmote");
        }
        inline std::optional<Ent::Gen::ActionFlyCrash> ActorStates::ActionFlyCrash() const
        {
            auto sub = getSubNode("ActionFlyCrash");
            return sub == nullptr? std::optional<Ent::Gen::ActionFlyCrash>{}: std::optional<Ent::Gen::ActionFlyCrash>(getSubNode("ActionFlyCrash"));
        }
        inline Ent::Gen::ActionFlyCrash ActorStates::addActionFlyCrash() const
        {
            return Ent::Gen::ActionFlyCrash(addSubNode("ActionFlyCrash"));
        }
        inline void ActorStates::removeActionFlyCrash() const
        {
            node->mapErase("ActionFlyCrash");
        }
        inline std::optional<Ent::Gen::ActionFlyDive> ActorStates::ActionFlyDive() const
        {
            auto sub = getSubNode("ActionFlyDive");
            return sub == nullptr? std::optional<Ent::Gen::ActionFlyDive>{}: std::optional<Ent::Gen::ActionFlyDive>(getSubNode("ActionFlyDive"));
        }
        inline Ent::Gen::ActionFlyDive ActorStates::addActionFlyDive() const
        {
            return Ent::Gen::ActionFlyDive(addSubNode("ActionFlyDive"));
        }
        inline void ActorStates::removeActionFlyDive() const
        {
            node->mapErase("ActionFlyDive");
        }
        inline std::optional<Ent::Gen::ActionFlyDown> ActorStates::ActionFlyDown() const
        {
            auto sub = getSubNode("ActionFlyDown");
            return sub == nullptr? std::optional<Ent::Gen::ActionFlyDown>{}: std::optional<Ent::Gen::ActionFlyDown>(getSubNode("ActionFlyDown"));
        }
        inline Ent::Gen::ActionFlyDown ActorStates::addActionFlyDown() const
        {
            return Ent::Gen::ActionFlyDown(addSubNode("ActionFlyDown"));
        }
        inline void ActorStates::removeActionFlyDown() const
        {
            node->mapErase("ActionFlyDown");
        }
        inline std::optional<Ent::Gen::ActionFlyFlap> ActorStates::ActionFlyFlap() const
        {
            auto sub = getSubNode("ActionFlyFlap");
            return sub == nullptr? std::optional<Ent::Gen::ActionFlyFlap>{}: std::optional<Ent::Gen::ActionFlyFlap>(getSubNode("ActionFlyFlap"));
        }
        inline Ent::Gen::ActionFlyFlap ActorStates::addActionFlyFlap() const
        {
            return Ent::Gen::ActionFlyFlap(addSubNode("ActionFlyFlap"));
        }
        inline void ActorStates::removeActionFlyFlap() const
        {
            node->mapErase("ActionFlyFlap");
        }
        inline std::optional<Ent::Gen::ActionFlyUp> ActorStates::ActionFlyUp() const
        {
            auto sub = getSubNode("ActionFlyUp");
            return sub == nullptr? std::optional<Ent::Gen::ActionFlyUp>{}: std::optional<Ent::Gen::ActionFlyUp>(getSubNode("ActionFlyUp"));
        }
        inline Ent::Gen::ActionFlyUp ActorStates::addActionFlyUp() const
        {
            return Ent::Gen::ActionFlyUp(addSubNode("ActionFlyUp"));
        }
        inline void ActorStates::removeActionFlyUp() const
        {
            node->mapErase("ActionFlyUp");
        }
        inline std::optional<Ent::Gen::ActionHit> ActorStates::ActionHit() const
        {
            auto sub = getSubNode("ActionHit");
            return sub == nullptr? std::optional<Ent::Gen::ActionHit>{}: std::optional<Ent::Gen::ActionHit>(getSubNode("ActionHit"));
        }
        inline Ent::Gen::ActionHit ActorStates::addActionHit() const
        {
            return Ent::Gen::ActionHit(addSubNode("ActionHit"));
        }
        inline void ActorStates::removeActionHit() const
        {
            node->mapErase("ActionHit");
        }
        inline std::optional<Ent::Gen::ActionIdle> ActorStates::ActionIdle() const
        {
            auto sub = getSubNode("ActionIdle");
            return sub == nullptr? std::optional<Ent::Gen::ActionIdle>{}: std::optional<Ent::Gen::ActionIdle>(getSubNode("ActionIdle"));
        }
        inline Ent::Gen::ActionIdle ActorStates::addActionIdle() const
        {
            return Ent::Gen::ActionIdle(addSubNode("ActionIdle"));
        }
        inline void ActorStates::removeActionIdle() const
        {
            node->mapErase("ActionIdle");
        }
        inline std::optional<Ent::Gen::ActionIncarnate> ActorStates::ActionIncarnate() const
        {
            auto sub = getSubNode("ActionIncarnate");
            return sub == nullptr? std::optional<Ent::Gen::ActionIncarnate>{}: std::optional<Ent::Gen::ActionIncarnate>(getSubNode("ActionIncarnate"));
        }
        inline Ent::Gen::ActionIncarnate ActorStates::addActionIncarnate() const
        {
            return Ent::Gen::ActionIncarnate(addSubNode("ActionIncarnate"));
        }
        inline void ActorStates::removeActionIncarnate() const
        {
            node->mapErase("ActionIncarnate");
        }
        inline std::optional<Ent::Gen::ActionIncarnated> ActorStates::ActionIncarnated() const
        {
            auto sub = getSubNode("ActionIncarnated");
            return sub == nullptr? std::optional<Ent::Gen::ActionIncarnated>{}: std::optional<Ent::Gen::ActionIncarnated>(getSubNode("ActionIncarnated"));
        }
        inline Ent::Gen::ActionIncarnated ActorStates::addActionIncarnated() const
        {
            return Ent::Gen::ActionIncarnated(addSubNode("ActionIncarnated"));
        }
        inline void ActorStates::removeActionIncarnated() const
        {
            node->mapErase("ActionIncarnated");
        }
        inline std::optional<Ent::Gen::ActionJump> ActorStates::ActionJump() const
        {
            auto sub = getSubNode("ActionJump");
            return sub == nullptr? std::optional<Ent::Gen::ActionJump>{}: std::optional<Ent::Gen::ActionJump>(getSubNode("ActionJump"));
        }
        inline Ent::Gen::ActionJump ActorStates::addActionJump() const
        {
            return Ent::Gen::ActionJump(addSubNode("ActionJump"));
        }
        inline void ActorStates::removeActionJump() const
        {
            node->mapErase("ActionJump");
        }
        inline std::optional<Ent::Gen::ActionJumpOnto> ActorStates::ActionJumpOnto() const
        {
            auto sub = getSubNode("ActionJumpOnto");
            return sub == nullptr? std::optional<Ent::Gen::ActionJumpOnto>{}: std::optional<Ent::Gen::ActionJumpOnto>(getSubNode("ActionJumpOnto"));
        }
        inline Ent::Gen::ActionJumpOnto ActorStates::addActionJumpOnto() const
        {
            return Ent::Gen::ActionJumpOnto(addSubNode("ActionJumpOnto"));
        }
        inline void ActorStates::removeActionJumpOnto() const
        {
            node->mapErase("ActionJumpOnto");
        }
        inline std::optional<Ent::Gen::ActionLand> ActorStates::ActionLand() const
        {
            auto sub = getSubNode("ActionLand");
            return sub == nullptr? std::optional<Ent::Gen::ActionLand>{}: std::optional<Ent::Gen::ActionLand>(getSubNode("ActionLand"));
        }
        inline Ent::Gen::ActionLand ActorStates::addActionLand() const
        {
            return Ent::Gen::ActionLand(addSubNode("ActionLand"));
        }
        inline void ActorStates::removeActionLand() const
        {
            node->mapErase("ActionLand");
        }
        inline std::optional<Ent::Gen::ActionLandingMount> ActorStates::ActionLandingMount() const
        {
            auto sub = getSubNode("ActionLandingMount");
            return sub == nullptr? std::optional<Ent::Gen::ActionLandingMount>{}: std::optional<Ent::Gen::ActionLandingMount>(getSubNode("ActionLandingMount"));
        }
        inline Ent::Gen::ActionLandingMount ActorStates::addActionLandingMount() const
        {
            return Ent::Gen::ActionLandingMount(addSubNode("ActionLandingMount"));
        }
        inline void ActorStates::removeActionLandingMount() const
        {
            node->mapErase("ActionLandingMount");
        }
        inline std::optional<Ent::Gen::ActionLookAt> ActorStates::ActionLookAt() const
        {
            auto sub = getSubNode("ActionLookAt");
            return sub == nullptr? std::optional<Ent::Gen::ActionLookAt>{}: std::optional<Ent::Gen::ActionLookAt>(getSubNode("ActionLookAt"));
        }
        inline Ent::Gen::ActionLookAt ActorStates::addActionLookAt() const
        {
            return Ent::Gen::ActionLookAt(addSubNode("ActionLookAt"));
        }
        inline void ActorStates::removeActionLookAt() const
        {
            node->mapErase("ActionLookAt");
        }
        inline std::optional<Ent::Gen::ActionMountReception> ActorStates::ActionMountReception() const
        {
            auto sub = getSubNode("ActionMountReception");
            return sub == nullptr? std::optional<Ent::Gen::ActionMountReception>{}: std::optional<Ent::Gen::ActionMountReception>(getSubNode("ActionMountReception"));
        }
        inline Ent::Gen::ActionMountReception ActorStates::addActionMountReception() const
        {
            return Ent::Gen::ActionMountReception(addSubNode("ActionMountReception"));
        }
        inline void ActorStates::removeActionMountReception() const
        {
            node->mapErase("ActionMountReception");
        }
        inline std::optional<Ent::Gen::ActionMove> ActorStates::ActionMove() const
        {
            auto sub = getSubNode("ActionMove");
            return sub == nullptr? std::optional<Ent::Gen::ActionMove>{}: std::optional<Ent::Gen::ActionMove>(getSubNode("ActionMove"));
        }
        inline Ent::Gen::ActionMove ActorStates::addActionMove() const
        {
            return Ent::Gen::ActionMove(addSubNode("ActionMove"));
        }
        inline void ActorStates::removeActionMove() const
        {
            node->mapErase("ActionMove");
        }
        inline std::optional<Ent::Gen::ActionMoveProjectile> ActorStates::ActionMoveProjectile() const
        {
            auto sub = getSubNode("ActionMoveProjectile");
            return sub == nullptr? std::optional<Ent::Gen::ActionMoveProjectile>{}: std::optional<Ent::Gen::ActionMoveProjectile>(getSubNode("ActionMoveProjectile"));
        }
        inline Ent::Gen::ActionMoveProjectile ActorStates::addActionMoveProjectile() const
        {
            return Ent::Gen::ActionMoveProjectile(addSubNode("ActionMoveProjectile"));
        }
        inline void ActorStates::removeActionMoveProjectile() const
        {
            node->mapErase("ActionMoveProjectile");
        }
        inline std::optional<Ent::Gen::ActionMoveTo> ActorStates::ActionMoveTo() const
        {
            auto sub = getSubNode("ActionMoveTo");
            return sub == nullptr? std::optional<Ent::Gen::ActionMoveTo>{}: std::optional<Ent::Gen::ActionMoveTo>(getSubNode("ActionMoveTo"));
        }
        inline Ent::Gen::ActionMoveTo ActorStates::addActionMoveTo() const
        {
            return Ent::Gen::ActionMoveTo(addSubNode("ActionMoveTo"));
        }
        inline void ActorStates::removeActionMoveTo() const
        {
            node->mapErase("ActionMoveTo");
        }
        inline std::optional<Ent::Gen::ActionOrientMount> ActorStates::ActionOrientMount() const
        {
            auto sub = getSubNode("ActionOrientMount");
            return sub == nullptr? std::optional<Ent::Gen::ActionOrientMount>{}: std::optional<Ent::Gen::ActionOrientMount>(getSubNode("ActionOrientMount"));
        }
        inline Ent::Gen::ActionOrientMount ActorStates::addActionOrientMount() const
        {
            return Ent::Gen::ActionOrientMount(addSubNode("ActionOrientMount"));
        }
        inline void ActorStates::removeActionOrientMount() const
        {
            node->mapErase("ActionOrientMount");
        }
        inline std::optional<Ent::Gen::ActionOutfitSpecialState> ActorStates::ActionOutfitSpecialState() const
        {
            auto sub = getSubNode("ActionOutfitSpecialState");
            return sub == nullptr? std::optional<Ent::Gen::ActionOutfitSpecialState>{}: std::optional<Ent::Gen::ActionOutfitSpecialState>(getSubNode("ActionOutfitSpecialState"));
        }
        inline Ent::Gen::ActionOutfitSpecialState ActorStates::addActionOutfitSpecialState() const
        {
            return Ent::Gen::ActionOutfitSpecialState(addSubNode("ActionOutfitSpecialState"));
        }
        inline void ActorStates::removeActionOutfitSpecialState() const
        {
            node->mapErase("ActionOutfitSpecialState");
        }
        inline std::optional<Ent::Gen::ActionPathfindAndMove> ActorStates::ActionPathfindAndMove() const
        {
            auto sub = getSubNode("ActionPathfindAndMove");
            return sub == nullptr? std::optional<Ent::Gen::ActionPathfindAndMove>{}: std::optional<Ent::Gen::ActionPathfindAndMove>(getSubNode("ActionPathfindAndMove"));
        }
        inline Ent::Gen::ActionPathfindAndMove ActorStates::addActionPathfindAndMove() const
        {
            return Ent::Gen::ActionPathfindAndMove(addSubNode("ActionPathfindAndMove"));
        }
        inline void ActorStates::removeActionPathfindAndMove() const
        {
            node->mapErase("ActionPathfindAndMove");
        }
        inline std::optional<Ent::Gen::ActionPatinate> ActorStates::ActionPatinate() const
        {
            auto sub = getSubNode("ActionPatinate");
            return sub == nullptr? std::optional<Ent::Gen::ActionPatinate>{}: std::optional<Ent::Gen::ActionPatinate>(getSubNode("ActionPatinate"));
        }
        inline Ent::Gen::ActionPatinate ActorStates::addActionPatinate() const
        {
            return Ent::Gen::ActionPatinate(addSubNode("ActionPatinate"));
        }
        inline void ActorStates::removeActionPatinate() const
        {
            node->mapErase("ActionPatinate");
        }
        inline std::optional<Ent::Gen::ActionPlayAnim> ActorStates::ActionPlayAnim() const
        {
            auto sub = getSubNode("ActionPlayAnim");
            return sub == nullptr? std::optional<Ent::Gen::ActionPlayAnim>{}: std::optional<Ent::Gen::ActionPlayAnim>(getSubNode("ActionPlayAnim"));
        }
        inline Ent::Gen::ActionPlayAnim ActorStates::addActionPlayAnim() const
        {
            return Ent::Gen::ActionPlayAnim(addSubNode("ActionPlayAnim"));
        }
        inline void ActorStates::removeActionPlayAnim() const
        {
            node->mapErase("ActionPlayAnim");
        }
        inline std::optional<Ent::Gen::ActionPropelled> ActorStates::ActionPropelled() const
        {
            auto sub = getSubNode("ActionPropelled");
            return sub == nullptr? std::optional<Ent::Gen::ActionPropelled>{}: std::optional<Ent::Gen::ActionPropelled>(getSubNode("ActionPropelled"));
        }
        inline Ent::Gen::ActionPropelled ActorStates::addActionPropelled() const
        {
            return Ent::Gen::ActionPropelled(addSubNode("ActionPropelled"));
        }
        inline void ActorStates::removeActionPropelled() const
        {
            node->mapErase("ActionPropelled");
        }
        inline std::optional<Ent::Gen::ActionPushed> ActorStates::ActionPushed() const
        {
            auto sub = getSubNode("ActionPushed");
            return sub == nullptr? std::optional<Ent::Gen::ActionPushed>{}: std::optional<Ent::Gen::ActionPushed>(getSubNode("ActionPushed"));
        }
        inline Ent::Gen::ActionPushed ActorStates::addActionPushed() const
        {
            return Ent::Gen::ActionPushed(addSubNode("ActionPushed"));
        }
        inline void ActorStates::removeActionPushed() const
        {
            node->mapErase("ActionPushed");
        }
        inline std::optional<Ent::Gen::ActionQuadStandUpState> ActorStates::ActionQuadStandUpState() const
        {
            auto sub = getSubNode("ActionQuadStandUpState");
            return sub == nullptr? std::optional<Ent::Gen::ActionQuadStandUpState>{}: std::optional<Ent::Gen::ActionQuadStandUpState>(getSubNode("ActionQuadStandUpState"));
        }
        inline Ent::Gen::ActionQuadStandUpState ActorStates::addActionQuadStandUpState() const
        {
            return Ent::Gen::ActionQuadStandUpState(addSubNode("ActionQuadStandUpState"));
        }
        inline void ActorStates::removeActionQuadStandUpState() const
        {
            node->mapErase("ActionQuadStandUpState");
        }
        inline std::optional<Ent::Gen::ActionQuadStandUpStateIn> ActorStates::ActionQuadStandUpStateIn() const
        {
            auto sub = getSubNode("ActionQuadStandUpStateIn");
            return sub == nullptr? std::optional<Ent::Gen::ActionQuadStandUpStateIn>{}: std::optional<Ent::Gen::ActionQuadStandUpStateIn>(getSubNode("ActionQuadStandUpStateIn"));
        }
        inline Ent::Gen::ActionQuadStandUpStateIn ActorStates::addActionQuadStandUpStateIn() const
        {
            return Ent::Gen::ActionQuadStandUpStateIn(addSubNode("ActionQuadStandUpStateIn"));
        }
        inline void ActorStates::removeActionQuadStandUpStateIn() const
        {
            node->mapErase("ActionQuadStandUpStateIn");
        }
        inline std::optional<Ent::Gen::ActionQuadStandUpStateOut> ActorStates::ActionQuadStandUpStateOut() const
        {
            auto sub = getSubNode("ActionQuadStandUpStateOut");
            return sub == nullptr? std::optional<Ent::Gen::ActionQuadStandUpStateOut>{}: std::optional<Ent::Gen::ActionQuadStandUpStateOut>(getSubNode("ActionQuadStandUpStateOut"));
        }
        inline Ent::Gen::ActionQuadStandUpStateOut ActorStates::addActionQuadStandUpStateOut() const
        {
            return Ent::Gen::ActionQuadStandUpStateOut(addSubNode("ActionQuadStandUpStateOut"));
        }
        inline void ActorStates::removeActionQuadStandUpStateOut() const
        {
            node->mapErase("ActionQuadStandUpStateOut");
        }
        inline std::optional<Ent::Gen::ActionRagdoll> ActorStates::ActionRagdoll() const
        {
            auto sub = getSubNode("ActionRagdoll");
            return sub == nullptr? std::optional<Ent::Gen::ActionRagdoll>{}: std::optional<Ent::Gen::ActionRagdoll>(getSubNode("ActionRagdoll"));
        }
        inline Ent::Gen::ActionRagdoll ActorStates::addActionRagdoll() const
        {
            return Ent::Gen::ActionRagdoll(addSubNode("ActionRagdoll"));
        }
        inline void ActorStates::removeActionRagdoll() const
        {
            node->mapErase("ActionRagdoll");
        }
        inline std::optional<Ent::Gen::ActionReviveMaskEffect> ActorStates::ActionReviveMaskEffect() const
        {
            auto sub = getSubNode("ActionReviveMaskEffect");
            return sub == nullptr? std::optional<Ent::Gen::ActionReviveMaskEffect>{}: std::optional<Ent::Gen::ActionReviveMaskEffect>(getSubNode("ActionReviveMaskEffect"));
        }
        inline Ent::Gen::ActionReviveMaskEffect ActorStates::addActionReviveMaskEffect() const
        {
            return Ent::Gen::ActionReviveMaskEffect(addSubNode("ActionReviveMaskEffect"));
        }
        inline void ActorStates::removeActionReviveMaskEffect() const
        {
            node->mapErase("ActionReviveMaskEffect");
        }
        inline std::optional<Ent::Gen::ActionRiderStance> ActorStates::ActionRiderStance() const
        {
            auto sub = getSubNode("ActionRiderStance");
            return sub == nullptr? std::optional<Ent::Gen::ActionRiderStance>{}: std::optional<Ent::Gen::ActionRiderStance>(getSubNode("ActionRiderStance"));
        }
        inline Ent::Gen::ActionRiderStance ActorStates::addActionRiderStance() const
        {
            return Ent::Gen::ActionRiderStance(addSubNode("ActionRiderStance"));
        }
        inline void ActorStates::removeActionRiderStance() const
        {
            node->mapErase("ActionRiderStance");
        }
        inline std::optional<Ent::Gen::ActionRise> ActorStates::ActionRise() const
        {
            auto sub = getSubNode("ActionRise");
            return sub == nullptr? std::optional<Ent::Gen::ActionRise>{}: std::optional<Ent::Gen::ActionRise>(getSubNode("ActionRise"));
        }
        inline Ent::Gen::ActionRise ActorStates::addActionRise() const
        {
            return Ent::Gen::ActionRise(addSubNode("ActionRise"));
        }
        inline void ActorStates::removeActionRise() const
        {
            node->mapErase("ActionRise");
        }
        inline std::optional<Ent::Gen::ActionScaleRider> ActorStates::ActionScaleRider() const
        {
            auto sub = getSubNode("ActionScaleRider");
            return sub == nullptr? std::optional<Ent::Gen::ActionScaleRider>{}: std::optional<Ent::Gen::ActionScaleRider>(getSubNode("ActionScaleRider"));
        }
        inline Ent::Gen::ActionScaleRider ActorStates::addActionScaleRider() const
        {
            return Ent::Gen::ActionScaleRider(addSubNode("ActionScaleRider"));
        }
        inline void ActorStates::removeActionScaleRider() const
        {
            node->mapErase("ActionScaleRider");
        }
        inline std::optional<Ent::Gen::ActionShakeOff> ActorStates::ActionShakeOff() const
        {
            auto sub = getSubNode("ActionShakeOff");
            return sub == nullptr? std::optional<Ent::Gen::ActionShakeOff>{}: std::optional<Ent::Gen::ActionShakeOff>(getSubNode("ActionShakeOff"));
        }
        inline Ent::Gen::ActionShakeOff ActorStates::addActionShakeOff() const
        {
            return Ent::Gen::ActionShakeOff(addSubNode("ActionShakeOff"));
        }
        inline void ActorStates::removeActionShakeOff() const
        {
            node->mapErase("ActionShakeOff");
        }
        inline std::optional<Ent::Gen::ActionShamanVision> ActorStates::ActionShamanVision() const
        {
            auto sub = getSubNode("ActionShamanVision");
            return sub == nullptr? std::optional<Ent::Gen::ActionShamanVision>{}: std::optional<Ent::Gen::ActionShamanVision>(getSubNode("ActionShamanVision"));
        }
        inline Ent::Gen::ActionShamanVision ActorStates::addActionShamanVision() const
        {
            return Ent::Gen::ActionShamanVision(addSubNode("ActionShamanVision"));
        }
        inline void ActorStates::removeActionShamanVision() const
        {
            node->mapErase("ActionShamanVision");
        }
        inline std::optional<Ent::Gen::ActionShootBeam> ActorStates::ActionShootBeam() const
        {
            auto sub = getSubNode("ActionShootBeam");
            return sub == nullptr? std::optional<Ent::Gen::ActionShootBeam>{}: std::optional<Ent::Gen::ActionShootBeam>(getSubNode("ActionShootBeam"));
        }
        inline Ent::Gen::ActionShootBeam ActorStates::addActionShootBeam() const
        {
            return Ent::Gen::ActionShootBeam(addSubNode("ActionShootBeam"));
        }
        inline void ActorStates::removeActionShootBeam() const
        {
            node->mapErase("ActionShootBeam");
        }
        inline std::optional<Ent::Gen::ActionSlide> ActorStates::ActionSlide() const
        {
            auto sub = getSubNode("ActionSlide");
            return sub == nullptr? std::optional<Ent::Gen::ActionSlide>{}: std::optional<Ent::Gen::ActionSlide>(getSubNode("ActionSlide"));
        }
        inline Ent::Gen::ActionSlide ActorStates::addActionSlide() const
        {
            return Ent::Gen::ActionSlide(addSubNode("ActionSlide"));
        }
        inline void ActorStates::removeActionSlide() const
        {
            node->mapErase("ActionSlide");
        }
        inline std::optional<Ent::Gen::ActionStartRun> ActorStates::ActionStartRun() const
        {
            auto sub = getSubNode("ActionStartRun");
            return sub == nullptr? std::optional<Ent::Gen::ActionStartRun>{}: std::optional<Ent::Gen::ActionStartRun>(getSubNode("ActionStartRun"));
        }
        inline Ent::Gen::ActionStartRun ActorStates::addActionStartRun() const
        {
            return Ent::Gen::ActionStartRun(addSubNode("ActionStartRun"));
        }
        inline void ActorStates::removeActionStartRun() const
        {
            node->mapErase("ActionStartRun");
        }
        inline std::optional<Ent::Gen::ActionStop> ActorStates::ActionStop() const
        {
            auto sub = getSubNode("ActionStop");
            return sub == nullptr? std::optional<Ent::Gen::ActionStop>{}: std::optional<Ent::Gen::ActionStop>(getSubNode("ActionStop"));
        }
        inline Ent::Gen::ActionStop ActorStates::addActionStop() const
        {
            return Ent::Gen::ActionStop(addSubNode("ActionStop"));
        }
        inline void ActorStates::removeActionStop() const
        {
            node->mapErase("ActionStop");
        }
        inline std::optional<Ent::Gen::ActionStrafe> ActorStates::ActionStrafe() const
        {
            auto sub = getSubNode("ActionStrafe");
            return sub == nullptr? std::optional<Ent::Gen::ActionStrafe>{}: std::optional<Ent::Gen::ActionStrafe>(getSubNode("ActionStrafe"));
        }
        inline Ent::Gen::ActionStrafe ActorStates::addActionStrafe() const
        {
            return Ent::Gen::ActionStrafe(addSubNode("ActionStrafe"));
        }
        inline void ActorStates::removeActionStrafe() const
        {
            node->mapErase("ActionStrafe");
        }
        inline std::optional<Ent::Gen::ActionStrafeTurn> ActorStates::ActionStrafeTurn() const
        {
            auto sub = getSubNode("ActionStrafeTurn");
            return sub == nullptr? std::optional<Ent::Gen::ActionStrafeTurn>{}: std::optional<Ent::Gen::ActionStrafeTurn>(getSubNode("ActionStrafeTurn"));
        }
        inline Ent::Gen::ActionStrafeTurn ActorStates::addActionStrafeTurn() const
        {
            return Ent::Gen::ActionStrafeTurn(addSubNode("ActionStrafeTurn"));
        }
        inline void ActorStates::removeActionStrafeTurn() const
        {
            node->mapErase("ActionStrafeTurn");
        }
        inline std::optional<Ent::Gen::ActionTakeOff> ActorStates::ActionTakeOff() const
        {
            auto sub = getSubNode("ActionTakeOff");
            return sub == nullptr? std::optional<Ent::Gen::ActionTakeOff>{}: std::optional<Ent::Gen::ActionTakeOff>(getSubNode("ActionTakeOff"));
        }
        inline Ent::Gen::ActionTakeOff ActorStates::addActionTakeOff() const
        {
            return Ent::Gen::ActionTakeOff(addSubNode("ActionTakeOff"));
        }
        inline void ActorStates::removeActionTakeOff() const
        {
            node->mapErase("ActionTakeOff");
        }
        inline std::optional<Ent::Gen::ActionTalk> ActorStates::ActionTalk() const
        {
            auto sub = getSubNode("ActionTalk");
            return sub == nullptr? std::optional<Ent::Gen::ActionTalk>{}: std::optional<Ent::Gen::ActionTalk>(getSubNode("ActionTalk"));
        }
        inline Ent::Gen::ActionTalk ActorStates::addActionTalk() const
        {
            return Ent::Gen::ActionTalk(addSubNode("ActionTalk"));
        }
        inline void ActorStates::removeActionTalk() const
        {
            node->mapErase("ActionTalk");
        }
        inline std::optional<Ent::Gen::ActionTopView> ActorStates::ActionTopView() const
        {
            auto sub = getSubNode("ActionTopView");
            return sub == nullptr? std::optional<Ent::Gen::ActionTopView>{}: std::optional<Ent::Gen::ActionTopView>(getSubNode("ActionTopView"));
        }
        inline Ent::Gen::ActionTopView ActorStates::addActionTopView() const
        {
            return Ent::Gen::ActionTopView(addSubNode("ActionTopView"));
        }
        inline void ActorStates::removeActionTopView() const
        {
            node->mapErase("ActionTopView");
        }
        inline std::optional<Ent::Gen::ActionTriggerCrouch> ActorStates::ActionTriggerCrouch() const
        {
            auto sub = getSubNode("ActionTriggerCrouch");
            return sub == nullptr? std::optional<Ent::Gen::ActionTriggerCrouch>{}: std::optional<Ent::Gen::ActionTriggerCrouch>(getSubNode("ActionTriggerCrouch"));
        }
        inline Ent::Gen::ActionTriggerCrouch ActorStates::addActionTriggerCrouch() const
        {
            return Ent::Gen::ActionTriggerCrouch(addSubNode("ActionTriggerCrouch"));
        }
        inline void ActorStates::removeActionTriggerCrouch() const
        {
            node->mapErase("ActionTriggerCrouch");
        }
        inline std::optional<Ent::Gen::ActionTriggerShamanVisionExit> ActorStates::ActionTriggerShamanVisionExit() const
        {
            auto sub = getSubNode("ActionTriggerShamanVisionExit");
            return sub == nullptr? std::optional<Ent::Gen::ActionTriggerShamanVisionExit>{}: std::optional<Ent::Gen::ActionTriggerShamanVisionExit>(getSubNode("ActionTriggerShamanVisionExit"));
        }
        inline Ent::Gen::ActionTriggerShamanVisionExit ActorStates::addActionTriggerShamanVisionExit() const
        {
            return Ent::Gen::ActionTriggerShamanVisionExit(addSubNode("ActionTriggerShamanVisionExit"));
        }
        inline void ActorStates::removeActionTriggerShamanVisionExit() const
        {
            node->mapErase("ActionTriggerShamanVisionExit");
        }
        inline std::optional<Ent::Gen::ActionTriggerStandUp> ActorStates::ActionTriggerStandUp() const
        {
            auto sub = getSubNode("ActionTriggerStandUp");
            return sub == nullptr? std::optional<Ent::Gen::ActionTriggerStandUp>{}: std::optional<Ent::Gen::ActionTriggerStandUp>(getSubNode("ActionTriggerStandUp"));
        }
        inline Ent::Gen::ActionTriggerStandUp ActorStates::addActionTriggerStandUp() const
        {
            return Ent::Gen::ActionTriggerStandUp(addSubNode("ActionTriggerStandUp"));
        }
        inline void ActorStates::removeActionTriggerStandUp() const
        {
            node->mapErase("ActionTriggerStandUp");
        }
        inline std::optional<Ent::Gen::ActionTurn> ActorStates::ActionTurn() const
        {
            auto sub = getSubNode("ActionTurn");
            return sub == nullptr? std::optional<Ent::Gen::ActionTurn>{}: std::optional<Ent::Gen::ActionTurn>(getSubNode("ActionTurn"));
        }
        inline Ent::Gen::ActionTurn ActorStates::addActionTurn() const
        {
            return Ent::Gen::ActionTurn(addSubNode("ActionTurn"));
        }
        inline void ActorStates::removeActionTurn() const
        {
            node->mapErase("ActionTurn");
        }
        inline std::optional<Ent::Gen::ActionUnmount> ActorStates::ActionUnmount() const
        {
            auto sub = getSubNode("ActionUnmount");
            return sub == nullptr? std::optional<Ent::Gen::ActionUnmount>{}: std::optional<Ent::Gen::ActionUnmount>(getSubNode("ActionUnmount"));
        }
        inline Ent::Gen::ActionUnmount ActorStates::addActionUnmount() const
        {
            return Ent::Gen::ActionUnmount(addSubNode("ActionUnmount"));
        }
        inline void ActorStates::removeActionUnmount() const
        {
            node->mapErase("ActionUnmount");
        }
        inline std::optional<Ent::Gen::ActionWait> ActorStates::ActionWait() const
        {
            auto sub = getSubNode("ActionWait");
            return sub == nullptr? std::optional<Ent::Gen::ActionWait>{}: std::optional<Ent::Gen::ActionWait>(getSubNode("ActionWait"));
        }
        inline Ent::Gen::ActionWait ActorStates::addActionWait() const
        {
            return Ent::Gen::ActionWait(addSubNode("ActionWait"));
        }
        inline void ActorStates::removeActionWait() const
        {
            node->mapErase("ActionWait");
        }
        inline std::optional<Ent::Gen::ActorStateAimCharge> ActorStates::ActorStateAimCharge() const
        {
            auto sub = getSubNode("ActorStateAimCharge");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateAimCharge>{}: std::optional<Ent::Gen::ActorStateAimCharge>(getSubNode("ActorStateAimCharge"));
        }
        inline Ent::Gen::ActorStateAimCharge ActorStates::addActorStateAimCharge() const
        {
            return Ent::Gen::ActorStateAimCharge(addSubNode("ActorStateAimCharge"));
        }
        inline void ActorStates::removeActorStateAimCharge() const
        {
            node->mapErase("ActorStateAimCharge");
        }
        inline std::optional<Ent::Gen::ActorStateAlive> ActorStates::ActorStateAlive() const
        {
            auto sub = getSubNode("ActorStateAlive");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateAlive>{}: std::optional<Ent::Gen::ActorStateAlive>(getSubNode("ActorStateAlive"));
        }
        inline Ent::Gen::ActorStateAlive ActorStates::addActorStateAlive() const
        {
            return Ent::Gen::ActorStateAlive(addSubNode("ActorStateAlive"));
        }
        inline void ActorStates::removeActorStateAlive() const
        {
            node->mapErase("ActorStateAlive");
        }
        inline std::optional<Ent::Gen::ActorStateAnsweringCall> ActorStates::ActorStateAnsweringCall() const
        {
            auto sub = getSubNode("ActorStateAnsweringCall");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateAnsweringCall>{}: std::optional<Ent::Gen::ActorStateAnsweringCall>(getSubNode("ActorStateAnsweringCall"));
        }
        inline Ent::Gen::ActorStateAnsweringCall ActorStates::addActorStateAnsweringCall() const
        {
            return Ent::Gen::ActorStateAnsweringCall(addSubNode("ActorStateAnsweringCall"));
        }
        inline void ActorStates::removeActorStateAnsweringCall() const
        {
            node->mapErase("ActorStateAnsweringCall");
        }
        inline std::optional<Ent::Gen::ActorStateApplyHit> ActorStates::ActorStateApplyHit() const
        {
            auto sub = getSubNode("ActorStateApplyHit");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateApplyHit>{}: std::optional<Ent::Gen::ActorStateApplyHit>(getSubNode("ActorStateApplyHit"));
        }
        inline Ent::Gen::ActorStateApplyHit ActorStates::addActorStateApplyHit() const
        {
            return Ent::Gen::ActorStateApplyHit(addSubNode("ActorStateApplyHit"));
        }
        inline void ActorStates::removeActorStateApplyHit() const
        {
            node->mapErase("ActorStateApplyHit");
        }
        inline std::optional<Ent::Gen::ActorStateAttitudeAggressive> ActorStates::ActorStateAttitudeAggressive() const
        {
            auto sub = getSubNode("ActorStateAttitudeAggressive");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateAttitudeAggressive>{}: std::optional<Ent::Gen::ActorStateAttitudeAggressive>(getSubNode("ActorStateAttitudeAggressive"));
        }
        inline Ent::Gen::ActorStateAttitudeAggressive ActorStates::addActorStateAttitudeAggressive() const
        {
            return Ent::Gen::ActorStateAttitudeAggressive(addSubNode("ActorStateAttitudeAggressive"));
        }
        inline void ActorStates::removeActorStateAttitudeAggressive() const
        {
            node->mapErase("ActorStateAttitudeAggressive");
        }
        inline std::optional<Ent::Gen::ActorStateBehaviorState> ActorStates::ActorStateBehaviorState() const
        {
            auto sub = getSubNode("ActorStateBehaviorState");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBehaviorState>{}: std::optional<Ent::Gen::ActorStateBehaviorState>(getSubNode("ActorStateBehaviorState"));
        }
        inline Ent::Gen::ActorStateBehaviorState ActorStates::addActorStateBehaviorState() const
        {
            return Ent::Gen::ActorStateBehaviorState(addSubNode("ActorStateBehaviorState"));
        }
        inline void ActorStates::removeActorStateBehaviorState() const
        {
            node->mapErase("ActorStateBehaviorState");
        }
        inline std::optional<Ent::Gen::ActorStateBeingImmersed> ActorStates::ActorStateBeingImmersed() const
        {
            auto sub = getSubNode("ActorStateBeingImmersed");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingImmersed>{}: std::optional<Ent::Gen::ActorStateBeingImmersed>(getSubNode("ActorStateBeingImmersed"));
        }
        inline Ent::Gen::ActorStateBeingImmersed ActorStates::addActorStateBeingImmersed() const
        {
            return Ent::Gen::ActorStateBeingImmersed(addSubNode("ActorStateBeingImmersed"));
        }
        inline void ActorStates::removeActorStateBeingImmersed() const
        {
            node->mapErase("ActorStateBeingImmersed");
        }
        inline std::optional<Ent::Gen::ActorStateBeingImmersedFromInAir> ActorStates::ActorStateBeingImmersedFromInAir() const
        {
            auto sub = getSubNode("ActorStateBeingImmersedFromInAir");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingImmersedFromInAir>{}: std::optional<Ent::Gen::ActorStateBeingImmersedFromInAir>(getSubNode("ActorStateBeingImmersedFromInAir"));
        }
        inline Ent::Gen::ActorStateBeingImmersedFromInAir ActorStates::addActorStateBeingImmersedFromInAir() const
        {
            return Ent::Gen::ActorStateBeingImmersedFromInAir(addSubNode("ActorStateBeingImmersedFromInAir"));
        }
        inline void ActorStates::removeActorStateBeingImmersedFromInAir() const
        {
            node->mapErase("ActorStateBeingImmersedFromInAir");
        }
        inline std::optional<Ent::Gen::ActorStateBeingImmersedFromOnGround> ActorStates::ActorStateBeingImmersedFromOnGround() const
        {
            auto sub = getSubNode("ActorStateBeingImmersedFromOnGround");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingImmersedFromOnGround>{}: std::optional<Ent::Gen::ActorStateBeingImmersedFromOnGround>(getSubNode("ActorStateBeingImmersedFromOnGround"));
        }
        inline Ent::Gen::ActorStateBeingImmersedFromOnGround ActorStates::addActorStateBeingImmersedFromOnGround() const
        {
            return Ent::Gen::ActorStateBeingImmersedFromOnGround(addSubNode("ActorStateBeingImmersedFromOnGround"));
        }
        inline void ActorStates::removeActorStateBeingImmersedFromOnGround() const
        {
            node->mapErase("ActorStateBeingImmersedFromOnGround");
        }
        inline std::optional<Ent::Gen::ActorStateBeingInAir> ActorStates::ActorStateBeingInAir() const
        {
            auto sub = getSubNode("ActorStateBeingInAir");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingInAir>{}: std::optional<Ent::Gen::ActorStateBeingInAir>(getSubNode("ActorStateBeingInAir"));
        }
        inline Ent::Gen::ActorStateBeingInAir ActorStates::addActorStateBeingInAir() const
        {
            return Ent::Gen::ActorStateBeingInAir(addSubNode("ActorStateBeingInAir"));
        }
        inline void ActorStates::removeActorStateBeingInAir() const
        {
            node->mapErase("ActorStateBeingInAir");
        }
        inline std::optional<Ent::Gen::ActorStateBeingOnGround> ActorStates::ActorStateBeingOnGround() const
        {
            auto sub = getSubNode("ActorStateBeingOnGround");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingOnGround>{}: std::optional<Ent::Gen::ActorStateBeingOnGround>(getSubNode("ActorStateBeingOnGround"));
        }
        inline Ent::Gen::ActorStateBeingOnGround ActorStates::addActorStateBeingOnGround() const
        {
            return Ent::Gen::ActorStateBeingOnGround(addSubNode("ActorStateBeingOnGround"));
        }
        inline void ActorStates::removeActorStateBeingOnGround() const
        {
            node->mapErase("ActorStateBeingOnGround");
        }
        inline std::optional<Ent::Gen::ActorStateBeingOnGroundFromImmersed> ActorStates::ActorStateBeingOnGroundFromImmersed() const
        {
            auto sub = getSubNode("ActorStateBeingOnGroundFromImmersed");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingOnGroundFromImmersed>{}: std::optional<Ent::Gen::ActorStateBeingOnGroundFromImmersed>(getSubNode("ActorStateBeingOnGroundFromImmersed"));
        }
        inline Ent::Gen::ActorStateBeingOnGroundFromImmersed ActorStates::addActorStateBeingOnGroundFromImmersed() const
        {
            return Ent::Gen::ActorStateBeingOnGroundFromImmersed(addSubNode("ActorStateBeingOnGroundFromImmersed"));
        }
        inline void ActorStates::removeActorStateBeingOnGroundFromImmersed() const
        {
            node->mapErase("ActorStateBeingOnGroundFromImmersed");
        }
        inline std::optional<Ent::Gen::ActorStateBeingOnMount> ActorStates::ActorStateBeingOnMount() const
        {
            auto sub = getSubNode("ActorStateBeingOnMount");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingOnMount>{}: std::optional<Ent::Gen::ActorStateBeingOnMount>(getSubNode("ActorStateBeingOnMount"));
        }
        inline Ent::Gen::ActorStateBeingOnMount ActorStates::addActorStateBeingOnMount() const
        {
            return Ent::Gen::ActorStateBeingOnMount(addSubNode("ActorStateBeingOnMount"));
        }
        inline void ActorStates::removeActorStateBeingOnMount() const
        {
            node->mapErase("ActorStateBeingOnMount");
        }
        inline std::optional<Ent::Gen::ActorStateBeingOnPossessedGPE> ActorStates::ActorStateBeingOnPossessedGPE() const
        {
            auto sub = getSubNode("ActorStateBeingOnPossessedGPE");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingOnPossessedGPE>{}: std::optional<Ent::Gen::ActorStateBeingOnPossessedGPE>(getSubNode("ActorStateBeingOnPossessedGPE"));
        }
        inline Ent::Gen::ActorStateBeingOnPossessedGPE ActorStates::addActorStateBeingOnPossessedGPE() const
        {
            return Ent::Gen::ActorStateBeingOnPossessedGPE(addSubNode("ActorStateBeingOnPossessedGPE"));
        }
        inline void ActorStates::removeActorStateBeingOnPossessedGPE() const
        {
            node->mapErase("ActorStateBeingOnPossessedGPE");
        }
        inline std::optional<Ent::Gen::ActorStateBeingRided> ActorStates::ActorStateBeingRided() const
        {
            auto sub = getSubNode("ActorStateBeingRided");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBeingRided>{}: std::optional<Ent::Gen::ActorStateBeingRided>(getSubNode("ActorStateBeingRided"));
        }
        inline Ent::Gen::ActorStateBeingRided ActorStates::addActorStateBeingRided() const
        {
            return Ent::Gen::ActorStateBeingRided(addSubNode("ActorStateBeingRided"));
        }
        inline void ActorStates::removeActorStateBeingRided() const
        {
            node->mapErase("ActorStateBeingRided");
        }
        inline std::optional<Ent::Gen::ActorStateBendingConstraint> ActorStates::ActorStateBendingConstraint() const
        {
            auto sub = getSubNode("ActorStateBendingConstraint");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBendingConstraint>{}: std::optional<Ent::Gen::ActorStateBendingConstraint>(getSubNode("ActorStateBendingConstraint"));
        }
        inline Ent::Gen::ActorStateBendingConstraint ActorStates::addActorStateBendingConstraint() const
        {
            return Ent::Gen::ActorStateBendingConstraint(addSubNode("ActorStateBendingConstraint"));
        }
        inline void ActorStates::removeActorStateBendingConstraint() const
        {
            node->mapErase("ActorStateBendingConstraint");
        }
        inline std::optional<Ent::Gen::ActorStateBendingTree> ActorStates::ActorStateBendingTree() const
        {
            auto sub = getSubNode("ActorStateBendingTree");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBendingTree>{}: std::optional<Ent::Gen::ActorStateBendingTree>(getSubNode("ActorStateBendingTree"));
        }
        inline Ent::Gen::ActorStateBendingTree ActorStates::addActorStateBendingTree() const
        {
            return Ent::Gen::ActorStateBendingTree(addSubNode("ActorStateBendingTree"));
        }
        inline void ActorStates::removeActorStateBendingTree() const
        {
            node->mapErase("ActorStateBendingTree");
        }
        inline std::optional<Ent::Gen::ActorStateBiteEntityLiving> ActorStates::ActorStateBiteEntityLiving() const
        {
            auto sub = getSubNode("ActorStateBiteEntityLiving");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBiteEntityLiving>{}: std::optional<Ent::Gen::ActorStateBiteEntityLiving>(getSubNode("ActorStateBiteEntityLiving"));
        }
        inline Ent::Gen::ActorStateBiteEntityLiving ActorStates::addActorStateBiteEntityLiving() const
        {
            return Ent::Gen::ActorStateBiteEntityLiving(addSubNode("ActorStateBiteEntityLiving"));
        }
        inline void ActorStates::removeActorStateBiteEntityLiving() const
        {
            node->mapErase("ActorStateBiteEntityLiving");
        }
        inline std::optional<Ent::Gen::ActorStateBiteJumpOut> ActorStates::ActorStateBiteJumpOut() const
        {
            auto sub = getSubNode("ActorStateBiteJumpOut");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBiteJumpOut>{}: std::optional<Ent::Gen::ActorStateBiteJumpOut>(getSubNode("ActorStateBiteJumpOut"));
        }
        inline Ent::Gen::ActorStateBiteJumpOut ActorStates::addActorStateBiteJumpOut() const
        {
            return Ent::Gen::ActorStateBiteJumpOut(addSubNode("ActorStateBiteJumpOut"));
        }
        inline void ActorStates::removeActorStateBiteJumpOut() const
        {
            node->mapErase("ActorStateBiteJumpOut");
        }
        inline std::optional<Ent::Gen::ActorStateBittenRegenerated> ActorStates::ActorStateBittenRegenerated() const
        {
            auto sub = getSubNode("ActorStateBittenRegenerated");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBittenRegenerated>{}: std::optional<Ent::Gen::ActorStateBittenRegenerated>(getSubNode("ActorStateBittenRegenerated"));
        }
        inline Ent::Gen::ActorStateBittenRegenerated ActorStates::addActorStateBittenRegenerated() const
        {
            return Ent::Gen::ActorStateBittenRegenerated(addSubNode("ActorStateBittenRegenerated"));
        }
        inline void ActorStates::removeActorStateBittenRegenerated() const
        {
            node->mapErase("ActorStateBittenRegenerated");
        }
        inline std::optional<Ent::Gen::ActorStateBittenShaked> ActorStates::ActorStateBittenShaked() const
        {
            auto sub = getSubNode("ActorStateBittenShaked");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBittenShaked>{}: std::optional<Ent::Gen::ActorStateBittenShaked>(getSubNode("ActorStateBittenShaked"));
        }
        inline Ent::Gen::ActorStateBittenShaked ActorStates::addActorStateBittenShaked() const
        {
            return Ent::Gen::ActorStateBittenShaked(addSubNode("ActorStateBittenShaked"));
        }
        inline void ActorStates::removeActorStateBittenShaked() const
        {
            node->mapErase("ActorStateBittenShaked");
        }
        inline std::optional<Ent::Gen::ActorStateBuried> ActorStates::ActorStateBuried() const
        {
            auto sub = getSubNode("ActorStateBuried");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateBuried>{}: std::optional<Ent::Gen::ActorStateBuried>(getSubNode("ActorStateBuried"));
        }
        inline Ent::Gen::ActorStateBuried ActorStates::addActorStateBuried() const
        {
            return Ent::Gen::ActorStateBuried(addSubNode("ActorStateBuried"));
        }
        inline void ActorStates::removeActorStateBuried() const
        {
            node->mapErase("ActorStateBuried");
        }
        inline std::optional<Ent::Gen::ActorStateCallingFollower> ActorStates::ActorStateCallingFollower() const
        {
            auto sub = getSubNode("ActorStateCallingFollower");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateCallingFollower>{}: std::optional<Ent::Gen::ActorStateCallingFollower>(getSubNode("ActorStateCallingFollower"));
        }
        inline Ent::Gen::ActorStateCallingFollower ActorStates::addActorStateCallingFollower() const
        {
            return Ent::Gen::ActorStateCallingFollower(addSubNode("ActorStateCallingFollower"));
        }
        inline void ActorStates::removeActorStateCallingFollower() const
        {
            node->mapErase("ActorStateCallingFollower");
        }
        inline std::optional<Ent::Gen::ActorStateCatapulted> ActorStates::ActorStateCatapulted() const
        {
            auto sub = getSubNode("ActorStateCatapulted");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateCatapulted>{}: std::optional<Ent::Gen::ActorStateCatapulted>(getSubNode("ActorStateCatapulted"));
        }
        inline Ent::Gen::ActorStateCatapulted ActorStates::addActorStateCatapulted() const
        {
            return Ent::Gen::ActorStateCatapulted(addSubNode("ActorStateCatapulted"));
        }
        inline void ActorStates::removeActorStateCatapulted() const
        {
            node->mapErase("ActorStateCatapulted");
        }
        inline std::optional<Ent::Gen::ActorStateCatapultedLand> ActorStates::ActorStateCatapultedLand() const
        {
            auto sub = getSubNode("ActorStateCatapultedLand");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateCatapultedLand>{}: std::optional<Ent::Gen::ActorStateCatapultedLand>(getSubNode("ActorStateCatapultedLand"));
        }
        inline Ent::Gen::ActorStateCatapultedLand ActorStates::addActorStateCatapultedLand() const
        {
            return Ent::Gen::ActorStateCatapultedLand(addSubNode("ActorStateCatapultedLand"));
        }
        inline void ActorStates::removeActorStateCatapultedLand() const
        {
            node->mapErase("ActorStateCatapultedLand");
        }
        inline std::optional<Ent::Gen::ActorStateChangeEnergySide> ActorStates::ActorStateChangeEnergySide() const
        {
            auto sub = getSubNode("ActorStateChangeEnergySide");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateChangeEnergySide>{}: std::optional<Ent::Gen::ActorStateChangeEnergySide>(getSubNode("ActorStateChangeEnergySide"));
        }
        inline Ent::Gen::ActorStateChangeEnergySide ActorStates::addActorStateChangeEnergySide() const
        {
            return Ent::Gen::ActorStateChangeEnergySide(addSubNode("ActorStateChangeEnergySide"));
        }
        inline void ActorStates::removeActorStateChangeEnergySide() const
        {
            node->mapErase("ActorStateChangeEnergySide");
        }
        inline std::optional<Ent::Gen::ActorStateChargeSpendLife> ActorStates::ActorStateChargeSpendLife() const
        {
            auto sub = getSubNode("ActorStateChargeSpendLife");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateChargeSpendLife>{}: std::optional<Ent::Gen::ActorStateChargeSpendLife>(getSubNode("ActorStateChargeSpendLife"));
        }
        inline Ent::Gen::ActorStateChargeSpendLife ActorStates::addActorStateChargeSpendLife() const
        {
            return Ent::Gen::ActorStateChargeSpendLife(addSubNode("ActorStateChargeSpendLife"));
        }
        inline void ActorStates::removeActorStateChargeSpendLife() const
        {
            node->mapErase("ActorStateChargeSpendLife");
        }
        inline std::optional<Ent::Gen::ActorStateConvertWithFlow> ActorStates::ActorStateConvertWithFlow() const
        {
            auto sub = getSubNode("ActorStateConvertWithFlow");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateConvertWithFlow>{}: std::optional<Ent::Gen::ActorStateConvertWithFlow>(getSubNode("ActorStateConvertWithFlow"));
        }
        inline Ent::Gen::ActorStateConvertWithFlow ActorStates::addActorStateConvertWithFlow() const
        {
            return Ent::Gen::ActorStateConvertWithFlow(addSubNode("ActorStateConvertWithFlow"));
        }
        inline void ActorStates::removeActorStateConvertWithFlow() const
        {
            node->mapErase("ActorStateConvertWithFlow");
        }
        inline std::optional<Ent::Gen::ActorStateCreature> ActorStates::ActorStateCreature() const
        {
            auto sub = getSubNode("ActorStateCreature");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateCreature>{}: std::optional<Ent::Gen::ActorStateCreature>(getSubNode("ActorStateCreature"));
        }
        inline Ent::Gen::ActorStateCreature ActorStates::addActorStateCreature() const
        {
            return Ent::Gen::ActorStateCreature(addSubNode("ActorStateCreature"));
        }
        inline void ActorStates::removeActorStateCreature() const
        {
            node->mapErase("ActorStateCreature");
        }
        inline std::optional<Ent::Gen::ActorStateDead> ActorStates::ActorStateDead() const
        {
            auto sub = getSubNode("ActorStateDead");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateDead>{}: std::optional<Ent::Gen::ActorStateDead>(getSubNode("ActorStateDead"));
        }
        inline Ent::Gen::ActorStateDead ActorStates::addActorStateDead() const
        {
            return Ent::Gen::ActorStateDead(addSubNode("ActorStateDead"));
        }
        inline void ActorStates::removeActorStateDead() const
        {
            node->mapErase("ActorStateDead");
        }
        inline std::optional<Ent::Gen::ActorStateDisabled> ActorStates::ActorStateDisabled() const
        {
            auto sub = getSubNode("ActorStateDisabled");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateDisabled>{}: std::optional<Ent::Gen::ActorStateDisabled>(getSubNode("ActorStateDisabled"));
        }
        inline Ent::Gen::ActorStateDisabled ActorStates::addActorStateDisabled() const
        {
            return Ent::Gen::ActorStateDisabled(addSubNode("ActorStateDisabled"));
        }
        inline void ActorStates::removeActorStateDisabled() const
        {
            node->mapErase("ActorStateDisabled");
        }
        inline std::optional<Ent::Gen::ActorStateDisabledIn> ActorStates::ActorStateDisabledIn() const
        {
            auto sub = getSubNode("ActorStateDisabledIn");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateDisabledIn>{}: std::optional<Ent::Gen::ActorStateDisabledIn>(getSubNode("ActorStateDisabledIn"));
        }
        inline Ent::Gen::ActorStateDisabledIn ActorStates::addActorStateDisabledIn() const
        {
            return Ent::Gen::ActorStateDisabledIn(addSubNode("ActorStateDisabledIn"));
        }
        inline void ActorStates::removeActorStateDisabledIn() const
        {
            node->mapErase("ActorStateDisabledIn");
        }
        inline std::optional<Ent::Gen::ActorStateDisabledOut> ActorStates::ActorStateDisabledOut() const
        {
            auto sub = getSubNode("ActorStateDisabledOut");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateDisabledOut>{}: std::optional<Ent::Gen::ActorStateDisabledOut>(getSubNode("ActorStateDisabledOut"));
        }
        inline Ent::Gen::ActorStateDisabledOut ActorStates::addActorStateDisabledOut() const
        {
            return Ent::Gen::ActorStateDisabledOut(addSubNode("ActorStateDisabledOut"));
        }
        inline void ActorStates::removeActorStateDisabledOut() const
        {
            node->mapErase("ActorStateDisabledOut");
        }
        inline std::optional<Ent::Gen::ActorStateDodge3D> ActorStates::ActorStateDodge3D() const
        {
            auto sub = getSubNode("ActorStateDodge3D");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateDodge3D>{}: std::optional<Ent::Gen::ActorStateDodge3D>(getSubNode("ActorStateDodge3D"));
        }
        inline Ent::Gen::ActorStateDodge3D ActorStates::addActorStateDodge3D() const
        {
            return Ent::Gen::ActorStateDodge3D(addSubNode("ActorStateDodge3D"));
        }
        inline void ActorStates::removeActorStateDodge3D() const
        {
            node->mapErase("ActorStateDodge3D");
        }
        inline std::optional<Ent::Gen::ActorStateDucking> ActorStates::ActorStateDucking() const
        {
            auto sub = getSubNode("ActorStateDucking");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateDucking>{}: std::optional<Ent::Gen::ActorStateDucking>(getSubNode("ActorStateDucking"));
        }
        inline Ent::Gen::ActorStateDucking ActorStates::addActorStateDucking() const
        {
            return Ent::Gen::ActorStateDucking(addSubNode("ActorStateDucking"));
        }
        inline void ActorStates::removeActorStateDucking() const
        {
            node->mapErase("ActorStateDucking");
        }
        inline std::optional<Ent::Gen::ActorStateEnergyShooting> ActorStates::ActorStateEnergyShooting() const
        {
            auto sub = getSubNode("ActorStateEnergyShooting");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateEnergyShooting>{}: std::optional<Ent::Gen::ActorStateEnergyShooting>(getSubNode("ActorStateEnergyShooting"));
        }
        inline Ent::Gen::ActorStateEnergyShooting ActorStates::addActorStateEnergyShooting() const
        {
            return Ent::Gen::ActorStateEnergyShooting(addSubNode("ActorStateEnergyShooting"));
        }
        inline void ActorStates::removeActorStateEnergyShooting() const
        {
            node->mapErase("ActorStateEnergyShooting");
        }
        inline std::optional<Ent::Gen::ActorStateExitingFly> ActorStates::ActorStateExitingFly() const
        {
            auto sub = getSubNode("ActorStateExitingFly");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateExitingFly>{}: std::optional<Ent::Gen::ActorStateExitingFly>(getSubNode("ActorStateExitingFly"));
        }
        inline Ent::Gen::ActorStateExitingFly ActorStates::addActorStateExitingFly() const
        {
            return Ent::Gen::ActorStateExitingFly(addSubNode("ActorStateExitingFly"));
        }
        inline void ActorStates::removeActorStateExitingFly() const
        {
            node->mapErase("ActorStateExitingFly");
        }
        inline std::optional<Ent::Gen::ActorStateFlockingAttackFlocking> ActorStates::ActorStateFlockingAttackFlocking() const
        {
            auto sub = getSubNode("ActorStateFlockingAttackFlocking");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateFlockingAttackFlocking>{}: std::optional<Ent::Gen::ActorStateFlockingAttackFlocking>(getSubNode("ActorStateFlockingAttackFlocking"));
        }
        inline Ent::Gen::ActorStateFlockingAttackFlocking ActorStates::addActorStateFlockingAttackFlocking() const
        {
            return Ent::Gen::ActorStateFlockingAttackFlocking(addSubNode("ActorStateFlockingAttackFlocking"));
        }
        inline void ActorStates::removeActorStateFlockingAttackFlocking() const
        {
            node->mapErase("ActorStateFlockingAttackFlocking");
        }
        inline std::optional<Ent::Gen::ActorStateFlockingChangingParams> ActorStates::ActorStateFlockingChangingParams() const
        {
            auto sub = getSubNode("ActorStateFlockingChangingParams");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateFlockingChangingParams>{}: std::optional<Ent::Gen::ActorStateFlockingChangingParams>(getSubNode("ActorStateFlockingChangingParams"));
        }
        inline Ent::Gen::ActorStateFlockingChangingParams ActorStates::addActorStateFlockingChangingParams() const
        {
            return Ent::Gen::ActorStateFlockingChangingParams(addSubNode("ActorStateFlockingChangingParams"));
        }
        inline void ActorStates::removeActorStateFlockingChangingParams() const
        {
            node->mapErase("ActorStateFlockingChangingParams");
        }
        inline std::optional<Ent::Gen::ActorStateFlockingIndividualSpawning> ActorStates::ActorStateFlockingIndividualSpawning() const
        {
            auto sub = getSubNode("ActorStateFlockingIndividualSpawning");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateFlockingIndividualSpawning>{}: std::optional<Ent::Gen::ActorStateFlockingIndividualSpawning>(getSubNode("ActorStateFlockingIndividualSpawning"));
        }
        inline Ent::Gen::ActorStateFlockingIndividualSpawning ActorStates::addActorStateFlockingIndividualSpawning() const
        {
            return Ent::Gen::ActorStateFlockingIndividualSpawning(addSubNode("ActorStateFlockingIndividualSpawning"));
        }
        inline void ActorStates::removeActorStateFlockingIndividualSpawning() const
        {
            node->mapErase("ActorStateFlockingIndividualSpawning");
        }
        inline std::optional<Ent::Gen::ActorStateFlockingLiving> ActorStates::ActorStateFlockingLiving() const
        {
            auto sub = getSubNode("ActorStateFlockingLiving");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateFlockingLiving>{}: std::optional<Ent::Gen::ActorStateFlockingLiving>(getSubNode("ActorStateFlockingLiving"));
        }
        inline Ent::Gen::ActorStateFlockingLiving ActorStates::addActorStateFlockingLiving() const
        {
            return Ent::Gen::ActorStateFlockingLiving(addSubNode("ActorStateFlockingLiving"));
        }
        inline void ActorStates::removeActorStateFlockingLiving() const
        {
            node->mapErase("ActorStateFlockingLiving");
        }
        inline std::optional<Ent::Gen::ActorStateFlockingRigidbodyBeingActive> ActorStates::ActorStateFlockingRigidbodyBeingActive() const
        {
            auto sub = getSubNode("ActorStateFlockingRigidbodyBeingActive");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateFlockingRigidbodyBeingActive>{}: std::optional<Ent::Gen::ActorStateFlockingRigidbodyBeingActive>(getSubNode("ActorStateFlockingRigidbodyBeingActive"));
        }
        inline Ent::Gen::ActorStateFlockingRigidbodyBeingActive ActorStates::addActorStateFlockingRigidbodyBeingActive() const
        {
            return Ent::Gen::ActorStateFlockingRigidbodyBeingActive(addSubNode("ActorStateFlockingRigidbodyBeingActive"));
        }
        inline void ActorStates::removeActorStateFlockingRigidbodyBeingActive() const
        {
            node->mapErase("ActorStateFlockingRigidbodyBeingActive");
        }
        inline std::optional<Ent::Gen::ActorStateFluidSlowDown> ActorStates::ActorStateFluidSlowDown() const
        {
            auto sub = getSubNode("ActorStateFluidSlowDown");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateFluidSlowDown>{}: std::optional<Ent::Gen::ActorStateFluidSlowDown>(getSubNode("ActorStateFluidSlowDown"));
        }
        inline Ent::Gen::ActorStateFluidSlowDown ActorStates::addActorStateFluidSlowDown() const
        {
            return Ent::Gen::ActorStateFluidSlowDown(addSubNode("ActorStateFluidSlowDown"));
        }
        inline void ActorStates::removeActorStateFluidSlowDown() const
        {
            node->mapErase("ActorStateFluidSlowDown");
        }
        inline std::optional<Ent::Gen::ActorStateForceAgainstSlope> ActorStates::ActorStateForceAgainstSlope() const
        {
            auto sub = getSubNode("ActorStateForceAgainstSlope");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateForceAgainstSlope>{}: std::optional<Ent::Gen::ActorStateForceAgainstSlope>(getSubNode("ActorStateForceAgainstSlope"));
        }
        inline Ent::Gen::ActorStateForceAgainstSlope ActorStates::addActorStateForceAgainstSlope() const
        {
            return Ent::Gen::ActorStateForceAgainstSlope(addSubNode("ActorStateForceAgainstSlope"));
        }
        inline void ActorStates::removeActorStateForceAgainstSlope() const
        {
            node->mapErase("ActorStateForceAgainstSlope");
        }
        inline std::optional<Ent::Gen::ActorStateHasNoBody> ActorStates::ActorStateHasNoBody() const
        {
            auto sub = getSubNode("ActorStateHasNoBody");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateHasNoBody>{}: std::optional<Ent::Gen::ActorStateHasNoBody>(getSubNode("ActorStateHasNoBody"));
        }
        inline Ent::Gen::ActorStateHasNoBody ActorStates::addActorStateHasNoBody() const
        {
            return Ent::Gen::ActorStateHasNoBody(addSubNode("ActorStateHasNoBody"));
        }
        inline void ActorStates::removeActorStateHasNoBody() const
        {
            node->mapErase("ActorStateHasNoBody");
        }
        inline std::optional<Ent::Gen::ActorStateHeld> ActorStates::ActorStateHeld() const
        {
            auto sub = getSubNode("ActorStateHeld");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateHeld>{}: std::optional<Ent::Gen::ActorStateHeld>(getSubNode("ActorStateHeld"));
        }
        inline Ent::Gen::ActorStateHeld ActorStates::addActorStateHeld() const
        {
            return Ent::Gen::ActorStateHeld(addSubNode("ActorStateHeld"));
        }
        inline void ActorStates::removeActorStateHeld() const
        {
            node->mapErase("ActorStateHeld");
        }
        inline std::optional<Ent::Gen::ActorStateHitEnergyWall> ActorStates::ActorStateHitEnergyWall() const
        {
            auto sub = getSubNode("ActorStateHitEnergyWall");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateHitEnergyWall>{}: std::optional<Ent::Gen::ActorStateHitEnergyWall>(getSubNode("ActorStateHitEnergyWall"));
        }
        inline Ent::Gen::ActorStateHitEnergyWall ActorStates::addActorStateHitEnergyWall() const
        {
            return Ent::Gen::ActorStateHitEnergyWall(addSubNode("ActorStateHitEnergyWall"));
        }
        inline void ActorStates::removeActorStateHitEnergyWall() const
        {
            node->mapErase("ActorStateHitEnergyWall");
        }
        inline std::optional<Ent::Gen::ActorStateHoldingItem> ActorStates::ActorStateHoldingItem() const
        {
            auto sub = getSubNode("ActorStateHoldingItem");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateHoldingItem>{}: std::optional<Ent::Gen::ActorStateHoldingItem>(getSubNode("ActorStateHoldingItem"));
        }
        inline Ent::Gen::ActorStateHoldingItem ActorStates::addActorStateHoldingItem() const
        {
            return Ent::Gen::ActorStateHoldingItem(addSubNode("ActorStateHoldingItem"));
        }
        inline void ActorStates::removeActorStateHoldingItem() const
        {
            node->mapErase("ActorStateHoldingItem");
        }
        inline std::optional<Ent::Gen::ActorStateIKConstraint> ActorStates::ActorStateIKConstraint() const
        {
            auto sub = getSubNode("ActorStateIKConstraint");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateIKConstraint>{}: std::optional<Ent::Gen::ActorStateIKConstraint>(getSubNode("ActorStateIKConstraint"));
        }
        inline Ent::Gen::ActorStateIKConstraint ActorStates::addActorStateIKConstraint() const
        {
            return Ent::Gen::ActorStateIKConstraint(addSubNode("ActorStateIKConstraint"));
        }
        inline void ActorStates::removeActorStateIKConstraint() const
        {
            node->mapErase("ActorStateIKConstraint");
        }
        inline std::optional<Ent::Gen::ActorStateInvincible> ActorStates::ActorStateInvincible() const
        {
            auto sub = getSubNode("ActorStateInvincible");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateInvincible>{}: std::optional<Ent::Gen::ActorStateInvincible>(getSubNode("ActorStateInvincible"));
        }
        inline Ent::Gen::ActorStateInvincible ActorStates::addActorStateInvincible() const
        {
            return Ent::Gen::ActorStateInvincible(addSubNode("ActorStateInvincible"));
        }
        inline void ActorStates::removeActorStateInvincible() const
        {
            node->mapErase("ActorStateInvincible");
        }
        inline std::optional<Ent::Gen::ActorStateLeavingLava> ActorStates::ActorStateLeavingLava() const
        {
            auto sub = getSubNode("ActorStateLeavingLava");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateLeavingLava>{}: std::optional<Ent::Gen::ActorStateLeavingLava>(getSubNode("ActorStateLeavingLava"));
        }
        inline Ent::Gen::ActorStateLeavingLava ActorStates::addActorStateLeavingLava() const
        {
            return Ent::Gen::ActorStateLeavingLava(addSubNode("ActorStateLeavingLava"));
        }
        inline void ActorStates::removeActorStateLeavingLava() const
        {
            node->mapErase("ActorStateLeavingLava");
        }
        inline std::optional<Ent::Gen::ActorStateLosingOxygen> ActorStates::ActorStateLosingOxygen() const
        {
            auto sub = getSubNode("ActorStateLosingOxygen");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateLosingOxygen>{}: std::optional<Ent::Gen::ActorStateLosingOxygen>(getSubNode("ActorStateLosingOxygen"));
        }
        inline Ent::Gen::ActorStateLosingOxygen ActorStates::addActorStateLosingOxygen() const
        {
            return Ent::Gen::ActorStateLosingOxygen(addSubNode("ActorStateLosingOxygen"));
        }
        inline void ActorStates::removeActorStateLosingOxygen() const
        {
            node->mapErase("ActorStateLosingOxygen");
        }
        inline std::optional<Ent::Gen::ActorStateMeetingLava> ActorStates::ActorStateMeetingLava() const
        {
            auto sub = getSubNode("ActorStateMeetingLava");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMeetingLava>{}: std::optional<Ent::Gen::ActorStateMeetingLava>(getSubNode("ActorStateMeetingLava"));
        }
        inline Ent::Gen::ActorStateMeetingLava ActorStates::addActorStateMeetingLava() const
        {
            return Ent::Gen::ActorStateMeetingLava(addSubNode("ActorStateMeetingLava"));
        }
        inline void ActorStates::removeActorStateMeetingLava() const
        {
            node->mapErase("ActorStateMeetingLava");
        }
        inline std::optional<Ent::Gen::ActorStateMoveAlongBezier> ActorStates::ActorStateMoveAlongBezier() const
        {
            auto sub = getSubNode("ActorStateMoveAlongBezier");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMoveAlongBezier>{}: std::optional<Ent::Gen::ActorStateMoveAlongBezier>(getSubNode("ActorStateMoveAlongBezier"));
        }
        inline Ent::Gen::ActorStateMoveAlongBezier ActorStates::addActorStateMoveAlongBezier() const
        {
            return Ent::Gen::ActorStateMoveAlongBezier(addSubNode("ActorStateMoveAlongBezier"));
        }
        inline void ActorStates::removeActorStateMoveAlongBezier() const
        {
            node->mapErase("ActorStateMoveAlongBezier");
        }
        inline std::optional<Ent::Gen::ActorStateMovingClamber> ActorStates::ActorStateMovingClamber() const
        {
            auto sub = getSubNode("ActorStateMovingClamber");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMovingClamber>{}: std::optional<Ent::Gen::ActorStateMovingClamber>(getSubNode("ActorStateMovingClamber"));
        }
        inline Ent::Gen::ActorStateMovingClamber ActorStates::addActorStateMovingClamber() const
        {
            return Ent::Gen::ActorStateMovingClamber(addSubNode("ActorStateMovingClamber"));
        }
        inline void ActorStates::removeActorStateMovingClamber() const
        {
            node->mapErase("ActorStateMovingClamber");
        }
        inline std::optional<Ent::Gen::ActorStateMovingDive> ActorStates::ActorStateMovingDive() const
        {
            auto sub = getSubNode("ActorStateMovingDive");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMovingDive>{}: std::optional<Ent::Gen::ActorStateMovingDive>(getSubNode("ActorStateMovingDive"));
        }
        inline Ent::Gen::ActorStateMovingDive ActorStates::addActorStateMovingDive() const
        {
            return Ent::Gen::ActorStateMovingDive(addSubNode("ActorStateMovingDive"));
        }
        inline void ActorStates::removeActorStateMovingDive() const
        {
            node->mapErase("ActorStateMovingDive");
        }
        inline std::optional<Ent::Gen::ActorStateMovingFall> ActorStates::ActorStateMovingFall() const
        {
            auto sub = getSubNode("ActorStateMovingFall");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMovingFall>{}: std::optional<Ent::Gen::ActorStateMovingFall>(getSubNode("ActorStateMovingFall"));
        }
        inline Ent::Gen::ActorStateMovingFall ActorStates::addActorStateMovingFall() const
        {
            return Ent::Gen::ActorStateMovingFall(addSubNode("ActorStateMovingFall"));
        }
        inline void ActorStates::removeActorStateMovingFall() const
        {
            node->mapErase("ActorStateMovingFall");
        }
        inline std::optional<Ent::Gen::ActorStateMovingFly> ActorStates::ActorStateMovingFly() const
        {
            auto sub = getSubNode("ActorStateMovingFly");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMovingFly>{}: std::optional<Ent::Gen::ActorStateMovingFly>(getSubNode("ActorStateMovingFly"));
        }
        inline Ent::Gen::ActorStateMovingFly ActorStates::addActorStateMovingFly() const
        {
            return Ent::Gen::ActorStateMovingFly(addSubNode("ActorStateMovingFly"));
        }
        inline void ActorStates::removeActorStateMovingFly() const
        {
            node->mapErase("ActorStateMovingFly");
        }
        inline std::optional<Ent::Gen::ActorStateMovingProne> ActorStates::ActorStateMovingProne() const
        {
            auto sub = getSubNode("ActorStateMovingProne");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMovingProne>{}: std::optional<Ent::Gen::ActorStateMovingProne>(getSubNode("ActorStateMovingProne"));
        }
        inline Ent::Gen::ActorStateMovingProne ActorStates::addActorStateMovingProne() const
        {
            return Ent::Gen::ActorStateMovingProne(addSubNode("ActorStateMovingProne"));
        }
        inline void ActorStates::removeActorStateMovingProne() const
        {
            node->mapErase("ActorStateMovingProne");
        }
        inline std::optional<Ent::Gen::ActorStateMovingRide> ActorStates::ActorStateMovingRide() const
        {
            auto sub = getSubNode("ActorStateMovingRide");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMovingRide>{}: std::optional<Ent::Gen::ActorStateMovingRide>(getSubNode("ActorStateMovingRide"));
        }
        inline Ent::Gen::ActorStateMovingRide ActorStates::addActorStateMovingRide() const
        {
            return Ent::Gen::ActorStateMovingRide(addSubNode("ActorStateMovingRide"));
        }
        inline void ActorStates::removeActorStateMovingRide() const
        {
            node->mapErase("ActorStateMovingRide");
        }
        inline std::optional<Ent::Gen::ActorStateMovingStandUp> ActorStates::ActorStateMovingStandUp() const
        {
            auto sub = getSubNode("ActorStateMovingStandUp");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMovingStandUp>{}: std::optional<Ent::Gen::ActorStateMovingStandUp>(getSubNode("ActorStateMovingStandUp"));
        }
        inline Ent::Gen::ActorStateMovingStandUp ActorStates::addActorStateMovingStandUp() const
        {
            return Ent::Gen::ActorStateMovingStandUp(addSubNode("ActorStateMovingStandUp"));
        }
        inline void ActorStates::removeActorStateMovingStandUp() const
        {
            node->mapErase("ActorStateMovingStandUp");
        }
        inline std::optional<Ent::Gen::ActorStateMovingSwim> ActorStates::ActorStateMovingSwim() const
        {
            auto sub = getSubNode("ActorStateMovingSwim");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateMovingSwim>{}: std::optional<Ent::Gen::ActorStateMovingSwim>(getSubNode("ActorStateMovingSwim"));
        }
        inline Ent::Gen::ActorStateMovingSwim ActorStates::addActorStateMovingSwim() const
        {
            return Ent::Gen::ActorStateMovingSwim(addSubNode("ActorStateMovingSwim"));
        }
        inline void ActorStates::removeActorStateMovingSwim() const
        {
            node->mapErase("ActorStateMovingSwim");
        }
        inline std::optional<Ent::Gen::ActorStateNavigationMesh> ActorStates::ActorStateNavigationMesh() const
        {
            auto sub = getSubNode("ActorStateNavigationMesh");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateNavigationMesh>{}: std::optional<Ent::Gen::ActorStateNavigationMesh>(getSubNode("ActorStateNavigationMesh"));
        }
        inline Ent::Gen::ActorStateNavigationMesh ActorStates::addActorStateNavigationMesh() const
        {
            return Ent::Gen::ActorStateNavigationMesh(addSubNode("ActorStateNavigationMesh"));
        }
        inline void ActorStates::removeActorStateNavigationMesh() const
        {
            node->mapErase("ActorStateNavigationMesh");
        }
        inline std::optional<Ent::Gen::ActorStatePossessFlocking> ActorStates::ActorStatePossessFlocking() const
        {
            auto sub = getSubNode("ActorStatePossessFlocking");
            return sub == nullptr? std::optional<Ent::Gen::ActorStatePossessFlocking>{}: std::optional<Ent::Gen::ActorStatePossessFlocking>(getSubNode("ActorStatePossessFlocking"));
        }
        inline Ent::Gen::ActorStatePossessFlocking ActorStates::addActorStatePossessFlocking() const
        {
            return Ent::Gen::ActorStatePossessFlocking(addSubNode("ActorStatePossessFlocking"));
        }
        inline void ActorStates::removeActorStatePossessFlocking() const
        {
            node->mapErase("ActorStatePossessFlocking");
        }
        inline std::optional<Ent::Gen::ActorStatePossessGPE> ActorStates::ActorStatePossessGPE() const
        {
            auto sub = getSubNode("ActorStatePossessGPE");
            return sub == nullptr? std::optional<Ent::Gen::ActorStatePossessGPE>{}: std::optional<Ent::Gen::ActorStatePossessGPE>(getSubNode("ActorStatePossessGPE"));
        }
        inline Ent::Gen::ActorStatePossessGPE ActorStates::addActorStatePossessGPE() const
        {
            return Ent::Gen::ActorStatePossessGPE(addSubNode("ActorStatePossessGPE"));
        }
        inline void ActorStates::removeActorStatePossessGPE() const
        {
            node->mapErase("ActorStatePossessGPE");
        }
        inline std::optional<Ent::Gen::ActorStateReactingLava> ActorStates::ActorStateReactingLava() const
        {
            auto sub = getSubNode("ActorStateReactingLava");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateReactingLava>{}: std::optional<Ent::Gen::ActorStateReactingLava>(getSubNode("ActorStateReactingLava"));
        }
        inline Ent::Gen::ActorStateReactingLava ActorStates::addActorStateReactingLava() const
        {
            return Ent::Gen::ActorStateReactingLava(addSubNode("ActorStateReactingLava"));
        }
        inline void ActorStates::removeActorStateReactingLava() const
        {
            node->mapErase("ActorStateReactingLava");
        }
        inline std::optional<Ent::Gen::ActorStateRecover> ActorStates::ActorStateRecover() const
        {
            auto sub = getSubNode("ActorStateRecover");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateRecover>{}: std::optional<Ent::Gen::ActorStateRecover>(getSubNode("ActorStateRecover"));
        }
        inline Ent::Gen::ActorStateRecover ActorStates::addActorStateRecover() const
        {
            return Ent::Gen::ActorStateRecover(addSubNode("ActorStateRecover"));
        }
        inline void ActorStates::removeActorStateRecover() const
        {
            node->mapErase("ActorStateRecover");
        }
        inline std::optional<Ent::Gen::ActorStateRequestingHealing> ActorStates::ActorStateRequestingHealing() const
        {
            auto sub = getSubNode("ActorStateRequestingHealing");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateRequestingHealing>{}: std::optional<Ent::Gen::ActorStateRequestingHealing>(getSubNode("ActorStateRequestingHealing"));
        }
        inline Ent::Gen::ActorStateRequestingHealing ActorStates::addActorStateRequestingHealing() const
        {
            return Ent::Gen::ActorStateRequestingHealing(addSubNode("ActorStateRequestingHealing"));
        }
        inline void ActorStates::removeActorStateRequestingHealing() const
        {
            node->mapErase("ActorStateRequestingHealing");
        }
        inline std::optional<Ent::Gen::ActorStateRequestingWaiting> ActorStates::ActorStateRequestingWaiting() const
        {
            auto sub = getSubNode("ActorStateRequestingWaiting");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateRequestingWaiting>{}: std::optional<Ent::Gen::ActorStateRequestingWaiting>(getSubNode("ActorStateRequestingWaiting"));
        }
        inline Ent::Gen::ActorStateRequestingWaiting ActorStates::addActorStateRequestingWaiting() const
        {
            return Ent::Gen::ActorStateRequestingWaiting(addSubNode("ActorStateRequestingWaiting"));
        }
        inline void ActorStates::removeActorStateRequestingWaiting() const
        {
            node->mapErase("ActorStateRequestingWaiting");
        }
        inline std::optional<Ent::Gen::ActorStateScreaming> ActorStates::ActorStateScreaming() const
        {
            auto sub = getSubNode("ActorStateScreaming");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateScreaming>{}: std::optional<Ent::Gen::ActorStateScreaming>(getSubNode("ActorStateScreaming"));
        }
        inline Ent::Gen::ActorStateScreaming ActorStates::addActorStateScreaming() const
        {
            return Ent::Gen::ActorStateScreaming(addSubNode("ActorStateScreaming"));
        }
        inline void ActorStates::removeActorStateScreaming() const
        {
            node->mapErase("ActorStateScreaming");
        }
        inline std::optional<Ent::Gen::ActorStateSendMission> ActorStates::ActorStateSendMission() const
        {
            auto sub = getSubNode("ActorStateSendMission");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSendMission>{}: std::optional<Ent::Gen::ActorStateSendMission>(getSubNode("ActorStateSendMission"));
        }
        inline Ent::Gen::ActorStateSendMission ActorStates::addActorStateSendMission() const
        {
            return Ent::Gen::ActorStateSendMission(addSubNode("ActorStateSendMission"));
        }
        inline void ActorStates::removeActorStateSendMission() const
        {
            node->mapErase("ActorStateSendMission");
        }
        inline std::optional<Ent::Gen::ActorStateShamanItemLiving> ActorStates::ActorStateShamanItemLiving() const
        {
            auto sub = getSubNode("ActorStateShamanItemLiving");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateShamanItemLiving>{}: std::optional<Ent::Gen::ActorStateShamanItemLiving>(getSubNode("ActorStateShamanItemLiving"));
        }
        inline Ent::Gen::ActorStateShamanItemLiving ActorStates::addActorStateShamanItemLiving() const
        {
            return Ent::Gen::ActorStateShamanItemLiving(addSubNode("ActorStateShamanItemLiving"));
        }
        inline void ActorStates::removeActorStateShamanItemLiving() const
        {
            node->mapErase("ActorStateShamanItemLiving");
        }
        inline std::optional<Ent::Gen::ActorStateShamanItemPartState> ActorStates::ActorStateShamanItemPartState() const
        {
            auto sub = getSubNode("ActorStateShamanItemPartState");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateShamanItemPartState>{}: std::optional<Ent::Gen::ActorStateShamanItemPartState>(getSubNode("ActorStateShamanItemPartState"));
        }
        inline Ent::Gen::ActorStateShamanItemPartState ActorStates::addActorStateShamanItemPartState() const
        {
            return Ent::Gen::ActorStateShamanItemPartState(addSubNode("ActorStateShamanItemPartState"));
        }
        inline void ActorStates::removeActorStateShamanItemPartState() const
        {
            node->mapErase("ActorStateShamanItemPartState");
        }
        inline std::optional<Ent::Gen::ActorStateShapeshift> ActorStates::ActorStateShapeshift() const
        {
            auto sub = getSubNode("ActorStateShapeshift");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateShapeshift>{}: std::optional<Ent::Gen::ActorStateShapeshift>(getSubNode("ActorStateShapeshift"));
        }
        inline Ent::Gen::ActorStateShapeshift ActorStates::addActorStateShapeshift() const
        {
            return Ent::Gen::ActorStateShapeshift(addSubNode("ActorStateShapeshift"));
        }
        inline void ActorStates::removeActorStateShapeshift() const
        {
            node->mapErase("ActorStateShapeshift");
        }
        inline std::optional<Ent::Gen::ActorStateShootingFlow> ActorStates::ActorStateShootingFlow() const
        {
            auto sub = getSubNode("ActorStateShootingFlow");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateShootingFlow>{}: std::optional<Ent::Gen::ActorStateShootingFlow>(getSubNode("ActorStateShootingFlow"));
        }
        inline Ent::Gen::ActorStateShootingFlow ActorStates::addActorStateShootingFlow() const
        {
            return Ent::Gen::ActorStateShootingFlow(addSubNode("ActorStateShootingFlow"));
        }
        inline void ActorStates::removeActorStateShootingFlow() const
        {
            node->mapErase("ActorStateShootingFlow");
        }
        inline std::optional<Ent::Gen::ActorStateSink> ActorStates::ActorStateSink() const
        {
            auto sub = getSubNode("ActorStateSink");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSink>{}: std::optional<Ent::Gen::ActorStateSink>(getSubNode("ActorStateSink"));
        }
        inline Ent::Gen::ActorStateSink ActorStates::addActorStateSink() const
        {
            return Ent::Gen::ActorStateSink(addSubNode("ActorStateSink"));
        }
        inline void ActorStates::removeActorStateSink() const
        {
            node->mapErase("ActorStateSink");
        }
        inline std::optional<Ent::Gen::ActorStateSkeletonPartPickUpRequest> ActorStates::ActorStateSkeletonPartPickUpRequest() const
        {
            auto sub = getSubNode("ActorStateSkeletonPartPickUpRequest");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSkeletonPartPickUpRequest>{}: std::optional<Ent::Gen::ActorStateSkeletonPartPickUpRequest>(getSubNode("ActorStateSkeletonPartPickUpRequest"));
        }
        inline Ent::Gen::ActorStateSkeletonPartPickUpRequest ActorStates::addActorStateSkeletonPartPickUpRequest() const
        {
            return Ent::Gen::ActorStateSkeletonPartPickUpRequest(addSubNode("ActorStateSkeletonPartPickUpRequest"));
        }
        inline void ActorStates::removeActorStateSkeletonPartPickUpRequest() const
        {
            node->mapErase("ActorStateSkeletonPartPickUpRequest");
        }
        inline std::optional<Ent::Gen::ActorStateSkeletonPartPickUpState> ActorStates::ActorStateSkeletonPartPickUpState() const
        {
            auto sub = getSubNode("ActorStateSkeletonPartPickUpState");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSkeletonPartPickUpState>{}: std::optional<Ent::Gen::ActorStateSkeletonPartPickUpState>(getSubNode("ActorStateSkeletonPartPickUpState"));
        }
        inline Ent::Gen::ActorStateSkeletonPartPickUpState ActorStates::addActorStateSkeletonPartPickUpState() const
        {
            return Ent::Gen::ActorStateSkeletonPartPickUpState(addSubNode("ActorStateSkeletonPartPickUpState"));
        }
        inline void ActorStates::removeActorStateSkeletonPartPickUpState() const
        {
            node->mapErase("ActorStateSkeletonPartPickUpState");
        }
        inline std::optional<Ent::Gen::ActorStateSleeping> ActorStates::ActorStateSleeping() const
        {
            auto sub = getSubNode("ActorStateSleeping");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSleeping>{}: std::optional<Ent::Gen::ActorStateSleeping>(getSubNode("ActorStateSleeping"));
        }
        inline Ent::Gen::ActorStateSleeping ActorStates::addActorStateSleeping() const
        {
            return Ent::Gen::ActorStateSleeping(addSubNode("ActorStateSleeping"));
        }
        inline void ActorStates::removeActorStateSleeping() const
        {
            node->mapErase("ActorStateSleeping");
        }
        inline std::optional<Ent::Gen::ActorStateSlope> ActorStates::ActorStateSlope() const
        {
            auto sub = getSubNode("ActorStateSlope");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSlope>{}: std::optional<Ent::Gen::ActorStateSlope>(getSubNode("ActorStateSlope"));
        }
        inline Ent::Gen::ActorStateSlope ActorStates::addActorStateSlope() const
        {
            return Ent::Gen::ActorStateSlope(addSubNode("ActorStateSlope"));
        }
        inline void ActorStates::removeActorStateSlope() const
        {
            node->mapErase("ActorStateSlope");
        }
        inline std::optional<Ent::Gen::ActorStateSoulRespawn> ActorStates::ActorStateSoulRespawn() const
        {
            auto sub = getSubNode("ActorStateSoulRespawn");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSoulRespawn>{}: std::optional<Ent::Gen::ActorStateSoulRespawn>(getSubNode("ActorStateSoulRespawn"));
        }
        inline Ent::Gen::ActorStateSoulRespawn ActorStates::addActorStateSoulRespawn() const
        {
            return Ent::Gen::ActorStateSoulRespawn(addSubNode("ActorStateSoulRespawn"));
        }
        inline void ActorStates::removeActorStateSoulRespawn() const
        {
            node->mapErase("ActorStateSoulRespawn");
        }
        inline std::optional<Ent::Gen::ActorStateSoulWaitingToRespawn> ActorStates::ActorStateSoulWaitingToRespawn() const
        {
            auto sub = getSubNode("ActorStateSoulWaitingToRespawn");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSoulWaitingToRespawn>{}: std::optional<Ent::Gen::ActorStateSoulWaitingToRespawn>(getSubNode("ActorStateSoulWaitingToRespawn"));
        }
        inline Ent::Gen::ActorStateSoulWaitingToRespawn ActorStates::addActorStateSoulWaitingToRespawn() const
        {
            return Ent::Gen::ActorStateSoulWaitingToRespawn(addSubNode("ActorStateSoulWaitingToRespawn"));
        }
        inline void ActorStates::removeActorStateSoulWaitingToRespawn() const
        {
            node->mapErase("ActorStateSoulWaitingToRespawn");
        }
        inline std::optional<Ent::Gen::ActorStateSpeedMultiplier> ActorStates::ActorStateSpeedMultiplier() const
        {
            auto sub = getSubNode("ActorStateSpeedMultiplier");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateSpeedMultiplier>{}: std::optional<Ent::Gen::ActorStateSpeedMultiplier>(getSubNode("ActorStateSpeedMultiplier"));
        }
        inline Ent::Gen::ActorStateSpeedMultiplier ActorStates::addActorStateSpeedMultiplier() const
        {
            return Ent::Gen::ActorStateSpeedMultiplier(addSubNode("ActorStateSpeedMultiplier"));
        }
        inline void ActorStates::removeActorStateSpeedMultiplier() const
        {
            node->mapErase("ActorStateSpeedMultiplier");
        }
        inline std::optional<Ent::Gen::ActorStateStopAttitudeAggressive> ActorStates::ActorStateStopAttitudeAggressive() const
        {
            auto sub = getSubNode("ActorStateStopAttitudeAggressive");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateStopAttitudeAggressive>{}: std::optional<Ent::Gen::ActorStateStopAttitudeAggressive>(getSubNode("ActorStateStopAttitudeAggressive"));
        }
        inline Ent::Gen::ActorStateStopAttitudeAggressive ActorStates::addActorStateStopAttitudeAggressive() const
        {
            return Ent::Gen::ActorStateStopAttitudeAggressive(addSubNode("ActorStateStopAttitudeAggressive"));
        }
        inline void ActorStates::removeActorStateStopAttitudeAggressive() const
        {
            node->mapErase("ActorStateStopAttitudeAggressive");
        }
        inline std::optional<Ent::Gen::ActorStateTaunting> ActorStates::ActorStateTaunting() const
        {
            auto sub = getSubNode("ActorStateTaunting");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateTaunting>{}: std::optional<Ent::Gen::ActorStateTaunting>(getSubNode("ActorStateTaunting"));
        }
        inline Ent::Gen::ActorStateTaunting ActorStates::addActorStateTaunting() const
        {
            return Ent::Gen::ActorStateTaunting(addSubNode("ActorStateTaunting"));
        }
        inline void ActorStates::removeActorStateTaunting() const
        {
            node->mapErase("ActorStateTaunting");
        }
        inline std::optional<Ent::Gen::ActorStateTeleport> ActorStates::ActorStateTeleport() const
        {
            auto sub = getSubNode("ActorStateTeleport");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateTeleport>{}: std::optional<Ent::Gen::ActorStateTeleport>(getSubNode("ActorStateTeleport"));
        }
        inline Ent::Gen::ActorStateTeleport ActorStates::addActorStateTeleport() const
        {
            return Ent::Gen::ActorStateTeleport(addSubNode("ActorStateTeleport"));
        }
        inline void ActorStates::removeActorStateTeleport() const
        {
            node->mapErase("ActorStateTeleport");
        }
        inline std::optional<Ent::Gen::ActorStateTeleportToTarget> ActorStates::ActorStateTeleportToTarget() const
        {
            auto sub = getSubNode("ActorStateTeleportToTarget");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateTeleportToTarget>{}: std::optional<Ent::Gen::ActorStateTeleportToTarget>(getSubNode("ActorStateTeleportToTarget"));
        }
        inline Ent::Gen::ActorStateTeleportToTarget ActorStates::addActorStateTeleportToTarget() const
        {
            return Ent::Gen::ActorStateTeleportToTarget(addSubNode("ActorStateTeleportToTarget"));
        }
        inline void ActorStates::removeActorStateTeleportToTarget() const
        {
            node->mapErase("ActorStateTeleportToTarget");
        }
        inline std::optional<Ent::Gen::ActorStateTeleportWhileMoving> ActorStates::ActorStateTeleportWhileMoving() const
        {
            auto sub = getSubNode("ActorStateTeleportWhileMoving");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateTeleportWhileMoving>{}: std::optional<Ent::Gen::ActorStateTeleportWhileMoving>(getSubNode("ActorStateTeleportWhileMoving"));
        }
        inline Ent::Gen::ActorStateTeleportWhileMoving ActorStates::addActorStateTeleportWhileMoving() const
        {
            return Ent::Gen::ActorStateTeleportWhileMoving(addSubNode("ActorStateTeleportWhileMoving"));
        }
        inline void ActorStates::removeActorStateTeleportWhileMoving() const
        {
            node->mapErase("ActorStateTeleportWhileMoving");
        }
        inline std::optional<Ent::Gen::ActorStateTryEquipShamanStaff> ActorStates::ActorStateTryEquipShamanStaff() const
        {
            auto sub = getSubNode("ActorStateTryEquipShamanStaff");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateTryEquipShamanStaff>{}: std::optional<Ent::Gen::ActorStateTryEquipShamanStaff>(getSubNode("ActorStateTryEquipShamanStaff"));
        }
        inline Ent::Gen::ActorStateTryEquipShamanStaff ActorStates::addActorStateTryEquipShamanStaff() const
        {
            return Ent::Gen::ActorStateTryEquipShamanStaff(addSubNode("ActorStateTryEquipShamanStaff"));
        }
        inline void ActorStates::removeActorStateTryEquipShamanStaff() const
        {
            node->mapErase("ActorStateTryEquipShamanStaff");
        }
        inline std::optional<Ent::Gen::ActorStateTryUpgradeShamanStaff> ActorStates::ActorStateTryUpgradeShamanStaff() const
        {
            auto sub = getSubNode("ActorStateTryUpgradeShamanStaff");
            return sub == nullptr? std::optional<Ent::Gen::ActorStateTryUpgradeShamanStaff>{}: std::optional<Ent::Gen::ActorStateTryUpgradeShamanStaff>(getSubNode("ActorStateTryUpgradeShamanStaff"));
        }
        inline Ent::Gen::ActorStateTryUpgradeShamanStaff ActorStates::addActorStateTryUpgradeShamanStaff() const
        {
            return Ent::Gen::ActorStateTryUpgradeShamanStaff(addSubNode("ActorStateTryUpgradeShamanStaff"));
        }
        inline void ActorStates::removeActorStateTryUpgradeShamanStaff() const
        {
            node->mapErase("ActorStateTryUpgradeShamanStaff");
        }
        inline std::optional<Ent::Gen::EntityStateAboutToBeHatched> ActorStates::EntityStateAboutToBeHatched() const
        {
            auto sub = getSubNode("EntityStateAboutToBeHatched");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateAboutToBeHatched>{}: std::optional<Ent::Gen::EntityStateAboutToBeHatched>(getSubNode("EntityStateAboutToBeHatched"));
        }
        inline Ent::Gen::EntityStateAboutToBeHatched ActorStates::addEntityStateAboutToBeHatched() const
        {
            return Ent::Gen::EntityStateAboutToBeHatched(addSubNode("EntityStateAboutToBeHatched"));
        }
        inline void ActorStates::removeEntityStateAboutToBeHatched() const
        {
            node->mapErase("EntityStateAboutToBeHatched");
        }
        inline std::optional<Ent::Gen::EntityStateAerialJump> ActorStates::EntityStateAerialJump() const
        {
            auto sub = getSubNode("EntityStateAerialJump");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateAerialJump>{}: std::optional<Ent::Gen::EntityStateAerialJump>(getSubNode("EntityStateAerialJump"));
        }
        inline Ent::Gen::EntityStateAerialJump ActorStates::addEntityStateAerialJump() const
        {
            return Ent::Gen::EntityStateAerialJump(addSubNode("EntityStateAerialJump"));
        }
        inline void ActorStates::removeEntityStateAerialJump() const
        {
            node->mapErase("EntityStateAerialJump");
        }
        inline std::optional<Ent::Gen::EntityStateAimAt> ActorStates::EntityStateAimAt() const
        {
            auto sub = getSubNode("EntityStateAimAt");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateAimAt>{}: std::optional<Ent::Gen::EntityStateAimAt>(getSubNode("EntityStateAimAt"));
        }
        inline Ent::Gen::EntityStateAimAt ActorStates::addEntityStateAimAt() const
        {
            return Ent::Gen::EntityStateAimAt(addSubNode("EntityStateAimAt"));
        }
        inline void ActorStates::removeEntityStateAimAt() const
        {
            node->mapErase("EntityStateAimAt");
        }
        inline std::optional<Ent::Gen::EntityStateAirControl> ActorStates::EntityStateAirControl() const
        {
            auto sub = getSubNode("EntityStateAirControl");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateAirControl>{}: std::optional<Ent::Gen::EntityStateAirControl>(getSubNode("EntityStateAirControl"));
        }
        inline Ent::Gen::EntityStateAirControl ActorStates::addEntityStateAirControl() const
        {
            return Ent::Gen::EntityStateAirControl(addSubNode("EntityStateAirControl"));
        }
        inline void ActorStates::removeEntityStateAirControl() const
        {
            node->mapErase("EntityStateAirControl");
        }
        inline std::optional<Ent::Gen::EntityStateApplyExtraLife> ActorStates::EntityStateApplyExtraLife() const
        {
            auto sub = getSubNode("EntityStateApplyExtraLife");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateApplyExtraLife>{}: std::optional<Ent::Gen::EntityStateApplyExtraLife>(getSubNode("EntityStateApplyExtraLife"));
        }
        inline Ent::Gen::EntityStateApplyExtraLife ActorStates::addEntityStateApplyExtraLife() const
        {
            return Ent::Gen::EntityStateApplyExtraLife(addSubNode("EntityStateApplyExtraLife"));
        }
        inline void ActorStates::removeEntityStateApplyExtraLife() const
        {
            node->mapErase("EntityStateApplyExtraLife");
        }
        inline std::optional<Ent::Gen::EntityStateAskStaffGuide> ActorStates::EntityStateAskStaffGuide() const
        {
            auto sub = getSubNode("EntityStateAskStaffGuide");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateAskStaffGuide>{}: std::optional<Ent::Gen::EntityStateAskStaffGuide>(getSubNode("EntityStateAskStaffGuide"));
        }
        inline Ent::Gen::EntityStateAskStaffGuide ActorStates::addEntityStateAskStaffGuide() const
        {
            return Ent::Gen::EntityStateAskStaffGuide(addSubNode("EntityStateAskStaffGuide"));
        }
        inline void ActorStates::removeEntityStateAskStaffGuide() const
        {
            node->mapErase("EntityStateAskStaffGuide");
        }
        inline std::optional<Ent::Gen::EntityStateAttackDive> ActorStates::EntityStateAttackDive() const
        {
            auto sub = getSubNode("EntityStateAttackDive");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateAttackDive>{}: std::optional<Ent::Gen::EntityStateAttackDive>(getSubNode("EntityStateAttackDive"));
        }
        inline Ent::Gen::EntityStateAttackDive ActorStates::addEntityStateAttackDive() const
        {
            return Ent::Gen::EntityStateAttackDive(addSubNode("EntityStateAttackDive"));
        }
        inline void ActorStates::removeEntityStateAttackDive() const
        {
            node->mapErase("EntityStateAttackDive");
        }
        inline std::optional<Ent::Gen::EntityStateAttitudeGroggy> ActorStates::EntityStateAttitudeGroggy() const
        {
            auto sub = getSubNode("EntityStateAttitudeGroggy");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateAttitudeGroggy>{}: std::optional<Ent::Gen::EntityStateAttitudeGroggy>(getSubNode("EntityStateAttitudeGroggy"));
        }
        inline Ent::Gen::EntityStateAttitudeGroggy ActorStates::addEntityStateAttitudeGroggy() const
        {
            return Ent::Gen::EntityStateAttitudeGroggy(addSubNode("EntityStateAttitudeGroggy"));
        }
        inline void ActorStates::removeEntityStateAttitudeGroggy() const
        {
            node->mapErase("EntityStateAttitudeGroggy");
        }
        inline std::optional<Ent::Gen::EntityStateBackwardDodge> ActorStates::EntityStateBackwardDodge() const
        {
            auto sub = getSubNode("EntityStateBackwardDodge");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBackwardDodge>{}: std::optional<Ent::Gen::EntityStateBackwardDodge>(getSubNode("EntityStateBackwardDodge"));
        }
        inline Ent::Gen::EntityStateBackwardDodge ActorStates::addEntityStateBackwardDodge() const
        {
            return Ent::Gen::EntityStateBackwardDodge(addSubNode("EntityStateBackwardDodge"));
        }
        inline void ActorStates::removeEntityStateBackwardDodge() const
        {
            node->mapErase("EntityStateBackwardDodge");
        }
        inline std::optional<Ent::Gen::EntityStateBackwardLand> ActorStates::EntityStateBackwardLand() const
        {
            auto sub = getSubNode("EntityStateBackwardLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBackwardLand>{}: std::optional<Ent::Gen::EntityStateBackwardLand>(getSubNode("EntityStateBackwardLand"));
        }
        inline Ent::Gen::EntityStateBackwardLand ActorStates::addEntityStateBackwardLand() const
        {
            return Ent::Gen::EntityStateBackwardLand(addSubNode("EntityStateBackwardLand"));
        }
        inline void ActorStates::removeEntityStateBackwardLand() const
        {
            node->mapErase("EntityStateBackwardLand");
        }
        inline std::optional<Ent::Gen::EntityStateBeingBlockedByVine> ActorStates::EntityStateBeingBlockedByVine() const
        {
            auto sub = getSubNode("EntityStateBeingBlockedByVine");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBeingBlockedByVine>{}: std::optional<Ent::Gen::EntityStateBeingBlockedByVine>(getSubNode("EntityStateBeingBlockedByVine"));
        }
        inline Ent::Gen::EntityStateBeingBlockedByVine ActorStates::addEntityStateBeingBlockedByVine() const
        {
            return Ent::Gen::EntityStateBeingBlockedByVine(addSubNode("EntityStateBeingBlockedByVine"));
        }
        inline void ActorStates::removeEntityStateBeingBlockedByVine() const
        {
            node->mapErase("EntityStateBeingBlockedByVine");
        }
        inline std::optional<Ent::Gen::EntityStateBeingInReeds> ActorStates::EntityStateBeingInReeds() const
        {
            auto sub = getSubNode("EntityStateBeingInReeds");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBeingInReeds>{}: std::optional<Ent::Gen::EntityStateBeingInReeds>(getSubNode("EntityStateBeingInReeds"));
        }
        inline Ent::Gen::EntityStateBeingInReeds ActorStates::addEntityStateBeingInReeds() const
        {
            return Ent::Gen::EntityStateBeingInReeds(addSubNode("EntityStateBeingInReeds"));
        }
        inline void ActorStates::removeEntityStateBeingInReeds() const
        {
            node->mapErase("EntityStateBeingInReeds");
        }
        inline std::optional<Ent::Gen::EntityStateBeingLinked> ActorStates::EntityStateBeingLinked() const
        {
            auto sub = getSubNode("EntityStateBeingLinked");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBeingLinked>{}: std::optional<Ent::Gen::EntityStateBeingLinked>(getSubNode("EntityStateBeingLinked"));
        }
        inline Ent::Gen::EntityStateBeingLinked ActorStates::addEntityStateBeingLinked() const
        {
            return Ent::Gen::EntityStateBeingLinked(addSubNode("EntityStateBeingLinked"));
        }
        inline void ActorStates::removeEntityStateBeingLinked() const
        {
            node->mapErase("EntityStateBeingLinked");
        }
        inline std::optional<Ent::Gen::EntityStateBeingOnSlope> ActorStates::EntityStateBeingOnSlope() const
        {
            auto sub = getSubNode("EntityStateBeingOnSlope");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBeingOnSlope>{}: std::optional<Ent::Gen::EntityStateBeingOnSlope>(getSubNode("EntityStateBeingOnSlope"));
        }
        inline Ent::Gen::EntityStateBeingOnSlope ActorStates::addEntityStateBeingOnSlope() const
        {
            return Ent::Gen::EntityStateBeingOnSlope(addSubNode("EntityStateBeingOnSlope"));
        }
        inline void ActorStates::removeEntityStateBeingOnSlope() const
        {
            node->mapErase("EntityStateBeingOnSlope");
        }
        inline std::optional<Ent::Gen::EntityStateBeingOnSpike> ActorStates::EntityStateBeingOnSpike() const
        {
            auto sub = getSubNode("EntityStateBeingOnSpike");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBeingOnSpike>{}: std::optional<Ent::Gen::EntityStateBeingOnSpike>(getSubNode("EntityStateBeingOnSpike"));
        }
        inline Ent::Gen::EntityStateBeingOnSpike ActorStates::addEntityStateBeingOnSpike() const
        {
            return Ent::Gen::EntityStateBeingOnSpike(addSubNode("EntityStateBeingOnSpike"));
        }
        inline void ActorStates::removeEntityStateBeingOnSpike() const
        {
            node->mapErase("EntityStateBeingOnSpike");
        }
        inline std::optional<Ent::Gen::EntityStateBite> ActorStates::EntityStateBite() const
        {
            auto sub = getSubNode("EntityStateBite");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBite>{}: std::optional<Ent::Gen::EntityStateBite>(getSubNode("EntityStateBite"));
        }
        inline Ent::Gen::EntityStateBite ActorStates::addEntityStateBite() const
        {
            return Ent::Gen::EntityStateBite(addSubNode("EntityStateBite"));
        }
        inline void ActorStates::removeEntityStateBite() const
        {
            node->mapErase("EntityStateBite");
        }
        inline std::optional<Ent::Gen::EntityStateBiteAttack> ActorStates::EntityStateBiteAttack() const
        {
            auto sub = getSubNode("EntityStateBiteAttack");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBiteAttack>{}: std::optional<Ent::Gen::EntityStateBiteAttack>(getSubNode("EntityStateBiteAttack"));
        }
        inline Ent::Gen::EntityStateBiteAttack ActorStates::addEntityStateBiteAttack() const
        {
            return Ent::Gen::EntityStateBiteAttack(addSubNode("EntityStateBiteAttack"));
        }
        inline void ActorStates::removeEntityStateBiteAttack() const
        {
            node->mapErase("EntityStateBiteAttack");
        }
        inline std::optional<Ent::Gen::EntityStateBiteIn> ActorStates::EntityStateBiteIn() const
        {
            auto sub = getSubNode("EntityStateBiteIn");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBiteIn>{}: std::optional<Ent::Gen::EntityStateBiteIn>(getSubNode("EntityStateBiteIn"));
        }
        inline Ent::Gen::EntityStateBiteIn ActorStates::addEntityStateBiteIn() const
        {
            return Ent::Gen::EntityStateBiteIn(addSubNode("EntityStateBiteIn"));
        }
        inline void ActorStates::removeEntityStateBiteIn() const
        {
            node->mapErase("EntityStateBiteIn");
        }
        inline std::optional<Ent::Gen::EntityStateBiteOut> ActorStates::EntityStateBiteOut() const
        {
            auto sub = getSubNode("EntityStateBiteOut");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBiteOut>{}: std::optional<Ent::Gen::EntityStateBiteOut>(getSubNode("EntityStateBiteOut"));
        }
        inline Ent::Gen::EntityStateBiteOut ActorStates::addEntityStateBiteOut() const
        {
            return Ent::Gen::EntityStateBiteOut(addSubNode("EntityStateBiteOut"));
        }
        inline void ActorStates::removeEntityStateBiteOut() const
        {
            node->mapErase("EntityStateBiteOut");
        }
        inline std::optional<Ent::Gen::EntityStateBitten> ActorStates::EntityStateBitten() const
        {
            auto sub = getSubNode("EntityStateBitten");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBitten>{}: std::optional<Ent::Gen::EntityStateBitten>(getSubNode("EntityStateBitten"));
        }
        inline Ent::Gen::EntityStateBitten ActorStates::addEntityStateBitten() const
        {
            return Ent::Gen::EntityStateBitten(addSubNode("EntityStateBitten"));
        }
        inline void ActorStates::removeEntityStateBitten() const
        {
            node->mapErase("EntityStateBitten");
        }
        inline std::optional<Ent::Gen::EntityStateBittenDefense> ActorStates::EntityStateBittenDefense() const
        {
            auto sub = getSubNode("EntityStateBittenDefense");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBittenDefense>{}: std::optional<Ent::Gen::EntityStateBittenDefense>(getSubNode("EntityStateBittenDefense"));
        }
        inline Ent::Gen::EntityStateBittenDefense ActorStates::addEntityStateBittenDefense() const
        {
            return Ent::Gen::EntityStateBittenDefense(addSubNode("EntityStateBittenDefense"));
        }
        inline void ActorStates::removeEntityStateBittenDefense() const
        {
            node->mapErase("EntityStateBittenDefense");
        }
        inline std::optional<Ent::Gen::EntityStateBoidsHomePos> ActorStates::EntityStateBoidsHomePos() const
        {
            auto sub = getSubNode("EntityStateBoidsHomePos");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBoidsHomePos>{}: std::optional<Ent::Gen::EntityStateBoidsHomePos>(getSubNode("EntityStateBoidsHomePos"));
        }
        inline Ent::Gen::EntityStateBoidsHomePos ActorStates::addEntityStateBoidsHomePos() const
        {
            return Ent::Gen::EntityStateBoidsHomePos(addSubNode("EntityStateBoidsHomePos"));
        }
        inline void ActorStates::removeEntityStateBoidsHomePos() const
        {
            node->mapErase("EntityStateBoidsHomePos");
        }
        inline std::optional<Ent::Gen::EntityStateBounce> ActorStates::EntityStateBounce() const
        {
            auto sub = getSubNode("EntityStateBounce");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBounce>{}: std::optional<Ent::Gen::EntityStateBounce>(getSubNode("EntityStateBounce"));
        }
        inline Ent::Gen::EntityStateBounce ActorStates::addEntityStateBounce() const
        {
            return Ent::Gen::EntityStateBounce(addSubNode("EntityStateBounce"));
        }
        inline void ActorStates::removeEntityStateBounce() const
        {
            node->mapErase("EntityStateBounce");
        }
        inline std::optional<Ent::Gen::EntityStateBounceLand> ActorStates::EntityStateBounceLand() const
        {
            auto sub = getSubNode("EntityStateBounceLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBounceLand>{}: std::optional<Ent::Gen::EntityStateBounceLand>(getSubNode("EntityStateBounceLand"));
        }
        inline Ent::Gen::EntityStateBounceLand ActorStates::addEntityStateBounceLand() const
        {
            return Ent::Gen::EntityStateBounceLand(addSubNode("EntityStateBounceLand"));
        }
        inline void ActorStates::removeEntityStateBounceLand() const
        {
            node->mapErase("EntityStateBounceLand");
        }
        inline std::optional<Ent::Gen::EntityStateBreakableBreaking> ActorStates::EntityStateBreakableBreaking() const
        {
            auto sub = getSubNode("EntityStateBreakableBreaking");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBreakableBreaking>{}: std::optional<Ent::Gen::EntityStateBreakableBreaking>(getSubNode("EntityStateBreakableBreaking"));
        }
        inline Ent::Gen::EntityStateBreakableBreaking ActorStates::addEntityStateBreakableBreaking() const
        {
            return Ent::Gen::EntityStateBreakableBreaking(addSubNode("EntityStateBreakableBreaking"));
        }
        inline void ActorStates::removeEntityStateBreakableBreaking() const
        {
            node->mapErase("EntityStateBreakableBreaking");
        }
        inline std::optional<Ent::Gen::EntityStateBreakableBroken> ActorStates::EntityStateBreakableBroken() const
        {
            auto sub = getSubNode("EntityStateBreakableBroken");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBreakableBroken>{}: std::optional<Ent::Gen::EntityStateBreakableBroken>(getSubNode("EntityStateBreakableBroken"));
        }
        inline Ent::Gen::EntityStateBreakableBroken ActorStates::addEntityStateBreakableBroken() const
        {
            return Ent::Gen::EntityStateBreakableBroken(addSubNode("EntityStateBreakableBroken"));
        }
        inline void ActorStates::removeEntityStateBreakableBroken() const
        {
            node->mapErase("EntityStateBreakableBroken");
        }
        inline std::optional<Ent::Gen::EntityStateBreakableEntire> ActorStates::EntityStateBreakableEntire() const
        {
            auto sub = getSubNode("EntityStateBreakableEntire");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBreakableEntire>{}: std::optional<Ent::Gen::EntityStateBreakableEntire>(getSubNode("EntityStateBreakableEntire"));
        }
        inline Ent::Gen::EntityStateBreakableEntire ActorStates::addEntityStateBreakableEntire() const
        {
            return Ent::Gen::EntityStateBreakableEntire(addSubNode("EntityStateBreakableEntire"));
        }
        inline void ActorStates::removeEntityStateBreakableEntire() const
        {
            node->mapErase("EntityStateBreakableEntire");
        }
        inline std::optional<Ent::Gen::EntityStateBridgeAttached> ActorStates::EntityStateBridgeAttached() const
        {
            auto sub = getSubNode("EntityStateBridgeAttached");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBridgeAttached>{}: std::optional<Ent::Gen::EntityStateBridgeAttached>(getSubNode("EntityStateBridgeAttached"));
        }
        inline Ent::Gen::EntityStateBridgeAttached ActorStates::addEntityStateBridgeAttached() const
        {
            return Ent::Gen::EntityStateBridgeAttached(addSubNode("EntityStateBridgeAttached"));
        }
        inline void ActorStates::removeEntityStateBridgeAttached() const
        {
            node->mapErase("EntityStateBridgeAttached");
        }
        inline std::optional<Ent::Gen::EntityStateBridgeAttracted> ActorStates::EntityStateBridgeAttracted() const
        {
            auto sub = getSubNode("EntityStateBridgeAttracted");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBridgeAttracted>{}: std::optional<Ent::Gen::EntityStateBridgeAttracted>(getSubNode("EntityStateBridgeAttracted"));
        }
        inline Ent::Gen::EntityStateBridgeAttracted ActorStates::addEntityStateBridgeAttracted() const
        {
            return Ent::Gen::EntityStateBridgeAttracted(addSubNode("EntityStateBridgeAttracted"));
        }
        inline void ActorStates::removeEntityStateBridgeAttracted() const
        {
            node->mapErase("EntityStateBridgeAttracted");
        }
        inline std::optional<Ent::Gen::EntityStateBridgeBeingControlled> ActorStates::EntityStateBridgeBeingControlled() const
        {
            auto sub = getSubNode("EntityStateBridgeBeingControlled");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateBridgeBeingControlled>{}: std::optional<Ent::Gen::EntityStateBridgeBeingControlled>(getSubNode("EntityStateBridgeBeingControlled"));
        }
        inline Ent::Gen::EntityStateBridgeBeingControlled ActorStates::addEntityStateBridgeBeingControlled() const
        {
            return Ent::Gen::EntityStateBridgeBeingControlled(addSubNode("EntityStateBridgeBeingControlled"));
        }
        inline void ActorStates::removeEntityStateBridgeBeingControlled() const
        {
            node->mapErase("EntityStateBridgeBeingControlled");
        }
        inline std::optional<Ent::Gen::EntityStateCallAndMountSpiritAnimal> ActorStates::EntityStateCallAndMountSpiritAnimal() const
        {
            auto sub = getSubNode("EntityStateCallAndMountSpiritAnimal");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateCallAndMountSpiritAnimal>{}: std::optional<Ent::Gen::EntityStateCallAndMountSpiritAnimal>(getSubNode("EntityStateCallAndMountSpiritAnimal"));
        }
        inline Ent::Gen::EntityStateCallAndMountSpiritAnimal ActorStates::addEntityStateCallAndMountSpiritAnimal() const
        {
            return Ent::Gen::EntityStateCallAndMountSpiritAnimal(addSubNode("EntityStateCallAndMountSpiritAnimal"));
        }
        inline void ActorStates::removeEntityStateCallAndMountSpiritAnimal() const
        {
            node->mapErase("EntityStateCallAndMountSpiritAnimal");
        }
        inline std::optional<Ent::Gen::EntityStateCanNotBePerceived> ActorStates::EntityStateCanNotBePerceived() const
        {
            auto sub = getSubNode("EntityStateCanNotBePerceived");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateCanNotBePerceived>{}: std::optional<Ent::Gen::EntityStateCanNotBePerceived>(getSubNode("EntityStateCanNotBePerceived"));
        }
        inline Ent::Gen::EntityStateCanNotBePerceived ActorStates::addEntityStateCanNotBePerceived() const
        {
            return Ent::Gen::EntityStateCanNotBePerceived(addSubNode("EntityStateCanNotBePerceived"));
        }
        inline void ActorStates::removeEntityStateCanNotBePerceived() const
        {
            node->mapErase("EntityStateCanNotBePerceived");
        }
        inline std::optional<Ent::Gen::EntityStateChargeMode> ActorStates::EntityStateChargeMode() const
        {
            auto sub = getSubNode("EntityStateChargeMode");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateChargeMode>{}: std::optional<Ent::Gen::EntityStateChargeMode>(getSubNode("EntityStateChargeMode"));
        }
        inline Ent::Gen::EntityStateChargeMode ActorStates::addEntityStateChargeMode() const
        {
            return Ent::Gen::EntityStateChargeMode(addSubNode("EntityStateChargeMode"));
        }
        inline void ActorStates::removeEntityStateChargeMode() const
        {
            node->mapErase("EntityStateChargeMode");
        }
        inline std::optional<Ent::Gen::EntityStateChargedJump> ActorStates::EntityStateChargedJump() const
        {
            auto sub = getSubNode("EntityStateChargedJump");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateChargedJump>{}: std::optional<Ent::Gen::EntityStateChargedJump>(getSubNode("EntityStateChargedJump"));
        }
        inline Ent::Gen::EntityStateChargedJump ActorStates::addEntityStateChargedJump() const
        {
            return Ent::Gen::EntityStateChargedJump(addSubNode("EntityStateChargedJump"));
        }
        inline void ActorStates::removeEntityStateChargedJump() const
        {
            node->mapErase("EntityStateChargedJump");
        }
        inline std::optional<Ent::Gen::EntityStateChargingJump> ActorStates::EntityStateChargingJump() const
        {
            auto sub = getSubNode("EntityStateChargingJump");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateChargingJump>{}: std::optional<Ent::Gen::EntityStateChargingJump>(getSubNode("EntityStateChargingJump"));
        }
        inline Ent::Gen::EntityStateChargingJump ActorStates::addEntityStateChargingJump() const
        {
            return Ent::Gen::EntityStateChargingJump(addSubNode("EntityStateChargingJump"));
        }
        inline void ActorStates::removeEntityStateChargingJump() const
        {
            node->mapErase("EntityStateChargingJump");
        }
        inline std::optional<Ent::Gen::EntityStateCinematicCompleted> ActorStates::EntityStateCinematicCompleted() const
        {
            auto sub = getSubNode("EntityStateCinematicCompleted");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateCinematicCompleted>{}: std::optional<Ent::Gen::EntityStateCinematicCompleted>(getSubNode("EntityStateCinematicCompleted"));
        }
        inline Ent::Gen::EntityStateCinematicCompleted ActorStates::addEntityStateCinematicCompleted() const
        {
            return Ent::Gen::EntityStateCinematicCompleted(addSubNode("EntityStateCinematicCompleted"));
        }
        inline void ActorStates::removeEntityStateCinematicCompleted() const
        {
            node->mapErase("EntityStateCinematicCompleted");
        }
        inline std::optional<Ent::Gen::EntityStateCinematicReady> ActorStates::EntityStateCinematicReady() const
        {
            auto sub = getSubNode("EntityStateCinematicReady");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateCinematicReady>{}: std::optional<Ent::Gen::EntityStateCinematicReady>(getSubNode("EntityStateCinematicReady"));
        }
        inline Ent::Gen::EntityStateCinematicReady ActorStates::addEntityStateCinematicReady() const
        {
            return Ent::Gen::EntityStateCinematicReady(addSubNode("EntityStateCinematicReady"));
        }
        inline void ActorStates::removeEntityStateCinematicReady() const
        {
            node->mapErase("EntityStateCinematicReady");
        }
        inline std::optional<Ent::Gen::EntityStateClassicDodge> ActorStates::EntityStateClassicDodge() const
        {
            auto sub = getSubNode("EntityStateClassicDodge");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateClassicDodge>{}: std::optional<Ent::Gen::EntityStateClassicDodge>(getSubNode("EntityStateClassicDodge"));
        }
        inline Ent::Gen::EntityStateClassicDodge ActorStates::addEntityStateClassicDodge() const
        {
            return Ent::Gen::EntityStateClassicDodge(addSubNode("EntityStateClassicDodge"));
        }
        inline void ActorStates::removeEntityStateClassicDodge() const
        {
            node->mapErase("EntityStateClassicDodge");
        }
        inline std::optional<Ent::Gen::EntityStateClassicLand> ActorStates::EntityStateClassicLand() const
        {
            auto sub = getSubNode("EntityStateClassicLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateClassicLand>{}: std::optional<Ent::Gen::EntityStateClassicLand>(getSubNode("EntityStateClassicLand"));
        }
        inline Ent::Gen::EntityStateClassicLand ActorStates::addEntityStateClassicLand() const
        {
            return Ent::Gen::EntityStateClassicLand(addSubNode("EntityStateClassicLand"));
        }
        inline void ActorStates::removeEntityStateClassicLand() const
        {
            node->mapErase("EntityStateClassicLand");
        }
        inline std::optional<Ent::Gen::EntityStateClimbWaterfall> ActorStates::EntityStateClimbWaterfall() const
        {
            auto sub = getSubNode("EntityStateClimbWaterfall");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateClimbWaterfall>{}: std::optional<Ent::Gen::EntityStateClimbWaterfall>(getSubNode("EntityStateClimbWaterfall"));
        }
        inline Ent::Gen::EntityStateClimbWaterfall ActorStates::addEntityStateClimbWaterfall() const
        {
            return Ent::Gen::EntityStateClimbWaterfall(addSubNode("EntityStateClimbWaterfall"));
        }
        inline void ActorStates::removeEntityStateClimbWaterfall() const
        {
            node->mapErase("EntityStateClimbWaterfall");
        }
        inline std::optional<Ent::Gen::EntityStateClimbWaterfallImpulse> ActorStates::EntityStateClimbWaterfallImpulse() const
        {
            auto sub = getSubNode("EntityStateClimbWaterfallImpulse");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateClimbWaterfallImpulse>{}: std::optional<Ent::Gen::EntityStateClimbWaterfallImpulse>(getSubNode("EntityStateClimbWaterfallImpulse"));
        }
        inline Ent::Gen::EntityStateClimbWaterfallImpulse ActorStates::addEntityStateClimbWaterfallImpulse() const
        {
            return Ent::Gen::EntityStateClimbWaterfallImpulse(addSubNode("EntityStateClimbWaterfallImpulse"));
        }
        inline void ActorStates::removeEntityStateClimbWaterfallImpulse() const
        {
            node->mapErase("EntityStateClimbWaterfallImpulse");
        }
        inline std::optional<Ent::Gen::EntityStateCollectVertebrae> ActorStates::EntityStateCollectVertebrae() const
        {
            auto sub = getSubNode("EntityStateCollectVertebrae");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateCollectVertebrae>{}: std::optional<Ent::Gen::EntityStateCollectVertebrae>(getSubNode("EntityStateCollectVertebrae"));
        }
        inline Ent::Gen::EntityStateCollectVertebrae ActorStates::addEntityStateCollectVertebrae() const
        {
            return Ent::Gen::EntityStateCollectVertebrae(addSubNode("EntityStateCollectVertebrae"));
        }
        inline void ActorStates::removeEntityStateCollectVertebrae() const
        {
            node->mapErase("EntityStateCollectVertebrae");
        }
        inline std::optional<Ent::Gen::EntityStateCombat> ActorStates::EntityStateCombat() const
        {
            auto sub = getSubNode("EntityStateCombat");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateCombat>{}: std::optional<Ent::Gen::EntityStateCombat>(getSubNode("EntityStateCombat"));
        }
        inline Ent::Gen::EntityStateCombat ActorStates::addEntityStateCombat() const
        {
            return Ent::Gen::EntityStateCombat(addSubNode("EntityStateCombat"));
        }
        inline void ActorStates::removeEntityStateCombat() const
        {
            node->mapErase("EntityStateCombat");
        }
        inline std::optional<Ent::Gen::EntityStateConstrainedInput> ActorStates::EntityStateConstrainedInput() const
        {
            auto sub = getSubNode("EntityStateConstrainedInput");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateConstrainedInput>{}: std::optional<Ent::Gen::EntityStateConstrainedInput>(getSubNode("EntityStateConstrainedInput"));
        }
        inline Ent::Gen::EntityStateConstrainedInput ActorStates::addEntityStateConstrainedInput() const
        {
            return Ent::Gen::EntityStateConstrainedInput(addSubNode("EntityStateConstrainedInput"));
        }
        inline void ActorStates::removeEntityStateConstrainedInput() const
        {
            node->mapErase("EntityStateConstrainedInput");
        }
        inline std::optional<Ent::Gen::EntityStateConstrainedMove> ActorStates::EntityStateConstrainedMove() const
        {
            auto sub = getSubNode("EntityStateConstrainedMove");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateConstrainedMove>{}: std::optional<Ent::Gen::EntityStateConstrainedMove>(getSubNode("EntityStateConstrainedMove"));
        }
        inline Ent::Gen::EntityStateConstrainedMove ActorStates::addEntityStateConstrainedMove() const
        {
            return Ent::Gen::EntityStateConstrainedMove(addSubNode("EntityStateConstrainedMove"));
        }
        inline void ActorStates::removeEntityStateConstrainedMove() const
        {
            node->mapErase("EntityStateConstrainedMove");
        }
        inline std::optional<Ent::Gen::EntityStateControlGPE> ActorStates::EntityStateControlGPE() const
        {
            auto sub = getSubNode("EntityStateControlGPE");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateControlGPE>{}: std::optional<Ent::Gen::EntityStateControlGPE>(getSubNode("EntityStateControlGPE"));
        }
        inline Ent::Gen::EntityStateControlGPE ActorStates::addEntityStateControlGPE() const
        {
            return Ent::Gen::EntityStateControlGPE(addSubNode("EntityStateControlGPE"));
        }
        inline void ActorStates::removeEntityStateControlGPE() const
        {
            node->mapErase("EntityStateControlGPE");
        }
        inline std::optional<Ent::Gen::EntityStateCreatureHatching> ActorStates::EntityStateCreatureHatching() const
        {
            auto sub = getSubNode("EntityStateCreatureHatching");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateCreatureHatching>{}: std::optional<Ent::Gen::EntityStateCreatureHatching>(getSubNode("EntityStateCreatureHatching"));
        }
        inline Ent::Gen::EntityStateCreatureHatching ActorStates::addEntityStateCreatureHatching() const
        {
            return Ent::Gen::EntityStateCreatureHatching(addSubNode("EntityStateCreatureHatching"));
        }
        inline void ActorStates::removeEntityStateCreatureHatching() const
        {
            node->mapErase("EntityStateCreatureHatching");
        }
        inline std::optional<Ent::Gen::EntityStateCreatureProfile> ActorStates::EntityStateCreatureProfile() const
        {
            auto sub = getSubNode("EntityStateCreatureProfile");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateCreatureProfile>{}: std::optional<Ent::Gen::EntityStateCreatureProfile>(getSubNode("EntityStateCreatureProfile"));
        }
        inline Ent::Gen::EntityStateCreatureProfile ActorStates::addEntityStateCreatureProfile() const
        {
            return Ent::Gen::EntityStateCreatureProfile(addSubNode("EntityStateCreatureProfile"));
        }
        inline void ActorStates::removeEntityStateCreatureProfile() const
        {
            node->mapErase("EntityStateCreatureProfile");
        }
        inline std::optional<Ent::Gen::EntityStateDamageLand> ActorStates::EntityStateDamageLand() const
        {
            auto sub = getSubNode("EntityStateDamageLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateDamageLand>{}: std::optional<Ent::Gen::EntityStateDamageLand>(getSubNode("EntityStateDamageLand"));
        }
        inline Ent::Gen::EntityStateDamageLand ActorStates::addEntityStateDamageLand() const
        {
            return Ent::Gen::EntityStateDamageLand(addSubNode("EntityStateDamageLand"));
        }
        inline void ActorStates::removeEntityStateDamageLand() const
        {
            node->mapErase("EntityStateDamageLand");
        }
        inline std::optional<Ent::Gen::EntityStateDeathLand> ActorStates::EntityStateDeathLand() const
        {
            auto sub = getSubNode("EntityStateDeathLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateDeathLand>{}: std::optional<Ent::Gen::EntityStateDeathLand>(getSubNode("EntityStateDeathLand"));
        }
        inline Ent::Gen::EntityStateDeathLand ActorStates::addEntityStateDeathLand() const
        {
            return Ent::Gen::EntityStateDeathLand(addSubNode("EntityStateDeathLand"));
        }
        inline void ActorStates::removeEntityStateDeathLand() const
        {
            node->mapErase("EntityStateDeathLand");
        }
        inline std::optional<Ent::Gen::EntityStateDisablePerceptionRequest> ActorStates::EntityStateDisablePerceptionRequest() const
        {
            auto sub = getSubNode("EntityStateDisablePerceptionRequest");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateDisablePerceptionRequest>{}: std::optional<Ent::Gen::EntityStateDisablePerceptionRequest>(getSubNode("EntityStateDisablePerceptionRequest"));
        }
        inline Ent::Gen::EntityStateDisablePerceptionRequest ActorStates::addEntityStateDisablePerceptionRequest() const
        {
            return Ent::Gen::EntityStateDisablePerceptionRequest(addSubNode("EntityStateDisablePerceptionRequest"));
        }
        inline void ActorStates::removeEntityStateDisablePerceptionRequest() const
        {
            node->mapErase("EntityStateDisablePerceptionRequest");
        }
        inline std::optional<Ent::Gen::EntityStateDisabledVertebrae> ActorStates::EntityStateDisabledVertebrae() const
        {
            auto sub = getSubNode("EntityStateDisabledVertebrae");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateDisabledVertebrae>{}: std::optional<Ent::Gen::EntityStateDisabledVertebrae>(getSubNode("EntityStateDisabledVertebrae"));
        }
        inline Ent::Gen::EntityStateDisabledVertebrae ActorStates::addEntityStateDisabledVertebrae() const
        {
            return Ent::Gen::EntityStateDisabledVertebrae(addSubNode("EntityStateDisabledVertebrae"));
        }
        inline void ActorStates::removeEntityStateDisabledVertebrae() const
        {
            node->mapErase("EntityStateDisabledVertebrae");
        }
        inline std::optional<Ent::Gen::EntityStateDisguise> ActorStates::EntityStateDisguise() const
        {
            auto sub = getSubNode("EntityStateDisguise");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateDisguise>{}: std::optional<Ent::Gen::EntityStateDisguise>(getSubNode("EntityStateDisguise"));
        }
        inline Ent::Gen::EntityStateDisguise ActorStates::addEntityStateDisguise() const
        {
            return Ent::Gen::EntityStateDisguise(addSubNode("EntityStateDisguise"));
        }
        inline void ActorStates::removeEntityStateDisguise() const
        {
            node->mapErase("EntityStateDisguise");
        }
        inline std::optional<Ent::Gen::EntityStateDisplayHatchingCost> ActorStates::EntityStateDisplayHatchingCost() const
        {
            auto sub = getSubNode("EntityStateDisplayHatchingCost");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateDisplayHatchingCost>{}: std::optional<Ent::Gen::EntityStateDisplayHatchingCost>(getSubNode("EntityStateDisplayHatchingCost"));
        }
        inline Ent::Gen::EntityStateDisplayHatchingCost ActorStates::addEntityStateDisplayHatchingCost() const
        {
            return Ent::Gen::EntityStateDisplayHatchingCost(addSubNode("EntityStateDisplayHatchingCost"));
        }
        inline void ActorStates::removeEntityStateDisplayHatchingCost() const
        {
            node->mapErase("EntityStateDisplayHatchingCost");
        }
        inline std::optional<Ent::Gen::EntityStateDodgeCooldown> ActorStates::EntityStateDodgeCooldown() const
        {
            auto sub = getSubNode("EntityStateDodgeCooldown");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateDodgeCooldown>{}: std::optional<Ent::Gen::EntityStateDodgeCooldown>(getSubNode("EntityStateDodgeCooldown"));
        }
        inline Ent::Gen::EntityStateDodgeCooldown ActorStates::addEntityStateDodgeCooldown() const
        {
            return Ent::Gen::EntityStateDodgeCooldown(addSubNode("EntityStateDodgeCooldown"));
        }
        inline void ActorStates::removeEntityStateDodgeCooldown() const
        {
            node->mapErase("EntityStateDodgeCooldown");
        }
        inline std::optional<Ent::Gen::EntityStateEjectedLand> ActorStates::EntityStateEjectedLand() const
        {
            auto sub = getSubNode("EntityStateEjectedLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateEjectedLand>{}: std::optional<Ent::Gen::EntityStateEjectedLand>(getSubNode("EntityStateEjectedLand"));
        }
        inline Ent::Gen::EntityStateEjectedLand ActorStates::addEntityStateEjectedLand() const
        {
            return Ent::Gen::EntityStateEjectedLand(addSubNode("EntityStateEjectedLand"));
        }
        inline void ActorStates::removeEntityStateEjectedLand() const
        {
            node->mapErase("EntityStateEjectedLand");
        }
        inline std::optional<Ent::Gen::EntityStateEnergyRootAbortHatching> ActorStates::EntityStateEnergyRootAbortHatching() const
        {
            auto sub = getSubNode("EntityStateEnergyRootAbortHatching");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateEnergyRootAbortHatching>{}: std::optional<Ent::Gen::EntityStateEnergyRootAbortHatching>(getSubNode("EntityStateEnergyRootAbortHatching"));
        }
        inline Ent::Gen::EntityStateEnergyRootAbortHatching ActorStates::addEntityStateEnergyRootAbortHatching() const
        {
            return Ent::Gen::EntityStateEnergyRootAbortHatching(addSubNode("EntityStateEnergyRootAbortHatching"));
        }
        inline void ActorStates::removeEntityStateEnergyRootAbortHatching() const
        {
            node->mapErase("EntityStateEnergyRootAbortHatching");
        }
        inline std::optional<Ent::Gen::EntityStateEnergyRootHatching> ActorStates::EntityStateEnergyRootHatching() const
        {
            auto sub = getSubNode("EntityStateEnergyRootHatching");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateEnergyRootHatching>{}: std::optional<Ent::Gen::EntityStateEnergyRootHatching>(getSubNode("EntityStateEnergyRootHatching"));
        }
        inline Ent::Gen::EntityStateEnergyRootHatching ActorStates::addEntityStateEnergyRootHatching() const
        {
            return Ent::Gen::EntityStateEnergyRootHatching(addSubNode("EntityStateEnergyRootHatching"));
        }
        inline void ActorStates::removeEntityStateEnergyRootHatching() const
        {
            node->mapErase("EntityStateEnergyRootHatching");
        }
        inline std::optional<Ent::Gen::EntityStateEnergySide> ActorStates::EntityStateEnergySide() const
        {
            auto sub = getSubNode("EntityStateEnergySide");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateEnergySide>{}: std::optional<Ent::Gen::EntityStateEnergySide>(getSubNode("EntityStateEnergySide"));
        }
        inline Ent::Gen::EntityStateEnergySide ActorStates::addEntityStateEnergySide() const
        {
            return Ent::Gen::EntityStateEnergySide(addSubNode("EntityStateEnergySide"));
        }
        inline void ActorStates::removeEntityStateEnergySide() const
        {
            node->mapErase("EntityStateEnergySide");
        }
        inline std::optional<Ent::Gen::EntityStateEnergySpoutState> ActorStates::EntityStateEnergySpoutState() const
        {
            auto sub = getSubNode("EntityStateEnergySpoutState");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateEnergySpoutState>{}: std::optional<Ent::Gen::EntityStateEnergySpoutState>(getSubNode("EntityStateEnergySpoutState"));
        }
        inline Ent::Gen::EntityStateEnergySpoutState ActorStates::addEntityStateEnergySpoutState() const
        {
            return Ent::Gen::EntityStateEnergySpoutState(addSubNode("EntityStateEnergySpoutState"));
        }
        inline void ActorStates::removeEntityStateEnergySpoutState() const
        {
            node->mapErase("EntityStateEnergySpoutState");
        }
        inline std::optional<Ent::Gen::EntityStateExtraLife> ActorStates::EntityStateExtraLife() const
        {
            auto sub = getSubNode("EntityStateExtraLife");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateExtraLife>{}: std::optional<Ent::Gen::EntityStateExtraLife>(getSubNode("EntityStateExtraLife"));
        }
        inline Ent::Gen::EntityStateExtraLife ActorStates::addEntityStateExtraLife() const
        {
            return Ent::Gen::EntityStateExtraLife(addSubNode("EntityStateExtraLife"));
        }
        inline void ActorStates::removeEntityStateExtraLife() const
        {
            node->mapErase("EntityStateExtraLife");
        }
        inline std::optional<Ent::Gen::EntityStateFailingOrder> ActorStates::EntityStateFailingOrder() const
        {
            auto sub = getSubNode("EntityStateFailingOrder");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateFailingOrder>{}: std::optional<Ent::Gen::EntityStateFailingOrder>(getSubNode("EntityStateFailingOrder"));
        }
        inline Ent::Gen::EntityStateFailingOrder ActorStates::addEntityStateFailingOrder() const
        {
            return Ent::Gen::EntityStateFailingOrder(addSubNode("EntityStateFailingOrder"));
        }
        inline void ActorStates::removeEntityStateFailingOrder() const
        {
            node->mapErase("EntityStateFailingOrder");
        }
        inline std::optional<Ent::Gen::EntityStateFall> ActorStates::EntityStateFall() const
        {
            auto sub = getSubNode("EntityStateFall");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateFall>{}: std::optional<Ent::Gen::EntityStateFall>(getSubNode("EntityStateFall"));
        }
        inline Ent::Gen::EntityStateFall ActorStates::addEntityStateFall() const
        {
            return Ent::Gen::EntityStateFall(addSubNode("EntityStateFall"));
        }
        inline void ActorStates::removeEntityStateFall() const
        {
            node->mapErase("EntityStateFall");
        }
        inline std::optional<Ent::Gen::EntityStateFallDying> ActorStates::EntityStateFallDying() const
        {
            auto sub = getSubNode("EntityStateFallDying");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateFallDying>{}: std::optional<Ent::Gen::EntityStateFallDying>(getSubNode("EntityStateFallDying"));
        }
        inline Ent::Gen::EntityStateFallDying ActorStates::addEntityStateFallDying() const
        {
            return Ent::Gen::EntityStateFallDying(addSubNode("EntityStateFallDying"));
        }
        inline void ActorStates::removeEntityStateFallDying() const
        {
            node->mapErase("EntityStateFallDying");
        }
        inline std::optional<Ent::Gen::EntityStateFallInjured> ActorStates::EntityStateFallInjured() const
        {
            auto sub = getSubNode("EntityStateFallInjured");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateFallInjured>{}: std::optional<Ent::Gen::EntityStateFallInjured>(getSubNode("EntityStateFallInjured"));
        }
        inline Ent::Gen::EntityStateFallInjured ActorStates::addEntityStateFallInjured() const
        {
            return Ent::Gen::EntityStateFallInjured(addSubNode("EntityStateFallInjured"));
        }
        inline void ActorStates::removeEntityStateFallInjured() const
        {
            node->mapErase("EntityStateFallInjured");
        }
        inline std::optional<Ent::Gen::EntityStateFallSafe> ActorStates::EntityStateFallSafe() const
        {
            auto sub = getSubNode("EntityStateFallSafe");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateFallSafe>{}: std::optional<Ent::Gen::EntityStateFallSafe>(getSubNode("EntityStateFallSafe"));
        }
        inline Ent::Gen::EntityStateFallSafe ActorStates::addEntityStateFallSafe() const
        {
            return Ent::Gen::EntityStateFallSafe(addSubNode("EntityStateFallSafe"));
        }
        inline void ActorStates::removeEntityStateFallSafe() const
        {
            node->mapErase("EntityStateFallSafe");
        }
        inline std::optional<Ent::Gen::EntityStateFastRun> ActorStates::EntityStateFastRun() const
        {
            auto sub = getSubNode("EntityStateFastRun");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateFastRun>{}: std::optional<Ent::Gen::EntityStateFastRun>(getSubNode("EntityStateFastRun"));
        }
        inline Ent::Gen::EntityStateFastRun ActorStates::addEntityStateFastRun() const
        {
            return Ent::Gen::EntityStateFastRun(addSubNode("EntityStateFastRun"));
        }
        inline void ActorStates::removeEntityStateFastRun() const
        {
            node->mapErase("EntityStateFastRun");
        }
        inline std::optional<Ent::Gen::EntityStateForceCanBeTargeted> ActorStates::EntityStateForceCanBeTargeted() const
        {
            auto sub = getSubNode("EntityStateForceCanBeTargeted");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateForceCanBeTargeted>{}: std::optional<Ent::Gen::EntityStateForceCanBeTargeted>(getSubNode("EntityStateForceCanBeTargeted"));
        }
        inline Ent::Gen::EntityStateForceCanBeTargeted ActorStates::addEntityStateForceCanBeTargeted() const
        {
            return Ent::Gen::EntityStateForceCanBeTargeted(addSubNode("EntityStateForceCanBeTargeted"));
        }
        inline void ActorStates::removeEntityStateForceCanBeTargeted() const
        {
            node->mapErase("EntityStateForceCanBeTargeted");
        }
        inline std::optional<Ent::Gen::EntityStateGrab> ActorStates::EntityStateGrab() const
        {
            auto sub = getSubNode("EntityStateGrab");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGrab>{}: std::optional<Ent::Gen::EntityStateGrab>(getSubNode("EntityStateGrab"));
        }
        inline Ent::Gen::EntityStateGrab ActorStates::addEntityStateGrab() const
        {
            return Ent::Gen::EntityStateGrab(addSubNode("EntityStateGrab"));
        }
        inline void ActorStates::removeEntityStateGrab() const
        {
            node->mapErase("EntityStateGrab");
        }
        inline std::optional<Ent::Gen::EntityStateGrabAttack> ActorStates::EntityStateGrabAttack() const
        {
            auto sub = getSubNode("EntityStateGrabAttack");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGrabAttack>{}: std::optional<Ent::Gen::EntityStateGrabAttack>(getSubNode("EntityStateGrabAttack"));
        }
        inline Ent::Gen::EntityStateGrabAttack ActorStates::addEntityStateGrabAttack() const
        {
            return Ent::Gen::EntityStateGrabAttack(addSubNode("EntityStateGrabAttack"));
        }
        inline void ActorStates::removeEntityStateGrabAttack() const
        {
            node->mapErase("EntityStateGrabAttack");
        }
        inline std::optional<Ent::Gen::EntityStateGrabIn> ActorStates::EntityStateGrabIn() const
        {
            auto sub = getSubNode("EntityStateGrabIn");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGrabIn>{}: std::optional<Ent::Gen::EntityStateGrabIn>(getSubNode("EntityStateGrabIn"));
        }
        inline Ent::Gen::EntityStateGrabIn ActorStates::addEntityStateGrabIn() const
        {
            return Ent::Gen::EntityStateGrabIn(addSubNode("EntityStateGrabIn"));
        }
        inline void ActorStates::removeEntityStateGrabIn() const
        {
            node->mapErase("EntityStateGrabIn");
        }
        inline std::optional<Ent::Gen::EntityStateGrabOut> ActorStates::EntityStateGrabOut() const
        {
            auto sub = getSubNode("EntityStateGrabOut");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGrabOut>{}: std::optional<Ent::Gen::EntityStateGrabOut>(getSubNode("EntityStateGrabOut"));
        }
        inline Ent::Gen::EntityStateGrabOut ActorStates::addEntityStateGrabOut() const
        {
            return Ent::Gen::EntityStateGrabOut(addSubNode("EntityStateGrabOut"));
        }
        inline void ActorStates::removeEntityStateGrabOut() const
        {
            node->mapErase("EntityStateGrabOut");
        }
        inline std::optional<Ent::Gen::EntityStateGrabbed> ActorStates::EntityStateGrabbed() const
        {
            auto sub = getSubNode("EntityStateGrabbed");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGrabbed>{}: std::optional<Ent::Gen::EntityStateGrabbed>(getSubNode("EntityStateGrabbed"));
        }
        inline Ent::Gen::EntityStateGrabbed ActorStates::addEntityStateGrabbed() const
        {
            return Ent::Gen::EntityStateGrabbed(addSubNode("EntityStateGrabbed"));
        }
        inline void ActorStates::removeEntityStateGrabbed() const
        {
            node->mapErase("EntityStateGrabbed");
        }
        inline std::optional<Ent::Gen::EntityStateGrabbedIn> ActorStates::EntityStateGrabbedIn() const
        {
            auto sub = getSubNode("EntityStateGrabbedIn");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGrabbedIn>{}: std::optional<Ent::Gen::EntityStateGrabbedIn>(getSubNode("EntityStateGrabbedIn"));
        }
        inline Ent::Gen::EntityStateGrabbedIn ActorStates::addEntityStateGrabbedIn() const
        {
            return Ent::Gen::EntityStateGrabbedIn(addSubNode("EntityStateGrabbedIn"));
        }
        inline void ActorStates::removeEntityStateGrabbedIn() const
        {
            node->mapErase("EntityStateGrabbedIn");
        }
        inline std::optional<Ent::Gen::EntityStateGrabbedOut> ActorStates::EntityStateGrabbedOut() const
        {
            auto sub = getSubNode("EntityStateGrabbedOut");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGrabbedOut>{}: std::optional<Ent::Gen::EntityStateGrabbedOut>(getSubNode("EntityStateGrabbedOut"));
        }
        inline Ent::Gen::EntityStateGrabbedOut ActorStates::addEntityStateGrabbedOut() const
        {
            return Ent::Gen::EntityStateGrabbedOut(addSubNode("EntityStateGrabbedOut"));
        }
        inline void ActorStates::removeEntityStateGrabbedOut() const
        {
            node->mapErase("EntityStateGrabbedOut");
        }
        inline std::optional<Ent::Gen::EntityStateGrasp> ActorStates::EntityStateGrasp() const
        {
            auto sub = getSubNode("EntityStateGrasp");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGrasp>{}: std::optional<Ent::Gen::EntityStateGrasp>(getSubNode("EntityStateGrasp"));
        }
        inline Ent::Gen::EntityStateGrasp ActorStates::addEntityStateGrasp() const
        {
            return Ent::Gen::EntityStateGrasp(addSubNode("EntityStateGrasp"));
        }
        inline void ActorStates::removeEntityStateGrasp() const
        {
            node->mapErase("EntityStateGrasp");
        }
        inline std::optional<Ent::Gen::EntityStateGroundedJump> ActorStates::EntityStateGroundedJump() const
        {
            auto sub = getSubNode("EntityStateGroundedJump");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateGroundedJump>{}: std::optional<Ent::Gen::EntityStateGroundedJump>(getSubNode("EntityStateGroundedJump"));
        }
        inline Ent::Gen::EntityStateGroundedJump ActorStates::addEntityStateGroundedJump() const
        {
            return Ent::Gen::EntityStateGroundedJump(addSubNode("EntityStateGroundedJump"));
        }
        inline void ActorStates::removeEntityStateGroundedJump() const
        {
            node->mapErase("EntityStateGroundedJump");
        }
        inline std::optional<Ent::Gen::EntityStateHide> ActorStates::EntityStateHide() const
        {
            auto sub = getSubNode("EntityStateHide");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateHide>{}: std::optional<Ent::Gen::EntityStateHide>(getSubNode("EntityStateHide"));
        }
        inline Ent::Gen::EntityStateHide ActorStates::addEntityStateHide() const
        {
            return Ent::Gen::EntityStateHide(addSubNode("EntityStateHide"));
        }
        inline void ActorStates::removeEntityStateHide() const
        {
            node->mapErase("EntityStateHide");
        }
        inline std::optional<Ent::Gen::EntityStateHideIn> ActorStates::EntityStateHideIn() const
        {
            auto sub = getSubNode("EntityStateHideIn");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateHideIn>{}: std::optional<Ent::Gen::EntityStateHideIn>(getSubNode("EntityStateHideIn"));
        }
        inline Ent::Gen::EntityStateHideIn ActorStates::addEntityStateHideIn() const
        {
            return Ent::Gen::EntityStateHideIn(addSubNode("EntityStateHideIn"));
        }
        inline void ActorStates::removeEntityStateHideIn() const
        {
            node->mapErase("EntityStateHideIn");
        }
        inline std::optional<Ent::Gen::EntityStateHideOut> ActorStates::EntityStateHideOut() const
        {
            auto sub = getSubNode("EntityStateHideOut");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateHideOut>{}: std::optional<Ent::Gen::EntityStateHideOut>(getSubNode("EntityStateHideOut"));
        }
        inline Ent::Gen::EntityStateHideOut ActorStates::addEntityStateHideOut() const
        {
            return Ent::Gen::EntityStateHideOut(addSubNode("EntityStateHideOut"));
        }
        inline void ActorStates::removeEntityStateHideOut() const
        {
            node->mapErase("EntityStateHideOut");
        }
        inline std::optional<Ent::Gen::EntityStateHintFull> ActorStates::EntityStateHintFull() const
        {
            auto sub = getSubNode("EntityStateHintFull");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateHintFull>{}: std::optional<Ent::Gen::EntityStateHintFull>(getSubNode("EntityStateHintFull"));
        }
        inline Ent::Gen::EntityStateHintFull ActorStates::addEntityStateHintFull() const
        {
            return Ent::Gen::EntityStateHintFull(addSubNode("EntityStateHintFull"));
        }
        inline void ActorStates::removeEntityStateHintFull() const
        {
            node->mapErase("EntityStateHintFull");
        }
        inline std::optional<Ent::Gen::EntityStateHintLight> ActorStates::EntityStateHintLight() const
        {
            auto sub = getSubNode("EntityStateHintLight");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateHintLight>{}: std::optional<Ent::Gen::EntityStateHintLight>(getSubNode("EntityStateHintLight"));
        }
        inline Ent::Gen::EntityStateHintLight ActorStates::addEntityStateHintLight() const
        {
            return Ent::Gen::EntityStateHintLight(addSubNode("EntityStateHintLight"));
        }
        inline void ActorStates::removeEntityStateHintLight() const
        {
            node->mapErase("EntityStateHintLight");
        }
        inline std::optional<Ent::Gen::EntityStateHintNone> ActorStates::EntityStateHintNone() const
        {
            auto sub = getSubNode("EntityStateHintNone");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateHintNone>{}: std::optional<Ent::Gen::EntityStateHintNone>(getSubNode("EntityStateHintNone"));
        }
        inline Ent::Gen::EntityStateHintNone ActorStates::addEntityStateHintNone() const
        {
            return Ent::Gen::EntityStateHintNone(addSubNode("EntityStateHintNone"));
        }
        inline void ActorStates::removeEntityStateHintNone() const
        {
            node->mapErase("EntityStateHintNone");
        }
        inline std::optional<Ent::Gen::EntityStateHitWall> ActorStates::EntityStateHitWall() const
        {
            auto sub = getSubNode("EntityStateHitWall");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateHitWall>{}: std::optional<Ent::Gen::EntityStateHitWall>(getSubNode("EntityStateHitWall"));
        }
        inline Ent::Gen::EntityStateHitWall ActorStates::addEntityStateHitWall() const
        {
            return Ent::Gen::EntityStateHitWall(addSubNode("EntityStateHitWall"));
        }
        inline void ActorStates::removeEntityStateHitWall() const
        {
            node->mapErase("EntityStateHitWall");
        }
        inline std::optional<Ent::Gen::EntityStateHoldingStaffVertebras> ActorStates::EntityStateHoldingStaffVertebras() const
        {
            auto sub = getSubNode("EntityStateHoldingStaffVertebras");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateHoldingStaffVertebras>{}: std::optional<Ent::Gen::EntityStateHoldingStaffVertebras>(getSubNode("EntityStateHoldingStaffVertebras"));
        }
        inline Ent::Gen::EntityStateHoldingStaffVertebras ActorStates::addEntityStateHoldingStaffVertebras() const
        {
            return Ent::Gen::EntityStateHoldingStaffVertebras(addSubNode("EntityStateHoldingStaffVertebras"));
        }
        inline void ActorStates::removeEntityStateHoldingStaffVertebras() const
        {
            node->mapErase("EntityStateHoldingStaffVertebras");
        }
        inline std::optional<Ent::Gen::EntityStateImmersedJump> ActorStates::EntityStateImmersedJump() const
        {
            auto sub = getSubNode("EntityStateImmersedJump");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateImmersedJump>{}: std::optional<Ent::Gen::EntityStateImmersedJump>(getSubNode("EntityStateImmersedJump"));
        }
        inline Ent::Gen::EntityStateImmersedJump ActorStates::addEntityStateImmersedJump() const
        {
            return Ent::Gen::EntityStateImmersedJump(addSubNode("EntityStateImmersedJump"));
        }
        inline void ActorStates::removeEntityStateImmersedJump() const
        {
            node->mapErase("EntityStateImmersedJump");
        }
        inline std::optional<Ent::Gen::EntityStateInVertebraeArea> ActorStates::EntityStateInVertebraeArea() const
        {
            auto sub = getSubNode("EntityStateInVertebraeArea");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateInVertebraeArea>{}: std::optional<Ent::Gen::EntityStateInVertebraeArea>(getSubNode("EntityStateInVertebraeArea"));
        }
        inline Ent::Gen::EntityStateInVertebraeArea ActorStates::addEntityStateInVertebraeArea() const
        {
            return Ent::Gen::EntityStateInVertebraeArea(addSubNode("EntityStateInVertebraeArea"));
        }
        inline void ActorStates::removeEntityStateInVertebraeArea() const
        {
            node->mapErase("EntityStateInVertebraeArea");
        }
        inline std::optional<Ent::Gen::EntityStateIncapacitated> ActorStates::EntityStateIncapacitated() const
        {
            auto sub = getSubNode("EntityStateIncapacitated");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateIncapacitated>{}: std::optional<Ent::Gen::EntityStateIncapacitated>(getSubNode("EntityStateIncapacitated"));
        }
        inline Ent::Gen::EntityStateIncapacitated ActorStates::addEntityStateIncapacitated() const
        {
            return Ent::Gen::EntityStateIncapacitated(addSubNode("EntityStateIncapacitated"));
        }
        inline void ActorStates::removeEntityStateIncapacitated() const
        {
            node->mapErase("EntityStateIncapacitated");
        }
        inline std::optional<Ent::Gen::EntityStateInconvertible> ActorStates::EntityStateInconvertible() const
        {
            auto sub = getSubNode("EntityStateInconvertible");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateInconvertible>{}: std::optional<Ent::Gen::EntityStateInconvertible>(getSubNode("EntityStateInconvertible"));
        }
        inline Ent::Gen::EntityStateInconvertible ActorStates::addEntityStateInconvertible() const
        {
            return Ent::Gen::EntityStateInconvertible(addSubNode("EntityStateInconvertible"));
        }
        inline void ActorStates::removeEntityStateInconvertible() const
        {
            node->mapErase("EntityStateInconvertible");
        }
        inline std::optional<Ent::Gen::EntityStateInjured> ActorStates::EntityStateInjured() const
        {
            auto sub = getSubNode("EntityStateInjured");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateInjured>{}: std::optional<Ent::Gen::EntityStateInjured>(getSubNode("EntityStateInjured"));
        }
        inline Ent::Gen::EntityStateInjured ActorStates::addEntityStateInjured() const
        {
            return Ent::Gen::EntityStateInjured(addSubNode("EntityStateInjured"));
        }
        inline void ActorStates::removeEntityStateInjured() const
        {
            node->mapErase("EntityStateInjured");
        }
        inline std::optional<Ent::Gen::EntityStateInteractedGPE> ActorStates::EntityStateInteractedGPE() const
        {
            auto sub = getSubNode("EntityStateInteractedGPE");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateInteractedGPE>{}: std::optional<Ent::Gen::EntityStateInteractedGPE>(getSubNode("EntityStateInteractedGPE"));
        }
        inline Ent::Gen::EntityStateInteractedGPE ActorStates::addEntityStateInteractedGPE() const
        {
            return Ent::Gen::EntityStateInteractedGPE(addSubNode("EntityStateInteractedGPE"));
        }
        inline void ActorStates::removeEntityStateInteractedGPE() const
        {
            node->mapErase("EntityStateInteractedGPE");
        }
        inline std::optional<Ent::Gen::EntityStateJumpHeightMultiplier> ActorStates::EntityStateJumpHeightMultiplier() const
        {
            auto sub = getSubNode("EntityStateJumpHeightMultiplier");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateJumpHeightMultiplier>{}: std::optional<Ent::Gen::EntityStateJumpHeightMultiplier>(getSubNode("EntityStateJumpHeightMultiplier"));
        }
        inline Ent::Gen::EntityStateJumpHeightMultiplier ActorStates::addEntityStateJumpHeightMultiplier() const
        {
            return Ent::Gen::EntityStateJumpHeightMultiplier(addSubNode("EntityStateJumpHeightMultiplier"));
        }
        inline void ActorStates::removeEntityStateJumpHeightMultiplier() const
        {
            node->mapErase("EntityStateJumpHeightMultiplier");
        }
        inline std::optional<Ent::Gen::EntityStateJustStarted> ActorStates::EntityStateJustStarted() const
        {
            auto sub = getSubNode("EntityStateJustStarted");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateJustStarted>{}: std::optional<Ent::Gen::EntityStateJustStarted>(getSubNode("EntityStateJustStarted"));
        }
        inline Ent::Gen::EntityStateJustStarted ActorStates::addEntityStateJustStarted() const
        {
            return Ent::Gen::EntityStateJustStarted(addSubNode("EntityStateJustStarted"));
        }
        inline void ActorStates::removeEntityStateJustStarted() const
        {
            node->mapErase("EntityStateJustStarted");
        }
        inline std::optional<Ent::Gen::EntityStateLateralDodge> ActorStates::EntityStateLateralDodge() const
        {
            auto sub = getSubNode("EntityStateLateralDodge");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateLateralDodge>{}: std::optional<Ent::Gen::EntityStateLateralDodge>(getSubNode("EntityStateLateralDodge"));
        }
        inline Ent::Gen::EntityStateLateralDodge ActorStates::addEntityStateLateralDodge() const
        {
            return Ent::Gen::EntityStateLateralDodge(addSubNode("EntityStateLateralDodge"));
        }
        inline void ActorStates::removeEntityStateLateralDodge() const
        {
            node->mapErase("EntityStateLateralDodge");
        }
        inline std::optional<Ent::Gen::EntityStateLateralLand> ActorStates::EntityStateLateralLand() const
        {
            auto sub = getSubNode("EntityStateLateralLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateLateralLand>{}: std::optional<Ent::Gen::EntityStateLateralLand>(getSubNode("EntityStateLateralLand"));
        }
        inline Ent::Gen::EntityStateLateralLand ActorStates::addEntityStateLateralLand() const
        {
            return Ent::Gen::EntityStateLateralLand(addSubNode("EntityStateLateralLand"));
        }
        inline void ActorStates::removeEntityStateLateralLand() const
        {
            node->mapErase("EntityStateLateralLand");
        }
        inline std::optional<Ent::Gen::EntityStateManageChildEntityPool> ActorStates::EntityStateManageChildEntityPool() const
        {
            auto sub = getSubNode("EntityStateManageChildEntityPool");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateManageChildEntityPool>{}: std::optional<Ent::Gen::EntityStateManageChildEntityPool>(getSubNode("EntityStateManageChildEntityPool"));
        }
        inline Ent::Gen::EntityStateManageChildEntityPool ActorStates::addEntityStateManageChildEntityPool() const
        {
            return Ent::Gen::EntityStateManageChildEntityPool(addSubNode("EntityStateManageChildEntityPool"));
        }
        inline void ActorStates::removeEntityStateManageChildEntityPool() const
        {
            node->mapErase("EntityStateManageChildEntityPool");
        }
        inline std::optional<Ent::Gen::EntityStateMask> ActorStates::EntityStateMask() const
        {
            auto sub = getSubNode("EntityStateMask");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateMask>{}: std::optional<Ent::Gen::EntityStateMask>(getSubNode("EntityStateMask"));
        }
        inline Ent::Gen::EntityStateMask ActorStates::addEntityStateMask() const
        {
            return Ent::Gen::EntityStateMask(addSubNode("EntityStateMask"));
        }
        inline void ActorStates::removeEntityStateMask() const
        {
            node->mapErase("EntityStateMask");
        }
        inline std::optional<Ent::Gen::EntityStateMeditateToInteract> ActorStates::EntityStateMeditateToInteract() const
        {
            auto sub = getSubNode("EntityStateMeditateToInteract");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateMeditateToInteract>{}: std::optional<Ent::Gen::EntityStateMeditateToInteract>(getSubNode("EntityStateMeditateToInteract"));
        }
        inline Ent::Gen::EntityStateMeditateToInteract ActorStates::addEntityStateMeditateToInteract() const
        {
            return Ent::Gen::EntityStateMeditateToInteract(addSubNode("EntityStateMeditateToInteract"));
        }
        inline void ActorStates::removeEntityStateMeditateToInteract() const
        {
            node->mapErase("EntityStateMeditateToInteract");
        }
        inline std::optional<Ent::Gen::EntityStateMineRespawning> ActorStates::EntityStateMineRespawning() const
        {
            auto sub = getSubNode("EntityStateMineRespawning");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateMineRespawning>{}: std::optional<Ent::Gen::EntityStateMineRespawning>(getSubNode("EntityStateMineRespawning"));
        }
        inline Ent::Gen::EntityStateMineRespawning ActorStates::addEntityStateMineRespawning() const
        {
            return Ent::Gen::EntityStateMineRespawning(addSubNode("EntityStateMineRespawning"));
        }
        inline void ActorStates::removeEntityStateMineRespawning() const
        {
            node->mapErase("EntityStateMineRespawning");
        }
        inline std::optional<Ent::Gen::EntityStateMineScaling> ActorStates::EntityStateMineScaling() const
        {
            auto sub = getSubNode("EntityStateMineScaling");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateMineScaling>{}: std::optional<Ent::Gen::EntityStateMineScaling>(getSubNode("EntityStateMineScaling"));
        }
        inline Ent::Gen::EntityStateMineScaling ActorStates::addEntityStateMineScaling() const
        {
            return Ent::Gen::EntityStateMineScaling(addSubNode("EntityStateMineScaling"));
        }
        inline void ActorStates::removeEntityStateMineScaling() const
        {
            node->mapErase("EntityStateMineScaling");
        }
        inline std::optional<Ent::Gen::EntityStateMotionConstrained> ActorStates::EntityStateMotionConstrained() const
        {
            auto sub = getSubNode("EntityStateMotionConstrained");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateMotionConstrained>{}: std::optional<Ent::Gen::EntityStateMotionConstrained>(getSubNode("EntityStateMotionConstrained"));
        }
        inline Ent::Gen::EntityStateMotionConstrained ActorStates::addEntityStateMotionConstrained() const
        {
            return Ent::Gen::EntityStateMotionConstrained(addSubNode("EntityStateMotionConstrained"));
        }
        inline void ActorStates::removeEntityStateMotionConstrained() const
        {
            node->mapErase("EntityStateMotionConstrained");
        }
        inline std::optional<Ent::Gen::EntityStateMotionConstrainedLand> ActorStates::EntityStateMotionConstrainedLand() const
        {
            auto sub = getSubNode("EntityStateMotionConstrainedLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateMotionConstrainedLand>{}: std::optional<Ent::Gen::EntityStateMotionConstrainedLand>(getSubNode("EntityStateMotionConstrainedLand"));
        }
        inline Ent::Gen::EntityStateMotionConstrainedLand ActorStates::addEntityStateMotionConstrainedLand() const
        {
            return Ent::Gen::EntityStateMotionConstrainedLand(addSubNode("EntityStateMotionConstrainedLand"));
        }
        inline void ActorStates::removeEntityStateMotionConstrainedLand() const
        {
            node->mapErase("EntityStateMotionConstrainedLand");
        }
        inline std::optional<Ent::Gen::EntityStateMoveOnOffMeshLink> ActorStates::EntityStateMoveOnOffMeshLink() const
        {
            auto sub = getSubNode("EntityStateMoveOnOffMeshLink");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateMoveOnOffMeshLink>{}: std::optional<Ent::Gen::EntityStateMoveOnOffMeshLink>(getSubNode("EntityStateMoveOnOffMeshLink"));
        }
        inline Ent::Gen::EntityStateMoveOnOffMeshLink ActorStates::addEntityStateMoveOnOffMeshLink() const
        {
            return Ent::Gen::EntityStateMoveOnOffMeshLink(addSubNode("EntityStateMoveOnOffMeshLink"));
        }
        inline void ActorStates::removeEntityStateMoveOnOffMeshLink() const
        {
            node->mapErase("EntityStateMoveOnOffMeshLink");
        }
        inline std::optional<Ent::Gen::EntityStateOrderingAttack> ActorStates::EntityStateOrderingAttack() const
        {
            auto sub = getSubNode("EntityStateOrderingAttack");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateOrderingAttack>{}: std::optional<Ent::Gen::EntityStateOrderingAttack>(getSubNode("EntityStateOrderingAttack"));
        }
        inline Ent::Gen::EntityStateOrderingAttack ActorStates::addEntityStateOrderingAttack() const
        {
            return Ent::Gen::EntityStateOrderingAttack(addSubNode("EntityStateOrderingAttack"));
        }
        inline void ActorStates::removeEntityStateOrderingAttack() const
        {
            node->mapErase("EntityStateOrderingAttack");
        }
        inline std::optional<Ent::Gen::EntityStateOrientedDrift> ActorStates::EntityStateOrientedDrift() const
        {
            auto sub = getSubNode("EntityStateOrientedDrift");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateOrientedDrift>{}: std::optional<Ent::Gen::EntityStateOrientedDrift>(getSubNode("EntityStateOrientedDrift"));
        }
        inline Ent::Gen::EntityStateOrientedDrift ActorStates::addEntityStateOrientedDrift() const
        {
            return Ent::Gen::EntityStateOrientedDrift(addSubNode("EntityStateOrientedDrift"));
        }
        inline void ActorStates::removeEntityStateOrientedDrift() const
        {
            node->mapErase("EntityStateOrientedDrift");
        }
        inline std::optional<Ent::Gen::EntityStateParried> ActorStates::EntityStateParried() const
        {
            auto sub = getSubNode("EntityStateParried");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateParried>{}: std::optional<Ent::Gen::EntityStateParried>(getSubNode("EntityStateParried"));
        }
        inline Ent::Gen::EntityStateParried ActorStates::addEntityStateParried() const
        {
            return Ent::Gen::EntityStateParried(addSubNode("EntityStateParried"));
        }
        inline void ActorStates::removeEntityStateParried() const
        {
            node->mapErase("EntityStateParried");
        }
        inline std::optional<Ent::Gen::EntityStateParry> ActorStates::EntityStateParry() const
        {
            auto sub = getSubNode("EntityStateParry");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateParry>{}: std::optional<Ent::Gen::EntityStateParry>(getSubNode("EntityStateParry"));
        }
        inline Ent::Gen::EntityStateParry ActorStates::addEntityStateParry() const
        {
            return Ent::Gen::EntityStateParry(addSubNode("EntityStateParry"));
        }
        inline void ActorStates::removeEntityStateParry() const
        {
            node->mapErase("EntityStateParry");
        }
        inline std::optional<Ent::Gen::EntityStateParryCooldown> ActorStates::EntityStateParryCooldown() const
        {
            auto sub = getSubNode("EntityStateParryCooldown");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateParryCooldown>{}: std::optional<Ent::Gen::EntityStateParryCooldown>(getSubNode("EntityStateParryCooldown"));
        }
        inline Ent::Gen::EntityStateParryCooldown ActorStates::addEntityStateParryCooldown() const
        {
            return Ent::Gen::EntityStateParryCooldown(addSubNode("EntityStateParryCooldown"));
        }
        inline void ActorStates::removeEntityStateParryCooldown() const
        {
            node->mapErase("EntityStateParryCooldown");
        }
        inline std::optional<Ent::Gen::EntityStatePhysicsIdle> ActorStates::EntityStatePhysicsIdle() const
        {
            auto sub = getSubNode("EntityStatePhysicsIdle");
            return sub == nullptr? std::optional<Ent::Gen::EntityStatePhysicsIdle>{}: std::optional<Ent::Gen::EntityStatePhysicsIdle>(getSubNode("EntityStatePhysicsIdle"));
        }
        inline Ent::Gen::EntityStatePhysicsIdle ActorStates::addEntityStatePhysicsIdle() const
        {
            return Ent::Gen::EntityStatePhysicsIdle(addSubNode("EntityStatePhysicsIdle"));
        }
        inline void ActorStates::removeEntityStatePhysicsIdle() const
        {
            node->mapErase("EntityStatePhysicsIdle");
        }
        inline std::optional<Ent::Gen::EntityStatePhysicsMove> ActorStates::EntityStatePhysicsMove() const
        {
            auto sub = getSubNode("EntityStatePhysicsMove");
            return sub == nullptr? std::optional<Ent::Gen::EntityStatePhysicsMove>{}: std::optional<Ent::Gen::EntityStatePhysicsMove>(getSubNode("EntityStatePhysicsMove"));
        }
        inline Ent::Gen::EntityStatePhysicsMove ActorStates::addEntityStatePhysicsMove() const
        {
            return Ent::Gen::EntityStatePhysicsMove(addSubNode("EntityStatePhysicsMove"));
        }
        inline void ActorStates::removeEntityStatePhysicsMove() const
        {
            node->mapErase("EntityStatePhysicsMove");
        }
        inline std::optional<Ent::Gen::EntityStatePickableDistributor> ActorStates::EntityStatePickableDistributor() const
        {
            auto sub = getSubNode("EntityStatePickableDistributor");
            return sub == nullptr? std::optional<Ent::Gen::EntityStatePickableDistributor>{}: std::optional<Ent::Gen::EntityStatePickableDistributor>(getSubNode("EntityStatePickableDistributor"));
        }
        inline Ent::Gen::EntityStatePickableDistributor ActorStates::addEntityStatePickableDistributor() const
        {
            return Ent::Gen::EntityStatePickableDistributor(addSubNode("EntityStatePickableDistributor"));
        }
        inline void ActorStates::removeEntityStatePickableDistributor() const
        {
            node->mapErase("EntityStatePickableDistributor");
        }
        inline std::optional<Ent::Gen::EntityStatePlayer> ActorStates::EntityStatePlayer() const
        {
            auto sub = getSubNode("EntityStatePlayer");
            return sub == nullptr? std::optional<Ent::Gen::EntityStatePlayer>{}: std::optional<Ent::Gen::EntityStatePlayer>(getSubNode("EntityStatePlayer"));
        }
        inline Ent::Gen::EntityStatePlayer ActorStates::addEntityStatePlayer() const
        {
            return Ent::Gen::EntityStatePlayer(addSubNode("EntityStatePlayer"));
        }
        inline void ActorStates::removeEntityStatePlayer() const
        {
            node->mapErase("EntityStatePlayer");
        }
        inline std::optional<Ent::Gen::EntityStatePlungeLand> ActorStates::EntityStatePlungeLand() const
        {
            auto sub = getSubNode("EntityStatePlungeLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStatePlungeLand>{}: std::optional<Ent::Gen::EntityStatePlungeLand>(getSubNode("EntityStatePlungeLand"));
        }
        inline Ent::Gen::EntityStatePlungeLand ActorStates::addEntityStatePlungeLand() const
        {
            return Ent::Gen::EntityStatePlungeLand(addSubNode("EntityStatePlungeLand"));
        }
        inline void ActorStates::removeEntityStatePlungeLand() const
        {
            node->mapErase("EntityStatePlungeLand");
        }
        inline std::optional<Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh> ActorStates::EntityStatePrepareToHoldingOnToNavigationMesh() const
        {
            auto sub = getSubNode("EntityStatePrepareToHoldingOnToNavigationMesh");
            return sub == nullptr? std::optional<Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh>{}: std::optional<Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh>(getSubNode("EntityStatePrepareToHoldingOnToNavigationMesh"));
        }
        inline Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh ActorStates::addEntityStatePrepareToHoldingOnToNavigationMesh() const
        {
            return Ent::Gen::EntityStatePrepareToHoldingOnToNavigationMesh(addSubNode("EntityStatePrepareToHoldingOnToNavigationMesh"));
        }
        inline void ActorStates::removeEntityStatePrepareToHoldingOnToNavigationMesh() const
        {
            node->mapErase("EntityStatePrepareToHoldingOnToNavigationMesh");
        }
        inline std::optional<Ent::Gen::EntityStateRaise> ActorStates::EntityStateRaise() const
        {
            auto sub = getSubNode("EntityStateRaise");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateRaise>{}: std::optional<Ent::Gen::EntityStateRaise>(getSubNode("EntityStateRaise"));
        }
        inline Ent::Gen::EntityStateRaise ActorStates::addEntityStateRaise() const
        {
            return Ent::Gen::EntityStateRaise(addSubNode("EntityStateRaise"));
        }
        inline void ActorStates::removeEntityStateRaise() const
        {
            node->mapErase("EntityStateRaise");
        }
        inline std::optional<Ent::Gen::EntityStateReadyToGiveOrder> ActorStates::EntityStateReadyToGiveOrder() const
        {
            auto sub = getSubNode("EntityStateReadyToGiveOrder");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateReadyToGiveOrder>{}: std::optional<Ent::Gen::EntityStateReadyToGiveOrder>(getSubNode("EntityStateReadyToGiveOrder"));
        }
        inline Ent::Gen::EntityStateReadyToGiveOrder ActorStates::addEntityStateReadyToGiveOrder() const
        {
            return Ent::Gen::EntityStateReadyToGiveOrder(addSubNode("EntityStateReadyToGiveOrder"));
        }
        inline void ActorStates::removeEntityStateReadyToGiveOrder() const
        {
            node->mapErase("EntityStateReadyToGiveOrder");
        }
        inline std::optional<Ent::Gen::EntityStateRecoverLand> ActorStates::EntityStateRecoverLand() const
        {
            auto sub = getSubNode("EntityStateRecoverLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateRecoverLand>{}: std::optional<Ent::Gen::EntityStateRecoverLand>(getSubNode("EntityStateRecoverLand"));
        }
        inline Ent::Gen::EntityStateRecoverLand ActorStates::addEntityStateRecoverLand() const
        {
            return Ent::Gen::EntityStateRecoverLand(addSubNode("EntityStateRecoverLand"));
        }
        inline void ActorStates::removeEntityStateRecoverLand() const
        {
            node->mapErase("EntityStateRecoverLand");
        }
        inline std::optional<Ent::Gen::EntityStateRegainCapacity> ActorStates::EntityStateRegainCapacity() const
        {
            auto sub = getSubNode("EntityStateRegainCapacity");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateRegainCapacity>{}: std::optional<Ent::Gen::EntityStateRegainCapacity>(getSubNode("EntityStateRegainCapacity"));
        }
        inline Ent::Gen::EntityStateRegainCapacity ActorStates::addEntityStateRegainCapacity() const
        {
            return Ent::Gen::EntityStateRegainCapacity(addSubNode("EntityStateRegainCapacity"));
        }
        inline void ActorStates::removeEntityStateRegainCapacity() const
        {
            node->mapErase("EntityStateRegainCapacity");
        }
        inline std::optional<Ent::Gen::EntityStateReserveMountSlots> ActorStates::EntityStateReserveMountSlots() const
        {
            auto sub = getSubNode("EntityStateReserveMountSlots");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateReserveMountSlots>{}: std::optional<Ent::Gen::EntityStateReserveMountSlots>(getSubNode("EntityStateReserveMountSlots"));
        }
        inline Ent::Gen::EntityStateReserveMountSlots ActorStates::addEntityStateReserveMountSlots() const
        {
            return Ent::Gen::EntityStateReserveMountSlots(addSubNode("EntityStateReserveMountSlots"));
        }
        inline void ActorStates::removeEntityStateReserveMountSlots() const
        {
            node->mapErase("EntityStateReserveMountSlots");
        }
        inline std::optional<Ent::Gen::EntityStateRespawn> ActorStates::EntityStateRespawn() const
        {
            auto sub = getSubNode("EntityStateRespawn");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateRespawn>{}: std::optional<Ent::Gen::EntityStateRespawn>(getSubNode("EntityStateRespawn"));
        }
        inline Ent::Gen::EntityStateRespawn ActorStates::addEntityStateRespawn() const
        {
            return Ent::Gen::EntityStateRespawn(addSubNode("EntityStateRespawn"));
        }
        inline void ActorStates::removeEntityStateRespawn() const
        {
            node->mapErase("EntityStateRespawn");
        }
        inline std::optional<Ent::Gen::EntityStateRespawnability> ActorStates::EntityStateRespawnability() const
        {
            auto sub = getSubNode("EntityStateRespawnability");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateRespawnability>{}: std::optional<Ent::Gen::EntityStateRespawnability>(getSubNode("EntityStateRespawnability"));
        }
        inline Ent::Gen::EntityStateRespawnability ActorStates::addEntityStateRespawnability() const
        {
            return Ent::Gen::EntityStateRespawnability(addSubNode("EntityStateRespawnability"));
        }
        inline void ActorStates::removeEntityStateRespawnability() const
        {
            node->mapErase("EntityStateRespawnability");
        }
        inline std::optional<Ent::Gen::EntityStateRevive> ActorStates::EntityStateRevive() const
        {
            auto sub = getSubNode("EntityStateRevive");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateRevive>{}: std::optional<Ent::Gen::EntityStateRevive>(getSubNode("EntityStateRevive"));
        }
        inline Ent::Gen::EntityStateRevive ActorStates::addEntityStateRevive() const
        {
            return Ent::Gen::EntityStateRevive(addSubNode("EntityStateRevive"));
        }
        inline void ActorStates::removeEntityStateRevive() const
        {
            node->mapErase("EntityStateRevive");
        }
        inline std::optional<Ent::Gen::EntityStateSavePointActivated> ActorStates::EntityStateSavePointActivated() const
        {
            auto sub = getSubNode("EntityStateSavePointActivated");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSavePointActivated>{}: std::optional<Ent::Gen::EntityStateSavePointActivated>(getSubNode("EntityStateSavePointActivated"));
        }
        inline Ent::Gen::EntityStateSavePointActivated ActorStates::addEntityStateSavePointActivated() const
        {
            return Ent::Gen::EntityStateSavePointActivated(addSubNode("EntityStateSavePointActivated"));
        }
        inline void ActorStates::removeEntityStateSavePointActivated() const
        {
            node->mapErase("EntityStateSavePointActivated");
        }
        inline std::optional<Ent::Gen::EntityStateSetSavePoint> ActorStates::EntityStateSetSavePoint() const
        {
            auto sub = getSubNode("EntityStateSetSavePoint");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSetSavePoint>{}: std::optional<Ent::Gen::EntityStateSetSavePoint>(getSubNode("EntityStateSetSavePoint"));
        }
        inline Ent::Gen::EntityStateSetSavePoint ActorStates::addEntityStateSetSavePoint() const
        {
            return Ent::Gen::EntityStateSetSavePoint(addSubNode("EntityStateSetSavePoint"));
        }
        inline void ActorStates::removeEntityStateSetSavePoint() const
        {
            node->mapErase("EntityStateSetSavePoint");
        }
        inline std::optional<Ent::Gen::EntityStateShootHatchingEnergy> ActorStates::EntityStateShootHatchingEnergy() const
        {
            auto sub = getSubNode("EntityStateShootHatchingEnergy");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateShootHatchingEnergy>{}: std::optional<Ent::Gen::EntityStateShootHatchingEnergy>(getSubNode("EntityStateShootHatchingEnergy"));
        }
        inline Ent::Gen::EntityStateShootHatchingEnergy ActorStates::addEntityStateShootHatchingEnergy() const
        {
            return Ent::Gen::EntityStateShootHatchingEnergy(addSubNode("EntityStateShootHatchingEnergy"));
        }
        inline void ActorStates::removeEntityStateShootHatchingEnergy() const
        {
            node->mapErase("EntityStateShootHatchingEnergy");
        }
        inline std::optional<Ent::Gen::EntityStateSlowMotion> ActorStates::EntityStateSlowMotion() const
        {
            auto sub = getSubNode("EntityStateSlowMotion");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSlowMotion>{}: std::optional<Ent::Gen::EntityStateSlowMotion>(getSubNode("EntityStateSlowMotion"));
        }
        inline Ent::Gen::EntityStateSlowMotion ActorStates::addEntityStateSlowMotion() const
        {
            return Ent::Gen::EntityStateSlowMotion(addSubNode("EntityStateSlowMotion"));
        }
        inline void ActorStates::removeEntityStateSlowMotion() const
        {
            node->mapErase("EntityStateSlowMotion");
        }
        inline std::optional<Ent::Gen::EntityStateSnappedToHatchingTarget> ActorStates::EntityStateSnappedToHatchingTarget() const
        {
            auto sub = getSubNode("EntityStateSnappedToHatchingTarget");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSnappedToHatchingTarget>{}: std::optional<Ent::Gen::EntityStateSnappedToHatchingTarget>(getSubNode("EntityStateSnappedToHatchingTarget"));
        }
        inline Ent::Gen::EntityStateSnappedToHatchingTarget ActorStates::addEntityStateSnappedToHatchingTarget() const
        {
            return Ent::Gen::EntityStateSnappedToHatchingTarget(addSubNode("EntityStateSnappedToHatchingTarget"));
        }
        inline void ActorStates::removeEntityStateSnappedToHatchingTarget() const
        {
            node->mapErase("EntityStateSnappedToHatchingTarget");
        }
        inline std::optional<Ent::Gen::EntityStateSoftCollide> ActorStates::EntityStateSoftCollide() const
        {
            auto sub = getSubNode("EntityStateSoftCollide");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSoftCollide>{}: std::optional<Ent::Gen::EntityStateSoftCollide>(getSubNode("EntityStateSoftCollide"));
        }
        inline Ent::Gen::EntityStateSoftCollide ActorStates::addEntityStateSoftCollide() const
        {
            return Ent::Gen::EntityStateSoftCollide(addSubNode("EntityStateSoftCollide"));
        }
        inline void ActorStates::removeEntityStateSoftCollide() const
        {
            node->mapErase("EntityStateSoftCollide");
        }
        inline std::optional<Ent::Gen::EntityStateSpeedLimiter> ActorStates::EntityStateSpeedLimiter() const
        {
            auto sub = getSubNode("EntityStateSpeedLimiter");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSpeedLimiter>{}: std::optional<Ent::Gen::EntityStateSpeedLimiter>(getSubNode("EntityStateSpeedLimiter"));
        }
        inline Ent::Gen::EntityStateSpeedLimiter ActorStates::addEntityStateSpeedLimiter() const
        {
            return Ent::Gen::EntityStateSpeedLimiter(addSubNode("EntityStateSpeedLimiter"));
        }
        inline void ActorStates::removeEntityStateSpeedLimiter() const
        {
            node->mapErase("EntityStateSpeedLimiter");
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAnimalBeingCalled> ActorStates::EntityStateSpiritAnimalBeingCalled() const
        {
            auto sub = getSubNode("EntityStateSpiritAnimalBeingCalled");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSpiritAnimalBeingCalled>{}: std::optional<Ent::Gen::EntityStateSpiritAnimalBeingCalled>(getSubNode("EntityStateSpiritAnimalBeingCalled"));
        }
        inline Ent::Gen::EntityStateSpiritAnimalBeingCalled ActorStates::addEntityStateSpiritAnimalBeingCalled() const
        {
            return Ent::Gen::EntityStateSpiritAnimalBeingCalled(addSubNode("EntityStateSpiritAnimalBeingCalled"));
        }
        inline void ActorStates::removeEntityStateSpiritAnimalBeingCalled() const
        {
            node->mapErase("EntityStateSpiritAnimalBeingCalled");
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAnimalFleshForm> ActorStates::EntityStateSpiritAnimalFleshForm() const
        {
            auto sub = getSubNode("EntityStateSpiritAnimalFleshForm");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSpiritAnimalFleshForm>{}: std::optional<Ent::Gen::EntityStateSpiritAnimalFleshForm>(getSubNode("EntityStateSpiritAnimalFleshForm"));
        }
        inline Ent::Gen::EntityStateSpiritAnimalFleshForm ActorStates::addEntityStateSpiritAnimalFleshForm() const
        {
            return Ent::Gen::EntityStateSpiritAnimalFleshForm(addSubNode("EntityStateSpiritAnimalFleshForm"));
        }
        inline void ActorStates::removeEntityStateSpiritAnimalFleshForm() const
        {
            node->mapErase("EntityStateSpiritAnimalFleshForm");
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAnimalSoulForm> ActorStates::EntityStateSpiritAnimalSoulForm() const
        {
            auto sub = getSubNode("EntityStateSpiritAnimalSoulForm");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSpiritAnimalSoulForm>{}: std::optional<Ent::Gen::EntityStateSpiritAnimalSoulForm>(getSubNode("EntityStateSpiritAnimalSoulForm"));
        }
        inline Ent::Gen::EntityStateSpiritAnimalSoulForm ActorStates::addEntityStateSpiritAnimalSoulForm() const
        {
            return Ent::Gen::EntityStateSpiritAnimalSoulForm(addSubNode("EntityStateSpiritAnimalSoulForm"));
        }
        inline void ActorStates::removeEntityStateSpiritAnimalSoulForm() const
        {
            node->mapErase("EntityStateSpiritAnimalSoulForm");
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAttack> ActorStates::EntityStateSpiritAttack() const
        {
            auto sub = getSubNode("EntityStateSpiritAttack");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSpiritAttack>{}: std::optional<Ent::Gen::EntityStateSpiritAttack>(getSubNode("EntityStateSpiritAttack"));
        }
        inline Ent::Gen::EntityStateSpiritAttack ActorStates::addEntityStateSpiritAttack() const
        {
            return Ent::Gen::EntityStateSpiritAttack(addSubNode("EntityStateSpiritAttack"));
        }
        inline void ActorStates::removeEntityStateSpiritAttack() const
        {
            node->mapErase("EntityStateSpiritAttack");
        }
        inline std::optional<Ent::Gen::EntityStateSpiritAttacked> ActorStates::EntityStateSpiritAttacked() const
        {
            auto sub = getSubNode("EntityStateSpiritAttacked");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSpiritAttacked>{}: std::optional<Ent::Gen::EntityStateSpiritAttacked>(getSubNode("EntityStateSpiritAttacked"));
        }
        inline Ent::Gen::EntityStateSpiritAttacked ActorStates::addEntityStateSpiritAttacked() const
        {
            return Ent::Gen::EntityStateSpiritAttacked(addSubNode("EntityStateSpiritAttacked"));
        }
        inline void ActorStates::removeEntityStateSpiritAttacked() const
        {
            node->mapErase("EntityStateSpiritAttacked");
        }
        inline std::optional<Ent::Gen::EntityStateSpiritShrineDisabled> ActorStates::EntityStateSpiritShrineDisabled() const
        {
            auto sub = getSubNode("EntityStateSpiritShrineDisabled");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSpiritShrineDisabled>{}: std::optional<Ent::Gen::EntityStateSpiritShrineDisabled>(getSubNode("EntityStateSpiritShrineDisabled"));
        }
        inline Ent::Gen::EntityStateSpiritShrineDisabled ActorStates::addEntityStateSpiritShrineDisabled() const
        {
            return Ent::Gen::EntityStateSpiritShrineDisabled(addSubNode("EntityStateSpiritShrineDisabled"));
        }
        inline void ActorStates::removeEntityStateSpiritShrineDisabled() const
        {
            node->mapErase("EntityStateSpiritShrineDisabled");
        }
        inline std::optional<Ent::Gen::EntityStateSpiritShrineEnabled> ActorStates::EntityStateSpiritShrineEnabled() const
        {
            auto sub = getSubNode("EntityStateSpiritShrineEnabled");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateSpiritShrineEnabled>{}: std::optional<Ent::Gen::EntityStateSpiritShrineEnabled>(getSubNode("EntityStateSpiritShrineEnabled"));
        }
        inline Ent::Gen::EntityStateSpiritShrineEnabled ActorStates::addEntityStateSpiritShrineEnabled() const
        {
            return Ent::Gen::EntityStateSpiritShrineEnabled(addSubNode("EntityStateSpiritShrineEnabled"));
        }
        inline void ActorStates::removeEntityStateSpiritShrineEnabled() const
        {
            node->mapErase("EntityStateSpiritShrineEnabled");
        }
        inline std::optional<Ent::Gen::EntityStateStaffOwnedVertebras> ActorStates::EntityStateStaffOwnedVertebras() const
        {
            auto sub = getSubNode("EntityStateStaffOwnedVertebras");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStaffOwnedVertebras>{}: std::optional<Ent::Gen::EntityStateStaffOwnedVertebras>(getSubNode("EntityStateStaffOwnedVertebras"));
        }
        inline Ent::Gen::EntityStateStaffOwnedVertebras ActorStates::addEntityStateStaffOwnedVertebras() const
        {
            return Ent::Gen::EntityStateStaffOwnedVertebras(addSubNode("EntityStateStaffOwnedVertebras"));
        }
        inline void ActorStates::removeEntityStateStaffOwnedVertebras() const
        {
            node->mapErase("EntityStateStaffOwnedVertebras");
        }
        inline std::optional<Ent::Gen::EntityStateStaffVertebrasAutoRefill> ActorStates::EntityStateStaffVertebrasAutoRefill() const
        {
            auto sub = getSubNode("EntityStateStaffVertebrasAutoRefill");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStaffVertebrasAutoRefill>{}: std::optional<Ent::Gen::EntityStateStaffVertebrasAutoRefill>(getSubNode("EntityStateStaffVertebrasAutoRefill"));
        }
        inline Ent::Gen::EntityStateStaffVertebrasAutoRefill ActorStates::addEntityStateStaffVertebrasAutoRefill() const
        {
            return Ent::Gen::EntityStateStaffVertebrasAutoRefill(addSubNode("EntityStateStaffVertebrasAutoRefill"));
        }
        inline void ActorStates::removeEntityStateStaffVertebrasAutoRefill() const
        {
            node->mapErase("EntityStateStaffVertebrasAutoRefill");
        }
        inline std::optional<Ent::Gen::EntityStateStalactiteFallen> ActorStates::EntityStateStalactiteFallen() const
        {
            auto sub = getSubNode("EntityStateStalactiteFallen");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStalactiteFallen>{}: std::optional<Ent::Gen::EntityStateStalactiteFallen>(getSubNode("EntityStateStalactiteFallen"));
        }
        inline Ent::Gen::EntityStateStalactiteFallen ActorStates::addEntityStateStalactiteFallen() const
        {
            return Ent::Gen::EntityStateStalactiteFallen(addSubNode("EntityStateStalactiteFallen"));
        }
        inline void ActorStates::removeEntityStateStalactiteFallen() const
        {
            node->mapErase("EntityStateStalactiteFallen");
        }
        inline std::optional<Ent::Gen::EntityStateStalactiteReadyToFall> ActorStates::EntityStateStalactiteReadyToFall() const
        {
            auto sub = getSubNode("EntityStateStalactiteReadyToFall");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStalactiteReadyToFall>{}: std::optional<Ent::Gen::EntityStateStalactiteReadyToFall>(getSubNode("EntityStateStalactiteReadyToFall"));
        }
        inline Ent::Gen::EntityStateStalactiteReadyToFall ActorStates::addEntityStateStalactiteReadyToFall() const
        {
            return Ent::Gen::EntityStateStalactiteReadyToFall(addSubNode("EntityStateStalactiteReadyToFall"));
        }
        inline void ActorStates::removeEntityStateStalactiteReadyToFall() const
        {
            node->mapErase("EntityStateStalactiteReadyToFall");
        }
        inline std::optional<Ent::Gen::EntityStateStickedLand> ActorStates::EntityStateStickedLand() const
        {
            auto sub = getSubNode("EntityStateStickedLand");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStickedLand>{}: std::optional<Ent::Gen::EntityStateStickedLand>(getSubNode("EntityStateStickedLand"));
        }
        inline Ent::Gen::EntityStateStickedLand ActorStates::addEntityStateStickedLand() const
        {
            return Ent::Gen::EntityStateStickedLand(addSubNode("EntityStateStickedLand"));
        }
        inline void ActorStates::removeEntityStateStickedLand() const
        {
            node->mapErase("EntityStateStickedLand");
        }
        inline std::optional<Ent::Gen::EntityStateStrafeDodge> ActorStates::EntityStateStrafeDodge() const
        {
            auto sub = getSubNode("EntityStateStrafeDodge");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStrafeDodge>{}: std::optional<Ent::Gen::EntityStateStrafeDodge>(getSubNode("EntityStateStrafeDodge"));
        }
        inline Ent::Gen::EntityStateStrafeDodge ActorStates::addEntityStateStrafeDodge() const
        {
            return Ent::Gen::EntityStateStrafeDodge(addSubNode("EntityStateStrafeDodge"));
        }
        inline void ActorStates::removeEntityStateStrafeDodge() const
        {
            node->mapErase("EntityStateStrafeDodge");
        }
        inline std::optional<Ent::Gen::EntityStateStrongAttack> ActorStates::EntityStateStrongAttack() const
        {
            auto sub = getSubNode("EntityStateStrongAttack");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStrongAttack>{}: std::optional<Ent::Gen::EntityStateStrongAttack>(getSubNode("EntityStateStrongAttack"));
        }
        inline Ent::Gen::EntityStateStrongAttack ActorStates::addEntityStateStrongAttack() const
        {
            return Ent::Gen::EntityStateStrongAttack(addSubNode("EntityStateStrongAttack"));
        }
        inline void ActorStates::removeEntityStateStrongAttack() const
        {
            node->mapErase("EntityStateStrongAttack");
        }
        inline std::optional<Ent::Gen::EntityStateStrongAttackCharged> ActorStates::EntityStateStrongAttackCharged() const
        {
            auto sub = getSubNode("EntityStateStrongAttackCharged");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStrongAttackCharged>{}: std::optional<Ent::Gen::EntityStateStrongAttackCharged>(getSubNode("EntityStateStrongAttackCharged"));
        }
        inline Ent::Gen::EntityStateStrongAttackCharged ActorStates::addEntityStateStrongAttackCharged() const
        {
            return Ent::Gen::EntityStateStrongAttackCharged(addSubNode("EntityStateStrongAttackCharged"));
        }
        inline void ActorStates::removeEntityStateStrongAttackCharged() const
        {
            node->mapErase("EntityStateStrongAttackCharged");
        }
        inline std::optional<Ent::Gen::EntityStateStrongAttackCharging> ActorStates::EntityStateStrongAttackCharging() const
        {
            auto sub = getSubNode("EntityStateStrongAttackCharging");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStrongAttackCharging>{}: std::optional<Ent::Gen::EntityStateStrongAttackCharging>(getSubNode("EntityStateStrongAttackCharging"));
        }
        inline Ent::Gen::EntityStateStrongAttackCharging ActorStates::addEntityStateStrongAttackCharging() const
        {
            return Ent::Gen::EntityStateStrongAttackCharging(addSubNode("EntityStateStrongAttackCharging"));
        }
        inline void ActorStates::removeEntityStateStrongAttackCharging() const
        {
            node->mapErase("EntityStateStrongAttackCharging");
        }
        inline std::optional<Ent::Gen::EntityStateStrongAttackJumped> ActorStates::EntityStateStrongAttackJumped() const
        {
            auto sub = getSubNode("EntityStateStrongAttackJumped");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateStrongAttackJumped>{}: std::optional<Ent::Gen::EntityStateStrongAttackJumped>(getSubNode("EntityStateStrongAttackJumped"));
        }
        inline Ent::Gen::EntityStateStrongAttackJumped ActorStates::addEntityStateStrongAttackJumped() const
        {
            return Ent::Gen::EntityStateStrongAttackJumped(addSubNode("EntityStateStrongAttackJumped"));
        }
        inline void ActorStates::removeEntityStateStrongAttackJumped() const
        {
            node->mapErase("EntityStateStrongAttackJumped");
        }
        inline std::optional<Ent::Gen::EntityStateTakeDamageOnMount> ActorStates::EntityStateTakeDamageOnMount() const
        {
            auto sub = getSubNode("EntityStateTakeDamageOnMount");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateTakeDamageOnMount>{}: std::optional<Ent::Gen::EntityStateTakeDamageOnMount>(getSubNode("EntityStateTakeDamageOnMount"));
        }
        inline Ent::Gen::EntityStateTakeDamageOnMount ActorStates::addEntityStateTakeDamageOnMount() const
        {
            return Ent::Gen::EntityStateTakeDamageOnMount(addSubNode("EntityStateTakeDamageOnMount"));
        }
        inline void ActorStates::removeEntityStateTakeDamageOnMount() const
        {
            node->mapErase("EntityStateTakeDamageOnMount");
        }
        inline std::optional<Ent::Gen::EntityStateTooDeep> ActorStates::EntityStateTooDeep() const
        {
            auto sub = getSubNode("EntityStateTooDeep");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateTooDeep>{}: std::optional<Ent::Gen::EntityStateTooDeep>(getSubNode("EntityStateTooDeep"));
        }
        inline Ent::Gen::EntityStateTooDeep ActorStates::addEntityStateTooDeep() const
        {
            return Ent::Gen::EntityStateTooDeep(addSubNode("EntityStateTooDeep"));
        }
        inline void ActorStates::removeEntityStateTooDeep() const
        {
            node->mapErase("EntityStateTooDeep");
        }
        inline std::optional<Ent::Gen::EntityStateTreeMetamorphosis> ActorStates::EntityStateTreeMetamorphosis() const
        {
            auto sub = getSubNode("EntityStateTreeMetamorphosis");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateTreeMetamorphosis>{}: std::optional<Ent::Gen::EntityStateTreeMetamorphosis>(getSubNode("EntityStateTreeMetamorphosis"));
        }
        inline Ent::Gen::EntityStateTreeMetamorphosis ActorStates::addEntityStateTreeMetamorphosis() const
        {
            return Ent::Gen::EntityStateTreeMetamorphosis(addSubNode("EntityStateTreeMetamorphosis"));
        }
        inline void ActorStates::removeEntityStateTreeMetamorphosis() const
        {
            node->mapErase("EntityStateTreeMetamorphosis");
        }
        inline std::optional<Ent::Gen::EntityStateTreeMetamorphosisUsingScale> ActorStates::EntityStateTreeMetamorphosisUsingScale() const
        {
            auto sub = getSubNode("EntityStateTreeMetamorphosisUsingScale");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateTreeMetamorphosisUsingScale>{}: std::optional<Ent::Gen::EntityStateTreeMetamorphosisUsingScale>(getSubNode("EntityStateTreeMetamorphosisUsingScale"));
        }
        inline Ent::Gen::EntityStateTreeMetamorphosisUsingScale ActorStates::addEntityStateTreeMetamorphosisUsingScale() const
        {
            return Ent::Gen::EntityStateTreeMetamorphosisUsingScale(addSubNode("EntityStateTreeMetamorphosisUsingScale"));
        }
        inline void ActorStates::removeEntityStateTreeMetamorphosisUsingScale() const
        {
            node->mapErase("EntityStateTreeMetamorphosisUsingScale");
        }
        inline std::optional<Ent::Gen::EntityStateTreeSwitchTransition> ActorStates::EntityStateTreeSwitchTransition() const
        {
            auto sub = getSubNode("EntityStateTreeSwitchTransition");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateTreeSwitchTransition>{}: std::optional<Ent::Gen::EntityStateTreeSwitchTransition>(getSubNode("EntityStateTreeSwitchTransition"));
        }
        inline Ent::Gen::EntityStateTreeSwitchTransition ActorStates::addEntityStateTreeSwitchTransition() const
        {
            return Ent::Gen::EntityStateTreeSwitchTransition(addSubNode("EntityStateTreeSwitchTransition"));
        }
        inline void ActorStates::removeEntityStateTreeSwitchTransition() const
        {
            node->mapErase("EntityStateTreeSwitchTransition");
        }
        inline std::optional<Ent::Gen::EntityStateTreeTurretTargeting> ActorStates::EntityStateTreeTurretTargeting() const
        {
            auto sub = getSubNode("EntityStateTreeTurretTargeting");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateTreeTurretTargeting>{}: std::optional<Ent::Gen::EntityStateTreeTurretTargeting>(getSubNode("EntityStateTreeTurretTargeting"));
        }
        inline Ent::Gen::EntityStateTreeTurretTargeting ActorStates::addEntityStateTreeTurretTargeting() const
        {
            return Ent::Gen::EntityStateTreeTurretTargeting(addSubNode("EntityStateTreeTurretTargeting"));
        }
        inline void ActorStates::removeEntityStateTreeTurretTargeting() const
        {
            node->mapErase("EntityStateTreeTurretTargeting");
        }
        inline std::optional<Ent::Gen::EntityStateTriggerBeamTargetEvent> ActorStates::EntityStateTriggerBeamTargetEvent() const
        {
            auto sub = getSubNode("EntityStateTriggerBeamTargetEvent");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateTriggerBeamTargetEvent>{}: std::optional<Ent::Gen::EntityStateTriggerBeamTargetEvent>(getSubNode("EntityStateTriggerBeamTargetEvent"));
        }
        inline Ent::Gen::EntityStateTriggerBeamTargetEvent ActorStates::addEntityStateTriggerBeamTargetEvent() const
        {
            return Ent::Gen::EntityStateTriggerBeamTargetEvent(addSubNode("EntityStateTriggerBeamTargetEvent"));
        }
        inline void ActorStates::removeEntityStateTriggerBeamTargetEvent() const
        {
            node->mapErase("EntityStateTriggerBeamTargetEvent");
        }
        inline std::optional<Ent::Gen::EntityStateTryUnmount> ActorStates::EntityStateTryUnmount() const
        {
            auto sub = getSubNode("EntityStateTryUnmount");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateTryUnmount>{}: std::optional<Ent::Gen::EntityStateTryUnmount>(getSubNode("EntityStateTryUnmount"));
        }
        inline Ent::Gen::EntityStateTryUnmount ActorStates::addEntityStateTryUnmount() const
        {
            return Ent::Gen::EntityStateTryUnmount(addSubNode("EntityStateTryUnmount"));
        }
        inline void ActorStates::removeEntityStateTryUnmount() const
        {
            node->mapErase("EntityStateTryUnmount");
        }
        inline std::optional<Ent::Gen::EntityStateUndergroundCavity> ActorStates::EntityStateUndergroundCavity() const
        {
            auto sub = getSubNode("EntityStateUndergroundCavity");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateUndergroundCavity>{}: std::optional<Ent::Gen::EntityStateUndergroundCavity>(getSubNode("EntityStateUndergroundCavity"));
        }
        inline Ent::Gen::EntityStateUndergroundCavity ActorStates::addEntityStateUndergroundCavity() const
        {
            return Ent::Gen::EntityStateUndergroundCavity(addSubNode("EntityStateUndergroundCavity"));
        }
        inline void ActorStates::removeEntityStateUndergroundCavity() const
        {
            node->mapErase("EntityStateUndergroundCavity");
        }
        inline std::optional<Ent::Gen::EntityStateUseAsActiveCheckpoint> ActorStates::EntityStateUseAsActiveCheckpoint() const
        {
            auto sub = getSubNode("EntityStateUseAsActiveCheckpoint");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateUseAsActiveCheckpoint>{}: std::optional<Ent::Gen::EntityStateUseAsActiveCheckpoint>(getSubNode("EntityStateUseAsActiveCheckpoint"));
        }
        inline Ent::Gen::EntityStateUseAsActiveCheckpoint ActorStates::addEntityStateUseAsActiveCheckpoint() const
        {
            return Ent::Gen::EntityStateUseAsActiveCheckpoint(addSubNode("EntityStateUseAsActiveCheckpoint"));
        }
        inline void ActorStates::removeEntityStateUseAsActiveCheckpoint() const
        {
            node->mapErase("EntityStateUseAsActiveCheckpoint");
        }
        inline std::optional<Ent::Gen::EntityStateWaitToJumpAgain> ActorStates::EntityStateWaitToJumpAgain() const
        {
            auto sub = getSubNode("EntityStateWaitToJumpAgain");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateWaitToJumpAgain>{}: std::optional<Ent::Gen::EntityStateWaitToJumpAgain>(getSubNode("EntityStateWaitToJumpAgain"));
        }
        inline Ent::Gen::EntityStateWaitToJumpAgain ActorStates::addEntityStateWaitToJumpAgain() const
        {
            return Ent::Gen::EntityStateWaitToJumpAgain(addSubNode("EntityStateWaitToJumpAgain"));
        }
        inline void ActorStates::removeEntityStateWaitToJumpAgain() const
        {
            node->mapErase("EntityStateWaitToJumpAgain");
        }
        inline std::optional<Ent::Gen::EntityStateWallRun> ActorStates::EntityStateWallRun() const
        {
            auto sub = getSubNode("EntityStateWallRun");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateWallRun>{}: std::optional<Ent::Gen::EntityStateWallRun>(getSubNode("EntityStateWallRun"));
        }
        inline Ent::Gen::EntityStateWallRun ActorStates::addEntityStateWallRun() const
        {
            return Ent::Gen::EntityStateWallRun(addSubNode("EntityStateWallRun"));
        }
        inline void ActorStates::removeEntityStateWallRun() const
        {
            node->mapErase("EntityStateWallRun");
        }
        inline std::optional<Ent::Gen::EntityStateWallRunDrop> ActorStates::EntityStateWallRunDrop() const
        {
            auto sub = getSubNode("EntityStateWallRunDrop");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateWallRunDrop>{}: std::optional<Ent::Gen::EntityStateWallRunDrop>(getSubNode("EntityStateWallRunDrop"));
        }
        inline Ent::Gen::EntityStateWallRunDrop ActorStates::addEntityStateWallRunDrop() const
        {
            return Ent::Gen::EntityStateWallRunDrop(addSubNode("EntityStateWallRunDrop"));
        }
        inline void ActorStates::removeEntityStateWallRunDrop() const
        {
            node->mapErase("EntityStateWallRunDrop");
        }
        inline std::optional<Ent::Gen::EntityStateWallRunJump> ActorStates::EntityStateWallRunJump() const
        {
            auto sub = getSubNode("EntityStateWallRunJump");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateWallRunJump>{}: std::optional<Ent::Gen::EntityStateWallRunJump>(getSubNode("EntityStateWallRunJump"));
        }
        inline Ent::Gen::EntityStateWallRunJump ActorStates::addEntityStateWallRunJump() const
        {
            return Ent::Gen::EntityStateWallRunJump(addSubNode("EntityStateWallRunJump"));
        }
        inline void ActorStates::removeEntityStateWallRunJump() const
        {
            node->mapErase("EntityStateWallRunJump");
        }
        inline std::optional<Ent::Gen::EntityStateWaterfallEndJump> ActorStates::EntityStateWaterfallEndJump() const
        {
            auto sub = getSubNode("EntityStateWaterfallEndJump");
            return sub == nullptr? std::optional<Ent::Gen::EntityStateWaterfallEndJump>{}: std::optional<Ent::Gen::EntityStateWaterfallEndJump>(getSubNode("EntityStateWaterfallEndJump"));
        }
        inline Ent::Gen::EntityStateWaterfallEndJump ActorStates::addEntityStateWaterfallEndJump() const
        {
            return Ent::Gen::EntityStateWaterfallEndJump(addSubNode("EntityStateWaterfallEndJump"));
        }
        inline void ActorStates::removeEntityStateWaterfallEndJump() const
        {
            node->mapErase("EntityStateWaterfallEndJump");
        }
        // Object
        inline Ent::Gen::ActorStates Object::ActorStates() const
        {
            return Ent::Gen::ActorStates(node->at("ActorStates"));
        }
        inline Ent::Gen::Color Object::Color() const
        {
            return Ent::Gen::Color(node->at("Color"));
        }
        inline Ent::Gen::Object_Components Object::Components() const
        {
            return Ent::Gen::Object_Components(node->at("Components"));
        }
        inline Ent::Gen::Object_MaxActivationLevel Object::MaxActivationLevel() const
        {
            return Ent::Gen::Object_MaxActivationLevel(node->at("MaxActivationLevel"));
        }
        inline Ent::Gen::String Object::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String Object::Thumbnail() const
        {
            return Ent::Gen::String(node->at("Thumbnail"));
        }
        inline Ent::Gen::Bool Object::__removed__() const
        {
            return Ent::Gen::Bool(node->at("__removed__"));
        }
        inline Ent::Gen::String Object::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // UnitTestComponent
        inline Ent::Gen::Object UnitTestComponent::Entity() const
        {
            return Ent::Gen::Object(node->at("Entity"));
        }
        inline Ent::Gen::PrimitiveSet<ReviveSideEnum> UnitTestComponent::EnumSet() const
        {
            return Ent::Gen::PrimitiveSet<ReviveSideEnum>(node->at("EnumSet"));
        }
        inline Ent::Gen::Position UnitTestComponent::Position() const
        {
            return Ent::Gen::Position(node->at("Position"));
        }
        inline Ent::Gen::ComponentGD UnitTestComponent::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String UnitTestComponent::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Entity
        inline Ent::Gen::ActorStates Entity::ActorStates() const
        {
            return Ent::Gen::ActorStates(node->at("ActorStates"));
        }
        inline Ent::Gen::Color Entity::Color() const
        {
            return Ent::Gen::Color(node->at("Color"));
        }
        inline Ent::Gen::Components Entity::Components() const
        {
            return Ent::Gen::Components(node->at("Components"));
        }
        inline Ent::Gen::MaxActivationLevel Entity::MaxActivationLevel() const
        {
            return Ent::Gen::MaxActivationLevel(node->at("MaxActivationLevel"));
        }
        inline Ent::Gen::String Entity::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String Entity::Thumbnail() const
        {
            return Ent::Gen::String(node->at("Thumbnail"));
        }
        inline Ent::Gen::String Entity::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // SubScene
        inline Ent::Gen::ObjectSet<char const*, Ent::Gen::Entity> SubScene::Embedded() const
        {
            return Ent::Gen::ObjectSet<char const*, Ent::Gen::Entity>(node->at("Embedded"));
        }
        inline Ent::Gen::RuntimeMode SubScene::RuntimeMode() const
        {
            return Ent::Gen::RuntimeMode(node->at("RuntimeMode"));
        }
        inline Ent::Gen::ComponentGD SubScene::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String SubScene::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // Scene
        inline Ent::Gen::ObjectSet<char const*, Ent::Gen::Entity> Scene::Objects() const
        {
            return Ent::Gen::ObjectSet<char const*, Ent::Gen::Entity>(node->at("Objects"));
        }
        inline Ent::Gen::Int Scene::Version() const
        {
            return Ent::Gen::Int(node->at("Version"));
        }
        inline Ent::Gen::String Scene::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateTeleport_Inputs
        inline Ent::Gen::Orientation ActorStateTeleport_Inputs::Orientation() const
        {
            return Ent::Gen::Orientation(node->at("Orientation"));
        }
        inline Ent::Gen::Position ActorStateTeleport_Inputs::Position() const
        {
            return Ent::Gen::Position(node->at("Position"));
        }
        inline Ent::Gen::Bool ActorStateTeleport_Inputs::ResetCamera() const
        {
            return Ent::Gen::Bool(node->at("ResetCamera"));
        }
        inline Ent::Gen::Bool ActorStateTeleport_Inputs::TouchGround() const
        {
            return Ent::Gen::Bool(node->at("TouchGround"));
        }
        inline Ent::Gen::String ActorStateTeleport_Inputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateTeleportWhileMovingInputs
        inline Ent::Gen::String ActorStateTeleportWhileMovingInputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ActorStateTeleportWhileMovingInputs::aerialMount() const
        {
            return Ent::Gen::Bool(node->at("aerialMount"));
        }
        inline Ent::Gen::Vector3 ActorStateTeleportWhileMovingInputs::direction() const
        {
            return Ent::Gen::Vector3(node->at("direction"));
        }
        inline Ent::Gen::Quat ActorStateTeleportWhileMovingInputs::orientation() const
        {
            return Ent::Gen::Quat(node->at("orientation"));
        }
        inline Ent::Gen::Position ActorStateTeleportWhileMovingInputs::position() const
        {
            return Ent::Gen::Position(node->at("position"));
        }
        inline Ent::Gen::Float ActorStateTeleportWhileMovingInputs::speedRequired() const
        {
            return Ent::Gen::Float(node->at("speedRequired"));
        }
        // ActorStateFlockingChangingParams_Params
        inline Ent::Gen::Bool ActorStateFlockingChangingParams_Params::ApplyAfterCurrent() const
        {
            return Ent::Gen::Bool(node->at("ApplyAfterCurrent"));
        }
        inline Ent::Gen::Bool ActorStateFlockingChangingParams_Params::ApplyOnBud() const
        {
            return Ent::Gen::Bool(node->at("ApplyOnBud"));
        }
        inline Ent::Gen::Float ActorStateFlockingChangingParams_Params::DelayRandom() const
        {
            return Ent::Gen::Float(node->at("DelayRandom"));
        }
        inline Ent::Gen::Float ActorStateFlockingChangingParams_Params::DelayStatic() const
        {
            return Ent::Gen::Float(node->at("DelayStatic"));
        }
        inline Ent::Gen::String ActorStateFlockingChangingParams_Params::Hash() const
        {
            return Ent::Gen::String(node->at("Hash"));
        }
        inline Ent::Gen::Int ActorStateFlockingChangingParams_Params::Layer() const
        {
            return Ent::Gen::Int(node->at("Layer"));
        }
        inline Ent::Gen::String ActorStateFlockingChangingParams_Params::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorState
        // EntityStateWaterfallEndJump
        inline Ent::Gen::ActorState EntityStateWaterfallEndJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateWaterfallEndJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateWallRunJump
        inline Ent::Gen::ActorState EntityStateWallRunJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateWallRunJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateWallRunDrop
        inline Ent::Gen::ActorState EntityStateWallRunDrop::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateWallRunDrop::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateWallRun
        inline Ent::Gen::ActorState EntityStateWallRun::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateWallRun::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateWaitToJumpAgain
        inline Ent::Gen::ActorState EntityStateWaitToJumpAgain::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateWaitToJumpAgain::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateUseAsActiveCheckpoint
        inline Ent::Gen::ActorState EntityStateUseAsActiveCheckpoint::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateUseAsActiveCheckpoint::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateUndergroundCavity
        inline Ent::Gen::ActorState EntityStateUndergroundCavity::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateUndergroundCavity::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateTryUnmount
        inline Ent::Gen::ActorState EntityStateTryUnmount::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateTryUnmount::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateTriggerBeamTargetEvent
        inline Ent::Gen::ActorState EntityStateTriggerBeamTargetEvent::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateTriggerBeamTargetEvent::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateTreeTurretTargeting
        inline Ent::Gen::ActorState EntityStateTreeTurretTargeting::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateTreeTurretTargeting::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateTreeSwitchTransition
        inline Ent::Gen::ActorState EntityStateTreeSwitchTransition::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateTreeSwitchTransition::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateTreeMetamorphosisUsingScale
        inline Ent::Gen::ActorState EntityStateTreeMetamorphosisUsingScale::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateTreeMetamorphosisUsingScale::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateTreeMetamorphosis
        inline Ent::Gen::ActorState EntityStateTreeMetamorphosis::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateTreeMetamorphosis::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateTooDeep
        inline Ent::Gen::ActorState EntityStateTooDeep::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateTooDeep::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateTakeDamageOnMount
        inline Ent::Gen::ActorState EntityStateTakeDamageOnMount::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateTakeDamageOnMount::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStrongAttackJumped
        inline Ent::Gen::ActorState EntityStateStrongAttackJumped::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStrongAttackJumped::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStrongAttackCharging
        inline Ent::Gen::ActorState EntityStateStrongAttackCharging::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStrongAttackCharging::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStrongAttackCharged
        inline Ent::Gen::ActorState EntityStateStrongAttackCharged::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStrongAttackCharged::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStrongAttack
        inline Ent::Gen::ActorState EntityStateStrongAttack::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStrongAttack::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStrafeDodge
        inline Ent::Gen::ActorState EntityStateStrafeDodge::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStrafeDodge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStickedLand
        inline Ent::Gen::ActorState EntityStateStickedLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStickedLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStalactiteReadyToFall
        inline Ent::Gen::ActorState EntityStateStalactiteReadyToFall::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStalactiteReadyToFall::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStalactiteFallen
        inline Ent::Gen::ActorState EntityStateStalactiteFallen::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStalactiteFallen::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStaffVertebrasAutoRefill
        inline Ent::Gen::ActorState EntityStateStaffVertebrasAutoRefill::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStaffVertebrasAutoRefill::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateStaffOwnedVertebras
        inline Ent::Gen::EntityStateStaffOwnedVertebras_Inputs EntityStateStaffOwnedVertebras::Inputs() const
        {
            return Ent::Gen::EntityStateStaffOwnedVertebras_Inputs(node->at("Inputs"));
        }
        inline Ent::Gen::ActorState EntityStateStaffOwnedVertebras::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateStaffOwnedVertebras::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSpiritShrineEnabled
        inline Ent::Gen::ActorState EntityStateSpiritShrineEnabled::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSpiritShrineEnabled::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSpiritShrineDisabled
        inline Ent::Gen::ActorState EntityStateSpiritShrineDisabled::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSpiritShrineDisabled::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSpiritAttacked
        inline Ent::Gen::ActorState EntityStateSpiritAttacked::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSpiritAttacked::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSpiritAttack
        inline Ent::Gen::ActorState EntityStateSpiritAttack::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSpiritAttack::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSpiritAnimalSoulForm
        inline Ent::Gen::ActorState EntityStateSpiritAnimalSoulForm::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSpiritAnimalSoulForm::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSpiritAnimalFleshForm
        inline Ent::Gen::ActorState EntityStateSpiritAnimalFleshForm::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSpiritAnimalFleshForm::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSpiritAnimalBeingCalled
        inline Ent::Gen::ActorState EntityStateSpiritAnimalBeingCalled::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSpiritAnimalBeingCalled::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSpeedLimiter
        inline Ent::Gen::Float EntityStateSpeedLimiter::SpeedMax() const
        {
            return Ent::Gen::Float(node->at("SpeedMax"));
        }
        inline Ent::Gen::ActorState EntityStateSpeedLimiter::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSpeedLimiter::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSoftCollide
        inline Ent::Gen::ActorState EntityStateSoftCollide::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSoftCollide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSnappedToHatchingTarget
        inline Ent::Gen::ActorState EntityStateSnappedToHatchingTarget::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSnappedToHatchingTarget::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSlowMotion
        inline Ent::Gen::ActorState EntityStateSlowMotion::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSlowMotion::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateShootHatchingEnergy
        inline Ent::Gen::ActorState EntityStateShootHatchingEnergy::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateShootHatchingEnergy::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSetSavePoint
        inline Ent::Gen::ActorState EntityStateSetSavePoint::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSetSavePoint::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateSavePointActivated
        inline Ent::Gen::ActorState EntityStateSavePointActivated::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateSavePointActivated::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateRevive
        inline Ent::Gen::EntityStateRevive_Inputs EntityStateRevive::Inputs() const
        {
            return Ent::Gen::EntityStateRevive_Inputs(node->at("Inputs"));
        }
        inline Ent::Gen::ActorState EntityStateRevive::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateRevive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateRespawnability
        inline Ent::Gen::EntityRef EntityStateRespawnability::RespawnPlaceEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("RespawnPlaceEntityRef"));
        }
        inline Ent::Gen::ActorState EntityStateRespawnability::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateRespawnability::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateRespawn
        inline Ent::Gen::ActorState EntityStateRespawn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateRespawn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateReserveMountSlots
        inline Ent::Gen::MountableData EntityStateReserveMountSlots::MountableDataTo() const
        {
            return Ent::Gen::MountableData(node->at("MountableDataTo"));
        }
        inline Ent::Gen::ActorState EntityStateReserveMountSlots::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateReserveMountSlots::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateRegainCapacity
        inline Ent::Gen::ActorState EntityStateRegainCapacity::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateRegainCapacity::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateRecoverLand
        inline Ent::Gen::ActorState EntityStateRecoverLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateRecoverLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateReadyToGiveOrder
        inline Ent::Gen::ActorState EntityStateReadyToGiveOrder::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateReadyToGiveOrder::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateRaise
        inline Ent::Gen::Float EntityStateRaise::Damages() const
        {
            return Ent::Gen::Float(node->at("Damages"));
        }
        inline Ent::Gen::EnergySide EntityStateRaise::EnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::ActorState EntityStateRaise::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateRaise::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStatePrepareToHoldingOnToNavigationMesh
        inline Ent::Gen::ActorState EntityStatePrepareToHoldingOnToNavigationMesh::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStatePrepareToHoldingOnToNavigationMesh::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStatePlungeLand
        inline Ent::Gen::ActorState EntityStatePlungeLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStatePlungeLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStatePlayer
        inline Ent::Gen::ActorState EntityStatePlayer::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStatePlayer::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStatePickableDistributor
        inline Ent::Gen::ActorState EntityStatePickableDistributor::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStatePickableDistributor::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStatePhysicsMove
        inline Ent::Gen::Float EntityStatePhysicsMove::AngularVelocityMultiplier() const
        {
            return Ent::Gen::Float(node->at("AngularVelocityMultiplier"));
        }
        inline Ent::Gen::Float EntityStatePhysicsMove::CustomGravity() const
        {
            return Ent::Gen::Float(node->at("CustomGravity"));
        }
        inline Ent::Gen::Float EntityStatePhysicsMove::ForceMultiplier() const
        {
            return Ent::Gen::Float(node->at("ForceMultiplier"));
        }
        inline Ent::Gen::ActorState EntityStatePhysicsMove::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStatePhysicsMove::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStatePhysicsIdle
        inline Ent::Gen::ActorState EntityStatePhysicsIdle::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStatePhysicsIdle::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateParryCooldown
        inline Ent::Gen::ActorState EntityStateParryCooldown::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateParryCooldown::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateParry
        inline Ent::Gen::ActorState EntityStateParry::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateParry::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateParried
        inline Ent::Gen::ActorState EntityStateParried::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateParried::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateOrientedDrift
        inline Ent::Gen::ActorState EntityStateOrientedDrift::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateOrientedDrift::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateOrderingAttack
        inline Ent::Gen::ActorState EntityStateOrderingAttack::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateOrderingAttack::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateMoveOnOffMeshLink
        inline Ent::Gen::ActorState EntityStateMoveOnOffMeshLink::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateMoveOnOffMeshLink::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateMotionConstrainedLand
        inline Ent::Gen::ActorState EntityStateMotionConstrainedLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateMotionConstrainedLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateMotionConstrained
        inline Ent::Gen::EntityStateMotionConstrained_Inputs EntityStateMotionConstrained::Inputs() const
        {
            return Ent::Gen::EntityStateMotionConstrained_Inputs(node->at("Inputs"));
        }
        inline Ent::Gen::ActorState EntityStateMotionConstrained::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateMotionConstrained::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateMineScaling
        inline Ent::Gen::ActorState EntityStateMineScaling::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateMineScaling::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateMineRespawning
        inline Ent::Gen::ActorState EntityStateMineRespawning::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateMineRespawning::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateMeditateToInteract
        inline Ent::Gen::ActorState EntityStateMeditateToInteract::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateMeditateToInteract::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateMask
        inline Ent::Gen::String EntityStateMask::MaskMeshPath() const
        {
            return Ent::Gen::String(node->at("MaskMeshPath"));
        }
        inline Ent::Gen::ActorState EntityStateMask::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateMask::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateManageChildEntityPool
        inline Ent::Gen::EntityStateManageChildEntityPool_Inputs EntityStateManageChildEntityPool::Inputs() const
        {
            return Ent::Gen::EntityStateManageChildEntityPool_Inputs(node->at("Inputs"));
        }
        inline Ent::Gen::ActorState EntityStateManageChildEntityPool::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateManageChildEntityPool::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateLateralLand
        inline Ent::Gen::ActorState EntityStateLateralLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateLateralLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateLateralDodge
        inline Ent::Gen::ActorState EntityStateLateralDodge::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateLateralDodge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateJustStarted
        inline Ent::Gen::ActorState EntityStateJustStarted::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateJustStarted::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateJumpHeightMultiplier
        inline Ent::Gen::Float EntityStateJumpHeightMultiplier::JumpHeightMultiplier() const
        {
            return Ent::Gen::Float(node->at("JumpHeightMultiplier"));
        }
        inline Ent::Gen::ActorState EntityStateJumpHeightMultiplier::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateJumpHeightMultiplier::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateInteractedGPE
        inline Ent::Gen::ActorState EntityStateInteractedGPE::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateInteractedGPE::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateInjured
        inline Ent::Gen::ActorState EntityStateInjured::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateInjured::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateInconvertible
        inline Ent::Gen::ActorState EntityStateInconvertible::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateInconvertible::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateIncapacitated
        inline Ent::Gen::EntityStateIncapacitated_Inputs EntityStateIncapacitated::Inputs() const
        {
            return Ent::Gen::EntityStateIncapacitated_Inputs(node->at("Inputs"));
        }
        inline Ent::Gen::ActorState EntityStateIncapacitated::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateIncapacitated::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateInVertebraeArea
        inline Ent::Gen::ActorState EntityStateInVertebraeArea::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateInVertebraeArea::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateImmersedJump
        inline Ent::Gen::ActorState EntityStateImmersedJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateImmersedJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateHoldingStaffVertebras
        inline Ent::Gen::ActorState EntityStateHoldingStaffVertebras::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateHoldingStaffVertebras::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateHitWall
        inline Ent::Gen::ActorState EntityStateHitWall::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateHitWall::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateHintNone
        inline Ent::Gen::ActorState EntityStateHintNone::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateHintNone::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateHintLight
        inline Ent::Gen::ActorState EntityStateHintLight::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateHintLight::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateHintFull
        inline Ent::Gen::ActorState EntityStateHintFull::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateHintFull::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateHideOut
        inline Ent::Gen::ActorState EntityStateHideOut::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateHideOut::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateHideIn
        inline Ent::Gen::ActorState EntityStateHideIn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateHideIn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateHide
        inline Ent::Gen::Bool EntityStateHide::ExitRequired() const
        {
            return Ent::Gen::Bool(node->at("ExitRequired"));
        }
        inline Ent::Gen::ActorState EntityStateHide::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateHide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGroundedJump
        inline Ent::Gen::ActorState EntityStateGroundedJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGroundedJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGrasp
        inline Ent::Gen::ActorState EntityStateGrasp::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGrasp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGrabbedOut
        inline Ent::Gen::ActorState EntityStateGrabbedOut::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGrabbedOut::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGrabbedIn
        inline Ent::Gen::ActorState EntityStateGrabbedIn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGrabbedIn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGrabbed
        inline Ent::Gen::ActorState EntityStateGrabbed::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGrabbed::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGrabOut
        inline Ent::Gen::ActorState EntityStateGrabOut::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGrabOut::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGrabIn
        inline Ent::Gen::ActorState EntityStateGrabIn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGrabIn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGrabAttack
        inline Ent::Gen::ActorState EntityStateGrabAttack::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGrabAttack::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateGrab
        inline Ent::Gen::ActorState EntityStateGrab::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateGrab::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateForceCanBeTargeted
        inline Ent::Gen::Bool EntityStateForceCanBeTargeted::CanBeTargeted() const
        {
            return Ent::Gen::Bool(node->at("CanBeTargeted"));
        }
        inline Ent::Gen::ActorState EntityStateForceCanBeTargeted::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateForceCanBeTargeted::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateFastRun
        inline Ent::Gen::ActorState EntityStateFastRun::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateFastRun::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateFallSafe
        inline Ent::Gen::ActorState EntityStateFallSafe::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateFallSafe::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateFallInjured
        inline Ent::Gen::ActorState EntityStateFallInjured::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateFallInjured::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateFallDying
        inline Ent::Gen::ActorState EntityStateFallDying::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateFallDying::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateFall
        inline Ent::Gen::ActorState EntityStateFall::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateFall::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateFailingOrder
        inline Ent::Gen::ActorState EntityStateFailingOrder::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateFailingOrder::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateExtraLife
        inline Ent::Gen::ActorState EntityStateExtraLife::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateExtraLife::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateEnergySpoutState
        inline Array<Ent::Gen::EnergySideEvent> EntityStateEnergySpoutState::EnergySideEvents() const
        {
            return Array<Ent::Gen::EnergySideEvent>(node->at("EnergySideEvents"));
        }
        inline Ent::Gen::ActorState EntityStateEnergySpoutState::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateEnergySpoutState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateEnergySide
        inline Ent::Gen::EnergySide EntityStateEnergySide::EnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::ActorState EntityStateEnergySide::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateEnergySide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateEnergyRootHatching
        inline Ent::Gen::ActorState EntityStateEnergyRootHatching::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateEnergyRootHatching::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateEnergyRootAbortHatching
        inline Ent::Gen::ActorState EntityStateEnergyRootAbortHatching::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateEnergyRootAbortHatching::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateEjectedLand
        inline Ent::Gen::ActorState EntityStateEjectedLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateEjectedLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateDodgeCooldown
        inline Ent::Gen::ActorState EntityStateDodgeCooldown::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateDodgeCooldown::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateDisplayHatchingCost
        inline Ent::Gen::ActorState EntityStateDisplayHatchingCost::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateDisplayHatchingCost::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateDisguise
        inline Ent::Gen::Bool EntityStateDisguise::ExitRequired() const
        {
            return Ent::Gen::Bool(node->at("ExitRequired"));
        }
        inline Ent::Gen::ActorState EntityStateDisguise::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateDisguise::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateDisabledVertebrae
        inline Ent::Gen::ActorState EntityStateDisabledVertebrae::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateDisabledVertebrae::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateDisablePerceptionRequest
        inline Ent::Gen::ActorState EntityStateDisablePerceptionRequest::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateDisablePerceptionRequest::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateDeathLand
        inline Ent::Gen::ActorState EntityStateDeathLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateDeathLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateDamageLand
        inline Ent::Gen::ActorState EntityStateDamageLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateDamageLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCreatureProfile
        inline Ent::Gen::CreatureProfile EntityStateCreatureProfile::Profile() const
        {
            return Ent::Gen::CreatureProfile(node->at("Profile"));
        }
        inline Ent::Gen::ActorState EntityStateCreatureProfile::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateCreatureProfile::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCreatureHatching
        inline Ent::Gen::EntityStateCreatureHatching_Inputs EntityStateCreatureHatching::Inputs() const
        {
            return Ent::Gen::EntityStateCreatureHatching_Inputs(node->at("Inputs"));
        }
        inline Ent::Gen::ActorState EntityStateCreatureHatching::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateCreatureHatching::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateControlGPE
        inline Ent::Gen::ActorState EntityStateControlGPE::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateControlGPE::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateConstrainedMove
        inline Ent::Gen::ActorState EntityStateConstrainedMove::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateConstrainedMove::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateConstrainedInput
        inline Ent::Gen::ActorState EntityStateConstrainedInput::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateConstrainedInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCombat
        inline Ent::Gen::ActorState EntityStateCombat::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateCombat::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCollectVertebrae
        inline Ent::Gen::ActorState EntityStateCollectVertebrae::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateCollectVertebrae::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float EntityStateCollectVertebrae::meditationDuration() const
        {
            return Ent::Gen::Float(node->at("meditationDuration"));
        }
        // EntityStateClimbWaterfallImpulse
        inline Ent::Gen::ActorState EntityStateClimbWaterfallImpulse::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateClimbWaterfallImpulse::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateClimbWaterfall
        inline Ent::Gen::ActorState EntityStateClimbWaterfall::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateClimbWaterfall::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateClassicLand
        inline Ent::Gen::ActorState EntityStateClassicLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateClassicLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateClassicDodge
        inline Ent::Gen::ActorState EntityStateClassicDodge::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateClassicDodge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCinematicReady
        inline Ent::Gen::ActorState EntityStateCinematicReady::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateCinematicReady::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCinematicCompleted
        inline Ent::Gen::ActorState EntityStateCinematicCompleted::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateCinematicCompleted::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateChargingJump
        inline Ent::Gen::ActorState EntityStateChargingJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateChargingJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateChargedJump
        inline Ent::Gen::ActorState EntityStateChargedJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateChargedJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateChargeMode
        inline Ent::Gen::EntityStateChargeMode_EntityStateChargeModeInputs EntityStateChargeMode::ChargeModeInputs() const
        {
            return Ent::Gen::EntityStateChargeMode_EntityStateChargeModeInputs(node->at("ChargeModeInputs"));
        }
        inline Ent::Gen::ActorState EntityStateChargeMode::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateChargeMode::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCanNotBePerceived
        inline Ent::Gen::ActorState EntityStateCanNotBePerceived::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateCanNotBePerceived::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateCallAndMountSpiritAnimal
        inline Ent::Gen::ActorState EntityStateCallAndMountSpiritAnimal::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateCallAndMountSpiritAnimal::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBridgeBeingControlled
        inline Ent::Gen::Float EntityStateBridgeBeingControlled::CollisionRaycastLength() const
        {
            return Ent::Gen::Float(node->at("CollisionRaycastLength"));
        }
        inline Ent::Gen::Float EntityStateBridgeBeingControlled::HorizontalSpeed() const
        {
            return Ent::Gen::Float(node->at("HorizontalSpeed"));
        }
        inline Ent::Gen::ActorState EntityStateBridgeBeingControlled::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::Float EntityStateBridgeBeingControlled::VerticalSpeed() const
        {
            return Ent::Gen::Float(node->at("VerticalSpeed"));
        }
        inline Ent::Gen::String EntityStateBridgeBeingControlled::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBridgeAttracted
        inline PrimArray<Ent::Gen::EntityRef> EntityStateBridgeAttracted::AttachPointsRef() const
        {
            return PrimArray<Ent::Gen::EntityRef>(node->at("AttachPointsRef"));
        }
        inline Ent::Gen::Float EntityStateBridgeAttracted::AttachTime() const
        {
            return Ent::Gen::Float(node->at("AttachTime"));
        }
        inline Ent::Gen::Position EntityStateBridgeAttracted::AttractionTarget() const
        {
            return Ent::Gen::Position(node->at("AttractionTarget"));
        }
        inline Ent::Gen::EntityRef EntityStateBridgeAttracted::BridgeLinkRef() const
        {
            return Ent::Gen::EntityRef(node->at("BridgeLinkRef"));
        }
        inline Ent::Gen::Float EntityStateBridgeAttracted::GroundAttachRaycastLength() const
        {
            return Ent::Gen::Float(node->at("GroundAttachRaycastLength"));
        }
        inline Ent::Gen::String EntityStateBridgeAttracted::HotspotName() const
        {
            return Ent::Gen::String(node->at("HotspotName"));
        }
        inline Ent::Gen::Float EntityStateBridgeAttracted::MaximalAttachDistance() const
        {
            return Ent::Gen::Float(node->at("MaximalAttachDistance"));
        }
        inline Ent::Gen::ActorState EntityStateBridgeAttracted::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBridgeAttracted::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBridgeAttached
        inline Ent::Gen::ActorState EntityStateBridgeAttached::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBridgeAttached::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBreakableEntire
        inline Ent::Gen::ActorState EntityStateBreakableEntire::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBreakableEntire::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBreakableBroken
        inline Ent::Gen::ActorState EntityStateBreakableBroken::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBreakableBroken::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBreakableBreaking
        inline Ent::Gen::ActorState EntityStateBreakableBreaking::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBreakableBreaking::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBounceLand
        inline Ent::Gen::ActorState EntityStateBounceLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBounceLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBounce
        inline Ent::Gen::ActorState EntityStateBounce::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBounce::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBoidsHomePos
        inline Ent::Gen::Position EntityStateBoidsHomePos::HomePosition() const
        {
            return Ent::Gen::Position(node->at("HomePosition"));
        }
        inline Ent::Gen::ActorState EntityStateBoidsHomePos::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBoidsHomePos::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBittenDefense
        inline Ent::Gen::ActorState EntityStateBittenDefense::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBittenDefense::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBitten
        inline Ent::Gen::ActorState EntityStateBitten::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBitten::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBiteOut
        inline Ent::Gen::ActorState EntityStateBiteOut::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBiteOut::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBiteIn
        inline Ent::Gen::ActorState EntityStateBiteIn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBiteIn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBiteAttack
        inline Ent::Gen::ActorState EntityStateBiteAttack::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBiteAttack::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBite
        inline Ent::Gen::ActorState EntityStateBite::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBite::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBeingOnSpike
        inline Ent::Gen::Float EntityStateBeingOnSpike::SpikeCooldown() const
        {
            return Ent::Gen::Float(node->at("SpikeCooldown"));
        }
        inline Ent::Gen::Float EntityStateBeingOnSpike::SpikeDamage() const
        {
            return Ent::Gen::Float(node->at("SpikeDamage"));
        }
        inline Ent::Gen::Int EntityStateBeingOnSpike::SpikeDeadlyHitCount() const
        {
            return Ent::Gen::Int(node->at("SpikeDeadlyHitCount"));
        }
        inline Ent::Gen::Bool EntityStateBeingOnSpike::SpikeEject() const
        {
            return Ent::Gen::Bool(node->at("SpikeEject"));
        }
        inline Ent::Gen::Float EntityStateBeingOnSpike::SpikeImpact() const
        {
            return Ent::Gen::Float(node->at("SpikeImpact"));
        }
        inline Ent::Gen::ActorState EntityStateBeingOnSpike::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBeingOnSpike::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBeingOnSlope
        inline Ent::Gen::ActorState EntityStateBeingOnSlope::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBeingOnSlope::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBeingLinked
        inline Ent::Gen::ActorState EntityStateBeingLinked::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBeingLinked::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBeingInReeds
        inline Ent::Gen::ActorState EntityStateBeingInReeds::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBeingInReeds::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBeingBlockedByVine
        inline Ent::Gen::EntityRef EntityStateBeingBlockedByVine::Blocker() const
        {
            return Ent::Gen::EntityRef(node->at("Blocker"));
        }
        inline Ent::Gen::ActorState EntityStateBeingBlockedByVine::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBeingBlockedByVine::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBackwardLand
        inline Ent::Gen::ActorState EntityStateBackwardLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBackwardLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateBackwardDodge
        inline Ent::Gen::ActorState EntityStateBackwardDodge::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateBackwardDodge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateAttitudeGroggy
        inline Ent::Gen::ActorState EntityStateAttitudeGroggy::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateAttitudeGroggy::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateAttackDive
        inline Ent::Gen::ActorState EntityStateAttackDive::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateAttackDive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateAskStaffGuide
        inline Ent::Gen::ActorState EntityStateAskStaffGuide::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateAskStaffGuide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateApplyExtraLife
        inline Ent::Gen::ActorState EntityStateApplyExtraLife::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateApplyExtraLife::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateAirControl
        inline Ent::Gen::ActorState EntityStateAirControl::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateAirControl::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateAimAt
        inline Ent::Gen::ActorState EntityStateAimAt::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateAimAt::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateAerialJump
        inline Ent::Gen::ActorState EntityStateAerialJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateAerialJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityStateAboutToBeHatched
        inline Ent::Gen::ActorState EntityStateAboutToBeHatched::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String EntityStateAboutToBeHatched::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateTryUpgradeShamanStaff
        inline Ent::Gen::ActorState ActorStateTryUpgradeShamanStaff::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateTryUpgradeShamanStaff::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateTryEquipShamanStaff
        inline Ent::Gen::ActorState ActorStateTryEquipShamanStaff::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateTryEquipShamanStaff::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateTeleportWhileMoving
        inline Ent::Gen::ActorState ActorStateTeleportWhileMoving::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateTeleportWhileMoving::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::ActorStateTeleportWhileMovingInputs ActorStateTeleportWhileMoving::input() const
        {
            return Ent::Gen::ActorStateTeleportWhileMovingInputs(node->at("input"));
        }
        // ActorStateTeleportToTarget
        inline Ent::Gen::ActorState ActorStateTeleportToTarget::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateTeleportToTarget::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateTeleport
        inline Ent::Gen::ActorStateTeleport_Inputs ActorStateTeleport::Inputs() const
        {
            return Ent::Gen::ActorStateTeleport_Inputs(node->at("Inputs"));
        }
        inline Ent::Gen::ActorState ActorStateTeleport::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateTeleport::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateTaunting
        inline Ent::Gen::ActorState ActorStateTaunting::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateTaunting::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateStopAttitudeAggressive
        inline Ent::Gen::ActorState ActorStateStopAttitudeAggressive::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateStopAttitudeAggressive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSpeedMultiplier
        inline Ent::Gen::Float ActorStateSpeedMultiplier::SpeedMultiplier() const
        {
            return Ent::Gen::Float(node->at("SpeedMultiplier"));
        }
        inline Ent::Gen::ActorState ActorStateSpeedMultiplier::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSpeedMultiplier::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSoulWaitingToRespawn
        inline Ent::Gen::EnergySide ActorStateSoulWaitingToRespawn::EnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::ActorState ActorStateSoulWaitingToRespawn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSoulWaitingToRespawn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSoulRespawn
        inline Ent::Gen::ActorState ActorStateSoulRespawn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSoulRespawn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSlope
        inline Ent::Gen::ActorState ActorStateSlope::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSlope::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSleeping
        inline Ent::Gen::ActorState ActorStateSleeping::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSleeping::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSkeletonPartPickUpState
        inline Ent::Gen::ActorState ActorStateSkeletonPartPickUpState::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSkeletonPartPickUpState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSkeletonPartPickUpRequest
        inline Ent::Gen::ActorState ActorStateSkeletonPartPickUpRequest::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSkeletonPartPickUpRequest::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSink
        inline Ent::Gen::ActorState ActorStateSink::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSink::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateShootingFlow
        inline Ent::Gen::ActorState ActorStateShootingFlow::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateShootingFlow::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateShapeshift
        inline Ent::Gen::ActorState ActorStateShapeshift::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateShapeshift::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateShamanItemPartState
        inline Ent::Gen::ActorState ActorStateShamanItemPartState::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateShamanItemPartState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateShamanItemLiving
        inline Ent::Gen::Bool ActorStateShamanItemLiving::End() const
        {
            return Ent::Gen::Bool(node->at("End"));
        }
        inline Ent::Gen::ActorState ActorStateShamanItemLiving::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateShamanItemLiving::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateSendMission
        inline Ent::Gen::ActorState ActorStateSendMission::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateSendMission::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateScreaming
        inline Ent::Gen::ActorState ActorStateScreaming::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateScreaming::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateRequestingWaiting
        inline Ent::Gen::ActorState ActorStateRequestingWaiting::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateRequestingWaiting::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateRequestingHealing
        inline Ent::Gen::ActorState ActorStateRequestingHealing::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateRequestingHealing::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateRecover
        inline Ent::Gen::ActorState ActorStateRecover::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateRecover::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateReactingLava
        inline Ent::Gen::ActorState ActorStateReactingLava::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateReactingLava::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStatePossessGPE
        inline Ent::Gen::ActorState ActorStatePossessGPE::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStatePossessGPE::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStatePossessFlocking
        inline Ent::Gen::ActorState ActorStatePossessFlocking::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStatePossessFlocking::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateNavigationMesh
        inline Ent::Gen::ActorState ActorStateNavigationMesh::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateNavigationMesh::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMovingSwim
        inline Ent::Gen::ActorState ActorStateMovingSwim::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMovingSwim::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMovingStandUp
        inline Ent::Gen::ActorState ActorStateMovingStandUp::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMovingStandUp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMovingRide
        inline Ent::Gen::ActorState ActorStateMovingRide::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMovingRide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMovingProne
        inline Ent::Gen::ActorState ActorStateMovingProne::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMovingProne::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMovingFly
        inline Ent::Gen::ActorState ActorStateMovingFly::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMovingFly::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMovingFall
        inline Ent::Gen::ActorState ActorStateMovingFall::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMovingFall::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMovingDive
        inline Ent::Gen::ActorState ActorStateMovingDive::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMovingDive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMovingClamber
        inline Ent::Gen::ActorState ActorStateMovingClamber::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMovingClamber::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMoveAlongBezier
        inline Ent::Gen::ActorState ActorStateMoveAlongBezier::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMoveAlongBezier::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateMeetingLava
        inline Ent::Gen::ActorState ActorStateMeetingLava::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateMeetingLava::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateLosingOxygen
        inline Ent::Gen::ActorState ActorStateLosingOxygen::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateLosingOxygen::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateLeavingLava
        inline Ent::Gen::ActorState ActorStateLeavingLava::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateLeavingLava::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateInvincible
        inline Ent::Gen::ActorState ActorStateInvincible::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateInvincible::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateIKConstraint
        inline Ent::Gen::ActorState ActorStateIKConstraint::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateIKConstraint::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateHoldingItem
        inline Ent::Gen::EntityRef ActorStateHoldingItem::InventoryEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("InventoryEntityRef"));
        }
        inline Ent::Gen::EntityRef ActorStateHoldingItem::ItemEntityRef() const
        {
            return Ent::Gen::EntityRef(node->at("ItemEntityRef"));
        }
        inline Ent::Gen::ActorState ActorStateHoldingItem::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateHoldingItem::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateHitEnergyWall
        inline Ent::Gen::ActorState ActorStateHitEnergyWall::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateHitEnergyWall::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateHeld
        inline Ent::Gen::ActorState ActorStateHeld::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateHeld::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateHasNoBody
        inline Ent::Gen::ActorState ActorStateHasNoBody::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateHasNoBody::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateForceAgainstSlope
        inline Ent::Gen::ActorState ActorStateForceAgainstSlope::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateForceAgainstSlope::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateFluidSlowDown
        inline Ent::Gen::ActorState ActorStateFluidSlowDown::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateFluidSlowDown::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateFlockingRigidbodyBeingActive
        inline Ent::Gen::ActorState ActorStateFlockingRigidbodyBeingActive::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateFlockingRigidbodyBeingActive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateFlockingLiving
        inline Ent::Gen::Bool ActorStateFlockingLiving::CanCreateHitRigidBodies() const
        {
            return Ent::Gen::Bool(node->at("CanCreateHitRigidBodies"));
        }
        inline Ent::Gen::Bool ActorStateFlockingLiving::Killed() const
        {
            return Ent::Gen::Bool(node->at("Killed"));
        }
        inline Ent::Gen::Bool ActorStateFlockingLiving::Regenerated() const
        {
            return Ent::Gen::Bool(node->at("Regenerated"));
        }
        inline Ent::Gen::ActorState ActorStateFlockingLiving::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateFlockingLiving::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateFlockingIndividualSpawning
        inline Ent::Gen::ActorState ActorStateFlockingIndividualSpawning::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateFlockingIndividualSpawning::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateFlockingChangingParams
        inline Ent::Gen::ActorStateFlockingChangingParams_Params ActorStateFlockingChangingParams::Params() const
        {
            return Ent::Gen::ActorStateFlockingChangingParams_Params(node->at("Params"));
        }
        inline Ent::Gen::ActorStateFlockingChangingParams_Params ActorStateFlockingChangingParams::ParamsBud() const
        {
            return Ent::Gen::ActorStateFlockingChangingParams_Params(node->at("ParamsBud"));
        }
        inline Ent::Gen::Bool ActorStateFlockingChangingParams::ShouldApplyBudParam() const
        {
            return Ent::Gen::Bool(node->at("ShouldApplyBudParam"));
        }
        inline Ent::Gen::Bool ActorStateFlockingChangingParams::ShouldApplyParam() const
        {
            return Ent::Gen::Bool(node->at("ShouldApplyParam"));
        }
        inline Ent::Gen::ActorState ActorStateFlockingChangingParams::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateFlockingChangingParams::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateFlockingAttackFlocking
        inline Ent::Gen::ActorState ActorStateFlockingAttackFlocking::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateFlockingAttackFlocking::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateExitingFly
        inline Ent::Gen::ActorState ActorStateExitingFly::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateExitingFly::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateEnergyShooting
        inline Ent::Gen::ActorState ActorStateEnergyShooting::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateEnergyShooting::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateDucking
        inline Ent::Gen::Bool ActorStateDucking::ExitRequired() const
        {
            return Ent::Gen::Bool(node->at("ExitRequired"));
        }
        inline Ent::Gen::ActorState ActorStateDucking::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateDucking::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateDodge3D
        inline Ent::Gen::ActorState ActorStateDodge3D::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateDodge3D::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateDisabledOut
        inline Ent::Gen::ActorState ActorStateDisabledOut::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateDisabledOut::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateDisabledIn
        inline Ent::Gen::ActorState ActorStateDisabledIn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateDisabledIn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateDisabled
        inline Ent::Gen::ActorState ActorStateDisabled::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateDisabled::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateDead
        inline Ent::Gen::ActorState ActorStateDead::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateDead::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateCreature
        inline Ent::Gen::Position ActorStateCreature::Position() const
        {
            return Ent::Gen::Position(node->at("Position"));
        }
        inline Ent::Gen::Quat ActorStateCreature::Rotation() const
        {
            return Ent::Gen::Quat(node->at("Rotation"));
        }
        inline Ent::Gen::ActorState ActorStateCreature::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateCreature::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateConvertWithFlow
        inline Ent::Gen::ActorState ActorStateConvertWithFlow::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateConvertWithFlow::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateChargeSpendLife
        inline Ent::Gen::ActorState ActorStateChargeSpendLife::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateChargeSpendLife::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateChangeEnergySide
        inline Ent::Gen::EnergySide ActorStateChangeEnergySide::EnergySide() const
        {
            return Ent::Gen::EnergySide(node->at("EnergySide"));
        }
        inline Ent::Gen::ActorState ActorStateChangeEnergySide::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateChangeEnergySide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateCatapultedLand
        inline Ent::Gen::ActorState ActorStateCatapultedLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateCatapultedLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateCatapulted
        inline Ent::Gen::Float ActorStateCatapulted::AirControlMultiplier() const
        {
            return Ent::Gen::Float(node->at("AirControlMultiplier"));
        }
        inline Ent::Gen::Float ActorStateCatapulted::FallHeightProtection() const
        {
            return Ent::Gen::Float(node->at("FallHeightProtection"));
        }
        inline Ent::Gen::ActorState ActorStateCatapulted::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateCatapulted::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateCallingFollower
        inline Ent::Gen::ActorState ActorStateCallingFollower::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateCallingFollower::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBuried
        inline Ent::Gen::ActorState ActorStateBuried::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBuried::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBittenShaked
        inline Ent::Gen::ActorState ActorStateBittenShaked::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBittenShaked::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBittenRegenerated
        inline Ent::Gen::ActorState ActorStateBittenRegenerated::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBittenRegenerated::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBiteJumpOut
        inline Ent::Gen::ActorState ActorStateBiteJumpOut::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBiteJumpOut::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBiteEntityLiving
        inline Ent::Gen::Int ActorStateBiteEntityLiving::State() const
        {
            return Ent::Gen::Int(node->at("State"));
        }
        inline Ent::Gen::ActorState ActorStateBiteEntityLiving::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBiteEntityLiving::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBendingTree
        inline Ent::Gen::Bool ActorStateBendingTree::AttackInput() const
        {
            return Ent::Gen::Bool(node->at("AttackInput"));
        }
        inline Ent::Gen::ActorState ActorStateBendingTree::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBendingTree::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBendingConstraint
        inline Ent::Gen::ActorState ActorStateBendingConstraint::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBendingConstraint::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingRided
        inline Ent::Gen::ActorState ActorStateBeingRided::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingRided::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingOnPossessedGPE
        inline Ent::Gen::ActorState ActorStateBeingOnPossessedGPE::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingOnPossessedGPE::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingOnMount
        inline Ent::Gen::MountableData ActorStateBeingOnMount::MountableData() const
        {
            return Ent::Gen::MountableData(node->at("MountableData"));
        }
        inline Ent::Gen::ActorState ActorStateBeingOnMount::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingOnMount::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingOnGroundFromImmersed
        inline Ent::Gen::ActorState ActorStateBeingOnGroundFromImmersed::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingOnGroundFromImmersed::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingOnGround
        inline Ent::Gen::ActorState ActorStateBeingOnGround::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingOnGround::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingInAir
        inline Ent::Gen::ActorState ActorStateBeingInAir::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingInAir::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingImmersedFromOnGround
        inline Ent::Gen::ActorState ActorStateBeingImmersedFromOnGround::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingImmersedFromOnGround::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingImmersedFromInAir
        inline Ent::Gen::ActorState ActorStateBeingImmersedFromInAir::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingImmersedFromInAir::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBeingImmersed
        inline Ent::Gen::ActorState ActorStateBeingImmersed::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBeingImmersed::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateBehaviorState
        inline Ent::Gen::Int ActorStateBehaviorState::State() const
        {
            return Ent::Gen::Int(node->at("State"));
        }
        inline Ent::Gen::ActorState ActorStateBehaviorState::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateBehaviorState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateAttitudeAggressive
        inline Ent::Gen::ActorState ActorStateAttitudeAggressive::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateAttitudeAggressive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateApplyHit
        inline Ent::Gen::ActorState ActorStateApplyHit::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateApplyHit::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateAnsweringCall
        inline Ent::Gen::ActorState ActorStateAnsweringCall::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateAnsweringCall::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateAlive
        inline Ent::Gen::Float ActorStateAlive::Damages() const
        {
            return Ent::Gen::Float(node->at("Damages"));
        }
        inline Ent::Gen::ActorState ActorStateAlive::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateAlive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateAimCharge
        inline Ent::Gen::ActorState ActorStateAimCharge::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActorStateAimCharge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionWait
        inline Ent::Gen::Bool ActionWait::ExitRequired() const
        {
            return Ent::Gen::Bool(node->at("ExitRequired"));
        }
        inline Ent::Gen::ActorState ActionWait::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionWait::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionUnmount
        inline Ent::Gen::MountableData ActionUnmount::MountableData() const
        {
            return Ent::Gen::MountableData(node->at("MountableData"));
        }
        inline Ent::Gen::ActorState ActionUnmount::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionUnmount::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 ActionUnmount::acrobaticDirection() const
        {
            return Ent::Gen::Vector3(node->at("acrobaticDirection"));
        }
        inline Ent::Gen::Bool ActionUnmount::acrobaticUnmount() const
        {
            return Ent::Gen::Bool(node->at("acrobaticUnmount"));
        }
        inline Ent::Gen::SpeedMode ActionUnmount::speedMode() const
        {
            return Ent::Gen::SpeedMode(node->at("speedMode"));
        }
        // ActionTriggerStandUp
        inline Ent::Gen::ActorState ActionTriggerStandUp::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionTriggerStandUp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionTriggerShamanVisionExit
        inline Ent::Gen::ActorState ActionTriggerShamanVisionExit::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionTriggerShamanVisionExit::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionTriggerCrouch
        inline Ent::Gen::ActorState ActionTriggerCrouch::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionTriggerCrouch::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionTopView
        inline Ent::Gen::ActorState ActionTopView::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionTopView::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionTalk
        inline Ent::Gen::ActorState ActionTalk::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionTalk::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionTakeOff
        inline Ent::Gen::ActorState ActionTakeOff::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionTakeOff::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStrafeTurn
        inline Ent::Gen::ActorState ActionStrafeTurn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionStrafeTurn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStrafe
        inline Ent::Gen::ActorState ActionStrafe::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionStrafe::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ActionStrafe::changeAnimationAllowed() const
        {
            return Ent::Gen::Bool(node->at("changeAnimationAllowed"));
        }
        inline Ent::Gen::Float ActionStrafe::speedrequired() const
        {
            return Ent::Gen::Float(node->at("speedrequired"));
        }
        inline Ent::Gen::Vector3 ActionStrafe::trajectoryDir() const
        {
            return Ent::Gen::Vector3(node->at("trajectoryDir"));
        }
        inline Ent::Gen::Vector3 ActionStrafe::visualDir() const
        {
            return Ent::Gen::Vector3(node->at("visualDir"));
        }
        // ActionStop
        inline Ent::Gen::ActorState ActionStop::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionStop::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStartRun
        inline Ent::Gen::ActorState ActionStartRun::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionStartRun::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionSlide
        inline Ent::Gen::ActorState ActionSlide::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionSlide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionShootBeam
        inline Ent::Gen::ActorState ActionShootBeam::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionShootBeam::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionShamanVision
        inline Ent::Gen::ActorState ActionShamanVision::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionShamanVision::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionScaleRider
        inline Ent::Gen::ActorState ActionScaleRider::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionScaleRider::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionRise
        inline Ent::Gen::ActorState ActionRise::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionRise::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionRiderStance
        inline Ent::Gen::ActorState ActionRiderStance::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionRiderStance::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionReviveMaskEffect
        inline Ent::Gen::ActorState ActionReviveMaskEffect::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionReviveMaskEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionRagdoll
        inline Ent::Gen::Int ActionRagdoll::State() const
        {
            return Ent::Gen::Int(node->at("State"));
        }
        inline Ent::Gen::ActorState ActionRagdoll::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionRagdoll::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionQuadStandUpStateOut
        inline Ent::Gen::ActorState ActionQuadStandUpStateOut::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionQuadStandUpStateOut::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionQuadStandUpStateIn
        inline Ent::Gen::ActorState ActionQuadStandUpStateIn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionQuadStandUpStateIn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionQuadStandUpState
        inline Ent::Gen::Bool ActionQuadStandUpState::ExitRequired() const
        {
            return Ent::Gen::Bool(node->at("ExitRequired"));
        }
        inline Ent::Gen::ActorState ActionQuadStandUpState::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionQuadStandUpState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionPushed
        inline Ent::Gen::ActorState ActionPushed::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionPushed::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionPropelled
        inline Ent::Gen::Float ActionPropelled::AirControlMultiplier() const
        {
            return Ent::Gen::Float(node->at("AirControlMultiplier"));
        }
        inline Ent::Gen::Float ActionPropelled::FallHeightProtection() const
        {
            return Ent::Gen::Float(node->at("FallHeightProtection"));
        }
        inline Ent::Gen::Bool ActionPropelled::InstantVisualOrientation() const
        {
            return Ent::Gen::Bool(node->at("InstantVisualOrientation"));
        }
        inline Ent::Gen::Vector3 ActionPropelled::PropelForce() const
        {
            return Ent::Gen::Vector3(node->at("PropelForce"));
        }
        inline Ent::Gen::ActorState ActionPropelled::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionPropelled::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionPlayAnim
        inline Ent::Gen::Float ActionPlayAnim::MaxTime() const
        {
            return Ent::Gen::Float(node->at("MaxTime"));
        }
        inline Ent::Gen::ActorState ActionPlayAnim::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionPlayAnim::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ActionPlayAnim::exitRequired() const
        {
            return Ent::Gen::Bool(node->at("exitRequired"));
        }
        // ActionPatinate
        inline Ent::Gen::ActorState ActionPatinate::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionPatinate::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionPathfindAndMove
        inline Ent::Gen::ActorState ActionPathfindAndMove::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionPathfindAndMove::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionOutfitSpecialState
        inline Ent::Gen::ActorState ActionOutfitSpecialState::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionOutfitSpecialState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionOrientMount
        inline Ent::Gen::ActorState ActionOrientMount::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionOrientMount::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 ActionOrientMount::m_direction() const
        {
            return Ent::Gen::Vector3(node->at("m_direction"));
        }
        // ActionMoveTo
        inline Ent::Gen::ActorState ActionMoveTo::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionMoveTo::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionMoveProjectile
        inline Ent::Gen::ActorState ActionMoveProjectile::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::ProjectileTrajectory ActionMoveProjectile::Trajectory() const
        {
            return Ent::Gen::ProjectileTrajectory(node->at("Trajectory"));
        }
        inline Ent::Gen::String ActionMoveProjectile::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionMove
        inline Ent::Gen::Vector3 ActionMove::CurrentDirection() const
        {
            return Ent::Gen::Vector3(node->at("CurrentDirection"));
        }
        inline Ent::Gen::Bool ActionMove::InstantReachSpeedRequired() const
        {
            return Ent::Gen::Bool(node->at("InstantReachSpeedRequired"));
        }
        inline Ent::Gen::Float ActionMove::Speed() const
        {
            return Ent::Gen::Float(node->at("Speed"));
        }
        inline Ent::Gen::SpeedMode ActionMove::SpeedModeDest() const
        {
            return Ent::Gen::SpeedMode(node->at("SpeedModeDest"));
        }
        inline Ent::Gen::ActorState ActionMove::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionMove::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionMountReception
        inline Ent::Gen::ActorState ActionMountReception::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionMountReception::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionLookAt
        inline Ent::Gen::ActorState ActionLookAt::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionLookAt::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionLandingMount
        inline Ent::Gen::ActorState ActionLandingMount::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionLandingMount::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionLand
        inline Ent::Gen::ActorState ActionLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionJumpOnto
        inline Ent::Gen::ActorState ActionJumpOnto::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionJumpOnto::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionJump
        inline Ent::Gen::ActorState ActionJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ActionJump::jumpAnalog() const
        {
            return Ent::Gen::Bool(node->at("jumpAnalog"));
        }
        // ActionIncarnated
        inline Ent::Gen::ActorState ActionIncarnated::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionIncarnated::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionIncarnate
        inline Ent::Gen::Bool ActionIncarnate::ExitRequired() const
        {
            return Ent::Gen::Bool(node->at("ExitRequired"));
        }
        inline Ent::Gen::String ActionIncarnate::GameEffectHash() const
        {
            return Ent::Gen::String(node->at("GameEffectHash"));
        }
        inline Ent::Gen::ActorState ActionIncarnate::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionIncarnate::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionIdle
        inline Ent::Gen::ActorState ActionIdle::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionIdle::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionHit
        inline Ent::Gen::Hit ActionHit::Hit() const
        {
            return Ent::Gen::Hit(node->at("Hit"));
        }
        inline Ent::Gen::Bool ActionHit::NoAnimNeeded() const
        {
            return Ent::Gen::Bool(node->at("NoAnimNeeded"));
        }
        inline Ent::Gen::ActorState ActionHit::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::Bool ActionHit::TransferAllowed() const
        {
            return Ent::Gen::Bool(node->at("TransferAllowed"));
        }
        inline Ent::Gen::String ActionHit::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionFlyUp
        inline Ent::Gen::ActorState ActionFlyUp::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionFlyUp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionFlyFlap
        inline Ent::Gen::ActorState ActionFlyFlap::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionFlyFlap::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionFlyDown
        inline Ent::Gen::ActorState ActionFlyDown::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionFlyDown::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionFlyDive
        inline Ent::Gen::ActorState ActionFlyDive::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionFlyDive::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionFlyCrash
        inline Ent::Gen::ActorState ActionFlyCrash::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionFlyCrash::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionDrop
        inline Ent::Gen::ActorState ActionDrop::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDrop::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionDrift
        inline Ent::Gen::ActorState ActionDrift::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDrift::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionDrawWeaponState
        inline Ent::Gen::ActorState ActionDrawWeaponState::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDrawWeaponState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ActionDrawWeaponState::m_longRangeWeapon() const
        {
            return Ent::Gen::Bool(node->at("m_longRangeWeapon"));
        }
        inline Ent::Gen::Bool ActionDrawWeaponState::m_noDrawAnimation() const
        {
            return Ent::Gen::Bool(node->at("m_noDrawAnimation"));
        }
        inline Ent::Gen::Bool ActionDrawWeaponState::m_offHandWeapon() const
        {
            return Ent::Gen::Bool(node->at("m_offHandWeapon"));
        }
        inline Ent::Gen::Float ActionDrawWeaponState::m_sheatheDuration() const
        {
            return Ent::Gen::Float(node->at("m_sheatheDuration"));
        }
        inline Ent::Gen::Bool ActionDrawWeaponState::m_shortDrawAnimation() const
        {
            return Ent::Gen::Bool(node->at("m_shortDrawAnimation"));
        }
        inline Ent::Gen::Float ActionDrawWeaponState::m_timer() const
        {
            return Ent::Gen::Float(node->at("m_timer"));
        }
        // ActionDrawWeapon
        inline Ent::Gen::ActorState ActionDrawWeapon::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDrawWeapon::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionDrawAttention
        inline Ent::Gen::ActorState ActionDrawAttention::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDrawAttention::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionDodge
        inline Ent::Gen::ActorState ActionDodge::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDodge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionDisableAndFollow
        inline Ent::Gen::ActorState ActionDisableAndFollow::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDisableAndFollow::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionDigUpTreasure
        inline Ent::Gen::ActorState ActionDigUpTreasure::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDigUpTreasure::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionDecelerate
        inline Ent::Gen::ActorState ActionDecelerate::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionDecelerate::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionCollapse
        inline Ent::Gen::ActorState ActionCollapse::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionCollapse::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionClimbEdge
        inline Ent::Gen::ActorState ActionClimbEdge::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionClimbEdge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::LedgePositionInfo ActionClimbEdge::ledgePosInfo() const
        {
            return Ent::Gen::LedgePositionInfo(node->at("ledgePosInfo"));
        }
        // ActionClamberRise
        inline Ent::Gen::ActorState ActionClamberRise::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionClamberRise::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionClamberMove
        inline Ent::Gen::ActorState ActionClamberMove::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionClamberMove::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionClamberLand
        inline Ent::Gen::ActorState ActionClamberLand::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionClamberLand::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionClamberJumpOff
        inline Ent::Gen::ActorState ActionClamberJumpOff::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionClamberJumpOff::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionClamberJump
        inline Ent::Gen::ActorState ActionClamberJump::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionClamberJump::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionClamberDropOff
        inline Ent::Gen::ActorState ActionClamberDropOff::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionClamberDropOff::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionCinematic
        inline Ent::Gen::ActorState ActionCinematic::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionCinematic::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionChosen
        inline Ent::Gen::Bool ActionChosen::ExitRequired() const
        {
            return Ent::Gen::Bool(node->at("ExitRequired"));
        }
        inline Ent::Gen::ActorState ActionChosen::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionChosen::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionChangeRidingSpot
        inline Ent::Gen::ActorState ActionChangeRidingSpot::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::Int ActionChangeRidingSpot::TargetHotspotDestID() const
        {
            return Ent::Gen::Int(node->at("TargetHotspotDestID"));
        }
        inline Ent::Gen::String ActionChangeRidingSpot::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionChangeMount
        inline Ent::Gen::ActorState ActionChangeMount::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionChangeMount::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionCentrifugal
        inline Ent::Gen::ActorState ActionCentrifugal::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionCentrifugal::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionCallForHelp
        inline Ent::Gen::ActorState ActionCallForHelp::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionCallForHelp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionBrake
        inline Ent::Gen::ActorState ActionBrake::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionBrake::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionBittenState
        inline Ent::Gen::ActorState ActionBittenState::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionBittenState::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionBiteOut
        inline Ent::Gen::ActorState ActionBiteOut::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionBiteOut::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionBiteIn
        inline Ent::Gen::ActorState ActionBiteIn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionBiteIn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionBite
        inline Ent::Gen::Float ActionBite::RadiusMultiplier() const
        {
            return Ent::Gen::Float(node->at("RadiusMultiplier"));
        }
        inline Ent::Gen::ActorState ActionBite::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionBite::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionAttackStomp
        inline Ent::Gen::ActorState ActionAttackStomp::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionAttackStomp::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionAttackJumpOnto
        inline Ent::Gen::Float ActionAttackJumpOnto::RadiusMultiplier() const
        {
            return Ent::Gen::Float(node->at("RadiusMultiplier"));
        }
        inline Ent::Gen::ActorState ActionAttackJumpOnto::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionAttackJumpOnto::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ConditionalRigidityAttribute_Conditions
        inline PrimArray<Ent::Gen::ActorCategory> ConditionalRigidityAttribute_Conditions::ActorCategories() const
        {
            return PrimArray<Ent::Gen::ActorCategory>(node->at("ActorCategories"));
        }
        inline PrimArray<Ent::Gen::String> ConditionalRigidityAttribute_Conditions::ActorStates() const
        {
            return PrimArray<Ent::Gen::String>(node->at("ActorStates"));
        }
        inline Ent::Gen::Vector2 ConditionalRigidityAttribute_Conditions::AngularVelocityFactorRange() const
        {
            return Ent::Gen::Vector2(node->at("AngularVelocityFactorRange"));
        }
        inline Ent::Gen::Vector2 ConditionalRigidityAttribute_Conditions::DirectionDotRange() const
        {
            return Ent::Gen::Vector2(node->at("DirectionDotRange"));
        }
        inline Ent::Gen::Vector2 ConditionalRigidityAttribute_Conditions::LinearVelocityFactorRange() const
        {
            return Ent::Gen::Vector2(node->at("LinearVelocityFactorRange"));
        }
        inline Ent::Gen::String ConditionalRigidityAttribute_Conditions::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ConditionalRigidityAttribute
        inline Ent::Gen::ConditionalRigidityAttribute_Attributes ConditionalRigidityAttribute::Attributes() const
        {
            return Ent::Gen::ConditionalRigidityAttribute_Attributes(node->at("Attributes"));
        }
        inline Ent::Gen::ConditionalRigidityAttribute_Conditions ConditionalRigidityAttribute::Conditions() const
        {
            return Ent::Gen::ConditionalRigidityAttribute_Conditions(node->at("Conditions"));
        }
        inline Ent::Gen::Bool ConditionalRigidityAttribute::Default() const
        {
            return Ent::Gen::Bool(node->at("Default"));
        }
        inline Ent::Gen::String ConditionalRigidityAttribute::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String ConditionalRigidityAttribute::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimationTailConstraintsGD
        inline Ent::Gen::Float AnimationTailConstraintsGD::AngularSpeedMaxForSpeedModeFurious() const
        {
            return Ent::Gen::Float(node->at("AngularSpeedMaxForSpeedModeFurious"));
        }
        inline Ent::Gen::Float AnimationTailConstraintsGD::AngularSpeedMaxForSpeedModeNone() const
        {
            return Ent::Gen::Float(node->at("AngularSpeedMaxForSpeedModeNone"));
        }
        inline Ent::Gen::Bool AnimationTailConstraintsGD::BoneInjectDirectionFromUseAmplitudeFactor() const
        {
            return Ent::Gen::Bool(node->at("BoneInjectDirectionFromUseAmplitudeFactor"));
        }
        inline Ent::Gen::String AnimationTailConstraintsGD::BoneNameEnd() const
        {
            return Ent::Gen::String(node->at("BoneNameEnd"));
        }
        inline Ent::Gen::String AnimationTailConstraintsGD::BoneNameInjectDirectionFrom() const
        {
            return Ent::Gen::String(node->at("BoneNameInjectDirectionFrom"));
        }
        inline Ent::Gen::String AnimationTailConstraintsGD::BoneNameStart() const
        {
            return Ent::Gen::String(node->at("BoneNameStart"));
        }
        inline Array<Ent::Gen::Collider> AnimationTailConstraintsGD::Colliders() const
        {
            return Array<Ent::Gen::Collider>(node->at("Colliders"));
        }
        inline Ent::Gen::Float AnimationTailConstraintsGD::CollidersRadiusFactorGrounded() const
        {
            return Ent::Gen::Float(node->at("CollidersRadiusFactorGrounded"));
        }
        inline Ent::Gen::Float AnimationTailConstraintsGD::CompensateSegmentStretchFactor() const
        {
            return Ent::Gen::Float(node->at("CompensateSegmentStretchFactor"));
        }
        inline Array<Ent::Gen::ConditionalRigidityAttribute> AnimationTailConstraintsGD::ConditionalRigidityAttributes() const
        {
            return Array<Ent::Gen::ConditionalRigidityAttribute>(node->at("ConditionalRigidityAttributes"));
        }
        inline Array<Ent::Gen::StickToGround> AnimationTailConstraintsGD::StickToGrounds() const
        {
            return Array<Ent::Gen::StickToGround>(node->at("StickToGrounds"));
        }
        inline Ent::Gen::Float AnimationTailConstraintsGD::StickToGroundsGravity() const
        {
            return Ent::Gen::Float(node->at("StickToGroundsGravity"));
        }
        inline Ent::Gen::Float AnimationTailConstraintsGD::StickToGroundsGravityUnderwater() const
        {
            return Ent::Gen::Float(node->at("StickToGroundsGravityUnderwater"));
        }
        inline Ent::Gen::Float AnimationTailConstraintsGD::StickToGroundsRadiusFactorDead() const
        {
            return Ent::Gen::Float(node->at("StickToGroundsRadiusFactorDead"));
        }
        inline Ent::Gen::ComponentGD AnimationTailConstraintsGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AnimationTailConstraintsGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionTurn_Inputs
        inline Ent::Gen::String ActionTurn_Inputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool ActionTurn_Inputs::checkDir() const
        {
            return Ent::Gen::Bool(node->at("checkDir"));
        }
        inline Ent::Gen::Vector3 ActionTurn_Inputs::directionREQUIRED() const
        {
            return Ent::Gen::Vector3(node->at("directionREQUIRED"));
        }
        inline Ent::Gen::Bool ActionTurn_Inputs::speedModeUpdateAllowed() const
        {
            return Ent::Gen::Bool(node->at("speedModeUpdateAllowed"));
        }
        inline Ent::Gen::Bool ActionTurn_Inputs::useRequest() const
        {
            return Ent::Gen::Bool(node->at("useRequest"));
        }
        // ActionTurn
        inline Ent::Gen::ActorState ActionTurn::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionTurn::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Vector3 ActionTurn::direction() const
        {
            return Ent::Gen::Vector3(node->at("direction"));
        }
        inline Ent::Gen::ActionTurn_Inputs ActionTurn::inputs() const
        {
            return Ent::Gen::ActionTurn_Inputs(node->at("inputs"));
        }
        inline Ent::Gen::Float ActionTurn::speedAtStart() const
        {
            return Ent::Gen::Float(node->at("speedAtStart"));
        }
        inline Ent::Gen::SpeedMode ActionTurn::speedModeRequired() const
        {
            return Ent::Gen::SpeedMode(node->at("speedModeRequired"));
        }
        inline Ent::Gen::SpeedMode ActionTurn::speedModeStart() const
        {
            return Ent::Gen::SpeedMode(node->at("speedModeStart"));
        }
        // ActionStateArbiter_StateStateDecision
        inline Ent::Gen::String ActionStateArbiter_StateStateDecision::Current() const
        {
            return Ent::Gen::String(node->at("Current"));
        }
        inline Ent::Gen::ActorStateArbiterDecision ActionStateArbiter_StateStateDecision::Decision() const
        {
            return Ent::Gen::ActorStateArbiterDecision(node->at("Decision"));
        }
        inline Ent::Gen::String ActionStateArbiter_StateStateDecision::New() const
        {
            return Ent::Gen::String(node->at("New"));
        }
        inline Ent::Gen::String ActionStateArbiter_StateStateDecision::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_StateStateDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_StateStateDecision> ActionStateArbiter_StateStateDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_StateStateDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_StateStateDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_StateOrderPass
        inline Array<Ent::Gen::Tuple<Ent::Gen::String, Ent::Gen::String>> ActionStateArbiter_StateOrderPass::Dependencies() const
        {
            return Array<Ent::Gen::Tuple<Ent::Gen::String, Ent::Gen::String>>(node->at("Dependencies"));
        }
        inline Ent::Gen::String ActionStateArbiter_StateOrderPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_StateCategoryDecision
        inline Ent::Gen::String ActionStateArbiter_StateCategoryDecision::Current() const
        {
            return Ent::Gen::String(node->at("Current"));
        }
        inline Ent::Gen::ActorStateArbiterDecision ActionStateArbiter_StateCategoryDecision::Decision() const
        {
            return Ent::Gen::ActorStateArbiterDecision(node->at("Decision"));
        }
        inline Ent::Gen::String ActionStateArbiter_StateCategoryDecision::New() const
        {
            return Ent::Gen::String(node->at("New"));
        }
        inline Ent::Gen::String ActionStateArbiter_StateCategoryDecision::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_StateCategoryDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_StateCategoryDecision> ActionStateArbiter_StateCategoryDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_StateCategoryDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_StateCategoryDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_StateAllDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_StateCategoryDecision> ActionStateArbiter_StateAllDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_StateCategoryDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_StateAllDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_CategoryStateDecision
        inline Ent::Gen::String ActionStateArbiter_CategoryStateDecision::Current() const
        {
            return Ent::Gen::String(node->at("Current"));
        }
        inline Ent::Gen::ActorStateArbiterDecision ActionStateArbiter_CategoryStateDecision::Decision() const
        {
            return Ent::Gen::ActorStateArbiterDecision(node->at("Decision"));
        }
        inline Ent::Gen::String ActionStateArbiter_CategoryStateDecision::New() const
        {
            return Ent::Gen::String(node->at("New"));
        }
        inline Ent::Gen::String ActionStateArbiter_CategoryStateDecision::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_CategoryStateDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_CategoryStateDecision> ActionStateArbiter_CategoryStateDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_CategoryStateDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_CategoryStateDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_CategoryOrderPass
        inline PrimArray<Ent::Gen::String> ActionStateArbiter_CategoryOrderPass::Order() const
        {
            return PrimArray<Ent::Gen::String>(node->at("Order"));
        }
        inline Ent::Gen::String ActionStateArbiter_CategoryOrderPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_CategoryCategoryDecision
        inline Ent::Gen::String ActionStateArbiter_CategoryCategoryDecision::Current() const
        {
            return Ent::Gen::String(node->at("Current"));
        }
        inline Ent::Gen::ActorStateArbiterDecision ActionStateArbiter_CategoryCategoryDecision::Decision() const
        {
            return Ent::Gen::ActorStateArbiterDecision(node->at("Decision"));
        }
        inline Ent::Gen::String ActionStateArbiter_CategoryCategoryDecision::New() const
        {
            return Ent::Gen::String(node->at("New"));
        }
        inline Ent::Gen::String ActionStateArbiter_CategoryCategoryDecision::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_PairDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_PairDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_PairDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_CategoryCategoryDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_CategoryCategoryDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_CategoryCategoryDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_CategoryAllDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_CategoryAllDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_CategoryAllDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_AllStateDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_CategoryStateDecision> ActionStateArbiter_AllStateDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_CategoryStateDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_AllStateDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_AllCategoryDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_AllCategoryDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_AllCategoryDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter_AllAllDecisionPass
        inline Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_AllAllDecisionPass::Decisions() const
        {
            return Array<Ent::Gen::ActionStateArbiter_CategoryCategoryDecision>(node->at("Decisions"));
        }
        inline Ent::Gen::String ActionStateArbiter_AllAllDecisionPass::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStateArbiter
        inline Ent::Gen::ActionStateArbiter_AllAllDecisionPass ActionStateArbiter::AllAll() const
        {
            return Ent::Gen::ActionStateArbiter_AllAllDecisionPass(node->at("AllAll"));
        }
        inline Ent::Gen::ActionStateArbiter_AllCategoryDecisionPass ActionStateArbiter::AllCategory() const
        {
            return Ent::Gen::ActionStateArbiter_AllCategoryDecisionPass(node->at("AllCategory"));
        }
        inline Ent::Gen::ActionStateArbiter_AllStateDecisionPass ActionStateArbiter::AllState() const
        {
            return Ent::Gen::ActionStateArbiter_AllStateDecisionPass(node->at("AllState"));
        }
        inline Ent::Gen::ActionStateArbiter_CategoryAllDecisionPass ActionStateArbiter::CategoryAll() const
        {
            return Ent::Gen::ActionStateArbiter_CategoryAllDecisionPass(node->at("CategoryAll"));
        }
        inline Ent::Gen::ActionStateArbiter_CategoryCategoryDecisionPass ActionStateArbiter::CategoryCategory() const
        {
            return Ent::Gen::ActionStateArbiter_CategoryCategoryDecisionPass(node->at("CategoryCategory"));
        }
        inline PrimArray<Ent::Gen::ActorCategory> ActionStateArbiter::CategoryNeedingRelay() const
        {
            return PrimArray<Ent::Gen::ActorCategory>(node->at("CategoryNeedingRelay"));
        }
        inline Ent::Gen::ActionStateArbiter_CategoryOrderPass ActionStateArbiter::CategoryOrder() const
        {
            return Ent::Gen::ActionStateArbiter_CategoryOrderPass(node->at("CategoryOrder"));
        }
        inline Ent::Gen::ActionStateArbiter_CategoryStateDecisionPass ActionStateArbiter::CategoryState() const
        {
            return Ent::Gen::ActionStateArbiter_CategoryStateDecisionPass(node->at("CategoryState"));
        }
        inline Ent::Gen::ActionStateArbiter_PairDecisionPass ActionStateArbiter::Pair() const
        {
            return Ent::Gen::ActionStateArbiter_PairDecisionPass(node->at("Pair"));
        }
        inline Ent::Gen::ActionStateArbiter_StateAllDecisionPass ActionStateArbiter::StateAll() const
        {
            return Ent::Gen::ActionStateArbiter_StateAllDecisionPass(node->at("StateAll"));
        }
        inline Ent::Gen::ActionStateArbiter_StateCategoryDecisionPass ActionStateArbiter::StateCategory() const
        {
            return Ent::Gen::ActionStateArbiter_StateCategoryDecisionPass(node->at("StateCategory"));
        }
        inline Ent::Gen::ActionStateArbiter_StateOrderPass ActionStateArbiter::StateOrder() const
        {
            return Ent::Gen::ActionStateArbiter_StateOrderPass(node->at("StateOrder"));
        }
        inline Ent::Gen::ActionStateArbiter_StateStateDecisionPass ActionStateArbiter::StateState() const
        {
            return Ent::Gen::ActionStateArbiter_StateStateDecisionPass(node->at("StateState"));
        }
        inline Ent::Gen::String ActionStateArbiter::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionStackFilter
        // ActionStackFilterRide
        inline Ent::Gen::ActionStackFilter ActionStackFilterRide::Super() const
        {
            return Ent::Gen::ActionStackFilter(node->at("Super"));
        }
        inline Ent::Gen::String ActionStackFilterRide::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionShakeOffInputs
        inline Ent::Gen::Bool ActionShakeOffInputs::TryEjectAllBiters() const
        {
            return Ent::Gen::Bool(node->at("TryEjectAllBiters"));
        }
        inline Ent::Gen::Bool ActionShakeOffInputs::UseRandomDirection() const
        {
            return Ent::Gen::Bool(node->at("UseRandomDirection"));
        }
        inline Ent::Gen::String ActionShakeOffInputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionShakeOff
        inline Ent::Gen::ActionShakeOffInputs ActionShakeOff::Inputs() const
        {
            return Ent::Gen::ActionShakeOffInputs(node->at("Inputs"));
        }
        inline Ent::Gen::ActorState ActionShakeOff::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionShakeOff::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // InGameCameraParams
        inline Ent::Gen::Float InGameCameraParams::ActivationDelay() const
        {
            return Ent::Gen::Float(node->at("ActivationDelay"));
        }
        inline Ent::Gen::ActionMode InGameCameraParams::AnimAction() const
        {
            return Ent::Gen::ActionMode(node->at("AnimAction"));
        }
        inline Ent::Gen::AnimTag InGameCameraParams::AnimTag() const
        {
            return Ent::Gen::AnimTag(node->at("AnimTag"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationCameraSightTime() const
        {
            return Ent::Gen::Float(node->at("AnticipationCameraSightTime"));
        }
        inline Ent::Gen::Bool InGameCameraParams::AnticipationForceReset() const
        {
            return Ent::Gen::Bool(node->at("AnticipationForceReset"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationMaxPitch() const
        {
            return Ent::Gen::Float(node->at("AnticipationMaxPitch"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationMaxYaw() const
        {
            return Ent::Gen::Float(node->at("AnticipationMaxYaw"));
        }
        inline Ent::Gen::Bool InGameCameraParams::AnticipationNoMoveLock() const
        {
            return Ent::Gen::Bool(node->at("AnticipationNoMoveLock"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationPitchAngleMax() const
        {
            return Ent::Gen::Float(node->at("AnticipationPitchAngleMax"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationPitchAngleMin() const
        {
            return Ent::Gen::Float(node->at("AnticipationPitchAngleMin"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationSmooth() const
        {
            return Ent::Gen::Float(node->at("AnticipationSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationYawAngleMax() const
        {
            return Ent::Gen::Float(node->at("AnticipationYawAngleMax"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationYawAngleMin() const
        {
            return Ent::Gen::Float(node->at("AnticipationYawAngleMin"));
        }
        inline Ent::Gen::Float InGameCameraParams::AnticipationZSmooth() const
        {
            return Ent::Gen::Float(node->at("AnticipationZSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::AntipationYawSpeedForce() const
        {
            return Ent::Gen::Float(node->at("AntipationYawSpeedForce"));
        }
        inline Ent::Gen::Float InGameCameraParams::AntipationYawSpeedForceSmooth() const
        {
            return Ent::Gen::Float(node->at("AntipationYawSpeedForceSmooth"));
        }
        inline Ent::Gen::AutoRotationType InGameCameraParams::AutoRotate() const
        {
            return Ent::Gen::AutoRotationType(node->at("AutoRotate"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotateIdealPitch() const
        {
            return Ent::Gen::Float(node->at("AutoRotateIdealPitch"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotatePitchMaxSpeed() const
        {
            return Ent::Gen::Float(node->at("AutoRotatePitchMaxSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotatePitchMinAngle() const
        {
            return Ent::Gen::Float(node->at("AutoRotatePitchMinAngle"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotatePitchSpeedSmooth() const
        {
            return Ent::Gen::Float(node->at("AutoRotatePitchSpeedSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotateRollFactor() const
        {
            return Ent::Gen::Float(node->at("AutoRotateRollFactor"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotateUnlockPitchDelta() const
        {
            return Ent::Gen::Float(node->at("AutoRotateUnlockPitchDelta"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotateUnlockYawDelta() const
        {
            return Ent::Gen::Float(node->at("AutoRotateUnlockYawDelta"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotateYawMaxSpeed() const
        {
            return Ent::Gen::Float(node->at("AutoRotateYawMaxSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotateYawMinAngle() const
        {
            return Ent::Gen::Float(node->at("AutoRotateYawMinAngle"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotateYawMinSpeed() const
        {
            return Ent::Gen::Float(node->at("AutoRotateYawMinSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::AutoRotateYawSpeedSmooth() const
        {
            return Ent::Gen::Float(node->at("AutoRotateYawSpeedSmooth"));
        }
        inline Ent::Gen::CameraType InGameCameraParams::CameraType() const
        {
            return Ent::Gen::CameraType(node->at("CameraType"));
        }
        inline Ent::Gen::Float InGameCameraParams::CollisionBackToPosSpeed() const
        {
            return Ent::Gen::Float(node->at("CollisionBackToPosSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::CollisionCorrectionSpeed() const
        {
            return Ent::Gen::Float(node->at("CollisionCorrectionSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::CollisionWantedNearPlane() const
        {
            return Ent::Gen::Float(node->at("CollisionWantedNearPlane"));
        }
        inline Ent::Gen::Float InGameCameraParams::CollisionZOffset() const
        {
            return Ent::Gen::Float(node->at("CollisionZOffset"));
        }
        inline Ent::Gen::Float InGameCameraParams::CollisionZOffsetMaxRadius() const
        {
            return Ent::Gen::Float(node->at("CollisionZOffsetMaxRadius"));
        }
        inline Ent::Gen::Float InGameCameraParams::CollisionZOffsetSmooth() const
        {
            return Ent::Gen::Float(node->at("CollisionZOffsetSmooth"));
        }
        inline Ent::Gen::Bool InGameCameraParams::DOFEnabled() const
        {
            return Ent::Gen::Bool(node->at("DOFEnabled"));
        }
        inline Ent::Gen::Float InGameCameraParams::DOFFarStart() const
        {
            return Ent::Gen::Float(node->at("DOFFarStart"));
        }
        inline Ent::Gen::Float InGameCameraParams::DOFFarStop() const
        {
            return Ent::Gen::Float(node->at("DOFFarStop"));
        }
        inline Ent::Gen::Float InGameCameraParams::DOFMultiplier() const
        {
            return Ent::Gen::Float(node->at("DOFMultiplier"));
        }
        inline Ent::Gen::Float InGameCameraParams::DOFNearStart() const
        {
            return Ent::Gen::Float(node->at("DOFNearStart"));
        }
        inline Ent::Gen::Float InGameCameraParams::DOFNearStop() const
        {
            return Ent::Gen::Float(node->at("DOFNearStop"));
        }
        inline Ent::Gen::Float InGameCameraParams::DecenteringPositionX() const
        {
            return Ent::Gen::Float(node->at("DecenteringPositionX"));
        }
        inline Ent::Gen::Float InGameCameraParams::DecenteringPositionY() const
        {
            return Ent::Gen::Float(node->at("DecenteringPositionY"));
        }
        inline Ent::Gen::Float InGameCameraParams::DecenteringPositionZ() const
        {
            return Ent::Gen::Float(node->at("DecenteringPositionZ"));
        }
        inline Ent::Gen::Float InGameCameraParams::DistanceModifierRamp() const
        {
            return Ent::Gen::Float(node->at("DistanceModifierRamp"));
        }
        inline Ent::Gen::Float InGameCameraParams::DodgeLatenessSmooth() const
        {
            return Ent::Gen::Float(node->at("DodgeLatenessSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::DodgeLatenessSmoothThreshold() const
        {
            return Ent::Gen::Float(node->at("DodgeLatenessSmoothThreshold"));
        }
        inline Ent::Gen::Float InGameCameraParams::FOV() const
        {
            return Ent::Gen::Float(node->at("FOV"));
        }
        inline Ent::Gen::Float InGameCameraParams::FOVRamp() const
        {
            return Ent::Gen::Float(node->at("FOVRamp"));
        }
        inline Ent::Gen::Float InGameCameraParams::FightDistanceOffset() const
        {
            return Ent::Gen::Float(node->at("FightDistanceOffset"));
        }
        inline Ent::Gen::Float InGameCameraParams::FightDistanceOffsetSpeed() const
        {
            return Ent::Gen::Float(node->at("FightDistanceOffsetSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::FightRotationDuration() const
        {
            return Ent::Gen::Float(node->at("FightRotationDuration"));
        }
        inline Ent::Gen::Float InGameCameraParams::FightRotationInDuration() const
        {
            return Ent::Gen::Float(node->at("FightRotationInDuration"));
        }
        inline Ent::Gen::Float InGameCameraParams::FightRotationOutDuration() const
        {
            return Ent::Gen::Float(node->at("FightRotationOutDuration"));
        }
        inline Ent::Gen::Float InGameCameraParams::FightRotationSpeed() const
        {
            return Ent::Gen::Float(node->at("FightRotationSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::FightSpeedRationImpactCoeff() const
        {
            return Ent::Gen::Float(node->at("FightSpeedRationImpactCoeff"));
        }
        inline Ent::Gen::Position InGameCameraParams::InterestPointPosition() const
        {
            return Ent::Gen::Position(node->at("InterestPointPosition"));
        }
        inline Ent::Gen::Vector3 InGameCameraParams::InterestPointSight() const
        {
            return Ent::Gen::Vector3(node->at("InterestPointSight"));
        }
        inline Ent::Gen::Float InGameCameraParams::InterestPointSightAngleSpeed() const
        {
            return Ent::Gen::Float(node->at("InterestPointSightAngleSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::InterestPointTimeToReachMaxWeight() const
        {
            return Ent::Gen::Float(node->at("InterestPointTimeToReachMaxWeight"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoyAccelerationBoostChangingSideH() const
        {
            return Ent::Gen::Float(node->at("JoyAccelerationBoostChangingSideH"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoyAccelerationBoostChangingSideV() const
        {
            return Ent::Gen::Float(node->at("JoyAccelerationBoostChangingSideV"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoyAccelerationH() const
        {
            return Ent::Gen::Float(node->at("JoyAccelerationH"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoyAccelerationV() const
        {
            return Ent::Gen::Float(node->at("JoyAccelerationV"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoyDecelerationH() const
        {
            return Ent::Gen::Float(node->at("JoyDecelerationH"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoyDecelerationV() const
        {
            return Ent::Gen::Float(node->at("JoyDecelerationV"));
        }
        inline Ent::Gen::ScaleConverter InGameCameraParams::JoyRotationScaleConverterH() const
        {
            return Ent::Gen::ScaleConverter(node->at("JoyRotationScaleConverterH"));
        }
        inline Ent::Gen::ScaleConverter InGameCameraParams::JoyRotationScaleConverterV() const
        {
            return Ent::Gen::ScaleConverter(node->at("JoyRotationScaleConverterV"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoySpeedFactor() const
        {
            return Ent::Gen::Float(node->at("JoySpeedFactor"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoySpeedMaxH() const
        {
            return Ent::Gen::Float(node->at("JoySpeedMaxH"));
        }
        inline Ent::Gen::Float InGameCameraParams::JoySpeedMaxV() const
        {
            return Ent::Gen::Float(node->at("JoySpeedMaxV"));
        }
        inline Ent::Gen::Bool InGameCameraParams::JumpEnable() const
        {
            return Ent::Gen::Bool(node->at("JumpEnable"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockDecenteringDuration() const
        {
            return Ent::Gen::Float(node->at("LockDecenteringDuration"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockDistSpeed() const
        {
            return Ent::Gen::Float(node->at("LockDistSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockEndTransitionThreshold() const
        {
            return Ent::Gen::Float(node->at("LockEndTransitionThreshold"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockLowSpeedDist() const
        {
            return Ent::Gen::Float(node->at("LockLowSpeedDist"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockMaxDecentering() const
        {
            return Ent::Gen::Float(node->at("LockMaxDecentering"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockMaxDist() const
        {
            return Ent::Gen::Float(node->at("LockMaxDist"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockMinCameraDist() const
        {
            return Ent::Gen::Float(node->at("LockMinCameraDist"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockOffsetTransitionSmooth() const
        {
            return Ent::Gen::Float(node->at("LockOffsetTransitionSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockPitchSpeed() const
        {
            return Ent::Gen::Float(node->at("LockPitchSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockPitchSpeedClose() const
        {
            return Ent::Gen::Float(node->at("LockPitchSpeedClose"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockSizeRatioThreshold() const
        {
            return Ent::Gen::Float(node->at("LockSizeRatioThreshold"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockTransitionSmooth() const
        {
            return Ent::Gen::Float(node->at("LockTransitionSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockTriggerDist() const
        {
            return Ent::Gen::Float(node->at("LockTriggerDist"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockYawSpeed() const
        {
            return Ent::Gen::Float(node->at("LockYawSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::LockYawSpeedClose() const
        {
            return Ent::Gen::Float(node->at("LockYawSpeedClose"));
        }
        inline Ent::Gen::Float InGameCameraParams::LookAtOffsetPitch() const
        {
            return Ent::Gen::Float(node->at("LookAtOffsetPitch"));
        }
        inline Ent::Gen::Float InGameCameraParams::LookAtOffsetYaw() const
        {
            return Ent::Gen::Float(node->at("LookAtOffsetYaw"));
        }
        inline Ent::Gen::Float InGameCameraParams::NearPlane() const
        {
            return Ent::Gen::Float(node->at("NearPlane"));
        }
        inline Ent::Gen::Float InGameCameraParams::PitchConstraintAnticipation() const
        {
            return Ent::Gen::Float(node->at("PitchConstraintAnticipation"));
        }
        inline Ent::Gen::Float InGameCameraParams::PitchConstraintMax() const
        {
            return Ent::Gen::Float(node->at("PitchConstraintMax"));
        }
        inline Ent::Gen::Float InGameCameraParams::PitchConstraintMin() const
        {
            return Ent::Gen::Float(node->at("PitchConstraintMin"));
        }
        inline Ent::Gen::Float InGameCameraParams::PitchToFOV() const
        {
            return Ent::Gen::Float(node->at("PitchToFOV"));
        }
        inline Ent::Gen::Float InGameCameraParams::SpacePitchOffset() const
        {
            return Ent::Gen::Float(node->at("SpacePitchOffset"));
        }
        inline Ent::Gen::ScaleConverter InGameCameraParams::SpeedToDistanceModifier() const
        {
            return Ent::Gen::ScaleConverter(node->at("SpeedToDistanceModifier"));
        }
        inline Ent::Gen::ScaleConverter InGameCameraParams::SpeedToFOV() const
        {
            return Ent::Gen::ScaleConverter(node->at("SpeedToFOV"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetBrutalStopSmoothThreshold() const
        {
            return Ent::Gen::Float(node->at("TargetBrutalStopSmoothThreshold"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetDeadZoneRadius() const
        {
            return Ent::Gen::Float(node->at("TargetDeadZoneRadius"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetDistance() const
        {
            return Ent::Gen::Float(node->at("TargetDistance"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetJumpSmooth() const
        {
            return Ent::Gen::Float(node->at("TargetJumpSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetMaxSpeed() const
        {
            return Ent::Gen::Float(node->at("TargetMaxSpeed"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetMinSmooth() const
        {
            return Ent::Gen::Float(node->at("TargetMinSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetOffsetX() const
        {
            return Ent::Gen::Float(node->at("TargetOffsetX"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetOffsetY() const
        {
            return Ent::Gen::Float(node->at("TargetOffsetY"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetOffsetZ() const
        {
            return Ent::Gen::Float(node->at("TargetOffsetZ"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetSmoothMultiplier() const
        {
            return Ent::Gen::Float(node->at("TargetSmoothMultiplier"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetSmoothMultiplierZ() const
        {
            return Ent::Gen::Float(node->at("TargetSmoothMultiplierZ"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetXOffsetFromYawForce() const
        {
            return Ent::Gen::Float(node->at("TargetXOffsetFromYawForce"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetXOffsetFromYawSmooth() const
        {
            return Ent::Gen::Float(node->at("TargetXOffsetFromYawSmooth"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetZOffsetFromPitchForce() const
        {
            return Ent::Gen::Float(node->at("TargetZOffsetFromPitchForce"));
        }
        inline Ent::Gen::Float InGameCameraParams::TargetZOffsetFromPitchSmooth() const
        {
            return Ent::Gen::Float(node->at("TargetZOffsetFromPitchSmooth"));
        }
        inline Ent::Gen::Bool InGameCameraParams::UseSpeedToFOV() const
        {
            return Ent::Gen::Bool(node->at("UseSpeedToFOV"));
        }
        inline Ent::Gen::Float InGameCameraParams::WorldZOffset() const
        {
            return Ent::Gen::Float(node->at("WorldZOffset"));
        }
        inline Ent::Gen::String InGameCameraParams::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool InGameCameraParams::defaultParamsRequired() const
        {
            return Ent::Gen::Bool(node->at("defaultParamsRequired"));
        }
        // InGameCameraObservationParams
        inline Ent::Gen::String InGameCameraObservationParams::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::aim() const
        {
            return Ent::Gen::InGameCameraParams(node->at("aim"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::fps() const
        {
            return Ent::Gen::InGameCameraParams(node->at("fps"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::lock() const
        {
            return Ent::Gen::InGameCameraParams(node->at("lock"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::motionconstraint() const
        {
            return Ent::Gen::InGameCameraParams(node->at("motionconstraint"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::shoulder() const
        {
            return Ent::Gen::InGameCameraParams(node->at("shoulder"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::sightconstraint() const
        {
            return Ent::Gen::InGameCameraParams(node->at("sightconstraint"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::strongattack() const
        {
            return Ent::Gen::InGameCameraParams(node->at("strongattack"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::thirdperson() const
        {
            return Ent::Gen::InGameCameraParams(node->at("thirdperson"));
        }
        inline Ent::Gen::InGameCameraParams InGameCameraObservationParams::zoom() const
        {
            return Ent::Gen::InGameCameraParams(node->at("zoom"));
        }
        // InGameCameraData
        inline Ent::Gen::String InGameCameraData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::cinematic() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("cinematic"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::clamber() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("clamber"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::crouch() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("crouch"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::dive() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("dive"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::fall() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("fall"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::fight() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("fight"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::fly() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("fly"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::prone() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("prone"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::ridden() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("ridden"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::riddenfly() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("riddenfly"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::ride() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("ride"));
        }
        inline Array<Ent::Gen::CameraSoundEvent> InGameCameraData::soundEvents() const
        {
            return Array<Ent::Gen::CameraSoundEvent>(node->at("soundEvents"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::standup() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("standup"));
        }
        inline Ent::Gen::InGameCameraObservationParams InGameCameraData::swim() const
        {
            return Ent::Gen::InGameCameraObservationParams(node->at("swim"));
        }
        // ChargedJumpAnimation
        inline Ent::Gen::String ChargedJumpAnimation::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::ActionMode ChargedJumpAnimation::animActionMode() const
        {
            return Ent::Gen::ActionMode(node->at("animActionMode"));
        }
        inline Ent::Gen::Float ChargedJumpAnimation::lerpFactorScaleXY() const
        {
            return Ent::Gen::Float(node->at("lerpFactorScaleXY"));
        }
        inline Ent::Gen::Float ChargedJumpAnimation::lerpFactorScaleZ() const
        {
            return Ent::Gen::Float(node->at("lerpFactorScaleZ"));
        }
        inline Ent::Gen::ScaleConverter ChargedJumpAnimation::scaleByPower() const
        {
            return Ent::Gen::ScaleConverter(node->at("scaleByPower"));
        }
        // ChargedJumpGD
        inline Ent::Gen::ComponentGD ChargedJumpGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String ChargedJumpGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float ChargedJumpGD::bounceJumpTimeWindow() const
        {
            return Ent::Gen::Float(node->at("bounceJumpTimeWindow"));
        }
        inline Array<Ent::Gen::ChargedJumpAnimation> ChargedJumpGD::chargedJumpAnimations() const
        {
            return Array<Ent::Gen::ChargedJumpAnimation>(node->at("chargedJumpAnimations"));
        }
        inline Ent::Gen::Float ChargedJumpGD::chargingDecelerationFactor() const
        {
            return Ent::Gen::Float(node->at("chargingDecelerationFactor"));
        }
        inline Ent::Gen::ScaleConverter ChargedJumpGD::nextJumpPowerByFallHeight() const
        {
            return Ent::Gen::ScaleConverter(node->at("nextJumpPowerByFallHeight"));
        }
        // BoidParams
        inline Ent::Gen::Float BoidParams::Acceleration() const
        {
            return Ent::Gen::Float(node->at("Acceleration"));
        }
        inline Ent::Gen::ActionMode BoidParams::Action() const
        {
            return Ent::Gen::ActionMode(node->at("Action"));
        }
        inline Ent::Gen::ActionMode BoidParams::ActionSecondary() const
        {
            return Ent::Gen::ActionMode(node->at("ActionSecondary"));
        }
        inline Ent::Gen::Float BoidParams::AlignmentDistance() const
        {
            return Ent::Gen::Float(node->at("AlignmentDistance"));
        }
        inline Ent::Gen::Float BoidParams::AlignmentStrength() const
        {
            return Ent::Gen::Float(node->at("AlignmentStrength"));
        }
        inline Ent::Gen::Bool BoidParams::AllowMerge() const
        {
            return Ent::Gen::Bool(node->at("AllowMerge"));
        }
        inline Ent::Gen::Float BoidParams::AngularSlerpCoeff() const
        {
            return Ent::Gen::Float(node->at("AngularSlerpCoeff"));
        }
        inline Ent::Gen::Float BoidParams::AngularSpeedMax() const
        {
            return Ent::Gen::Float(node->at("AngularSpeedMax"));
        }
        inline Ent::Gen::Bool BoidParams::AnimFromStart() const
        {
            return Ent::Gen::Bool(node->at("AnimFromStart"));
        }
        inline Ent::Gen::Bool BoidParams::BlockProcess() const
        {
            return Ent::Gen::Bool(node->at("BlockProcess"));
        }
        inline Ent::Gen::Bool BoidParams::ClampVerticalAngle() const
        {
            return Ent::Gen::Bool(node->at("ClampVerticalAngle"));
        }
        inline Ent::Gen::Float BoidParams::CohesionStrength() const
        {
            return Ent::Gen::Float(node->at("CohesionStrength"));
        }
        inline Ent::Gen::Float BoidParams::DragForce() const
        {
            return Ent::Gen::Float(node->at("DragForce"));
        }
        inline Ent::Gen::Float BoidParams::EntityDistance() const
        {
            return Ent::Gen::Float(node->at("EntityDistance"));
        }
        inline Ent::Gen::Bool BoidParams::FlapBehavior() const
        {
            return Ent::Gen::Bool(node->at("FlapBehavior"));
        }
        inline Ent::Gen::Float BoidParams::FlattenZFactorLeaves() const
        {
            return Ent::Gen::Float(node->at("FlattenZFactorLeaves"));
        }
        inline Ent::Gen::Float BoidParams::FlattenZFactorRoots() const
        {
            return Ent::Gen::Float(node->at("FlattenZFactorRoots"));
        }
        inline Ent::Gen::Float BoidParams::FollowEmitterStrength() const
        {
            return Ent::Gen::Float(node->at("FollowEmitterStrength"));
        }
        inline Ent::Gen::BoidGoalMode BoidParams::GoalMode() const
        {
            return Ent::Gen::BoidGoalMode(node->at("GoalMode"));
        }
        inline Ent::Gen::Bool BoidParams::GroundRepulse() const
        {
            return Ent::Gen::Bool(node->at("GroundRepulse"));
        }
        inline Ent::Gen::Float BoidParams::GroundRepulseHeight() const
        {
            return Ent::Gen::Float(node->at("GroundRepulseHeight"));
        }
        inline Ent::Gen::Float BoidParams::GroundRepulseStrength() const
        {
            return Ent::Gen::Float(node->at("GroundRepulseStrength"));
        }
        inline Ent::Gen::Float BoidParams::InitialInertiaFactor() const
        {
            return Ent::Gen::Float(node->at("InitialInertiaFactor"));
        }
        inline Ent::Gen::Float BoidParams::InitialInertiaVerticalFactor() const
        {
            return Ent::Gen::Float(node->at("InitialInertiaVerticalFactor"));
        }
        inline Ent::Gen::Float BoidParams::LightBrightness() const
        {
            return Ent::Gen::Float(node->at("LightBrightness"));
        }
        inline Ent::Gen::Color BoidParams::LightColor() const
        {
            return Ent::Gen::Color(node->at("LightColor"));
        }
        inline Ent::Gen::LocomotionMode BoidParams::Locomotion() const
        {
            return Ent::Gen::LocomotionMode(node->at("Locomotion"));
        }
        inline Ent::Gen::Float BoidParams::MaxVerticalAngle() const
        {
            return Ent::Gen::Float(node->at("MaxVerticalAngle"));
        }
        inline Ent::Gen::Float BoidParams::MaxVerticalAngleVariation() const
        {
            return Ent::Gen::Float(node->at("MaxVerticalAngleVariation"));
        }
        inline Ent::Gen::Int BoidParams::NbMaxNewChildren() const
        {
            return Ent::Gen::Int(node->at("NbMaxNewChildren"));
        }
        inline Ent::Gen::Bool BoidParams::OnGround() const
        {
            return Ent::Gen::Bool(node->at("OnGround"));
        }
        inline Ent::Gen::Float BoidParams::RepulsionStrength() const
        {
            return Ent::Gen::Float(node->at("RepulsionStrength"));
        }
        inline Ent::Gen::Float BoidParams::RotateBendFactor() const
        {
            return Ent::Gen::Float(node->at("RotateBendFactor"));
        }
        inline Ent::Gen::Bool BoidParams::SightZ() const
        {
            return Ent::Gen::Bool(node->at("SightZ"));
        }
        inline Array<Ent::Gen::BoidSpeedMaxData> BoidParams::SpeedMaxData() const
        {
            return Array<Ent::Gen::BoidSpeedMaxData>(node->at("SpeedMaxData"));
        }
        inline Ent::Gen::SpeedMode BoidParams::SpeedMode() const
        {
            return Ent::Gen::SpeedMode(node->at("SpeedMode"));
        }
        inline Ent::Gen::Float BoidParams::SpeedRandomMultiplier() const
        {
            return Ent::Gen::Float(node->at("SpeedRandomMultiplier"));
        }
        inline Ent::Gen::StyleMode BoidParams::StyleMode() const
        {
            return Ent::Gen::StyleMode(node->at("StyleMode"));
        }
        inline Ent::Gen::Float BoidParams::UpdateForceFactor() const
        {
            return Ent::Gen::Float(node->at("UpdateForceFactor"));
        }
        inline Ent::Gen::Float BoidParams::UpdateInertiaFactor() const
        {
            return Ent::Gen::Float(node->at("UpdateInertiaFactor"));
        }
        inline Ent::Gen::Float BoidParams::VerticalMasterPositionOffset() const
        {
            return Ent::Gen::Float(node->at("VerticalMasterPositionOffset"));
        }
        inline Ent::Gen::Int BoidParams::VisibilityStateFrameDelay() const
        {
            return Ent::Gen::Int(node->at("VisibilityStateFrameDelay"));
        }
        inline Ent::Gen::Bool BoidParams::Visible() const
        {
            return Ent::Gen::Bool(node->at("Visible"));
        }
        inline Ent::Gen::Float BoidParams::VisualScaleMultiplierAtStartup() const
        {
            return Ent::Gen::Float(node->at("VisualScaleMultiplierAtStartup"));
        }
        inline Ent::Gen::String BoidParams::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String BoidParams::_name() const
        {
            return Ent::Gen::String(node->at("_name"));
        }
        // AnimationModelComponentInput_ActionMode
        inline Ent::Gen::String AnimationModelComponentInput_ActionMode::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool AnimationModelComponentInput_ActionMode::engaged() const
        {
            return Ent::Gen::Bool(node->at("engaged"));
        }
        inline Ent::Gen::ActionMode AnimationModelComponentInput_ActionMode::val() const
        {
            return Ent::Gen::ActionMode(node->at("val"));
        }
        // AnimationModelComponentInput
        inline Ent::Gen::AnimationModelComponentInput_ActionMode AnimationModelComponentInput::ActionMode() const
        {
            return Ent::Gen::AnimationModelComponentInput_ActionMode(node->at("ActionMode"));
        }
        inline Ent::Gen::AdditionnalTag AnimationModelComponentInput::AdditionnalTag() const
        {
            return Ent::Gen::AdditionnalTag(node->at("AdditionnalTag"));
        }
        inline Ent::Gen::AnimationModelComponentInput_AnimTag AnimationModelComponentInput::AnimTag() const
        {
            return Ent::Gen::AnimationModelComponentInput_AnimTag(node->at("AnimTag"));
        }
        inline Ent::Gen::AnimationModelComponentInput_AttitudeMode AnimationModelComponentInput::AttitudeMode() const
        {
            return Ent::Gen::AnimationModelComponentInput_AttitudeMode(node->at("AttitudeMode"));
        }
        inline Ent::Gen::AnimationModelComponentInput_CarryMode AnimationModelComponentInput::CarryMode() const
        {
            return Ent::Gen::AnimationModelComponentInput_CarryMode(node->at("CarryMode"));
        }
        inline Ent::Gen::ForceBlendIn AnimationModelComponentInput::ForceBlendIn() const
        {
            return Ent::Gen::ForceBlendIn(node->at("ForceBlendIn"));
        }
        inline Ent::Gen::ForceBlendInReachRequired AnimationModelComponentInput::ForceBlendInReachRequired() const
        {
            return Ent::Gen::ForceBlendInReachRequired(node->at("ForceBlendInReachRequired"));
        }
        inline Ent::Gen::AnimationModelComponentInput_LocomotionMode AnimationModelComponentInput::LocomotionMode() const
        {
            return Ent::Gen::AnimationModelComponentInput_LocomotionMode(node->at("LocomotionMode"));
        }
        inline Ent::Gen::PlayRatio AnimationModelComponentInput::PlayRatio() const
        {
            return Ent::Gen::PlayRatio(node->at("PlayRatio"));
        }
        inline Ent::Gen::AnimationModelComponentInput_SpeedMode AnimationModelComponentInput::SpeedMode() const
        {
            return Ent::Gen::AnimationModelComponentInput_SpeedMode(node->at("SpeedMode"));
        }
        inline Ent::Gen::SpeedModeMax AnimationModelComponentInput::SpeedModeMax() const
        {
            return Ent::Gen::SpeedModeMax(node->at("SpeedModeMax"));
        }
        inline Ent::Gen::SpeedScaleXY AnimationModelComponentInput::SpeedScaleXY() const
        {
            return Ent::Gen::SpeedScaleXY(node->at("SpeedScaleXY"));
        }
        inline Ent::Gen::AnimationModelComponentInput_StyleMode AnimationModelComponentInput::StyleMode() const
        {
            return Ent::Gen::AnimationModelComponentInput_StyleMode(node->at("StyleMode"));
        }
        inline Ent::Gen::ComponentInput AnimationModelComponentInput::Super() const
        {
            return Ent::Gen::ComponentInput(node->at("Super"));
        }
        inline Ent::Gen::VariantAllowed AnimationModelComponentInput::VariantAllowed() const
        {
            return Ent::Gen::VariantAllowed(node->at("VariantAllowed"));
        }
        inline Ent::Gen::String AnimationModelComponentInput::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnimTags
        inline Ent::Gen::ActionMode AnimTags::ActionMode() const
        {
            return Ent::Gen::ActionMode(node->at("ActionMode"));
        }
        inline Ent::Gen::AnimAdditionalTag AnimTags::AnimAdditionalTag() const
        {
            return Ent::Gen::AnimAdditionalTag(node->at("AnimAdditionalTag"));
        }
        inline Ent::Gen::AnimTag AnimTags::AnimTag() const
        {
            return Ent::Gen::AnimTag(node->at("AnimTag"));
        }
        inline Ent::Gen::AttitudeMode AnimTags::AttitudeMode() const
        {
            return Ent::Gen::AttitudeMode(node->at("AttitudeMode"));
        }
        inline Ent::Gen::CarryMode AnimTags::CarryMode() const
        {
            return Ent::Gen::CarryMode(node->at("CarryMode"));
        }
        inline Ent::Gen::LocomotionMode AnimTags::LocomotionMode() const
        {
            return Ent::Gen::LocomotionMode(node->at("LocomotionMode"));
        }
        inline Ent::Gen::Float AnimTags::PlayRatio() const
        {
            return Ent::Gen::Float(node->at("PlayRatio"));
        }
        inline Ent::Gen::SpeedMode AnimTags::SpeedMode() const
        {
            return Ent::Gen::SpeedMode(node->at("SpeedMode"));
        }
        inline Ent::Gen::StyleMode AnimTags::StyleMode() const
        {
            return Ent::Gen::StyleMode(node->at("StyleMode"));
        }
        inline Ent::Gen::String AnimTags::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionEmote
        inline Ent::Gen::ActionMode ActionEmote::AnimAction() const
        {
            return Ent::Gen::ActionMode(node->at("AnimAction"));
        }
        inline Ent::Gen::ActorState ActionEmote::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionEmote::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionAimProjectile
        inline Ent::Gen::ActorState ActionAimProjectile::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionAimProjectile::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::ActionMode ActionAimProjectile::actionMode() const
        {
            return Ent::Gen::ActionMode(node->at("actionMode"));
        }
        // ActionAttack_AttackOutputs
        inline Ent::Gen::AnimTags ActionAttack_AttackOutputs::AnimTags() const
        {
            return Ent::Gen::AnimTags(node->at("AnimTags"));
        }
        inline Ent::Gen::Vector3 ActionAttack_AttackOutputs::Direction() const
        {
            return Ent::Gen::Vector3(node->at("Direction"));
        }
        inline Ent::Gen::String ActionAttack_AttackOutputs::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActionAttack
        inline Ent::Gen::ActionAttack_AttackOutputs ActionAttack::Outputs() const
        {
            return Ent::Gen::ActionAttack_AttackOutputs(node->at("Outputs"));
        }
        inline Ent::Gen::ActorState ActionAttack::Super() const
        {
            return Ent::Gen::ActorState(node->at("Super"));
        }
        inline Ent::Gen::String ActionAttack::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AbilityData
        inline Ent::Gen::String AbilityData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline PrimArray<Ent::Gen::ActorAbility> AbilityData::abilities() const
        {
            return PrimArray<Ent::Gen::ActorAbility>(node->at("abilities"));
        }
        // ActorGD
        inline Ent::Gen::Archetype ActorGD::Archetype() const
        {
            return Ent::Gen::Archetype(node->at("Archetype"));
        }
        inline Ent::Gen::StyleMode ActorGD::ClassStyleTag() const
        {
            return Ent::Gen::StyleMode(node->at("ClassStyleTag"));
        }
        inline Ent::Gen::String ActorGD::FactionName() const
        {
            return Ent::Gen::String(node->at("FactionName"));
        }
        inline Ent::Gen::String ActorGD::Icon() const
        {
            return Ent::Gen::String(node->at("Icon"));
        }
        inline Ent::Gen::Bool ActorGD::InSpiritWorld() const
        {
            return Ent::Gen::Bool(node->at("InSpiritWorld"));
        }
        inline Ent::Gen::Specie ActorGD::Specie() const
        {
            return Ent::Gen::Specie(node->at("Specie"));
        }
        inline Ent::Gen::ComponentGD ActorGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::Bool ActorGD::Weapon() const
        {
            return Ent::Gen::Bool(node->at("Weapon"));
        }
        inline Ent::Gen::String ActorGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::AbilityData ActorGD::abilityData() const
        {
            return Ent::Gen::AbilityData(node->at("abilityData"));
        }
        inline Ent::Gen::AttackData ActorGD::attackData() const
        {
            return Ent::Gen::AttackData(node->at("attackData"));
        }
        inline Ent::Gen::ImpactAndSolidityData ActorGD::impactAndSolidityData() const
        {
            return Ent::Gen::ImpactAndSolidityData(node->at("impactAndSolidityData"));
        }
        inline Ent::Gen::ProjectileData ActorGD::projectileData() const
        {
            return Ent::Gen::ProjectileData(node->at("projectileData"));
        }
        inline Ent::Gen::Float ActorGD::radius() const
        {
            return Ent::Gen::Float(node->at("radius"));
        }
        inline Ent::Gen::ShootData ActorGD::shootData() const
        {
            return Ent::Gen::ShootData(node->at("shootData"));
        }
        inline Ent::Gen::StunData ActorGD::stunData() const
        {
            return Ent::Gen::StunData(node->at("stunData"));
        }
        inline Ent::Gen::Float ActorGD::volume() const
        {
            return Ent::Gen::Float(node->at("volume"));
        }
        // ProjectileGD
        inline Ent::Gen::ActorGD ProjectileGD::Super() const
        {
            return Ent::Gen::ActorGD(node->at("Super"));
        }
        inline Ent::Gen::String ProjectileGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // CreatureGD
        inline Ent::Gen::Bool CreatureGD::DisableLookAt() const
        {
            return Ent::Gen::Bool(node->at("DisableLookAt"));
        }
        inline Ent::Gen::Float CreatureGD::FlyPitchAngleMax() const
        {
            return Ent::Gen::Float(node->at("FlyPitchAngleMax"));
        }
        inline Ent::Gen::Float CreatureGD::FlyPitchAngleMin() const
        {
            return Ent::Gen::Float(node->at("FlyPitchAngleMin"));
        }
        inline Ent::Gen::Bool CreatureGD::IsBig() const
        {
            return Ent::Gen::Bool(node->at("IsBig"));
        }
        inline Ent::Gen::Bool CreatureGD::IsDivinity() const
        {
            return Ent::Gen::Bool(node->at("IsDivinity"));
        }
        inline Ent::Gen::Bool CreatureGD::IsGuardian() const
        {
            return Ent::Gen::Bool(node->at("IsGuardian"));
        }
        inline Ent::Gen::Bool CreatureGD::IsStaff() const
        {
            return Ent::Gen::Bool(node->at("IsStaff"));
        }
        inline Ent::Gen::Bool CreatureGD::SpawnSoulIfNoEnemy() const
        {
            return Ent::Gen::Bool(node->at("SpawnSoulIfNoEnemy"));
        }
        inline Ent::Gen::SpeedFastMinDuration CreatureGD::SpeedFastMinDuration() const
        {
            return Ent::Gen::SpeedFastMinDuration(node->at("SpeedFastMinDuration"));
        }
        inline Ent::Gen::ActorGD CreatureGD::Super() const
        {
            return Ent::Gen::ActorGD(node->at("Super"));
        }
        inline Ent::Gen::String CreatureGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::BiteData CreatureGD::biteData() const
        {
            return Ent::Gen::BiteData(node->at("biteData"));
        }
        inline Ent::Gen::CreatureDangerousness CreatureGD::dangerousnessData() const
        {
            return Ent::Gen::CreatureDangerousness(node->at("dangerousnessData"));
        }
        inline Ent::Gen::RevivedData CreatureGD::revivedData() const
        {
            return Ent::Gen::RevivedData(node->at("revivedData"));
        }
        // ClothGD
        inline Ent::Gen::String ClothGD::BodyEventsPath() const
        {
            return Ent::Gen::String(node->at("BodyEventsPath"));
        }
        inline Ent::Gen::String ClothGD::BodyNamePath() const
        {
            return Ent::Gen::String(node->at("BodyNamePath"));
        }
        inline PrimArray<Ent::Gen::String> ClothGD::SoundBanks() const
        {
            return PrimArray<Ent::Gen::String>(node->at("SoundBanks"));
        }
        inline Ent::Gen::SoundEventMapping ClothGD::SoundEventMappingRules() const
        {
            return Ent::Gen::SoundEventMapping(node->at("SoundEventMappingRules"));
        }
        inline Ent::Gen::ActorGD ClothGD::Super() const
        {
            return Ent::Gen::ActorGD(node->at("Super"));
        }
        inline Ent::Gen::String ClothGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RenderManager_RenderConfig
        inline Ent::Gen::AaMode RenderManager_RenderConfig::AaMode() const
        {
            return Ent::Gen::AaMode(node->at("AaMode"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::ClusteredLighting() const
        {
            return Ent::Gen::Int(node->at("ClusteredLighting"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::DisplacementMapSize() const
        {
            return Ent::Gen::Int(node->at("DisplacementMapSize"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableAsyncPipelineCreation() const
        {
            return Ent::Gen::Int(node->at("EnableAsyncPipelineCreation"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableColorCorrection() const
        {
            return Ent::Gen::Int(node->at("EnableColorCorrection"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableComputeForDeferredLighting() const
        {
            return Ent::Gen::Int(node->at("EnableComputeForDeferredLighting"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableComputeForUnderWater() const
        {
            return Ent::Gen::Int(node->at("EnableComputeForUnderWater"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableDepthOfField() const
        {
            return Ent::Gen::Int(node->at("EnableDepthOfField"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableFurTranslucency() const
        {
            return Ent::Gen::Int(node->at("EnableFurTranslucency"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableLensFlare() const
        {
            return Ent::Gen::Int(node->at("EnableLensFlare"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableMTR() const
        {
            return Ent::Gen::Int(node->at("EnableMTR"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableMotionBlur() const
        {
            return Ent::Gen::Int(node->at("EnableMotionBlur"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableNonBlockingDrawUpdates() const
        {
            return Ent::Gen::Int(node->at("EnableNonBlockingDrawUpdates"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableSSAO() const
        {
            return Ent::Gen::Int(node->at("EnableSSAO"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableSSCS() const
        {
            return Ent::Gen::Int(node->at("EnableSSCS"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableSSR() const
        {
            return Ent::Gen::Int(node->at("EnableSSR"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableSSSS() const
        {
            return Ent::Gen::Int(node->at("EnableSSSS"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableTonemapping() const
        {
            return Ent::Gen::Int(node->at("EnableTonemapping"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableUnderwaterPostEffect() const
        {
            return Ent::Gen::Int(node->at("EnableUnderwaterPostEffect"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::EnableVegetationDrawDatabase() const
        {
            return Ent::Gen::Int(node->at("EnableVegetationDrawDatabase"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::FurFocusShadowMapResolution() const
        {
            return Ent::Gen::Int(node->at("FurFocusShadowMapResolution"));
        }
        inline Ent::Gen::Float RenderManager_RenderConfig::GlobalLODBias() const
        {
            return Ent::Gen::Float(node->at("GlobalLODBias"));
        }
        inline Ent::Gen::Float RenderManager_RenderConfig::GlobalLODScale() const
        {
            return Ent::Gen::Float(node->at("GlobalLODScale"));
        }
        inline Ent::Gen::Float RenderManager_RenderConfig::LODDecimationFactor() const
        {
            return Ent::Gen::Float(node->at("LODDecimationFactor"));
        }
        inline Ent::Gen::String RenderManager_RenderConfig::MaterialBank() const
        {
            return Ent::Gen::String(node->at("MaterialBank"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::MaxActiveShadowLights() const
        {
            return Ent::Gen::Int(node->at("MaxActiveShadowLights"));
        }
        inline Ent::Gen::Float RenderManager_RenderConfig::MinTriangleSize() const
        {
            return Ent::Gen::Float(node->at("MinTriangleSize"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::ParticleLigthingAtlasSize() const
        {
            return Ent::Gen::Int(node->at("ParticleLigthingAtlasSize"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::PlanarReflectionsDownsample() const
        {
            return Ent::Gen::Int(node->at("PlanarReflectionsDownsample"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::Quality() const
        {
            return Ent::Gen::Int(node->at("Quality"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::QualityDepthOfField() const
        {
            return Ent::Gen::Int(node->at("QualityDepthOfField"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::RemoveTemporalNaNs() const
        {
            return Ent::Gen::Int(node->at("RemoveTemporalNaNs"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::RippleMapSize() const
        {
            return Ent::Gen::Int(node->at("RippleMapSize"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::SamplesSSAO() const
        {
            return Ent::Gen::Int(node->at("SamplesSSAO"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::SamplesSSSS() const
        {
            return Ent::Gen::Int(node->at("SamplesSSSS"));
        }
        inline Ent::Gen::Float RenderManager_RenderConfig::ShadowLODScale() const
        {
            return Ent::Gen::Float(node->at("ShadowLODScale"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::ShadowMapSize() const
        {
            return Ent::Gen::Int(node->at("ShadowMapSize"));
        }
        inline Ent::Gen::Float RenderManager_RenderConfig::TerrainAlbedoMapBlendAreaRatio() const
        {
            return Ent::Gen::Float(node->at("TerrainAlbedoMapBlendAreaRatio"));
        }
        inline Ent::Gen::Float RenderManager_RenderConfig::TerrainAlbedoMapExtent() const
        {
            return Ent::Gen::Float(node->at("TerrainAlbedoMapExtent"));
        }
        inline Ent::Gen::Int RenderManager_RenderConfig::UseHiZBufferForClusteredLighting() const
        {
            return Ent::Gen::Int(node->at("UseHiZBufferForClusteredLighting"));
        }
        inline Ent::Gen::String RenderManager_RenderConfig::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // RenderManager
        inline Ent::Gen::String RenderManager::DecalMeshPath() const
        {
            return Ent::Gen::String(node->at("DecalMeshPath"));
        }
        inline Ent::Gen::RenderManager_DepthOfFieldConfig RenderManager::DepthOfField() const
        {
            return Ent::Gen::RenderManager_DepthOfFieldConfig(node->at("DepthOfField"));
        }
        inline Ent::Gen::Bool RenderManager::DisableMoveDrawOrigin() const
        {
            return Ent::Gen::Bool(node->at("DisableMoveDrawOrigin"));
        }
        inline Ent::Gen::Bool RenderManager::DoubleSizeIn4K() const
        {
            return Ent::Gen::Bool(node->at("DoubleSizeIn4K"));
        }
        inline Ent::Gen::Bool RenderManager::EnableFade() const
        {
            return Ent::Gen::Bool(node->at("EnableFade"));
        }
        inline Ent::Gen::Bool RenderManager::EnableLODTransitions() const
        {
            return Ent::Gen::Bool(node->at("EnableLODTransitions"));
        }
        inline Ent::Gen::Float RenderManager::FloatPrecisionThreshold() const
        {
            return Ent::Gen::Float(node->at("FloatPrecisionThreshold"));
        }
        inline Ent::Gen::Bool RenderManager::Fullscreen() const
        {
            return Ent::Gen::Bool(node->at("Fullscreen"));
        }
        inline Ent::Gen::RenderManager_RenderConfig RenderManager::Global() const
        {
            return Ent::Gen::RenderManager_RenderConfig(node->at("Global"));
        }
        inline Ent::Gen::Int RenderManager::ImGuiFontScale() const
        {
            return Ent::Gen::Int(node->at("ImGuiFontScale"));
        }
        inline Ent::Gen::Float RenderManager::LODTransitionDuration() const
        {
            return Ent::Gen::Float(node->at("LODTransitionDuration"));
        }
        inline Ent::Gen::ScaleConverter RenderManager::MotionBlurHeightFactorFromSpeed() const
        {
            return Ent::Gen::ScaleConverter(node->at("MotionBlurHeightFactorFromSpeed"));
        }
        inline Ent::Gen::RenderManager_RenderConfig RenderManager::PC() const
        {
            return Ent::Gen::RenderManager_RenderConfig(node->at("PC"));
        }
        inline Ent::Gen::RenderManager_RenderConfig RenderManager::PS4() const
        {
            return Ent::Gen::RenderManager_RenderConfig(node->at("PS4"));
        }
        inline Ent::Gen::RenderManager_RenderConfig RenderManager::PS4Neo() const
        {
            return Ent::Gen::RenderManager_RenderConfig(node->at("PS4Neo"));
        }
        inline Ent::Gen::RenderManager_RenderConfig RenderManager::PS5() const
        {
            return Ent::Gen::RenderManager_RenderConfig(node->at("PS5"));
        }
        inline Ent::Gen::Bool RenderManager::RenderToWindow() const
        {
            return Ent::Gen::Bool(node->at("RenderToWindow"));
        }
        inline Ent::Gen::Int RenderManager::ResolutionX() const
        {
            return Ent::Gen::Int(node->at("ResolutionX"));
        }
        inline Ent::Gen::Int RenderManager::ResolutionY() const
        {
            return Ent::Gen::Int(node->at("ResolutionY"));
        }
        inline Ent::Gen::Manager RenderManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::Int RenderManager::VSync() const
        {
            return Ent::Gen::Int(node->at("VSync"));
        }
        inline Ent::Gen::Int RenderManager::WindowPositionX() const
        {
            return Ent::Gen::Int(node->at("WindowPositionX"));
        }
        inline Ent::Gen::Int RenderManager::WindowPositionY() const
        {
            return Ent::Gen::Int(node->at("WindowPositionY"));
        }
        inline Ent::Gen::Int RenderManager::WindowSizeX() const
        {
            return Ent::Gen::Int(node->at("WindowSizeX"));
        }
        inline Ent::Gen::Int RenderManager::WindowSizeY() const
        {
            return Ent::Gen::Int(node->at("WindowSizeY"));
        }
        inline Ent::Gen::String RenderManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AIContextSlot
        inline Ent::Gen::Int AIContextSlot::Count() const
        {
            return Ent::Gen::Int(node->at("Count"));
        }
        inline Ent::Gen::String AIContextSlot::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String AIContextSlot::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AIContextGD
        inline Ent::Gen::ComponentGD AIContextGD::Super() const
        {
            return Ent::Gen::ComponentGD(node->at("Super"));
        }
        inline Ent::Gen::String AIContextGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float AIContextGD::attackCircleRadius() const
        {
            return Ent::Gen::Float(node->at("attackCircleRadius"));
        }
        inline Ent::Gen::Float AIContextGD::distanceBetweenCreatures() const
        {
            return Ent::Gen::Float(node->at("distanceBetweenCreatures"));
        }
        inline Ent::Gen::Float AIContextGD::distantReachCircleRadius() const
        {
            return Ent::Gen::Float(node->at("distantReachCircleRadius"));
        }
        inline Ent::Gen::Float AIContextGD::followCircleRadius() const
        {
            return Ent::Gen::Float(node->at("followCircleRadius"));
        }
        inline Ent::Gen::Float AIContextGD::lockTargetCircleRadius() const
        {
            return Ent::Gen::Float(node->at("lockTargetCircleRadius"));
        }
        inline Array<Ent::Gen::AIContextSlot> AIContextGD::slots() const
        {
            return Array<Ent::Gen::AIContextSlot>(node->at("slots"));
        }
        // AIAggroInitAndDecValue
        inline Ent::Gen::Int AIAggroInitAndDecValue::DecrementValue() const
        {
            return Ent::Gen::Int(node->at("DecrementValue"));
        }
        inline Ent::Gen::Int AIAggroInitAndDecValue::InitValue() const
        {
            return Ent::Gen::Int(node->at("InitValue"));
        }
        inline Ent::Gen::Int AIAggroInitAndDecValue::MaxValue() const
        {
            return Ent::Gen::Int(node->at("MaxValue"));
        }
        inline Ent::Gen::String AIAggroInitAndDecValue::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AIKnowledgeManager
        inline Array<Ent::Gen::AIAggroInitAndDecValue> AIKnowledgeManager::AggroValues() const
        {
            return Array<Ent::Gen::AIAggroInitAndDecValue>(node->at("AggroValues"));
        }
        inline Ent::Gen::Map<AIOrderTypeEnum, Ent::Gen::Int> AIKnowledgeManager::OrderPriorities() const
        {
            return Ent::Gen::Map<AIOrderTypeEnum, Ent::Gen::Int>(node->at("OrderPriorities"));
        }
        inline Ent::Gen::Manager AIKnowledgeManager::Super() const
        {
            return Ent::Gen::Manager(node->at("Super"));
        }
        inline Ent::Gen::String AIKnowledgeManager::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ActorStateStack
        // AnalyticsFPS
        inline Ent::Gen::Float AnalyticsFPS::TeleportationDistance() const
        {
            return Ent::Gen::Float(node->at("TeleportationDistance"));
        }
        inline Ent::Gen::Float AnalyticsFPS::TeleportationInterval() const
        {
            return Ent::Gen::Float(node->at("TeleportationInterval"));
        }
        inline Ent::Gen::String AnalyticsFPS::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AnalyticsInGameViewer
        // AnalyticsObserverInterface
        // AnimationGDData
        inline Ent::Gen::String AnimationGDData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String AnimationGDData::animationDatabasePath() const
        {
            return Ent::Gen::String(node->at("animationDatabasePath"));
        }
        inline Ent::Gen::String AnimationGDData::skeletonPath() const
        {
            return Ent::Gen::String(node->at("skeletonPath"));
        }
        // AnimationTreeConstraintsGD_BendSoundEventData
        inline Ent::Gen::String AnimationTreeConstraintsGD_BendSoundEventData::BendStartEventName() const
        {
            return Ent::Gen::String(node->at("BendStartEventName"));
        }
        inline Ent::Gen::String AnimationTreeConstraintsGD_BendSoundEventData::CatapultStartEventName() const
        {
            return Ent::Gen::String(node->at("CatapultStartEventName"));
        }
        inline Ent::Gen::String AnimationTreeConstraintsGD_BendSoundEventData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // AudioEventData
        inline Ent::Gen::Int AudioEventData::ID() const
        {
            return Ent::Gen::Int(node->at("ID"));
        }
        inline Ent::Gen::String AudioEventData::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Float AudioEventData::Range() const
        {
            return Ent::Gen::Float(node->at("Range"));
        }
        inline Ent::Gen::String AudioEventData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // BehaviorPesto
        // CheatCodeReplication
        // ClassRef
        // CloudsGenerator
        inline Ent::Gen::Float CloudsGenerator::ApearanceDuration() const
        {
            return Ent::Gen::Float(node->at("ApearanceDuration"));
        }
        inline Ent::Gen::Float CloudsGenerator::ApearanceDurationRandom() const
        {
            return Ent::Gen::Float(node->at("ApearanceDurationRandom"));
        }
        inline Ent::Gen::Float CloudsGenerator::CloudSize() const
        {
            return Ent::Gen::Float(node->at("CloudSize"));
        }
        inline Ent::Gen::Float CloudsGenerator::CloudSizeRandom() const
        {
            return Ent::Gen::Float(node->at("CloudSizeRandom"));
        }
        inline Ent::Gen::Float CloudsGenerator::CloudSpeedMultiplier() const
        {
            return Ent::Gen::Float(node->at("CloudSpeedMultiplier"));
        }
        inline Ent::Gen::Float CloudsGenerator::CloudStrength() const
        {
            return Ent::Gen::Float(node->at("CloudStrength"));
        }
        inline Ent::Gen::Float CloudsGenerator::CloudsCoverageDensity() const
        {
            return Ent::Gen::Float(node->at("CloudsCoverageDensity"));
        }
        inline Ent::Gen::Float CloudsGenerator::DisapearanceDuration() const
        {
            return Ent::Gen::Float(node->at("DisapearanceDuration"));
        }
        inline Ent::Gen::Float CloudsGenerator::DisapearanceDurationRandom() const
        {
            return Ent::Gen::Float(node->at("DisapearanceDurationRandom"));
        }
        inline Ent::Gen::Float CloudsGenerator::LifeDuration() const
        {
            return Ent::Gen::Float(node->at("LifeDuration"));
        }
        inline Ent::Gen::Float CloudsGenerator::LifeDurationRandom() const
        {
            return Ent::Gen::Float(node->at("LifeDurationRandom"));
        }
        inline Ent::Gen::String CloudsGenerator::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ConditionalRigidityAttribute_ActorStateName
        inline Ent::Gen::String ConditionalRigidityAttribute_ActorStateName::ActionName() const
        {
            return Ent::Gen::String(node->at("ActionName"));
        }
        inline Ent::Gen::String ConditionalRigidityAttribute_ActorStateName::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ContactActor
        // Edge
        // EntityArchive_MetaData
        inline Ent::Gen::String EntityArchive_MetaData::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::String EntityArchive_MetaData::RawDataPath() const
        {
            return Ent::Gen::String(node->at("RawDataPath"));
        }
        inline Ent::Gen::Int EntityArchive_MetaData::Version() const
        {
            return Ent::Gen::Int(node->at("Version"));
        }
        inline Ent::Gen::String EntityArchive_MetaData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // EntityGD
        inline Ent::Gen::String EntityGD::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline PrimArray<Ent::Gen::String> EntityGD::components() const
        {
            return PrimArray<Ent::Gen::String>(node->at("components"));
        }
        // EntityGDRef
        inline Ent::Gen::String EntityGDRef::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::String EntityGDRef::hash() const
        {
            return Ent::Gen::String(node->at("hash"));
        }
        // FadeEffect
        inline Ent::Gen::String FadeEffect::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Bool FadeEffect::affectVisibilityProperty() const
        {
            return Ent::Gen::Bool(node->at("affectVisibilityProperty"));
        }
        inline Ent::Gen::Float FadeEffect::delay() const
        {
            return Ent::Gen::Float(node->at("delay"));
        }
        inline Ent::Gen::Float FadeEffect::destinationAlpha() const
        {
            return Ent::Gen::Float(node->at("destinationAlpha"));
        }
        inline Ent::Gen::Float FadeEffect::duration() const
        {
            return Ent::Gen::Float(node->at("duration"));
        }
        inline Ent::Gen::Bool FadeEffect::infiniteDuration() const
        {
            return Ent::Gen::Bool(node->at("infiniteDuration"));
        }
        inline Ent::Gen::Float FadeEffect::sourceAlpha() const
        {
            return Ent::Gen::Float(node->at("sourceAlpha"));
        }
        // GRC
        // GVoxelVolumeCollection
        // IMatchMakerApi
        // IOnlineApi
        // InputController
        // MeshNavigationBehavior
        // MeshShape
        inline Ent::Gen::String MeshShape::Path() const
        {
            return Ent::Gen::String(node->at("Path"));
        }
        inline Ent::Gen::String MeshShape::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // NetRoot
        // OutfitFadeParameter
        inline Ent::Gen::Float OutfitFadeParameter::Delay() const
        {
            return Ent::Gen::Float(node->at("Delay"));
        }
        inline Ent::Gen::Bool OutfitFadeParameter::Emissive() const
        {
            return Ent::Gen::Bool(node->at("Emissive"));
        }
        inline Ent::Gen::Bool OutfitFadeParameter::Enabled() const
        {
            return Ent::Gen::Bool(node->at("Enabled"));
        }
        inline Ent::Gen::Bool OutfitFadeParameter::FadeBodyPiece() const
        {
            return Ent::Gen::Bool(node->at("FadeBodyPiece"));
        }
        inline Ent::Gen::Float OutfitFadeParameter::Time() const
        {
            return Ent::Gen::Float(node->at("Time"));
        }
        inline Ent::Gen::String OutfitFadeParameter::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // OwnershipModule
        // PhysicsNetworker
        // PlayerManagerDebugger
        inline Ent::Gen::String PlayerManagerDebugger::SaveServerURL() const
        {
            return Ent::Gen::String(node->at("SaveServerURL"));
        }
        inline Ent::Gen::Float PlayerManagerDebugger::SelectionSpeed() const
        {
            return Ent::Gen::Float(node->at("SelectionSpeed"));
        }
        inline Ent::Gen::String PlayerManagerDebugger::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // PointCloud
        // RagdollSetupData
        inline Ent::Gen::String RagdollSetupData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float RagdollSetupData::blend() const
        {
            return Ent::Gen::Float(node->at("blend"));
        }
        inline Ent::Gen::Float RagdollSetupData::inertiaFactor() const
        {
            return Ent::Gen::Float(node->at("inertiaFactor"));
        }
        inline Ent::Gen::Float RagdollSetupData::jointsRigidity() const
        {
            return Ent::Gen::Float(node->at("jointsRigidity"));
        }
        // ReplicaReplay
        // SceneNode
        // SceneNodeGraph
        // Sensor
        // SmallActorSpawnRuleExchangeData
        inline Ent::Gen::String SmallActorSpawnRuleExchangeData::AudioEventName() const
        {
            return Ent::Gen::String(node->at("AudioEventName"));
        }
        inline Ent::Gen::String SmallActorSpawnRuleExchangeData::AudioEventSoundBank() const
        {
            return Ent::Gen::String(node->at("AudioEventSoundBank"));
        }
        inline Ent::Gen::Bool SmallActorSpawnRuleExchangeData::IsValid() const
        {
            return Ent::Gen::Bool(node->at("IsValid"));
        }
        inline Ent::Gen::Int SmallActorSpawnRuleExchangeData::RuleIndex() const
        {
            return Ent::Gen::Int(node->at("RuleIndex"));
        }
        inline Ent::Gen::String SmallActorSpawnRuleExchangeData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // StateGauge
        inline Ent::Gen::String StateGauge::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        inline Ent::Gen::Float StateGauge::m_amount() const
        {
            return Ent::Gen::Float(node->at("m_amount"));
        }
        inline Ent::Gen::Float StateGauge::m_maxAmount() const
        {
            return Ent::Gen::Float(node->at("m_maxAmount"));
        }
        inline Ent::Gen::Float StateGauge::m_pendingDiff() const
        {
            return Ent::Gen::Float(node->at("m_pendingDiff"));
        }
        // Team_PlayerData
        inline Ent::Gen::Int Team_PlayerData::PlayerID() const
        {
            return Ent::Gen::Int(node->at("PlayerID"));
        }
        inline Ent::Gen::String Team_PlayerData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // TextureGroundTypeMap
        // TextureHeightMap
        // Timer
        // TravelParams
        inline Ent::Gen::Float TravelParams::Acceleration() const
        {
            return Ent::Gen::Float(node->at("Acceleration"));
        }
        inline Ent::Gen::Float TravelParams::AccelerationZ() const
        {
            return Ent::Gen::Float(node->at("AccelerationZ"));
        }
        inline Ent::Gen::Float TravelParams::Deceleration() const
        {
            return Ent::Gen::Float(node->at("Deceleration"));
        }
        inline Ent::Gen::Float TravelParams::HeightOffset() const
        {
            return Ent::Gen::Float(node->at("HeightOffset"));
        }
        inline Ent::Gen::Float TravelParams::MoveBlend() const
        {
            return Ent::Gen::Float(node->at("MoveBlend"));
        }
        inline Ent::Gen::Float TravelParams::TravelSpeed() const
        {
            return Ent::Gen::Float(node->at("TravelSpeed"));
        }
        inline Ent::Gen::Bool TravelParams::UseFlyingNavMesh() const
        {
            return Ent::Gen::Bool(node->at("UseFlyingNavMesh"));
        }
        inline Ent::Gen::String TravelParams::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VegetationVisibilityDistanceCategory
        inline Ent::Gen::String VegetationVisibilityDistanceCategory::Name() const
        {
            return Ent::Gen::String(node->at("Name"));
        }
        inline Ent::Gen::Float VegetationVisibilityDistanceCategory::VisibilityDistance() const
        {
            return Ent::Gen::Float(node->at("VisibilityDistance"));
        }
        inline Ent::Gen::String VegetationVisibilityDistanceCategory::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // VisualResourceBuildData
        inline PrimArray<Ent::Gen::String> VisualResourceBuildData::GRCs() const
        {
            return PrimArray<Ent::Gen::String>(node->at("GRCs"));
        }
        inline PrimArray<Ent::Gen::Int> VisualResourceBuildData::LODs() const
        {
            return PrimArray<Ent::Gen::Int>(node->at("LODs"));
        }
        inline Ent::Gen::String VisualResourceBuildData::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ZoneCylinderShape
        inline Ent::Gen::Float ZoneCylinderShape::DistanceBetweenPoints() const
        {
            return Ent::Gen::Float(node->at("DistanceBetweenPoints"));
        }
        inline Ent::Gen::Float ZoneCylinderShape::Radius() const
        {
            return Ent::Gen::Float(node->at("Radius"));
        }
        inline Ent::Gen::String ZoneCylinderShape::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // ZoneMeshShape
        inline Ent::Gen::String ZoneMeshShape::ConvexZoneFilePath() const
        {
            return Ent::Gen::String(node->at("ConvexZoneFilePath"));
        }
        inline Ent::Gen::String ZoneMeshShape::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // sBiomeSFXResult
        inline Ent::Gen::Int sBiomeSFXResult::ID() const
        {
            return Ent::Gen::Int(node->at("ID"));
        }
        inline Ent::Gen::Float sBiomeSFXResult::Weight() const
        {
            return Ent::Gen::Float(node->at("Weight"));
        }
        inline Ent::Gen::String sBiomeSFXResult::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // sBiomeSoundResult
        inline Ent::Gen::Int sBiomeSoundResult::ID() const
        {
            return Ent::Gen::Int(node->at("ID"));
        }
        inline Ent::Gen::Float sBiomeSoundResult::Weight() const
        {
            return Ent::Gen::Float(node->at("Weight"));
        }
        inline Ent::Gen::String sBiomeSoundResult::_comment() const
        {
            return Ent::Gen::String(node->at("_comment"));
        }
        // sJointMotorDesc
    } // Gen
} // Ent
