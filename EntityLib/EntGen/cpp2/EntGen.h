
// /!\ This code is GENERATED! Do not modify it.

#pragma once

#include <EntityLib.h>
#include "EntGenHelpers.h"

namespace Ent
{
    namespace Gen2
    {
        struct variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_; // Union
        struct variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_; // Union
        struct variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_; // Union
        struct variant_ZoneCylinderShape_ZoneMeshShape_; // Union
        struct variant_Pasta_Easing_Curve_string_; // Union
        struct variant_MeshShape_ShapeSphere_ShapeBox_; // Union
        struct variant_EntityRef_NavMeshArea_; // Union
        struct usePerception;
        struct tryGrasp;
        struct sPhysicsShapeSphere;
        struct sPhysicsShapeMesh;
        struct sPhysicsShapeCylinder;
        struct sPhysicsShapeCapsule;
        struct sJointFixedDesc;
        struct sJointBallDesc;
        struct resetCreatureRequest;
        struct jumpPower;
        struct isPerceivableForEnemies;
        struct isPerceivable;
        struct eventStringHash;
        struct enableSynchronization;
        struct computePitchAngle;
        struct allowedTypesItem;
        struct WindTurbulenceType; // enum
        enum class WindTurbulenceTypeEnum
        {
            radial,
            swirlcw,
            swirlccw,
            WindTurbulenceType_COUNT,
        };
        struct WaveRenderingType; // enum
        enum class WaveRenderingTypeEnum
        {
            Mesh,
            WaveRenderingType_COUNT,
        };
        struct Walkability;
        struct sPhysicsShapeBox;
        struct sEnvStamp;
        struct retiming;
        struct WaveRendererProperties;
        struct WaveProperties;
        struct sJointUniversalDesc;
        struct sJointSwingTwistDesc;
        struct sJointSliderDesc;
        struct sJointHingeDesc;
        struct ConditionalRigidityAttribute_Range;
        struct VariantAllowed;
        struct UnionObjectArrayItem;
        struct TypedValue;
        struct TransitionNeighborData;
        struct TrailUVUnwrappingMode; // enum
        enum class TrailUVUnwrappingModeEnum
        {
            TailToHead,
            SnakeHeadToTail,
            TrailUVUnwrappingMode_COUNT,
        };
        struct TrailRenderingType; // enum
        enum class TrailRenderingTypeEnum
        {
            Cross,
            Billboard,
            Patches,
            Mesh,
            TrailRenderingType_COUNT,
        };
        struct TrailRenderingSides; // enum
        enum class TrailRenderingSidesEnum
        {
            SideA,
            SideB,
            BothSides,
            TrailRenderingSides_COUNT,
        };
        struct TrailRenderingAttribute; // enum
        enum class TrailRenderingAttributeEnum
        {
            Horizontal,
            Vertical,
            Frontal,
            TrailRenderingAttribute_COUNT,
        };
        struct TrailRendererProperties;
        struct TrackedEntitiesItem;
        struct TestPropertyDefaultValues;
        struct TestPropertyDefaultValues2;
        struct Terrain_TerrainMeta;
        struct TargetCollision;
        struct TagsList;
        struct TaggedSDF;
        struct SyncTempoMode; // enum
        enum class SyncTempoModeEnum
        {
            None_,
            OnGrid,
            OnBeat,
            OnBar,
            OnEnterCue,
            OnExitCue,
            OnCustomCue,
            OnSwitchTransition,
            SyncTempoMode_COUNT,
            SyncTempoMode_FIRST,
        };
        struct UIMusic;
        struct StyleMode; // enum
        enum class StyleModeEnum
        {
            default_,
            stick,
            sword,
            do_,
            hammer,
            knife,
            squirrel,
            lush,
            StyleMode_COUNT,
        };
        struct StunData;
        struct StickToGround;
        struct SpeedScaleXY;
        struct SpeedMode; // enum
        enum class SpeedModeEnum
        {
            speed0,
            speed1,
            speed2,
            speed3,
            speed4,
            SpeedMode_COUNT,
        };
        struct SpeedModeMax;
        struct SpeedFastMinDuration;
        struct Specie; // enum
        enum class SpecieEnum
        {
            auroch,
            bear,
            babybear,
            catfish,
            eagle,
            elk,
            fox,
            giantbear,
            human,
            cannibal,
            babyhuman,
            horse,
            ibex,
            rabbit,
            rat,
            ram,
            raven,
            schmetre,
            seagull,
            snake,
            spermwhale,
            squirrel,
            stag,
            toad,
            trout,
            wildboar,
            babyboar,
            wolf,
            shark,
            dolphin,
            whale,
            goddess,
            clothboots,
            clothbrace,
            clothhelmet,
            clothskirt,
            clothtorso,
            clothbody,
            weapon,
            outfit,
            drivable,
            fruit,
            darkstone,
            destructible,
            environment,
            regeneration,
            insect,
            Specie_COUNT,
        };
        struct SpawningParameter;
        struct SoundOpportunityRangeDescription;
        struct SoundOcclusionData;
        struct SoundManager_BiomeSoundBank;
        struct SoundEventMapping;
        struct SoundEmissionStrength; // enum
        enum class SoundEmissionStrengthEnum
        {
            none,
            low,
            medium,
            high,
            SoundEmissionStrength_COUNT,
        };
        struct soundEmissionStrength;
        struct SoftCollisionGD_VegetationDetectionParameters;
        struct SmoothScaleComponentInput_Parameters;
        struct Size; // enum
        enum class SizeEnum
        {
            tiny,
            small,
            medium,
            big,
            enormous,
            Size_COUNT,
        };
        struct ShowdownSpeciesAudioData;
        struct ShowdownLayerInfo;
        struct ShowdownLayerData;
        struct ShowdownMusic;
        struct ShootSequenceData;
        struct ShootData;
        struct SetOfObjectItem;
        struct SeedPatchData;
        struct SeedPatchDatas;
        struct SeedPatchDataList;
        struct ScriptPathAndDataSet;
        struct ScaleFactor;
        struct ScaleConverter;
        struct RuntimeMode; // enum
        enum class RuntimeModeEnum
        {
            None_,
            Container,
            Compound,
        };
        struct RigidbodyScalingSpeed;
        struct RigidbodyScaleMultiplier;
        struct RigidBodyUserData;
        struct RigidBodyUserDataLedges;
        struct RigidBodyUserDataImpact;
        struct RigidBodyMeshNavigation;
        struct FluidRigidbodyUserData;
        struct RevivedData;
        struct ReviveSide; // enum
        enum class ReviveSideEnum
        {
            neutral,
            sacred,
            cursed,
            ReviveSide_COUNT,
        };
        struct ResponsiblePointer_GameEffect_; // Union
        struct sGameEffectTemplate;
        struct ResponsiblePointer_CineEvent_; // Union
        struct ResponsiblePointer_AnalyticsObserverInterface_;
        struct ResponsiblePointer_ActorState_; // Union
        struct SpawnState;
        struct RespawnState;
        struct RenderManager_DepthOfFieldConfig;
        struct RegenerationManager_EnergyAreaSetting;
        struct RegenSwitchBehavior; // enum
        enum class RegenSwitchBehaviorEnum
        {
            CrossFade,
            CrossMetamorphosis,
            SequentialMetamorphosis,
            InterruptibleSequentialMetamorphosis,
        };
        struct RegenField; // enum
        enum class RegenFieldEnum
        {
            energy,
            absorption,
            RegenField_COUNT,
        };
        struct RegenAreaTransitionSettings;
        struct TransitionSettings;
        struct ReflectionTools_EnumSchema;
        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods;
        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData;
        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember;
        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency;
        struct ReflectionTools_FlatBufferSchemaDependenciesExporter;
        struct ReflectionTools_ClassReflectionSchema;
        struct ReflectionTools_ReflectionSchema;
        struct ReflectionMethodParameter;
        struct ReflectionMethod;
        struct ReflectionEnum;
        struct ReflectionClass;
        struct ReflectionDb;
        struct ReflectedMaterialGroup;
        struct ReflectedMaterialGroupVector;
        struct ReflectedDetailMaterial;
        struct ReflectedDetailMaterialVariants;
        struct ReflectedDetailMaterialBank;
        struct RecastNavmeshGenerationParameters;
        struct sPhysicsJointDesc;
        struct sPhysicShape;
        struct sRigidBodyDesc;
        struct Transform3D;
        struct ProjectileShooterData;
        struct ProjectileData;
        struct ProgressSoundEventData;
        struct PrimitiveShape;
        struct ShapeSphere;
        struct ShapeBox;
        struct PrimitiveData;
        struct PrimitiveColliderType; // enum
        enum class PrimitiveColliderTypeEnum
        {
            Undefined,
            Sphere,
            Box,
            Capsule,
            Cylinder,
            Mesh,
            PrimitiveColliderType_COUNT,
        };
        struct PredictionBehaviorDuration;
        struct PredictionBehaviorData;
        struct Precision; // enum
        enum class PrecisionEnum
        {
            full,
            half,
            quarter,
            eighth,
            sixteenth,
            highest,
            lowest,
        };
        using Position = Ent::Gen2::Tuple<Ent::Gen2::Int, Ent::Gen2::Int, Ent::Gen2::Float, Ent::Gen2::Float, Ent::Gen2::Float>; // Tuple
        struct constraintPlaneWorldPosition;
        struct ProjectileTrajectory;
        struct PlayRatio;
        struct PhysicsMaterial;
        struct PhysicsLayer; // enum
        enum class PhysicsLayerEnum
        {
            Default,
            Ground,
            Static,
            Raycast,
            Trigger,
            Walkable,
            Camera,
            ClimbEdge,
            Kinematic,
            Ragdoll,
            Projectile,
            Hit,
            MotionConstraint,
            Heal,
            Body,
            Fluid,
            Hitable,
            PhysicsGPE,
            Interactable,
            Creature,
            Debris,
            None_,
            All,
            PHYSICLAYER_COUNT,
        };
        struct PhysicsEffectsManager_PhysicsLimits;
        struct PerceiverComponentInput_usePerception;
        struct Pasta_Easing_Curve; // enum
        enum class Pasta_Easing_CurveEnum
        {
            Linear,
            EaseInSin,
            EaseInQuad,
            EaseInCubic,
            EaseInQuart,
            EaseInQuint,
            EaseInExp,
            EaseOutSin,
            EaseOutQuad,
            EaseOutCubic,
            EaseOutQuart,
            EaseOutQuint,
            EaseOutExp,
            EaseInoutSin,
            EaseInoutQuad,
            EaseInoutCubic,
            EaseInoutQuart,
            EaseInoutQuint,
            EaseInoutExp,
            EaseInCirc,
            EaseOutCirc,
            EaseInoutCirc,
            EaseOutElastic,
            Count,
        };
        struct RadiusChange;
        struct Parameters;
        struct OwnershipModuleDebugWindow; // enum
        enum class OwnershipModuleDebugWindowEnum
        {
            Tree,
            Settings,
            In_Game_Debug_Data,
            OwnershipModuleDebugWindow_COUNT,
        };
        struct Game_OwnershipDebugger;
        struct OutfitPieceType; // enum
        enum class OutfitPieceTypeEnum
        {
            OutfitPieceType_NONE,
            Head,
            Torso,
            Skirt,
            Boots,
            Brace,
            Body,
            Hair,
            OutfitPieceType_COUNT,
        };
        struct OutfitPiece;
        struct Orientation;
        struct Online;
        struct Object_MaxActivationLevel; // enum
        enum class Object_MaxActivationLevelEnum
        {
            Created,
            InWorld,
            Loading,
            Started,
        };
        struct NavMeshTag; // enum
        enum class NavMeshTagEnum
        {
            Lush,
            Corrupted,
            Spirit,
            NonSpirit,
            NavMeshTag_COUNT,
        };
        struct NavMeshCapability; // enum
        enum class NavMeshCapabilityEnum
        {
            Walk,
            SwimShallow,
            SwimDeep,
            LongJump,
            HighJump,
            EdgeWalk,
            TunnelCross,
            Jump,
            WallRun,
            WaterFall,
            Climb,
            UnderwaterTunnelCross,
            NavMeshCapability_COUNT,
        };
        struct MusicCategory;
        struct MoveCapacityData_OrientationSpeed;
        struct MountableSnapLine_ControlPoint;
        struct MountableData;
        struct MinReviveRatio;
        struct MinRespawnDistance;
        struct MinDistanceToRespawnPosition;
        struct MeshesItem;
        struct RUNTIME_LODsItem;
        struct MeshNavigationAllowedMode; // enum
        enum class MeshNavigationAllowedModeEnum
        {
            Never,
            PlayerOnly,
            Always,
            MeshNavigationAllowedMode_COUNT,
        };
        struct MeshNavigationBehaviorData;
        struct MaxActivationLevel; // enum
        enum class MaxActivationLevelEnum
        {
            Created,
            InWorld,
            Loading,
            Started,
        };
        struct VolumeConstraintDataGD;
        struct Game_MacroNavMeshStamper;
        struct PointCloudInstanceDataResource;
        struct PointCloudChunk;
        struct MapOfObjectItem_A;
        struct Manager_EntityID;
        struct Manager;
        struct WorldManager;
        struct WaveManager;
        struct WaterManager;
        struct VisualManager;
        struct VegetationManager;
        struct TrailManager;
        struct TerrainManager;
        struct SyncTempoManager;
        struct StreamingManager;
        struct SpatialMapManager;
        struct ShamanVisionManager;
        struct SensorManager;
        struct Scheduler;
        struct SceneManager;
        struct ResourceDebugger;
        struct ReloadManager;
        struct RegionManager;
        struct RPCServerManager;
        struct RPCMarshallingTests;
        struct QualityManager;
        struct PlayerManager;
        struct PhysicsEffectsManager;
        struct PestoManager;
        struct PerceptionManager;
        struct ParticleManager;
        struct NavMeshManager;
        struct LoadSaveManager;
        struct LightManager;
        struct InputManager;
        struct InfoboardManager;
        struct HeightMapManager;
        struct GroundTypeManager;
        struct GameMasterManager;
        struct GameEffectManager;
        struct FluidManager;
        struct FluidGameplayQueriesManager;
        struct FightManager;
        struct EventManager;
        struct EnvironmentManager;
        struct EntityManager;
        struct DialogManager;
        struct BoidsManager;
        struct BillboardManager;
        struct BehaviorManager;
        struct AnimalManager;
        struct ActorManager;
        struct ActionStateManager;
        struct LocomotionMode; // enum
        enum class LocomotionModeEnum
        {
            standup,
            quadstandup,
            crouch,
            prone,
            swim,
            ride,
            fly,
            dive,
            fall,
            cinematic,
            ridden,
            riddenfly,
            fight,
            clamber,
            buried,
            count,
        };
        struct MoveCapacityData_ReachSpeed;
        struct ListItem;
        struct LightType; // enum
        enum class LightTypeEnum
        {
            Omni,
            Hemi,
            Spot,
            Dir,
            LightType_Count,
        };
        struct Light;
        struct LightAttackData;
        struct lightAttackData;
        struct LedgePositionInfo;
        struct JumpHeightMultiplier;
        struct IsActive;
        struct Invincible;
        struct InventoryTags; // enum
        enum class InventoryTagsEnum
        {
            outfit,
            item,
            default_,
            lush,
            corrupted,
            soul,
            disguise,
            soulfreedflying,
            soulfreednormal,
            InventoryTags_COUNT,
        };
        struct TaggedEntityRef;
        struct InterpolationMethod; // enum
        enum class InterpolationMethodEnum
        {
            Spline,
            BSpline,
            InterpolationMethod_COUNT,
        };
        struct TrailProperties;
        struct Interactor;
        struct InputCollisionBehaviorData;
        struct InertiaTensor;
        struct ImpactAndSolidityData;
        struct ID;
        struct PhysicsReplicateData;
        struct HotSpotType; // enum
        enum class HotSpotTypeEnum
        {
            all,
            none,
            back,
            beam,
            bite,
            biter,
            breakablestrong,
            breakableweak,
            camera,
            center,
            grab,
            head,
            heal,
            ride,
            root,
            snap,
            slot,
            spawnlife,
            shoot,
            take,
            takehandle,
            vertebra,
            respawnslot,
            HotSpotType_COUNT,
        };
        struct PickableDistributorComponentData;
        struct HotspotData;
        struct HitWallEnvironmentData;
        struct HitWallData;
        struct HitType; // enum
        enum class HitTypeEnum
        {
            HitInstant,
            HitPoison,
            HitType_COUNT,
        };
        struct HitStyle; // enum
        enum class HitStyleEnum
        {
            None_,
            Bite,
            Light,
            Medium,
            Big,
            Eject,
            EjectFar,
            Fall,
            Impact,
            HitStyle_COUNT,
        };
        struct HeadCollisionBehaviorData;
        struct GrowingState; // enum
        enum class GrowingStateEnum
        {
            invalid,
            nogrow,
            growing,
            grown,
            manualgrow,
            degrowing,
            GrowingState_COUNT,
        };
        struct GroupAvoidanceEnum; // enum
        enum class GroupAvoidanceEnumEnum
        {
            lush,
            corrupted,
            tiny,
            small,
            medium,
            big,
            enormous,
            GroupAvoidanceEnum_COUNT,
        };
        struct VelocityObstaclesManager;
        struct GroundTypeData;
        struct GrasperInteractionData;
        struct GraspableInteractionData;
        struct GraspType; // enum
        enum class GraspTypeEnum
        {
            Bite,
            Grab,
            Hold,
            GraspType_COUNT,
        };
        struct GraspResistanceData;
        struct GeometryStamper;
        struct SkinnedPhysMeshStamper;
        struct MeshStamper;
        struct GameTimeInMs;
        struct GameProfile;
        struct GameSoftCollisionData;
        struct GameSnapData;
        struct GameSlopeData;
        struct GameShamanVisionData;
        struct GameReviveData;
        struct GameRespawnData;
        struct GamePropelData;
        struct GameParryData;
        struct GamePadSpeedBehaviorData;
        struct GamePadNavigationData;
        struct GameLODData;
        struct GameInfoDB;
        struct GameImmersionData;
        struct GameFlyData_FlyUp;
        struct GameFlyData_FlyDown;
        struct GameFlyData_Flap;
        struct GameFlyData_Dive;
        struct GameFlyData_Centrifugal;
        struct GameFlyData;
        struct GameFluidData_HeightThreshold;
        struct GameFluidData;
        struct GameFeetCatchUpData;
        struct GameFallData;
        struct GameEdgeData;
        struct GameDeathData;
        struct GameClockManager_TimeOfDay;
        struct GameClockManager_GameDate;
        struct GameClockManager;
        struct GameBiteData;
        struct GameBeamSnapData;
        struct GPEType; // enum
        enum class GPETypeEnum
        {
            BendTree,
            Geyser,
            PossessFlocking,
            Bridge,
            GPEType_COUNT,
        };
        struct FurProperties;
        struct FreezeData;
        struct ForceMultiplier;
        struct ForceBlendInReachRequired;
        struct ForceBlendIn;
        struct FluidVolumeComponentGD_SimulationParameters;
        struct FluidVolumeComponentGD_HeightMapData;
        struct FluidVolumeComponentGD_FluidVolumeData;
        struct FluidType; // enum
        enum class FluidTypeEnum
        {
            water,
            lava,
            mud,
            FluidType_COUNT,
        };
        struct ImmersedBehaviorData;
        struct FluidData;
        struct FloatRange;
        struct SmallActorSpawnRuleData;
        struct SmallActorSpawnPointData;
        struct FadeDuration;
        struct FadeDelay;
        struct FactionSpecieRelationData;
        struct FactionRelationData;
        struct FactionData;
        struct FactionManager;
        struct EventMusic;
        struct MusicManager;
        struct EventCameraData;
        struct EntityStateStaffOwnedVertebras_Inputs;
        struct EntityStateSet;
        struct PlayerState;
        struct EntityStateMotionConstrained_Inputs;
        struct EntityStateManageChildEntityPool_Inputs;
        struct EntityStateIncapacitated_Inputs;
        struct EntityStateChargeMode_EntityStateChargeModeInputs;
        struct EntityLODData;
        struct EntityID;
        struct EnergyValue; // enum
        enum class EnergyValueEnum
        {
            corrupted_strong,
            corrupted,
            lush,
            lush_strong,
        };
        struct VegetationPCloudData;
        struct RegenData;
        struct EnergySideData;
        struct EnergySide; // enum
        enum class EnergySideEnum
        {
            none,
            lush,
            corrupted,
            EnergySide_COUNT,
        };
        struct ReviveEnergyComponentInput_EnergySide;
        struct EntityStateRevive_Inputs;
        struct EntityStateCreatureHatching_Inputs;
        struct EnergySideEvent;
        struct EnergyIntensity; // enum
        enum class EnergyIntensityEnum
        {
            normal,
            strong,
            COUNT,
        };
        struct RegenerationManager;
        struct EnergyPoolGD_EnergyArea;
        struct EndPosition;
        struct Enabled;
        struct EDITOR_Mesh;
        struct EDITOR_LODsItem;
        struct DisplaceNoiseListItem;
        struct DisableFluid;
        struct DeltaTimeFactor;
        struct DebugManager_PlayerState;
        struct DebugManager_ComponentID;
        struct DebugDisplayFlags;
        struct DebugManager;
        struct DamagesInstant;
        struct DamageGauge;
        struct CreatureTypeData;
        struct CreatureProfile__CreatureProfileFact;
        struct CreatureProfile;
        struct CreatureDangerousness;
        struct ConstrainedMoveContextInput;
        struct ConstrainedInputData;
        struct ConditionalRigidityAttribute_RigidityParameter;
        struct ConditionalRigidityAttribute_Attributes;
        struct ComponentInputBase;
        struct ComponentInputEmpty;
        struct ComponentInput;
        struct WallRunComponentInput;
        struct VelocityObstacleComponentInput;
        struct UnifiedPhysicsDataComponentInput;
        struct SpiritAnimalShrineComponentInput;
        struct SoundEmitterComponentInput;
        struct SoftCollisionComponentInput;
        struct SmoothScaleComponentInput;
        struct ScriptComponentInput;
        struct ReviveEnergyComponentInput;
        struct RespawnabilityComponentInput;
        struct RagdollComponentInput;
        struct PhysicsImpactMakerComponentInput;
        struct PhysicsComponentInput;
        struct PerceiverComponentInput;
        struct PerceivableComponentInput;
        struct OutfitWearerComponentInput;
        struct MountIKControllerComponentInput;
        struct LifeComponentInput;
        struct InteractorComponentInput;
        struct InteractableGPEComponentInput;
        struct GrasperComponentInput;
        struct GraspableComponentInput;
        struct FluidComponentInput;
        struct EnergySpoutComponentInput;
        struct CreatureAIComponentInput;
        struct CinematicComponentInput;
        struct ChargedJumpComponentInput;
        struct CharacterControllerComponentInput;
        struct BreakableComponentInput;
        struct BeamTargetComponentInput;
        struct AttackTriggerComponentInput;
        struct AttackComponentInput;
        struct AnimationTransformDriverComponentInput;
        struct ComponentGD;
        struct WildObject;
        struct WallRunGD;
        struct VoxelSimulationGD;
        struct VolumeConstraintGD;
        struct VisualGD;
        struct VelocityObstacleGD;
        struct UnifiedPhysicsDataGD;
        struct TriggerEventCameraGD;
        struct TransformGD;
        struct TestUnion;
        struct TestTagsList;
        struct TestSetOfObject;
        struct TestEntityRef;
        struct TestDefaultValues;
        struct TestCreature;
        struct TestArrays;
        struct TerrainSurfaceObject;
        struct TerrainGD;
        struct TeamGD;
        struct SystemicCreature;
        struct StreamingLocatorGD;
        struct StreamableUnitGD;
        struct StickToTerrain;
        struct StaticObjectGD;
        struct StaffVertebrasGD;
        struct SpiritAnimalsHolderGD;
        struct SpiritAnimalShrineGD;
        struct SpiritAnimalGD;
        struct SoundOpportunityComponentGD;
        struct SoundEmitterGD;
        struct SoundAreaGD;
        struct SoulRespawnOpportunityGD;
        struct SoftCollisionGD;
        struct SmoothScaleComponentGD;
        struct SideMapGateGD;
        struct ShapeshiftStatueGD;
        struct ShamanVisionGD;
        struct ShamanItemGD;
        struct SensorVoxelsGD;
        struct SensorControllerGD;
        struct SeedPatch;
        struct ScriptComponentGD;
        struct ReviveEnergyGD;
        struct RespawnabilityGD;
        struct RespawnPlaceGD;
        struct RegenerableVegetationGD;
        struct RegenSwitcherGD;
        struct RagdollGD;
        struct QuickCreatureSwitchGD;
        struct ProtoComponentGD;
        struct ProjectileShooterGD;
        struct PlayerComponentGD;
        struct PickableDistributorComponentGD;
        struct PickableComponentGD;
        struct PhysicsTriggerGD;
        struct PhysicsMeshProviderGD;
        struct PhysicsMeshDeformerGD;
        struct PhysicsImpactMakerGD;
        struct PhysicsGD;
        struct PhysicsDataGD;
        struct PerceiverGD;
        struct PerceivableGD;
        struct OutfitWearerGD;
        struct OutfitGD;
        struct NotVisibleInSubscene;
        struct NetworkNode;
        struct NetworkLink;
        struct NetGD;
        struct NavMeshActivatorGD;
        struct MultiThumbnail;
        struct MounterGD;
        struct MountableGD;
        struct MountIKControllerGD;
        struct MissionHolderGD;
        struct MeshNavigationInfosGD;
        struct Mesh;
        struct LifeComponentGD;
        struct LDPrimitive;
        struct ItemHolderGD;
        struct InventoryGD;
        struct InterestPointGD;
        struct InteractableGPEGD;
        struct InfoboardRegistererGD;
        struct IncapacitateComponentGD;
        struct HotspotsGD;
        struct HitTriggerGD;
        struct HeightObj;
        struct HeightMapComponentGD;
        struct HealthAreaGD;
        struct HealerGD;
        struct HealTriggerGD;
        struct HealPumpGD;
        struct GroundTypeSamplerGD;
        struct GrasperGD;
        struct GraspableGD;
        struct GameEffectSpawnerGD;
        struct FurComponentGD;
        struct FluidVolumeComponentGD;
        struct FluidViewGD;
        struct FluidGD;
        struct FluidFXEntitySpawnerGD;
        struct FireSensorGD;
        struct EventTriggerGD;
        struct EventHandlerGD;
        struct EnvStampGD;
        struct EnergySpoutGD;
        struct EnergySideSwitcherGD;
        struct EnergyPoolGD;
        struct EnergyNetworkListenerGD;
        struct EnergyDrainGD;
        struct EnergyCrookGD;
        struct DummyComponentGD;
        struct DiveAttackGD;
        struct DistanceTriggerGD;
        struct FightDistanceTriggerGD;
        struct DebugGridGD;
        struct CustomThumbnail;
        struct CreatureUIGD;
        struct ConstrainedMoveGD;
        struct ConnectorGD;
        struct ComponentWithProtoCodeGD;
        struct ClothAnimationGD;
        struct ChildEntityPoolComponentGD;
        struct CharacterPlatformGD;
        struct CameraDataGD;
        struct BreakableGD;
        struct BittenGD;
        struct AttackTriggerGD;
        struct AssemblyGD;
        struct AnimationTransformDriverGD;
        struct AnimationPlaylistGD;
        struct AnimationPhysicsChainConstraintsGD;
        struct AnimationModelGD;
        struct AnimationHitsConstraintsGD;
        struct Component; // Union
        struct Object_Components; // union_set
        struct GameEffect;
        struct WindTurbulenceEffect;
        struct ShakeEffect;
        struct RepulseEffect;
        struct RegenEffect;
        struct FollowerCallEffect;
        struct FluidEffect;
        struct CallForHelpEffect;
        struct BeamEffect;
        struct BeamDetectionEffect;
        struct Components; // union_set
        struct UIMessage;
        struct UIManager;
        struct SoundManager;
        struct OnlineDebugger_BandwidthWindow_BandwithLimit;
        struct OnlineDebugger_BandwidthWindow;
        struct LightComponentGD;
        struct GradientColor;
        struct EditorManager;
        struct BoidsGD;
        struct Collider;
        struct Codec;
        struct Zlib;
        struct Lz4Fast;
        struct ClimbEdgeData_LedgeData;
        struct ClimbEdgeData;
        struct ClassMemberRef;
        struct ComponentSignalRef;
        struct ComponentMethodRef;
        struct Connection;
        struct CinematicUpdateType; // enum
        enum class CinematicUpdateTypeEnum
        {
            none,
            Internal,
            Pesto,
            CinematicUpdateType_COUNT,
        };
        struct CinematicSlot;
        struct Sequence;
        struct CinematicGD;
        struct CineEvent;
        struct CineEventTrigger;
        struct CineEventTriggerPlaySound;
        struct CineEventTriggerPlaySequence;
        struct CineEventTriggerGameStateChange;
        struct CineEventTriggerEventHandlerPost;
        struct CineEventTriggerDisplayUIMessage;
        struct CineEventTest;
        struct CineEventTestIsCanceled;
        struct CineEventTestInput;
        struct CineEventTestEndCurrentSequence;
        struct CineEventTestCurrentGameState;
        struct CharacterControllerSlideData;
        struct CharacterControllerGroundNormalData;
        struct CharacterControllerFallData;
        struct CharacterControllerClamberData;
        struct CarryMode; // enum
        enum class CarryModeEnum
        {
            carryno,
            carrylight,
            CarryMode_COUNT,
        };
        struct CapabilitiesAndTags;
        struct ZoneStamper;
        struct OffMeshLink;
        struct NavMeshStamperGD;
        struct CanTakeHit;
        struct CreatureComponentInput;
        struct CameraType; // enum
        enum class CameraTypeEnum
        {
            NONE,
            Death,
            Editor,
            Event,
            Free,
            ThirdPerson,
            ThirdPersonFollow,
            ThirdPersonAim,
            ThirdPersonClamber,
            MotionConstraint,
            OnSpline,
            OnBones,
            TopView,
            EntitySwap,
            SightConstraint,
            Locked,
            Pan,
            CameraType_COUNT,
        };
        struct CameraSetterGD;
        struct CameraSoundEvent;
        struct CameraShakeData;
        struct ExplosionEffect;
        struct CameraFreeData;
        struct CameraEditorData;
        struct CameraManager;
        struct BoneStartPoint;
        struct InteractorGD;
        struct BoneAnimation;
        struct BoidSpeedMaxData;
        struct BoidGoalMode; // enum
        enum class BoidGoalModeEnum
        {
            none,
            parent,
            home,
            BoidGoalMode_COUNT,
        };
        struct BlendShapeAnimation;
        struct AnimationIntermediateFormat;
        struct BiteData;
        struct BiomeSoundBank_sBiomeEnv;
        struct BiomeSoundBank_sBiomeSound;
        struct BiomeSoundBank_sBiomeSFX;
        struct BiomeSoundBank;
        struct BillboardRenderingType; // enum
        enum class BillboardRenderingTypeEnum
        {
            Cross,
            CameraFacingQuad,
            Mesh,
            BillboardRenderingType_COUNT,
        };
        struct BillboardRenderingSides; // enum
        enum class BillboardRenderingSidesEnum
        {
            SideA,
            SideB,
            BothSides,
            BillboardRenderingSides_COUNT,
        };
        struct BillboardRenderingAttribute; // enum
        enum class BillboardRenderingAttributeEnum
        {
            Horizontal,
            Vertical,
            Frontal,
            BillboardRenderingAttribute_COUNT,
        };
        struct BillboardCameraFacingQuadType; // enum
        enum class BillboardCameraFacingQuadTypeEnum
        {
            AroundAxis,
            AroundCenter,
            NotFacingCamera,
            BGELikeShaft,
            BillboardCameraFacingQuadType_COUNT,
        };
        struct BillboardRendererProperties;
        struct BillboardProperties;
        struct BehaviorTypedValue;
        struct BehaviorScriptData;
        struct CreatureAIGD;
        struct BeamStaffMode; // enum
        enum class BeamStaffModeEnum
        {
            Off,
            Searching,
            Creature,
            InteractingGPE,
            Item,
            PickUp,
            Hatching,
            SetRespawnPlaceAsCheckpoint,
            SetSavePoint,
            EnableSpiritShrine,
            Any,
            BeamStaffMode_COUNT,
        };
        struct BeamTargetGD;
        struct BaseParameters;
        struct Hit;
        struct AutoRotationType; // enum
        enum class AutoRotationTypeEnum
        {
            None_,
            _2D,
            _3D,
            AutoRotationType_COUNT,
        };
        struct AttitudeMode; // enum
        enum class AttitudeModeEnum
        {
            normal,
            injured,
            dead,
            aggressive,
            groggy,
            bitten,
            charge,
            AttitudeMode_COUNT,
        };
        struct AttackType; // enum
        enum class AttackTypeEnum
        {
            Normal,
            Backward,
            Charged,
            JumpOnto,
            Bite,
            Stomp,
            Dive,
            AttackType_COUNT,
        };
        struct AttackPositionRetimingData_SpecieRetimingCoeff;
        struct AttackPositionRetimingData;
        struct AttackPhysicsForceData;
        struct AttackImpactData;
        struct AttackData;
        struct AttackDamageData;
        struct GameAttackData;
        struct GameManager;
        struct AreaNavigation;
        struct PathFinderGD;
        struct Archetype; // enum
        enum class ArchetypeEnum
        {
            flying,
            swimming,
            quadripede,
            bipede,
            item,
            structure,
            activator,
            Archetype_COUNT,
        };
        struct AnimationTreeConstraintsGD_GrowData;
        struct AnimationTreeConstraintsGD_ForceData;
        struct AnimationTreeConstraintsGD_BendData;
        struct AnimationTreeConstraintsGD;
        struct AnimationSpace; // enum
        enum class AnimationSpaceEnum
        {
            bonespace,
            rootspace,
        };
        struct AnimationModelComponentInput_StyleMode;
        struct AnimationModelComponentInput_SpeedMode;
        struct AnimationModelComponentInput_LocomotionMode;
        struct AnimationModelComponentInput_CarryMode;
        struct AnimationModelComponentInput_AttitudeMode;
        struct AnimationMode; // enum
        enum class AnimationModeEnum
        {
            absolute,
            additive,
        };
        struct AnimationGenericConstraintsGD;
        struct AnimationLegsConstraints_SlopeOffsetInfo;
        struct AnimationLegsConstraintsGD;
        struct AnimationEventsGeneratorGD_TrackedBone;
        struct AnimationEventsGeneratorGD;
        struct AnimTagTimelineTransition; // enum
        enum class AnimTagTimelineTransitionEnum
        {
            beginning,
            copy,
            reverse,
            AnimTagTimelineTransition_COUNT,
        };
        struct AnimTag; // enum
        enum class AnimTagEnum
        {
            none,
            apex,
            forward,
            forwardright,
            right,
            backwardright,
            backward,
            backwardleft,
            left,
            forwardleft,
            regular,
            alignedregular,
            goofy,
            alignedgoofy,
            top,
            bottom,
            up,
            upforward,
            upward,
            down,
            downforward,
            downward,
            in_,
            out,
            horizontal,
            vertical,
            count,
        };
        struct MoveCapacityData_AnimTagTransitionGroup;
        struct MoveCapacityData_AnimTagTimelineTransitionItem;
        struct MoveCapacityData_AnimTagTimelineTransitionTable;
        struct MoveCapacityData;
        struct CharacterControllerGD;
        struct DirectionSync;
        struct DirectionSyncData;
        struct AnimationManager;
        struct AnimationModelComponentInput_AnimTag;
        struct AnimMirroringSpecData;
        struct AnimMirroringData;
        struct AnimationControllerGD;
        struct AnimAdditionalTag; // enum
        enum class AnimAdditionalTagEnum
        {
            none,
            small,
            light,
            medium,
            big,
            enormous,
            menace,
            variant1,
            variant2,
            variant3,
            variant4,
            variant5,
            variant6,
            variant7,
            variant8,
            variant9,
            variant10,
            variant11,
            variant12,
            variant13,
            variant14,
            variant15,
            variant16,
            variant17,
            variant18,
            variant19,
            variant20,
            ejected,
            ejectedfar,
            plunge,
            lateralplunge,
            aerialplunge,
            waterfall,
            bounce,
            AnimAdditionalTag_COUNT,
        };
        struct AttackChargedData;
        struct StrongAttackData;
        struct strongAttackData;
        struct AnalyticsManager_MongoDBConnection;
        struct AnalyticsManager;
        struct AerialAttackData;
        struct AttackComponentGD_AerialAttackData;
        struct AttackComponentGD;
        struct AdditionnalTag;
        struct ActorStates; // union_set
        struct Object;
        struct UnitTestComponent;
        struct Entity;
        struct SubScene;
        struct Scene;
        struct ActorStateTeleport_Inputs;
        struct ActorStateTeleportWhileMovingInputs;
        struct ActorStateFlockingChangingParams_Params;
        struct ActorStateArbiterDecision; // enum
        enum class ActorStateArbiterDecisionEnum
        {
            CancelCurrent,
            Coexist,
            RejectNew,
            Specific,
            Wait,
            ArbiterDecision_COUNT,
        };
        struct ActorState;
        struct EntityStateWaterfallEndJump;
        struct EntityStateWallRunJump;
        struct EntityStateWallRunDrop;
        struct EntityStateWallRun;
        struct EntityStateWaitToJumpAgain;
        struct EntityStateUseAsActiveCheckpoint;
        struct EntityStateUndergroundCavity;
        struct EntityStateTryUnmount;
        struct EntityStateTriggerBeamTargetEvent;
        struct EntityStateTreeTurretTargeting;
        struct EntityStateTreeSwitchTransition;
        struct EntityStateTreeMetamorphosisUsingScale;
        struct EntityStateTreeMetamorphosis;
        struct EntityStateTooDeep;
        struct EntityStateTakeDamageOnMount;
        struct EntityStateStrongAttackJumped;
        struct EntityStateStrongAttackCharging;
        struct EntityStateStrongAttackCharged;
        struct EntityStateStrongAttack;
        struct EntityStateStrafeDodge;
        struct EntityStateStickedLand;
        struct EntityStateStalactiteReadyToFall;
        struct EntityStateStalactiteFallen;
        struct EntityStateStaffVertebrasAutoRefill;
        struct EntityStateStaffOwnedVertebras;
        struct EntityStateSpiritShrineEnabled;
        struct EntityStateSpiritShrineDisabled;
        struct EntityStateSpiritAttacked;
        struct EntityStateSpiritAttack;
        struct EntityStateSpiritAnimalSoulForm;
        struct EntityStateSpiritAnimalFleshForm;
        struct EntityStateSpiritAnimalBeingCalled;
        struct EntityStateSpeedLimiter;
        struct EntityStateSoftCollide;
        struct EntityStateSnappedToHatchingTarget;
        struct EntityStateSlowMotion;
        struct EntityStateShootHatchingEnergy;
        struct EntityStateSetSavePoint;
        struct EntityStateSavePointActivated;
        struct EntityStateRevive;
        struct EntityStateRespawnability;
        struct EntityStateRespawn;
        struct EntityStateReserveMountSlots;
        struct EntityStateRegainCapacity;
        struct EntityStateRecoverLand;
        struct EntityStateReadyToGiveOrder;
        struct EntityStateRaise;
        struct EntityStatePrepareToHoldingOnToNavigationMesh;
        struct EntityStatePlungeLand;
        struct EntityStatePlayer;
        struct EntityStatePickableDistributor;
        struct EntityStatePhysicsMove;
        struct EntityStatePhysicsIdle;
        struct EntityStateParryCooldown;
        struct EntityStateParry;
        struct EntityStateParried;
        struct EntityStateOrientedDrift;
        struct EntityStateOrderingAttack;
        struct EntityStateMoveOnOffMeshLink;
        struct EntityStateMotionConstrainedLand;
        struct EntityStateMotionConstrained;
        struct EntityStateMineScaling;
        struct EntityStateMineRespawning;
        struct EntityStateMeditateToInteract;
        struct EntityStateMask;
        struct EntityStateManageChildEntityPool;
        struct EntityStateLateralLand;
        struct EntityStateLateralDodge;
        struct EntityStateJustStarted;
        struct EntityStateJumpHeightMultiplier;
        struct EntityStateInteractedGPE;
        struct EntityStateInjured;
        struct EntityStateInconvertible;
        struct EntityStateIncapacitated;
        struct EntityStateInVertebraeArea;
        struct EntityStateImmersedJump;
        struct EntityStateHoldingStaffVertebras;
        struct EntityStateHitWall;
        struct EntityStateHintNone;
        struct EntityStateHintLight;
        struct EntityStateHintFull;
        struct EntityStateHideOut;
        struct EntityStateHideIn;
        struct EntityStateHide;
        struct EntityStateGroundedJump;
        struct EntityStateGrasp;
        struct EntityStateGrabbedOut;
        struct EntityStateGrabbedIn;
        struct EntityStateGrabbed;
        struct EntityStateGrabOut;
        struct EntityStateGrabIn;
        struct EntityStateGrabAttack;
        struct EntityStateGrab;
        struct EntityStateForceCanBeTargeted;
        struct EntityStateFastRun;
        struct EntityStateFallSafe;
        struct EntityStateFallInjured;
        struct EntityStateFallDying;
        struct EntityStateFall;
        struct EntityStateFailingOrder;
        struct EntityStateExtraLife;
        struct EntityStateEnergySpoutState;
        struct EntityStateEnergySide;
        struct EntityStateEnergyRootHatching;
        struct EntityStateEnergyRootAbortHatching;
        struct EntityStateEjectedLand;
        struct EntityStateDodgeCooldown;
        struct EntityStateDisplayHatchingCost;
        struct EntityStateDisguise;
        struct EntityStateDisabledVertebrae;
        struct EntityStateDisablePerceptionRequest;
        struct EntityStateDeathLand;
        struct EntityStateDamageLand;
        struct EntityStateCreatureProfile;
        struct EntityStateCreatureHatching;
        struct EntityStateControlGPE;
        struct EntityStateConstrainedMove;
        struct EntityStateConstrainedInput;
        struct EntityStateCombat;
        struct EntityStateCollectVertebrae;
        struct EntityStateClimbWaterfallImpulse;
        struct EntityStateClimbWaterfall;
        struct EntityStateClassicLand;
        struct EntityStateClassicDodge;
        struct EntityStateCinematicReady;
        struct EntityStateCinematicCompleted;
        struct EntityStateChargingJump;
        struct EntityStateChargedJump;
        struct EntityStateChargeMode;
        struct EntityStateCanNotBePerceived;
        struct EntityStateCallAndMountSpiritAnimal;
        struct EntityStateBridgeBeingControlled;
        struct EntityStateBridgeAttracted;
        struct EntityStateBridgeAttached;
        struct EntityStateBreakableEntire;
        struct EntityStateBreakableBroken;
        struct EntityStateBreakableBreaking;
        struct EntityStateBounceLand;
        struct EntityStateBounce;
        struct EntityStateBoidsHomePos;
        struct EntityStateBittenDefense;
        struct EntityStateBitten;
        struct EntityStateBiteOut;
        struct EntityStateBiteIn;
        struct EntityStateBiteAttack;
        struct EntityStateBite;
        struct EntityStateBeingOnSpike;
        struct EntityStateBeingOnSlope;
        struct EntityStateBeingLinked;
        struct EntityStateBeingInReeds;
        struct EntityStateBeingBlockedByVine;
        struct EntityStateBackwardLand;
        struct EntityStateBackwardDodge;
        struct EntityStateAttitudeGroggy;
        struct EntityStateAttackDive;
        struct EntityStateAskStaffGuide;
        struct EntityStateApplyExtraLife;
        struct EntityStateAirControl;
        struct EntityStateAimAt;
        struct EntityStateAerialJump;
        struct EntityStateAboutToBeHatched;
        struct ActorStateTryUpgradeShamanStaff;
        struct ActorStateTryEquipShamanStaff;
        struct ActorStateTeleportWhileMoving;
        struct ActorStateTeleportToTarget;
        struct ActorStateTeleport;
        struct ActorStateTaunting;
        struct ActorStateStopAttitudeAggressive;
        struct ActorStateSpeedMultiplier;
        struct ActorStateSoulWaitingToRespawn;
        struct ActorStateSoulRespawn;
        struct ActorStateSlope;
        struct ActorStateSleeping;
        struct ActorStateSkeletonPartPickUpState;
        struct ActorStateSkeletonPartPickUpRequest;
        struct ActorStateSink;
        struct ActorStateShootingFlow;
        struct ActorStateShapeshift;
        struct ActorStateShamanItemPartState;
        struct ActorStateShamanItemLiving;
        struct ActorStateSendMission;
        struct ActorStateScreaming;
        struct ActorStateRequestingWaiting;
        struct ActorStateRequestingHealing;
        struct ActorStateRecover;
        struct ActorStateReactingLava;
        struct ActorStatePossessGPE;
        struct ActorStatePossessFlocking;
        struct ActorStateNavigationMesh;
        struct ActorStateMovingSwim;
        struct ActorStateMovingStandUp;
        struct ActorStateMovingRide;
        struct ActorStateMovingProne;
        struct ActorStateMovingFly;
        struct ActorStateMovingFall;
        struct ActorStateMovingDive;
        struct ActorStateMovingClamber;
        struct ActorStateMoveAlongBezier;
        struct ActorStateMeetingLava;
        struct ActorStateLosingOxygen;
        struct ActorStateLeavingLava;
        struct ActorStateInvincible;
        struct ActorStateIKConstraint;
        struct ActorStateHoldingItem;
        struct ActorStateHitEnergyWall;
        struct ActorStateHeld;
        struct ActorStateHasNoBody;
        struct ActorStateForceAgainstSlope;
        struct ActorStateFluidSlowDown;
        struct ActorStateFlockingRigidbodyBeingActive;
        struct ActorStateFlockingLiving;
        struct ActorStateFlockingIndividualSpawning;
        struct ActorStateFlockingChangingParams;
        struct ActorStateFlockingAttackFlocking;
        struct ActorStateExitingFly;
        struct ActorStateEnergyShooting;
        struct ActorStateDucking;
        struct ActorStateDodge3D;
        struct ActorStateDisabledOut;
        struct ActorStateDisabledIn;
        struct ActorStateDisabled;
        struct ActorStateDead;
        struct ActorStateCreature;
        struct ActorStateConvertWithFlow;
        struct ActorStateChargeSpendLife;
        struct ActorStateChangeEnergySide;
        struct ActorStateCatapultedLand;
        struct ActorStateCatapulted;
        struct ActorStateCallingFollower;
        struct ActorStateBuried;
        struct ActorStateBittenShaked;
        struct ActorStateBittenRegenerated;
        struct ActorStateBiteJumpOut;
        struct ActorStateBiteEntityLiving;
        struct ActorStateBendingTree;
        struct ActorStateBendingConstraint;
        struct ActorStateBeingRided;
        struct ActorStateBeingOnPossessedGPE;
        struct ActorStateBeingOnMount;
        struct ActorStateBeingOnGroundFromImmersed;
        struct ActorStateBeingOnGround;
        struct ActorStateBeingInAir;
        struct ActorStateBeingImmersedFromOnGround;
        struct ActorStateBeingImmersedFromInAir;
        struct ActorStateBeingImmersed;
        struct ActorStateBehaviorState;
        struct ActorStateAttitudeAggressive;
        struct ActorStateApplyHit;
        struct ActorStateAnsweringCall;
        struct ActorStateAlive;
        struct ActorStateAimCharge;
        struct ActionWait;
        struct ActionUnmount;
        struct ActionTriggerStandUp;
        struct ActionTriggerShamanVisionExit;
        struct ActionTriggerCrouch;
        struct ActionTopView;
        struct ActionTalk;
        struct ActionTakeOff;
        struct ActionStrafeTurn;
        struct ActionStrafe;
        struct ActionStop;
        struct ActionStartRun;
        struct ActionSlide;
        struct ActionShootBeam;
        struct ActionShamanVision;
        struct ActionScaleRider;
        struct ActionRise;
        struct ActionRiderStance;
        struct ActionReviveMaskEffect;
        struct ActionRagdoll;
        struct ActionQuadStandUpStateOut;
        struct ActionQuadStandUpStateIn;
        struct ActionQuadStandUpState;
        struct ActionPushed;
        struct ActionPropelled;
        struct ActionPlayAnim;
        struct ActionPatinate;
        struct ActionPathfindAndMove;
        struct ActionOutfitSpecialState;
        struct ActionOrientMount;
        struct ActionMoveTo;
        struct ActionMoveProjectile;
        struct ActionMove;
        struct ActionMountReception;
        struct ActionLookAt;
        struct ActionLandingMount;
        struct ActionLand;
        struct ActionJumpOnto;
        struct ActionJump;
        struct ActionIncarnated;
        struct ActionIncarnate;
        struct ActionIdle;
        struct ActionHit;
        struct ActionFlyUp;
        struct ActionFlyFlap;
        struct ActionFlyDown;
        struct ActionFlyDive;
        struct ActionFlyCrash;
        struct ActionDrop;
        struct ActionDrift;
        struct ActionDrawWeaponState;
        struct ActionDrawWeapon;
        struct ActionDrawAttention;
        struct ActionDodge;
        struct ActionDisableAndFollow;
        struct ActionDigUpTreasure;
        struct ActionDecelerate;
        struct ActionCollapse;
        struct ActionClimbEdge;
        struct ActionClamberRise;
        struct ActionClamberMove;
        struct ActionClamberLand;
        struct ActionClamberJumpOff;
        struct ActionClamberJump;
        struct ActionClamberDropOff;
        struct ActionCinematic;
        struct ActionChosen;
        struct ActionChangeRidingSpot;
        struct ActionChangeMount;
        struct ActionCentrifugal;
        struct ActionCallForHelp;
        struct ActionBrake;
        struct ActionBittenState;
        struct ActionBiteOut;
        struct ActionBiteIn;
        struct ActionBite;
        struct ActionAttackStomp;
        struct ActionAttackJumpOnto;
        struct ActorCategory; // enum
        enum class ActorCategoryEnum
        {
            CATEGORY_All,
            CATEGORY_Action,
            CATEGORY_AnimationLegConstraint,
            CATEGORY_ActionAttack,
            CATEGORY_Attitude,
            CATEGORY_Context,
            CATEGORY_Control,
            CATEGORY_ActionCosmetic,
            CATEGORY_ActionDamage,
            CATEGORY_ActionDefault,
            CATEGORY_ActionDie,
            CATEGORY_Environment,
            CATEGORY_Fall,
            CATEGORY_ActionGrab,
            CATEGORY_ActionGrasp,
            CATEGORY_ActionBite,
            CATEGORY_Hint,
            CATEGORY_LookAt,
            CATEGORY_ActionJump,
            CATEGORY_ActionLand,
            CATEGORY_Life,
            CATEGORY_Locomotion,
            CATEGORY_ActionMove,
            CATEGORY_Persistent,
            CATEGORY_Purgatory,
            CATEGORY_ActionSlide,
            CATEGORY_ActionStop,
            CATEGORY_ActionStrafe,
            CATEGORY_Transition,
            CATEGORY_Trigger,
            CATEGORY_ActionWingFlutter,
            CATEGORY_Health,
            CATEGORY_HealthAlive,
            CATEGORY_HealthDead,
            CATEGORY_KnockedOut,
            CATEGORY_EntitySwitchTransition,
            CATEGORY_EnergyRoot,
            CATEGORY_EnergySpout,
            CATEGORY_Energy,
            CATEGORY_GPE,
            CATEGORY_SpiritAnimal,
            CATEGORY_Hatching,
            CATEGORY_Respawn,
            CATEGORY_Save,
            CATEGORY_Cinematic,
            CATEGORY_Loading,
            CATEGORY_NoCategory,
        };
        struct ConditionalRigidityAttribute_Conditions;
        struct ConditionalRigidityAttribute;
        struct AnimationTailConstraintsGD;
        struct ActorAbility; // enum
        enum class ActorAbilityEnum
        {
            landing,
            crouch,
            fly,
            ride,
            dive,
            stinky,
            ActorAbility_COUNT,
        };
        struct ActionTurn_Inputs;
        struct ActionTurn;
        struct ActionStateArbiter_StateStateDecision;
        struct ActionStateArbiter_StateStateDecisionPass;
        struct ActionStateArbiter_StateOrderPass;
        struct ActionStateArbiter_StateCategoryDecision;
        struct ActionStateArbiter_StateCategoryDecisionPass;
        struct ActionStateArbiter_StateAllDecisionPass;
        struct ActionStateArbiter_CategoryStateDecision;
        struct ActionStateArbiter_CategoryStateDecisionPass;
        struct ActionStateArbiter_CategoryOrderPass;
        struct ActionStateArbiter_CategoryCategoryDecision;
        struct ActionStateArbiter_PairDecisionPass;
        struct ActionStateArbiter_CategoryCategoryDecisionPass;
        struct ActionStateArbiter_CategoryAllDecisionPass;
        struct ActionStateArbiter_AllStateDecisionPass;
        struct ActionStateArbiter_AllCategoryDecisionPass;
        struct ActionStateArbiter_AllAllDecisionPass;
        struct ActionStateArbiter;
        struct ActionStackFilter;
        struct ActionStackFilterRide;
        struct ActionShakeOffInputs;
        struct ActionShakeOff;
        struct ActionMode; // enum
        enum class ActionModeEnum
        {
            noaction,
            attack,
            attackjump,
            attackcharged,
            attackpush,
            attackjumponto,
            bite,
            biteattack,
            stun,
            collapse,
            throw_,
            respawn,
            incarnate,
            incarnated,
            hit,
            hitwall,
            hitjump,
            landing,
            landingfail,
            landingcatapult,
            landingrecover,
            landingdamage,
            landingdying,
            landinggrip,
            landingtree,
            jumpmount,
            fallin,
            landingmount,
            soul,
            mountreception,
            changeridingspot,
            goingtomountstate,
            mount,
            unmount,
            flap,
            flystop,
            flapfast,
            turn,
            turnfromspeed0,
            turnfromspeed1,
            turnfromspeed2,
            turnfromspeed3,
            jump,
            jumpoff,
            doublejump,
            jumpcharging,
            jumpcharged,
            longjump,
            bounce,
            regenerate,
            drift,
            wait,
            chosen,
            revive,
            revivemaskeffect,
            shakeoff,
            convert,
            drop,
            landingdrop,
            dropoff,
            start,
            reachspeed3,
            strafe,
            strafeturn,
            slide,
            slope,
            forceagainstslope,
            patinate,
            climb,
            call,
            callanswer,
            scream,
            grab,
            grabattack,
            grabbed,
            grabbedin,
            grabbedout,
            taunt,
            sink,
            shoot,
            reload,
            stop,
            rise,
            centrifugal,
            climbedgehead,
            climbedgehips,
            climbedgefoot,
            jumpedge,
            catapult,
            sleep,
            head,
            chest,
            ascendpurgatory,
            purgatory,
            stung,
            riderstance,
            drawweapon,
            levitate,
            levitatemove,
            aim,
            wallrun,
            wallrunjump,
            wallrundrop,
            strongattackcharging,
            strongattackcharged,
            strongattack,
            aimcharge,
            aimcharged,
            aimflow,
            shootcharged,
            shootchargedlight,
            shootchargedmedium,
            shootchargedbig,
            emptyshoot,
            attackstomp,
            requestwait,
            requestheal,
            quadstandupin,
            standupin,
            diguptreasure,
            swimin,
            swimlanding,
            duck,
            recover,
            happy,
            underground,
            spawn,
            unspawn,
            dance,
            askstaffguide,
            hintfull,
            hintlight,
            hintnone,
            hatching,
            dying,
            followerorder,
            ultimateattack,
            ultimateattacked,
            parry,
            failingorder,
            settingrespawnplace,
            romlookat,
            emoteshame,
            emotecrazy,
            emotetaunt,
            emoteproud,
            emotemenace,
            emotehello,
            emoteimpatience,
            ActionMode_COUNT,
        };
        struct InGameCameraParams;
        struct InGameCameraObservationParams;
        struct InGameCameraData;
        struct ChargedJumpAnimation;
        struct ChargedJumpGD;
        struct BoidParams;
        struct AnimationModelComponentInput_ActionMode;
        struct AnimationModelComponentInput;
        struct AnimTags;
        struct ActionEmote;
        struct ActionAimProjectile;
        struct ActionAttack_AttackOutputs;
        struct ActionAttack;
        struct AbilityData;
        struct ActorGD;
        struct ProjectileGD;
        struct CreatureGD;
        struct ClothGD;
        struct AaMode; // enum
        enum class AaModeEnum
        {
            Fxaa,
            Smaa,
            None_,
            AaMode_Count,
        };
        struct RenderManager_RenderConfig;
        struct RenderManager;
        struct AIOrderType; // enum
        enum class AIOrderTypeEnum
        {
            AIOrderType_None,
            follow,
            attack,
            stay,
            heal,
            transhumance,
            changemode,
            readytoattack,
            AIOrderType_COUNT,
        };
        struct AIContextSlot;
        struct AIContextGD;
        struct AIAggroInitAndDecValue;
        struct AIKnowledgeManager;
        struct ActorStateStack;
        struct AnalyticsFPS;
        struct AnalyticsInGameViewer;
        struct AnalyticsObserverInterface;
        struct AnimationGDData;
        struct AnimationTreeConstraintsGD_BendSoundEventData;
        struct AudioEventData;
        struct BehaviorPesto;
        struct CheatCodeReplication;
        struct ClassRef;
        struct CloudsGenerator;
        struct ConditionalRigidityAttribute_ActorStateName;
        struct ContactActor;
        struct Edge;
        struct EntityArchive_MetaData;
        struct EntityGD;
        struct EntityGDRef;
        struct FadeEffect;
        struct GRC;
        struct GVoxelVolumeCollection;
        struct IMatchMakerApi;
        struct IOnlineApi;
        struct InputController;
        struct MeshNavigationBehavior;
        struct MeshShape;
        struct NavMeshArea; // enum
        enum class NavMeshAreaEnum
        {
            Hole,
            Ground,
            ShallowWater,
            DeepWater,
            Beach,
            Special,
            NavMeshArea_COUNT,
        };
        struct NetRoot;
        struct OutfitFadeParameter;
        struct OwnershipModule;
        struct PhysicsNetworker;
        struct PlayerManagerDebugger;
        struct PointCloud;
        struct RagdollSetupData;
        struct ReplicaReplay;
        struct SceneNode;
        struct SceneNodeGraph;
        struct Sensor;
        struct SmallActorSpawnRuleExchangeData;
        struct StateGauge;
        struct TagInfo;
        struct Team_PlayerData;
        struct TextureGroundTypeMap;
        struct TextureHeightMap;
        struct Timer;
        struct TravelParams;
        struct VegetationResourceData;
        struct VegetationVisibilityDistanceCategory;
        struct VisualResourceBuildData;
        struct ZoneCylinderShape;
        struct ZoneMeshShape;
        struct sBiomeSFXResult;
        struct sBiomeSoundResult;
        struct sJointMotorDesc;
        using Vector4 = PrimArray<Ent::Gen2::Float>;
        using Vector3i = PrimArray<Ent::Gen2::Int>;
        using Vector3 = PrimArray<Ent::Gen2::Float>;
        using Vector2 = PrimArray<Ent::Gen2::Float>;
        using ThumbPath = Ent::Gen2::String;
        using Quat = PrimArray<Ent::Gen2::Float>;
        using Matrix44 = PrimArray<Ent::Gen2::Float>;
        using Matrix43 = PrimArray<Ent::Gen2::Float>;
        using Matrix33 = PrimArray<Ent::Gen2::Float>;
        using Color = PrimArray<Ent::Gen2::Float>;
        using Matrix22 = PrimArray<Ent::Gen2::Float>;
        using Matrix32 = PrimArray<Ent::Gen2::Float>;
        using StringHash = Ent::Gen2::String;

        struct variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_ : Base // Union
        {
            explicit variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "eastl::variant<eastl::string,bool,s32,float,Vector2,Vector3,Position,eastl::vector<eastl::string>,eastl::vector<bool>,eastl::vector<s32>,eastl::vector<float>,eastl::vector<Vector2>,eastl::vector<Vector3>,eastl::vector<Position>>";
            char const* getType() const;
            std::optional<Ent::Gen2::String> string();
            Ent::Gen2::String setstring();
            std::optional<Ent::Gen2::Bool> bool_();
            Ent::Gen2::Bool setbool_();
            std::optional<Ent::Gen2::Int> s32();
            Ent::Gen2::Int sets32();
            std::optional<Ent::Gen2::Float> float_();
            Ent::Gen2::Float setfloat_();
            std::optional<Ent::Gen2::Vector2> Vector2();
            Ent::Gen2::Vector2 setVector2();
            std::optional<Ent::Gen2::Vector3> Vector3();
            Ent::Gen2::Vector3 setVector3();
            std::optional<Ent::Gen2::Position> Position();
            Ent::Gen2::Position setPosition();
            std::optional<PrimArray<Ent::Gen2::String>> stringVec();
            PrimArray<Ent::Gen2::String> setstringVec();
            std::optional<PrimArray<Ent::Gen2::Bool>> boolVec();
            PrimArray<Ent::Gen2::Bool> setboolVec();
            std::optional<PrimArray<Ent::Gen2::Int>> s32Vec();
            PrimArray<Ent::Gen2::Int> sets32Vec();
            std::optional<PrimArray<Ent::Gen2::Float>> floatVec();
            PrimArray<Ent::Gen2::Float> setfloatVec();
            std::optional<Array<Ent::Gen2::Vector2>> Vector2Vec();
            Array<Ent::Gen2::Vector2> setVector2Vec();
            std::optional<Array<Ent::Gen2::Vector3>> Vector3Vec();
            Array<Ent::Gen2::Vector3> setVector3Vec();
            std::optional<Array<Ent::Gen2::Position>> PositionVec();
            Array<Ent::Gen2::Position> setPositionVec();
        };

        struct variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_ : Base // Union
        {
            explicit variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "eastl::variant<eastl::string,bool,s32,float,EntityRef,Vector2,Vector3,Position,eastl::vector<eastl::string>,eastl::vector<bool>,eastl::vector<s32>,eastl::vector<float>,eastl::vector<EntityRef>,eastl::vector<Vector2>,eastl::vector<Vector3>,eastl::vector<Position>>";
            char const* getType() const;
            std::optional<Ent::Gen2::String> string();
            Ent::Gen2::String setstring();
            std::optional<Ent::Gen2::Bool> bool_();
            Ent::Gen2::Bool setbool_();
            std::optional<Ent::Gen2::Int> s32();
            Ent::Gen2::Int sets32();
            std::optional<Ent::Gen2::Float> float_();
            Ent::Gen2::Float setfloat_();
            std::optional<Ent::Gen2::EntityRef> EntityRef();
            Ent::Gen2::EntityRef setEntityRef();
            std::optional<Ent::Gen2::Vector2> Vector2();
            Ent::Gen2::Vector2 setVector2();
            std::optional<Ent::Gen2::Vector3> Vector3();
            Ent::Gen2::Vector3 setVector3();
            std::optional<Ent::Gen2::Position> Position();
            Ent::Gen2::Position setPosition();
            std::optional<PrimArray<Ent::Gen2::String>> stringVec();
            PrimArray<Ent::Gen2::String> setstringVec();
            std::optional<PrimArray<Ent::Gen2::Bool>> boolVec();
            PrimArray<Ent::Gen2::Bool> setboolVec();
            std::optional<PrimArray<Ent::Gen2::Int>> s32Vec();
            PrimArray<Ent::Gen2::Int> sets32Vec();
            std::optional<PrimArray<Ent::Gen2::Float>> floatVec();
            PrimArray<Ent::Gen2::Float> setfloatVec();
            std::optional<PrimArray<Ent::Gen2::EntityRef>> EntityRefVec();
            PrimArray<Ent::Gen2::EntityRef> setEntityRefVec();
            std::optional<Array<Ent::Gen2::Vector2>> Vector2Vec();
            Array<Ent::Gen2::Vector2> setVector2Vec();
            std::optional<Array<Ent::Gen2::Vector3>> Vector3Vec();
            Array<Ent::Gen2::Vector3> setVector3Vec();
            std::optional<Array<Ent::Gen2::Position>> PositionVec();
            Array<Ent::Gen2::Position> setPositionVec();
        };

        struct variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ : Base // Union
        {
            explicit variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "eastl::variant<s32,float,bool,eastl::string,Vector2,Vector3,Quat,Position>";
            char const* getType() const;
            std::optional<Ent::Gen2::Int> s32();
            Ent::Gen2::Int sets32();
            std::optional<Ent::Gen2::Float> float_();
            Ent::Gen2::Float setfloat_();
            std::optional<Ent::Gen2::Bool> bool_();
            Ent::Gen2::Bool setbool_();
            std::optional<Ent::Gen2::String> string();
            Ent::Gen2::String setstring();
            std::optional<Ent::Gen2::Vector2> Vector2();
            Ent::Gen2::Vector2 setVector2();
            std::optional<Ent::Gen2::Vector3> Vector3();
            Ent::Gen2::Vector3 setVector3();
            std::optional<Ent::Gen2::Quat> Quat();
            Ent::Gen2::Quat setQuat();
            std::optional<Ent::Gen2::Position> Position();
            Ent::Gen2::Position setPosition();
        };

        struct variant_ZoneCylinderShape_ZoneMeshShape_ : Base // Union
        {
            explicit variant_ZoneCylinderShape_ZoneMeshShape_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "eastl::variant<ZoneCylinderShape,ZoneMeshShape>";
            char const* getType() const;
            std::optional<Ent::Gen2::ZoneCylinderShape> ZoneCylinderShape();
            Ent::Gen2::ZoneCylinderShape setZoneCylinderShape();
            std::optional<Ent::Gen2::ZoneMeshShape> ZoneMeshShape();
            Ent::Gen2::ZoneMeshShape setZoneMeshShape();
        };

        struct variant_Pasta_Easing_Curve_string_ : Base // Union
        {
            explicit variant_Pasta_Easing_Curve_string_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "eastl::variant<Pasta::Easing::Curve,eastl::string>";
            char const* getType() const;
            std::optional<Ent::Gen2::Pasta_Easing_Curve> Pasta_Easing_Curve();
            Ent::Gen2::Pasta_Easing_Curve setPasta_Easing_Curve();
            std::optional<Ent::Gen2::String> string();
            Ent::Gen2::String setstring();
        };

        struct variant_MeshShape_ShapeSphere_ShapeBox_ : Base // Union
        {
            explicit variant_MeshShape_ShapeSphere_ShapeBox_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "eastl::variant<MeshShape,ShapeSphere,ShapeBox>";
            char const* getType() const;
            std::optional<Ent::Gen2::MeshShape> MeshShape();
            Ent::Gen2::MeshShape setMeshShape();
            std::optional<Ent::Gen2::ShapeSphere> ShapeSphere();
            Ent::Gen2::ShapeSphere setShapeSphere();
            std::optional<Ent::Gen2::ShapeBox> ShapeBox();
            Ent::Gen2::ShapeBox setShapeBox();
        };

        struct variant_EntityRef_NavMeshArea_ : Base // Union
        {
            explicit variant_EntityRef_NavMeshArea_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "eastl::variant<EntityRef,NavMeshArea>";
            char const* getType() const;
            std::optional<Ent::Gen2::EntityRef> EntityRef();
            Ent::Gen2::EntityRef setEntityRef();
            std::optional<Ent::Gen2::NavMeshArea> NavMeshArea();
            Ent::Gen2::NavMeshArea setNavMeshArea();
        };

        struct usePerception : HelperObject<usePerception> // Object
        {
            explicit usePerception(Ent::Property _node): HelperObject<usePerception>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct tryGrasp : HelperObject<tryGrasp> // Object
        {
            explicit tryGrasp(Ent::Property _node): HelperObject<tryGrasp>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct sPhysicsShapeSphere : HelperObject<sPhysicsShapeSphere> // Object
        {
            explicit sPhysicsShapeSphere(Ent::Property _node): HelperObject<sPhysicsShapeSphere>(std::move(_node)) {}
            static constexpr char schemaName[] = "sPhysicsShapeSphere";
            static sPhysicsShapeSphere load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sPhysicsShapeSphere(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sPhysicsShapeSphere loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sPhysicsShapeSphere(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sPhysicsShapeSphere create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sPhysicsShapeSphere(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sPhysicsShapeSphere makeInstanceOf()
            {
                return sPhysicsShapeSphere(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float radius() const;
        };

        struct sPhysicsShapeMesh : HelperObject<sPhysicsShapeMesh> // Object
        {
            explicit sPhysicsShapeMesh(Ent::Property _node): HelperObject<sPhysicsShapeMesh>(std::move(_node)) {}
            static constexpr char schemaName[] = "sPhysicsShapeMesh";
            static sPhysicsShapeMesh load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sPhysicsShapeMesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sPhysicsShapeMesh loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sPhysicsShapeMesh(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sPhysicsShapeMesh create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sPhysicsShapeMesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sPhysicsShapeMesh makeInstanceOf()
            {
                return sPhysicsShapeMesh(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String path() const;
        };

        struct sPhysicsShapeCylinder : HelperObject<sPhysicsShapeCylinder> // Object
        {
            explicit sPhysicsShapeCylinder(Ent::Property _node): HelperObject<sPhysicsShapeCylinder>(std::move(_node)) {}
            static constexpr char schemaName[] = "sPhysicsShapeCylinder";
            static sPhysicsShapeCylinder load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sPhysicsShapeCylinder(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sPhysicsShapeCylinder loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sPhysicsShapeCylinder(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sPhysicsShapeCylinder create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sPhysicsShapeCylinder(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sPhysicsShapeCylinder makeInstanceOf()
            {
                return sPhysicsShapeCylinder(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float length() const;
            Ent::Gen2::Float radius() const;
        };

        struct sPhysicsShapeCapsule : HelperObject<sPhysicsShapeCapsule> // Object
        {
            explicit sPhysicsShapeCapsule(Ent::Property _node): HelperObject<sPhysicsShapeCapsule>(std::move(_node)) {}
            static constexpr char schemaName[] = "sPhysicsShapeCapsule";
            static sPhysicsShapeCapsule load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sPhysicsShapeCapsule(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sPhysicsShapeCapsule loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sPhysicsShapeCapsule(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sPhysicsShapeCapsule create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sPhysicsShapeCapsule(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sPhysicsShapeCapsule makeInstanceOf()
            {
                return sPhysicsShapeCapsule(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float length() const;
            Ent::Gen2::Float radius() const;
        };

        struct sJointFixedDesc : HelperObject<sJointFixedDesc> // Object
        {
            explicit sJointFixedDesc(Ent::Property _node): HelperObject<sJointFixedDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sJointFixedDesc";
            static sJointFixedDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sJointFixedDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sJointFixedDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sJointFixedDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sJointFixedDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sJointFixedDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sJointFixedDesc makeInstanceOf()
            {
                return sJointFixedDesc(getProperty().makeInstanceOf());
            }
        
        };

        struct sJointBallDesc : HelperObject<sJointBallDesc> // Object
        {
            explicit sJointBallDesc(Ent::Property _node): HelperObject<sJointBallDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sJointBallDesc";
            static sJointBallDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sJointBallDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sJointBallDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sJointBallDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sJointBallDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sJointBallDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sJointBallDesc makeInstanceOf()
            {
                return sJointBallDesc(getProperty().makeInstanceOf());
            }
        
        };

        struct resetCreatureRequest : HelperObject<resetCreatureRequest> // Object
        {
            explicit resetCreatureRequest(Ent::Property _node): HelperObject<resetCreatureRequest>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct jumpPower : HelperObject<jumpPower> // Object
        {
            explicit jumpPower(Ent::Property _node): HelperObject<jumpPower>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct isPerceivableForEnemies : HelperObject<isPerceivableForEnemies> // Object
        {
            explicit isPerceivableForEnemies(Ent::Property _node): HelperObject<isPerceivableForEnemies>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct isPerceivable : HelperObject<isPerceivable> // Object
        {
            explicit isPerceivable(Ent::Property _node): HelperObject<isPerceivable>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct eventStringHash : HelperObject<eventStringHash> // Object
        {
            explicit eventStringHash(Ent::Property _node): HelperObject<eventStringHash>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::String val() const;
        };

        struct enableSynchronization : HelperObject<enableSynchronization> // Object
        {
            explicit enableSynchronization(Ent::Property _node): HelperObject<enableSynchronization>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct computePitchAngle : HelperObject<computePitchAngle> // Object
        {
            explicit computePitchAngle(Ent::Property _node): HelperObject<computePitchAngle>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct allowedTypesItem : HelperObject<allowedTypesItem> // Object
        {
            explicit allowedTypesItem(Ent::Property _node): HelperObject<allowedTypesItem>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct WindTurbulenceType : EnumPropHelper<WindTurbulenceType, WindTurbulenceTypeEnum> // Enum
        {
            using Enum = WindTurbulenceTypeEnum;
            using PropHelper<WindTurbulenceType, Enum>::operator=;
            explicit WindTurbulenceType(Ent::Property _node): EnumPropHelper<WindTurbulenceType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "WindTurbulenceType";
            static constexpr char const* enumToString[] = {
                "radial",
                "swirlcw",
                "swirlccw",
                "WindTurbulenceType_COUNT",
            };
        };
        inline char const* toString(WindTurbulenceTypeEnum value)
        {
            if(size_t(value) >= std::size(WindTurbulenceType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return WindTurbulenceType::enumToString[size_t(value)];
        }
        inline char const* toInternal(WindTurbulenceTypeEnum value) { return toString(value); }
        template<> inline WindTurbulenceTypeEnum strToEnum<WindTurbulenceTypeEnum>(char const* value)
        {
            return static_cast<WindTurbulenceTypeEnum>(details::indexInEnum(value, WindTurbulenceType::enumToString));
        }

        struct WaveRenderingType : EnumPropHelper<WaveRenderingType, WaveRenderingTypeEnum> // Enum
        {
            using Enum = WaveRenderingTypeEnum;
            using PropHelper<WaveRenderingType, Enum>::operator=;
            explicit WaveRenderingType(Ent::Property _node): EnumPropHelper<WaveRenderingType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "WaveRenderingType";
            static constexpr char const* enumToString[] = {
                "Mesh",
                "WaveRenderingType_COUNT",
            };
        };
        inline char const* toString(WaveRenderingTypeEnum value)
        {
            if(size_t(value) >= std::size(WaveRenderingType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return WaveRenderingType::enumToString[size_t(value)];
        }
        inline char const* toInternal(WaveRenderingTypeEnum value) { return toString(value); }
        template<> inline WaveRenderingTypeEnum strToEnum<WaveRenderingTypeEnum>(char const* value)
        {
            return static_cast<WaveRenderingTypeEnum>(details::indexInEnum(value, WaveRenderingType::enumToString));
        }

        struct Walkability : HelperObject<Walkability> // Object
        {
            explicit Walkability(Ent::Property _node): HelperObject<Walkability>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };




        struct sPhysicsShapeBox : HelperObject<sPhysicsShapeBox> // Object
        {
            explicit sPhysicsShapeBox(Ent::Property _node): HelperObject<sPhysicsShapeBox>(std::move(_node)) {}
            static constexpr char schemaName[] = "sPhysicsShapeBox";
            static sPhysicsShapeBox load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sPhysicsShapeBox(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sPhysicsShapeBox loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sPhysicsShapeBox(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sPhysicsShapeBox create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sPhysicsShapeBox(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sPhysicsShapeBox makeInstanceOf()
            {
                return sPhysicsShapeBox(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 size() const;
        };

        struct sEnvStamp : HelperObject<sEnvStamp> // Object
        {
            explicit sEnvStamp(Ent::Property _node): HelperObject<sEnvStamp>(std::move(_node)) {}
            static constexpr char schemaName[] = "sEnvStamp";
            static sEnvStamp load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sEnvStamp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sEnvStamp loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sEnvStamp(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sEnvStamp create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sEnvStamp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sEnvStamp makeInstanceOf()
            {
                return sEnvStamp(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AffectCoverage() const;
            Ent::Gen2::Bool AffectFogColor() const;
            Ent::Gen2::Bool AffectFogDensity() const;
            Ent::Gen2::Bool AffectFogFalloff() const;
            Ent::Gen2::Bool AffectFogHeight() const;
            Ent::Gen2::Bool AffectPull() const;
            Ent::Gen2::Bool AffectType() const;
            Ent::Gen2::Bool AffectWetness() const;
            Ent::Gen2::Int AtlasID() const;
            Ent::Gen2::Vector3 FogColor() const;
            Ent::Gen2::Bool IsCloud() const;
            Ent::Gen2::Vector3 PositionOffset() const;
            Ent::Gen2::Float Rotation() const;
            Ent::Gen2::Float Size() const;
            Ent::Gen2::Float Strength() const;
            Ent::Gen2::String _comment() const;
        };

        struct retiming : HelperObject<retiming> // Object
        {
            explicit retiming(Ent::Property _node): HelperObject<retiming>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Vector3 val() const;
        };

        struct WaveRendererProperties : HelperObject<WaveRendererProperties> // Object
        {
            explicit WaveRendererProperties(Ent::Property _node): HelperObject<WaveRendererProperties>(std::move(_node)) {}
            static constexpr char schemaName[] = "WaveRendererProperties";
            static WaveRendererProperties load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WaveRendererProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WaveRendererProperties loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WaveRendererProperties(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WaveRendererProperties create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WaveRendererProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WaveRendererProperties makeInstanceOf()
            {
                return WaveRendererProperties(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int BonesGridHeight() const;
            Ent::Gen2::Int BonesGridWidth() const;
            Ent::Gen2::Int BonesIgnoreOffset() const;
            Ent::Gen2::String MaterialPath() const;
            Ent::Gen2::String MeshPath() const;
            Ent::Gen2::Int NbMeshInstances() const;
            Ent::Gen2::Int NbQuads() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::Vector3 Scale() const;
            Ent::Gen2::String _comment() const;
        };

        struct WaveProperties : HelperObject<WaveProperties> // Object
        {
            explicit WaveProperties(Ent::Property _node): HelperObject<WaveProperties>(std::move(_node)) {}
            static constexpr char schemaName[] = "WaveProperties";
            static WaveProperties load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WaveProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WaveProperties loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WaveProperties(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WaveProperties create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WaveProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WaveProperties makeInstanceOf()
            {
                return WaveProperties(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Duration() const;
            Ent::Gen2::Float IntervalBetweenWaveFronts() const;
            Ent::Gen2::Bool Looping() const;
            Ent::Gen2::Float Luminosity() const;
            Ent::Gen2::String LuminosityCurvePath() const;
            Ent::Gen2::Float LuminosityVariability() const;
            Array<Ent::Gen2::WaveRendererProperties> RenderingProperties() const;
            Ent::Gen2::WaveRenderingType RenderingType() const;
            Ent::Gen2::Int Width() const;
            Ent::Gen2::String _comment() const;
        };


        struct sJointUniversalDesc : HelperObject<sJointUniversalDesc> // Object
        {
            explicit sJointUniversalDesc(Ent::Property _node): HelperObject<sJointUniversalDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sJointUniversalDesc";
            static sJointUniversalDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sJointUniversalDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sJointUniversalDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sJointUniversalDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sJointUniversalDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sJointUniversalDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sJointUniversalDesc makeInstanceOf()
            {
                return sJointUniversalDesc(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector2 angleSwing1() const;
            Ent::Gen2::Vector2 angleSwing2() const;
        };

        struct sJointSwingTwistDesc : HelperObject<sJointSwingTwistDesc> // Object
        {
            explicit sJointSwingTwistDesc(Ent::Property _node): HelperObject<sJointSwingTwistDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sJointSwingTwistDesc";
            static sJointSwingTwistDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sJointSwingTwistDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sJointSwingTwistDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sJointSwingTwistDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sJointSwingTwistDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sJointSwingTwistDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sJointSwingTwistDesc makeInstanceOf()
            {
                return sJointSwingTwistDesc(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector2 swingAngle() const;
            Ent::Gen2::Vector2 twistAngle() const;
        };

        struct sJointSliderDesc : HelperObject<sJointSliderDesc> // Object
        {
            explicit sJointSliderDesc(Ent::Property _node): HelperObject<sJointSliderDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sJointSliderDesc";
            static sJointSliderDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sJointSliderDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sJointSliderDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sJointSliderDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sJointSliderDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sJointSliderDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sJointSliderDesc makeInstanceOf()
            {
                return sJointSliderDesc(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 direction() const;
            Ent::Gen2::Vector2 distance() const;
        };

        struct sJointHingeDesc : HelperObject<sJointHingeDesc> // Object
        {
            explicit sJointHingeDesc(Ent::Property _node): HelperObject<sJointHingeDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sJointHingeDesc";
            static sJointHingeDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sJointHingeDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sJointHingeDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sJointHingeDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sJointHingeDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sJointHingeDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sJointHingeDesc makeInstanceOf()
            {
                return sJointHingeDesc(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector2 angle() const;
            Ent::Gen2::Vector3 axis() const;
        };

        struct ConditionalRigidityAttribute_Range : HelperObject<ConditionalRigidityAttribute_Range> // Object
        {
            explicit ConditionalRigidityAttribute_Range(Ent::Property _node): HelperObject<ConditionalRigidityAttribute_Range>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::Range";
            static ConditionalRigidityAttribute_Range load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConditionalRigidityAttribute_Range(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConditionalRigidityAttribute_Range loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConditionalRigidityAttribute_Range(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConditionalRigidityAttribute_Range create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConditionalRigidityAttribute_Range(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConditionalRigidityAttribute_Range makeInstanceOf()
            {
                return ConditionalRigidityAttribute_Range(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector2 Range() const;
            Ent::Gen2::String _comment() const;
        };

        struct VariantAllowed : HelperObject<VariantAllowed> // Object
        {
            explicit VariantAllowed(Ent::Property _node): HelperObject<VariantAllowed>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct UnionObjectArrayItem : HelperObject<UnionObjectArrayItem> // Object
        {
            explicit UnionObjectArrayItem(Ent::Property _node): HelperObject<UnionObjectArrayItem>(std::move(_node)) {}
            
            Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ Union() const;
            Ent::Gen2::String _comment() const;
        };

        struct TypedValue : HelperObject<TypedValue> // Object
        {
            explicit TypedValue(Ent::Property _node): HelperObject<TypedValue>(std::move(_node)) {}
            static constexpr char schemaName[] = "TypedValue";
            static TypedValue load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TypedValue(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TypedValue loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TypedValue(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TypedValue create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TypedValue(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TypedValue makeInstanceOf()
            {
                return TypedValue(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Alias() const;
            Ent::Gen2::String Reference() const;
            Ent::Gen2::variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_ Value() const;
            Ent::Gen2::String _comment() const;
        };

        struct TransitionNeighborData : HelperObject<TransitionNeighborData> // Object
        {
            explicit TransitionNeighborData(Ent::Property _node): HelperObject<TransitionNeighborData>(std::move(_node)) {}
            static constexpr char schemaName[] = "TransitionNeighborData";
            static TransitionNeighborData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TransitionNeighborData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TransitionNeighborData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TransitionNeighborData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TransitionNeighborData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TransitionNeighborData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TransitionNeighborData makeInstanceOf()
            {
                return TransitionNeighborData(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::Int> Backward() const;
            PrimArray<Ent::Gen2::Int> Forward() const;
            Ent::Gen2::Float TangentSize() const;
            Ent::Gen2::String _comment() const;
        };

        struct TrailUVUnwrappingMode : EnumPropHelper<TrailUVUnwrappingMode, TrailUVUnwrappingModeEnum> // Enum
        {
            using Enum = TrailUVUnwrappingModeEnum;
            using PropHelper<TrailUVUnwrappingMode, Enum>::operator=;
            explicit TrailUVUnwrappingMode(Ent::Property _node): EnumPropHelper<TrailUVUnwrappingMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "TrailUVUnwrappingMode";
            static constexpr char const* enumToString[] = {
                "TailToHead",
                "SnakeHeadToTail",
                "TrailUVUnwrappingMode_COUNT",
            };
        };
        inline char const* toString(TrailUVUnwrappingModeEnum value)
        {
            if(size_t(value) >= std::size(TrailUVUnwrappingMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return TrailUVUnwrappingMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(TrailUVUnwrappingModeEnum value) { return toString(value); }
        template<> inline TrailUVUnwrappingModeEnum strToEnum<TrailUVUnwrappingModeEnum>(char const* value)
        {
            return static_cast<TrailUVUnwrappingModeEnum>(details::indexInEnum(value, TrailUVUnwrappingMode::enumToString));
        }

        struct TrailRenderingType : EnumPropHelper<TrailRenderingType, TrailRenderingTypeEnum> // Enum
        {
            using Enum = TrailRenderingTypeEnum;
            using PropHelper<TrailRenderingType, Enum>::operator=;
            explicit TrailRenderingType(Ent::Property _node): EnumPropHelper<TrailRenderingType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "TrailRenderingType";
            static constexpr char const* enumToString[] = {
                "Cross",
                "Billboard",
                "Patches",
                "Mesh",
                "TrailRenderingType_COUNT",
            };
        };
        inline char const* toString(TrailRenderingTypeEnum value)
        {
            if(size_t(value) >= std::size(TrailRenderingType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return TrailRenderingType::enumToString[size_t(value)];
        }
        inline char const* toInternal(TrailRenderingTypeEnum value) { return toString(value); }
        template<> inline TrailRenderingTypeEnum strToEnum<TrailRenderingTypeEnum>(char const* value)
        {
            return static_cast<TrailRenderingTypeEnum>(details::indexInEnum(value, TrailRenderingType::enumToString));
        }

        struct TrailRenderingSides : EnumPropHelper<TrailRenderingSides, TrailRenderingSidesEnum> // Enum
        {
            using Enum = TrailRenderingSidesEnum;
            using PropHelper<TrailRenderingSides, Enum>::operator=;
            explicit TrailRenderingSides(Ent::Property _node): EnumPropHelper<TrailRenderingSides, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "TrailRenderingSides";
            static constexpr char const* enumToString[] = {
                "SideA",
                "SideB",
                "BothSides",
                "TrailRenderingSides_COUNT",
            };
        };
        inline char const* toString(TrailRenderingSidesEnum value)
        {
            if(size_t(value) >= std::size(TrailRenderingSides::enumToString))
                throw std::runtime_error("Wrong enum value");
            return TrailRenderingSides::enumToString[size_t(value)];
        }
        inline char const* toInternal(TrailRenderingSidesEnum value) { return toString(value); }
        template<> inline TrailRenderingSidesEnum strToEnum<TrailRenderingSidesEnum>(char const* value)
        {
            return static_cast<TrailRenderingSidesEnum>(details::indexInEnum(value, TrailRenderingSides::enumToString));
        }

        struct TrailRenderingAttribute : EnumPropHelper<TrailRenderingAttribute, TrailRenderingAttributeEnum> // Enum
        {
            using Enum = TrailRenderingAttributeEnum;
            using PropHelper<TrailRenderingAttribute, Enum>::operator=;
            explicit TrailRenderingAttribute(Ent::Property _node): EnumPropHelper<TrailRenderingAttribute, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "TrailRenderingAttribute";
            static constexpr char const* enumToString[] = {
                "Horizontal",
                "Vertical",
                "Frontal",
                "TrailRenderingAttribute_COUNT",
            };
        };
        inline char const* toString(TrailRenderingAttributeEnum value)
        {
            if(size_t(value) >= std::size(TrailRenderingAttribute::enumToString))
                throw std::runtime_error("Wrong enum value");
            return TrailRenderingAttribute::enumToString[size_t(value)];
        }
        inline char const* toInternal(TrailRenderingAttributeEnum value) { return toString(value); }
        template<> inline TrailRenderingAttributeEnum strToEnum<TrailRenderingAttributeEnum>(char const* value)
        {
            return static_cast<TrailRenderingAttributeEnum>(details::indexInEnum(value, TrailRenderingAttribute::enumToString));
        }

        struct TrailRendererProperties : HelperObject<TrailRendererProperties> // Object
        {
            explicit TrailRendererProperties(Ent::Property _node): HelperObject<TrailRendererProperties>(std::move(_node)) {}
            static constexpr char schemaName[] = "TrailRendererProperties";
            static TrailRendererProperties load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TrailRendererProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TrailRendererProperties loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TrailRendererProperties(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TrailRendererProperties create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TrailRendererProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TrailRendererProperties makeInstanceOf()
            {
                return TrailRendererProperties(getProperty().makeInstanceOf());
            }
            Ent::Gen2::TrailRenderingAttribute Attribute() const;
            Ent::Gen2::String MaterialPath() const;
            Ent::Gen2::String MeshPath() const;
            Ent::Gen2::Int NbMeshInstances() const;
            Ent::Gen2::Int NbQuads() const;
            Ent::Gen2::Int NbTrailPointsBetweenFrontQuads() const;
            Ent::Gen2::Int NbVertices() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::Vector2 RandomAxialRotationAmplitude() const;
            Ent::Gen2::Float RandomUVOffset() const;
            Ent::Gen2::TrailRenderingSides Sides() const;
            Ent::Gen2::String _comment() const;
        };

        struct TrackedEntitiesItem : HelperObject<TrackedEntitiesItem> // Object
        {
            explicit TrackedEntitiesItem(Ent::Property _node): HelperObject<TrackedEntitiesItem>(std::move(_node)) {}
            
        
        };


        struct TestPropertyDefaultValues : HelperObject<TestPropertyDefaultValues> // Object
        {
            explicit TestPropertyDefaultValues(Ent::Property _node): HelperObject<TestPropertyDefaultValues>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestPropertyDefaultValues";
            static TestPropertyDefaultValues load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestPropertyDefaultValues(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestPropertyDefaultValues loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestPropertyDefaultValues(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestPropertyDefaultValues create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestPropertyDefaultValues(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestPropertyDefaultValues makeInstanceOf()
            {
                return TestPropertyDefaultValues(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int A() const;
            Ent::Gen2::Int B() const;
            Ent::Gen2::String _comment() const;
        };

        struct TestPropertyDefaultValues2 : HelperObject<TestPropertyDefaultValues2> // Object
        {
            explicit TestPropertyDefaultValues2(Ent::Property _node): HelperObject<TestPropertyDefaultValues2>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestPropertyDefaultValues2";
            static TestPropertyDefaultValues2 load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestPropertyDefaultValues2(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestPropertyDefaultValues2 loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestPropertyDefaultValues2(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestPropertyDefaultValues2 create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestPropertyDefaultValues2(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestPropertyDefaultValues2 makeInstanceOf()
            {
                return TestPropertyDefaultValues2(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::TestPropertyDefaultValues propertyWithDefault2() const;
            Ent::Gen2::TestPropertyDefaultValues propertyWithDefault3() const;
        };

        struct Terrain_TerrainMeta : HelperObject<Terrain_TerrainMeta> // Object
        {
            explicit Terrain_TerrainMeta(Ent::Property _node): HelperObject<Terrain_TerrainMeta>(std::move(_node)) {}
            static constexpr char schemaName[] = "Terrain::TerrainMeta";
            static Terrain_TerrainMeta load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Terrain_TerrainMeta(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Terrain_TerrainMeta loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Terrain_TerrainMeta(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Terrain_TerrainMeta create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Terrain_TerrainMeta(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Terrain_TerrainMeta makeInstanceOf()
            {
                return Terrain_TerrainMeta(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String DataPath() const;
            Ent::Gen2::Float HeightScaleMeters() const;
            Ent::Gen2::String Material() const;
            Ent::Gen2::Float RegionWidthMeters() const;
            Ent::Gen2::Bool RimTerrain() const;
            Ent::Gen2::Float SkirtScale() const;
            Ent::Gen2::Float TexelsPerMeter() const;
            Ent::Gen2::String _comment() const;
        };

        struct TargetCollision : HelperObject<TargetCollision> // Object
        {
            explicit TargetCollision(Ent::Property _node): HelperObject<TargetCollision>(std::move(_node)) {}
            static constexpr char schemaName[] = "TargetCollision";
            static TargetCollision load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TargetCollision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TargetCollision loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TargetCollision(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TargetCollision create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TargetCollision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TargetCollision makeInstanceOf()
            {
                return TargetCollision(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int count() const;
        };

        struct TagsList : HelperObject<TagsList> // Object
        {
            explicit TagsList(Ent::Property _node): HelperObject<TagsList>(std::move(_node)) {}
            static constexpr char schemaName[] = "TagsList";
            static TagsList load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TagsList(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TagsList loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TagsList(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TagsList create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TagsList(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TagsList makeInstanceOf()
            {
                return TagsList(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::PrimitiveSet<char const*>> Tags() const;
            Ent::Gen2::String _comment() const;
        };

        struct TaggedSDF : HelperObject<TaggedSDF> // Object
        {
            explicit TaggedSDF(Ent::Property _node): HelperObject<TaggedSDF>(std::move(_node)) {}
            static constexpr char schemaName[] = "TaggedSDF";
            static TaggedSDF load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TaggedSDF(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TaggedSDF loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TaggedSDF(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TaggedSDF create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TaggedSDF(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TaggedSDF makeInstanceOf()
            {
                return TaggedSDF(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float MaxTagDistance() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::variant_MeshShape_ShapeSphere_ShapeBox_ Shape() const;
            Ent::Gen2::String Tag() const;
            Ent::Gen2::String _comment() const;
        };

        struct SyncTempoMode : EnumPropHelper<SyncTempoMode, SyncTempoModeEnum> // Enum
        {
            using Enum = SyncTempoModeEnum;
            using PropHelper<SyncTempoMode, Enum>::operator=;
            explicit SyncTempoMode(Ent::Property _node): EnumPropHelper<SyncTempoMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "SyncTempoMode";
            static constexpr char const* enumToString[] = {
                "None",
                "OnGrid",
                "OnBeat",
                "OnBar",
                "OnEnterCue",
                "OnExitCue",
                "OnCustomCue",
                "OnSwitchTransition",
                "SyncTempoMode_COUNT",
                "SyncTempoMode_FIRST",
            };
        };
        inline char const* toString(SyncTempoModeEnum value)
        {
            if(size_t(value) >= std::size(SyncTempoMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return SyncTempoMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(SyncTempoModeEnum value) { return toString(value); }
        template<> inline SyncTempoModeEnum strToEnum<SyncTempoModeEnum>(char const* value)
        {
            return static_cast<SyncTempoModeEnum>(details::indexInEnum(value, SyncTempoMode::enumToString));
        }

        struct UIMusic : HelperObject<UIMusic> // Object
        {
            explicit UIMusic(Ent::Property _node): HelperObject<UIMusic>(std::move(_node)) {}
            static constexpr char schemaName[] = "UIMusic";
            static UIMusic load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return UIMusic(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static UIMusic loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return UIMusic(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static UIMusic create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return UIMusic(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            UIMusic makeInstanceOf()
            {
                return UIMusic(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String MusicType() const;
            Ent::Gen2::String SkillTree() const;
            Ent::Gen2::SyncTempoMode SynchronizationMode() const;
            Ent::Gen2::String _comment() const;
        };

        struct StyleMode : EnumPropHelper<StyleMode, StyleModeEnum> // Enum
        {
            using Enum = StyleModeEnum;
            using PropHelper<StyleMode, Enum>::operator=;
            explicit StyleMode(Ent::Property _node): EnumPropHelper<StyleMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "StyleMode";
            static constexpr char const* enumToString[] = {
                "default",
                "stick",
                "sword",
                "do",
                "hammer",
                "knife",
                "squirrel",
                "lush",
                "StyleMode_COUNT",
            };
        };
        inline char const* toString(StyleModeEnum value)
        {
            if(size_t(value) >= std::size(StyleMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return StyleMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(StyleModeEnum value) { return toString(value); }
        template<> inline StyleModeEnum strToEnum<StyleModeEnum>(char const* value)
        {
            return static_cast<StyleModeEnum>(details::indexInEnum(value, StyleMode::enumToString));
        }

        struct StunData : HelperObject<StunData> // Object
        {
            explicit StunData(Ent::Property _node): HelperObject<StunData>(std::move(_node)) {}
            static constexpr char schemaName[] = "StunData";
            static StunData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StunData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StunData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StunData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StunData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StunData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StunData makeInstanceOf()
            {
                return StunData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int damageHitBig() const;
            Ent::Gen2::Int damageHitBite() const;
            Ent::Gen2::Int damageHitEject() const;
            Ent::Gen2::Int damageHitEjectFar() const;
            Ent::Gen2::Int damageHitLight() const;
            Ent::Gen2::Int damageHitMedium() const;
            Ent::Gen2::Int malus() const;
            Ent::Gen2::Float orientHitBig() const;
            Ent::Gen2::Float orientHitEject() const;
            Ent::Gen2::Float orientHitEjectFar() const;
            Ent::Gen2::Float orientHitLight() const;
            Ent::Gen2::Float orientHitMedium() const;
            Ent::Gen2::Float recoverTime() const;
            Ent::Gen2::Int resistance() const;
            Ent::Gen2::Float stunTime() const;
        };

        struct StickToGround : HelperObject<StickToGround> // Object
        {
            explicit StickToGround(Ent::Property _node): HelperObject<StickToGround>(std::move(_node)) {}
            static constexpr char schemaName[] = "StickToGround";
            static StickToGround load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StickToGround(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StickToGround loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StickToGround(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StickToGround create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StickToGround(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StickToGround makeInstanceOf()
            {
                return StickToGround(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String BoneNameEnd() const;
            Ent::Gen2::String BoneNameStart() const;
            Ent::Gen2::String _comment() const;
        };

        struct SpeedScaleXY : HelperObject<SpeedScaleXY> // Object
        {
            explicit SpeedScaleXY(Ent::Property _node): HelperObject<SpeedScaleXY>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct SpeedMode : EnumPropHelper<SpeedMode, SpeedModeEnum> // Enum
        {
            using Enum = SpeedModeEnum;
            using PropHelper<SpeedMode, Enum>::operator=;
            explicit SpeedMode(Ent::Property _node): EnumPropHelper<SpeedMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "SpeedMode";
            static constexpr char const* enumToString[] = {
                "speed0",
                "speed1",
                "speed2",
                "speed3",
                "speed4",
                "SpeedMode_COUNT",
            };
        };
        inline char const* toString(SpeedModeEnum value)
        {
            if(size_t(value) >= std::size(SpeedMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return SpeedMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(SpeedModeEnum value) { return toString(value); }
        template<> inline SpeedModeEnum strToEnum<SpeedModeEnum>(char const* value)
        {
            return static_cast<SpeedModeEnum>(details::indexInEnum(value, SpeedMode::enumToString));
        }

        struct SpeedModeMax : HelperObject<SpeedModeMax> // Object
        {
            explicit SpeedModeMax(Ent::Property _node): HelperObject<SpeedModeMax>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::SpeedMode val() const;
        };

        struct SpeedFastMinDuration : HelperObject<SpeedFastMinDuration> // Object
        {
            explicit SpeedFastMinDuration(Ent::Property _node): HelperObject<SpeedFastMinDuration>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct Specie : EnumPropHelper<Specie, SpecieEnum> // Enum
        {
            using Enum = SpecieEnum;
            using PropHelper<Specie, Enum>::operator=;
            explicit Specie(Ent::Property _node): EnumPropHelper<Specie, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "Specie";
            static constexpr char const* enumToString[] = {
                "auroch",
                "bear",
                "babybear",
                "catfish",
                "eagle",
                "elk",
                "fox",
                "giantbear",
                "human",
                "cannibal",
                "babyhuman",
                "horse",
                "ibex",
                "rabbit",
                "rat",
                "ram",
                "raven",
                "schmetre",
                "seagull",
                "snake",
                "spermwhale",
                "squirrel",
                "stag",
                "toad",
                "trout",
                "wildboar",
                "babyboar",
                "wolf",
                "shark",
                "dolphin",
                "whale",
                "goddess",
                "clothboots",
                "clothbrace",
                "clothhelmet",
                "clothskirt",
                "clothtorso",
                "clothbody",
                "weapon",
                "outfit",
                "drivable",
                "fruit",
                "darkstone",
                "destructible",
                "environment",
                "regeneration",
                "insect",
                "Specie_COUNT",
            };
        };
        inline char const* toString(SpecieEnum value)
        {
            if(size_t(value) >= std::size(Specie::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Specie::enumToString[size_t(value)];
        }
        inline char const* toInternal(SpecieEnum value) { return toString(value); }
        template<> inline SpecieEnum strToEnum<SpecieEnum>(char const* value)
        {
            return static_cast<SpecieEnum>(details::indexInEnum(value, Specie::enumToString));
        }

        struct SpawningParameter : HelperObject<SpawningParameter> // Object
        {
            explicit SpawningParameter(Ent::Property _node): HelperObject<SpawningParameter>(std::move(_node)) {}
            static constexpr char schemaName[] = "SpawningParameter";
            static SpawningParameter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SpawningParameter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SpawningParameter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SpawningParameter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SpawningParameter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SpawningParameter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SpawningParameter makeInstanceOf()
            {
                return SpawningParameter(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String EntityName() const;
            Ent::Gen2::Float MinimumDepth() const;
            Ent::Gen2::Float PeriodRandomness() const;
            Ent::Gen2::Float SpawningPeriod() const;
            Ent::Gen2::String State() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoundOpportunityRangeDescription : HelperObject<SoundOpportunityRangeDescription> // Object
        {
            explicit SoundOpportunityRangeDescription(Ent::Property _node): HelperObject<SoundOpportunityRangeDescription>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundOpportunityRangeDescription";
            static SoundOpportunityRangeDescription load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoundOpportunityRangeDescription(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoundOpportunityRangeDescription loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoundOpportunityRangeDescription(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoundOpportunityRangeDescription create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoundOpportunityRangeDescription(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoundOpportunityRangeDescription makeInstanceOf()
            {
                return SoundOpportunityRangeDescription(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ChunkSize() const;
            Ent::Gen2::Float MaxDistance() const;
            Ent::Gen2::String PCloudPath() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoundOcclusionData : HelperObject<SoundOcclusionData> // Object
        {
            explicit SoundOcclusionData(Ent::Property _node): HelperObject<SoundOcclusionData>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundOcclusionData";
            static SoundOcclusionData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoundOcclusionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoundOcclusionData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoundOcclusionData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoundOcclusionData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoundOcclusionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoundOcclusionData makeInstanceOf()
            {
                return SoundOcclusionData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float OcclusionMaxRatioAdjustRate() const;
            Ent::Gen2::Float OcclusionMaxThickness() const;
            Ent::Gen2::Float OcclusionRatioAdjustRateFactor() const;
            Ent::Gen2::Float OcclusionSphereCastRadius() const;
            Ent::Gen2::Float OcclusionSphereCastVerticalOffset() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoundManager_BiomeSoundBank : HelperObject<SoundManager_BiomeSoundBank> // Object
        {
            explicit SoundManager_BiomeSoundBank(Ent::Property _node): HelperObject<SoundManager_BiomeSoundBank>(std::move(_node)) {}
            
        
        };

        struct SoundEventMapping : HelperObject<SoundEventMapping> // Object
        {
            explicit SoundEventMapping(Ent::Property _node): HelperObject<SoundEventMapping>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundEventMapping";
            static SoundEventMapping load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoundEventMapping(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoundEventMapping loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoundEventMapping(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoundEventMapping create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoundEventMapping(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoundEventMapping makeInstanceOf()
            {
                return SoundEventMapping(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::String> Explicit() const;
            Ent::Gen2::PrimitiveSet<char const*> Ignored() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::String> Prefixed() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoundEmissionStrength : EnumPropHelper<SoundEmissionStrength, SoundEmissionStrengthEnum> // Enum
        {
            using Enum = SoundEmissionStrengthEnum;
            using PropHelper<SoundEmissionStrength, Enum>::operator=;
            explicit SoundEmissionStrength(Ent::Property _node): EnumPropHelper<SoundEmissionStrength, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundEmissionStrength";
            static constexpr char const* enumToString[] = {
                "none",
                "low",
                "medium",
                "high",
                "SoundEmissionStrength_COUNT",
            };
        };
        inline char const* toString(SoundEmissionStrengthEnum value)
        {
            if(size_t(value) >= std::size(SoundEmissionStrength::enumToString))
                throw std::runtime_error("Wrong enum value");
            return SoundEmissionStrength::enumToString[size_t(value)];
        }
        inline char const* toInternal(SoundEmissionStrengthEnum value) { return toString(value); }
        template<> inline SoundEmissionStrengthEnum strToEnum<SoundEmissionStrengthEnum>(char const* value)
        {
            return static_cast<SoundEmissionStrengthEnum>(details::indexInEnum(value, SoundEmissionStrength::enumToString));
        }

        struct soundEmissionStrength : HelperObject<soundEmissionStrength> // Object
        {
            explicit soundEmissionStrength(Ent::Property _node): HelperObject<soundEmissionStrength>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::SoundEmissionStrength val() const;
        };

        struct SoftCollisionGD_VegetationDetectionParameters : HelperObject<SoftCollisionGD_VegetationDetectionParameters> // Object
        {
            explicit SoftCollisionGD_VegetationDetectionParameters(Ent::Property _node): HelperObject<SoftCollisionGD_VegetationDetectionParameters>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoftCollisionGD::VegetationDetectionParameters";
            static SoftCollisionGD_VegetationDetectionParameters load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoftCollisionGD_VegetationDetectionParameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoftCollisionGD_VegetationDetectionParameters loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoftCollisionGD_VegetationDetectionParameters(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoftCollisionGD_VegetationDetectionParameters create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoftCollisionGD_VegetationDetectionParameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoftCollisionGD_VegetationDetectionParameters makeInstanceOf()
            {
                return SoftCollisionGD_VegetationDetectionParameters(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String BoneName() const;
            Ent::Gen2::Vector3 BoneOffset() const;
            Ent::Gen2::Float Radius() const;
            PrimArray<Ent::Gen2::String> VegetationTagList() const;
            Ent::Gen2::String _comment() const;
        };

        struct SmoothScaleComponentInput_Parameters : HelperObject<SmoothScaleComponentInput_Parameters> // Object
        {
            explicit SmoothScaleComponentInput_Parameters(Ent::Property _node): HelperObject<SmoothScaleComponentInput_Parameters>(std::move(_node)) {}
            static constexpr char schemaName[] = "SmoothScaleComponentInput::Parameters";
            static SmoothScaleComponentInput_Parameters load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SmoothScaleComponentInput_Parameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SmoothScaleComponentInput_Parameters loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SmoothScaleComponentInput_Parameters(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SmoothScaleComponentInput_Parameters create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SmoothScaleComponentInput_Parameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SmoothScaleComponentInput_Parameters makeInstanceOf()
            {
                return SmoothScaleComponentInput_Parameters(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Scale() const;
            Ent::Gen2::Float Time() const;
            Ent::Gen2::String _comment() const;
        };

        struct Size : EnumPropHelper<Size, SizeEnum> // Enum
        {
            using Enum = SizeEnum;
            using PropHelper<Size, Enum>::operator=;
            explicit Size(Ent::Property _node): EnumPropHelper<Size, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "Size";
            static constexpr char const* enumToString[] = {
                "tiny",
                "small",
                "medium",
                "big",
                "enormous",
                "Size_COUNT",
            };
        };
        inline char const* toString(SizeEnum value)
        {
            if(size_t(value) >= std::size(Size::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Size::enumToString[size_t(value)];
        }
        inline char const* toInternal(SizeEnum value) { return toString(value); }
        template<> inline SizeEnum strToEnum<SizeEnum>(char const* value)
        {
            return static_cast<SizeEnum>(details::indexInEnum(value, Size::enumToString));
        }

        struct ShowdownSpeciesAudioData : HelperObject<ShowdownSpeciesAudioData> // Object
        {
            explicit ShowdownSpeciesAudioData(Ent::Property _node): HelperObject<ShowdownSpeciesAudioData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShowdownSpeciesAudioData";
            static ShowdownSpeciesAudioData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShowdownSpeciesAudioData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShowdownSpeciesAudioData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShowdownSpeciesAudioData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShowdownSpeciesAudioData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShowdownSpeciesAudioData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShowdownSpeciesAudioData makeInstanceOf()
            {
                return ShowdownSpeciesAudioData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String AudioCategory() const;
            Ent::Gen2::String Species() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShowdownLayerInfo : HelperObject<ShowdownLayerInfo> // Object
        {
            explicit ShowdownLayerInfo(Ent::Property _node): HelperObject<ShowdownLayerInfo>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShowdownLayerInfo";
            static ShowdownLayerInfo load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShowdownLayerInfo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShowdownLayerInfo loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShowdownLayerInfo(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShowdownLayerInfo create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShowdownLayerInfo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShowdownLayerInfo makeInstanceOf()
            {
                return ShowdownLayerInfo(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float CoolDown() const;
            Ent::Gen2::String DistanceRTPC() const;
            Ent::Gen2::Bool Loop() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::String Priority() const;
            Ent::Gen2::String UninvolvedDistanceRTPC() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShowdownLayerData : HelperObject<ShowdownLayerData> // Object
        {
            explicit ShowdownLayerData(Ent::Property _node): HelperObject<ShowdownLayerData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShowdownLayerData";
            static ShowdownLayerData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShowdownLayerData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShowdownLayerData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShowdownLayerData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShowdownLayerData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShowdownLayerData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShowdownLayerData makeInstanceOf()
            {
                return ShowdownLayerData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ShowdownLayerInfo Attacked() const;
            Ent::Gen2::ShowdownLayerInfo Danger() const;
            Ent::Gen2::ShowdownLayerInfo Detected() const;
            Ent::Gen2::ShowdownLayerInfo Suspected() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShowdownMusic : HelperObject<ShowdownMusic> // Object
        {
            explicit ShowdownMusic(Ent::Property _node): HelperObject<ShowdownMusic>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShowdownMusic";
            static ShowdownMusic load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShowdownMusic(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShowdownMusic loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShowdownMusic(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShowdownMusic create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShowdownMusic(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShowdownMusic makeInstanceOf()
            {
                return ShowdownMusic(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AfterEpicCoolDown() const;
            Ent::Gen2::Float CloseRange() const;
            Ent::Gen2::Float CoolDownBeforeStop() const;
            Ent::Gen2::String EventsPrefix() const;
            Ent::Gen2::Int IntensityCountMax() const;
            Ent::Gen2::Float IntensityCountRatio() const;
            Ent::Gen2::Float IntensityDistanceRatio() const;
            Ent::Gen2::String IntensityRTPC() const;
            Ent::Gen2::ShowdownLayerData Layers() const;
            Ent::Gen2::String MostSignificantCreatureDistanceRTPC() const;
            Ent::Gen2::Float MusicSourceAnchorRadius() const;
            Ent::Gen2::Float MusicSourceDamping() const;
            Ent::Gen2::Float PlayerInvolvedScoreFactor() const;
            Ent::Gen2::Float PlayerUninvolvedDistanceFactor() const;
            Ent::Gen2::String RTPC_2D3D() const;
            Ent::Gen2::String RTPC_PlayersInFight() const;
            Ent::Gen2::String ShowdownBlueSideState() const;
            Ent::Gen2::String ShowdownMusBank() const;
            Ent::Gen2::String ShowdownMusState() const;
            Ent::Gen2::String ShowdownNeutralSideState() const;
            Ent::Gen2::String ShowdownRedSideState() const;
            Ent::Gen2::String ShowdownSideState() const;
            Ent::Gen2::String ShowdownTypeState() const;
            Ent::Gen2::Float SmoothDistanceRTPCs() const;
            Ent::Gen2::Float SmoothTime() const;
            Array<Ent::Gen2::ShowdownSpeciesAudioData> SpeciesToAudioCategory() const;
            Ent::Gen2::SyncTempoMode SynchronizationMode() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShootSequenceData : HelperObject<ShootSequenceData> // Object
        {
            explicit ShootSequenceData(Ent::Property _node): HelperObject<ShootSequenceData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShootSequenceData";
            static ShootSequenceData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShootSequenceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShootSequenceData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShootSequenceData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShootSequenceData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShootSequenceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShootSequenceData makeInstanceOf()
            {
                return ShootSequenceData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Param() const;
            Ent::Gen2::String Type_() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShootData : HelperObject<ShootData> // Object
        {
            explicit ShootData(Ent::Property _node): HelperObject<ShootData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShootData";
            static ShootData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShootData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShootData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShootData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShootData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShootData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShootData makeInstanceOf()
            {
                return ShootData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String ammoName() const;
            Ent::Gen2::Float anticipationImprecision() const;
            Ent::Gen2::Bool canShoot() const;
            Ent::Gen2::Int chargeTierCount() const;
            Ent::Gen2::Float gravity() const;
            Ent::Gen2::Float lifeCost() const;
            Ent::Gen2::Float lifeCostCharged() const;
            Ent::Gen2::Float maxChargeDuration() const;
            Ent::Gen2::Float maxShootDistance() const;
            Ent::Gen2::Float minDelayBetweenShots() const;
            Ent::Gen2::Bool randomAngleShoot() const;
            Ent::Gen2::Float shootMaxAngle() const;
            Ent::Gen2::Float shootSpeed() const;
            Ent::Gen2::Float zoneImprecision() const;
        };

        struct SetOfObjectItem : HelperObject<SetOfObjectItem> // Object
        {
            explicit SetOfObjectItem(Ent::Property _node): HelperObject<SetOfObjectItem>(std::move(_node)) {}
            
            Ent::Gen2::String Name() const;
            Ent::Gen2::String Value() const;
            Ent::Gen2::String _comment() const;
        };

        struct SeedPatchData : HelperObject<SeedPatchData> // Object
        {
            explicit SeedPatchData(Ent::Property _node): HelperObject<SeedPatchData>(std::move(_node)) {}
            static constexpr char schemaName[] = "SeedPatchData";
            static SeedPatchData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SeedPatchData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SeedPatchData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SeedPatchData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SeedPatchData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SeedPatchData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SeedPatchData makeInstanceOf()
            {
                return SeedPatchData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float NoiseBlur() const;
            Ent::Gen2::Float NoiseContrast() const;
            Ent::Gen2::Bool NoiseInvert() const;
            Ent::Gen2::String NoiseName() const;
            Ent::Gen2::Float NoiseOffsetX() const;
            Ent::Gen2::Float NoiseOffsetY() const;
            Ent::Gen2::Float NoiseOpacity() const;
            Ent::Gen2::Float NoisePosition() const;
            Ent::Gen2::Float NoiseSizeX() const;
            Ent::Gen2::Float NoiseSizeY() const;
            Ent::Gen2::String SeedName() const;
            Ent::Gen2::String _comment() const;
        };

        struct SeedPatchDatas : HelperObject<SeedPatchDatas> // Object
        {
            explicit SeedPatchDatas(Ent::Property _node): HelperObject<SeedPatchDatas>(std::move(_node)) {}
            static constexpr char schemaName[] = "SeedPatchDatas";
            static SeedPatchDatas load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SeedPatchDatas(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SeedPatchDatas loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SeedPatchDatas(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SeedPatchDatas create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SeedPatchDatas(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SeedPatchDatas makeInstanceOf()
            {
                return SeedPatchDatas(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::SeedPatchData> DataMap() const;
            Ent::Gen2::String _comment() const;
        };

        struct SeedPatchDataList : HelperObject<SeedPatchDataList> // Object
        {
            explicit SeedPatchDataList(Ent::Property _node): HelperObject<SeedPatchDataList>(std::move(_node)) {}
            static constexpr char schemaName[] = "SeedPatchDataList";
            static SeedPatchDataList load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SeedPatchDataList(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SeedPatchDataList loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SeedPatchDataList(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SeedPatchDataList create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SeedPatchDataList(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SeedPatchDataList makeInstanceOf()
            {
                return SeedPatchDataList(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::SeedPatchData> Data() const;
            Ent::Gen2::String _comment() const;
        };

        struct ScriptPathAndDataSet : HelperObject<ScriptPathAndDataSet> // Object
        {
            explicit ScriptPathAndDataSet(Ent::Property _node): HelperObject<ScriptPathAndDataSet>(std::move(_node)) {}
            static constexpr char schemaName[] = "ScriptPathAndDataSet";
            static ScriptPathAndDataSet load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ScriptPathAndDataSet(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ScriptPathAndDataSet loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ScriptPathAndDataSet(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ScriptPathAndDataSet create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ScriptPathAndDataSet(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ScriptPathAndDataSet makeInstanceOf()
            {
                return ScriptPathAndDataSet(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AutoLaunch() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::TypedValue> DataMap() const;
            Ent::Gen2::String NickName() const;
            Ent::Gen2::String Path() const;
            Array<Ent::Gen2::ScriptPathAndDataSet> SpawnDataSets() const;
            Ent::Gen2::String _comment() const;
        };

        struct ScaleFactor : HelperObject<ScaleFactor> // Object
        {
            explicit ScaleFactor(Ent::Property _node): HelperObject<ScaleFactor>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct ScaleConverter : HelperObject<ScaleConverter> // Object
        {
            explicit ScaleConverter(Ent::Property _node): HelperObject<ScaleConverter>(std::move(_node)) {}
            static constexpr char schemaName[] = "ScaleConverter";
            static ScaleConverter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ScaleConverter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ScaleConverter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ScaleConverter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ScaleConverter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ScaleConverter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ScaleConverter makeInstanceOf()
            {
                return ScaleConverter(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::variant_Pasta_Easing_Curve_string_ easing() const;
            Ent::Gen2::Vector2 in_() const;
            Ent::Gen2::String inText() const;
            Ent::Gen2::Vector2 out() const;
            Ent::Gen2::String outText() const;
        };

        struct RuntimeMode : EnumPropHelper<RuntimeMode, RuntimeModeEnum> // Enum
        {
            using Enum = RuntimeModeEnum;
            using PropHelper<RuntimeMode, Enum>::operator=;
            explicit RuntimeMode(Ent::Property _node): EnumPropHelper<RuntimeMode, Enum>(std::move(_node)) {}
            
            static constexpr char const* enumToString[] = {
                "None",
                "Container",
                "Compound",
            };
        };
        inline char const* toString(RuntimeModeEnum value)
        {
            if(size_t(value) >= std::size(RuntimeMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return RuntimeMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(RuntimeModeEnum value) { return toString(value); }
        template<> inline RuntimeModeEnum strToEnum<RuntimeModeEnum>(char const* value)
        {
            return static_cast<RuntimeModeEnum>(details::indexInEnum(value, RuntimeMode::enumToString));
        }

        struct RigidbodyScalingSpeed : HelperObject<RigidbodyScalingSpeed> // Object
        {
            explicit RigidbodyScalingSpeed(Ent::Property _node): HelperObject<RigidbodyScalingSpeed>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct RigidbodyScaleMultiplier : HelperObject<RigidbodyScaleMultiplier> // Object
        {
            explicit RigidbodyScaleMultiplier(Ent::Property _node): HelperObject<RigidbodyScaleMultiplier>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct RigidBodyUserData : HelperObject<RigidBodyUserData> // Object
        {
            explicit RigidBodyUserData(Ent::Property _node): HelperObject<RigidBodyUserData>(std::move(_node)) {}
            static constexpr char schemaName[] = "RigidBodyUserData";
            static RigidBodyUserData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RigidBodyUserData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RigidBodyUserData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RigidBodyUserData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RigidBodyUserData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RigidBodyUserData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RigidBodyUserData makeInstanceOf()
            {
                return RigidBodyUserData(getProperty().makeInstanceOf());
            }
        
        };

        struct RigidBodyUserDataLedges : HelperObject<RigidBodyUserDataLedges> // Object
        {
            explicit RigidBodyUserDataLedges(Ent::Property _node): HelperObject<RigidBodyUserDataLedges>(std::move(_node)) {}
            static constexpr char schemaName[] = "RigidBodyUserDataLedges";
            static RigidBodyUserDataLedges load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RigidBodyUserDataLedges(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RigidBodyUserDataLedges loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RigidBodyUserDataLedges(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RigidBodyUserDataLedges create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RigidBodyUserDataLedges(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RigidBodyUserDataLedges makeInstanceOf()
            {
                return RigidBodyUserDataLedges(getProperty().makeInstanceOf());
            }
            Ent::Gen2::RigidBodyUserData Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RigidBodyUserDataImpact : HelperObject<RigidBodyUserDataImpact> // Object
        {
            explicit RigidBodyUserDataImpact(Ent::Property _node): HelperObject<RigidBodyUserDataImpact>(std::move(_node)) {}
            static constexpr char schemaName[] = "RigidBodyUserDataImpact";
            static RigidBodyUserDataImpact load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RigidBodyUserDataImpact(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RigidBodyUserDataImpact loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RigidBodyUserDataImpact(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RigidBodyUserDataImpact create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RigidBodyUserDataImpact(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RigidBodyUserDataImpact makeInstanceOf()
            {
                return RigidBodyUserDataImpact(getProperty().makeInstanceOf());
            }
            Ent::Gen2::RigidBodyUserData Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RigidBodyMeshNavigation : HelperObject<RigidBodyMeshNavigation> // Object
        {
            explicit RigidBodyMeshNavigation(Ent::Property _node): HelperObject<RigidBodyMeshNavigation>(std::move(_node)) {}
            static constexpr char schemaName[] = "RigidBodyMeshNavigation";
            static RigidBodyMeshNavigation load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RigidBodyMeshNavigation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RigidBodyMeshNavigation loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RigidBodyMeshNavigation(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RigidBodyMeshNavigation create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RigidBodyMeshNavigation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RigidBodyMeshNavigation makeInstanceOf()
            {
                return RigidBodyMeshNavigation(getProperty().makeInstanceOf());
            }
            Ent::Gen2::RigidBodyUserData Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidRigidbodyUserData : HelperObject<FluidRigidbodyUserData> // Object
        {
            explicit FluidRigidbodyUserData(Ent::Property _node): HelperObject<FluidRigidbodyUserData>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidRigidbodyUserData";
            static FluidRigidbodyUserData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidRigidbodyUserData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidRigidbodyUserData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidRigidbodyUserData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidRigidbodyUserData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidRigidbodyUserData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidRigidbodyUserData makeInstanceOf()
            {
                return FluidRigidbodyUserData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::RigidBodyUserData Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RevivedData : HelperObject<RevivedData> // Object
        {
            explicit RevivedData(Ent::Property _node): HelperObject<RevivedData>(std::move(_node)) {}
            static constexpr char schemaName[] = "RevivedData";
            static RevivedData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RevivedData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RevivedData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RevivedData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RevivedData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RevivedData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RevivedData makeInstanceOf()
            {
                return RevivedData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float NonCreatureConvertRatio() const;
            Ent::Gen2::Float ReviveSinAmplitude() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReviveSide : EnumPropHelper<ReviveSide, ReviveSideEnum> // Enum
        {
            using Enum = ReviveSideEnum;
            using PropHelper<ReviveSide, Enum>::operator=;
            explicit ReviveSide(Ent::Property _node): EnumPropHelper<ReviveSide, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReviveSide";
            static constexpr char const* enumToString[] = {
                "neutral",
                "sacred",
                "cursed",
                "ReviveSide_COUNT",
            };
        };
        inline char const* toString(ReviveSideEnum value)
        {
            if(size_t(value) >= std::size(ReviveSide::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ReviveSide::enumToString[size_t(value)];
        }
        inline char const* toInternal(ReviveSideEnum value) { return toString(value); }
        template<> inline ReviveSideEnum strToEnum<ReviveSideEnum>(char const* value)
        {
            return static_cast<ReviveSideEnum>(details::indexInEnum(value, ReviveSide::enumToString));
        }

        struct ResponsiblePointer_GameEffect_ : Base // Union
        {
            explicit ResponsiblePointer_GameEffect_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "ResponsiblePointer<GameEffect>";
            char const* getType() const;
            std::optional<Ent::Gen2::BeamDetectionEffect> BeamDetectionEffect();
            Ent::Gen2::BeamDetectionEffect setBeamDetectionEffect();
            std::optional<Ent::Gen2::BeamEffect> BeamEffect();
            Ent::Gen2::BeamEffect setBeamEffect();
            std::optional<Ent::Gen2::CallForHelpEffect> CallForHelpEffect();
            Ent::Gen2::CallForHelpEffect setCallForHelpEffect();
            std::optional<Ent::Gen2::ExplosionEffect> ExplosionEffect();
            Ent::Gen2::ExplosionEffect setExplosionEffect();
            std::optional<Ent::Gen2::FluidEffect> FluidEffect();
            Ent::Gen2::FluidEffect setFluidEffect();
            std::optional<Ent::Gen2::FollowerCallEffect> FollowerCallEffect();
            Ent::Gen2::FollowerCallEffect setFollowerCallEffect();
            std::optional<Ent::Gen2::RegenEffect> RegenEffect();
            Ent::Gen2::RegenEffect setRegenEffect();
            std::optional<Ent::Gen2::RepulseEffect> RepulseEffect();
            Ent::Gen2::RepulseEffect setRepulseEffect();
            std::optional<Ent::Gen2::ShakeEffect> ShakeEffect();
            Ent::Gen2::ShakeEffect setShakeEffect();
            std::optional<Ent::Gen2::WindTurbulenceEffect> WindTurbulenceEffect();
            Ent::Gen2::WindTurbulenceEffect setWindTurbulenceEffect();
            std::optional<Ent::Gen2::GameEffect> GameEffect();
            Ent::Gen2::GameEffect setGameEffect();
        };

        struct sGameEffectTemplate : HelperObject<sGameEffectTemplate> // Object
        {
            explicit sGameEffectTemplate(Ent::Property _node): HelperObject<sGameEffectTemplate>(std::move(_node)) {}
            static constexpr char schemaName[] = "sGameEffectTemplate";
            static sGameEffectTemplate load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sGameEffectTemplate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sGameEffectTemplate loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sGameEffectTemplate(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sGameEffectTemplate create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sGameEffectTemplate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sGameEffectTemplate makeInstanceOf()
            {
                return sGameEffectTemplate(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String BoneName() const;
            Ent::Gen2::ResponsiblePointer_GameEffect_ Effect() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::String _comment() const;
        };

        struct ResponsiblePointer_CineEvent_ : Base // Union
        {
            explicit ResponsiblePointer_CineEvent_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "ResponsiblePointer<CineEvent>";
            char const* getType() const;
            std::optional<Ent::Gen2::CineEventTestCurrentGameState> CineEventTestCurrentGameState();
            Ent::Gen2::CineEventTestCurrentGameState setCineEventTestCurrentGameState();
            std::optional<Ent::Gen2::CineEventTestEndCurrentSequence> CineEventTestEndCurrentSequence();
            Ent::Gen2::CineEventTestEndCurrentSequence setCineEventTestEndCurrentSequence();
            std::optional<Ent::Gen2::CineEventTestInput> CineEventTestInput();
            Ent::Gen2::CineEventTestInput setCineEventTestInput();
            std::optional<Ent::Gen2::CineEventTestIsCanceled> CineEventTestIsCanceled();
            Ent::Gen2::CineEventTestIsCanceled setCineEventTestIsCanceled();
            std::optional<Ent::Gen2::CineEventTriggerDisplayUIMessage> CineEventTriggerDisplayUIMessage();
            Ent::Gen2::CineEventTriggerDisplayUIMessage setCineEventTriggerDisplayUIMessage();
            std::optional<Ent::Gen2::CineEventTriggerEventHandlerPost> CineEventTriggerEventHandlerPost();
            Ent::Gen2::CineEventTriggerEventHandlerPost setCineEventTriggerEventHandlerPost();
            std::optional<Ent::Gen2::CineEventTriggerGameStateChange> CineEventTriggerGameStateChange();
            Ent::Gen2::CineEventTriggerGameStateChange setCineEventTriggerGameStateChange();
            std::optional<Ent::Gen2::CineEventTriggerPlaySequence> CineEventTriggerPlaySequence();
            Ent::Gen2::CineEventTriggerPlaySequence setCineEventTriggerPlaySequence();
            std::optional<Ent::Gen2::CineEventTriggerPlaySound> CineEventTriggerPlaySound();
            Ent::Gen2::CineEventTriggerPlaySound setCineEventTriggerPlaySound();
        };

        struct ResponsiblePointer_AnalyticsObserverInterface_ : HelperObject<ResponsiblePointer_AnalyticsObserverInterface_> // Object
        {
            explicit ResponsiblePointer_AnalyticsObserverInterface_(Ent::Property _node): HelperObject<ResponsiblePointer_AnalyticsObserverInterface_>(std::move(_node)) {}
            static constexpr char schemaName[] = "ResponsiblePointer<AnalyticsObserverInterface>";
            static ResponsiblePointer_AnalyticsObserverInterface_ load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ResponsiblePointer_AnalyticsObserverInterface_(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ResponsiblePointer_AnalyticsObserverInterface_ loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ResponsiblePointer_AnalyticsObserverInterface_(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ResponsiblePointer_AnalyticsObserverInterface_ create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ResponsiblePointer_AnalyticsObserverInterface_(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ResponsiblePointer_AnalyticsObserverInterface_ makeInstanceOf()
            {
                return ResponsiblePointer_AnalyticsObserverInterface_(getProperty().makeInstanceOf());
            }
        
        };

        struct ResponsiblePointer_ActorState_ : Base // Union
        {
            explicit ResponsiblePointer_ActorState_(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "ResponsiblePointer<ActorState>";
            char const* getType() const;
            std::optional<Ent::Gen2::ActionAimProjectile> ActionAimProjectile();
            Ent::Gen2::ActionAimProjectile setActionAimProjectile();
            std::optional<Ent::Gen2::ActionAttack> ActionAttack();
            Ent::Gen2::ActionAttack setActionAttack();
            std::optional<Ent::Gen2::ActionAttackJumpOnto> ActionAttackJumpOnto();
            Ent::Gen2::ActionAttackJumpOnto setActionAttackJumpOnto();
            std::optional<Ent::Gen2::ActionAttackStomp> ActionAttackStomp();
            Ent::Gen2::ActionAttackStomp setActionAttackStomp();
            std::optional<Ent::Gen2::ActionBite> ActionBite();
            Ent::Gen2::ActionBite setActionBite();
            std::optional<Ent::Gen2::ActionBiteIn> ActionBiteIn();
            Ent::Gen2::ActionBiteIn setActionBiteIn();
            std::optional<Ent::Gen2::ActionBiteOut> ActionBiteOut();
            Ent::Gen2::ActionBiteOut setActionBiteOut();
            std::optional<Ent::Gen2::ActionBittenState> ActionBittenState();
            Ent::Gen2::ActionBittenState setActionBittenState();
            std::optional<Ent::Gen2::ActionBrake> ActionBrake();
            Ent::Gen2::ActionBrake setActionBrake();
            std::optional<Ent::Gen2::ActionCallForHelp> ActionCallForHelp();
            Ent::Gen2::ActionCallForHelp setActionCallForHelp();
            std::optional<Ent::Gen2::ActionCentrifugal> ActionCentrifugal();
            Ent::Gen2::ActionCentrifugal setActionCentrifugal();
            std::optional<Ent::Gen2::ActionChangeMount> ActionChangeMount();
            Ent::Gen2::ActionChangeMount setActionChangeMount();
            std::optional<Ent::Gen2::ActionChangeRidingSpot> ActionChangeRidingSpot();
            Ent::Gen2::ActionChangeRidingSpot setActionChangeRidingSpot();
            std::optional<Ent::Gen2::ActionChosen> ActionChosen();
            Ent::Gen2::ActionChosen setActionChosen();
            std::optional<Ent::Gen2::ActionCinematic> ActionCinematic();
            Ent::Gen2::ActionCinematic setActionCinematic();
            std::optional<Ent::Gen2::ActionClamberDropOff> ActionClamberDropOff();
            Ent::Gen2::ActionClamberDropOff setActionClamberDropOff();
            std::optional<Ent::Gen2::ActionClamberJump> ActionClamberJump();
            Ent::Gen2::ActionClamberJump setActionClamberJump();
            std::optional<Ent::Gen2::ActionClamberJumpOff> ActionClamberJumpOff();
            Ent::Gen2::ActionClamberJumpOff setActionClamberJumpOff();
            std::optional<Ent::Gen2::ActionClamberLand> ActionClamberLand();
            Ent::Gen2::ActionClamberLand setActionClamberLand();
            std::optional<Ent::Gen2::ActionClamberMove> ActionClamberMove();
            Ent::Gen2::ActionClamberMove setActionClamberMove();
            std::optional<Ent::Gen2::ActionClamberRise> ActionClamberRise();
            Ent::Gen2::ActionClamberRise setActionClamberRise();
            std::optional<Ent::Gen2::ActionClimbEdge> ActionClimbEdge();
            Ent::Gen2::ActionClimbEdge setActionClimbEdge();
            std::optional<Ent::Gen2::ActionCollapse> ActionCollapse();
            Ent::Gen2::ActionCollapse setActionCollapse();
            std::optional<Ent::Gen2::ActionDecelerate> ActionDecelerate();
            Ent::Gen2::ActionDecelerate setActionDecelerate();
            std::optional<Ent::Gen2::ActionDigUpTreasure> ActionDigUpTreasure();
            Ent::Gen2::ActionDigUpTreasure setActionDigUpTreasure();
            std::optional<Ent::Gen2::ActionDisableAndFollow> ActionDisableAndFollow();
            Ent::Gen2::ActionDisableAndFollow setActionDisableAndFollow();
            std::optional<Ent::Gen2::ActionDodge> ActionDodge();
            Ent::Gen2::ActionDodge setActionDodge();
            std::optional<Ent::Gen2::ActionDrawAttention> ActionDrawAttention();
            Ent::Gen2::ActionDrawAttention setActionDrawAttention();
            std::optional<Ent::Gen2::ActionDrawWeapon> ActionDrawWeapon();
            Ent::Gen2::ActionDrawWeapon setActionDrawWeapon();
            std::optional<Ent::Gen2::ActionDrawWeaponState> ActionDrawWeaponState();
            Ent::Gen2::ActionDrawWeaponState setActionDrawWeaponState();
            std::optional<Ent::Gen2::ActionDrift> ActionDrift();
            Ent::Gen2::ActionDrift setActionDrift();
            std::optional<Ent::Gen2::ActionDrop> ActionDrop();
            Ent::Gen2::ActionDrop setActionDrop();
            std::optional<Ent::Gen2::ActionEmote> ActionEmote();
            Ent::Gen2::ActionEmote setActionEmote();
            std::optional<Ent::Gen2::ActionFlyCrash> ActionFlyCrash();
            Ent::Gen2::ActionFlyCrash setActionFlyCrash();
            std::optional<Ent::Gen2::ActionFlyDive> ActionFlyDive();
            Ent::Gen2::ActionFlyDive setActionFlyDive();
            std::optional<Ent::Gen2::ActionFlyDown> ActionFlyDown();
            Ent::Gen2::ActionFlyDown setActionFlyDown();
            std::optional<Ent::Gen2::ActionFlyFlap> ActionFlyFlap();
            Ent::Gen2::ActionFlyFlap setActionFlyFlap();
            std::optional<Ent::Gen2::ActionFlyUp> ActionFlyUp();
            Ent::Gen2::ActionFlyUp setActionFlyUp();
            std::optional<Ent::Gen2::ActionHit> ActionHit();
            Ent::Gen2::ActionHit setActionHit();
            std::optional<Ent::Gen2::ActionIdle> ActionIdle();
            Ent::Gen2::ActionIdle setActionIdle();
            std::optional<Ent::Gen2::ActionIncarnate> ActionIncarnate();
            Ent::Gen2::ActionIncarnate setActionIncarnate();
            std::optional<Ent::Gen2::ActionIncarnated> ActionIncarnated();
            Ent::Gen2::ActionIncarnated setActionIncarnated();
            std::optional<Ent::Gen2::ActionJump> ActionJump();
            Ent::Gen2::ActionJump setActionJump();
            std::optional<Ent::Gen2::ActionJumpOnto> ActionJumpOnto();
            Ent::Gen2::ActionJumpOnto setActionJumpOnto();
            std::optional<Ent::Gen2::ActionLand> ActionLand();
            Ent::Gen2::ActionLand setActionLand();
            std::optional<Ent::Gen2::ActionLandingMount> ActionLandingMount();
            Ent::Gen2::ActionLandingMount setActionLandingMount();
            std::optional<Ent::Gen2::ActionLookAt> ActionLookAt();
            Ent::Gen2::ActionLookAt setActionLookAt();
            std::optional<Ent::Gen2::ActionMountReception> ActionMountReception();
            Ent::Gen2::ActionMountReception setActionMountReception();
            std::optional<Ent::Gen2::ActionMove> ActionMove();
            Ent::Gen2::ActionMove setActionMove();
            std::optional<Ent::Gen2::ActionMoveProjectile> ActionMoveProjectile();
            Ent::Gen2::ActionMoveProjectile setActionMoveProjectile();
            std::optional<Ent::Gen2::ActionMoveTo> ActionMoveTo();
            Ent::Gen2::ActionMoveTo setActionMoveTo();
            std::optional<Ent::Gen2::ActionOrientMount> ActionOrientMount();
            Ent::Gen2::ActionOrientMount setActionOrientMount();
            std::optional<Ent::Gen2::ActionOutfitSpecialState> ActionOutfitSpecialState();
            Ent::Gen2::ActionOutfitSpecialState setActionOutfitSpecialState();
            std::optional<Ent::Gen2::ActionPathfindAndMove> ActionPathfindAndMove();
            Ent::Gen2::ActionPathfindAndMove setActionPathfindAndMove();
            std::optional<Ent::Gen2::ActionPatinate> ActionPatinate();
            Ent::Gen2::ActionPatinate setActionPatinate();
            std::optional<Ent::Gen2::ActionPlayAnim> ActionPlayAnim();
            Ent::Gen2::ActionPlayAnim setActionPlayAnim();
            std::optional<Ent::Gen2::ActionPropelled> ActionPropelled();
            Ent::Gen2::ActionPropelled setActionPropelled();
            std::optional<Ent::Gen2::ActionPushed> ActionPushed();
            Ent::Gen2::ActionPushed setActionPushed();
            std::optional<Ent::Gen2::ActionQuadStandUpState> ActionQuadStandUpState();
            Ent::Gen2::ActionQuadStandUpState setActionQuadStandUpState();
            std::optional<Ent::Gen2::ActionQuadStandUpStateIn> ActionQuadStandUpStateIn();
            Ent::Gen2::ActionQuadStandUpStateIn setActionQuadStandUpStateIn();
            std::optional<Ent::Gen2::ActionQuadStandUpStateOut> ActionQuadStandUpStateOut();
            Ent::Gen2::ActionQuadStandUpStateOut setActionQuadStandUpStateOut();
            std::optional<Ent::Gen2::ActionRagdoll> ActionRagdoll();
            Ent::Gen2::ActionRagdoll setActionRagdoll();
            std::optional<Ent::Gen2::ActionReviveMaskEffect> ActionReviveMaskEffect();
            Ent::Gen2::ActionReviveMaskEffect setActionReviveMaskEffect();
            std::optional<Ent::Gen2::ActionRiderStance> ActionRiderStance();
            Ent::Gen2::ActionRiderStance setActionRiderStance();
            std::optional<Ent::Gen2::ActionRise> ActionRise();
            Ent::Gen2::ActionRise setActionRise();
            std::optional<Ent::Gen2::ActionScaleRider> ActionScaleRider();
            Ent::Gen2::ActionScaleRider setActionScaleRider();
            std::optional<Ent::Gen2::ActionShakeOff> ActionShakeOff();
            Ent::Gen2::ActionShakeOff setActionShakeOff();
            std::optional<Ent::Gen2::ActionShamanVision> ActionShamanVision();
            Ent::Gen2::ActionShamanVision setActionShamanVision();
            std::optional<Ent::Gen2::ActionShootBeam> ActionShootBeam();
            Ent::Gen2::ActionShootBeam setActionShootBeam();
            std::optional<Ent::Gen2::ActionSlide> ActionSlide();
            Ent::Gen2::ActionSlide setActionSlide();
            std::optional<Ent::Gen2::ActionStartRun> ActionStartRun();
            Ent::Gen2::ActionStartRun setActionStartRun();
            std::optional<Ent::Gen2::ActionStop> ActionStop();
            Ent::Gen2::ActionStop setActionStop();
            std::optional<Ent::Gen2::ActionStrafe> ActionStrafe();
            Ent::Gen2::ActionStrafe setActionStrafe();
            std::optional<Ent::Gen2::ActionStrafeTurn> ActionStrafeTurn();
            Ent::Gen2::ActionStrafeTurn setActionStrafeTurn();
            std::optional<Ent::Gen2::ActionTakeOff> ActionTakeOff();
            Ent::Gen2::ActionTakeOff setActionTakeOff();
            std::optional<Ent::Gen2::ActionTalk> ActionTalk();
            Ent::Gen2::ActionTalk setActionTalk();
            std::optional<Ent::Gen2::ActionTopView> ActionTopView();
            Ent::Gen2::ActionTopView setActionTopView();
            std::optional<Ent::Gen2::ActionTriggerCrouch> ActionTriggerCrouch();
            Ent::Gen2::ActionTriggerCrouch setActionTriggerCrouch();
            std::optional<Ent::Gen2::ActionTriggerShamanVisionExit> ActionTriggerShamanVisionExit();
            Ent::Gen2::ActionTriggerShamanVisionExit setActionTriggerShamanVisionExit();
            std::optional<Ent::Gen2::ActionTriggerStandUp> ActionTriggerStandUp();
            Ent::Gen2::ActionTriggerStandUp setActionTriggerStandUp();
            std::optional<Ent::Gen2::ActionTurn> ActionTurn();
            Ent::Gen2::ActionTurn setActionTurn();
            std::optional<Ent::Gen2::ActionUnmount> ActionUnmount();
            Ent::Gen2::ActionUnmount setActionUnmount();
            std::optional<Ent::Gen2::ActionWait> ActionWait();
            Ent::Gen2::ActionWait setActionWait();
            std::optional<Ent::Gen2::ActorStateAimCharge> ActorStateAimCharge();
            Ent::Gen2::ActorStateAimCharge setActorStateAimCharge();
            std::optional<Ent::Gen2::ActorStateAlive> ActorStateAlive();
            Ent::Gen2::ActorStateAlive setActorStateAlive();
            std::optional<Ent::Gen2::ActorStateAnsweringCall> ActorStateAnsweringCall();
            Ent::Gen2::ActorStateAnsweringCall setActorStateAnsweringCall();
            std::optional<Ent::Gen2::ActorStateApplyHit> ActorStateApplyHit();
            Ent::Gen2::ActorStateApplyHit setActorStateApplyHit();
            std::optional<Ent::Gen2::ActorStateAttitudeAggressive> ActorStateAttitudeAggressive();
            Ent::Gen2::ActorStateAttitudeAggressive setActorStateAttitudeAggressive();
            std::optional<Ent::Gen2::ActorStateBehaviorState> ActorStateBehaviorState();
            Ent::Gen2::ActorStateBehaviorState setActorStateBehaviorState();
            std::optional<Ent::Gen2::ActorStateBeingImmersed> ActorStateBeingImmersed();
            Ent::Gen2::ActorStateBeingImmersed setActorStateBeingImmersed();
            std::optional<Ent::Gen2::ActorStateBeingImmersedFromInAir> ActorStateBeingImmersedFromInAir();
            Ent::Gen2::ActorStateBeingImmersedFromInAir setActorStateBeingImmersedFromInAir();
            std::optional<Ent::Gen2::ActorStateBeingImmersedFromOnGround> ActorStateBeingImmersedFromOnGround();
            Ent::Gen2::ActorStateBeingImmersedFromOnGround setActorStateBeingImmersedFromOnGround();
            std::optional<Ent::Gen2::ActorStateBeingInAir> ActorStateBeingInAir();
            Ent::Gen2::ActorStateBeingInAir setActorStateBeingInAir();
            std::optional<Ent::Gen2::ActorStateBeingOnGround> ActorStateBeingOnGround();
            Ent::Gen2::ActorStateBeingOnGround setActorStateBeingOnGround();
            std::optional<Ent::Gen2::ActorStateBeingOnGroundFromImmersed> ActorStateBeingOnGroundFromImmersed();
            Ent::Gen2::ActorStateBeingOnGroundFromImmersed setActorStateBeingOnGroundFromImmersed();
            std::optional<Ent::Gen2::ActorStateBeingOnMount> ActorStateBeingOnMount();
            Ent::Gen2::ActorStateBeingOnMount setActorStateBeingOnMount();
            std::optional<Ent::Gen2::ActorStateBeingOnPossessedGPE> ActorStateBeingOnPossessedGPE();
            Ent::Gen2::ActorStateBeingOnPossessedGPE setActorStateBeingOnPossessedGPE();
            std::optional<Ent::Gen2::ActorStateBeingRided> ActorStateBeingRided();
            Ent::Gen2::ActorStateBeingRided setActorStateBeingRided();
            std::optional<Ent::Gen2::ActorStateBendingConstraint> ActorStateBendingConstraint();
            Ent::Gen2::ActorStateBendingConstraint setActorStateBendingConstraint();
            std::optional<Ent::Gen2::ActorStateBendingTree> ActorStateBendingTree();
            Ent::Gen2::ActorStateBendingTree setActorStateBendingTree();
            std::optional<Ent::Gen2::ActorStateBiteEntityLiving> ActorStateBiteEntityLiving();
            Ent::Gen2::ActorStateBiteEntityLiving setActorStateBiteEntityLiving();
            std::optional<Ent::Gen2::ActorStateBiteJumpOut> ActorStateBiteJumpOut();
            Ent::Gen2::ActorStateBiteJumpOut setActorStateBiteJumpOut();
            std::optional<Ent::Gen2::ActorStateBittenRegenerated> ActorStateBittenRegenerated();
            Ent::Gen2::ActorStateBittenRegenerated setActorStateBittenRegenerated();
            std::optional<Ent::Gen2::ActorStateBittenShaked> ActorStateBittenShaked();
            Ent::Gen2::ActorStateBittenShaked setActorStateBittenShaked();
            std::optional<Ent::Gen2::ActorStateBuried> ActorStateBuried();
            Ent::Gen2::ActorStateBuried setActorStateBuried();
            std::optional<Ent::Gen2::ActorStateCallingFollower> ActorStateCallingFollower();
            Ent::Gen2::ActorStateCallingFollower setActorStateCallingFollower();
            std::optional<Ent::Gen2::ActorStateCatapulted> ActorStateCatapulted();
            Ent::Gen2::ActorStateCatapulted setActorStateCatapulted();
            std::optional<Ent::Gen2::ActorStateCatapultedLand> ActorStateCatapultedLand();
            Ent::Gen2::ActorStateCatapultedLand setActorStateCatapultedLand();
            std::optional<Ent::Gen2::ActorStateChangeEnergySide> ActorStateChangeEnergySide();
            Ent::Gen2::ActorStateChangeEnergySide setActorStateChangeEnergySide();
            std::optional<Ent::Gen2::ActorStateChargeSpendLife> ActorStateChargeSpendLife();
            Ent::Gen2::ActorStateChargeSpendLife setActorStateChargeSpendLife();
            std::optional<Ent::Gen2::ActorStateConvertWithFlow> ActorStateConvertWithFlow();
            Ent::Gen2::ActorStateConvertWithFlow setActorStateConvertWithFlow();
            std::optional<Ent::Gen2::ActorStateCreature> ActorStateCreature();
            Ent::Gen2::ActorStateCreature setActorStateCreature();
            std::optional<Ent::Gen2::ActorStateDead> ActorStateDead();
            Ent::Gen2::ActorStateDead setActorStateDead();
            std::optional<Ent::Gen2::ActorStateDisabled> ActorStateDisabled();
            Ent::Gen2::ActorStateDisabled setActorStateDisabled();
            std::optional<Ent::Gen2::ActorStateDisabledIn> ActorStateDisabledIn();
            Ent::Gen2::ActorStateDisabledIn setActorStateDisabledIn();
            std::optional<Ent::Gen2::ActorStateDisabledOut> ActorStateDisabledOut();
            Ent::Gen2::ActorStateDisabledOut setActorStateDisabledOut();
            std::optional<Ent::Gen2::ActorStateDodge3D> ActorStateDodge3D();
            Ent::Gen2::ActorStateDodge3D setActorStateDodge3D();
            std::optional<Ent::Gen2::ActorStateDucking> ActorStateDucking();
            Ent::Gen2::ActorStateDucking setActorStateDucking();
            std::optional<Ent::Gen2::ActorStateEnergyShooting> ActorStateEnergyShooting();
            Ent::Gen2::ActorStateEnergyShooting setActorStateEnergyShooting();
            std::optional<Ent::Gen2::ActorStateExitingFly> ActorStateExitingFly();
            Ent::Gen2::ActorStateExitingFly setActorStateExitingFly();
            std::optional<Ent::Gen2::ActorStateFlockingAttackFlocking> ActorStateFlockingAttackFlocking();
            Ent::Gen2::ActorStateFlockingAttackFlocking setActorStateFlockingAttackFlocking();
            std::optional<Ent::Gen2::ActorStateFlockingChangingParams> ActorStateFlockingChangingParams();
            Ent::Gen2::ActorStateFlockingChangingParams setActorStateFlockingChangingParams();
            std::optional<Ent::Gen2::ActorStateFlockingIndividualSpawning> ActorStateFlockingIndividualSpawning();
            Ent::Gen2::ActorStateFlockingIndividualSpawning setActorStateFlockingIndividualSpawning();
            std::optional<Ent::Gen2::ActorStateFlockingLiving> ActorStateFlockingLiving();
            Ent::Gen2::ActorStateFlockingLiving setActorStateFlockingLiving();
            std::optional<Ent::Gen2::ActorStateFlockingRigidbodyBeingActive> ActorStateFlockingRigidbodyBeingActive();
            Ent::Gen2::ActorStateFlockingRigidbodyBeingActive setActorStateFlockingRigidbodyBeingActive();
            std::optional<Ent::Gen2::ActorStateFluidSlowDown> ActorStateFluidSlowDown();
            Ent::Gen2::ActorStateFluidSlowDown setActorStateFluidSlowDown();
            std::optional<Ent::Gen2::ActorStateForceAgainstSlope> ActorStateForceAgainstSlope();
            Ent::Gen2::ActorStateForceAgainstSlope setActorStateForceAgainstSlope();
            std::optional<Ent::Gen2::ActorStateHasNoBody> ActorStateHasNoBody();
            Ent::Gen2::ActorStateHasNoBody setActorStateHasNoBody();
            std::optional<Ent::Gen2::ActorStateHeld> ActorStateHeld();
            Ent::Gen2::ActorStateHeld setActorStateHeld();
            std::optional<Ent::Gen2::ActorStateHitEnergyWall> ActorStateHitEnergyWall();
            Ent::Gen2::ActorStateHitEnergyWall setActorStateHitEnergyWall();
            std::optional<Ent::Gen2::ActorStateHoldingItem> ActorStateHoldingItem();
            Ent::Gen2::ActorStateHoldingItem setActorStateHoldingItem();
            std::optional<Ent::Gen2::ActorStateIKConstraint> ActorStateIKConstraint();
            Ent::Gen2::ActorStateIKConstraint setActorStateIKConstraint();
            std::optional<Ent::Gen2::ActorStateInvincible> ActorStateInvincible();
            Ent::Gen2::ActorStateInvincible setActorStateInvincible();
            std::optional<Ent::Gen2::ActorStateLeavingLava> ActorStateLeavingLava();
            Ent::Gen2::ActorStateLeavingLava setActorStateLeavingLava();
            std::optional<Ent::Gen2::ActorStateLosingOxygen> ActorStateLosingOxygen();
            Ent::Gen2::ActorStateLosingOxygen setActorStateLosingOxygen();
            std::optional<Ent::Gen2::ActorStateMeetingLava> ActorStateMeetingLava();
            Ent::Gen2::ActorStateMeetingLava setActorStateMeetingLava();
            std::optional<Ent::Gen2::ActorStateMoveAlongBezier> ActorStateMoveAlongBezier();
            Ent::Gen2::ActorStateMoveAlongBezier setActorStateMoveAlongBezier();
            std::optional<Ent::Gen2::ActorStateMovingClamber> ActorStateMovingClamber();
            Ent::Gen2::ActorStateMovingClamber setActorStateMovingClamber();
            std::optional<Ent::Gen2::ActorStateMovingDive> ActorStateMovingDive();
            Ent::Gen2::ActorStateMovingDive setActorStateMovingDive();
            std::optional<Ent::Gen2::ActorStateMovingFall> ActorStateMovingFall();
            Ent::Gen2::ActorStateMovingFall setActorStateMovingFall();
            std::optional<Ent::Gen2::ActorStateMovingFly> ActorStateMovingFly();
            Ent::Gen2::ActorStateMovingFly setActorStateMovingFly();
            std::optional<Ent::Gen2::ActorStateMovingProne> ActorStateMovingProne();
            Ent::Gen2::ActorStateMovingProne setActorStateMovingProne();
            std::optional<Ent::Gen2::ActorStateMovingRide> ActorStateMovingRide();
            Ent::Gen2::ActorStateMovingRide setActorStateMovingRide();
            std::optional<Ent::Gen2::ActorStateMovingStandUp> ActorStateMovingStandUp();
            Ent::Gen2::ActorStateMovingStandUp setActorStateMovingStandUp();
            std::optional<Ent::Gen2::ActorStateMovingSwim> ActorStateMovingSwim();
            Ent::Gen2::ActorStateMovingSwim setActorStateMovingSwim();
            std::optional<Ent::Gen2::ActorStateNavigationMesh> ActorStateNavigationMesh();
            Ent::Gen2::ActorStateNavigationMesh setActorStateNavigationMesh();
            std::optional<Ent::Gen2::ActorStatePossessFlocking> ActorStatePossessFlocking();
            Ent::Gen2::ActorStatePossessFlocking setActorStatePossessFlocking();
            std::optional<Ent::Gen2::ActorStatePossessGPE> ActorStatePossessGPE();
            Ent::Gen2::ActorStatePossessGPE setActorStatePossessGPE();
            std::optional<Ent::Gen2::ActorStateReactingLava> ActorStateReactingLava();
            Ent::Gen2::ActorStateReactingLava setActorStateReactingLava();
            std::optional<Ent::Gen2::ActorStateRecover> ActorStateRecover();
            Ent::Gen2::ActorStateRecover setActorStateRecover();
            std::optional<Ent::Gen2::ActorStateRequestingHealing> ActorStateRequestingHealing();
            Ent::Gen2::ActorStateRequestingHealing setActorStateRequestingHealing();
            std::optional<Ent::Gen2::ActorStateRequestingWaiting> ActorStateRequestingWaiting();
            Ent::Gen2::ActorStateRequestingWaiting setActorStateRequestingWaiting();
            std::optional<Ent::Gen2::ActorStateScreaming> ActorStateScreaming();
            Ent::Gen2::ActorStateScreaming setActorStateScreaming();
            std::optional<Ent::Gen2::ActorStateSendMission> ActorStateSendMission();
            Ent::Gen2::ActorStateSendMission setActorStateSendMission();
            std::optional<Ent::Gen2::ActorStateShamanItemLiving> ActorStateShamanItemLiving();
            Ent::Gen2::ActorStateShamanItemLiving setActorStateShamanItemLiving();
            std::optional<Ent::Gen2::ActorStateShamanItemPartState> ActorStateShamanItemPartState();
            Ent::Gen2::ActorStateShamanItemPartState setActorStateShamanItemPartState();
            std::optional<Ent::Gen2::ActorStateShapeshift> ActorStateShapeshift();
            Ent::Gen2::ActorStateShapeshift setActorStateShapeshift();
            std::optional<Ent::Gen2::ActorStateShootingFlow> ActorStateShootingFlow();
            Ent::Gen2::ActorStateShootingFlow setActorStateShootingFlow();
            std::optional<Ent::Gen2::ActorStateSink> ActorStateSink();
            Ent::Gen2::ActorStateSink setActorStateSink();
            std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpRequest> ActorStateSkeletonPartPickUpRequest();
            Ent::Gen2::ActorStateSkeletonPartPickUpRequest setActorStateSkeletonPartPickUpRequest();
            std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpState> ActorStateSkeletonPartPickUpState();
            Ent::Gen2::ActorStateSkeletonPartPickUpState setActorStateSkeletonPartPickUpState();
            std::optional<Ent::Gen2::ActorStateSleeping> ActorStateSleeping();
            Ent::Gen2::ActorStateSleeping setActorStateSleeping();
            std::optional<Ent::Gen2::ActorStateSlope> ActorStateSlope();
            Ent::Gen2::ActorStateSlope setActorStateSlope();
            std::optional<Ent::Gen2::ActorStateSoulRespawn> ActorStateSoulRespawn();
            Ent::Gen2::ActorStateSoulRespawn setActorStateSoulRespawn();
            std::optional<Ent::Gen2::ActorStateSoulWaitingToRespawn> ActorStateSoulWaitingToRespawn();
            Ent::Gen2::ActorStateSoulWaitingToRespawn setActorStateSoulWaitingToRespawn();
            std::optional<Ent::Gen2::ActorStateSpeedMultiplier> ActorStateSpeedMultiplier();
            Ent::Gen2::ActorStateSpeedMultiplier setActorStateSpeedMultiplier();
            std::optional<Ent::Gen2::ActorStateStopAttitudeAggressive> ActorStateStopAttitudeAggressive();
            Ent::Gen2::ActorStateStopAttitudeAggressive setActorStateStopAttitudeAggressive();
            std::optional<Ent::Gen2::ActorStateTaunting> ActorStateTaunting();
            Ent::Gen2::ActorStateTaunting setActorStateTaunting();
            std::optional<Ent::Gen2::ActorStateTeleport> ActorStateTeleport();
            Ent::Gen2::ActorStateTeleport setActorStateTeleport();
            std::optional<Ent::Gen2::ActorStateTeleportToTarget> ActorStateTeleportToTarget();
            Ent::Gen2::ActorStateTeleportToTarget setActorStateTeleportToTarget();
            std::optional<Ent::Gen2::ActorStateTeleportWhileMoving> ActorStateTeleportWhileMoving();
            Ent::Gen2::ActorStateTeleportWhileMoving setActorStateTeleportWhileMoving();
            std::optional<Ent::Gen2::ActorStateTryEquipShamanStaff> ActorStateTryEquipShamanStaff();
            Ent::Gen2::ActorStateTryEquipShamanStaff setActorStateTryEquipShamanStaff();
            std::optional<Ent::Gen2::ActorStateTryUpgradeShamanStaff> ActorStateTryUpgradeShamanStaff();
            Ent::Gen2::ActorStateTryUpgradeShamanStaff setActorStateTryUpgradeShamanStaff();
            std::optional<Ent::Gen2::EntityStateAboutToBeHatched> EntityStateAboutToBeHatched();
            Ent::Gen2::EntityStateAboutToBeHatched setEntityStateAboutToBeHatched();
            std::optional<Ent::Gen2::EntityStateAerialJump> EntityStateAerialJump();
            Ent::Gen2::EntityStateAerialJump setEntityStateAerialJump();
            std::optional<Ent::Gen2::EntityStateAimAt> EntityStateAimAt();
            Ent::Gen2::EntityStateAimAt setEntityStateAimAt();
            std::optional<Ent::Gen2::EntityStateAirControl> EntityStateAirControl();
            Ent::Gen2::EntityStateAirControl setEntityStateAirControl();
            std::optional<Ent::Gen2::EntityStateApplyExtraLife> EntityStateApplyExtraLife();
            Ent::Gen2::EntityStateApplyExtraLife setEntityStateApplyExtraLife();
            std::optional<Ent::Gen2::EntityStateAskStaffGuide> EntityStateAskStaffGuide();
            Ent::Gen2::EntityStateAskStaffGuide setEntityStateAskStaffGuide();
            std::optional<Ent::Gen2::EntityStateAttackDive> EntityStateAttackDive();
            Ent::Gen2::EntityStateAttackDive setEntityStateAttackDive();
            std::optional<Ent::Gen2::EntityStateAttitudeGroggy> EntityStateAttitudeGroggy();
            Ent::Gen2::EntityStateAttitudeGroggy setEntityStateAttitudeGroggy();
            std::optional<Ent::Gen2::EntityStateBackwardDodge> EntityStateBackwardDodge();
            Ent::Gen2::EntityStateBackwardDodge setEntityStateBackwardDodge();
            std::optional<Ent::Gen2::EntityStateBackwardLand> EntityStateBackwardLand();
            Ent::Gen2::EntityStateBackwardLand setEntityStateBackwardLand();
            std::optional<Ent::Gen2::EntityStateBeingBlockedByVine> EntityStateBeingBlockedByVine();
            Ent::Gen2::EntityStateBeingBlockedByVine setEntityStateBeingBlockedByVine();
            std::optional<Ent::Gen2::EntityStateBeingInReeds> EntityStateBeingInReeds();
            Ent::Gen2::EntityStateBeingInReeds setEntityStateBeingInReeds();
            std::optional<Ent::Gen2::EntityStateBeingLinked> EntityStateBeingLinked();
            Ent::Gen2::EntityStateBeingLinked setEntityStateBeingLinked();
            std::optional<Ent::Gen2::EntityStateBeingOnSlope> EntityStateBeingOnSlope();
            Ent::Gen2::EntityStateBeingOnSlope setEntityStateBeingOnSlope();
            std::optional<Ent::Gen2::EntityStateBeingOnSpike> EntityStateBeingOnSpike();
            Ent::Gen2::EntityStateBeingOnSpike setEntityStateBeingOnSpike();
            std::optional<Ent::Gen2::EntityStateBite> EntityStateBite();
            Ent::Gen2::EntityStateBite setEntityStateBite();
            std::optional<Ent::Gen2::EntityStateBiteAttack> EntityStateBiteAttack();
            Ent::Gen2::EntityStateBiteAttack setEntityStateBiteAttack();
            std::optional<Ent::Gen2::EntityStateBiteIn> EntityStateBiteIn();
            Ent::Gen2::EntityStateBiteIn setEntityStateBiteIn();
            std::optional<Ent::Gen2::EntityStateBiteOut> EntityStateBiteOut();
            Ent::Gen2::EntityStateBiteOut setEntityStateBiteOut();
            std::optional<Ent::Gen2::EntityStateBitten> EntityStateBitten();
            Ent::Gen2::EntityStateBitten setEntityStateBitten();
            std::optional<Ent::Gen2::EntityStateBittenDefense> EntityStateBittenDefense();
            Ent::Gen2::EntityStateBittenDefense setEntityStateBittenDefense();
            std::optional<Ent::Gen2::EntityStateBoidsHomePos> EntityStateBoidsHomePos();
            Ent::Gen2::EntityStateBoidsHomePos setEntityStateBoidsHomePos();
            std::optional<Ent::Gen2::EntityStateBounce> EntityStateBounce();
            Ent::Gen2::EntityStateBounce setEntityStateBounce();
            std::optional<Ent::Gen2::EntityStateBounceLand> EntityStateBounceLand();
            Ent::Gen2::EntityStateBounceLand setEntityStateBounceLand();
            std::optional<Ent::Gen2::EntityStateBreakableBreaking> EntityStateBreakableBreaking();
            Ent::Gen2::EntityStateBreakableBreaking setEntityStateBreakableBreaking();
            std::optional<Ent::Gen2::EntityStateBreakableBroken> EntityStateBreakableBroken();
            Ent::Gen2::EntityStateBreakableBroken setEntityStateBreakableBroken();
            std::optional<Ent::Gen2::EntityStateBreakableEntire> EntityStateBreakableEntire();
            Ent::Gen2::EntityStateBreakableEntire setEntityStateBreakableEntire();
            std::optional<Ent::Gen2::EntityStateBridgeAttached> EntityStateBridgeAttached();
            Ent::Gen2::EntityStateBridgeAttached setEntityStateBridgeAttached();
            std::optional<Ent::Gen2::EntityStateBridgeAttracted> EntityStateBridgeAttracted();
            Ent::Gen2::EntityStateBridgeAttracted setEntityStateBridgeAttracted();
            std::optional<Ent::Gen2::EntityStateBridgeBeingControlled> EntityStateBridgeBeingControlled();
            Ent::Gen2::EntityStateBridgeBeingControlled setEntityStateBridgeBeingControlled();
            std::optional<Ent::Gen2::EntityStateCallAndMountSpiritAnimal> EntityStateCallAndMountSpiritAnimal();
            Ent::Gen2::EntityStateCallAndMountSpiritAnimal setEntityStateCallAndMountSpiritAnimal();
            std::optional<Ent::Gen2::EntityStateCanNotBePerceived> EntityStateCanNotBePerceived();
            Ent::Gen2::EntityStateCanNotBePerceived setEntityStateCanNotBePerceived();
            std::optional<Ent::Gen2::EntityStateChargeMode> EntityStateChargeMode();
            Ent::Gen2::EntityStateChargeMode setEntityStateChargeMode();
            std::optional<Ent::Gen2::EntityStateChargedJump> EntityStateChargedJump();
            Ent::Gen2::EntityStateChargedJump setEntityStateChargedJump();
            std::optional<Ent::Gen2::EntityStateChargingJump> EntityStateChargingJump();
            Ent::Gen2::EntityStateChargingJump setEntityStateChargingJump();
            std::optional<Ent::Gen2::EntityStateCinematicCompleted> EntityStateCinematicCompleted();
            Ent::Gen2::EntityStateCinematicCompleted setEntityStateCinematicCompleted();
            std::optional<Ent::Gen2::EntityStateCinematicReady> EntityStateCinematicReady();
            Ent::Gen2::EntityStateCinematicReady setEntityStateCinematicReady();
            std::optional<Ent::Gen2::EntityStateClassicDodge> EntityStateClassicDodge();
            Ent::Gen2::EntityStateClassicDodge setEntityStateClassicDodge();
            std::optional<Ent::Gen2::EntityStateClassicLand> EntityStateClassicLand();
            Ent::Gen2::EntityStateClassicLand setEntityStateClassicLand();
            std::optional<Ent::Gen2::EntityStateClimbWaterfall> EntityStateClimbWaterfall();
            Ent::Gen2::EntityStateClimbWaterfall setEntityStateClimbWaterfall();
            std::optional<Ent::Gen2::EntityStateClimbWaterfallImpulse> EntityStateClimbWaterfallImpulse();
            Ent::Gen2::EntityStateClimbWaterfallImpulse setEntityStateClimbWaterfallImpulse();
            std::optional<Ent::Gen2::EntityStateCollectVertebrae> EntityStateCollectVertebrae();
            Ent::Gen2::EntityStateCollectVertebrae setEntityStateCollectVertebrae();
            std::optional<Ent::Gen2::EntityStateCombat> EntityStateCombat();
            Ent::Gen2::EntityStateCombat setEntityStateCombat();
            std::optional<Ent::Gen2::EntityStateConstrainedInput> EntityStateConstrainedInput();
            Ent::Gen2::EntityStateConstrainedInput setEntityStateConstrainedInput();
            std::optional<Ent::Gen2::EntityStateConstrainedMove> EntityStateConstrainedMove();
            Ent::Gen2::EntityStateConstrainedMove setEntityStateConstrainedMove();
            std::optional<Ent::Gen2::EntityStateControlGPE> EntityStateControlGPE();
            Ent::Gen2::EntityStateControlGPE setEntityStateControlGPE();
            std::optional<Ent::Gen2::EntityStateCreatureHatching> EntityStateCreatureHatching();
            Ent::Gen2::EntityStateCreatureHatching setEntityStateCreatureHatching();
            std::optional<Ent::Gen2::EntityStateCreatureProfile> EntityStateCreatureProfile();
            Ent::Gen2::EntityStateCreatureProfile setEntityStateCreatureProfile();
            std::optional<Ent::Gen2::EntityStateDamageLand> EntityStateDamageLand();
            Ent::Gen2::EntityStateDamageLand setEntityStateDamageLand();
            std::optional<Ent::Gen2::EntityStateDeathLand> EntityStateDeathLand();
            Ent::Gen2::EntityStateDeathLand setEntityStateDeathLand();
            std::optional<Ent::Gen2::EntityStateDisablePerceptionRequest> EntityStateDisablePerceptionRequest();
            Ent::Gen2::EntityStateDisablePerceptionRequest setEntityStateDisablePerceptionRequest();
            std::optional<Ent::Gen2::EntityStateDisabledVertebrae> EntityStateDisabledVertebrae();
            Ent::Gen2::EntityStateDisabledVertebrae setEntityStateDisabledVertebrae();
            std::optional<Ent::Gen2::EntityStateDisguise> EntityStateDisguise();
            Ent::Gen2::EntityStateDisguise setEntityStateDisguise();
            std::optional<Ent::Gen2::EntityStateDisplayHatchingCost> EntityStateDisplayHatchingCost();
            Ent::Gen2::EntityStateDisplayHatchingCost setEntityStateDisplayHatchingCost();
            std::optional<Ent::Gen2::EntityStateDodgeCooldown> EntityStateDodgeCooldown();
            Ent::Gen2::EntityStateDodgeCooldown setEntityStateDodgeCooldown();
            std::optional<Ent::Gen2::EntityStateEjectedLand> EntityStateEjectedLand();
            Ent::Gen2::EntityStateEjectedLand setEntityStateEjectedLand();
            std::optional<Ent::Gen2::EntityStateEnergyRootAbortHatching> EntityStateEnergyRootAbortHatching();
            Ent::Gen2::EntityStateEnergyRootAbortHatching setEntityStateEnergyRootAbortHatching();
            std::optional<Ent::Gen2::EntityStateEnergyRootHatching> EntityStateEnergyRootHatching();
            Ent::Gen2::EntityStateEnergyRootHatching setEntityStateEnergyRootHatching();
            std::optional<Ent::Gen2::EntityStateEnergySide> EntityStateEnergySide();
            Ent::Gen2::EntityStateEnergySide setEntityStateEnergySide();
            std::optional<Ent::Gen2::EntityStateEnergySpoutState> EntityStateEnergySpoutState();
            Ent::Gen2::EntityStateEnergySpoutState setEntityStateEnergySpoutState();
            std::optional<Ent::Gen2::EntityStateExtraLife> EntityStateExtraLife();
            Ent::Gen2::EntityStateExtraLife setEntityStateExtraLife();
            std::optional<Ent::Gen2::EntityStateFailingOrder> EntityStateFailingOrder();
            Ent::Gen2::EntityStateFailingOrder setEntityStateFailingOrder();
            std::optional<Ent::Gen2::EntityStateFall> EntityStateFall();
            Ent::Gen2::EntityStateFall setEntityStateFall();
            std::optional<Ent::Gen2::EntityStateFallDying> EntityStateFallDying();
            Ent::Gen2::EntityStateFallDying setEntityStateFallDying();
            std::optional<Ent::Gen2::EntityStateFallInjured> EntityStateFallInjured();
            Ent::Gen2::EntityStateFallInjured setEntityStateFallInjured();
            std::optional<Ent::Gen2::EntityStateFallSafe> EntityStateFallSafe();
            Ent::Gen2::EntityStateFallSafe setEntityStateFallSafe();
            std::optional<Ent::Gen2::EntityStateFastRun> EntityStateFastRun();
            Ent::Gen2::EntityStateFastRun setEntityStateFastRun();
            std::optional<Ent::Gen2::EntityStateForceCanBeTargeted> EntityStateForceCanBeTargeted();
            Ent::Gen2::EntityStateForceCanBeTargeted setEntityStateForceCanBeTargeted();
            std::optional<Ent::Gen2::EntityStateGrab> EntityStateGrab();
            Ent::Gen2::EntityStateGrab setEntityStateGrab();
            std::optional<Ent::Gen2::EntityStateGrabAttack> EntityStateGrabAttack();
            Ent::Gen2::EntityStateGrabAttack setEntityStateGrabAttack();
            std::optional<Ent::Gen2::EntityStateGrabIn> EntityStateGrabIn();
            Ent::Gen2::EntityStateGrabIn setEntityStateGrabIn();
            std::optional<Ent::Gen2::EntityStateGrabOut> EntityStateGrabOut();
            Ent::Gen2::EntityStateGrabOut setEntityStateGrabOut();
            std::optional<Ent::Gen2::EntityStateGrabbed> EntityStateGrabbed();
            Ent::Gen2::EntityStateGrabbed setEntityStateGrabbed();
            std::optional<Ent::Gen2::EntityStateGrabbedIn> EntityStateGrabbedIn();
            Ent::Gen2::EntityStateGrabbedIn setEntityStateGrabbedIn();
            std::optional<Ent::Gen2::EntityStateGrabbedOut> EntityStateGrabbedOut();
            Ent::Gen2::EntityStateGrabbedOut setEntityStateGrabbedOut();
            std::optional<Ent::Gen2::EntityStateGrasp> EntityStateGrasp();
            Ent::Gen2::EntityStateGrasp setEntityStateGrasp();
            std::optional<Ent::Gen2::EntityStateGroundedJump> EntityStateGroundedJump();
            Ent::Gen2::EntityStateGroundedJump setEntityStateGroundedJump();
            std::optional<Ent::Gen2::EntityStateHide> EntityStateHide();
            Ent::Gen2::EntityStateHide setEntityStateHide();
            std::optional<Ent::Gen2::EntityStateHideIn> EntityStateHideIn();
            Ent::Gen2::EntityStateHideIn setEntityStateHideIn();
            std::optional<Ent::Gen2::EntityStateHideOut> EntityStateHideOut();
            Ent::Gen2::EntityStateHideOut setEntityStateHideOut();
            std::optional<Ent::Gen2::EntityStateHintFull> EntityStateHintFull();
            Ent::Gen2::EntityStateHintFull setEntityStateHintFull();
            std::optional<Ent::Gen2::EntityStateHintLight> EntityStateHintLight();
            Ent::Gen2::EntityStateHintLight setEntityStateHintLight();
            std::optional<Ent::Gen2::EntityStateHintNone> EntityStateHintNone();
            Ent::Gen2::EntityStateHintNone setEntityStateHintNone();
            std::optional<Ent::Gen2::EntityStateHitWall> EntityStateHitWall();
            Ent::Gen2::EntityStateHitWall setEntityStateHitWall();
            std::optional<Ent::Gen2::EntityStateHoldingStaffVertebras> EntityStateHoldingStaffVertebras();
            Ent::Gen2::EntityStateHoldingStaffVertebras setEntityStateHoldingStaffVertebras();
            std::optional<Ent::Gen2::EntityStateImmersedJump> EntityStateImmersedJump();
            Ent::Gen2::EntityStateImmersedJump setEntityStateImmersedJump();
            std::optional<Ent::Gen2::EntityStateInVertebraeArea> EntityStateInVertebraeArea();
            Ent::Gen2::EntityStateInVertebraeArea setEntityStateInVertebraeArea();
            std::optional<Ent::Gen2::EntityStateIncapacitated> EntityStateIncapacitated();
            Ent::Gen2::EntityStateIncapacitated setEntityStateIncapacitated();
            std::optional<Ent::Gen2::EntityStateInconvertible> EntityStateInconvertible();
            Ent::Gen2::EntityStateInconvertible setEntityStateInconvertible();
            std::optional<Ent::Gen2::EntityStateInjured> EntityStateInjured();
            Ent::Gen2::EntityStateInjured setEntityStateInjured();
            std::optional<Ent::Gen2::EntityStateInteractedGPE> EntityStateInteractedGPE();
            Ent::Gen2::EntityStateInteractedGPE setEntityStateInteractedGPE();
            std::optional<Ent::Gen2::EntityStateJumpHeightMultiplier> EntityStateJumpHeightMultiplier();
            Ent::Gen2::EntityStateJumpHeightMultiplier setEntityStateJumpHeightMultiplier();
            std::optional<Ent::Gen2::EntityStateJustStarted> EntityStateJustStarted();
            Ent::Gen2::EntityStateJustStarted setEntityStateJustStarted();
            std::optional<Ent::Gen2::EntityStateLateralDodge> EntityStateLateralDodge();
            Ent::Gen2::EntityStateLateralDodge setEntityStateLateralDodge();
            std::optional<Ent::Gen2::EntityStateLateralLand> EntityStateLateralLand();
            Ent::Gen2::EntityStateLateralLand setEntityStateLateralLand();
            std::optional<Ent::Gen2::EntityStateManageChildEntityPool> EntityStateManageChildEntityPool();
            Ent::Gen2::EntityStateManageChildEntityPool setEntityStateManageChildEntityPool();
            std::optional<Ent::Gen2::EntityStateMask> EntityStateMask();
            Ent::Gen2::EntityStateMask setEntityStateMask();
            std::optional<Ent::Gen2::EntityStateMeditateToInteract> EntityStateMeditateToInteract();
            Ent::Gen2::EntityStateMeditateToInteract setEntityStateMeditateToInteract();
            std::optional<Ent::Gen2::EntityStateMineRespawning> EntityStateMineRespawning();
            Ent::Gen2::EntityStateMineRespawning setEntityStateMineRespawning();
            std::optional<Ent::Gen2::EntityStateMineScaling> EntityStateMineScaling();
            Ent::Gen2::EntityStateMineScaling setEntityStateMineScaling();
            std::optional<Ent::Gen2::EntityStateMotionConstrained> EntityStateMotionConstrained();
            Ent::Gen2::EntityStateMotionConstrained setEntityStateMotionConstrained();
            std::optional<Ent::Gen2::EntityStateMotionConstrainedLand> EntityStateMotionConstrainedLand();
            Ent::Gen2::EntityStateMotionConstrainedLand setEntityStateMotionConstrainedLand();
            std::optional<Ent::Gen2::EntityStateMoveOnOffMeshLink> EntityStateMoveOnOffMeshLink();
            Ent::Gen2::EntityStateMoveOnOffMeshLink setEntityStateMoveOnOffMeshLink();
            std::optional<Ent::Gen2::EntityStateOrderingAttack> EntityStateOrderingAttack();
            Ent::Gen2::EntityStateOrderingAttack setEntityStateOrderingAttack();
            std::optional<Ent::Gen2::EntityStateOrientedDrift> EntityStateOrientedDrift();
            Ent::Gen2::EntityStateOrientedDrift setEntityStateOrientedDrift();
            std::optional<Ent::Gen2::EntityStateParried> EntityStateParried();
            Ent::Gen2::EntityStateParried setEntityStateParried();
            std::optional<Ent::Gen2::EntityStateParry> EntityStateParry();
            Ent::Gen2::EntityStateParry setEntityStateParry();
            std::optional<Ent::Gen2::EntityStateParryCooldown> EntityStateParryCooldown();
            Ent::Gen2::EntityStateParryCooldown setEntityStateParryCooldown();
            std::optional<Ent::Gen2::EntityStatePhysicsIdle> EntityStatePhysicsIdle();
            Ent::Gen2::EntityStatePhysicsIdle setEntityStatePhysicsIdle();
            std::optional<Ent::Gen2::EntityStatePhysicsMove> EntityStatePhysicsMove();
            Ent::Gen2::EntityStatePhysicsMove setEntityStatePhysicsMove();
            std::optional<Ent::Gen2::EntityStatePickableDistributor> EntityStatePickableDistributor();
            Ent::Gen2::EntityStatePickableDistributor setEntityStatePickableDistributor();
            std::optional<Ent::Gen2::EntityStatePlayer> EntityStatePlayer();
            Ent::Gen2::EntityStatePlayer setEntityStatePlayer();
            std::optional<Ent::Gen2::EntityStatePlungeLand> EntityStatePlungeLand();
            Ent::Gen2::EntityStatePlungeLand setEntityStatePlungeLand();
            std::optional<Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh> EntityStatePrepareToHoldingOnToNavigationMesh();
            Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh setEntityStatePrepareToHoldingOnToNavigationMesh();
            std::optional<Ent::Gen2::EntityStateRaise> EntityStateRaise();
            Ent::Gen2::EntityStateRaise setEntityStateRaise();
            std::optional<Ent::Gen2::EntityStateReadyToGiveOrder> EntityStateReadyToGiveOrder();
            Ent::Gen2::EntityStateReadyToGiveOrder setEntityStateReadyToGiveOrder();
            std::optional<Ent::Gen2::EntityStateRecoverLand> EntityStateRecoverLand();
            Ent::Gen2::EntityStateRecoverLand setEntityStateRecoverLand();
            std::optional<Ent::Gen2::EntityStateRegainCapacity> EntityStateRegainCapacity();
            Ent::Gen2::EntityStateRegainCapacity setEntityStateRegainCapacity();
            std::optional<Ent::Gen2::EntityStateReserveMountSlots> EntityStateReserveMountSlots();
            Ent::Gen2::EntityStateReserveMountSlots setEntityStateReserveMountSlots();
            std::optional<Ent::Gen2::EntityStateRespawn> EntityStateRespawn();
            Ent::Gen2::EntityStateRespawn setEntityStateRespawn();
            std::optional<Ent::Gen2::EntityStateRespawnability> EntityStateRespawnability();
            Ent::Gen2::EntityStateRespawnability setEntityStateRespawnability();
            std::optional<Ent::Gen2::EntityStateRevive> EntityStateRevive();
            Ent::Gen2::EntityStateRevive setEntityStateRevive();
            std::optional<Ent::Gen2::EntityStateSavePointActivated> EntityStateSavePointActivated();
            Ent::Gen2::EntityStateSavePointActivated setEntityStateSavePointActivated();
            std::optional<Ent::Gen2::EntityStateSetSavePoint> EntityStateSetSavePoint();
            Ent::Gen2::EntityStateSetSavePoint setEntityStateSetSavePoint();
            std::optional<Ent::Gen2::EntityStateShootHatchingEnergy> EntityStateShootHatchingEnergy();
            Ent::Gen2::EntityStateShootHatchingEnergy setEntityStateShootHatchingEnergy();
            std::optional<Ent::Gen2::EntityStateSlowMotion> EntityStateSlowMotion();
            Ent::Gen2::EntityStateSlowMotion setEntityStateSlowMotion();
            std::optional<Ent::Gen2::EntityStateSnappedToHatchingTarget> EntityStateSnappedToHatchingTarget();
            Ent::Gen2::EntityStateSnappedToHatchingTarget setEntityStateSnappedToHatchingTarget();
            std::optional<Ent::Gen2::EntityStateSoftCollide> EntityStateSoftCollide();
            Ent::Gen2::EntityStateSoftCollide setEntityStateSoftCollide();
            std::optional<Ent::Gen2::EntityStateSpeedLimiter> EntityStateSpeedLimiter();
            Ent::Gen2::EntityStateSpeedLimiter setEntityStateSpeedLimiter();
            std::optional<Ent::Gen2::EntityStateSpiritAnimalBeingCalled> EntityStateSpiritAnimalBeingCalled();
            Ent::Gen2::EntityStateSpiritAnimalBeingCalled setEntityStateSpiritAnimalBeingCalled();
            std::optional<Ent::Gen2::EntityStateSpiritAnimalFleshForm> EntityStateSpiritAnimalFleshForm();
            Ent::Gen2::EntityStateSpiritAnimalFleshForm setEntityStateSpiritAnimalFleshForm();
            std::optional<Ent::Gen2::EntityStateSpiritAnimalSoulForm> EntityStateSpiritAnimalSoulForm();
            Ent::Gen2::EntityStateSpiritAnimalSoulForm setEntityStateSpiritAnimalSoulForm();
            std::optional<Ent::Gen2::EntityStateSpiritAttack> EntityStateSpiritAttack();
            Ent::Gen2::EntityStateSpiritAttack setEntityStateSpiritAttack();
            std::optional<Ent::Gen2::EntityStateSpiritAttacked> EntityStateSpiritAttacked();
            Ent::Gen2::EntityStateSpiritAttacked setEntityStateSpiritAttacked();
            std::optional<Ent::Gen2::EntityStateSpiritShrineDisabled> EntityStateSpiritShrineDisabled();
            Ent::Gen2::EntityStateSpiritShrineDisabled setEntityStateSpiritShrineDisabled();
            std::optional<Ent::Gen2::EntityStateSpiritShrineEnabled> EntityStateSpiritShrineEnabled();
            Ent::Gen2::EntityStateSpiritShrineEnabled setEntityStateSpiritShrineEnabled();
            std::optional<Ent::Gen2::EntityStateStaffOwnedVertebras> EntityStateStaffOwnedVertebras();
            Ent::Gen2::EntityStateStaffOwnedVertebras setEntityStateStaffOwnedVertebras();
            std::optional<Ent::Gen2::EntityStateStaffVertebrasAutoRefill> EntityStateStaffVertebrasAutoRefill();
            Ent::Gen2::EntityStateStaffVertebrasAutoRefill setEntityStateStaffVertebrasAutoRefill();
            std::optional<Ent::Gen2::EntityStateStalactiteFallen> EntityStateStalactiteFallen();
            Ent::Gen2::EntityStateStalactiteFallen setEntityStateStalactiteFallen();
            std::optional<Ent::Gen2::EntityStateStalactiteReadyToFall> EntityStateStalactiteReadyToFall();
            Ent::Gen2::EntityStateStalactiteReadyToFall setEntityStateStalactiteReadyToFall();
            std::optional<Ent::Gen2::EntityStateStickedLand> EntityStateStickedLand();
            Ent::Gen2::EntityStateStickedLand setEntityStateStickedLand();
            std::optional<Ent::Gen2::EntityStateStrafeDodge> EntityStateStrafeDodge();
            Ent::Gen2::EntityStateStrafeDodge setEntityStateStrafeDodge();
            std::optional<Ent::Gen2::EntityStateStrongAttack> EntityStateStrongAttack();
            Ent::Gen2::EntityStateStrongAttack setEntityStateStrongAttack();
            std::optional<Ent::Gen2::EntityStateStrongAttackCharged> EntityStateStrongAttackCharged();
            Ent::Gen2::EntityStateStrongAttackCharged setEntityStateStrongAttackCharged();
            std::optional<Ent::Gen2::EntityStateStrongAttackCharging> EntityStateStrongAttackCharging();
            Ent::Gen2::EntityStateStrongAttackCharging setEntityStateStrongAttackCharging();
            std::optional<Ent::Gen2::EntityStateStrongAttackJumped> EntityStateStrongAttackJumped();
            Ent::Gen2::EntityStateStrongAttackJumped setEntityStateStrongAttackJumped();
            std::optional<Ent::Gen2::EntityStateTakeDamageOnMount> EntityStateTakeDamageOnMount();
            Ent::Gen2::EntityStateTakeDamageOnMount setEntityStateTakeDamageOnMount();
            std::optional<Ent::Gen2::EntityStateTooDeep> EntityStateTooDeep();
            Ent::Gen2::EntityStateTooDeep setEntityStateTooDeep();
            std::optional<Ent::Gen2::EntityStateTreeMetamorphosis> EntityStateTreeMetamorphosis();
            Ent::Gen2::EntityStateTreeMetamorphosis setEntityStateTreeMetamorphosis();
            std::optional<Ent::Gen2::EntityStateTreeMetamorphosisUsingScale> EntityStateTreeMetamorphosisUsingScale();
            Ent::Gen2::EntityStateTreeMetamorphosisUsingScale setEntityStateTreeMetamorphosisUsingScale();
            std::optional<Ent::Gen2::EntityStateTreeSwitchTransition> EntityStateTreeSwitchTransition();
            Ent::Gen2::EntityStateTreeSwitchTransition setEntityStateTreeSwitchTransition();
            std::optional<Ent::Gen2::EntityStateTreeTurretTargeting> EntityStateTreeTurretTargeting();
            Ent::Gen2::EntityStateTreeTurretTargeting setEntityStateTreeTurretTargeting();
            std::optional<Ent::Gen2::EntityStateTriggerBeamTargetEvent> EntityStateTriggerBeamTargetEvent();
            Ent::Gen2::EntityStateTriggerBeamTargetEvent setEntityStateTriggerBeamTargetEvent();
            std::optional<Ent::Gen2::EntityStateTryUnmount> EntityStateTryUnmount();
            Ent::Gen2::EntityStateTryUnmount setEntityStateTryUnmount();
            std::optional<Ent::Gen2::EntityStateUndergroundCavity> EntityStateUndergroundCavity();
            Ent::Gen2::EntityStateUndergroundCavity setEntityStateUndergroundCavity();
            std::optional<Ent::Gen2::EntityStateUseAsActiveCheckpoint> EntityStateUseAsActiveCheckpoint();
            Ent::Gen2::EntityStateUseAsActiveCheckpoint setEntityStateUseAsActiveCheckpoint();
            std::optional<Ent::Gen2::EntityStateWaitToJumpAgain> EntityStateWaitToJumpAgain();
            Ent::Gen2::EntityStateWaitToJumpAgain setEntityStateWaitToJumpAgain();
            std::optional<Ent::Gen2::EntityStateWallRun> EntityStateWallRun();
            Ent::Gen2::EntityStateWallRun setEntityStateWallRun();
            std::optional<Ent::Gen2::EntityStateWallRunDrop> EntityStateWallRunDrop();
            Ent::Gen2::EntityStateWallRunDrop setEntityStateWallRunDrop();
            std::optional<Ent::Gen2::EntityStateWallRunJump> EntityStateWallRunJump();
            Ent::Gen2::EntityStateWallRunJump setEntityStateWallRunJump();
            std::optional<Ent::Gen2::EntityStateWaterfallEndJump> EntityStateWaterfallEndJump();
            Ent::Gen2::EntityStateWaterfallEndJump setEntityStateWaterfallEndJump();
        };

        struct SpawnState : HelperObject<SpawnState> // Object
        {
            explicit SpawnState(Ent::Property _node): HelperObject<SpawnState>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::ResponsiblePointer_ActorState_ val() const;
        };

        struct RespawnState : HelperObject<RespawnState> // Object
        {
            explicit RespawnState(Ent::Property _node): HelperObject<RespawnState>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::ResponsiblePointer_ActorState_ val() const;
        };

        struct RenderManager_DepthOfFieldConfig : HelperObject<RenderManager_DepthOfFieldConfig> // Object
        {
            explicit RenderManager_DepthOfFieldConfig(Ent::Property _node): HelperObject<RenderManager_DepthOfFieldConfig>(std::move(_node)) {}
            static constexpr char schemaName[] = "RenderManager::DepthOfFieldConfig";
            static RenderManager_DepthOfFieldConfig load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RenderManager_DepthOfFieldConfig(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RenderManager_DepthOfFieldConfig loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RenderManager_DepthOfFieldConfig(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RenderManager_DepthOfFieldConfig create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RenderManager_DepthOfFieldConfig(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RenderManager_DepthOfFieldConfig makeInstanceOf()
            {
                return RenderManager_DepthOfFieldConfig(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float FarTransitionDistance() const;
            Ent::Gen2::Float Multiplier() const;
            Ent::Gen2::Float NearTransitionDistance() const;
            Ent::Gen2::String _comment() const;
        };

        struct RegenerationManager_EnergyAreaSetting : HelperObject<RegenerationManager_EnergyAreaSetting> // Object
        {
            explicit RegenerationManager_EnergyAreaSetting(Ent::Property _node): HelperObject<RegenerationManager_EnergyAreaSetting>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenerationManager::EnergyAreaSetting";
            static RegenerationManager_EnergyAreaSetting load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RegenerationManager_EnergyAreaSetting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RegenerationManager_EnergyAreaSetting loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RegenerationManager_EnergyAreaSetting(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RegenerationManager_EnergyAreaSetting create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RegenerationManager_EnergyAreaSetting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RegenerationManager_EnergyAreaSetting makeInstanceOf()
            {
                return RegenerationManager_EnergyAreaSetting(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float RegenValue() const;
            Ent::Gen2::Float SmoothMargin() const;
            Ent::Gen2::String _comment() const;
        };

        struct RegenSwitchBehavior : EnumPropHelper<RegenSwitchBehavior, RegenSwitchBehaviorEnum> // Enum
        {
            using Enum = RegenSwitchBehaviorEnum;
            using PropHelper<RegenSwitchBehavior, Enum>::operator=;
            explicit RegenSwitchBehavior(Ent::Property _node): EnumPropHelper<RegenSwitchBehavior, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenSwitchBehavior";
            static constexpr char const* enumToString[] = {
                "CrossFade",
                "CrossMetamorphosis",
                "SequentialMetamorphosis",
                "InterruptibleSequentialMetamorphosis",
            };
        };
        inline char const* toString(RegenSwitchBehaviorEnum value)
        {
            if(size_t(value) >= std::size(RegenSwitchBehavior::enumToString))
                throw std::runtime_error("Wrong enum value");
            return RegenSwitchBehavior::enumToString[size_t(value)];
        }
        inline char const* toInternal(RegenSwitchBehaviorEnum value) { return toString(value); }
        template<> inline RegenSwitchBehaviorEnum strToEnum<RegenSwitchBehaviorEnum>(char const* value)
        {
            return static_cast<RegenSwitchBehaviorEnum>(details::indexInEnum(value, RegenSwitchBehavior::enumToString));
        }

        struct RegenField : EnumPropHelper<RegenField, RegenFieldEnum> // Enum
        {
            using Enum = RegenFieldEnum;
            using PropHelper<RegenField, Enum>::operator=;
            explicit RegenField(Ent::Property _node): EnumPropHelper<RegenField, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenField";
            static constexpr char const* enumToString[] = {
                "energy",
                "absorption",
                "RegenField_COUNT",
            };
        };
        inline char const* toString(RegenFieldEnum value)
        {
            if(size_t(value) >= std::size(RegenField::enumToString))
                throw std::runtime_error("Wrong enum value");
            return RegenField::enumToString[size_t(value)];
        }
        inline char const* toInternal(RegenFieldEnum value) { return toString(value); }
        template<> inline RegenFieldEnum strToEnum<RegenFieldEnum>(char const* value)
        {
            return static_cast<RegenFieldEnum>(details::indexInEnum(value, RegenField::enumToString));
        }

        struct RegenAreaTransitionSettings : HelperObject<RegenAreaTransitionSettings> // Object
        {
            explicit RegenAreaTransitionSettings(Ent::Property _node): HelperObject<RegenAreaTransitionSettings>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenAreaTransitionSettings";
            static RegenAreaTransitionSettings load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RegenAreaTransitionSettings(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RegenAreaTransitionSettings loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RegenAreaTransitionSettings(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RegenAreaTransitionSettings create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RegenAreaTransitionSettings(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RegenAreaTransitionSettings makeInstanceOf()
            {
                return RegenAreaTransitionSettings(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ScaleConverter TransitionWaveRadialSpeed() const;
            Ent::Gen2::Float TransitionWaveWidth() const;
            Ent::Gen2::String _comment() const;
        };

        struct TransitionSettings : HelperObject<TransitionSettings> // Object
        {
            explicit TransitionSettings(Ent::Property _node): HelperObject<TransitionSettings>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::RegenAreaTransitionSettings val() const;
        };

        struct ReflectionTools_EnumSchema : HelperObject<ReflectionTools_EnumSchema> // Object
        {
            explicit ReflectionTools_EnumSchema(Ent::Property _node): HelperObject<ReflectionTools_EnumSchema>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionTools::EnumSchema";
            static ReflectionTools_EnumSchema load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionTools_EnumSchema(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionTools_EnumSchema loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionTools_EnumSchema(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionTools_EnumSchema create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionTools_EnumSchema(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionTools_EnumSchema makeInstanceOf()
            {
                return ReflectionTools_EnumSchema(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            PrimArray<Ent::Gen2::String> Values() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods : HelperObject<ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> // Object
        {
            explicit ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(Ent::Property _node): HelperObject<ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMethods";
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods makeInstanceOf()
            {
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            PrimArray<Ent::Gen2::String> ParamTypes() const;
            Ent::Gen2::String ReturnType() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData : HelperObject<ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData> // Object
        {
            explicit ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(Ent::Property _node): HelperObject<ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMetaData";
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData makeInstanceOf()
            {
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Ent::Gen2::String Type_() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember : HelperObject<ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember> // Object
        {
            explicit ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(Ent::Property _node): HelperObject<ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMember";
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember makeInstanceOf()
            {
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Ent::Gen2::String Type_() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency : HelperObject<ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> // Object
        {
            explicit ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(Ent::Property _node): HelperObject<ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaDependency";
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency makeInstanceOf()
            {
                return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Ent::Gen2::Bool Optional() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectionTools_FlatBufferSchemaDependenciesExporter : HelperObject<ReflectionTools_FlatBufferSchemaDependenciesExporter> // Object
        {
            explicit ReflectionTools_FlatBufferSchemaDependenciesExporter(Ent::Property _node): HelperObject<ReflectionTools_FlatBufferSchemaDependenciesExporter>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionTools::FlatBufferSchemaDependenciesExporter";
            static ReflectionTools_FlatBufferSchemaDependenciesExporter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionTools_FlatBufferSchemaDependenciesExporter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionTools_FlatBufferSchemaDependenciesExporter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionTools_FlatBufferSchemaDependenciesExporter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionTools_FlatBufferSchemaDependenciesExporter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionTools_FlatBufferSchemaDependenciesExporter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionTools_FlatBufferSchemaDependenciesExporter makeInstanceOf()
            {
                return ReflectionTools_FlatBufferSchemaDependenciesExporter(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String className() const;
            Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> dependencies() const;
        };

        struct ReflectionTools_ClassReflectionSchema : HelperObject<ReflectionTools_ClassReflectionSchema> // Object
        {
            explicit ReflectionTools_ClassReflectionSchema(Ent::Property _node): HelperObject<ReflectionTools_ClassReflectionSchema>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionTools::ClassReflectionSchema";
            static ReflectionTools_ClassReflectionSchema load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionTools_ClassReflectionSchema(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionTools_ClassReflectionSchema loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionTools_ClassReflectionSchema(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionTools_ClassReflectionSchema create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionTools_ClassReflectionSchema(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionTools_ClassReflectionSchema makeInstanceOf()
            {
                return ReflectionTools_ClassReflectionSchema(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> BaseRecursive() const;
            Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> Dependencies() const;
            Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember> Members() const;
            Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData> Metadata() const;
            Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> Methods() const;
            Ent::Gen2::String Name() const;
            Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> RPCMethods() const;
            Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> Signals() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectionTools_ReflectionSchema : HelperObject<ReflectionTools_ReflectionSchema> // Object
        {
            explicit ReflectionTools_ReflectionSchema(Ent::Property _node): HelperObject<ReflectionTools_ReflectionSchema>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionTools::ReflectionSchema";
            static ReflectionTools_ReflectionSchema load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionTools_ReflectionSchema(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionTools_ReflectionSchema loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionTools_ReflectionSchema(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionTools_ReflectionSchema create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionTools_ReflectionSchema(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionTools_ReflectionSchema makeInstanceOf()
            {
                return ReflectionTools_ReflectionSchema(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ReflectionTools_EnumSchema> Enums() const;
            Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema> Schemas() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectionMethodParameter : HelperObject<ReflectionMethodParameter> // Object
        {
            explicit ReflectionMethodParameter(Ent::Property _node): HelperObject<ReflectionMethodParameter>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionMethodParameter";
            static ReflectionMethodParameter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionMethodParameter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionMethodParameter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionMethodParameter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionMethodParameter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionMethodParameter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionMethodParameter makeInstanceOf()
            {
                return ReflectionMethodParameter(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int containerType() const;
            Ent::Gen2::Int elementType() const;
            Ent::Gen2::String elementTypeName() const;
            Ent::Gen2::String name() const;
            Ent::Gen2::String typeName() const;
        };

        struct ReflectionMethod : HelperObject<ReflectionMethod> // Object
        {
            explicit ReflectionMethod(Ent::Property _node): HelperObject<ReflectionMethod>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionMethod";
            static ReflectionMethod load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionMethod(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionMethod loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionMethod(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionMethod create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionMethod(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionMethod makeInstanceOf()
            {
                return ReflectionMethod(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::ReflectionMethodParameter> inputs() const;
            Ent::Gen2::String name() const;
            Array<Ent::Gen2::ReflectionMethodParameter> outputs() const;
            Ent::Gen2::Bool threadSafe() const;
        };

        struct ReflectionEnum : HelperObject<ReflectionEnum> // Object
        {
            explicit ReflectionEnum(Ent::Property _node): HelperObject<ReflectionEnum>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionEnum";
            static ReflectionEnum load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionEnum(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionEnum loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionEnum(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionEnum create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionEnum(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionEnum makeInstanceOf()
            {
                return ReflectionEnum(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String name() const;
            PrimArray<Ent::Gen2::String> names() const;
            PrimArray<Ent::Gen2::Int> values() const;
        };

        struct ReflectionClass : HelperObject<ReflectionClass> // Object
        {
            explicit ReflectionClass(Ent::Property _node): HelperObject<ReflectionClass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionClass";
            static ReflectionClass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionClass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionClass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionClass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionClass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionClass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionClass makeInstanceOf()
            {
                return ReflectionClass(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::ReflectionMethod> methods() const;
            Ent::Gen2::String name() const;
        };

        struct ReflectionDb : HelperObject<ReflectionDb> // Object
        {
            explicit ReflectionDb(Ent::Property _node): HelperObject<ReflectionDb>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectionDb";
            static ReflectionDb load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectionDb(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectionDb loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectionDb(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectionDb create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectionDb(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectionDb makeInstanceOf()
            {
                return ReflectionDb(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::ReflectionClass> classes() const;
            Array<Ent::Gen2::ReflectionEnum> enums() const;
        };

        struct ReflectedMaterialGroup : HelperObject<ReflectedMaterialGroup> // Object
        {
            explicit ReflectedMaterialGroup(Ent::Property _node): HelperObject<ReflectedMaterialGroup>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectedMaterialGroup";
            static ReflectedMaterialGroup load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectedMaterialGroup(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectedMaterialGroup loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectedMaterialGroup(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectedMaterialGroup create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectedMaterialGroup(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectedMaterialGroup makeInstanceOf()
            {
                return ReflectedMaterialGroup(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> Materials() const;
            PrimArray<Ent::Gen2::String> Tags() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectedMaterialGroupVector : HelperObject<ReflectedMaterialGroupVector> // Object
        {
            explicit ReflectedMaterialGroupVector(Ent::Property _node): HelperObject<ReflectedMaterialGroupVector>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectedMaterialGroupVector";
            static ReflectedMaterialGroupVector load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectedMaterialGroupVector(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectedMaterialGroupVector loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectedMaterialGroupVector(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectedMaterialGroupVector create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectedMaterialGroupVector(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectedMaterialGroupVector makeInstanceOf()
            {
                return ReflectedMaterialGroupVector(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::ReflectedMaterialGroup> Groups() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectedDetailMaterial : HelperObject<ReflectedDetailMaterial> // Object
        {
            explicit ReflectedDetailMaterial(Ent::Property _node): HelperObject<ReflectedDetailMaterial>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectedDetailMaterial";
            static ReflectedDetailMaterial load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectedDetailMaterial(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectedDetailMaterial loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectedDetailMaterial(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectedDetailMaterial create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectedDetailMaterial(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectedDetailMaterial makeInstanceOf()
            {
                return ReflectedDetailMaterial(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String AlbedoMap() const;
            Ent::Gen2::String CavityMap() const;
            Ent::Gen2::Vector3i DebugAlbedo() const;
            Ent::Gen2::String EmissiveMap() const;
            Ent::Gen2::String HeightMap() const;
            Ent::Gen2::String NormalMap() const;
            Ent::Gen2::String RoughMap() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectedDetailMaterialVariants : HelperObject<ReflectedDetailMaterialVariants> // Object
        {
            explicit ReflectedDetailMaterialVariants(Ent::Property _node): HelperObject<ReflectedDetailMaterialVariants>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectedDetailMaterialVariants";
            static ReflectedDetailMaterialVariants load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectedDetailMaterialVariants(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectedDetailMaterialVariants loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectedDetailMaterialVariants(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectedDetailMaterialVariants create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectedDetailMaterialVariants(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectedDetailMaterialVariants makeInstanceOf()
            {
                return ReflectedDetailMaterialVariants(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::ReflectedDetailMaterial> Variants() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReflectedDetailMaterialBank : HelperObject<ReflectedDetailMaterialBank> // Object
        {
            explicit ReflectedDetailMaterialBank(Ent::Property _node): HelperObject<ReflectedDetailMaterialBank>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReflectedDetailMaterialBank";
            static ReflectedDetailMaterialBank load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReflectedDetailMaterialBank(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReflectedDetailMaterialBank loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReflectedDetailMaterialBank(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReflectedDetailMaterialBank create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReflectedDetailMaterialBank(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReflectedDetailMaterialBank makeInstanceOf()
            {
                return ReflectedDetailMaterialBank(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ReflectedDetailMaterialVariants> Bank() const;
            PrimArray<Ent::Gen2::String> Filters() const;
            Ent::Gen2::ReflectedMaterialGroupVector Groups() const;
            Ent::Gen2::String _comment() const;
        };

        struct RecastNavmeshGenerationParameters : HelperObject<RecastNavmeshGenerationParameters> // Object
        {
            explicit RecastNavmeshGenerationParameters(Ent::Property _node): HelperObject<RecastNavmeshGenerationParameters>(std::move(_node)) {}
            static constexpr char schemaName[] = "RecastNavmeshGenerationParameters";
            static RecastNavmeshGenerationParameters load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RecastNavmeshGenerationParameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RecastNavmeshGenerationParameters loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RecastNavmeshGenerationParameters(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RecastNavmeshGenerationParameters create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RecastNavmeshGenerationParameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RecastNavmeshGenerationParameters makeInstanceOf()
            {
                return RecastNavmeshGenerationParameters(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float CreatureHeight() const;
            Ent::Gen2::Float CreatureRadius() const;
            Ent::Gen2::String CreatureType() const;
            Ent::Gen2::Float DeepWaterDepth() const;
            Ent::Gen2::Bool MarkWaterAreas() const;
            Ent::Gen2::Float MaxClimbHeight() const;
            Ent::Gen2::Float MaxWalkableSlopeAngle() const;
            Ent::Gen2::Float MinWaterDepth() const;
            Ent::Gen2::Float VoxelPrecision() const;
            Ent::Gen2::String _comment() const;
        };


        struct sPhysicsJointDesc : HelperObject<sPhysicsJointDesc> // Object
        {
            explicit sPhysicsJointDesc(Ent::Property _node): HelperObject<sPhysicsJointDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sPhysicsJointDesc";
            static sPhysicsJointDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sPhysicsJointDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sPhysicsJointDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sPhysicsJointDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sPhysicsJointDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sPhysicsJointDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sPhysicsJointDesc makeInstanceOf()
            {
                return sPhysicsJointDesc(getProperty().makeInstanceOf());
            }
            Ent::Gen2::sJointBallDesc Ball() const;
            Ent::Gen2::sJointFixedDesc Fixed() const;
            Ent::Gen2::sJointHingeDesc Hinge() const;
            Ent::Gen2::String JointType() const;
            Ent::Gen2::sJointSliderDesc Slider() const;
            Ent::Gen2::sJointSwingTwistDesc SwingTwist() const;
            Ent::Gen2::sJointUniversalDesc Universal() const;
            Ent::Gen2::String _comment() const;
            PrimArray<Ent::Gen2::String> flags() const;
            Ent::Gen2::Int idRigodBodyA() const;
            Ent::Gen2::Int idRigodBodyB() const;
            Ent::Gen2::Quat orientation() const;
            Ent::Gen2::String parent() const;
            Ent::Gen2::Vector3 translation() const;
        };

        struct sPhysicShape : HelperObject<sPhysicShape> // Object
        {
            explicit sPhysicShape(Ent::Property _node): HelperObject<sPhysicShape>(std::move(_node)) {}
            static constexpr char schemaName[] = "sPhysicShape";
            static sPhysicShape load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sPhysicShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sPhysicShape loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sPhysicShape(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sPhysicShape create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sPhysicShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sPhysicShape makeInstanceOf()
            {
                return sPhysicShape(getProperty().makeInstanceOf());
            }
            Ent::Gen2::sPhysicsShapeBox Box() const;
            Ent::Gen2::sPhysicsShapeCapsule Capsule() const;
            Ent::Gen2::sPhysicsShapeCylinder Cylinder() const;
            Ent::Gen2::sPhysicsShapeMesh Mesh() const;
            Ent::Gen2::String PhysicsMaterial() const;
            Ent::Gen2::sPhysicsShapeSphere Sphere() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 angles() const;
            Ent::Gen2::Quat orientation() const;
            Ent::Gen2::Float scale() const;
            Ent::Gen2::Vector3 translation() const;
        };

        struct sRigidBodyDesc : HelperObject<sRigidBodyDesc> // Object
        {
            explicit sRigidBodyDesc(Ent::Property _node): HelperObject<sRigidBodyDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sRigidBodyDesc";
            static sRigidBodyDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sRigidBodyDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sRigidBodyDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sRigidBodyDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sRigidBodyDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sRigidBodyDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sRigidBodyDesc makeInstanceOf()
            {
                return sRigidBodyDesc(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 angles() const;
            PrimArray<Ent::Gen2::String> flags() const;
            Ent::Gen2::Int id() const;
            Ent::Gen2::String motionType() const;
            Ent::Gen2::Quat orientation() const;
            Ent::Gen2::String parent() const;
            Ent::Gen2::Float scale() const;
            Array<Ent::Gen2::sPhysicShape> shapes() const;
            Ent::Gen2::Vector3 translation() const;
        };

        struct Transform3D : HelperObject<Transform3D> // Object
        {
            explicit Transform3D(Ent::Property _node): HelperObject<Transform3D>(std::move(_node)) {}
            static constexpr char schemaName[] = "Transform3D";
            static Transform3D load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Transform3D(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Transform3D loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Transform3D(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Transform3D create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Transform3D(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Transform3D makeInstanceOf()
            {
                return Transform3D(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Quat orientation() const;
            Ent::Gen2::Vector3 scale() const;
            Ent::Gen2::Vector3 translation() const;
        };

        struct ProjectileShooterData : HelperObject<ProjectileShooterData> // Object
        {
            explicit ProjectileShooterData(Ent::Property _node): HelperObject<ProjectileShooterData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ProjectileShooterData";
            static ProjectileShooterData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ProjectileShooterData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ProjectileShooterData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ProjectileShooterData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ProjectileShooterData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ProjectileShooterData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ProjectileShooterData makeInstanceOf()
            {
                return ProjectileShooterData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef SubEntity() const;
            Ent::Gen2::String _comment() const;
        };

        struct ProjectileData : HelperObject<ProjectileData> // Object
        {
            explicit ProjectileData(Ent::Property _node): HelperObject<ProjectileData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ProjectileData";
            static ProjectileData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ProjectileData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ProjectileData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ProjectileData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ProjectileData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ProjectileData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ProjectileData makeInstanceOf()
            {
                return ProjectileData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool canCollideWithOtherProjectiles() const;
            Ent::Gen2::Float damages() const;
            Ent::Gen2::Float deleteAfterPlantTimer() const;
            Ent::Gen2::Bool destroyOnHit() const;
            Ent::Gen2::Float distanceFromBodyAtLaunch() const;
            Ent::Gen2::Bool explodeOnFire() const;
            Ent::Gen2::Float explosionShockForce() const;
            PrimArray<Ent::Gen2::String> gameEffectOnHit() const;
            Ent::Gen2::Float gravity() const;
            Ent::Gen2::Bool hasNoCollision() const;
            Ent::Gen2::Vector3 hitSourceOffset() const;
            Ent::Gen2::Float homingInRangeAnticipationDist() const;
            Ent::Gen2::Float homingMaxAngle() const;
            Ent::Gen2::Float homingMaxFlightTime() const;
            Ent::Gen2::Float homingMaxInFrontAnticipationDist() const;
            Ent::Gen2::Float homingMaxTotalAnticipationDist() const;
            PrimArray<Ent::Gen2::Float> homingTotalAnticipationRatioSpeeds() const;
            Ent::Gen2::Float impact() const;
            Ent::Gen2::Bool isRegenProjectile() const;
            Ent::Gen2::Bool isThrowable() const;
            Ent::Gen2::Vector3 launchRotation() const;
            Ent::Gen2::Float launchSpeed() const;
            Ent::Gen2::Float noiseLevelOnImpact() const;
            Ent::Gen2::Bool shouldBeVisibleBeforeShoot() const;
            Ent::Gen2::Float smoothTime() const;
            Ent::Gen2::Bool stopOnWater() const;
            Ent::Gen2::Float straightDistance() const;
            Ent::Gen2::Bool visibleInFlight() const;
        };

        struct ProgressSoundEventData : HelperObject<ProgressSoundEventData> // Object
        {
            explicit ProgressSoundEventData(Ent::Property _node): HelperObject<ProgressSoundEventData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ProgressSoundEventData";
            static ProgressSoundEventData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ProgressSoundEventData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ProgressSoundEventData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ProgressSoundEventData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ProgressSoundEventData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ProgressSoundEventData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ProgressSoundEventData makeInstanceOf()
            {
                return ProgressSoundEventData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String DecreaseEventName() const;
            Ent::Gen2::Float DecreaseStartThreshold() const;
            Ent::Gen2::Float DecreaseStopThreshold() const;
            Ent::Gen2::String EventBank() const;
            Ent::Gen2::Bool EventLooping() const;
            Ent::Gen2::String IncreaseEventName() const;
            Ent::Gen2::Float IncreaseStartThreshold() const;
            Ent::Gen2::Float IncreaseStopThreshold() const;
            Ent::Gen2::String _comment() const;
        };

        struct PrimitiveShape : HelperObject<PrimitiveShape> // Object
        {
            explicit PrimitiveShape(Ent::Property _node): HelperObject<PrimitiveShape>(std::move(_node)) {}
            static constexpr char schemaName[] = "PrimitiveShape";
            static PrimitiveShape load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PrimitiveShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PrimitiveShape loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PrimitiveShape(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PrimitiveShape create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PrimitiveShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PrimitiveShape makeInstanceOf()
            {
                return PrimitiveShape(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float SDFPadding() const;
            Ent::Gen2::Float SDFVoxelSize() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShapeSphere : HelperObject<ShapeSphere> // Object
        {
            explicit ShapeSphere(Ent::Property _node): HelperObject<ShapeSphere>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShapeSphere";
            static ShapeSphere load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShapeSphere(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShapeSphere loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShapeSphere(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShapeSphere create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShapeSphere(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShapeSphere makeInstanceOf()
            {
                return ShapeSphere(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::PrimitiveShape Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShapeBox : HelperObject<ShapeBox> // Object
        {
            explicit ShapeBox(Ent::Property _node): HelperObject<ShapeBox>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShapeBox";
            static ShapeBox load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShapeBox(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShapeBox loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShapeBox(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShapeBox create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShapeBox(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShapeBox makeInstanceOf()
            {
                return ShapeBox(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector3 Size() const;
            Ent::Gen2::PrimitiveShape Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PrimitiveData : HelperObject<PrimitiveData> // Object
        {
            explicit PrimitiveData(Ent::Property _node): HelperObject<PrimitiveData>(std::move(_node)) {}
            
            Ent::Gen2::Float Height() const;
            Ent::Gen2::Float Length() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::Float Width() const;
            Ent::Gen2::String _comment() const;
        };

        struct PrimitiveColliderType : EnumPropHelper<PrimitiveColliderType, PrimitiveColliderTypeEnum> // Enum
        {
            using Enum = PrimitiveColliderTypeEnum;
            using PropHelper<PrimitiveColliderType, Enum>::operator=;
            explicit PrimitiveColliderType(Ent::Property _node): EnumPropHelper<PrimitiveColliderType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "PrimitiveColliderType";
            static constexpr char const* enumToString[] = {
                "Undefined",
                "Sphere",
                "Box",
                "Capsule",
                "Cylinder",
                "Mesh",
                "PrimitiveColliderType_COUNT",
            };
        };
        inline char const* toString(PrimitiveColliderTypeEnum value)
        {
            if(size_t(value) >= std::size(PrimitiveColliderType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return PrimitiveColliderType::enumToString[size_t(value)];
        }
        inline char const* toInternal(PrimitiveColliderTypeEnum value) { return toString(value); }
        template<> inline PrimitiveColliderTypeEnum strToEnum<PrimitiveColliderTypeEnum>(char const* value)
        {
            return static_cast<PrimitiveColliderTypeEnum>(details::indexInEnum(value, PrimitiveColliderType::enumToString));
        }

        struct PredictionBehaviorDuration : HelperObject<PredictionBehaviorDuration> // Object
        {
            explicit PredictionBehaviorDuration(Ent::Property _node): HelperObject<PredictionBehaviorDuration>(std::move(_node)) {}
            static constexpr char schemaName[] = "PredictionBehaviorDuration";
            static PredictionBehaviorDuration load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PredictionBehaviorDuration(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PredictionBehaviorDuration loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PredictionBehaviorDuration(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PredictionBehaviorDuration create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PredictionBehaviorDuration(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PredictionBehaviorDuration makeInstanceOf()
            {
                return PredictionBehaviorDuration(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Locked() const;
            Ent::Gen2::Float Step() const;
            Ent::Gen2::Float Total() const;
            Ent::Gen2::String _comment() const;
        };

        struct PredictionBehaviorData : HelperObject<PredictionBehaviorData> // Object
        {
            explicit PredictionBehaviorData(Ent::Property _node): HelperObject<PredictionBehaviorData>(std::move(_node)) {}
            static constexpr char schemaName[] = "PredictionBehaviorData";
            static PredictionBehaviorData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PredictionBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PredictionBehaviorData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PredictionBehaviorData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PredictionBehaviorData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PredictionBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PredictionBehaviorData makeInstanceOf()
            {
                return PredictionBehaviorData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::PredictionBehaviorDuration Duration() const;
            Ent::Gen2::String _comment() const;
        };

        struct Precision : EnumPropHelper<Precision, PrecisionEnum> // Enum
        {
            using Enum = PrecisionEnum;
            using PropHelper<Precision, Enum>::operator=;
            explicit Precision(Ent::Property _node): EnumPropHelper<Precision, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "Precision";
            static constexpr char const* enumToString[] = {
                "full",
                "half",
                "quarter",
                "eighth",
                "sixteenth",
                "highest",
                "lowest",
            };
        };
        inline char const* toString(PrecisionEnum value)
        {
            if(size_t(value) >= std::size(Precision::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Precision::enumToString[size_t(value)];
        }
        inline char const* toInternal(PrecisionEnum value) { return toString(value); }
        template<> inline PrecisionEnum strToEnum<PrecisionEnum>(char const* value)
        {
            return static_cast<PrecisionEnum>(details::indexInEnum(value, Precision::enumToString));
        }


        struct constraintPlaneWorldPosition : HelperObject<constraintPlaneWorldPosition> // Object
        {
            explicit constraintPlaneWorldPosition(Ent::Property _node): HelperObject<constraintPlaneWorldPosition>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Position val() const;
        };

        struct ProjectileTrajectory : HelperObject<ProjectileTrajectory> // Object
        {
            explicit ProjectileTrajectory(Ent::Property _node): HelperObject<ProjectileTrajectory>(std::move(_node)) {}
            static constexpr char schemaName[] = "ProjectileTrajectory";
            static ProjectileTrajectory load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ProjectileTrajectory(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ProjectileTrajectory loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ProjectileTrajectory(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ProjectileTrajectory create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ProjectileTrajectory(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ProjectileTrajectory makeInstanceOf()
            {
                return ProjectileTrajectory(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 m_direction() const;
            Ent::Gen2::Position m_position() const;
            Ent::Gen2::Float m_speed() const;
            Ent::Gen2::Float m_straightDistance() const;
        };

        struct PlayRatio : HelperObject<PlayRatio> // Object
        {
            explicit PlayRatio(Ent::Property _node): HelperObject<PlayRatio>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct PhysicsMaterial : HelperObject<PhysicsMaterial> // Object
        {
            explicit PhysicsMaterial(Ent::Property _node): HelperObject<PhysicsMaterial>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsMaterial";
            static PhysicsMaterial load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsMaterial(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsMaterial loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsMaterial(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsMaterial create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsMaterial(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsMaterial makeInstanceOf()
            {
                return PhysicsMaterial(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> ClimbablePerSize() const;
            Ent::Gen2::Int MaterialId() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::PrimitiveSet<char const*> Tags() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsLayer : EnumPropHelper<PhysicsLayer, PhysicsLayerEnum> // Enum
        {
            using Enum = PhysicsLayerEnum;
            using PropHelper<PhysicsLayer, Enum>::operator=;
            explicit PhysicsLayer(Ent::Property _node): EnumPropHelper<PhysicsLayer, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsLayer";
            static constexpr char const* enumToString[] = {
                "Default",
                "Ground",
                "Static",
                "Raycast",
                "Trigger",
                "Walkable",
                "Camera",
                "ClimbEdge",
                "Kinematic",
                "Ragdoll",
                "Projectile",
                "Hit",
                "MotionConstraint",
                "Heal",
                "Body",
                "Fluid",
                "Hitable",
                "PhysicsGPE",
                "Interactable",
                "Creature",
                "Debris",
                "None",
                "All",
                "PHYSICLAYER_COUNT",
            };
        };
        inline char const* toString(PhysicsLayerEnum value)
        {
            if(size_t(value) >= std::size(PhysicsLayer::enumToString))
                throw std::runtime_error("Wrong enum value");
            return PhysicsLayer::enumToString[size_t(value)];
        }
        inline char const* toInternal(PhysicsLayerEnum value) { return toString(value); }
        template<> inline PhysicsLayerEnum strToEnum<PhysicsLayerEnum>(char const* value)
        {
            return static_cast<PhysicsLayerEnum>(details::indexInEnum(value, PhysicsLayer::enumToString));
        }

        struct PhysicsEffectsManager_PhysicsLimits : HelperObject<PhysicsEffectsManager_PhysicsLimits> // Object
        {
            explicit PhysicsEffectsManager_PhysicsLimits(Ent::Property _node): HelperObject<PhysicsEffectsManager_PhysicsLimits>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsEffectsManager::PhysicsLimits";
            static PhysicsEffectsManager_PhysicsLimits load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsEffectsManager_PhysicsLimits(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsEffectsManager_PhysicsLimits loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsEffectsManager_PhysicsLimits(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsEffectsManager_PhysicsLimits create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsEffectsManager_PhysicsLimits(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsEffectsManager_PhysicsLimits makeInstanceOf()
            {
                return PhysicsEffectsManager_PhysicsLimits(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int AvgShapesPerRigidBody() const;
            Ent::Gen2::Int MaxDynamicRigidBodies() const;
            Ent::Gen2::Int MaxNonContactPairs() const;
            Ent::Gen2::Int MaxStaticRigidBodies() const;
            Ent::Gen2::Int MaxTriggerRigidBodies() const;
            Ent::Gen2::String _comment() const;
        };

        struct PerceiverComponentInput_usePerception : HelperObject<PerceiverComponentInput_usePerception> // Object
        {
            explicit PerceiverComponentInput_usePerception(Ent::Property _node): HelperObject<PerceiverComponentInput_usePerception>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct Pasta_Easing_Curve : EnumPropHelper<Pasta_Easing_Curve, Pasta_Easing_CurveEnum> // Enum
        {
            using Enum = Pasta_Easing_CurveEnum;
            using PropHelper<Pasta_Easing_Curve, Enum>::operator=;
            explicit Pasta_Easing_Curve(Ent::Property _node): EnumPropHelper<Pasta_Easing_Curve, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "Pasta::Easing::Curve";
            static constexpr char const* enumToString[] = {
                "Linear",
                "EaseInSin",
                "EaseInQuad",
                "EaseInCubic",
                "EaseInQuart",
                "EaseInQuint",
                "EaseInExp",
                "EaseOutSin",
                "EaseOutQuad",
                "EaseOutCubic",
                "EaseOutQuart",
                "EaseOutQuint",
                "EaseOutExp",
                "EaseInoutSin",
                "EaseInoutQuad",
                "EaseInoutCubic",
                "EaseInoutQuart",
                "EaseInoutQuint",
                "EaseInoutExp",
                "EaseInCirc",
                "EaseOutCirc",
                "EaseInoutCirc",
                "EaseOutElastic",
                "Count",
            };
        };
        inline char const* toString(Pasta_Easing_CurveEnum value)
        {
            if(size_t(value) >= std::size(Pasta_Easing_Curve::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Pasta_Easing_Curve::enumToString[size_t(value)];
        }
        inline char const* toInternal(Pasta_Easing_CurveEnum value) { return toString(value); }
        template<> inline Pasta_Easing_CurveEnum strToEnum<Pasta_Easing_CurveEnum>(char const* value)
        {
            return static_cast<Pasta_Easing_CurveEnum>(details::indexInEnum(value, Pasta_Easing_Curve::enumToString));
        }

        struct RadiusChange : HelperObject<RadiusChange> // Object
        {
            explicit RadiusChange(Ent::Property _node): HelperObject<RadiusChange>(std::move(_node)) {}
            static constexpr char schemaName[] = "RadiusChange";
            static RadiusChange load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RadiusChange(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RadiusChange loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RadiusChange(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RadiusChange create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RadiusChange(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RadiusChange makeInstanceOf()
            {
                return RadiusChange(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ScaleConverter Entry() const;
            Ent::Gen2::ScaleConverter Exit() const;
            Ent::Gen2::Pasta_Easing_Curve InBetweenEasing() const;
            Ent::Gen2::String _comment() const;
        };

        struct Parameters : HelperObject<Parameters> // Object
        {
            explicit Parameters(Ent::Property _node): HelperObject<Parameters>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::SmoothScaleComponentInput_Parameters val() const;
        };

        struct OwnershipModuleDebugWindow : EnumPropHelper<OwnershipModuleDebugWindow, OwnershipModuleDebugWindowEnum> // Enum
        {
            using Enum = OwnershipModuleDebugWindowEnum;
            using PropHelper<OwnershipModuleDebugWindow, Enum>::operator=;
            explicit OwnershipModuleDebugWindow(Ent::Property _node): EnumPropHelper<OwnershipModuleDebugWindow, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "OwnershipModuleDebugWindow";
            static constexpr char const* enumToString[] = {
                "Tree",
                "Settings",
                "In Game Debug Data",
                "OwnershipModuleDebugWindow_COUNT",
            };
        };
        inline char const* toString(OwnershipModuleDebugWindowEnum value)
        {
            if(size_t(value) >= std::size(OwnershipModuleDebugWindow::enumToString))
                throw std::runtime_error("Wrong enum value");
            return OwnershipModuleDebugWindow::enumToString[size_t(value)];
        }
        inline char const* toInternal(OwnershipModuleDebugWindowEnum value) { return toString(value); }
        template<> inline OwnershipModuleDebugWindowEnum strToEnum<OwnershipModuleDebugWindowEnum>(char const* value)
        {
            return static_cast<OwnershipModuleDebugWindowEnum>(details::indexInEnum(value, OwnershipModuleDebugWindow::enumToString));
        }

        struct Game_OwnershipDebugger : HelperObject<Game_OwnershipDebugger> // Object
        {
            explicit Game_OwnershipDebugger(Ent::Property _node): HelperObject<Game_OwnershipDebugger>(std::move(_node)) {}
            static constexpr char schemaName[] = "Game::OwnershipDebugger";
            static Game_OwnershipDebugger load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Game_OwnershipDebugger(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Game_OwnershipDebugger loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Game_OwnershipDebugger(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Game_OwnershipDebugger create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Game_OwnershipDebugger(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Game_OwnershipDebugger makeInstanceOf()
            {
                return Game_OwnershipDebugger(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::OwnershipModuleDebugWindow> Display() const;
            Ent::Gen2::String _comment() const;
        };

        struct OutfitPieceType : EnumPropHelper<OutfitPieceType, OutfitPieceTypeEnum> // Enum
        {
            using Enum = OutfitPieceTypeEnum;
            using PropHelper<OutfitPieceType, Enum>::operator=;
            explicit OutfitPieceType(Ent::Property _node): EnumPropHelper<OutfitPieceType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "OutfitPieceType";
            static constexpr char const* enumToString[] = {
                "OutfitPieceType_NONE",
                "Head",
                "Torso",
                "Skirt",
                "Boots",
                "Brace",
                "Body",
                "Hair",
                "OutfitPieceType_COUNT",
            };
        };
        inline char const* toString(OutfitPieceTypeEnum value)
        {
            if(size_t(value) >= std::size(OutfitPieceType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return OutfitPieceType::enumToString[size_t(value)];
        }
        inline char const* toInternal(OutfitPieceTypeEnum value) { return toString(value); }
        template<> inline OutfitPieceTypeEnum strToEnum<OutfitPieceTypeEnum>(char const* value)
        {
            return static_cast<OutfitPieceTypeEnum>(details::indexInEnum(value, OutfitPieceType::enumToString));
        }

        struct OutfitPiece : HelperObject<OutfitPiece> // Object
        {
            explicit OutfitPiece(Ent::Property _node): HelperObject<OutfitPiece>(std::move(_node)) {}
            static constexpr char schemaName[] = "OutfitPiece";
            static OutfitPiece load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OutfitPiece(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OutfitPiece loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OutfitPiece(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OutfitPiece create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OutfitPiece(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OutfitPiece makeInstanceOf()
            {
                return OutfitPiece(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef EntityRef() const;
            Ent::Gen2::OutfitPieceType Slot() const;
            Ent::Gen2::String _comment() const;
        };

        struct Orientation : HelperObject<Orientation> // Object
        {
            explicit Orientation(Ent::Property _node): HelperObject<Orientation>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Quat val() const;
        };

        struct Online : HelperObject<Online> // Object
        {
            explicit Online(Ent::Property _node): HelperObject<Online>(std::move(_node)) {}
            
        
        };

        struct Object_MaxActivationLevel : EnumPropHelper<Object_MaxActivationLevel, Object_MaxActivationLevelEnum> // Enum
        {
            using Enum = Object_MaxActivationLevelEnum;
            using PropHelper<Object_MaxActivationLevel, Enum>::operator=;
            explicit Object_MaxActivationLevel(Ent::Property _node): EnumPropHelper<Object_MaxActivationLevel, Enum>(std::move(_node)) {}
            
            static constexpr char const* enumToString[] = {
                "Created",
                "InWorld",
                "Loading",
                "Started",
            };
        };
        inline char const* toString(Object_MaxActivationLevelEnum value)
        {
            if(size_t(value) >= std::size(Object_MaxActivationLevel::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Object_MaxActivationLevel::enumToString[size_t(value)];
        }
        inline char const* toInternal(Object_MaxActivationLevelEnum value) { return toString(value); }
        template<> inline Object_MaxActivationLevelEnum strToEnum<Object_MaxActivationLevelEnum>(char const* value)
        {
            return static_cast<Object_MaxActivationLevelEnum>(details::indexInEnum(value, Object_MaxActivationLevel::enumToString));
        }

        struct NavMeshTag : EnumPropHelper<NavMeshTag, NavMeshTagEnum> // Enum
        {
            using Enum = NavMeshTagEnum;
            using PropHelper<NavMeshTag, Enum>::operator=;
            explicit NavMeshTag(Ent::Property _node): EnumPropHelper<NavMeshTag, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "NavMeshTag";
            static constexpr char const* enumToString[] = {
                "Lush",
                "Corrupted",
                "Spirit",
                "NonSpirit",
                "NavMeshTag_COUNT",
            };
        };
        inline char const* toString(NavMeshTagEnum value)
        {
            if(size_t(value) >= std::size(NavMeshTag::enumToString))
                throw std::runtime_error("Wrong enum value");
            return NavMeshTag::enumToString[size_t(value)];
        }
        inline char const* toInternal(NavMeshTagEnum value) { return toString(value); }
        template<> inline NavMeshTagEnum strToEnum<NavMeshTagEnum>(char const* value)
        {
            return static_cast<NavMeshTagEnum>(details::indexInEnum(value, NavMeshTag::enumToString));
        }

        struct NavMeshCapability : EnumPropHelper<NavMeshCapability, NavMeshCapabilityEnum> // Enum
        {
            using Enum = NavMeshCapabilityEnum;
            using PropHelper<NavMeshCapability, Enum>::operator=;
            explicit NavMeshCapability(Ent::Property _node): EnumPropHelper<NavMeshCapability, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "NavMeshCapability";
            static constexpr char const* enumToString[] = {
                "Walk",
                "SwimShallow",
                "SwimDeep",
                "LongJump",
                "HighJump",
                "EdgeWalk",
                "TunnelCross",
                "Jump",
                "WallRun",
                "WaterFall",
                "Climb",
                "UnderwaterTunnelCross",
                "NavMeshCapability_COUNT",
            };
        };
        inline char const* toString(NavMeshCapabilityEnum value)
        {
            if(size_t(value) >= std::size(NavMeshCapability::enumToString))
                throw std::runtime_error("Wrong enum value");
            return NavMeshCapability::enumToString[size_t(value)];
        }
        inline char const* toInternal(NavMeshCapabilityEnum value) { return toString(value); }
        template<> inline NavMeshCapabilityEnum strToEnum<NavMeshCapabilityEnum>(char const* value)
        {
            return static_cast<NavMeshCapabilityEnum>(details::indexInEnum(value, NavMeshCapability::enumToString));
        }

        struct MusicCategory : HelperObject<MusicCategory> // Object
        {
            explicit MusicCategory(Ent::Property _node): HelperObject<MusicCategory>(std::move(_node)) {}
            static constexpr char schemaName[] = "MusicCategory";
            static MusicCategory load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MusicCategory(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MusicCategory loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MusicCategory(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MusicCategory create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MusicCategory(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MusicCategory makeInstanceOf()
            {
                return MusicCategory(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String EventName() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::Int Weight() const;
            Ent::Gen2::String _comment() const;
        };

        struct MoveCapacityData_OrientationSpeed : HelperObject<MoveCapacityData_OrientationSpeed> // Object
        {
            explicit MoveCapacityData_OrientationSpeed(Ent::Property _node): HelperObject<MoveCapacityData_OrientationSpeed>(std::move(_node)) {}
            static constexpr char schemaName[] = "MoveCapacityData::OrientationSpeed";
            static MoveCapacityData_OrientationSpeed load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MoveCapacityData_OrientationSpeed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MoveCapacityData_OrientationSpeed loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MoveCapacityData_OrientationSpeed(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MoveCapacityData_OrientationSpeed create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MoveCapacityData_OrientationSpeed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MoveCapacityData_OrientationSpeed makeInstanceOf()
            {
                return MoveCapacityData_OrientationSpeed(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 factor() const;
            Ent::Gen2::Vector3 rate() const;
            Ent::Gen2::ScaleConverter rotationRollFromAngularSpeed() const;
            Ent::Gen2::ScaleConverter speedFactorFromSpeedSlow() const;
            Ent::Gen2::Vector3 speedMax() const;
            Ent::Gen2::Vector3 steeringAngle() const;
        };

        struct MountableSnapLine_ControlPoint : HelperObject<MountableSnapLine_ControlPoint> // Object
        {
            explicit MountableSnapLine_ControlPoint(Ent::Property _node): HelperObject<MountableSnapLine_ControlPoint>(std::move(_node)) {}
            static constexpr char schemaName[] = "MountableSnapLine::ControlPoint";
            static MountableSnapLine_ControlPoint load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MountableSnapLine_ControlPoint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MountableSnapLine_ControlPoint loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MountableSnapLine_ControlPoint(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MountableSnapLine_ControlPoint create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MountableSnapLine_ControlPoint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MountableSnapLine_ControlPoint makeInstanceOf()
            {
                return MountableSnapLine_ControlPoint(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int boneId() const;
            Ent::Gen2::Vector3 offset() const;
            Ent::Gen2::Float radius() const;
        };

        struct MountableData : HelperObject<MountableData> // Object
        {
            explicit MountableData(Ent::Property _node): HelperObject<MountableData>(std::move(_node)) {}
            static constexpr char schemaName[] = "MountableData";
            static MountableData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MountableData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MountableData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MountableData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MountableData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MountableData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MountableData makeInstanceOf()
            {
                return MountableData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int HotspotID() const;
            Ent::Gen2::String _comment() const;
        };

        struct MinReviveRatio : HelperObject<MinReviveRatio> // Object
        {
            explicit MinReviveRatio(Ent::Property _node): HelperObject<MinReviveRatio>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct MinRespawnDistance : HelperObject<MinRespawnDistance> // Object
        {
            explicit MinRespawnDistance(Ent::Property _node): HelperObject<MinRespawnDistance>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct MinDistanceToRespawnPosition : HelperObject<MinDistanceToRespawnPosition> // Object
        {
            explicit MinDistanceToRespawnPosition(Ent::Property _node): HelperObject<MinDistanceToRespawnPosition>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct MeshesItem : HelperObject<MeshesItem> // Object
        {
            explicit MeshesItem(Ent::Property _node): HelperObject<MeshesItem>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String mesh() const;
        };

        struct RUNTIME_LODsItem : HelperObject<RUNTIME_LODsItem> // Object
        {
            explicit RUNTIME_LODsItem(Ent::Property _node): HelperObject<RUNTIME_LODsItem>(std::move(_node)) {}
            
            Array<Ent::Gen2::MeshesItem> Meshes() const;
            Ent::Gen2::String _comment() const;
        };

        struct MeshNavigationAllowedMode : EnumPropHelper<MeshNavigationAllowedMode, MeshNavigationAllowedModeEnum> // Enum
        {
            using Enum = MeshNavigationAllowedModeEnum;
            using PropHelper<MeshNavigationAllowedMode, Enum>::operator=;
            explicit MeshNavigationAllowedMode(Ent::Property _node): EnumPropHelper<MeshNavigationAllowedMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "MeshNavigationAllowedMode";
            static constexpr char const* enumToString[] = {
                "Never",
                "PlayerOnly",
                "Always",
                "MeshNavigationAllowedMode_COUNT",
            };
        };
        inline char const* toString(MeshNavigationAllowedModeEnum value)
        {
            if(size_t(value) >= std::size(MeshNavigationAllowedMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return MeshNavigationAllowedMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(MeshNavigationAllowedModeEnum value) { return toString(value); }
        template<> inline MeshNavigationAllowedModeEnum strToEnum<MeshNavigationAllowedModeEnum>(char const* value)
        {
            return static_cast<MeshNavigationAllowedModeEnum>(details::indexInEnum(value, MeshNavigationAllowedMode::enumToString));
        }

        struct MeshNavigationBehaviorData : HelperObject<MeshNavigationBehaviorData> // Object
        {
            explicit MeshNavigationBehaviorData(Ent::Property _node): HelperObject<MeshNavigationBehaviorData>(std::move(_node)) {}
            static constexpr char schemaName[] = "MeshNavigationBehaviorData";
            static MeshNavigationBehaviorData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MeshNavigationBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MeshNavigationBehaviorData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MeshNavigationBehaviorData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MeshNavigationBehaviorData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MeshNavigationBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MeshNavigationBehaviorData makeInstanceOf()
            {
                return MeshNavigationBehaviorData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DeltaAngleMinToPrepareToHoldingOnToNavigationMesh() const;
            Ent::Gen2::Bool EdgeTransitionConstraintAllowed() const;
            Ent::Gen2::Float EdgeTransitionConstraintLedgeAngle() const;
            Ent::Gen2::Float EdgeTransitionConstraintWallAngle() const;
            Ent::Gen2::Float MaxNormalAngle() const;
            Ent::Gen2::MeshNavigationAllowedMode MeshNavigationAllowedMode() const;
            Ent::Gen2::Float OrientationRateToPrepareToHoldingOnToNavigationMesh() const;
            Ent::Gen2::Float RayCastLengthLegFactor() const;
            Ent::Gen2::Float RayCastLengthSpeedFactor() const;
            Ent::Gen2::Bool RollAllowed() const;
            Ent::Gen2::Float SlopeAngleMinForWall() const;
            Ent::Gen2::Float SlopeAngleMinToAllowStickedLand() const;
            Ent::Gen2::Bool StickToAnyNormalAllowed() const;
            Ent::Gen2::Float VerticalAngleMinToUseLandingTreeAnimation() const;
            Ent::Gen2::Float WallFrontProbeLengthFactor() const;
            Ent::Gen2::Float WallRepulseFactor() const;
            Ent::Gen2::String _comment() const;
        };

        struct MaxActivationLevel : EnumPropHelper<MaxActivationLevel, MaxActivationLevelEnum> // Enum
        {
            using Enum = MaxActivationLevelEnum;
            using PropHelper<MaxActivationLevel, Enum>::operator=;
            explicit MaxActivationLevel(Ent::Property _node): EnumPropHelper<MaxActivationLevel, Enum>(std::move(_node)) {}
            
            static constexpr char const* enumToString[] = {
                "Created",
                "InWorld",
                "Loading",
                "Started",
            };
        };
        inline char const* toString(MaxActivationLevelEnum value)
        {
            if(size_t(value) >= std::size(MaxActivationLevel::enumToString))
                throw std::runtime_error("Wrong enum value");
            return MaxActivationLevel::enumToString[size_t(value)];
        }
        inline char const* toInternal(MaxActivationLevelEnum value) { return toString(value); }
        template<> inline MaxActivationLevelEnum strToEnum<MaxActivationLevelEnum>(char const* value)
        {
            return static_cast<MaxActivationLevelEnum>(details::indexInEnum(value, MaxActivationLevel::enumToString));
        }


        struct VolumeConstraintDataGD : HelperObject<VolumeConstraintDataGD> // Object
        {
            explicit VolumeConstraintDataGD(Ent::Property _node): HelperObject<VolumeConstraintDataGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "VolumeConstraintDataGD";
            static VolumeConstraintDataGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VolumeConstraintDataGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VolumeConstraintDataGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VolumeConstraintDataGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VolumeConstraintDataGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VolumeConstraintDataGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VolumeConstraintDataGD makeInstanceOf()
            {
                return VolumeConstraintDataGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector3 CameraConstraintLocalAxis() const;
            Ent::Gen2::Matrix44 Matrix() const;
            Ent::Gen2::TransitionNeighborData Neighbors() const;
            Ent::Gen2::Vector3 Size() const;
            PrimArray<Ent::Gen2::String> Tags() const;
            Ent::Gen2::String _comment() const;
        };

        struct Game_MacroNavMeshStamper : HelperObject<Game_MacroNavMeshStamper> // Object
        {
            explicit Game_MacroNavMeshStamper(Ent::Property _node): HelperObject<Game_MacroNavMeshStamper>(std::move(_node)) {}
            static constexpr char schemaName[] = "Game::MacroNavMeshStamper";
            static Game_MacroNavMeshStamper load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Game_MacroNavMeshStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Game_MacroNavMeshStamper loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Game_MacroNavMeshStamper(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Game_MacroNavMeshStamper create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Game_MacroNavMeshStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Game_MacroNavMeshStamper makeInstanceOf()
            {
                return Game_MacroNavMeshStamper(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector3 BoundingBox() const;
            Ent::Gen2::Matrix44 Matrix() const;
            Ent::Gen2::String NavmeshPath() const;
            Ent::Gen2::Vector3 Position() const;
            Ent::Gen2::Float RotationZ() const;
            Ent::Gen2::Bool StickToGround() const;
            Ent::Gen2::String _comment() const;
        };


        struct PointCloudInstanceDataResource : HelperObject<PointCloudInstanceDataResource> // Object
        {
            explicit PointCloudInstanceDataResource(Ent::Property _node): HelperObject<PointCloudInstanceDataResource>(std::move(_node)) {}
            static constexpr char schemaName[] = "PointCloudInstanceDataResource";
            static PointCloudInstanceDataResource load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PointCloudInstanceDataResource(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PointCloudInstanceDataResource loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PointCloudInstanceDataResource(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PointCloudInstanceDataResource create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PointCloudInstanceDataResource(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PointCloudInstanceDataResource makeInstanceOf()
            {
                return PointCloudInstanceDataResource(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int index() const;
            Ent::Gen2::Matrix43 matrix() const;
        };

        struct PointCloudChunk : HelperObject<PointCloudChunk> // Object
        {
            explicit PointCloudChunk(Ent::Property _node): HelperObject<PointCloudChunk>(std::move(_node)) {}
            static constexpr char schemaName[] = "PointCloudChunk";
            static PointCloudChunk load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PointCloudChunk(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PointCloudChunk loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PointCloudChunk(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PointCloudChunk create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PointCloudChunk(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PointCloudChunk makeInstanceOf()
            {
                return PointCloudChunk(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int chunkPosX() const;
            Ent::Gen2::Int chunkPosY() const;
            Ent::Gen2::Int chunkPosZ() const;
            Array<Ent::Gen2::PointCloudInstanceDataResource> instances() const;
        };


        struct MapOfObjectItem_A : HelperObject<MapOfObjectItem_A> // Object
        {
            explicit MapOfObjectItem_A(Ent::Property _node): HelperObject<MapOfObjectItem_A>(std::move(_node)) {}
            
            Ent::Gen2::String Value() const;
            Ent::Gen2::String _comment() const;
        };

        struct Manager_EntityID : HelperObject<Manager_EntityID> // Object
        {
            explicit Manager_EntityID(Ent::Property _node): HelperObject<Manager_EntityID>(std::move(_node)) {}
            
        
        };

        struct Manager : HelperObject<Manager> // Object
        {
            explicit Manager(Ent::Property _node): HelperObject<Manager>(std::move(_node)) {}
            static constexpr char schemaName[] = "Manager";
            static Manager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Manager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Manager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Manager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Manager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Manager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Manager makeInstanceOf()
            {
                return Manager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager_EntityID EntityID() const;
            Ent::Gen2::String _comment() const;
        };

        struct WorldManager : HelperObject<WorldManager> // Object
        {
            explicit WorldManager(Ent::Property _node): HelperObject<WorldManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "WorldManager";
            static WorldManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WorldManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WorldManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WorldManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WorldManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WorldManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WorldManager makeInstanceOf()
            {
                return WorldManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct WaveManager : HelperObject<WaveManager> // Object
        {
            explicit WaveManager(Ent::Property _node): HelperObject<WaveManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "WaveManager";
            static WaveManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WaveManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WaveManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WaveManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WaveManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WaveManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WaveManager makeInstanceOf()
            {
                return WaveManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct WaterManager : HelperObject<WaterManager> // Object
        {
            explicit WaterManager(Ent::Property _node): HelperObject<WaterManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "WaterManager";
            static WaterManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WaterManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WaterManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WaterManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WaterManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WaterManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WaterManager makeInstanceOf()
            {
                return WaterManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::Float WaterHeight() const;
            Ent::Gen2::String _comment() const;
        };

        struct VisualManager : HelperObject<VisualManager> // Object
        {
            explicit VisualManager(Ent::Property _node): HelperObject<VisualManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "VisualManager";
            static VisualManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VisualManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VisualManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VisualManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VisualManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VisualManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VisualManager makeInstanceOf()
            {
                return VisualManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct VegetationManager : HelperObject<VegetationManager> // Object
        {
            explicit VegetationManager(Ent::Property _node): HelperObject<VegetationManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "VegetationManager";
            static VegetationManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VegetationManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VegetationManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VegetationManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VegetationManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VegetationManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VegetationManager makeInstanceOf()
            {
                return VegetationManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float BuryDepth() const;
            Ent::Gen2::Float BuryScaleThreshold() const;
            Ent::Gen2::Bool BuryVeget() const;
            Ent::Gen2::Float FadeOutScaleThreshold() const;
            Ent::Gen2::Bool FadeOutVeget() const;
            Ent::Gen2::Float FullScaleGrowDistanceHysteresis() const;
            Ent::Gen2::Float FullScaleGrowDistanceThreshold() const;
            Ent::Gen2::Float FullScaleGrowMaxRatio() const;
            Ent::Gen2::Float FullScaleGrowMinRatio() const;
            Ent::Gen2::Float GlobalDistanceMultiplier() const;
            Ent::Gen2::Bool PreloadVegetation() const;
            Ent::Gen2::Bool RegenInterpolation() const;
            Ent::Gen2::Float ScaleSpeed() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String VegetationBankPath() const;
            Ent::Gen2::String _comment() const;
        };

        struct TrailManager : HelperObject<TrailManager> // Object
        {
            explicit TrailManager(Ent::Property _node): HelperObject<TrailManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "TrailManager";
            static TrailManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TrailManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TrailManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TrailManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TrailManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TrailManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TrailManager makeInstanceOf()
            {
                return TrailManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct TerrainManager : HelperObject<TerrainManager> // Object
        {
            explicit TerrainManager(Ent::Property _node): HelperObject<TerrainManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "TerrainManager";
            static TerrainManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TerrainManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TerrainManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TerrainManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TerrainManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TerrainManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TerrainManager makeInstanceOf()
            {
                return TerrainManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SyncTempoManager : HelperObject<SyncTempoManager> // Object
        {
            explicit SyncTempoManager(Ent::Property _node): HelperObject<SyncTempoManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "SyncTempoManager";
            static SyncTempoManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SyncTempoManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SyncTempoManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SyncTempoManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SyncTempoManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SyncTempoManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SyncTempoManager makeInstanceOf()
            {
                return SyncTempoManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int DefaultTempo() const;
            Ent::Gen2::String RTPC_Tempo() const;
            Ent::Gen2::String StartSyncClickEvent() const;
            Ent::Gen2::String StartSyncEvent() const;
            Ent::Gen2::String StopSyncClickEvent() const;
            Ent::Gen2::String StopSyncEvent() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct StreamingManager : HelperObject<StreamingManager> // Object
        {
            explicit StreamingManager(Ent::Property _node): HelperObject<StreamingManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "StreamingManager";
            static StreamingManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StreamingManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StreamingManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StreamingManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StreamingManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StreamingManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StreamingManager makeInstanceOf()
            {
                return StreamingManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool DisableStreaming() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SpatialMapManager : HelperObject<SpatialMapManager> // Object
        {
            explicit SpatialMapManager(Ent::Property _node): HelperObject<SpatialMapManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "SpatialMapManager";
            static SpatialMapManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SpatialMapManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SpatialMapManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SpatialMapManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SpatialMapManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SpatialMapManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SpatialMapManager makeInstanceOf()
            {
                return SpatialMapManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShamanVisionManager : HelperObject<ShamanVisionManager> // Object
        {
            explicit ShamanVisionManager(Ent::Property _node): HelperObject<ShamanVisionManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShamanVisionManager";
            static ShamanVisionManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShamanVisionManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShamanVisionManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShamanVisionManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShamanVisionManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShamanVisionManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShamanVisionManager makeInstanceOf()
            {
                return ShamanVisionManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float HighlightFactorGoddess() const;
            Ent::Gen2::Float HighlightFactorPlayer() const;
            Ent::Gen2::Float HighlightFactorSpecie() const;
            Ent::Gen2::Bool ShowEnemiesState() const;
            Ent::Gen2::Bool ShowInjuredState() const;
            Ent::Gen2::Bool ShowPlayersState() const;
            Ent::Gen2::Bool ShowPrisonersState() const;
            Ent::Gen2::Bool ShowSpecieIcons() const;
            Ent::Gen2::Float StateMinSizeDistance() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::Float TimerFactorGoddess() const;
            Ent::Gen2::Float TimerFactorPlayer() const;
            Ent::Gen2::Float TimerFactorSpecie() const;
            Ent::Gen2::String _comment() const;
        };

        struct SensorManager : HelperObject<SensorManager> // Object
        {
            explicit SensorManager(Ent::Property _node): HelperObject<SensorManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "SensorManager";
            static SensorManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SensorManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SensorManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SensorManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SensorManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SensorManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SensorManager makeInstanceOf()
            {
                return SensorManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int SensorPoolSize() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct Scheduler : HelperObject<Scheduler> // Object
        {
            explicit Scheduler(Ent::Property _node): HelperObject<Scheduler>(std::move(_node)) {}
            static constexpr char schemaName[] = "Scheduler";
            static Scheduler load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Scheduler(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Scheduler loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Scheduler(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Scheduler create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Scheduler(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Scheduler makeInstanceOf()
            {
                return Scheduler(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SceneManager : HelperObject<SceneManager> // Object
        {
            explicit SceneManager(Ent::Property _node): HelperObject<SceneManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "SceneManager";
            static SceneManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SceneManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SceneManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SceneManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SceneManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SceneManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SceneManager makeInstanceOf()
            {
                return SceneManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ResourceDebugger : HelperObject<ResourceDebugger> // Object
        {
            explicit ResourceDebugger(Ent::Property _node): HelperObject<ResourceDebugger>(std::move(_node)) {}
            static constexpr char schemaName[] = "ResourceDebugger";
            static ResourceDebugger load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ResourceDebugger(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ResourceDebugger loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ResourceDebugger(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ResourceDebugger create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ResourceDebugger(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ResourceDebugger makeInstanceOf()
            {
                return ResourceDebugger(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReloadManager : HelperObject<ReloadManager> // Object
        {
            explicit ReloadManager(Ent::Property _node): HelperObject<ReloadManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReloadManager";
            static ReloadManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReloadManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReloadManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReloadManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReloadManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReloadManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReloadManager makeInstanceOf()
            {
                return ReloadManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RegionManager : HelperObject<RegionManager> // Object
        {
            explicit RegionManager(Ent::Property _node): HelperObject<RegionManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegionManager";
            static RegionManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RegionManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RegionManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RegionManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RegionManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RegionManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RegionManager makeInstanceOf()
            {
                return RegionManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RPCServerManager : HelperObject<RPCServerManager> // Object
        {
            explicit RPCServerManager(Ent::Property _node): HelperObject<RPCServerManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "RPCServerManager";
            static RPCServerManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RPCServerManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RPCServerManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RPCServerManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RPCServerManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RPCServerManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RPCServerManager makeInstanceOf()
            {
                return RPCServerManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RPCMarshallingTests : HelperObject<RPCMarshallingTests> // Object
        {
            explicit RPCMarshallingTests(Ent::Property _node): HelperObject<RPCMarshallingTests>(std::move(_node)) {}
            static constexpr char schemaName[] = "RPCMarshallingTests";
            static RPCMarshallingTests load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RPCMarshallingTests(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RPCMarshallingTests loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RPCMarshallingTests(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RPCMarshallingTests create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RPCMarshallingTests(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RPCMarshallingTests makeInstanceOf()
            {
                return RPCMarshallingTests(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct QualityManager : HelperObject<QualityManager> // Object
        {
            explicit QualityManager(Ent::Property _node): HelperObject<QualityManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "QualityManager";
            static QualityManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return QualityManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static QualityManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return QualityManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static QualityManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return QualityManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            QualityManager makeInstanceOf()
            {
                return QualityManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float EntityLODDistanceHysteresis() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PlayerManager : HelperObject<PlayerManager> // Object
        {
            explicit PlayerManager(Ent::Property _node): HelperObject<PlayerManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "PlayerManager";
            static PlayerManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PlayerManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PlayerManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PlayerManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PlayerManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PlayerManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PlayerManager makeInstanceOf()
            {
                return PlayerManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String SaveGame() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsEffectsManager : HelperObject<PhysicsEffectsManager> // Object
        {
            explicit PhysicsEffectsManager(Ent::Property _node): HelperObject<PhysicsEffectsManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsEffectsManager";
            static PhysicsEffectsManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsEffectsManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsEffectsManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsEffectsManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsEffectsManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsEffectsManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsEffectsManager makeInstanceOf()
            {
                return PhysicsEffectsManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float GravityConstant() const;
            Ent::Gen2::PhysicsEffectsManager_PhysicsLimits Limits() const;
            Array<Ent::Gen2::PhysicsMaterial> MaterialBank() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PestoManager : HelperObject<PestoManager> // Object
        {
            explicit PestoManager(Ent::Property _node): HelperObject<PestoManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "PestoManager";
            static PestoManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PestoManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PestoManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PestoManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PestoManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PestoManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PestoManager makeInstanceOf()
            {
                return PestoManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PerceptionManager : HelperObject<PerceptionManager> // Object
        {
            explicit PerceptionManager(Ent::Property _node): HelperObject<PerceptionManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "PerceptionManager";
            static PerceptionManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PerceptionManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PerceptionManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PerceptionManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PerceptionManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PerceptionManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PerceptionManager makeInstanceOf()
            {
                return PerceptionManager(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::Float> DistanceMultipliers() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ParticleManager : HelperObject<ParticleManager> // Object
        {
            explicit ParticleManager(Ent::Property _node): HelperObject<ParticleManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "ParticleManager";
            static ParticleManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ParticleManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ParticleManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ParticleManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ParticleManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ParticleManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ParticleManager makeInstanceOf()
            {
                return ParticleManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int PoolSize() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct NavMeshManager : HelperObject<NavMeshManager> // Object
        {
            explicit NavMeshManager(Ent::Property _node): HelperObject<NavMeshManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "NavMeshManager";
            static NavMeshManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return NavMeshManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static NavMeshManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return NavMeshManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static NavMeshManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return NavMeshManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            NavMeshManager makeInstanceOf()
            {
                return NavMeshManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float NavMeshMaxHeight() const;
            Ent::Gen2::Float NavMeshMaxSize() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::RecastNavmeshGenerationParameters> RecastParameters() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::Float TileMargin() const;
            Ent::Gen2::Float TileSize() const;
            Ent::Gen2::Float VerticalTolerance() const;
            Ent::Gen2::String _comment() const;
        };

        struct LoadSaveManager : HelperObject<LoadSaveManager> // Object
        {
            explicit LoadSaveManager(Ent::Property _node): HelperObject<LoadSaveManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "LoadSaveManager";
            static LoadSaveManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return LoadSaveManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static LoadSaveManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return LoadSaveManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static LoadSaveManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return LoadSaveManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            LoadSaveManager makeInstanceOf()
            {
                return LoadSaveManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String ClothDataFile() const;
            Ent::Gen2::String IconDataFile() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct LightManager : HelperObject<LightManager> // Object
        {
            explicit LightManager(Ent::Property _node): HelperObject<LightManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "LightManager";
            static LightManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return LightManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static LightManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return LightManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static LightManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return LightManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            LightManager makeInstanceOf()
            {
                return LightManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct InputManager : HelperObject<InputManager> // Object
        {
            explicit InputManager(Ent::Property _node): HelperObject<InputManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "InputManager";
            static InputManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InputManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InputManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InputManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InputManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InputManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InputManager makeInstanceOf()
            {
                return InputManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct InfoboardManager : HelperObject<InfoboardManager> // Object
        {
            explicit InfoboardManager(Ent::Property _node): HelperObject<InfoboardManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "InfoboardManager";
            static InfoboardManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InfoboardManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InfoboardManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InfoboardManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InfoboardManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InfoboardManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InfoboardManager makeInstanceOf()
            {
                return InfoboardManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct HeightMapManager : HelperObject<HeightMapManager> // Object
        {
            explicit HeightMapManager(Ent::Property _node): HelperObject<HeightMapManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "HeightMapManager";
            static HeightMapManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HeightMapManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HeightMapManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HeightMapManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HeightMapManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HeightMapManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HeightMapManager makeInstanceOf()
            {
                return HeightMapManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct GroundTypeManager : HelperObject<GroundTypeManager> // Object
        {
            explicit GroundTypeManager(Ent::Property _node): HelperObject<GroundTypeManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "GroundTypeManager";
            static GroundTypeManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GroundTypeManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GroundTypeManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GroundTypeManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GroundTypeManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GroundTypeManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GroundTypeManager makeInstanceOf()
            {
                return GroundTypeManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameMasterManager : HelperObject<GameMasterManager> // Object
        {
            explicit GameMasterManager(Ent::Property _node): HelperObject<GameMasterManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameMasterManager";
            static GameMasterManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameMasterManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameMasterManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameMasterManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameMasterManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameMasterManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameMasterManager makeInstanceOf()
            {
                return GameMasterManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float MaxTimeBetweenSoulOpportunityRespawn() const;
            Ent::Gen2::Float MinDistBetweenSoulOpportunityRespawn() const;
            Ent::Gen2::Float RadiusWithoutEnemy() const;
            Ent::Gen2::Float SoulOpportunitySpawnRadius() const;
            Ent::Gen2::Float SoulOpportunityUnspawnInsideFrustumRadius() const;
            Ent::Gen2::Float SoulOpportunityUnspawnOutsideFrustumRadius() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameEffectManager : HelperObject<GameEffectManager> // Object
        {
            explicit GameEffectManager(Ent::Property _node): HelperObject<GameEffectManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameEffectManager";
            static GameEffectManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameEffectManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameEffectManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameEffectManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameEffectManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameEffectManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameEffectManager makeInstanceOf()
            {
                return GameEffectManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String GameEffectFileExtension() const;
            Ent::Gen2::String GameEffectsRootPath() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidManager : HelperObject<FluidManager> // Object
        {
            explicit FluidManager(Ent::Property _node): HelperObject<FluidManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidManager";
            static FluidManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidManager makeInstanceOf()
            {
                return FluidManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidGameplayQueriesManager : HelperObject<FluidGameplayQueriesManager> // Object
        {
            explicit FluidGameplayQueriesManager(Ent::Property _node): HelperObject<FluidGameplayQueriesManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidGameplayQueriesManager";
            static FluidGameplayQueriesManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidGameplayQueriesManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidGameplayQueriesManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidGameplayQueriesManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidGameplayQueriesManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidGameplayQueriesManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidGameplayQueriesManager makeInstanceOf()
            {
                return FluidGameplayQueriesManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FightManager : HelperObject<FightManager> // Object
        {
            explicit FightManager(Ent::Property _node): HelperObject<FightManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "FightManager";
            static FightManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FightManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FightManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FightManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FightManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FightManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FightManager makeInstanceOf()
            {
                return FightManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EventManager : HelperObject<EventManager> // Object
        {
            explicit EventManager(Ent::Property _node): HelperObject<EventManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "EventManager";
            static EventManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EventManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EventManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EventManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EventManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EventManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EventManager makeInstanceOf()
            {
                return EventManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnvironmentManager : HelperObject<EnvironmentManager> // Object
        {
            explicit EnvironmentManager(Ent::Property _node): HelperObject<EnvironmentManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnvironmentManager";
            static EnvironmentManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnvironmentManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnvironmentManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnvironmentManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnvironmentManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnvironmentManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnvironmentManager makeInstanceOf()
            {
                return EnvironmentManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityManager : HelperObject<EntityManager> // Object
        {
            explicit EntityManager(Ent::Property _node): HelperObject<EntityManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityManager";
            static EntityManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityManager makeInstanceOf()
            {
                return EntityManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct DialogManager : HelperObject<DialogManager> // Object
        {
            explicit DialogManager(Ent::Property _node): HelperObject<DialogManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "DialogManager";
            static DialogManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DialogManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DialogManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DialogManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DialogManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DialogManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DialogManager makeInstanceOf()
            {
                return DialogManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String DialogFileExtension() const;
            Ent::Gen2::String DialogsRootPath() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BoidsManager : HelperObject<BoidsManager> // Object
        {
            explicit BoidsManager(Ent::Property _node): HelperObject<BoidsManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "BoidsManager";
            static BoidsManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BoidsManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BoidsManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BoidsManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BoidsManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BoidsManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BoidsManager makeInstanceOf()
            {
                return BoidsManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float FirstRootSpeedFactor() const;
            Ent::Gen2::Float MergeEntityDistanceMultiplier() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String boidPresets() const;
        };

        struct BillboardManager : HelperObject<BillboardManager> // Object
        {
            explicit BillboardManager(Ent::Property _node): HelperObject<BillboardManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "BillboardManager";
            static BillboardManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BillboardManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BillboardManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BillboardManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BillboardManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BillboardManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BillboardManager makeInstanceOf()
            {
                return BillboardManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BehaviorManager : HelperObject<BehaviorManager> // Object
        {
            explicit BehaviorManager(Ent::Property _node): HelperObject<BehaviorManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "BehaviorManager";
            static BehaviorManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BehaviorManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BehaviorManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BehaviorManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BehaviorManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BehaviorManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BehaviorManager makeInstanceOf()
            {
                return BehaviorManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimalManager : HelperObject<AnimalManager> // Object
        {
            explicit AnimalManager(Ent::Property _node): HelperObject<AnimalManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimalManager";
            static AnimalManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimalManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimalManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimalManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimalManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimalManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimalManager makeInstanceOf()
            {
                return AnimalManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String animalName() const;
        };

        struct ActorManager : HelperObject<ActorManager> // Object
        {
            explicit ActorManager(Ent::Property _node): HelperObject<ActorManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorManager";
            static ActorManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorManager makeInstanceOf()
            {
                return ActorManager(getProperty().makeInstanceOf());
            }
            Array<PrimArray<Ent::Gen2::Float>> SizePerceptionRanges() const;
            PrimArray<Ent::Gen2::Float> Sizes() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateManager : HelperObject<ActionStateManager> // Object
        {
            explicit ActionStateManager(Ent::Property _node): HelperObject<ActionStateManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateManager";
            static ActionStateManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateManager makeInstanceOf()
            {
                return ActionStateManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String ArbiterConfigFile() const;
            Ent::Gen2::Bool ForceTraceActorState() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct LocomotionMode : EnumPropHelper<LocomotionMode, LocomotionModeEnum> // Enum
        {
            using Enum = LocomotionModeEnum;
            using PropHelper<LocomotionMode, Enum>::operator=;
            explicit LocomotionMode(Ent::Property _node): EnumPropHelper<LocomotionMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "LocomotionMode";
            static constexpr char const* enumToString[] = {
                "standup",
                "quadstandup",
                "crouch",
                "prone",
                "swim",
                "ride",
                "fly",
                "dive",
                "fall",
                "cinematic",
                "ridden",
                "riddenfly",
                "fight",
                "clamber",
                "buried",
                "count",
            };
        };
        inline char const* toString(LocomotionModeEnum value)
        {
            if(size_t(value) >= std::size(LocomotionMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return LocomotionMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(LocomotionModeEnum value) { return toString(value); }
        template<> inline LocomotionModeEnum strToEnum<LocomotionModeEnum>(char const* value)
        {
            return static_cast<LocomotionModeEnum>(details::indexInEnum(value, LocomotionMode::enumToString));
        }

        struct MoveCapacityData_ReachSpeed : HelperObject<MoveCapacityData_ReachSpeed> // Object
        {
            explicit MoveCapacityData_ReachSpeed(Ent::Property _node): HelperObject<MoveCapacityData_ReachSpeed>(std::move(_node)) {}
            static constexpr char schemaName[] = "MoveCapacityData::ReachSpeed";
            static MoveCapacityData_ReachSpeed load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MoveCapacityData_ReachSpeed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MoveCapacityData_ReachSpeed loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MoveCapacityData_ReachSpeed(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MoveCapacityData_ReachSpeed create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MoveCapacityData_ReachSpeed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MoveCapacityData_ReachSpeed makeInstanceOf()
            {
                return MoveCapacityData_ReachSpeed(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float acceleration() const;
            Ent::Gen2::Float deceleration() const;
            Ent::Gen2::LocomotionMode name() const;
        };

        struct ListItem : HelperObject<ListItem> // Object
        {
            explicit ListItem(Ent::Property _node): HelperObject<ListItem>(std::move(_node)) {}
            
            Ent::Gen2::String EntityPath() const;
            Ent::Gen2::EntityRef EntityRef() const;
            Ent::Gen2::String Tag() const;
            Ent::Gen2::String Thumbnail() const;
            Ent::Gen2::String _comment() const;
        };

        struct LightType : EnumPropHelper<LightType, LightTypeEnum> // Enum
        {
            using Enum = LightTypeEnum;
            using PropHelper<LightType, Enum>::operator=;
            explicit LightType(Ent::Property _node): EnumPropHelper<LightType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "LightType";
            static constexpr char const* enumToString[] = {
                "Omni",
                "Hemi",
                "Spot",
                "Dir",
                "LightType_Count",
            };
        };
        inline char const* toString(LightTypeEnum value)
        {
            if(size_t(value) >= std::size(LightType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return LightType::enumToString[size_t(value)];
        }
        inline char const* toInternal(LightTypeEnum value) { return toString(value); }
        template<> inline LightTypeEnum strToEnum<LightTypeEnum>(char const* value)
        {
            return static_cast<LightTypeEnum>(details::indexInEnum(value, LightType::enumToString));
        }

        struct Light : HelperObject<Light> // Object
        {
            explicit Light(Ent::Property _node): HelperObject<Light>(std::move(_node)) {}
            static constexpr char schemaName[] = "Light";
            static Light load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Light(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Light loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Light(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Light create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Light(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Light makeInstanceOf()
            {
                return Light(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Brightness() const;
            Ent::Gen2::Bool Cast_Shadows() const;
            Ent::Gen2::Vector3 Color() const;
            Ent::Gen2::Float Dpsm_Plane_Threshold() const;
            Ent::Gen2::Float Dpsm_Seam_Offset() const;
            Ent::Gen2::Bool Enabled() const;
            Ent::Gen2::Float Linear_attenuation_start() const;
            Ent::Gen2::Float Linear_attenuation_stop() const;
            Ent::Gen2::Float Radial_attenuation_start() const;
            Ent::Gen2::Float Radial_attenuation_stop() const;
            Ent::Gen2::Float Shadow_Depth_Bias() const;
            Ent::Gen2::Float Shadow_Depth_Bias_Factor() const;
            Ent::Gen2::LightType Type_() const;
            Ent::Gen2::Bool Volumetric_Fog() const;
            Ent::Gen2::String _comment() const;
        };

        struct LightAttackData : HelperObject<LightAttackData> // Object
        {
            explicit LightAttackData(Ent::Property _node): HelperObject<LightAttackData>(std::move(_node)) {}
            static constexpr char schemaName[] = "LightAttackData";
            static LightAttackData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return LightAttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static LightAttackData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return LightAttackData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static LightAttackData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return LightAttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            LightAttackData makeInstanceOf()
            {
                return LightAttackData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ResponsiblePointer_ActorState_ LightAttackState() const;
            Ent::Gen2::String _comment() const;
        };

        struct lightAttackData : HelperObject<lightAttackData> // Object
        {
            explicit lightAttackData(Ent::Property _node): HelperObject<lightAttackData>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::LightAttackData val() const;
        };

        struct LedgePositionInfo : HelperObject<LedgePositionInfo> // Object
        {
            explicit LedgePositionInfo(Ent::Property _node): HelperObject<LedgePositionInfo>(std::move(_node)) {}
            static constexpr char schemaName[] = "LedgePositionInfo";
            static LedgePositionInfo load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return LedgePositionInfo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static LedgePositionInfo loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return LedgePositionInfo(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static LedgePositionInfo create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return LedgePositionInfo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            LedgePositionInfo makeInstanceOf()
            {
                return LedgePositionInfo(getProperty().makeInstanceOf());
            }
        
        };

        struct JumpHeightMultiplier : HelperObject<JumpHeightMultiplier> // Object
        {
            explicit JumpHeightMultiplier(Ent::Property _node): HelperObject<JumpHeightMultiplier>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct IsActive : HelperObject<IsActive> // Object
        {
            explicit IsActive(Ent::Property _node): HelperObject<IsActive>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct Invincible : HelperObject<Invincible> // Object
        {
            explicit Invincible(Ent::Property _node): HelperObject<Invincible>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct InventoryTags : EnumPropHelper<InventoryTags, InventoryTagsEnum> // Enum
        {
            using Enum = InventoryTagsEnum;
            using PropHelper<InventoryTags, Enum>::operator=;
            explicit InventoryTags(Ent::Property _node): EnumPropHelper<InventoryTags, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "InventoryTags";
            static constexpr char const* enumToString[] = {
                "outfit",
                "item",
                "default",
                "lush",
                "corrupted",
                "soul",
                "disguise",
                "soulfreedflying",
                "soulfreednormal",
                "InventoryTags_COUNT",
            };
        };
        inline char const* toString(InventoryTagsEnum value)
        {
            if(size_t(value) >= std::size(InventoryTags::enumToString))
                throw std::runtime_error("Wrong enum value");
            return InventoryTags::enumToString[size_t(value)];
        }
        inline char const* toInternal(InventoryTagsEnum value) { return toString(value); }
        template<> inline InventoryTagsEnum strToEnum<InventoryTagsEnum>(char const* value)
        {
            return static_cast<InventoryTagsEnum>(details::indexInEnum(value, InventoryTags::enumToString));
        }

        struct TaggedEntityRef : HelperObject<TaggedEntityRef> // Object
        {
            explicit TaggedEntityRef(Ent::Property _node): HelperObject<TaggedEntityRef>(std::move(_node)) {}
            static constexpr char schemaName[] = "TaggedEntityRef";
            static TaggedEntityRef load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TaggedEntityRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TaggedEntityRef loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TaggedEntityRef(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TaggedEntityRef create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TaggedEntityRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TaggedEntityRef makeInstanceOf()
            {
                return TaggedEntityRef(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef EntityRef() const;
            PrimArray<Ent::Gen2::InventoryTags> Tags() const;
            Ent::Gen2::String _comment() const;
        };

        struct InterpolationMethod : EnumPropHelper<InterpolationMethod, InterpolationMethodEnum> // Enum
        {
            using Enum = InterpolationMethodEnum;
            using PropHelper<InterpolationMethod, Enum>::operator=;
            explicit InterpolationMethod(Ent::Property _node): EnumPropHelper<InterpolationMethod, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "InterpolationMethod";
            static constexpr char const* enumToString[] = {
                "Spline",
                "BSpline",
                "InterpolationMethod_COUNT",
            };
        };
        inline char const* toString(InterpolationMethodEnum value)
        {
            if(size_t(value) >= std::size(InterpolationMethod::enumToString))
                throw std::runtime_error("Wrong enum value");
            return InterpolationMethod::enumToString[size_t(value)];
        }
        inline char const* toInternal(InterpolationMethodEnum value) { return toString(value); }
        template<> inline InterpolationMethodEnum strToEnum<InterpolationMethodEnum>(char const* value)
        {
            return static_cast<InterpolationMethodEnum>(details::indexInEnum(value, InterpolationMethod::enumToString));
        }

        struct TrailProperties : HelperObject<TrailProperties> // Object
        {
            explicit TrailProperties(Ent::Property _node): HelperObject<TrailProperties>(std::move(_node)) {}
            static constexpr char schemaName[] = "TrailProperties";
            static TrailProperties load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TrailProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TrailProperties loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TrailProperties(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TrailProperties create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TrailProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TrailProperties makeInstanceOf()
            {
                return TrailProperties(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ComputeSplineCurvilinearUV() const;
            Ent::Gen2::Float Duration() const;
            PrimArray<Ent::Gen2::Int> FadeLuminosity() const;
            PrimArray<Ent::Gen2::Int> FadeSize() const;
            Ent::Gen2::Vector3 FrontalAxis() const;
            Ent::Gen2::Vector3 HorizontalAxis() const;
            Ent::Gen2::InterpolationMethod InterpolationMethod() const;
            Ent::Gen2::Float IntervalBetweenTrailPoints() const;
            Ent::Gen2::Float Luminosity() const;
            Ent::Gen2::String LuminosityCurvePath() const;
            Ent::Gen2::Float LuminosityVariability() const;
            Ent::Gen2::Int NbSplinePointsBetweenTrailPoints() const;
            Array<Ent::Gen2::TrailRendererProperties> RenderingProperties() const;
            Ent::Gen2::TrailRenderingType RenderingType() const;
            Ent::Gen2::Vector2 Size() const;
            Ent::Gen2::String SizeCurvePath() const;
            Ent::Gen2::Vector2 SizeVariability() const;
            Ent::Gen2::Bool TrimTransparentPoints() const;
            Ent::Gen2::TrailUVUnwrappingMode UVUnwrappingMode() const;
            Ent::Gen2::String UVZoomCurvilinearCurvePath() const;
            Ent::Gen2::Vector3 VerticalAxis() const;
            Ent::Gen2::String _comment() const;
        };

        struct Interactor : HelperObject<Interactor> // Object
        {
            explicit Interactor(Ent::Property _node): HelperObject<Interactor>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
        };

        struct InputCollisionBehaviorData : HelperObject<InputCollisionBehaviorData> // Object
        {
            explicit InputCollisionBehaviorData(Ent::Property _node): HelperObject<InputCollisionBehaviorData>(std::move(_node)) {}
            static constexpr char schemaName[] = "InputCollisionBehaviorData";
            static InputCollisionBehaviorData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InputCollisionBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InputCollisionBehaviorData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InputCollisionBehaviorData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InputCollisionBehaviorData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InputCollisionBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InputCollisionBehaviorData makeInstanceOf()
            {
                return InputCollisionBehaviorData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AltitudeMax() const;
            Ent::Gen2::Float DepthMax() const;
            Ent::Gen2::Float FrontAngle() const;
            Ent::Gen2::Float RadiusCoeff() const;
            Ent::Gen2::String _comment() const;
        };

        struct InertiaTensor : HelperObject<InertiaTensor> // Object
        {
            explicit InertiaTensor(Ent::Property _node): HelperObject<InertiaTensor>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Vector3 val() const;
        };

        struct ImpactAndSolidityData : HelperObject<ImpactAndSolidityData> // Object
        {
            explicit ImpactAndSolidityData(Ent::Property _node): HelperObject<ImpactAndSolidityData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ImpactAndSolidityData";
            static ImpactAndSolidityData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ImpactAndSolidityData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ImpactAndSolidityData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ImpactAndSolidityData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ImpactAndSolidityData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ImpactAndSolidityData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ImpactAndSolidityData makeInstanceOf()
            {
                return ImpactAndSolidityData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            PrimArray<Ent::Gen2::Float> impactPercent() const;
            Ent::Gen2::Float solidity() const;
            Ent::Gen2::Bool unbreakable() const;
            Ent::Gen2::Float velocityImpactMax() const;
        };

        struct ID : HelperObject<ID> // Object
        {
            explicit ID(Ent::Property _node): HelperObject<ID>(std::move(_node)) {}
            
        
        };

        struct PhysicsReplicateData : HelperObject<PhysicsReplicateData> // Object
        {
            explicit PhysicsReplicateData(Ent::Property _node): HelperObject<PhysicsReplicateData>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsReplicateData";
            static PhysicsReplicateData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsReplicateData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsReplicateData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsReplicateData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsReplicateData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsReplicateData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsReplicateData makeInstanceOf()
            {
                return PhysicsReplicateData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector3 AngularV() const;
            Ent::Gen2::ID ID() const;
            Ent::Gen2::Vector3 LinearV() const;
            Ent::Gen2::Position Position() const;
            Ent::Gen2::Quat Rotation() const;
            Ent::Gen2::String _comment() const;
        };

        struct HotSpotType : EnumPropHelper<HotSpotType, HotSpotTypeEnum> // Enum
        {
            using Enum = HotSpotTypeEnum;
            using PropHelper<HotSpotType, Enum>::operator=;
            explicit HotSpotType(Ent::Property _node): EnumPropHelper<HotSpotType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "HotSpotType";
            static constexpr char const* enumToString[] = {
                "all",
                "none",
                "back",
                "beam",
                "bite",
                "biter",
                "breakablestrong",
                "breakableweak",
                "camera",
                "center",
                "grab",
                "head",
                "heal",
                "ride",
                "root",
                "snap",
                "slot",
                "spawnlife",
                "shoot",
                "take",
                "takehandle",
                "vertebra",
                "respawnslot",
                "HotSpotType_COUNT",
            };
        };
        inline char const* toString(HotSpotTypeEnum value)
        {
            if(size_t(value) >= std::size(HotSpotType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return HotSpotType::enumToString[size_t(value)];
        }
        inline char const* toInternal(HotSpotTypeEnum value) { return toString(value); }
        template<> inline HotSpotTypeEnum strToEnum<HotSpotTypeEnum>(char const* value)
        {
            return static_cast<HotSpotTypeEnum>(details::indexInEnum(value, HotSpotType::enumToString));
        }

        struct PickableDistributorComponentData : HelperObject<PickableDistributorComponentData> // Object
        {
            explicit PickableDistributorComponentData(Ent::Property _node): HelperObject<PickableDistributorComponentData>(std::move(_node)) {}
            static constexpr char schemaName[] = "PickableDistributorComponentData";
            static PickableDistributorComponentData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PickableDistributorComponentData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PickableDistributorComponentData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PickableDistributorComponentData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PickableDistributorComponentData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PickableDistributorComponentData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PickableDistributorComponentData makeInstanceOf()
            {
                return PickableDistributorComponentData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef EntityRef() const;
            Ent::Gen2::HotSpotType HotspotType() const;
            Ent::Gen2::String _comment() const;
        };

        struct HotspotData : HelperObject<HotspotData> // Object
        {
            explicit HotspotData(Ent::Property _node): HelperObject<HotspotData>(std::move(_node)) {}
            static constexpr char schemaName[] = "HotspotData";
            static HotspotData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HotspotData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HotspotData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HotspotData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HotspotData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HotspotData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HotspotData makeInstanceOf()
            {
                return HotspotData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Bone() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::Quat Orientation() const;
            Ent::Gen2::Float Scale() const;
            Ent::Gen2::PrimitiveSet<char const*> Tags() const;
            Ent::Gen2::EntityRef TargetEntityRef() const;
            Ent::Gen2::HotSpotType Type_() const;
            Ent::Gen2::String _comment() const;
        };

        struct HitWallEnvironmentData : HelperObject<HitWallEnvironmentData> // Object
        {
            explicit HitWallEnvironmentData(Ent::Property _node): HelperObject<HitWallEnvironmentData>(std::move(_node)) {}
            static constexpr char schemaName[] = "HitWallEnvironmentData";
            static HitWallEnvironmentData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HitWallEnvironmentData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HitWallEnvironmentData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HitWallEnvironmentData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HitWallEnvironmentData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HitWallEnvironmentData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HitWallEnvironmentData makeInstanceOf()
            {
                return HitWallEnvironmentData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float NormalAngleMax() const;
            Ent::Gen2::Float NormalAngleMin() const;
            Ent::Gen2::Float RetimingVerticalAngleMax() const;
            Ent::Gen2::Float RetimingVerticalAngleMin() const;
            Ent::Gen2::String _comment() const;
        };

        struct HitWallData : HelperObject<HitWallData> // Object
        {
            explicit HitWallData(Ent::Property _node): HelperObject<HitWallData>(std::move(_node)) {}
            static constexpr char schemaName[] = "HitWallData";
            static HitWallData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HitWallData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HitWallData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HitWallData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HitWallData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HitWallData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HitWallData makeInstanceOf()
            {
                return HitWallData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AverageSpeedThreshold() const;
            Ent::Gen2::Float ContactAngleMax() const;
            Ent::Gen2::HitWallEnvironmentData DefaultEnvironmentData() const;
            Ent::Gen2::HitWallEnvironmentData GroundedEnvironmentData() const;
            Ent::Gen2::Float HitWallFallHeightThreshold() const;
            Ent::Gen2::Float OrientationAlignementFactor() const;
            Ent::Gen2::Float RetimingHorizontalAngleMax() const;
            Ent::Gen2::String _comment() const;
        };

        struct HitType : EnumPropHelper<HitType, HitTypeEnum> // Enum
        {
            using Enum = HitTypeEnum;
            using PropHelper<HitType, Enum>::operator=;
            explicit HitType(Ent::Property _node): EnumPropHelper<HitType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "HitType";
            static constexpr char const* enumToString[] = {
                "HitInstant",
                "HitPoison",
                "HitType_COUNT",
            };
        };
        inline char const* toString(HitTypeEnum value)
        {
            if(size_t(value) >= std::size(HitType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return HitType::enumToString[size_t(value)];
        }
        inline char const* toInternal(HitTypeEnum value) { return toString(value); }
        template<> inline HitTypeEnum strToEnum<HitTypeEnum>(char const* value)
        {
            return static_cast<HitTypeEnum>(details::indexInEnum(value, HitType::enumToString));
        }

        struct HitStyle : EnumPropHelper<HitStyle, HitStyleEnum> // Enum
        {
            using Enum = HitStyleEnum;
            using PropHelper<HitStyle, Enum>::operator=;
            explicit HitStyle(Ent::Property _node): EnumPropHelper<HitStyle, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "HitStyle";
            static constexpr char const* enumToString[] = {
                "None",
                "Bite",
                "Light",
                "Medium",
                "Big",
                "Eject",
                "EjectFar",
                "Fall",
                "Impact",
                "HitStyle_COUNT",
            };
        };
        inline char const* toString(HitStyleEnum value)
        {
            if(size_t(value) >= std::size(HitStyle::enumToString))
                throw std::runtime_error("Wrong enum value");
            return HitStyle::enumToString[size_t(value)];
        }
        inline char const* toInternal(HitStyleEnum value) { return toString(value); }
        template<> inline HitStyleEnum strToEnum<HitStyleEnum>(char const* value)
        {
            return static_cast<HitStyleEnum>(details::indexInEnum(value, HitStyle::enumToString));
        }

        struct HeadCollisionBehaviorData : HelperObject<HeadCollisionBehaviorData> // Object
        {
            explicit HeadCollisionBehaviorData(Ent::Property _node): HelperObject<HeadCollisionBehaviorData>(std::move(_node)) {}
            static constexpr char schemaName[] = "HeadCollisionBehaviorData";
            static HeadCollisionBehaviorData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HeadCollisionBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HeadCollisionBehaviorData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HeadCollisionBehaviorData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HeadCollisionBehaviorData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HeadCollisionBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HeadCollisionBehaviorData makeInstanceOf()
            {
                return HeadCollisionBehaviorData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float disableDuration() const;
            Ent::Gen2::Float enableDuration() const;
            Ent::Gen2::Vector3 headOffset() const;
            Ent::Gen2::Bool isEnabled() const;
            Ent::Gen2::Float radiusCoeff() const;
            Ent::Gen2::ScaleConverter slopeInfluence() const;
            Ent::Gen2::Float softCollisionRigidbodyCoeff() const;
            Ent::Gen2::Float softCollisionVisualCoeff() const;
            Ent::Gen2::ScaleConverter speedInfluence() const;
            Ent::Gen2::ScaleConverter visualSmoothOut() const;
        };

        struct GrowingState : EnumPropHelper<GrowingState, GrowingStateEnum> // Enum
        {
            using Enum = GrowingStateEnum;
            using PropHelper<GrowingState, Enum>::operator=;
            explicit GrowingState(Ent::Property _node): EnumPropHelper<GrowingState, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "GrowingState";
            static constexpr char const* enumToString[] = {
                "invalid",
                "nogrow",
                "growing",
                "grown",
                "manualgrow",
                "degrowing",
                "GrowingState_COUNT",
            };
        };
        inline char const* toString(GrowingStateEnum value)
        {
            if(size_t(value) >= std::size(GrowingState::enumToString))
                throw std::runtime_error("Wrong enum value");
            return GrowingState::enumToString[size_t(value)];
        }
        inline char const* toInternal(GrowingStateEnum value) { return toString(value); }
        template<> inline GrowingStateEnum strToEnum<GrowingStateEnum>(char const* value)
        {
            return static_cast<GrowingStateEnum>(details::indexInEnum(value, GrowingState::enumToString));
        }

        struct GroupAvoidanceEnum : EnumPropHelper<GroupAvoidanceEnum, GroupAvoidanceEnumEnum> // Enum
        {
            using Enum = GroupAvoidanceEnumEnum;
            using PropHelper<GroupAvoidanceEnum, Enum>::operator=;
            explicit GroupAvoidanceEnum(Ent::Property _node): EnumPropHelper<GroupAvoidanceEnum, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "GroupAvoidanceEnum";
            static constexpr char const* enumToString[] = {
                "lush",
                "corrupted",
                "tiny",
                "small",
                "medium",
                "big",
                "enormous",
                "GroupAvoidanceEnum_COUNT",
            };
        };
        inline char const* toString(GroupAvoidanceEnumEnum value)
        {
            if(size_t(value) >= std::size(GroupAvoidanceEnum::enumToString))
                throw std::runtime_error("Wrong enum value");
            return GroupAvoidanceEnum::enumToString[size_t(value)];
        }
        inline char const* toInternal(GroupAvoidanceEnumEnum value) { return toString(value); }
        template<> inline GroupAvoidanceEnumEnum strToEnum<GroupAvoidanceEnumEnum>(char const* value)
        {
            return static_cast<GroupAvoidanceEnumEnum>(details::indexInEnum(value, GroupAvoidanceEnum::enumToString));
        }

        struct VelocityObstaclesManager : HelperObject<VelocityObstaclesManager> // Object
        {
            explicit VelocityObstaclesManager(Ent::Property _node): HelperObject<VelocityObstaclesManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "VelocityObstaclesManager";
            static VelocityObstaclesManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VelocityObstaclesManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VelocityObstaclesManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VelocityObstaclesManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VelocityObstaclesManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VelocityObstaclesManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VelocityObstaclesManager makeInstanceOf()
            {
                return VelocityObstaclesManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AcceptableAccelerationForAvoidance() const;
            Ent::Gen2::Bool Active() const;
            Ent::Gen2::Float AvoidanceRadiusAdaptabilityFactor() const;
            Ent::Gen2::Map<SizeEnum, PrimArray<Ent::Gen2::GroupAvoidanceEnum>> GroupsAvoidanceIgnoredBySize() const;
            Ent::Gen2::Float RunningSpeed() const;
            Ent::Gen2::Int SimMaxNeighbors() const;
            Ent::Gen2::Float SimMaxSpeed() const;
            Ent::Gen2::Float SimNeighborDist() const;
            Ent::Gen2::Float SimPrefSpeedFactor() const;
            Ent::Gen2::Float SimRadius() const;
            Ent::Gen2::Int SimSlowDownWhenAvoiding() const;
            Ent::Gen2::Float SimTimeHorizon() const;
            Ent::Gen2::Float SimTimeHorizonObst() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::Float WalkingSpeed() const;
            Ent::Gen2::String _comment() const;
        };

        struct GroundTypeData : HelperObject<GroundTypeData> // Object
        {
            explicit GroundTypeData(Ent::Property _node): HelperObject<GroundTypeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GroundTypeData";
            static GroundTypeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GroundTypeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GroundTypeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GroundTypeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GroundTypeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GroundTypeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GroundTypeData makeInstanceOf()
            {
                return GroundTypeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float GrainRangeMax() const;
            Ent::Gen2::Float GrainRangeMin() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::Float RegenRangeMax() const;
            Ent::Gen2::Float RegenRangeMin() const;
            Ent::Gen2::String _comment() const;
        };

        struct GrasperInteractionData : HelperObject<GrasperInteractionData> // Object
        {
            explicit GrasperInteractionData(Ent::Property _node): HelperObject<GrasperInteractionData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GrasperInteractionData";
            static GrasperInteractionData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GrasperInteractionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GrasperInteractionData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GrasperInteractionData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GrasperInteractionData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GrasperInteractionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GrasperInteractionData makeInstanceOf()
            {
                return GrasperInteractionData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float anticipationSpeedFactor() const;
            Ent::Gen2::Float attackDamages() const;
            Ent::Gen2::Float deltaAngleMax() const;
            Ent::Gen2::Float distanceHysteris() const;
            Ent::Gen2::Float distanceMax() const;
            Ent::Gen2::Float graspDurationMax() const;
            Ent::Gen2::Float graspOutVisualRotationRate() const;
            Ent::Gen2::Float graspStrength() const;
            Ent::Gen2::String interactableBoneName() const;
            Ent::Gen2::ScaleConverter syncDeltaRotationDuration() const;
            Ent::Gen2::ScaleConverter syncDeltaTranslationDuration() const;
        };

        struct GraspableInteractionData : HelperObject<GraspableInteractionData> // Object
        {
            explicit GraspableInteractionData(Ent::Property _node): HelperObject<GraspableInteractionData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GraspableInteractionData";
            static GraspableInteractionData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GraspableInteractionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GraspableInteractionData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GraspableInteractionData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GraspableInteractionData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GraspableInteractionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GraspableInteractionData makeInstanceOf()
            {
                return GraspableInteractionData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float graspStrength() const;
            Ent::Gen2::Float graspedDurationMax() const;
            Ent::Gen2::HotSpotType hotspotType() const;
            Ent::Gen2::ScaleConverter impactRetiming() const;
            Ent::Gen2::Float incapacitatedTime() const;
            Ent::Gen2::String interactableBoneName() const;
            Ent::Gen2::Float visualRotationRate() const;
        };

        struct GraspType : EnumPropHelper<GraspType, GraspTypeEnum> // Enum
        {
            using Enum = GraspTypeEnum;
            using PropHelper<GraspType, Enum>::operator=;
            explicit GraspType(Ent::Property _node): EnumPropHelper<GraspType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "GraspType";
            static constexpr char const* enumToString[] = {
                "Bite",
                "Grab",
                "Hold",
                "GraspType_COUNT",
            };
        };
        inline char const* toString(GraspTypeEnum value)
        {
            if(size_t(value) >= std::size(GraspType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return GraspType::enumToString[size_t(value)];
        }
        inline char const* toInternal(GraspTypeEnum value) { return toString(value); }
        template<> inline GraspTypeEnum strToEnum<GraspTypeEnum>(char const* value)
        {
            return static_cast<GraspTypeEnum>(details::indexInEnum(value, GraspType::enumToString));
        }

        struct GraspResistanceData : HelperObject<GraspResistanceData> // Object
        {
            explicit GraspResistanceData(Ent::Property _node): HelperObject<GraspResistanceData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GraspResistanceData";
            static GraspResistanceData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GraspResistanceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GraspResistanceData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GraspResistanceData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GraspResistanceData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GraspResistanceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GraspResistanceData makeInstanceOf()
            {
                return GraspResistanceData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float resistanceMax() const;
            Ent::Gen2::ScaleConverter strengthMultiplierCurve() const;
        };

        struct GeometryStamper : HelperObject<GeometryStamper> // Object
        {
            explicit GeometryStamper(Ent::Property _node): HelperObject<GeometryStamper>(std::move(_node)) {}
            static constexpr char schemaName[] = "GeometryStamper";
            static GeometryStamper load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GeometryStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GeometryStamper loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GeometryStamper(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GeometryStamper create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GeometryStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GeometryStamper makeInstanceOf()
            {
                return GeometryStamper(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Transform3D Transform() const;
            Ent::Gen2::String _comment() const;
        };

        struct SkinnedPhysMeshStamper : HelperObject<SkinnedPhysMeshStamper> // Object
        {
            explicit SkinnedPhysMeshStamper(Ent::Property _node): HelperObject<SkinnedPhysMeshStamper>(std::move(_node)) {}
            static constexpr char schemaName[] = "SkinnedPhysMeshStamper";
            static SkinnedPhysMeshStamper load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SkinnedPhysMeshStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SkinnedPhysMeshStamper loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SkinnedPhysMeshStamper(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SkinnedPhysMeshStamper create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SkinnedPhysMeshStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SkinnedPhysMeshStamper makeInstanceOf()
            {
                return SkinnedPhysMeshStamper(getProperty().makeInstanceOf());
            }
            Ent::Gen2::GeometryStamper Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct MeshStamper : HelperObject<MeshStamper> // Object
        {
            explicit MeshStamper(Ent::Property _node): HelperObject<MeshStamper>(std::move(_node)) {}
            static constexpr char schemaName[] = "MeshStamper";
            static MeshStamper load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MeshStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MeshStamper loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MeshStamper(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MeshStamper create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MeshStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MeshStamper makeInstanceOf()
            {
                return MeshStamper(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String MeshFilePath() const;
            Ent::Gen2::GeometryStamper Super() const;
            Ent::Gen2::Walkability Walkability() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameTimeInMs : HelperObject<GameTimeInMs> // Object
        {
            explicit GameTimeInMs(Ent::Property _node): HelperObject<GameTimeInMs>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameTimeInMs";
            static GameTimeInMs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameTimeInMs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameTimeInMs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameTimeInMs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameTimeInMs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameTimeInMs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameTimeInMs makeInstanceOf()
            {
                return GameTimeInMs(getProperty().makeInstanceOf());
            }
        
        };

        struct GameProfile : HelperObject<GameProfile> // Object
        {
            explicit GameProfile(Ent::Property _node): HelperObject<GameProfile>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameProfile";
            static GameProfile load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameProfile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameProfile loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameProfile(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameProfile create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameProfile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameProfile makeInstanceOf()
            {
                return GameProfile(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Array<Array<Ent::Gen2::Tuple<Ent::Gen2::GameTimeInMs, Ent::Gen2::Float>>>> TypedScoreOverTimeList() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameSoftCollisionData : HelperObject<GameSoftCollisionData> // Object
        {
            explicit GameSoftCollisionData(Ent::Property _node): HelperObject<GameSoftCollisionData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameSoftCollisionData";
            static GameSoftCollisionData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameSoftCollisionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameSoftCollisionData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameSoftCollisionData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameSoftCollisionData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameSoftCollisionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameSoftCollisionData makeInstanceOf()
            {
                return GameSoftCollisionData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DecelerationFactor() const;
            Ent::Gen2::Float InsidePenetrationCoeff() const;
            Ent::Gen2::Float MaxSpeedFactor() const;
            Ent::Gen2::Float MinSpeedFactor() const;
            Ent::Gen2::SpeedMode MinSpeedMode() const;
            Ent::Gen2::Float StuckDuration() const;
            Ent::Gen2::Float StuckPenetrationCoeff() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameSnapData : HelperObject<GameSnapData> // Object
        {
            explicit GameSnapData(Ent::Property _node): HelperObject<GameSnapData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameSnapData";
            static GameSnapData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameSnapData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameSnapData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameSnapData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameSnapData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameSnapData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameSnapData makeInstanceOf()
            {
                return GameSnapData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float creatureSizeCoeff() const;
            Ent::Gen2::Float dirCoeff() const;
            Ent::Gen2::Float distCoeff() const;
            Ent::Gen2::Float maxAngle() const;
            Ent::Gen2::Float maxDist() const;
        };

        struct GameSlopeData : HelperObject<GameSlopeData> // Object
        {
            explicit GameSlopeData(Ent::Property _node): HelperObject<GameSlopeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameSlopeData";
            static GameSlopeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameSlopeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameSlopeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameSlopeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameSlopeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameSlopeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameSlopeData makeInstanceOf()
            {
                return GameSlopeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AngleMin() const;
            Ent::Gen2::Float AngleMinHysteresis() const;
            Ent::Gen2::Float ForceAgainstSlopeAdherenceMin() const;
            Ent::Gen2::Float ForceAgainstSlopeAdherenceMinHysteresis() const;
            Ent::Gen2::Float OrientationDotMin() const;
            Ent::Gen2::Float OrientationDotMinHysteresis() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameShamanVisionData : HelperObject<GameShamanVisionData> // Object
        {
            explicit GameShamanVisionData(Ent::Property _node): HelperObject<GameShamanVisionData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameShamanVisionData";
            static GameShamanVisionData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameShamanVisionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameShamanVisionData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameShamanVisionData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameShamanVisionData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameShamanVisionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameShamanVisionData makeInstanceOf()
            {
                return GameShamanVisionData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AudioAngle() const;
            Ent::Gen2::Float IconDisableDisplayDuration() const;
            Ent::Gen2::Float IconDisplayDuration() const;
            Ent::Gen2::Float IconEnableDisplayDuration() const;
            Ent::Gen2::ScaleConverter IntensityGoddess() const;
            Ent::Gen2::ScaleConverter IntensityPlayer() const;
            Ent::Gen2::ScaleConverter IntensitySpecie() const;
            Ent::Gen2::ScaleConverter PerceptionGoddess() const;
            Ent::Gen2::ScaleConverter PerceptionPlayer() const;
            Ent::Gen2::ScaleConverter PerceptionSpecie() const;
            Ent::Gen2::String Sound_Locate_HeartBeat() const;
            Ent::Gen2::String Sound_UI_Locate_HeartBeat_Stop() const;
            Ent::Gen2::String Sound_UI_Locate_In() const;
            Ent::Gen2::String Sound_UI_Locate_Out() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameReviveData : HelperObject<GameReviveData> // Object
        {
            explicit GameReviveData(Ent::Property _node): HelperObject<GameReviveData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameReviveData";
            static GameReviveData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameReviveData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameReviveData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameReviveData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameReviveData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameReviveData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameReviveData makeInstanceOf()
            {
                return GameReviveData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AnimPlayRatioSpeedIn() const;
            Ent::Gen2::Float AnimPlayRatioSpeedOut() const;
            Ent::Gen2::Float AnimPlayRatioSpeedRate() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameRespawnData : HelperObject<GameRespawnData> // Object
        {
            explicit GameRespawnData(Ent::Property _node): HelperObject<GameRespawnData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameRespawnData";
            static GameRespawnData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameRespawnData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameRespawnData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameRespawnData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameRespawnData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameRespawnData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameRespawnData makeInstanceOf()
            {
                return GameRespawnData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float RespawnDelayOnDeath() const;
            Ent::Gen2::Float SetRespawnPlaceAsCheckpointDuration() const;
            Ent::Gen2::String _comment() const;
        };

        struct GamePropelData : HelperObject<GamePropelData> // Object
        {
            explicit GamePropelData(Ent::Property _node): HelperObject<GamePropelData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GamePropelData";
            static GamePropelData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GamePropelData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GamePropelData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GamePropelData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GamePropelData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GamePropelData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GamePropelData makeInstanceOf()
            {
                return GamePropelData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AttractorFactorFallThreshold() const;
            Ent::Gen2::Float AttractorFactorRaiseThreshold() const;
            Ent::Gen2::Float EnterAngleMin() const;
            Ent::Gen2::Float EnterSpeedMin() const;
            PrimArray<Ent::Gen2::Float> Speed() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameParryData : HelperObject<GameParryData> // Object
        {
            explicit GameParryData(Ent::Property _node): HelperObject<GameParryData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameParryData";
            static GameParryData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameParryData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameParryData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameParryData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameParryData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameParryData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameParryData makeInstanceOf()
            {
                return GameParryData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Cooldown() const;
            Ent::Gen2::String _comment() const;
        };

        struct GamePadSpeedBehaviorData : HelperObject<GamePadSpeedBehaviorData> // Object
        {
            explicit GamePadSpeedBehaviorData(Ent::Property _node): HelperObject<GamePadSpeedBehaviorData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GamePadSpeedBehaviorData";
            static GamePadSpeedBehaviorData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GamePadSpeedBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GamePadSpeedBehaviorData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GamePadSpeedBehaviorData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GamePadSpeedBehaviorData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GamePadSpeedBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GamePadSpeedBehaviorData makeInstanceOf()
            {
                return GamePadSpeedBehaviorData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ScaleConverter DeadZoneThreshold() const;
            Ent::Gen2::Float JoyAcceleration() const;
            Ent::Gen2::Float PostponeDelayMax() const;
            Ent::Gen2::Float PostponeNormMax() const;
            Ent::Gen2::Float SpeedFastMinDuration() const;
            Ent::Gen2::Float SpeedMediumThreshold() const;
            Ent::Gen2::ScaleConverter SpeedSlowThreshold() const;
            Ent::Gen2::String _comment() const;
        };

        struct GamePadNavigationData : HelperObject<GamePadNavigationData> // Object
        {
            explicit GamePadNavigationData(Ent::Property _node): HelperObject<GamePadNavigationData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GamePadNavigationData";
            static GamePadNavigationData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GamePadNavigationData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GamePadNavigationData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GamePadNavigationData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GamePadNavigationData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GamePadNavigationData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GamePadNavigationData makeInstanceOf()
            {
                return GamePadNavigationData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float clamberDirectionDeltaAngle() const;
            Ent::Gen2::Float invertInputFactor() const;
            Ent::Gen2::Float joyLockedAngularSpeedMax() const;
            Ent::Gen2::Float meshNavigationMaxDeltaAngleToKeepInputLock() const;
            Ent::Gen2::Float normalAlignmentToKeepTrajectory() const;
        };

        struct GameLODData : HelperObject<GameLODData> // Object
        {
            explicit GameLODData(Ent::Property _node): HelperObject<GameLODData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameLODData";
            static GameLODData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameLODData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameLODData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameLODData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameLODData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameLODData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameLODData makeInstanceOf()
            {
                return GameLODData(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::Float> CreatureDistance() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameInfoDB : HelperObject<GameInfoDB> // Object
        {
            explicit GameInfoDB(Ent::Property _node): HelperObject<GameInfoDB>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameInfoDB";
            static GameInfoDB load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameInfoDB(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameInfoDB loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameInfoDB(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameInfoDB create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameInfoDB(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameInfoDB makeInstanceOf()
            {
                return GameInfoDB(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::Map<char const*, Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_>> Store() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameImmersionData : HelperObject<GameImmersionData> // Object
        {
            explicit GameImmersionData(Ent::Property _node): HelperObject<GameImmersionData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameImmersionData";
            static GameImmersionData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameImmersionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameImmersionData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameImmersionData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameImmersionData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameImmersionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameImmersionData makeInstanceOf()
            {
                return GameImmersionData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float friction() const;
            Ent::Gen2::Float immersedFactor() const;
            Ent::Gen2::Float immersedFactorMaxToJump() const;
            Ent::Gen2::Float pitchMaxAngleToJump() const;
            Ent::Gen2::Float pitchMinAngleToJump() const;
            Ent::Gen2::ScaleConverter reachSurfaceAcceleration() const;
            Ent::Gen2::Float speedZMinToJump() const;
        };

        struct GameFlyData_FlyUp : HelperObject<GameFlyData_FlyUp> // Object
        {
            explicit GameFlyData_FlyUp(Ent::Property _node): HelperObject<GameFlyData_FlyUp>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFlyData::FlyUp";
            static GameFlyData_FlyUp load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFlyData_FlyUp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFlyData_FlyUp loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFlyData_FlyUp(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFlyData_FlyUp create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFlyData_FlyUp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFlyData_FlyUp makeInstanceOf()
            {
                return GameFlyData_FlyUp(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Acceleration() const;
            Ent::Gen2::Float Deceleration() const;
            Ent::Gen2::Float ExitDeceleration() const;
            Ent::Gen2::Float PitchStart() const;
            Ent::Gen2::ScaleConverter SpeedFactor() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameFlyData_FlyDown : HelperObject<GameFlyData_FlyDown> // Object
        {
            explicit GameFlyData_FlyDown(Ent::Property _node): HelperObject<GameFlyData_FlyDown>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFlyData::FlyDown";
            static GameFlyData_FlyDown load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFlyData_FlyDown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFlyData_FlyDown loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFlyData_FlyDown(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFlyData_FlyDown create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFlyData_FlyDown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFlyData_FlyDown makeInstanceOf()
            {
                return GameFlyData_FlyDown(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ScaleConverter Acceleration() const;
            Ent::Gen2::ScaleConverter Deceleration() const;
            Ent::Gen2::Float ExitDeceleration() const;
            Ent::Gen2::Float PitchStart() const;
            Ent::Gen2::Float SpeedSlowFactor() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameFlyData_Flap : HelperObject<GameFlyData_Flap> // Object
        {
            explicit GameFlyData_Flap(Ent::Property _node): HelperObject<GameFlyData_Flap>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFlyData::Flap";
            static GameFlyData_Flap load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFlyData_Flap(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFlyData_Flap loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFlyData_Flap(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFlyData_Flap create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFlyData_Flap(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFlyData_Flap makeInstanceOf()
            {
                return GameFlyData_Flap(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float RollMin() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameFlyData_Dive : HelperObject<GameFlyData_Dive> // Object
        {
            explicit GameFlyData_Dive(Ent::Property _node): HelperObject<GameFlyData_Dive>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFlyData::Dive";
            static GameFlyData_Dive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFlyData_Dive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFlyData_Dive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFlyData_Dive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFlyData_Dive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFlyData_Dive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFlyData_Dive makeInstanceOf()
            {
                return GameFlyData_Dive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ScaleConverter Acceleration() const;
            Ent::Gen2::ScaleConverter Deceleration() const;
            Ent::Gen2::Float ExitDeceleration() const;
            Ent::Gen2::Float SpeedFastFactor() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameFlyData_Centrifugal : HelperObject<GameFlyData_Centrifugal> // Object
        {
            explicit GameFlyData_Centrifugal(Ent::Property _node): HelperObject<GameFlyData_Centrifugal>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFlyData::Centrifugal";
            static GameFlyData_Centrifugal load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFlyData_Centrifugal(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFlyData_Centrifugal loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFlyData_Centrifugal(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFlyData_Centrifugal create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFlyData_Centrifugal(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFlyData_Centrifugal makeInstanceOf()
            {
                return GameFlyData_Centrifugal(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ScaleConverter Acceleration() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameFlyData : HelperObject<GameFlyData> // Object
        {
            explicit GameFlyData(Ent::Property _node): HelperObject<GameFlyData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFlyData";
            static GameFlyData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFlyData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFlyData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFlyData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFlyData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFlyData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFlyData makeInstanceOf()
            {
                return GameFlyData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::GameFlyData_Centrifugal Centrifugal() const;
            Ent::Gen2::GameFlyData_Dive Dive() const;
            Ent::Gen2::GameFlyData_Flap Flap() const;
            Ent::Gen2::ScaleConverter FlyBlendIn() const;
            Ent::Gen2::GameFlyData_FlyDown FlyDown() const;
            Ent::Gen2::ScaleConverter FlyExitBlendIn() const;
            Ent::Gen2::ScaleConverter FlyPitchCoeffFromSpeedCoeff() const;
            Ent::Gen2::GameFlyData_FlyUp FlyUp() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameFluidData_HeightThreshold : HelperObject<GameFluidData_HeightThreshold> // Object
        {
            explicit GameFluidData_HeightThreshold(Ent::Property _node): HelperObject<GameFluidData_HeightThreshold>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFluidData::HeightThreshold";
            static GameFluidData_HeightThreshold load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFluidData_HeightThreshold(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFluidData_HeightThreshold loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFluidData_HeightThreshold(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFluidData_HeightThreshold create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFluidData_HeightThreshold(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFluidData_HeightThreshold makeInstanceOf()
            {
                return GameFluidData_HeightThreshold(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Damage() const;
            Ent::Gen2::Float Depth() const;
            Ent::Gen2::HitStyle HitStyle() const;
            Ent::Gen2::Float Impact() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameFluidData : HelperObject<GameFluidData> // Object
        {
            explicit GameFluidData(Ent::Property _node): HelperObject<GameFluidData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFluidData";
            static GameFluidData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFluidData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFluidData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFluidData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFluidData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFluidData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFluidData makeInstanceOf()
            {
                return GameFluidData(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::Float> FlowSpeedInfluences() const;
            Array<Array<Ent::Gen2::GameFluidData_HeightThreshold>> HeightThresholds() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameFeetCatchUpData : HelperObject<GameFeetCatchUpData> // Object
        {
            explicit GameFeetCatchUpData(Ent::Property _node): HelperObject<GameFeetCatchUpData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFeetCatchUpData";
            static GameFeetCatchUpData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFeetCatchUpData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFeetCatchUpData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFeetCatchUpData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFeetCatchUpData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFeetCatchUpData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFeetCatchUpData makeInstanceOf()
            {
                return GameFeetCatchUpData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::ScaleConverter aerialRate() const;
            Ent::Gen2::ScaleConverter groundRate() const;
            Ent::Gen2::Map<SizeEnum, Ent::Gen2::Bool> useHeightmapPerSize() const;
        };

        struct GameFallData : HelperObject<GameFallData> // Object
        {
            explicit GameFallData(Ent::Property _node): HelperObject<GameFallData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameFallData";
            static GameFallData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameFallData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameFallData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameFallData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameFallData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameFallData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameFallData makeInstanceOf()
            {
                return GameFallData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Acceleration() const;
            Ent::Gen2::Float AirControlBrakeAngleMin() const;
            Ent::Gen2::ScaleConverter AirControlDirection() const;
            Ent::Gen2::Float AirControlSpeedAngleMax() const;
            Ent::Gen2::Float Friction() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameEdgeData : HelperObject<GameEdgeData> // Object
        {
            explicit GameEdgeData(Ent::Property _node): HelperObject<GameEdgeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameEdgeData";
            static GameEdgeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameEdgeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameEdgeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameEdgeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameEdgeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameEdgeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameEdgeData makeInstanceOf()
            {
                return GameEdgeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float EdgeAngleMax() const;
            Ent::Gen2::Float EdgeSizeMin() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameDeathData : HelperObject<GameDeathData> // Object
        {
            explicit GameDeathData(Ent::Property _node): HelperObject<GameDeathData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameDeathData";
            static GameDeathData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameDeathData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameDeathData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameDeathData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameDeathData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameDeathData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameDeathData makeInstanceOf()
            {
                return GameDeathData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float defaultFreedDelay() const;
            Ent::Gen2::Float immersedFreedDelay() const;
            Ent::Gen2::Float leavingLavaDelay() const;
            Ent::Gen2::Float meetingLavaDelay() const;
        };

        struct GameClockManager_TimeOfDay : HelperObject<GameClockManager_TimeOfDay> // Object
        {
            explicit GameClockManager_TimeOfDay(Ent::Property _node): HelperObject<GameClockManager_TimeOfDay>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameClockManager::TimeOfDay";
            static GameClockManager_TimeOfDay load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameClockManager_TimeOfDay(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameClockManager_TimeOfDay loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameClockManager_TimeOfDay(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameClockManager_TimeOfDay create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameClockManager_TimeOfDay(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameClockManager_TimeOfDay makeInstanceOf()
            {
                return GameClockManager_TimeOfDay(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int Hour() const;
            Ent::Gen2::Int Minute() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameClockManager_GameDate : HelperObject<GameClockManager_GameDate> // Object
        {
            explicit GameClockManager_GameDate(Ent::Property _node): HelperObject<GameClockManager_GameDate>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameClockManager::GameDate";
            static GameClockManager_GameDate load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameClockManager_GameDate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameClockManager_GameDate loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameClockManager_GameDate(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameClockManager_GameDate create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameClockManager_GameDate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameClockManager_GameDate makeInstanceOf()
            {
                return GameClockManager_GameDate(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int DayOfYear() const;
            Ent::Gen2::String Season() const;
            Ent::Gen2::GameClockManager_TimeOfDay TimeOfDay() const;
            Ent::Gen2::Int Year() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameClockManager : HelperObject<GameClockManager> // Object
        {
            explicit GameClockManager(Ent::Property _node): HelperObject<GameClockManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameClockManager";
            static GameClockManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameClockManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameClockManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameClockManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameClockManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameClockManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameClockManager makeInstanceOf()
            {
                return GameClockManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int DayDurationInMin() const;
            Ent::Gen2::Int DayDurationInMs() const;
            Ent::Gen2::Int FallDurationInDay() const;
            Ent::Gen2::Bool FreezeTime() const;
            Ent::Gen2::Int SpringDurationInDay() const;
            Ent::Gen2::GameClockManager_GameDate StartTime() const;
            Ent::Gen2::Int SummerDurationInDay() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::Int WinterDurationInDay() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameBiteData : HelperObject<GameBiteData> // Object
        {
            explicit GameBiteData(Ent::Property _node): HelperObject<GameBiteData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameBiteData";
            static GameBiteData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameBiteData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameBiteData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameBiteData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameBiteData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameBiteData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameBiteData makeInstanceOf()
            {
                return GameBiteData(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::Float> BiterShakeStamina() const;
            PrimArray<Ent::Gen2::Float> BiterStrength() const;
            PrimArray<Ent::Gen2::Float> BittenResistance() const;
            PrimArray<Ent::Gen2::Float> BittenShakeExhaustion() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameBeamSnapData : HelperObject<GameBeamSnapData> // Object
        {
            explicit GameBeamSnapData(Ent::Property _node): HelperObject<GameBeamSnapData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameBeamSnapData";
            static GameBeamSnapData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameBeamSnapData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameBeamSnapData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameBeamSnapData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameBeamSnapData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameBeamSnapData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameBeamSnapData makeInstanceOf()
            {
                return GameBeamSnapData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Max2DDist() const;
            Ent::Gen2::Float Max2DDistScoreCoeff() const;
            Ent::Gen2::Float Max3DDistScoreCoeff() const;
            Ent::Gen2::Float MinCameraDepth() const;
            Ent::Gen2::String _comment() const;
        };

        struct GPEType : EnumPropHelper<GPEType, GPETypeEnum> // Enum
        {
            using Enum = GPETypeEnum;
            using PropHelper<GPEType, Enum>::operator=;
            explicit GPEType(Ent::Property _node): EnumPropHelper<GPEType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "GPEType";
            static constexpr char const* enumToString[] = {
                "BendTree",
                "Geyser",
                "PossessFlocking",
                "Bridge",
                "GPEType_COUNT",
            };
        };
        inline char const* toString(GPETypeEnum value)
        {
            if(size_t(value) >= std::size(GPEType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return GPEType::enumToString[size_t(value)];
        }
        inline char const* toInternal(GPETypeEnum value) { return toString(value); }
        template<> inline GPETypeEnum strToEnum<GPETypeEnum>(char const* value)
        {
            return static_cast<GPETypeEnum>(details::indexInEnum(value, GPEType::enumToString));
        }

        struct FurProperties : HelperObject<FurProperties> // Object
        {
            explicit FurProperties(Ent::Property _node): HelperObject<FurProperties>(std::move(_node)) {}
            static constexpr char schemaName[] = "FurProperties";
            static FurProperties load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FurProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FurProperties loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FurProperties(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FurProperties create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FurProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FurProperties makeInstanceOf()
            {
                return FurProperties(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AngularShift() const;
            Ent::Gen2::Float AzimuthalRoughness() const;
            Ent::Gen2::Float FinsMaskUScale() const;
            Ent::Gen2::Int FinsTextureArrayIndex() const;
            Ent::Gen2::Float FocusShadowDistanceOffset() const;
            Ent::Gen2::Float LinearAbsorption() const;
            Ent::Gen2::Float MultiScatteringPower() const;
            Ent::Gen2::Float MultiScatteringWrap() const;
            Ent::Gen2::Float Roughness() const;
            Ent::Gen2::Vector3 SpecularFactor() const;
            Ent::Gen2::Float Stiffness() const;
            Ent::Gen2::Float Thickness() const;
            Ent::Gen2::Bool UseNewLighting() const;
            Ent::Gen2::Float Weight() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float focusShadowRelativeThickness() const;
        };

        struct FreezeData : HelperObject<FreezeData> // Object
        {
            explicit FreezeData(Ent::Property _node): HelperObject<FreezeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "FreezeData";
            static FreezeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FreezeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FreezeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FreezeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FreezeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FreezeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FreezeData makeInstanceOf()
            {
                return FreezeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float deltaTimeFactor() const;
            Ent::Gen2::eventStringHash eventStringHash() const;
            Ent::Gen2::Float stateDuration() const;
            Ent::Gen2::Float transitionInDuration() const;
            Ent::Gen2::Float transitionOutDuration() const;
        };

        struct ForceMultiplier : HelperObject<ForceMultiplier> // Object
        {
            explicit ForceMultiplier(Ent::Property _node): HelperObject<ForceMultiplier>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct ForceBlendInReachRequired : HelperObject<ForceBlendInReachRequired> // Object
        {
            explicit ForceBlendInReachRequired(Ent::Property _node): HelperObject<ForceBlendInReachRequired>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct ForceBlendIn : HelperObject<ForceBlendIn> // Object
        {
            explicit ForceBlendIn(Ent::Property _node): HelperObject<ForceBlendIn>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct FluidVolumeComponentGD_SimulationParameters : HelperObject<FluidVolumeComponentGD_SimulationParameters> // Object
        {
            explicit FluidVolumeComponentGD_SimulationParameters(Ent::Property _node): HelperObject<FluidVolumeComponentGD_SimulationParameters>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidVolumeComponentGD::SimulationParameters";
            static FluidVolumeComponentGD_SimulationParameters load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidVolumeComponentGD_SimulationParameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidVolumeComponentGD_SimulationParameters loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidVolumeComponentGD_SimulationParameters(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidVolumeComponentGD_SimulationParameters create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidVolumeComponentGD_SimulationParameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidVolumeComponentGD_SimulationParameters makeInstanceOf()
            {
                return FluidVolumeComponentGD_SimulationParameters(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Evaporation() const;
            Ent::Gen2::Float Momentum() const;
            Ent::Gen2::Float Precision() const;
            Ent::Gen2::Float Viscosity() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidVolumeComponentGD_HeightMapData : HelperObject<FluidVolumeComponentGD_HeightMapData> // Object
        {
            explicit FluidVolumeComponentGD_HeightMapData(Ent::Property _node): HelperObject<FluidVolumeComponentGD_HeightMapData>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidVolumeComponentGD::HeightMapData";
            static FluidVolumeComponentGD_HeightMapData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidVolumeComponentGD_HeightMapData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidVolumeComponentGD_HeightMapData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidVolumeComponentGD_HeightMapData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidVolumeComponentGD_HeightMapData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidVolumeComponentGD_HeightMapData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidVolumeComponentGD_HeightMapData makeInstanceOf()
            {
                return FluidVolumeComponentGD_HeightMapData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Path() const;
            Ent::Gen2::String TerrainName() const;
            Ent::Gen2::Vector2 WorldSize() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidVolumeComponentGD_FluidVolumeData : HelperObject<FluidVolumeComponentGD_FluidVolumeData> // Object
        {
            explicit FluidVolumeComponentGD_FluidVolumeData(Ent::Property _node): HelperObject<FluidVolumeComponentGD_FluidVolumeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidVolumeComponentGD::FluidVolumeData";
            static FluidVolumeComponentGD_FluidVolumeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidVolumeComponentGD_FluidVolumeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidVolumeComponentGD_FluidVolumeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidVolumeComponentGD_FluidVolumeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidVolumeComponentGD_FluidVolumeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidVolumeComponentGD_FluidVolumeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidVolumeComponentGD_FluidVolumeData makeInstanceOf()
            {
                return FluidVolumeComponentGD_FluidVolumeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::FluidVolumeComponentGD_HeightMapData HeightMap() const;
            Ent::Gen2::Vector2 InHeightMapWorldSizeOffset() const;
            Ent::Gen2::String Material() const;
            Ent::Gen2::FluidVolumeComponentGD_SimulationParameters Simulation() const;
            Ent::Gen2::Vector2 WorldSize() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidType : EnumPropHelper<FluidType, FluidTypeEnum> // Enum
        {
            using Enum = FluidTypeEnum;
            using PropHelper<FluidType, Enum>::operator=;
            explicit FluidType(Ent::Property _node): EnumPropHelper<FluidType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidType";
            static constexpr char const* enumToString[] = {
                "water",
                "lava",
                "mud",
                "FluidType_COUNT",
            };
        };
        inline char const* toString(FluidTypeEnum value)
        {
            if(size_t(value) >= std::size(FluidType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return FluidType::enumToString[size_t(value)];
        }
        inline char const* toInternal(FluidTypeEnum value) { return toString(value); }
        template<> inline FluidTypeEnum strToEnum<FluidTypeEnum>(char const* value)
        {
            return static_cast<FluidTypeEnum>(details::indexInEnum(value, FluidType::enumToString));
        }

        struct ImmersedBehaviorData : HelperObject<ImmersedBehaviorData> // Object
        {
            explicit ImmersedBehaviorData(Ent::Property _node): HelperObject<ImmersedBehaviorData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ImmersedBehaviorData";
            static ImmersedBehaviorData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ImmersedBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ImmersedBehaviorData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ImmersedBehaviorData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ImmersedBehaviorData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ImmersedBehaviorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ImmersedBehaviorData makeInstanceOf()
            {
                return ImmersedBehaviorData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool canClimbWaterfall() const;
            Ent::Gen2::Float constrainedToPlaneForce() const;
            Ent::Gen2::Float delayBetweenImpulses() const;
            Ent::Gen2::Float depth() const;
            Ent::Gen2::Float depthHysteresisCoeff() const;
            Ent::Gen2::ScaleConverter depthMaxRange() const;
            Ent::Gen2::Float flotation() const;
            Ent::Gen2::Float immersionEndWaterfallJump() const;
            Ent::Gen2::Float impulseForce() const;
            Ent::Gen2::Bool isAllowed() const;
            Ent::Gen2::Float minTooDeepPushSpeed() const;
            Ent::Gen2::Float reachSurfaceAccelerationCoeff() const;
            Ent::Gen2::Map<FluidTypeEnum, Ent::Gen2::ScaleConverter> slowDowns() const;
        };

        struct FluidData : HelperObject<FluidData> // Object
        {
            explicit FluidData(Ent::Property _node): HelperObject<FluidData>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidData";
            static FluidData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidData makeInstanceOf()
            {
                return FluidData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::constraintPlaneWorldPosition constraintPlaneWorldPosition() const;
            Ent::Gen2::Float depth() const;
            Ent::Gen2::Float energy() const;
            Ent::Gen2::Vector3 fluidCurrent() const;
            Ent::Gen2::Bool hasDepthImpactOnControl() const;
            Ent::Gen2::Bool isWaterfall() const;
            Ent::Gen2::Float level() const;
            Ent::Gen2::Vector3 normal() const;
            Ent::Gen2::FluidType type() const;
        };

        struct FloatRange : HelperObject<FloatRange> // Object
        {
            explicit FloatRange(Ent::Property _node): HelperObject<FloatRange>(std::move(_node)) {}
            static constexpr char schemaName[] = "FloatRange";
            static FloatRange load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FloatRange(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FloatRange loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FloatRange(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FloatRange create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FloatRange(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FloatRange makeInstanceOf()
            {
                return FloatRange(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector2 MinMax() const;
            Ent::Gen2::String _comment() const;
        };

        struct SmallActorSpawnRuleData : HelperObject<SmallActorSpawnRuleData> // Object
        {
            explicit SmallActorSpawnRuleData(Ent::Property _node): HelperObject<SmallActorSpawnRuleData>(std::move(_node)) {}
            static constexpr char schemaName[] = "SmallActorSpawnRuleData";
            static SmallActorSpawnRuleData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SmallActorSpawnRuleData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SmallActorSpawnRuleData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SmallActorSpawnRuleData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SmallActorSpawnRuleData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SmallActorSpawnRuleData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SmallActorSpawnRuleData makeInstanceOf()
            {
                return SmallActorSpawnRuleData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String AudioEventName() const;
            Ent::Gen2::String AudioEventSoundBank() const;
            Ent::Gen2::FloatRange DayTimeRange() const;
            Ent::Gen2::FloatRange DistanceRange() const;
            Ent::Gen2::FloatRange PrecipitationRange() const;
            Ent::Gen2::FloatRange RegenRange() const;
            Ent::Gen2::Float SpawnProbability() const;
            Ent::Gen2::String _comment() const;
        };

        struct SmallActorSpawnPointData : HelperObject<SmallActorSpawnPointData> // Object
        {
            explicit SmallActorSpawnPointData(Ent::Property _node): HelperObject<SmallActorSpawnPointData>(std::move(_node)) {}
            static constexpr char schemaName[] = "SmallActorSpawnPointData";
            static SmallActorSpawnPointData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SmallActorSpawnPointData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SmallActorSpawnPointData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SmallActorSpawnPointData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SmallActorSpawnPointData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SmallActorSpawnPointData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SmallActorSpawnPointData makeInstanceOf()
            {
                return SmallActorSpawnPointData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float SelectionProbability() const;
            Array<Ent::Gen2::SmallActorSpawnRuleData> SpawnRules() const;
            Ent::Gen2::String _comment() const;
        };

        struct FadeDuration : HelperObject<FadeDuration> // Object
        {
            explicit FadeDuration(Ent::Property _node): HelperObject<FadeDuration>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct FadeDelay : HelperObject<FadeDelay> // Object
        {
            explicit FadeDelay(Ent::Property _node): HelperObject<FadeDelay>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct FactionSpecieRelationData : HelperObject<FactionSpecieRelationData> // Object
        {
            explicit FactionSpecieRelationData(Ent::Property _node): HelperObject<FactionSpecieRelationData>(std::move(_node)) {}
            static constexpr char schemaName[] = "FactionSpecieRelationData";
            static FactionSpecieRelationData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FactionSpecieRelationData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FactionSpecieRelationData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FactionSpecieRelationData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FactionSpecieRelationData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FactionSpecieRelationData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FactionSpecieRelationData makeInstanceOf()
            {
                return FactionSpecieRelationData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String name() const;
            Ent::Gen2::String specie() const;
        };

        struct FactionRelationData : HelperObject<FactionRelationData> // Object
        {
            explicit FactionRelationData(Ent::Property _node): HelperObject<FactionRelationData>(std::move(_node)) {}
            static constexpr char schemaName[] = "FactionRelationData";
            static FactionRelationData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FactionRelationData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FactionRelationData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FactionRelationData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FactionRelationData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FactionRelationData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FactionRelationData makeInstanceOf()
            {
                return FactionRelationData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String faction1() const;
            Ent::Gen2::String faction2() const;
            Ent::Gen2::String relation() const;
        };

        struct FactionData : HelperObject<FactionData> // Object
        {
            explicit FactionData(Ent::Property _node): HelperObject<FactionData>(std::move(_node)) {}
            static constexpr char schemaName[] = "FactionData";
            static FactionData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FactionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FactionData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FactionData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FactionData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FactionData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FactionData makeInstanceOf()
            {
                return FactionData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String name() const;
        };

        struct FactionManager : HelperObject<FactionManager> // Object
        {
            explicit FactionManager(Ent::Property _node): HelperObject<FactionManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "FactionManager";
            static FactionManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FactionManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FactionManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FactionManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FactionManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FactionManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FactionManager makeInstanceOf()
            {
                return FactionManager(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::FactionSpecieRelationData> FactionSpecieRelations() const;
            Array<Ent::Gen2::FactionData> Factions() const;
            Array<Ent::Gen2::FactionRelationData> Relations() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EventMusic : HelperObject<EventMusic> // Object
        {
            explicit EventMusic(Ent::Property _node): HelperObject<EventMusic>(std::move(_node)) {}
            static constexpr char schemaName[] = "EventMusic";
            static EventMusic load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EventMusic(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EventMusic loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EventMusic(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EventMusic create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EventMusic(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EventMusic makeInstanceOf()
            {
                return EventMusic(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String PlayerDeathBank() const;
            Ent::Gen2::String PlayerDeathEvent() const;
            Ent::Gen2::Int PlayerDeathMusicPriority() const;
            Ent::Gen2::Float PlayerDeathTimeOnStack() const;
            Ent::Gen2::String PlayerVictoryBank() const;
            Ent::Gen2::String PlayerVictoryEvent() const;
            Ent::Gen2::String ReleaseCreatureBankPrefix() const;
            Ent::Gen2::String ReleaseCreatureEventPrefix() const;
            Ent::Gen2::Int ReleaseCreatureMusicPriority() const;
            Ent::Gen2::Float ReleaseCreatureTimeOnStack() const;
            Ent::Gen2::String ReleaseSoulBankPrefix() const;
            Ent::Gen2::String ReleaseSoulEventPrefix() const;
            Ent::Gen2::Int ReleaseSoulMusicPriority() const;
            Ent::Gen2::Float ReleaseSoulTimeOnStack() const;
            Ent::Gen2::SyncTempoMode SynchronizationMode() const;
            Ent::Gen2::String _comment() const;
        };

        struct MusicManager : HelperObject<MusicManager> // Object
        {
            explicit MusicManager(Ent::Property _node): HelperObject<MusicManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "MusicManager";
            static MusicManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MusicManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MusicManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MusicManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MusicManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MusicManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MusicManager makeInstanceOf()
            {
                return MusicManager(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::MusicCategory> Categories() const;
            Ent::Gen2::EventMusic EventMusicParam() const;
            PrimArray<Ent::Gen2::String> PlayerMusicTypes() const;
            Ent::Gen2::String RTPCMixWorldPrefix() const;
            Ent::Gen2::String RelationsParamPath() const;
            Ent::Gen2::ShowdownMusic ShowdownMusicParam() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::UIMusic UIMusicParam() const;
            PrimArray<Ent::Gen2::String> WorldMusicTypes() const;
            Ent::Gen2::String _comment() const;
        };

        struct EventCameraData : HelperObject<EventCameraData> // Object
        {
            explicit EventCameraData(Ent::Property _node): HelperObject<EventCameraData>(std::move(_node)) {}
            static constexpr char schemaName[] = "EventCameraData";
            static EventCameraData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EventCameraData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EventCameraData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EventCameraData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EventCameraData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EventCameraData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EventCameraData makeInstanceOf()
            {
                return EventCameraData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float BlendCameraTime() const;
            Ent::Gen2::Bool CameraAimTriggerActor() const;
            Array<Ent::Gen2::Vector3> CameraOffsets() const;
            Ent::Gen2::Float DOFFarStart() const;
            Ent::Gen2::Float DOFFarStop() const;
            Ent::Gen2::Float DOFMultiplier() const;
            Ent::Gen2::Float DOFNearStart() const;
            Ent::Gen2::Float DOFNearStop() const;
            Ent::Gen2::Bool DOFRelativeTarget() const;
            Ent::Gen2::Float EventCameraTime() const;
            Ent::Gen2::Float FOV() const;
            Ent::Gen2::Bool FixedCam() const;
            Ent::Gen2::Bool FollowCam() const;
            Ent::Gen2::Bool FollowTarget() const;
            Ent::Gen2::Float OffsetsBlendTime() const;
            Ent::Gen2::Bool PositionsAngularBlend() const;
            Ent::Gen2::Float PositionsBlendTime() const;
            Array<Ent::Gen2::Vector3> TargetOffsets() const;
            Ent::Gen2::Bool UseDOF() const;
            Ent::Gen2::Bool UseOffsetsSpline() const;
            Ent::Gen2::Bool UsePositionsSpline() const;
            Ent::Gen2::Bool UseTriggerActorPosition() const;
            Ent::Gen2::Bool UseTriggerActorSight() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStaffOwnedVertebras_Inputs : HelperObject<EntityStateStaffOwnedVertebras_Inputs> // Object
        {
            explicit EntityStateStaffOwnedVertebras_Inputs(Ent::Property _node): HelperObject<EntityStateStaffOwnedVertebras_Inputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStaffOwnedVertebras::Inputs";
            static EntityStateStaffOwnedVertebras_Inputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStaffOwnedVertebras_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStaffOwnedVertebras_Inputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStaffOwnedVertebras_Inputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStaffOwnedVertebras_Inputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStaffOwnedVertebras_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStaffOwnedVertebras_Inputs makeInstanceOf()
            {
                return EntityStateStaffOwnedVertebras_Inputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int ownedVertebrasNumber() const;
        };

        struct EntityStateSet : HelperObject<EntityStateSet> // Object
        {
            explicit EntityStateSet(Ent::Property _node): HelperObject<EntityStateSet>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSet";
            static EntityStateSet load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSet(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSet loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSet(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSet create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSet(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSet makeInstanceOf()
            {
                return EntityStateSet(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ResponsiblePointer_ActorState_> EntityStates() const;
            Ent::Gen2::String _comment() const;
        };

        struct PlayerState : HelperObject<PlayerState> // Object
        {
            explicit PlayerState(Ent::Property _node): HelperObject<PlayerState>(std::move(_node)) {}
            static constexpr char schemaName[] = "PlayerState";
            static PlayerState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PlayerState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PlayerState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PlayerState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PlayerState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PlayerState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PlayerState makeInstanceOf()
            {
                return PlayerState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String ActiveScene() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::Map<char const*, Ent::Gen2::EntityStateSet>> DynamicStates() const;
            Ent::Gen2::GameInfoDB GameInfoDB() const;
            Ent::Gen2::Int Version() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateMotionConstrained_Inputs : HelperObject<EntityStateMotionConstrained_Inputs> // Object
        {
            explicit EntityStateMotionConstrained_Inputs(Ent::Property _node): HelperObject<EntityStateMotionConstrained_Inputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateMotionConstrained::Inputs";
            static EntityStateMotionConstrained_Inputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateMotionConstrained_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateMotionConstrained_Inputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateMotionConstrained_Inputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateMotionConstrained_Inputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateMotionConstrained_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateMotionConstrained_Inputs makeInstanceOf()
            {
                return EntityStateMotionConstrained_Inputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ConstrainedLanding() const;
            Ent::Gen2::Bool InputCorrection() const;
            Ent::Gen2::Bool StayOnCurve() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateManageChildEntityPool_Inputs : HelperObject<EntityStateManageChildEntityPool_Inputs> // Object
        {
            explicit EntityStateManageChildEntityPool_Inputs(Ent::Property _node): HelperObject<EntityStateManageChildEntityPool_Inputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateManageChildEntityPool::Inputs";
            static EntityStateManageChildEntityPool_Inputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateManageChildEntityPool_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateManageChildEntityPool_Inputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateManageChildEntityPool_Inputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateManageChildEntityPool_Inputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateManageChildEntityPool_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateManageChildEntityPool_Inputs makeInstanceOf()
            {
                return EntityStateManageChildEntityPool_Inputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DistanceMaxFromCamera() const;
            Ent::Gen2::Float DistanceMaxFromSpawner() const;
            Ent::Gen2::Float SafeDistanceAroundPlayer() const;
            Ent::Gen2::EntityRef SpawnerEntityRef() const;
            Ent::Gen2::Float UnspawnDelay() const;
            Ent::Gen2::Float UnspawnRadius() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateIncapacitated_Inputs : HelperObject<EntityStateIncapacitated_Inputs> // Object
        {
            explicit EntityStateIncapacitated_Inputs(Ent::Property _node): HelperObject<EntityStateIncapacitated_Inputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateIncapacitated::Inputs";
            static EntityStateIncapacitated_Inputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateIncapacitated_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateIncapacitated_Inputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateIncapacitated_Inputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateIncapacitated_Inputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateIncapacitated_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateIncapacitated_Inputs makeInstanceOf()
            {
                return EntityStateIncapacitated_Inputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Time() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateChargeMode_EntityStateChargeModeInputs : HelperObject<EntityStateChargeMode_EntityStateChargeModeInputs> // Object
        {
            explicit EntityStateChargeMode_EntityStateChargeModeInputs(Ent::Property _node): HelperObject<EntityStateChargeMode_EntityStateChargeModeInputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateChargeMode::EntityStateChargeModeInputs";
            static EntityStateChargeMode_EntityStateChargeModeInputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateChargeMode_EntityStateChargeModeInputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateChargeMode_EntityStateChargeModeInputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateChargeMode_EntityStateChargeModeInputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateChargeMode_EntityStateChargeModeInputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateChargeMode_EntityStateChargeModeInputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateChargeMode_EntityStateChargeModeInputs makeInstanceOf()
            {
                return EntityStateChargeMode_EntityStateChargeModeInputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::MoveCapacityData_OrientationSpeed AngularSpeed() const;
            Ent::Gen2::Float ForceMultiplier() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityLODData : HelperObject<EntityLODData> // Object
        {
            explicit EntityLODData(Ent::Property _node): HelperObject<EntityLODData>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityLODData";
            static EntityLODData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityLODData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityLODData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityLODData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityLODData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityLODData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityLODData makeInstanceOf()
            {
                return EntityLODData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef EntityRef() const;
            Ent::Gen2::Float MaxDist() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityID : HelperObject<EntityID> // Object
        {
            explicit EntityID(Ent::Property _node): HelperObject<EntityID>(std::move(_node)) {}
            
        
        };

        struct EnergyValue : EnumPropHelper<EnergyValue, EnergyValueEnum> // Enum
        {
            using Enum = EnergyValueEnum;
            using PropHelper<EnergyValue, Enum>::operator=;
            explicit EnergyValue(Ent::Property _node): EnumPropHelper<EnergyValue, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergyValue";
            static constexpr char const* enumToString[] = {
                "corrupted_strong",
                "corrupted",
                "lush",
                "lush_strong",
            };
        };
        inline char const* toString(EnergyValueEnum value)
        {
            if(size_t(value) >= std::size(EnergyValue::enumToString))
                throw std::runtime_error("Wrong enum value");
            return EnergyValue::enumToString[size_t(value)];
        }
        inline char const* toInternal(EnergyValueEnum value) { return toString(value); }
        template<> inline EnergyValueEnum strToEnum<EnergyValueEnum>(char const* value)
        {
            return static_cast<EnergyValueEnum>(details::indexInEnum(value, EnergyValue::enumToString));
        }

        struct VegetationPCloudData : HelperObject<VegetationPCloudData> // Object
        {
            explicit VegetationPCloudData(Ent::Property _node): HelperObject<VegetationPCloudData>(std::move(_node)) {}
            static constexpr char schemaName[] = "VegetationPCloudData";
            static VegetationPCloudData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VegetationPCloudData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VegetationPCloudData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VegetationPCloudData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VegetationPCloudData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VegetationPCloudData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VegetationPCloudData makeInstanceOf()
            {
                return VegetationPCloudData(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::EnergyValue> EnergyValues() const;
            Ent::Gen2::String PCloudPath() const;
            PrimArray<Ent::Gen2::String> UsedVegetations() const;
            Ent::Gen2::String _comment() const;
        };

        struct RegenData : HelperObject<RegenData> // Object
        {
            explicit RegenData(Ent::Property _node): HelperObject<RegenData>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenData";
            static RegenData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RegenData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RegenData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RegenData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RegenData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RegenData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RegenData makeInstanceOf()
            {
                return RegenData(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::EnergyValue> EnergyValues() const;
            Array<Ent::Gen2::EntityLODData> LODData() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergySideData : HelperObject<EnergySideData> // Object
        {
            explicit EnergySideData(Ent::Property _node): HelperObject<EnergySideData>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergySideData";
            static EnergySideData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergySideData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergySideData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergySideData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergySideData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergySideData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergySideData makeInstanceOf()
            {
                return EnergySideData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef EntityRef() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergySide : EnumPropHelper<EnergySide, EnergySideEnum> // Enum
        {
            using Enum = EnergySideEnum;
            using PropHelper<EnergySide, Enum>::operator=;
            explicit EnergySide(Ent::Property _node): EnumPropHelper<EnergySide, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergySide";
            static constexpr char const* enumToString[] = {
                "none",
                "lush",
                "corrupted",
                "EnergySide_COUNT",
            };
        };
        inline char const* toString(EnergySideEnum value)
        {
            if(size_t(value) >= std::size(EnergySide::enumToString))
                throw std::runtime_error("Wrong enum value");
            return EnergySide::enumToString[size_t(value)];
        }
        inline char const* toInternal(EnergySideEnum value) { return toString(value); }
        template<> inline EnergySideEnum strToEnum<EnergySideEnum>(char const* value)
        {
            return static_cast<EnergySideEnum>(details::indexInEnum(value, EnergySide::enumToString));
        }

        struct ReviveEnergyComponentInput_EnergySide : HelperObject<ReviveEnergyComponentInput_EnergySide> // Object
        {
            explicit ReviveEnergyComponentInput_EnergySide(Ent::Property _node): HelperObject<ReviveEnergyComponentInput_EnergySide>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::EnergySide val() const;
        };

        struct EntityStateRevive_Inputs : HelperObject<EntityStateRevive_Inputs> // Object
        {
            explicit EntityStateRevive_Inputs(Ent::Property _node): HelperObject<EntityStateRevive_Inputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateRevive::Inputs";
            static EntityStateRevive_Inputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateRevive_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateRevive_Inputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateRevive_Inputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateRevive_Inputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateRevive_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateRevive_Inputs makeInstanceOf()
            {
                return EntityStateRevive_Inputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Damages() const;
            Ent::Gen2::EnergySide EnergySide() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCreatureHatching_Inputs : HelperObject<EntityStateCreatureHatching_Inputs> // Object
        {
            explicit EntityStateCreatureHatching_Inputs(Ent::Property _node): HelperObject<EntityStateCreatureHatching_Inputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCreatureHatching::Inputs";
            static EntityStateCreatureHatching_Inputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCreatureHatching_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCreatureHatching_Inputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCreatureHatching_Inputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCreatureHatching_Inputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCreatureHatching_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCreatureHatching_Inputs makeInstanceOf()
            {
                return EntityStateCreatureHatching_Inputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EnergySide EnergySide() const;
            Ent::Gen2::Bool ForceSuccess() const;
            Ent::Gen2::MinReviveRatio MinReviveRatio() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergySideEvent : HelperObject<EnergySideEvent> // Object
        {
            explicit EnergySideEvent(Ent::Property _node): HelperObject<EnergySideEvent>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergySideEvent";
            static EnergySideEvent load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergySideEvent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergySideEvent loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergySideEvent(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergySideEvent create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergySideEvent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergySideEvent makeInstanceOf()
            {
                return EnergySideEvent(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ElapsedTime() const;
            Ent::Gen2::EnergySide EnergySide() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergyIntensity : EnumPropHelper<EnergyIntensity, EnergyIntensityEnum> // Enum
        {
            using Enum = EnergyIntensityEnum;
            using PropHelper<EnergyIntensity, Enum>::operator=;
            explicit EnergyIntensity(Ent::Property _node): EnumPropHelper<EnergyIntensity, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergyIntensity";
            static constexpr char const* enumToString[] = {
                "normal",
                "strong",
                "COUNT",
            };
        };
        inline char const* toString(EnergyIntensityEnum value)
        {
            if(size_t(value) >= std::size(EnergyIntensity::enumToString))
                throw std::runtime_error("Wrong enum value");
            return EnergyIntensity::enumToString[size_t(value)];
        }
        inline char const* toInternal(EnergyIntensityEnum value) { return toString(value); }
        template<> inline EnergyIntensityEnum strToEnum<EnergyIntensityEnum>(char const* value)
        {
            return static_cast<EnergyIntensityEnum>(details::indexInEnum(value, EnergyIntensity::enumToString));
        }

        struct RegenerationManager : HelperObject<RegenerationManager> // Object
        {
            explicit RegenerationManager(Ent::Property _node): HelperObject<RegenerationManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenerationManager";
            static RegenerationManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RegenerationManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RegenerationManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RegenerationManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RegenerationManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RegenerationManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RegenerationManager makeInstanceOf()
            {
                return RegenerationManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EnergyValue BackgroundEnergyValue() const;
            Ent::Gen2::RegenAreaTransitionSettings DefaultTransitionWaveSettings() const;
            Ent::Gen2::Map<EnergyIntensityEnum, Ent::Gen2::RegenerationManager_EnergyAreaSetting> EnergyAreaSettingsMap() const;
            Ent::Gen2::Float EnergyStrongValueThreshold() const;
            Ent::Gen2::Int MaxDispatchedRegenQueries() const;
            Ent::Gen2::Int MaxDynamicRegenEffectCount() const;
            Ent::Gen2::Int MaxRegenAreaPerCluster() const;
            Ent::Gen2::Int RegenAreaClusterWorldSize() const;
            Ent::Gen2::Bool RegenAreaClustering() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergyPoolGD_EnergyArea : HelperObject<EnergyPoolGD_EnergyArea> // Object
        {
            explicit EnergyPoolGD_EnergyArea(Ent::Property _node): HelperObject<EnergyPoolGD_EnergyArea>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergyPoolGD::EnergyArea";
            static EnergyPoolGD_EnergyArea load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergyPoolGD_EnergyArea(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergyPoolGD_EnergyArea loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergyPoolGD_EnergyArea(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergyPoolGD_EnergyArea create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergyPoolGD_EnergyArea(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergyPoolGD_EnergyArea makeInstanceOf()
            {
                return EnergyPoolGD_EnergyArea(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EnergyIntensity Intensity() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::Int Priority() const;
            Ent::Gen2::variant_MeshShape_ShapeSphere_ShapeBox_ Shape() const;
            Ent::Gen2::String _comment() const;
        };

        struct EndPosition : HelperObject<EndPosition> // Object
        {
            explicit EndPosition(Ent::Property _node): HelperObject<EndPosition>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Position val() const;
        };

        struct Enabled : HelperObject<Enabled> // Object
        {
            explicit Enabled(Ent::Property _node): HelperObject<Enabled>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct EDITOR_Mesh : HelperObject<EDITOR_Mesh> // Object
        {
            explicit EDITOR_Mesh(Ent::Property _node): HelperObject<EDITOR_Mesh>(std::move(_node)) {}
            static constexpr char schemaName[] = "EDITOR_Mesh";
            static EDITOR_Mesh load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EDITOR_Mesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EDITOR_Mesh loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EDITOR_Mesh(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EDITOR_Mesh create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EDITOR_Mesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EDITOR_Mesh makeInstanceOf()
            {
                return EDITOR_Mesh(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int id() const;
            Ent::Gen2::String path() const;
        };

        struct EDITOR_LODsItem : HelperObject<EDITOR_LODsItem> // Object
        {
            explicit EDITOR_LODsItem(Ent::Property _node): HelperObject<EDITOR_LODsItem>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int lod() const;
            PrimArray<Ent::Gen2::String> wvis() const;
        };

        struct DisplaceNoiseListItem : HelperObject<DisplaceNoiseListItem> // Object
        {
            explicit DisplaceNoiseListItem(Ent::Property _node): HelperObject<DisplaceNoiseListItem>(std::move(_node)) {}
            
            Ent::Gen2::Float DisplaceDistance() const;
            Ent::Gen2::Float LuminanceCenter() const;
            Ent::Gen2::Int MapChannel() const;
            Ent::Gen2::String MotifName() const;
            Ent::Gen2::Float MotifOffsetX() const;
            Ent::Gen2::Float MotifOffsetY() const;
            Ent::Gen2::Float MotifRotationZ() const;
            Ent::Gen2::Float MotifSizeX() const;
            Ent::Gen2::Float MotifSizeY() const;
            Ent::Gen2::String _comment() const;
        };

        struct DisableFluid : HelperObject<DisableFluid> // Object
        {
            explicit DisableFluid(Ent::Property _node): HelperObject<DisableFluid>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct DeltaTimeFactor : HelperObject<DeltaTimeFactor> // Object
        {
            explicit DeltaTimeFactor(Ent::Property _node): HelperObject<DeltaTimeFactor>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct DebugManager_PlayerState : HelperObject<DebugManager_PlayerState> // Object
        {
            explicit DebugManager_PlayerState(Ent::Property _node): HelperObject<DebugManager_PlayerState>(std::move(_node)) {}
            
        
        };

        struct DebugManager_ComponentID : HelperObject<DebugManager_ComponentID> // Object
        {
            explicit DebugManager_ComponentID(Ent::Property _node): HelperObject<DebugManager_ComponentID>(std::move(_node)) {}
            static constexpr char schemaName[] = "DebugManager::ComponentID";
            static DebugManager_ComponentID load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DebugManager_ComponentID(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DebugManager_ComponentID loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DebugManager_ComponentID(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DebugManager_ComponentID create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DebugManager_ComponentID(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DebugManager_ComponentID makeInstanceOf()
            {
                return DebugManager_ComponentID(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String ComponentNameID() const;
            Ent::Gen2::EntityID EntityID() const;
            Ent::Gen2::String _comment() const;
        };

        struct DebugDisplayFlags : HelperObject<DebugDisplayFlags> // Object
        {
            explicit DebugDisplayFlags(Ent::Property _node): HelperObject<DebugDisplayFlags>(std::move(_node)) {}
            static constexpr char schemaName[] = "DebugDisplayFlags";
            static DebugDisplayFlags load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DebugDisplayFlags(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DebugDisplayFlags loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DebugDisplayFlags(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DebugDisplayFlags create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DebugDisplayFlags(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DebugDisplayFlags makeInstanceOf()
            {
                return DebugDisplayFlags(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool Activate() const;
            Ent::Gen2::Bool ActiveRTPCHunt() const;
            Ent::Gen2::Bool ActiveWeatherSystem() const;
            Ent::Gen2::Bool AssertOnPestoErrors() const;
            Ent::Gen2::Bool DisplayActorStateArbiter() const;
            Ent::Gen2::Bool DisplayAnalytics() const;
            Ent::Gen2::Bool DisplayAutonomousClan() const;
            Ent::Gen2::Bool DisplayAutonomousCreatureList() const;
            Ent::Gen2::Bool DisplayAutonomousDecision() const;
            Ent::Gen2::Bool DisplayAutonomousEntityList() const;
            Ent::Gen2::Bool DisplayAutonomousInfo() const;
            Ent::Gen2::Bool DisplayAutonomousListClan() const;
            Ent::Gen2::Bool DisplayAutonomousLogMessage() const;
            Ent::Gen2::Bool DisplayAutonomousMaster() const;
            Ent::Gen2::Bool DisplayAutonomousPhysical() const;
            Ent::Gen2::Bool DisplayAutonomousPosition() const;
            Ent::Gen2::Bool DisplayAutonomousPredator() const;
            Ent::Gen2::Bool DisplayAutonomousPsychological() const;
            Ent::Gen2::Bool DisplayAutonomousSound() const;
            Ent::Gen2::Bool DisplayAutonomousUnlocked() const;
            Ent::Gen2::Bool DisplayBehavior() const;
            Ent::Gen2::Bool DisplayBlendShapeDebug() const;
            Ent::Gen2::Bool DisplayBrainMonitor() const;
            Ent::Gen2::Bool DisplayCPU() const;
            Ent::Gen2::Bool DisplayCompass() const;
            Ent::Gen2::Bool DisplayComponentCacheDebugger() const;
            Ent::Gen2::Bool DisplayComponentsDependencies() const;
            Ent::Gen2::Bool DisplayConnectionWarning() const;
            Ent::Gen2::Bool DisplayCreatureListAggressive() const;
            Ent::Gen2::Bool DisplayCreatureListDanger() const;
            Ent::Gen2::Bool DisplayCreatureListDetection() const;
            Ent::Gen2::Bool DisplayCreatureListDistance() const;
            Ent::Gen2::Bool DisplayCreatureListHelp() const;
            Ent::Gen2::Bool DisplayCreatureListPresence() const;
            Ent::Gen2::Bool DisplayCreatureListSpecie() const;
            Ent::Gen2::Bool DisplayCreatureListState() const;
            Ent::Gen2::Bool DisplayCreatureListThreat() const;
            Ent::Gen2::Bool DisplayCreatureListTrust() const;
            Ent::Gen2::Bool DisplayCreatureListVisibility() const;
            Ent::Gen2::Bool DisplayDecalsDebug() const;
            Ent::Gen2::Bool DisplayDistanceTool() const;
            Ent::Gen2::Bool DisplayDrawDebugFromLastSteppedFrame() const;
            Ent::Gen2::Bool DisplayEnergyPools() const;
            Ent::Gen2::Bool DisplayEntities() const;
            Ent::Gen2::Bool DisplayEntitiesWithErrors() const;
            Ent::Gen2::Bool DisplayEntityClan() const;
            Ent::Gen2::Float DisplayEntityDistanceMax() const;
            Ent::Gen2::Bool DisplayFPS() const;
            Ent::Gen2::Bool DisplayGameMaster() const;
            Ent::Gen2::Bool DisplayGamepadStateViewer() const;
            Ent::Gen2::Bool DisplayGestureMenu() const;
            Ent::Gen2::Bool DisplayGoToPosition() const;
            Ent::Gen2::Bool DisplayHeightProbe() const;
            Ent::Gen2::Bool DisplayHitDebugger() const;
            Ent::Gen2::Bool DisplayHotSpot() const;
            Ent::Gen2::Float DisplayHotspotDistanceMax() const;
            Ent::Gen2::Bool DisplayManagersInfos() const;
            Ent::Gen2::Bool DisplayMaterialBank() const;
            Ent::Gen2::Bool DisplayMeshRasterizerInfos() const;
            Ent::Gen2::Bool DisplayObjectFilterHistory() const;
            Ent::Gen2::Bool DisplayOrder() const;
            Ent::Gen2::Bool DisplayPadEmulator() const;
            Ent::Gen2::Bool DisplayParticleTool() const;
            Ent::Gen2::Bool DisplayPathSystem() const;
            Ent::Gen2::Bool DisplayPesto() const;
            Ent::Gen2::Bool DisplayPestoCPUMarkers() const;
            Ent::Gen2::Bool DisplayPhysicsPicker() const;
            Ent::Gen2::Bool DisplayPivot() const;
            Ent::Gen2::Bool DisplayPlayerInteraction() const;
            Ent::Gen2::Bool DisplayPositionPicker() const;
            Ent::Gen2::Bool DisplayProjectileThrower() const;
            Ent::Gen2::Bool DisplayPseudos() const;
            Ent::Gen2::Bool DisplayQualityManager() const;
            Ent::Gen2::Bool DisplayRPCCalls() const;
            Ent::Gen2::Bool DisplayReloadNotifications() const;
            Ent::Gen2::Bool DisplaySelectedPestoEntity() const;
            Ent::Gen2::Bool DisplayStringHashTranslator() const;
            Ent::Gen2::Bool DisplayTimer() const;
            Ent::Gen2::Bool DisplayTreesStates() const;
            Ent::Gen2::Bool EditorGuiAllowsComponentsSplitView() const;
            Ent::Gen2::Bool EditorGuiListenGamepad() const;
            Ent::Gen2::Bool EditorGuiListenKeyboard() const;
            Ent::Gen2::Bool OpenEntityWindows() const;
            Ent::Gen2::Bool UseTransformEditor() const;
            Ent::Gen2::String _comment() const;
        };

        struct DebugManager : HelperObject<DebugManager> // Object
        {
            explicit DebugManager(Ent::Property _node): HelperObject<DebugManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "DebugManager";
            static DebugManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DebugManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DebugManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DebugManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DebugManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DebugManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DebugManager makeInstanceOf()
            {
                return DebugManager(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> CheatCodes() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::Bool> DisplayComponentType() const;
            Ent::Gen2::Bool DisplayManagerWindow() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::Bool> DisplayNodeType() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::Bool> DisplayNodeTypeWithAlwaysAutoResize() const;
            Ent::Gen2::Bool DisplayResourceWindow() const;
            Ent::Gen2::DebugDisplayFlags Flags() const;
            Ent::Gen2::Online Online() const;
            Ent::Gen2::DebugManager_PlayerState PlayerState() const;
            Ent::Gen2::String StreamPublicationCommand() const;
            Ent::Gen2::String StreamingServerIP() const;
            Ent::Gen2::Manager Super() const;
            Array<Ent::Gen2::TrackedEntitiesItem> TrackedEntities() const;
            Array<Ent::Gen2::DebugManager_ComponentID> TrackedEntitiesSplitComponents() const;
            Ent::Gen2::Bool WipAnimation() const;
            Ent::Gen2::String _comment() const;
        };

        struct DamagesInstant : HelperObject<DamagesInstant> // Object
        {
            explicit DamagesInstant(Ent::Property _node): HelperObject<DamagesInstant>(std::move(_node)) {}
            static constexpr char schemaName[] = "DamagesInstant";
            static DamagesInstant load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DamagesInstant(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DamagesInstant loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DamagesInstant(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DamagesInstant create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DamagesInstant(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DamagesInstant makeInstanceOf()
            {
                return DamagesInstant(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float damage() const;
            Ent::Gen2::Float impact() const;
        };

        struct DamageGauge : HelperObject<DamageGauge> // Object
        {
            explicit DamageGauge(Ent::Property _node): HelperObject<DamageGauge>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Float val() const;
        };

        struct CreatureTypeData : HelperObject<CreatureTypeData> // Object
        {
            explicit CreatureTypeData(Ent::Property _node): HelperObject<CreatureTypeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureTypeData";
            static CreatureTypeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureTypeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureTypeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureTypeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureTypeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureTypeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureTypeData makeInstanceOf()
            {
                return CreatureTypeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String name() const;
            Ent::Gen2::Float value() const;
        };

        struct CreatureProfile__CreatureProfileFact : HelperObject<CreatureProfile__CreatureProfileFact> // Object
        {
            explicit CreatureProfile__CreatureProfileFact(Ent::Property _node): HelperObject<CreatureProfile__CreatureProfileFact>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureProfile::_CreatureProfileFact";
            static CreatureProfile__CreatureProfileFact load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureProfile__CreatureProfileFact(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureProfile__CreatureProfileFact loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureProfile__CreatureProfileFact(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureProfile__CreatureProfileFact create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureProfile__CreatureProfileFact(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureProfile__CreatureProfileFact makeInstanceOf()
            {
                return CreatureProfile__CreatureProfileFact(getProperty().makeInstanceOf());
            }
            Ent::Gen2::GameTimeInMs TimeOfCreation() const;
            Ent::Gen2::String _comment() const;
        };

        struct CreatureProfile : HelperObject<CreatureProfile> // Object
        {
            explicit CreatureProfile(Ent::Property _node): HelperObject<CreatureProfile>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureProfile";
            static CreatureProfile load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureProfile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureProfile loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureProfile(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureProfile create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureProfile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureProfile makeInstanceOf()
            {
                return CreatureProfile(getProperty().makeInstanceOf());
            }
            Array<Array<Ent::Gen2::CreatureProfile__CreatureProfileFact>> Facts() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::Float> ValueMap() const;
            Ent::Gen2::String _comment() const;
        };

        struct CreatureDangerousness : HelperObject<CreatureDangerousness> // Object
        {
            explicit CreatureDangerousness(Ent::Property _node): HelperObject<CreatureDangerousness>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureDangerousness";
            static CreatureDangerousness load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureDangerousness(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureDangerousness loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureDangerousness(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureDangerousness create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureDangerousness(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureDangerousness makeInstanceOf()
            {
                return CreatureDangerousness(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int dangerousness() const;
        };

        struct ConstrainedMoveContextInput : HelperObject<ConstrainedMoveContextInput> // Object
        {
            explicit ConstrainedMoveContextInput(Ent::Property _node): HelperObject<ConstrainedMoveContextInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConstrainedMoveContextInput";
            static ConstrainedMoveContextInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConstrainedMoveContextInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConstrainedMoveContextInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConstrainedMoveContextInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConstrainedMoveContextInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConstrainedMoveContextInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConstrainedMoveContextInput makeInstanceOf()
            {
                return ConstrainedMoveContextInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float CurvatureNormalizationRadius() const;
            Ent::Gen2::Int PowerMethodIterationMaxCount() const;
            Ent::Gen2::Float PowerMethodIterationThreshold() const;
            Ent::Gen2::Float RaycastAngleThreshold() const;
            Ent::Gen2::Int RaycastCount() const;
            Ent::Gen2::Float RaycastLength() const;
            Ent::Gen2::Float RaycastStep() const;
            Ent::Gen2::String _comment() const;
        };

        struct ConstrainedInputData : HelperObject<ConstrainedInputData> // Object
        {
            explicit ConstrainedInputData(Ent::Property _node): HelperObject<ConstrainedInputData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConstrainedInputData";
            static ConstrainedInputData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConstrainedInputData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConstrainedInputData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConstrainedInputData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConstrainedInputData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConstrainedInputData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConstrainedInputData makeInstanceOf()
            {
                return ConstrainedInputData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DiagonalSpeedFactor() const;
            Ent::Gen2::Float DirectionHysteresisAngle() const;
            Ent::Gen2::Float LateralSpeedFactor() const;
            Ent::Gen2::String _comment() const;
        };

        struct ConditionalRigidityAttribute_RigidityParameter : HelperObject<ConditionalRigidityAttribute_RigidityParameter> // Object
        {
            explicit ConditionalRigidityAttribute_RigidityParameter(Ent::Property _node): HelperObject<ConditionalRigidityAttribute_RigidityParameter>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::RigidityParameter";
            static ConditionalRigidityAttribute_RigidityParameter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConditionalRigidityAttribute_RigidityParameter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConditionalRigidityAttribute_RigidityParameter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConditionalRigidityAttribute_RigidityParameter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConditionalRigidityAttribute_RigidityParameter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConditionalRigidityAttribute_RigidityParameter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConditionalRigidityAttribute_RigidityParameter makeInstanceOf()
            {
                return ConditionalRigidityAttribute_RigidityParameter(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ScaleConverter Rigidity() const;
            Ent::Gen2::Float SpeedDown() const;
            Ent::Gen2::Float SpeedUp() const;
            Ent::Gen2::String _comment() const;
        };

        struct ConditionalRigidityAttribute_Attributes : HelperObject<ConditionalRigidityAttribute_Attributes> // Object
        {
            explicit ConditionalRigidityAttribute_Attributes(Ent::Property _node): HelperObject<ConditionalRigidityAttribute_Attributes>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::Attributes";
            static ConditionalRigidityAttribute_Attributes load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConditionalRigidityAttribute_Attributes(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConditionalRigidityAttribute_Attributes loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConditionalRigidityAttribute_Attributes(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConditionalRigidityAttribute_Attributes create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConditionalRigidityAttribute_Attributes(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConditionalRigidityAttribute_Attributes makeInstanceOf()
            {
                return ConditionalRigidityAttribute_Attributes(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter DirectionAngular() const;
            Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter DirectionLinear() const;
            Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter OscillationAngular() const;
            Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter OscillationLinear() const;
            Ent::Gen2::String _comment() const;
        };

        struct ComponentInputBase : HelperObject<ComponentInputBase> // Object
        {
            explicit ComponentInputBase(Ent::Property _node): HelperObject<ComponentInputBase>(std::move(_node)) {}
            static constexpr char schemaName[] = "ComponentInputBase";
            static ComponentInputBase load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ComponentInputBase(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ComponentInputBase loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ComponentInputBase(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ComponentInputBase create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ComponentInputBase(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ComponentInputBase makeInstanceOf()
            {
                return ComponentInputBase(getProperty().makeInstanceOf());
            }
        
        };

        struct ComponentInputEmpty : HelperObject<ComponentInputEmpty> // Object
        {
            explicit ComponentInputEmpty(Ent::Property _node): HelperObject<ComponentInputEmpty>(std::move(_node)) {}
            static constexpr char schemaName[] = "ComponentInputEmpty";
            static ComponentInputEmpty load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ComponentInputEmpty(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ComponentInputEmpty loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ComponentInputEmpty(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ComponentInputEmpty create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ComponentInputEmpty(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ComponentInputEmpty makeInstanceOf()
            {
                return ComponentInputEmpty(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInputBase Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ComponentInput : HelperObject<ComponentInput> // Object
        {
            explicit ComponentInput(Ent::Property _node): HelperObject<ComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "ComponentInput";
            static ComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ComponentInput makeInstanceOf()
            {
                return ComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Enabled Enabled() const;
            Ent::Gen2::ComponentInputBase Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct WallRunComponentInput : HelperObject<WallRunComponentInput> // Object
        {
            explicit WallRunComponentInput(Ent::Property _node): HelperObject<WallRunComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "WallRunComponentInput";
            static WallRunComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WallRunComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WallRunComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WallRunComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WallRunComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WallRunComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WallRunComponentInput makeInstanceOf()
            {
                return WallRunComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct VelocityObstacleComponentInput : HelperObject<VelocityObstacleComponentInput> // Object
        {
            explicit VelocityObstacleComponentInput(Ent::Property _node): HelperObject<VelocityObstacleComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "VelocityObstacleComponentInput";
            static VelocityObstacleComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VelocityObstacleComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VelocityObstacleComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VelocityObstacleComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VelocityObstacleComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VelocityObstacleComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VelocityObstacleComponentInput makeInstanceOf()
            {
                return VelocityObstacleComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct UnifiedPhysicsDataComponentInput : HelperObject<UnifiedPhysicsDataComponentInput> // Object
        {
            explicit UnifiedPhysicsDataComponentInput(Ent::Property _node): HelperObject<UnifiedPhysicsDataComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "UnifiedPhysicsDataComponentInput";
            static UnifiedPhysicsDataComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return UnifiedPhysicsDataComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static UnifiedPhysicsDataComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return UnifiedPhysicsDataComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static UnifiedPhysicsDataComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return UnifiedPhysicsDataComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            UnifiedPhysicsDataComponentInput makeInstanceOf()
            {
                return UnifiedPhysicsDataComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SpiritAnimalShrineComponentInput : HelperObject<SpiritAnimalShrineComponentInput> // Object
        {
            explicit SpiritAnimalShrineComponentInput(Ent::Property _node): HelperObject<SpiritAnimalShrineComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "SpiritAnimalShrineComponentInput";
            static SpiritAnimalShrineComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SpiritAnimalShrineComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SpiritAnimalShrineComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SpiritAnimalShrineComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SpiritAnimalShrineComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SpiritAnimalShrineComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SpiritAnimalShrineComponentInput makeInstanceOf()
            {
                return SpiritAnimalShrineComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoundEmitterComponentInput : HelperObject<SoundEmitterComponentInput> // Object
        {
            explicit SoundEmitterComponentInput(Ent::Property _node): HelperObject<SoundEmitterComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundEmitterComponentInput";
            static SoundEmitterComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoundEmitterComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoundEmitterComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoundEmitterComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoundEmitterComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoundEmitterComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoundEmitterComponentInput makeInstanceOf()
            {
                return SoundEmitterComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::computePitchAngle computePitchAngle() const;
        };

        struct SoftCollisionComponentInput : HelperObject<SoftCollisionComponentInput> // Object
        {
            explicit SoftCollisionComponentInput(Ent::Property _node): HelperObject<SoftCollisionComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoftCollisionComponentInput";
            static SoftCollisionComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoftCollisionComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoftCollisionComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoftCollisionComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoftCollisionComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoftCollisionComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoftCollisionComponentInput makeInstanceOf()
            {
                return SoftCollisionComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SmoothScaleComponentInput : HelperObject<SmoothScaleComponentInput> // Object
        {
            explicit SmoothScaleComponentInput(Ent::Property _node): HelperObject<SmoothScaleComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "SmoothScaleComponentInput";
            static SmoothScaleComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SmoothScaleComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SmoothScaleComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SmoothScaleComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SmoothScaleComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SmoothScaleComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SmoothScaleComponentInput makeInstanceOf()
            {
                return SmoothScaleComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Parameters Parameters() const;
            Ent::Gen2::ScaleFactor ScaleFactor() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ScriptComponentInput : HelperObject<ScriptComponentInput> // Object
        {
            explicit ScriptComponentInput(Ent::Property _node): HelperObject<ScriptComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "ScriptComponentInput";
            static ScriptComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ScriptComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ScriptComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ScriptComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ScriptComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ScriptComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ScriptComponentInput makeInstanceOf()
            {
                return ScriptComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReviveEnergyComponentInput : HelperObject<ReviveEnergyComponentInput> // Object
        {
            explicit ReviveEnergyComponentInput(Ent::Property _node): HelperObject<ReviveEnergyComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReviveEnergyComponentInput";
            static ReviveEnergyComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReviveEnergyComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReviveEnergyComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReviveEnergyComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReviveEnergyComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReviveEnergyComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReviveEnergyComponentInput makeInstanceOf()
            {
                return ReviveEnergyComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ReviveEnergyComponentInput_EnergySide EnergySide() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RespawnabilityComponentInput : HelperObject<RespawnabilityComponentInput> // Object
        {
            explicit RespawnabilityComponentInput(Ent::Property _node): HelperObject<RespawnabilityComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "RespawnabilityComponentInput";
            static RespawnabilityComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RespawnabilityComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RespawnabilityComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RespawnabilityComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RespawnabilityComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RespawnabilityComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RespawnabilityComponentInput makeInstanceOf()
            {
                return RespawnabilityComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RagdollComponentInput : HelperObject<RagdollComponentInput> // Object
        {
            explicit RagdollComponentInput(Ent::Property _node): HelperObject<RagdollComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "RagdollComponentInput";
            static RagdollComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RagdollComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RagdollComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RagdollComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RagdollComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RagdollComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RagdollComponentInput makeInstanceOf()
            {
                return RagdollComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsImpactMakerComponentInput : HelperObject<PhysicsImpactMakerComponentInput> // Object
        {
            explicit PhysicsImpactMakerComponentInput(Ent::Property _node): HelperObject<PhysicsImpactMakerComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsImpactMakerComponentInput";
            static PhysicsImpactMakerComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsImpactMakerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsImpactMakerComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsImpactMakerComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsImpactMakerComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsImpactMakerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsImpactMakerComponentInput makeInstanceOf()
            {
                return PhysicsImpactMakerComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ForceMultiplier ForceMultiplier() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsComponentInput : HelperObject<PhysicsComponentInput> // Object
        {
            explicit PhysicsComponentInput(Ent::Property _node): HelperObject<PhysicsComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsComponentInput";
            static PhysicsComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsComponentInput makeInstanceOf()
            {
                return PhysicsComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PerceiverComponentInput : HelperObject<PerceiverComponentInput> // Object
        {
            explicit PerceiverComponentInput(Ent::Property _node): HelperObject<PerceiverComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "PerceiverComponentInput";
            static PerceiverComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PerceiverComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PerceiverComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PerceiverComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PerceiverComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PerceiverComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PerceiverComponentInput makeInstanceOf()
            {
                return PerceiverComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::PerceiverComponentInput_usePerception usePerception() const;
        };

        struct PerceivableComponentInput : HelperObject<PerceivableComponentInput> // Object
        {
            explicit PerceivableComponentInput(Ent::Property _node): HelperObject<PerceivableComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "PerceivableComponentInput";
            static PerceivableComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PerceivableComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PerceivableComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PerceivableComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PerceivableComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PerceivableComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PerceivableComponentInput makeInstanceOf()
            {
                return PerceivableComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::isPerceivable isPerceivable() const;
            Ent::Gen2::isPerceivableForEnemies isPerceivableForEnemies() const;
            Ent::Gen2::soundEmissionStrength soundEmissionStrength() const;
        };

        struct OutfitWearerComponentInput : HelperObject<OutfitWearerComponentInput> // Object
        {
            explicit OutfitWearerComponentInput(Ent::Property _node): HelperObject<OutfitWearerComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "OutfitWearerComponentInput";
            static OutfitWearerComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OutfitWearerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OutfitWearerComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OutfitWearerComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OutfitWearerComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OutfitWearerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OutfitWearerComponentInput makeInstanceOf()
            {
                return OutfitWearerComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::FadeDelay FadeDelay() const;
            Ent::Gen2::FadeDuration FadeDuration() const;
            PrimArray<Ent::Gen2::InventoryTags> OutfitTags() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct MountIKControllerComponentInput : HelperObject<MountIKControllerComponentInput> // Object
        {
            explicit MountIKControllerComponentInput(Ent::Property _node): HelperObject<MountIKControllerComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "MountIKControllerComponentInput";
            static MountIKControllerComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MountIKControllerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MountIKControllerComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MountIKControllerComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MountIKControllerComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MountIKControllerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MountIKControllerComponentInput makeInstanceOf()
            {
                return MountIKControllerComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct LifeComponentInput : HelperObject<LifeComponentInput> // Object
        {
            explicit LifeComponentInput(Ent::Property _node): HelperObject<LifeComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "LifeComponentInput";
            static LifeComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return LifeComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static LifeComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return LifeComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static LifeComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return LifeComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            LifeComponentInput makeInstanceOf()
            {
                return LifeComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::DamageGauge DamageGauge() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct InteractorComponentInput : HelperObject<InteractorComponentInput> // Object
        {
            explicit InteractorComponentInput(Ent::Property _node): HelperObject<InteractorComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "InteractorComponentInput";
            static InteractorComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InteractorComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InteractorComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InteractorComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InteractorComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InteractorComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InteractorComponentInput makeInstanceOf()
            {
                return InteractorComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EndPosition EndPosition() const;
            Ent::Gen2::IsActive IsActive() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct InteractableGPEComponentInput : HelperObject<InteractableGPEComponentInput> // Object
        {
            explicit InteractableGPEComponentInput(Ent::Property _node): HelperObject<InteractableGPEComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "InteractableGPEComponentInput";
            static InteractableGPEComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InteractableGPEComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InteractableGPEComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InteractableGPEComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InteractableGPEComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InteractableGPEComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InteractableGPEComponentInput makeInstanceOf()
            {
                return InteractableGPEComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Interactor Interactor() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct GrasperComponentInput : HelperObject<GrasperComponentInput> // Object
        {
            explicit GrasperComponentInput(Ent::Property _node): HelperObject<GrasperComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "GrasperComponentInput";
            static GrasperComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GrasperComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GrasperComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GrasperComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GrasperComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GrasperComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GrasperComponentInput makeInstanceOf()
            {
                return GrasperComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::enableSynchronization enableSynchronization() const;
            Ent::Gen2::tryGrasp tryGrasp() const;
        };

        struct GraspableComponentInput : HelperObject<GraspableComponentInput> // Object
        {
            explicit GraspableComponentInput(Ent::Property _node): HelperObject<GraspableComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "GraspableComponentInput";
            static GraspableComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GraspableComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GraspableComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GraspableComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GraspableComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GraspableComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GraspableComponentInput makeInstanceOf()
            {
                return GraspableComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::allowedTypesItem> allowedTypes() const;
            Ent::Gen2::retiming retiming() const;
        };

        struct FluidComponentInput : HelperObject<FluidComponentInput> // Object
        {
            explicit FluidComponentInput(Ent::Property _node): HelperObject<FluidComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidComponentInput";
            static FluidComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidComponentInput makeInstanceOf()
            {
                return FluidComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::DisableFluid DisableFluid() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergySpoutComponentInput : HelperObject<EnergySpoutComponentInput> // Object
        {
            explicit EnergySpoutComponentInput(Ent::Property _node): HelperObject<EnergySpoutComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergySpoutComponentInput";
            static EnergySpoutComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergySpoutComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergySpoutComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergySpoutComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergySpoutComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergySpoutComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergySpoutComponentInput makeInstanceOf()
            {
                return EnergySpoutComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CreatureAIComponentInput : HelperObject<CreatureAIComponentInput> // Object
        {
            explicit CreatureAIComponentInput(Ent::Property _node): HelperObject<CreatureAIComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureAIComponentInput";
            static CreatureAIComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureAIComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureAIComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureAIComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureAIComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureAIComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureAIComponentInput makeInstanceOf()
            {
                return CreatureAIComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::resetCreatureRequest resetCreatureRequest() const;
            Ent::Gen2::usePerception usePerception() const;
        };

        struct CinematicComponentInput : HelperObject<CinematicComponentInput> // Object
        {
            explicit CinematicComponentInput(Ent::Property _node): HelperObject<CinematicComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "CinematicComponentInput";
            static CinematicComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CinematicComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CinematicComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CinematicComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CinematicComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CinematicComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CinematicComponentInput makeInstanceOf()
            {
                return CinematicComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ChargedJumpComponentInput : HelperObject<ChargedJumpComponentInput> // Object
        {
            explicit ChargedJumpComponentInput(Ent::Property _node): HelperObject<ChargedJumpComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "ChargedJumpComponentInput";
            static ChargedJumpComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ChargedJumpComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ChargedJumpComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ChargedJumpComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ChargedJumpComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ChargedJumpComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ChargedJumpComponentInput makeInstanceOf()
            {
                return ChargedJumpComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::jumpPower jumpPower() const;
        };

        struct CharacterControllerComponentInput : HelperObject<CharacterControllerComponentInput> // Object
        {
            explicit CharacterControllerComponentInput(Ent::Property _node): HelperObject<CharacterControllerComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "CharacterControllerComponentInput";
            static CharacterControllerComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CharacterControllerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CharacterControllerComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CharacterControllerComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CharacterControllerComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CharacterControllerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CharacterControllerComponentInput makeInstanceOf()
            {
                return CharacterControllerComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::JumpHeightMultiplier JumpHeightMultiplier() const;
            Ent::Gen2::RigidbodyScaleMultiplier RigidbodyScaleMultiplier() const;
            Ent::Gen2::RigidbodyScalingSpeed RigidbodyScalingSpeed() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BreakableComponentInput : HelperObject<BreakableComponentInput> // Object
        {
            explicit BreakableComponentInput(Ent::Property _node): HelperObject<BreakableComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "BreakableComponentInput";
            static BreakableComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BreakableComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BreakableComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BreakableComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BreakableComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BreakableComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BreakableComponentInput makeInstanceOf()
            {
                return BreakableComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BeamTargetComponentInput : HelperObject<BeamTargetComponentInput> // Object
        {
            explicit BeamTargetComponentInput(Ent::Property _node): HelperObject<BeamTargetComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "BeamTargetComponentInput";
            static BeamTargetComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BeamTargetComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BeamTargetComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BeamTargetComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BeamTargetComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BeamTargetComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BeamTargetComponentInput makeInstanceOf()
            {
                return BeamTargetComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AttackTriggerComponentInput : HelperObject<AttackTriggerComponentInput> // Object
        {
            explicit AttackTriggerComponentInput(Ent::Property _node): HelperObject<AttackTriggerComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackTriggerComponentInput";
            static AttackTriggerComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackTriggerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackTriggerComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackTriggerComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackTriggerComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackTriggerComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackTriggerComponentInput makeInstanceOf()
            {
                return AttackTriggerComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AttackComponentInput : HelperObject<AttackComponentInput> // Object
        {
            explicit AttackComponentInput(Ent::Property _node): HelperObject<AttackComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackComponentInput";
            static AttackComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackComponentInput makeInstanceOf()
            {
                return AttackComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationTransformDriverComponentInput : HelperObject<AnimationTransformDriverComponentInput> // Object
        {
            explicit AnimationTransformDriverComponentInput(Ent::Property _node): HelperObject<AnimationTransformDriverComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationTransformDriverComponentInput";
            static AnimationTransformDriverComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationTransformDriverComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationTransformDriverComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationTransformDriverComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationTransformDriverComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationTransformDriverComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationTransformDriverComponentInput makeInstanceOf()
            {
                return AnimationTransformDriverComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ComponentGD : HelperObject<ComponentGD> // Object
        {
            explicit ComponentGD(Ent::Property _node): HelperObject<ComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ComponentGD";
            static ComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ComponentGD makeInstanceOf()
            {
                return ComponentGD(getProperty().makeInstanceOf());
            }
        
        };

        struct WildObject : HelperObject<WildObject> // Object
        {
            explicit WildObject(Ent::Property _node): HelperObject<WildObject>(std::move(_node)) {}
            static constexpr char schemaName[] = "WildObject";
            static WildObject load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WildObject(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WildObject loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WildObject(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WildObject create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WildObject(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WildObject makeInstanceOf()
            {
                return WildObject(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String GdPath() const;
            Ent::Gen2::String ObjectType() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct WallRunGD : HelperObject<WallRunGD> // Object
        {
            explicit WallRunGD(Ent::Property _node): HelperObject<WallRunGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "WallRunGD";
            static WallRunGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WallRunGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WallRunGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WallRunGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WallRunGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WallRunGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WallRunGD makeInstanceOf()
            {
                return WallRunGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float dropAirControlDelay() const;
            Ent::Gen2::Float dropCoyoteJumpMaxTime() const;
            Ent::Gen2::Float dropTrajectoryRotationYaw() const;
            Ent::Gen2::Float dropVisualRotationYawRateFactor() const;
            Ent::Gen2::Float jumpRiseMinCoeffToEnter() const;
            Ent::Gen2::Float jumpTrajectoryRotationYaw() const;
            Ent::Gen2::Float jumpVisualRotationYawRateFactor() const;
            Ent::Gen2::Float probeLengthCoeff() const;
            Ent::Gen2::Float probeRadiusCoeff() const;
            Ent::Gen2::Int probeRayCastCount() const;
            Ent::Gen2::Float probeRotationAngle() const;
            Ent::Gen2::Float runDurationMax() const;
            Ent::Gen2::Float runDurationMin() const;
            Ent::Gen2::Float runForwardSpeedNormMinToEnter() const;
            Ent::Gen2::Float runOrientationRateFactor() const;
            Ent::Gen2::Float runRequiredDirectionDeltaAngleMax() const;
            Ent::Gen2::Float runRequiredDirectionDeltaAngleMin() const;
            Ent::Gen2::Float runRequiredSpeedNormMin() const;
            Ent::Gen2::Float runSightDeltaAngleMaxtoEnter() const;
            Ent::Gen2::Float runSlopeAngleHysteresis() const;
            Ent::Gen2::Float runSlopeAngleMax() const;
            Ent::Gen2::Float runSlopeAngleMin() const;
            Ent::Gen2::String runTrajectoryRotationPitchCurveResourcePath() const;
            Ent::Gen2::Float runTrajectoryRotationYaw() const;
            Ent::Gen2::Float runVerticalSpeedNormMaxToEnter() const;
            Ent::Gen2::Float runVerticalSpeedNormMinToEnter() const;
        };

        struct VoxelSimulationGD : HelperObject<VoxelSimulationGD> // Object
        {
            explicit VoxelSimulationGD(Ent::Property _node): HelperObject<VoxelSimulationGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "VoxelSimulationGD";
            static VoxelSimulationGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VoxelSimulationGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VoxelSimulationGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VoxelSimulationGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VoxelSimulationGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VoxelSimulationGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VoxelSimulationGD makeInstanceOf()
            {
                return VoxelSimulationGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float EDITOR_voxelSize() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct VolumeConstraintGD : HelperObject<VolumeConstraintGD> // Object
        {
            explicit VolumeConstraintGD(Ent::Property _node): HelperObject<VolumeConstraintGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "VolumeConstraintGD";
            static VolumeConstraintGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VolumeConstraintGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VolumeConstraintGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VolumeConstraintGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VolumeConstraintGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VolumeConstraintGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VolumeConstraintGD makeInstanceOf()
            {
                return VolumeConstraintGD(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::VolumeConstraintDataGD> Constraints() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct VisualGD : HelperObject<VisualGD> // Object
        {
            explicit VisualGD(Ent::Property _node): HelperObject<VisualGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "VisualGD";
            static VisualGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VisualGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VisualGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VisualGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VisualGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VisualGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VisualGD makeInstanceOf()
            {
                return VisualGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AlwaysStatic() const;
            Ent::Gen2::Bool EDITOR_GenerateFur() const;
            Array<Ent::Gen2::EDITOR_LODsItem> EDITOR_LODs() const;
            Ent::Gen2::String MaterialGroup() const;
            Ent::Gen2::Float RUNTIME_LODScale() const;
            Array<Ent::Gen2::RUNTIME_LODsItem> RUNTIME_LODs() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String VisualResourcePath() const;
            Ent::Gen2::String _comment() const;
        };

        struct VelocityObstacleGD : HelperObject<VelocityObstacleGD> // Object
        {
            explicit VelocityObstacleGD(Ent::Property _node): HelperObject<VelocityObstacleGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "VelocityObstacleGD";
            static VelocityObstacleGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VelocityObstacleGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VelocityObstacleGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VelocityObstacleGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VelocityObstacleGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VelocityObstacleGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VelocityObstacleGD makeInstanceOf()
            {
                return VelocityObstacleGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AccelerationAfterAvoidance() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct UnifiedPhysicsDataGD : HelperObject<UnifiedPhysicsDataGD> // Object
        {
            explicit UnifiedPhysicsDataGD(Ent::Property _node): HelperObject<UnifiedPhysicsDataGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "UnifiedPhysicsDataGD";
            static UnifiedPhysicsDataGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return UnifiedPhysicsDataGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static UnifiedPhysicsDataGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return UnifiedPhysicsDataGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static UnifiedPhysicsDataGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return UnifiedPhysicsDataGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            UnifiedPhysicsDataGD makeInstanceOf()
            {
                return UnifiedPhysicsDataGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct TriggerEventCameraGD : HelperObject<TriggerEventCameraGD> // Object
        {
            explicit TriggerEventCameraGD(Ent::Property _node): HelperObject<TriggerEventCameraGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "TriggerEventCameraGD";
            static TriggerEventCameraGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TriggerEventCameraGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TriggerEventCameraGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TriggerEventCameraGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TriggerEventCameraGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TriggerEventCameraGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TriggerEventCameraGD makeInstanceOf()
            {
                return TriggerEventCameraGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EventCameraData EventCameraData() const;
            PrimArray<Ent::Gen2::String> PlayAnimBeforeTrigger() const;
            Array<PrimArray<Ent::Gen2::String>> PlayAnimsWhenTriggered() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Bool UseDuration() const;
            Ent::Gen2::Bool UsePhysics() const;
            Ent::Gen2::Bool UseRadius() const;
            Ent::Gen2::String _comment() const;
        };

        struct TransformGD : HelperObject<TransformGD> // Object
        {
            explicit TransformGD(Ent::Property _node): HelperObject<TransformGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "TransformGD";
            static TransformGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TransformGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TransformGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TransformGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TransformGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TransformGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TransformGD makeInstanceOf()
            {
                return TransformGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool EDITOR_InheritScaleFromSubSceneHolder() const;
            Ent::Gen2::Bool EDITOR_PropagateScaleToSubScene() const;
            Ent::Gen2::Matrix33 Matrix() const;
            Ent::Gen2::Quat Orientation() const;
            Ent::Gen2::Vector3 Position() const;
            Ent::Gen2::Vector3 Scale() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct TestUnion : HelperObject<TestUnion> // Object
        {
            explicit TestUnion(Ent::Property _node): HelperObject<TestUnion>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestUnion";
            static TestUnion load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestUnion(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestUnion loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestUnion(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestUnion create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestUnion(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestUnion makeInstanceOf()
            {
                return TestUnion(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ Union() const;
            Array<Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_> UnionArray() const;
            Array<Ent::Gen2::UnionObjectArrayItem> UnionObjectArray() const;
            Ent::Gen2::String _comment() const;
        };

        struct TestTagsList : HelperObject<TestTagsList> // Object
        {
            explicit TestTagsList(Ent::Property _node): HelperObject<TestTagsList>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestTagsList";
            static TestTagsList load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestTagsList(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestTagsList loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestTagsList(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestTagsList create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestTagsList(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestTagsList makeInstanceOf()
            {
                return TestTagsList(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::TagsList Tags() const;
            Ent::Gen2::String _comment() const;
        };

        struct TestSetOfObject : HelperObject<TestSetOfObject> // Object
        {
            explicit TestSetOfObject(Ent::Property _node): HelperObject<TestSetOfObject>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestSetOfObject";
            static TestSetOfObject load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestSetOfObject(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestSetOfObject loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestSetOfObject(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestSetOfObject create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestSetOfObject(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestSetOfObject makeInstanceOf()
            {
                return TestSetOfObject(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::MapOfObjectItem_A> MapOfObject() const;
            Ent::Gen2::ObjectSet<char const*, Ent::Gen2::SetOfObjectItem> SetOfObject() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct TestEntityRef : HelperObject<TestEntityRef> // Object
        {
            explicit TestEntityRef(Ent::Property _node): HelperObject<TestEntityRef>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestEntityRef";
            static TestEntityRef load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestEntityRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestEntityRef loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestEntityRef(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestEntityRef create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestEntityRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestEntityRef makeInstanceOf()
            {
                return TestEntityRef(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::EntityRef TestRef() const;
            Ent::Gen2::String _comment() const;
        };

        struct TestDefaultValues : HelperObject<TestDefaultValues> // Object
        {
            explicit TestDefaultValues(Ent::Property _node): HelperObject<TestDefaultValues>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestDefaultValues";
            static TestDefaultValues load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestDefaultValues(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestDefaultValues loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestDefaultValues(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestDefaultValues create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestDefaultValues(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestDefaultValues makeInstanceOf()
            {
                return TestDefaultValues(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Matrix33 Matrix() const;
            Ent::Gen2::Matrix33 Matrix2() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::TestPropertyDefaultValues2 propertyWithDefault() const;
        };

        struct TestCreature : HelperObject<TestCreature> // Object
        {
            explicit TestCreature(Ent::Property _node): HelperObject<TestCreature>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestCreature";
            static TestCreature load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestCreature(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestCreature loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestCreature(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestCreature create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestCreature(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestCreature makeInstanceOf()
            {
                return TestCreature(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef FullCursed() const;
            Ent::Gen2::EntityRef FullLush() const;
            Ent::Gen2::EntityRef SklCursed() const;
            Ent::Gen2::EntityRef SklLush() const;
            Ent::Gen2::EntityRef SklNeutral() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct TestArrays : HelperObject<TestArrays> // Object
        {
            explicit TestArrays(Ent::Property _node): HelperObject<TestArrays>(std::move(_node)) {}
            static constexpr char schemaName[] = "TestArrays";
            static TestArrays load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TestArrays(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TestArrays loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TestArrays(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TestArrays create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TestArrays(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TestArrays makeInstanceOf()
            {
                return TestArrays(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::Float> DefaultValue() const;
            PrimArray<Ent::Gen2::Float> OverridedDefaultValue() const;
            PrimArray<Ent::Gen2::Float> OverridedPrefabValue() const;
            PrimArray<Ent::Gen2::Float> PrefabValue() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ Variant() const;
            Ent::Gen2::String _comment() const;
        };

        struct TerrainSurfaceObject : HelperObject<TerrainSurfaceObject> // Object
        {
            explicit TerrainSurfaceObject(Ent::Property _node): HelperObject<TerrainSurfaceObject>(std::move(_node)) {}
            static constexpr char schemaName[] = "TerrainSurfaceObject";
            static TerrainSurfaceObject load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TerrainSurfaceObject(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TerrainSurfaceObject loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TerrainSurfaceObject(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TerrainSurfaceObject create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TerrainSurfaceObject(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TerrainSurfaceObject makeInstanceOf()
            {
                return TerrainSurfaceObject(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String EDITOR_tso() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct TerrainGD : HelperObject<TerrainGD> // Object
        {
            explicit TerrainGD(Ent::Property _node): HelperObject<TerrainGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "TerrainGD";
            static TerrainGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TerrainGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TerrainGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TerrainGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TerrainGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TerrainGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TerrainGD makeInstanceOf()
            {
                return TerrainGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int EDITOR_AlbedoType() const;
            Ent::Gen2::Float EDITOR_CavityAlbedoStrength() const;
            Ent::Gen2::Float EDITOR_CavityStrength() const;
            Ent::Gen2::Float EDITOR_CollisionDecimateHmm() const;
            Ent::Gen2::Bool EDITOR_ComputeSurfaceObjectTerrain() const;
            Ent::Gen2::Bool EDITOR_DebugMode() const;
            Ent::Gen2::Int EDITOR_DetailMapFalloff() const;
            Ent::Gen2::Float EDITOR_DetailScale() const;
            Ent::Gen2::Bool EDITOR_DisableSeedParams() const;
            Ent::Gen2::Bool EDITOR_DisplayAlbedo() const;
            Ent::Gen2::Bool EDITOR_DisplayFinal() const;
            Ent::Gen2::Bool EDITOR_Distributed() const;
            Ent::Gen2::Bool EDITOR_Erosion() const;
            Ent::Gen2::Int EDITOR_ErosionType() const;
            Ent::Gen2::Bool EDITOR_ExportCollision() const;
            Ent::Gen2::Int EDITOR_ExportQuality() const;
            Ent::Gen2::Bool EDITOR_LocalSndbs() const;
            Ent::Gen2::Bool EDITOR_MergeTSOPreview() const;
            Ent::Gen2::Bool EDITOR_MultiLayerHeightmap() const;
            Ent::Gen2::String EDITOR_Path() const;
            Ent::Gen2::Int EDITOR_PreviewQuality() const;
            Ent::Gen2::Bool EDITOR_ProcessDetailMap() const;
            Ent::Gen2::Int EDITOR_SeedTextureSizeReduce() const;
            Ent::Gen2::Bool EDITOR_SuperimposeSeeds() const;
            Ent::Gen2::Float EDITOR_SurfaceObjectDecimate() const;
            Ent::Gen2::Float EDITOR_SurfaceObjectDecimateHmm() const;
            Ent::Gen2::String EDITOR_TerrainWildMat() const;
            Ent::Gen2::Int EDITOR_TriPerMeter() const;
            Ent::Gen2::Bool EDITOR_WMErosionComputeDistant() const;
            Ent::Gen2::Bool EDITOR_WMErosionPreview() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Terrain_TerrainMeta TerrainMeta() const;
            Ent::Gen2::String _comment() const;
        };

        struct TeamGD : HelperObject<TeamGD> // Object
        {
            explicit TeamGD(Ent::Property _node): HelperObject<TeamGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "TeamGD";
            static TeamGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TeamGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TeamGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TeamGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TeamGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TeamGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TeamGD makeInstanceOf()
            {
                return TeamGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SystemicCreature : HelperObject<SystemicCreature> // Object
        {
            explicit SystemicCreature(Ent::Property _node): HelperObject<SystemicCreature>(std::move(_node)) {}
            static constexpr char schemaName[] = "SystemicCreature";
            static SystemicCreature load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SystemicCreature(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SystemicCreature loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SystemicCreature(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SystemicCreature create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SystemicCreature(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SystemicCreature makeInstanceOf()
            {
                return SystemicCreature(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> BehaviorModifierTagList() const;
            Ent::Gen2::String BehaviorPath() const;
            Ent::Gen2::String BehaviorState() const;
            Ent::Gen2::Bool Burried() const;
            Ent::Gen2::Bool CameraTarget() const;
            Ent::Gen2::Bool CanBeMaster() const;
            Ent::Gen2::String Faction() const;
            Ent::Gen2::String Inventory() const;
            Ent::Gen2::Bool Invincible() const;
            Ent::Gen2::Float Life() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::Bool PlayerSpawn() const;
            PrimArray<Ent::Gen2::String> ScriptList() const;
            Ent::Gen2::String Spawner() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String UniqueID() const;
            Ent::Gen2::Bool Warrior() const;
            Ent::Gen2::String _comment() const;
        };

        struct StreamingLocatorGD : HelperObject<StreamingLocatorGD> // Object
        {
            explicit StreamingLocatorGD(Ent::Property _node): HelperObject<StreamingLocatorGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "StreamingLocatorGD";
            static StreamingLocatorGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StreamingLocatorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StreamingLocatorGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StreamingLocatorGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StreamingLocatorGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StreamingLocatorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StreamingLocatorGD makeInstanceOf()
            {
                return StreamingLocatorGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector3 CenterOffset() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct StreamableUnitGD : HelperObject<StreamableUnitGD> // Object
        {
            explicit StreamableUnitGD(Ent::Property _node): HelperObject<StreamableUnitGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "StreamableUnitGD";
            static StreamableUnitGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StreamableUnitGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StreamableUnitGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StreamableUnitGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StreamableUnitGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StreamableUnitGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StreamableUnitGD makeInstanceOf()
            {
                return StreamableUnitGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef BaseImpostor() const;
            Ent::Gen2::Vector3 BoxSize() const;
            Ent::Gen2::Vector3 CenterOffset() const;
            Ent::Gen2::EntityRef EnergyPool() const;
            PrimArray<Ent::Gen2::EntityRef> FullEntities() const;
            Ent::Gen2::EntityRef FullEntitiesHolder() const;
            Ent::Gen2::Float Hysteresis() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::EntityRef> VariantImpostors() const;
            Ent::Gen2::String _comment() const;
        };

        struct StickToTerrain : HelperObject<StickToTerrain> // Object
        {
            explicit StickToTerrain(Ent::Property _node): HelperObject<StickToTerrain>(std::move(_node)) {}
            static constexpr char schemaName[] = "StickToTerrain";
            static StickToTerrain load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StickToTerrain(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StickToTerrain loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StickToTerrain(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StickToTerrain create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StickToTerrain(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StickToTerrain makeInstanceOf()
            {
                return StickToTerrain(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float NormalRatio() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Float ZOffset() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float precisionRadius() const;
            Ent::Gen2::Bool useNormal() const;
        };

        struct StaticObjectGD : HelperObject<StaticObjectGD> // Object
        {
            explicit StaticObjectGD(Ent::Property _node): HelperObject<StaticObjectGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "StaticObjectGD";
            static StaticObjectGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StaticObjectGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StaticObjectGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StaticObjectGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StaticObjectGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StaticObjectGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StaticObjectGD makeInstanceOf()
            {
                return StaticObjectGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool EDITOR_IsCave() const;
            Ent::Gen2::Bool EDITOR_UsedInMultiLayerHeightmap() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Bool Visual() const;
            Ent::Gen2::String _comment() const;
        };

        struct StaffVertebrasGD : HelperObject<StaffVertebrasGD> // Object
        {
            explicit StaffVertebrasGD(Ent::Property _node): HelperObject<StaffVertebrasGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "StaffVertebrasGD";
            static StaffVertebrasGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StaffVertebrasGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StaffVertebrasGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StaffVertebrasGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StaffVertebrasGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StaffVertebrasGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StaffVertebrasGD makeInstanceOf()
            {
                return StaffVertebrasGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int BeginVertebraRefillThreshold() const;
            Ent::Gen2::Int EndVertebraRefillThreshold() const;
            PrimArray<Ent::Gen2::String> HotspotNames() const;
            Ent::Gen2::Int MaxVertebraCount() const;
            Ent::Gen2::Int OwnedVertebraStartCount() const;
            Ent::Gen2::Float RefillVertebraTimer() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String VertebraGRCPath1() const;
            Ent::Gen2::String VertebraGRCPath2() const;
            Ent::Gen2::String VertebraGRCPath3() const;
            Ent::Gen2::String VertebraGRCPath4() const;
            Ent::Gen2::String _comment() const;
        };

        struct SpiritAnimalsHolderGD : HelperObject<SpiritAnimalsHolderGD> // Object
        {
            explicit SpiritAnimalsHolderGD(Ent::Property _node): HelperObject<SpiritAnimalsHolderGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SpiritAnimalsHolderGD";
            static SpiritAnimalsHolderGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SpiritAnimalsHolderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SpiritAnimalsHolderGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SpiritAnimalsHolderGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SpiritAnimalsHolderGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SpiritAnimalsHolderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SpiritAnimalsHolderGD makeInstanceOf()
            {
                return SpiritAnimalsHolderGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::EntityRef> EntityRefs() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SpiritAnimalShrineGD : HelperObject<SpiritAnimalShrineGD> // Object
        {
            explicit SpiritAnimalShrineGD(Ent::Property _node): HelperObject<SpiritAnimalShrineGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SpiritAnimalShrineGD";
            static SpiritAnimalShrineGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SpiritAnimalShrineGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SpiritAnimalShrineGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SpiritAnimalShrineGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SpiritAnimalShrineGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SpiritAnimalShrineGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SpiritAnimalShrineGD makeInstanceOf()
            {
                return SpiritAnimalShrineGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float InteractionDuration() const;
            Ent::Gen2::Specie Specie() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Float TimeHysteresis() const;
            Ent::Gen2::String _comment() const;
        };

        struct SpiritAnimalGD : HelperObject<SpiritAnimalGD> // Object
        {
            explicit SpiritAnimalGD(Ent::Property _node): HelperObject<SpiritAnimalGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SpiritAnimalGD";
            static SpiritAnimalGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SpiritAnimalGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SpiritAnimalGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SpiritAnimalGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SpiritAnimalGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SpiritAnimalGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SpiritAnimalGD makeInstanceOf()
            {
                return SpiritAnimalGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DeadDurationBeforeRevive() const;
            Ent::Gen2::Float SoulCooldownFromDeath() const;
            Ent::Gen2::Float SoulCooldownFromSpiritAttack() const;
            Ent::Gen2::Float SpiritAttackHoldDuration() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoundOpportunityComponentGD : HelperObject<SoundOpportunityComponentGD> // Object
        {
            explicit SoundOpportunityComponentGD(Ent::Property _node): HelperObject<SoundOpportunityComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundOpportunityComponentGD";
            static SoundOpportunityComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoundOpportunityComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoundOpportunityComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoundOpportunityComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoundOpportunityComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoundOpportunityComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoundOpportunityComponentGD makeInstanceOf()
            {
                return SoundOpportunityComponentGD(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::SoundOpportunityRangeDescription> RangeDescriptions() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoundEmitterGD : HelperObject<SoundEmitterGD> // Object
        {
            explicit SoundEmitterGD(Ent::Property _node): HelperObject<SoundEmitterGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundEmitterGD";
            static SoundEmitterGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoundEmitterGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoundEmitterGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoundEmitterGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoundEmitterGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoundEmitterGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoundEmitterGD makeInstanceOf()
            {
                return SoundEmitterGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ActivationDistance() const;
            PrimArray<Ent::Gen2::String> ActivationSound() const;
            Ent::Gen2::SyncTempoMode ActivationSync() const;
            Ent::Gen2::String AuxSend() const;
            PrimArray<Ent::Gen2::String> Bank() const;
            Ent::Gen2::Float BoidRadius() const;
            Ent::Gen2::Float BoidRadiusToInnerEdgeRatio() const;
            Ent::Gen2::Float BoidRadiusToOuterEdgeRatio() const;
            Ent::Gen2::Bool BoidRealPositionComputation() const;
            Ent::Gen2::String CreatureType() const;
            Ent::Gen2::Bool Echoes() const;
            Ent::Gen2::Float EchoesSend() const;
            Ent::Gen2::Float EventDistance() const;
            Ent::Gen2::SoundEventMapping EventMapping() const;
            PrimArray<Ent::Gen2::String> InEvents() const;
            Ent::Gen2::SoundOcclusionData OcclusionData() const;
            PrimArray<Ent::Gen2::String> OutEvents() const;
            Ent::Gen2::ComponentGD Super() const;
            PrimArray<Ent::Gen2::String> UnactivationSound() const;
            Ent::Gen2::SyncTempoMode UnactivationSync() const;
            Ent::Gen2::Bool UseLocalAltitudeRTPC() const;
            Ent::Gen2::Bool UseOcclusion() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool dopplerActivated() const;
            Ent::Gen2::Bool sendSoundAreaEvents() const;
            Ent::Gen2::Float waterDeepAltitude() const;
            Ent::Gen2::Float waterPuddleAltitude() const;
        };

        struct SoundAreaGD : HelperObject<SoundAreaGD> // Object
        {
            explicit SoundAreaGD(Ent::Property _node): HelperObject<SoundAreaGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundAreaGD";
            static SoundAreaGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoundAreaGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoundAreaGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoundAreaGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoundAreaGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoundAreaGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoundAreaGD makeInstanceOf()
            {
                return SoundAreaGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String EventEnter() const;
            Ent::Gen2::String EventExit() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoulRespawnOpportunityGD : HelperObject<SoulRespawnOpportunityGD> // Object
        {
            explicit SoulRespawnOpportunityGD(Ent::Property _node): HelperObject<SoulRespawnOpportunityGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoulRespawnOpportunityGD";
            static SoulRespawnOpportunityGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoulRespawnOpportunityGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoulRespawnOpportunityGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoulRespawnOpportunityGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoulRespawnOpportunityGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoulRespawnOpportunityGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoulRespawnOpportunityGD makeInstanceOf()
            {
                return SoulRespawnOpportunityGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EnergySide ForceEnergySide() const;
            Ent::Gen2::Int MaxDensityCount() const;
            Ent::Gen2::Float MaxDensityRadius() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::Int SlotCount() const;
            Ent::Gen2::Specie Specie() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoftCollisionGD : HelperObject<SoftCollisionGD> // Object
        {
            explicit SoftCollisionGD(Ent::Property _node): HelperObject<SoftCollisionGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoftCollisionGD";
            static SoftCollisionGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoftCollisionGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoftCollisionGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoftCollisionGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoftCollisionGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoftCollisionGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoftCollisionGD makeInstanceOf()
            {
                return SoftCollisionGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float PenetrationCoeffSmoothRate() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::SoftCollisionGD_VegetationDetectionParameters VegetationDetectionParam() const;
            Ent::Gen2::String _comment() const;
        };

        struct SmoothScaleComponentGD : HelperObject<SmoothScaleComponentGD> // Object
        {
            explicit SmoothScaleComponentGD(Ent::Property _node): HelperObject<SmoothScaleComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SmoothScaleComponentGD";
            static SmoothScaleComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SmoothScaleComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SmoothScaleComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SmoothScaleComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SmoothScaleComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SmoothScaleComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SmoothScaleComponentGD makeInstanceOf()
            {
                return SmoothScaleComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SideMapGateGD : HelperObject<SideMapGateGD> // Object
        {
            explicit SideMapGateGD(Ent::Property _node): HelperObject<SideMapGateGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SideMapGateGD";
            static SideMapGateGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SideMapGateGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SideMapGateGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SideMapGateGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SideMapGateGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SideMapGateGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SideMapGateGD makeInstanceOf()
            {
                return SideMapGateGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String SideMapName() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShapeshiftStatueGD : HelperObject<ShapeshiftStatueGD> // Object
        {
            explicit ShapeshiftStatueGD(Ent::Property _node): HelperObject<ShapeshiftStatueGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShapeshiftStatueGD";
            static ShapeshiftStatueGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShapeshiftStatueGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShapeshiftStatueGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShapeshiftStatueGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShapeshiftStatueGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShapeshiftStatueGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShapeshiftStatueGD makeInstanceOf()
            {
                return ShapeshiftStatueGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef AssociatedEntityRef() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShamanVisionGD : HelperObject<ShamanVisionGD> // Object
        {
            explicit ShamanVisionGD(Ent::Property _node): HelperObject<ShamanVisionGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShamanVisionGD";
            static ShamanVisionGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShamanVisionGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShamanVisionGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShamanVisionGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShamanVisionGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShamanVisionGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShamanVisionGD makeInstanceOf()
            {
                return ShamanVisionGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShamanItemGD : HelperObject<ShamanItemGD> // Object
        {
            explicit ShamanItemGD(Ent::Property _node): HelperObject<ShamanItemGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShamanItemGD";
            static ShamanItemGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShamanItemGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShamanItemGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShamanItemGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShamanItemGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShamanItemGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShamanItemGD makeInstanceOf()
            {
                return ShamanItemGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> BoneNames() const;
            Ent::Gen2::EntityRef OppositeItemEntityRef() const;
            Ent::Gen2::Int StartPartCount() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SensorVoxelsGD : HelperObject<SensorVoxelsGD> // Object
        {
            explicit SensorVoxelsGD(Ent::Property _node): HelperObject<SensorVoxelsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SensorVoxelsGD";
            static SensorVoxelsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SensorVoxelsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SensorVoxelsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SensorVoxelsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SensorVoxelsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SensorVoxelsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SensorVoxelsGD makeInstanceOf()
            {
                return SensorVoxelsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Array<Ent::Gen2::TaggedSDF> TaggedSDFs() const;
            Ent::Gen2::String VoxelsDataPath() const;
            Ent::Gen2::String _comment() const;
        };

        struct SensorControllerGD : HelperObject<SensorControllerGD> // Object
        {
            explicit SensorControllerGD(Ent::Property _node): HelperObject<SensorControllerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "SensorControllerGD";
            static SensorControllerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SensorControllerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SensorControllerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SensorControllerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SensorControllerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SensorControllerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SensorControllerGD makeInstanceOf()
            {
                return SensorControllerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SeedPatch : HelperObject<SeedPatch> // Object
        {
            explicit SeedPatch(Ent::Property _node): HelperObject<SeedPatch>(std::move(_node)) {}
            static constexpr char schemaName[] = "SeedPatch";
            static SeedPatch load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SeedPatch(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SeedPatch loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SeedPatch(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SeedPatch create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SeedPatch(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SeedPatch makeInstanceOf()
            {
                return SeedPatch(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AddVertexColor() const;
            Ent::Gen2::Matrix33 LocalMatrix() const;
            Ent::Gen2::String MeshFile() const;
            Ent::Gen2::String NoiseName() const;
            Ent::Gen2::Float NoiseOffsetX() const;
            Ent::Gen2::Float NoiseOffsetY() const;
            Ent::Gen2::Float NoiseSizeX() const;
            Ent::Gen2::Float NoiseSizeY() const;
            Ent::Gen2::String SeedName() const;
            Ent::Gen2::Bool SeedOverride() const;
            Ent::Gen2::SeedPatchDataList SeedPatchDataList() const;
            Ent::Gen2::SeedPatchDatas SeedPatchDatas() const;
            Ent::Gen2::Int Subdivision() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ScriptComponentGD : HelperObject<ScriptComponentGD> // Object
        {
            explicit ScriptComponentGD(Ent::Property _node): HelperObject<ScriptComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ScriptComponentGD";
            static ScriptComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ScriptComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ScriptComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ScriptComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ScriptComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ScriptComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ScriptComponentGD makeInstanceOf()
            {
                return ScriptComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::TypedValue> CommonDataMap() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::ScriptPathAndDataSet> ScriptsMap() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ReviveEnergyGD : HelperObject<ReviveEnergyGD> // Object
        {
            explicit ReviveEnergyGD(Ent::Property _node): HelperObject<ReviveEnergyGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReviveEnergyGD";
            static ReviveEnergyGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReviveEnergyGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReviveEnergyGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReviveEnergyGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReviveEnergyGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReviveEnergyGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReviveEnergyGD makeInstanceOf()
            {
                return ReviveEnergyGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float HatchingCost() const;
            Ent::Gen2::Float HatchingDuration() const;
            Ent::Gen2::EnergySide InitEnergySide() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RespawnabilityGD : HelperObject<RespawnabilityGD> // Object
        {
            explicit RespawnabilityGD(Ent::Property _node): HelperObject<RespawnabilityGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "RespawnabilityGD";
            static RespawnabilityGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RespawnabilityGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RespawnabilityGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RespawnabilityGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RespawnabilityGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RespawnabilityGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RespawnabilityGD makeInstanceOf()
            {
                return RespawnabilityGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool CheckIsInCameraFrustum() const;
            Ent::Gen2::MinDistanceToRespawnPosition MinDistanceToRespawnPosition() const;
            Ent::Gen2::MinRespawnDistance MinRespawnDistance() const;
            Ent::Gen2::RespawnState RespawnState() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RespawnPlaceGD : HelperObject<RespawnPlaceGD> // Object
        {
            explicit RespawnPlaceGD(Ent::Property _node): HelperObject<RespawnPlaceGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "RespawnPlaceGD";
            static RespawnPlaceGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RespawnPlaceGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RespawnPlaceGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RespawnPlaceGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RespawnPlaceGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RespawnPlaceGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RespawnPlaceGD makeInstanceOf()
            {
                return RespawnPlaceGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AlwaysAvailable() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RegenerableVegetationGD : HelperObject<RegenerableVegetationGD> // Object
        {
            explicit RegenerableVegetationGD(Ent::Property _node): HelperObject<RegenerableVegetationGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenerableVegetationGD";
            static RegenerableVegetationGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RegenerableVegetationGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RegenerableVegetationGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RegenerableVegetationGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RegenerableVegetationGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RegenerableVegetationGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RegenerableVegetationGD makeInstanceOf()
            {
                return RegenerableVegetationGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::EnergyValue> EnergyValues() const;
            Ent::Gen2::String PCloudPath() const;
            Ent::Gen2::ComponentGD Super() const;
            PrimArray<Ent::Gen2::String> UsedVegetations() const;
            Array<Ent::Gen2::VegetationPCloudData> VegetationPClouds() const;
            Ent::Gen2::String _comment() const;
        };

        struct RegenSwitcherGD : HelperObject<RegenSwitcherGD> // Object
        {
            explicit RegenSwitcherGD(Ent::Property _node): HelperObject<RegenSwitcherGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenSwitcherGD";
            static RegenSwitcherGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RegenSwitcherGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RegenSwitcherGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RegenSwitcherGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RegenSwitcherGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RegenSwitcherGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RegenSwitcherGD makeInstanceOf()
            {
                return RegenSwitcherGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ParentTransforms() const;
            Array<Ent::Gen2::RegenData> RegenData() const;
            Ent::Gen2::RegenSwitchBehavior RegenSwitchBehavior() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RagdollGD : HelperObject<RagdollGD> // Object
        {
            explicit RagdollGD(Ent::Property _node): HelperObject<RagdollGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "RagdollGD";
            static RagdollGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RagdollGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RagdollGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RagdollGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RagdollGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RagdollGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RagdollGD makeInstanceOf()
            {
                return RagdollGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String RagdollType() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct QuickCreatureSwitchGD : HelperObject<QuickCreatureSwitchGD> // Object
        {
            explicit QuickCreatureSwitchGD(Ent::Property _node): HelperObject<QuickCreatureSwitchGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "QuickCreatureSwitchGD";
            static QuickCreatureSwitchGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return QuickCreatureSwitchGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static QuickCreatureSwitchGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return QuickCreatureSwitchGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static QuickCreatureSwitchGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return QuickCreatureSwitchGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            QuickCreatureSwitchGD makeInstanceOf()
            {
                return QuickCreatureSwitchGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::EntityRef> CreatureEntityRefs() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ProtoComponentGD : HelperObject<ProtoComponentGD> // Object
        {
            explicit ProtoComponentGD(Ent::Property _node): HelperObject<ProtoComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ProtoComponentGD";
            static ProtoComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ProtoComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ProtoComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ProtoComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ProtoComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ProtoComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ProtoComponentGD makeInstanceOf()
            {
                return ProtoComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ProjectileShooterGD : HelperObject<ProjectileShooterGD> // Object
        {
            explicit ProjectileShooterGD(Ent::Property _node): HelperObject<ProjectileShooterGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ProjectileShooterGD";
            static ProjectileShooterGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ProjectileShooterGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ProjectileShooterGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ProjectileShooterGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ProjectileShooterGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ProjectileShooterGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ProjectileShooterGD makeInstanceOf()
            {
                return ProjectileShooterGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::ProjectileShooterData> ProjectileShooterData() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PlayerComponentGD : HelperObject<PlayerComponentGD> // Object
        {
            explicit PlayerComponentGD(Ent::Property _node): HelperObject<PlayerComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PlayerComponentGD";
            static PlayerComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PlayerComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PlayerComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PlayerComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PlayerComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PlayerComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PlayerComponentGD makeInstanceOf()
            {
                return PlayerComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PickableDistributorComponentGD : HelperObject<PickableDistributorComponentGD> // Object
        {
            explicit PickableDistributorComponentGD(Ent::Property _node): HelperObject<PickableDistributorComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PickableDistributorComponentGD";
            static PickableDistributorComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PickableDistributorComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PickableDistributorComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PickableDistributorComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PickableDistributorComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PickableDistributorComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PickableDistributorComponentGD makeInstanceOf()
            {
                return PickableDistributorComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float PickableGrowingTime() const;
            Ent::Gen2::Float PickablePickedUpCooldownTime() const;
            Array<Ent::Gen2::PickableDistributorComponentData> PickablesList() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PickableComponentGD : HelperObject<PickableComponentGD> // Object
        {
            explicit PickableComponentGD(Ent::Property _node): HelperObject<PickableComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PickableComponentGD";
            static PickableComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PickableComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PickableComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PickableComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PickableComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PickableComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PickableComponentGD makeInstanceOf()
            {
                return PickableComponentGD(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ResponsiblePointer_ActorState_> StatesForPicker() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsTriggerGD : HelperObject<PhysicsTriggerGD> // Object
        {
            explicit PhysicsTriggerGD(Ent::Property _node): HelperObject<PhysicsTriggerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsTriggerGD";
            static PhysicsTriggerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsTriggerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsTriggerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsTriggerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsTriggerGD makeInstanceOf()
            {
                return PhysicsTriggerGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> RequiredComponents() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsMeshProviderGD : HelperObject<PhysicsMeshProviderGD> // Object
        {
            explicit PhysicsMeshProviderGD(Ent::Property _node): HelperObject<PhysicsMeshProviderGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsMeshProviderGD";
            static PhysicsMeshProviderGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsMeshProviderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsMeshProviderGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsMeshProviderGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsMeshProviderGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsMeshProviderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsMeshProviderGD makeInstanceOf()
            {
                return PhysicsMeshProviderGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool EdgeTransitionConstraintAllowed() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsMeshDeformerGD : HelperObject<PhysicsMeshDeformerGD> // Object
        {
            explicit PhysicsMeshDeformerGD(Ent::Property _node): HelperObject<PhysicsMeshDeformerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsMeshDeformerGD";
            static PhysicsMeshDeformerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsMeshDeformerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsMeshDeformerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsMeshDeformerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsMeshDeformerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsMeshDeformerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsMeshDeformerGD makeInstanceOf()
            {
                return PhysicsMeshDeformerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsImpactMakerGD : HelperObject<PhysicsImpactMakerGD> // Object
        {
            explicit PhysicsImpactMakerGD(Ent::Property _node): HelperObject<PhysicsImpactMakerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsImpactMakerGD";
            static PhysicsImpactMakerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsImpactMakerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsImpactMakerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsImpactMakerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsImpactMakerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsImpactMakerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsImpactMakerGD makeInstanceOf()
            {
                return PhysicsImpactMakerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AttackAngle() const;
            Ent::Gen2::Bool BreakEverything() const;
            Ent::Gen2::ScaleConverter DamageAndImpactBySpeed() const;
            Ent::Gen2::String DamageTag() const;
            Ent::Gen2::Float DirectionInfluence() const;
            Ent::Gen2::Float DirectionUpdateThreshold() const;
            Ent::Gen2::ScaleConverter ForceBySpeed() const;
            Ent::Gen2::String HitImpactTag() const;
            Ent::Gen2::Float Restitution() const;
            Ent::Gen2::Float SmoothedSpeedControlRate() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsGD : HelperObject<PhysicsGD> // Object
        {
            explicit PhysicsGD(Ent::Property _node): HelperObject<PhysicsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsGD";
            static PhysicsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsGD makeInstanceOf()
            {
                return PhysicsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AffectByHit() const;
            Ent::Gen2::Float AngularDamping() const;
            Ent::Gen2::Vector3 AxisRestriction() const;
            Ent::Gen2::Bool CameraIgnored() const;
            Ent::Gen2::Bool Ccd() const;
            PrimArray<Ent::Gen2::String> EDITOR_MeshColliders() const;
            Ent::Gen2::String EDITOR_MeshEdges() const;
            Ent::Gen2::String EDITOR_NavMeshStamper() const;
            Ent::Gen2::Float EnergyLoss() const;
            Ent::Gen2::Float Friction() const;
            Ent::Gen2::Bool HasGravity() const;
            Ent::Gen2::InertiaTensor InertiaTensor() const;
            Ent::Gen2::Float LinearDamping() const;
            Ent::Gen2::Float Mass() const;
            Ent::Gen2::Float MaxAngularVelocity() const;
            Ent::Gen2::Float MaxLinearVelocity() const;
            PrimArray<Ent::Gen2::String> MeshColliders() const;
            Ent::Gen2::String MeshEdges() const;
            Ent::Gen2::String MotionType() const;
            Ent::Gen2::String NavMeshStamper() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::Vector3 OffsetRotation() const;
            Ent::Gen2::Bool OneWayBodiesDriveTransform() const;
            Ent::Gen2::String PhysicsMaterial() const;
            Ent::Gen2::PrimitiveColliderType PrimitiveCollider() const;
            PrimArray<Ent::Gen2::Size> PrimitiveColliderSizeLayerMask() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::Float Restitution() const;
            PrimArray<Ent::Gen2::PhysicsLayer> SelfFilter() const;
            Ent::Gen2::Vector3 Size() const;
            Ent::Gen2::Bool Sleep() const;
            Ent::Gen2::ComponentGD Super() const;
            PrimArray<Ent::Gen2::PhysicsLayer> TargetFilter() const;
            Ent::Gen2::Bool Walkable() const;
            Ent::Gen2::String WalkableSoundSwitch() const;
            Ent::Gen2::String _comment() const;
        };

        struct PhysicsDataGD : HelperObject<PhysicsDataGD> // Object
        {
            explicit PhysicsDataGD(Ent::Property _node): HelperObject<PhysicsDataGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsDataGD";
            static PhysicsDataGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsDataGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsDataGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsDataGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsDataGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsDataGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsDataGD makeInstanceOf()
            {
                return PhysicsDataGD(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::EDITOR_Mesh> EDITOR_Shapes() const;
            Ent::Gen2::Bool EDITOR_isTrigger() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::sPhysicsJointDesc> joints() const;
            Array<Ent::Gen2::sRigidBodyDesc> rigidBodies() const;
        };

        struct PerceiverGD : HelperObject<PerceiverGD> // Object
        {
            explicit PerceiverGD(Ent::Property _node): HelperObject<PerceiverGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PerceiverGD";
            static PerceiverGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PerceiverGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PerceiverGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PerceiverGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PerceiverGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PerceiverGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PerceiverGD makeInstanceOf()
            {
                return PerceiverGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float m_coneAngle() const;
            Ent::Gen2::Float m_farSoundDistance() const;
            Ent::Gen2::Float m_longRangeDistance() const;
            Ent::Gen2::Float m_lowRangeDistance() const;
            Ent::Gen2::Float m_middleRangeDistance() const;
            Ent::Gen2::Float m_middleSoundDistance() const;
            Ent::Gen2::Float m_nearSoundDistance() const;
            Ent::Gen2::Float m_perceptionHeightMultiplier() const;
            Ent::Gen2::Float m_perceptionHeightMultiplierHeightMax() const;
            Ent::Gen2::Bool m_rayCastCheck() const;
        };

        struct PerceivableGD : HelperObject<PerceivableGD> // Object
        {
            explicit PerceivableGD(Ent::Property _node): HelperObject<PerceivableGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PerceivableGD";
            static PerceivableGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PerceivableGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PerceivableGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PerceivableGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PerceivableGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PerceivableGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PerceivableGD makeInstanceOf()
            {
                return PerceivableGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float m_perceivedDistanceMultiplier() const;
            Ent::Gen2::SoundEmissionStrength m_soundCrouch() const;
            Ent::Gen2::SoundEmissionStrength m_soundImmobile() const;
            Ent::Gen2::SoundEmissionStrength m_soundRun() const;
            Ent::Gen2::SoundEmissionStrength m_soundWalk() const;
            PrimArray<Ent::Gen2::String> m_tags() const;
        };

        struct OutfitWearerGD : HelperObject<OutfitWearerGD> // Object
        {
            explicit OutfitWearerGD(Ent::Property _node): HelperObject<OutfitWearerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "OutfitWearerGD";
            static OutfitWearerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OutfitWearerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OutfitWearerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OutfitWearerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OutfitWearerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OutfitWearerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OutfitWearerGD makeInstanceOf()
            {
                return OutfitWearerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef InventoryEntityRef() const;
            Ent::Gen2::Float OutfitFadeDelay() const;
            Ent::Gen2::Float OutfitFadeDuration() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct OutfitGD : HelperObject<OutfitGD> // Object
        {
            explicit OutfitGD(Ent::Property _node): HelperObject<OutfitGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "OutfitGD";
            static OutfitGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OutfitGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OutfitGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OutfitGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OutfitGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OutfitGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OutfitGD makeInstanceOf()
            {
                return OutfitGD(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::MountableSnapLine_ControlPoint> SnapLine() const;
            Ent::Gen2::SoundEventMapping SoundEventMappingRules() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::OutfitPiece> clothes() const;
            Ent::Gen2::String faction() const;
            Ent::Gen2::String overrideSpeciesAudioCategory() const;
            PrimArray<Ent::Gen2::String> soundBank() const;
            Ent::Gen2::String soundTag() const;
            Ent::Gen2::StyleMode specialOutfitStyle() const;
            Ent::Gen2::Bool spirit() const;
        };

        struct NotVisibleInSubscene : HelperObject<NotVisibleInSubscene> // Object
        {
            explicit NotVisibleInSubscene(Ent::Property _node): HelperObject<NotVisibleInSubscene>(std::move(_node)) {}
            static constexpr char schemaName[] = "NotVisibleInSubscene";
            static NotVisibleInSubscene load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return NotVisibleInSubscene(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static NotVisibleInSubscene loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return NotVisibleInSubscene(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static NotVisibleInSubscene create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return NotVisibleInSubscene(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            NotVisibleInSubscene makeInstanceOf()
            {
                return NotVisibleInSubscene(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct NetworkNode : HelperObject<NetworkNode> // Object
        {
            explicit NetworkNode(Ent::Property _node): HelperObject<NetworkNode>(std::move(_node)) {}
            static constexpr char schemaName[] = "NetworkNode";
            static NetworkNode load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return NetworkNode(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static NetworkNode loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return NetworkNode(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static NetworkNode create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return NetworkNode(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            NetworkNode makeInstanceOf()
            {
                return NetworkNode(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String Tag() const;
            Ent::Gen2::String ThumbnailMesh() const;
            Ent::Gen2::String Type_() const;
            Ent::Gen2::String _comment() const;
        };

        struct NetworkLink : HelperObject<NetworkLink> // Object
        {
            explicit NetworkLink(Ent::Property _node): HelperObject<NetworkLink>(std::move(_node)) {}
            static constexpr char schemaName[] = "NetworkLink";
            static NetworkLink load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return NetworkLink(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static NetworkLink loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return NetworkLink(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static NetworkLink create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return NetworkLink(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            NetworkLink makeInstanceOf()
            {
                return NetworkLink(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Source() const;
            Ent::Gen2::EntityRef SourceEntityRef() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String Target() const;
            Ent::Gen2::EntityRef TargetEntityRef() const;
            Ent::Gen2::String ThumbnailMesh() const;
            Ent::Gen2::String _comment() const;
        };

        struct NetGD : HelperObject<NetGD> // Object
        {
            explicit NetGD(Ent::Property _node): HelperObject<NetGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "NetGD";
            static NetGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return NetGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static NetGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return NetGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static NetGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return NetGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            NetGD makeInstanceOf()
            {
                return NetGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct NavMeshActivatorGD : HelperObject<NavMeshActivatorGD> // Object
        {
            explicit NavMeshActivatorGD(Ent::Property _node): HelperObject<NavMeshActivatorGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "NavMeshActivatorGD";
            static NavMeshActivatorGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return NavMeshActivatorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static NavMeshActivatorGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return NavMeshActivatorGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static NavMeshActivatorGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return NavMeshActivatorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            NavMeshActivatorGD makeInstanceOf()
            {
                return NavMeshActivatorGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ActivationZoneSize() const;
            PrimArray<Ent::Gen2::String> SizeLayerMask() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct MultiThumbnail : HelperObject<MultiThumbnail> // Object
        {
            explicit MultiThumbnail(Ent::Property _node): HelperObject<MultiThumbnail>(std::move(_node)) {}
            static constexpr char schemaName[] = "MultiThumbnail";
            static MultiThumbnail load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MultiThumbnail(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MultiThumbnail loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MultiThumbnail(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MultiThumbnail create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MultiThumbnail(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MultiThumbnail makeInstanceOf()
            {
                return MultiThumbnail(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ListItem> List() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct MounterGD : HelperObject<MounterGD> // Object
        {
            explicit MounterGD(Ent::Property _node): HelperObject<MounterGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "MounterGD";
            static MounterGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MounterGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MounterGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MounterGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MounterGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MounterGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MounterGD makeInstanceOf()
            {
                return MounterGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String HotspotName() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct MountableGD : HelperObject<MountableGD> // Object
        {
            explicit MountableGD(Ent::Property _node): HelperObject<MountableGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "MountableGD";
            static MountableGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MountableGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MountableGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MountableGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MountableGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MountableGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MountableGD makeInstanceOf()
            {
                return MountableGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> HotspotNames() const;
            Array<Ent::Gen2::MountableSnapLine_ControlPoint> SnapLine() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct MountIKControllerGD : HelperObject<MountIKControllerGD> // Object
        {
            explicit MountIKControllerGD(Ent::Property _node): HelperObject<MountIKControllerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "MountIKControllerGD";
            static MountIKControllerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MountIKControllerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MountIKControllerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MountIKControllerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MountIKControllerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MountIKControllerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MountIKControllerGD makeInstanceOf()
            {
                return MountIKControllerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float horizontalSpineLeanFactor() const;
        };

        struct MissionHolderGD : HelperObject<MissionHolderGD> // Object
        {
            explicit MissionHolderGD(Ent::Property _node): HelperObject<MissionHolderGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "MissionHolderGD";
            static MissionHolderGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MissionHolderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MissionHolderGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MissionHolderGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MissionHolderGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MissionHolderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MissionHolderGD makeInstanceOf()
            {
                return MissionHolderGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool Private() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct MeshNavigationInfosGD : HelperObject<MeshNavigationInfosGD> // Object
        {
            explicit MeshNavigationInfosGD(Ent::Property _node): HelperObject<MeshNavigationInfosGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "MeshNavigationInfosGD";
            static MeshNavigationInfosGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MeshNavigationInfosGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MeshNavigationInfosGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MeshNavigationInfosGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MeshNavigationInfosGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MeshNavigationInfosGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MeshNavigationInfosGD makeInstanceOf()
            {
                return MeshNavigationInfosGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct Mesh : HelperObject<Mesh> // Object
        {
            explicit Mesh(Ent::Property _node): HelperObject<Mesh>(std::move(_node)) {}
            static constexpr char schemaName[] = "Mesh";
            static Mesh load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Mesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Mesh loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Mesh(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Mesh create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Mesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Mesh makeInstanceOf()
            {
                return Mesh(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String File() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct LifeComponentGD : HelperObject<LifeComponentGD> // Object
        {
            explicit LifeComponentGD(Ent::Property _node): HelperObject<LifeComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "LifeComponentGD";
            static LifeComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return LifeComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static LifeComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return LifeComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static LifeComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return LifeComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            LifeComponentGD makeInstanceOf()
            {
                return LifeComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AttackCancelDamagesThreshold() const;
            Ent::Gen2::Float ClearDamagesWhenNoCombatAfterTime() const;
            Ent::Gen2::Float DamagesRecoverSpeed() const;
            Ent::Gen2::Float DamagesShield() const;
            Ent::Gen2::Float DeathThreshold() const;
            Ent::Gen2::Float InjuredDamagesThreshold() const;
            Ent::Gen2::Float MinLifeWhenSpending() const;
            Ent::Gen2::Bool ShouldCrashWhenFlyingInjured() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Float VelocityDamagesMax() const;
            Ent::Gen2::String _comment() const;
        };

        struct LDPrimitive : HelperObject<LDPrimitive> // Object
        {
            explicit LDPrimitive(Ent::Property _node): HelperObject<LDPrimitive>(std::move(_node)) {}
            static constexpr char schemaName[] = "LDPrimitive";
            static LDPrimitive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return LDPrimitive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static LDPrimitive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return LDPrimitive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static LDPrimitive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return LDPrimitive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            LDPrimitive makeInstanceOf()
            {
                return LDPrimitive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool NonDisuptive() const;
            Ent::Gen2::PrimitiveData PrimitiveData() const;
            Ent::Gen2::String PrimitiveType() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ItemHolderGD : HelperObject<ItemHolderGD> // Object
        {
            explicit ItemHolderGD(Ent::Property _node): HelperObject<ItemHolderGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ItemHolderGD";
            static ItemHolderGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ItemHolderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ItemHolderGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ItemHolderGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ItemHolderGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ItemHolderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ItemHolderGD makeInstanceOf()
            {
                return ItemHolderGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String HotspotDefault() const;
            Ent::Gen2::String HotspotHandLeft() const;
            Ent::Gen2::String HotspotHandRight() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Bool Visible() const;
            Ent::Gen2::String _comment() const;
        };

        struct InventoryGD : HelperObject<InventoryGD> // Object
        {
            explicit InventoryGD(Ent::Property _node): HelperObject<InventoryGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "InventoryGD";
            static InventoryGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InventoryGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InventoryGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InventoryGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InventoryGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InventoryGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InventoryGD makeInstanceOf()
            {
                return InventoryGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Array<Ent::Gen2::TaggedEntityRef> TaggedEntityRefs() const;
            Ent::Gen2::String _comment() const;
        };

        struct InterestPointGD : HelperObject<InterestPointGD> // Object
        {
            explicit InterestPointGD(Ent::Property _node): HelperObject<InterestPointGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "InterestPointGD";
            static InterestPointGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InterestPointGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InterestPointGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InterestPointGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InterestPointGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InterestPointGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InterestPointGD makeInstanceOf()
            {
                return InterestPointGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::TagsList Tags() const;
            Ent::Gen2::String _comment() const;
        };

        struct InteractableGPEGD : HelperObject<InteractableGPEGD> // Object
        {
            explicit InteractableGPEGD(Ent::Property _node): HelperObject<InteractableGPEGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "InteractableGPEGD";
            static InteractableGPEGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InteractableGPEGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InteractableGPEGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InteractableGPEGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InteractableGPEGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InteractableGPEGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InteractableGPEGD makeInstanceOf()
            {
                return InteractableGPEGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ResponsiblePointer_ActorState_ GPEActorState() const;
            Ent::Gen2::GPEType GPEType() const;
            Ent::Gen2::String HotspotName() const;
            Ent::Gen2::ResponsiblePointer_ActorState_ InteractionModeActorState() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct InfoboardRegistererGD : HelperObject<InfoboardRegistererGD> // Object
        {
            explicit InfoboardRegistererGD(Ent::Property _node): HelperObject<InfoboardRegistererGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "InfoboardRegistererGD";
            static InfoboardRegistererGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InfoboardRegistererGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InfoboardRegistererGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InfoboardRegistererGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InfoboardRegistererGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InfoboardRegistererGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InfoboardRegistererGD makeInstanceOf()
            {
                return InfoboardRegistererGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String InfoboardName() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct IncapacitateComponentGD : HelperObject<IncapacitateComponentGD> // Object
        {
            explicit IncapacitateComponentGD(Ent::Property _node): HelperObject<IncapacitateComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "IncapacitateComponentGD";
            static IncapacitateComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return IncapacitateComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static IncapacitateComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return IncapacitateComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static IncapacitateComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return IncapacitateComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            IncapacitateComponentGD makeInstanceOf()
            {
                return IncapacitateComponentGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::HitStyle> HitStyleTriggers() const;
            Ent::Gen2::ScaleConverter ImpactMultiplierCurve() const;
            Ent::Gen2::ScaleConverter IncapacitateTimeCurve() const;
            Ent::Gen2::ScaleConverter IncapacitateTimeMultiplierCurve() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct HotspotsGD : HelperObject<HotspotsGD> // Object
        {
            explicit HotspotsGD(Ent::Property _node): HelperObject<HotspotsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "HotspotsGD";
            static HotspotsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HotspotsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HotspotsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HotspotsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HotspotsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HotspotsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HotspotsGD makeInstanceOf()
            {
                return HotspotsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::HotspotData> HotspotsMap() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct HitTriggerGD : HelperObject<HitTriggerGD> // Object
        {
            explicit HitTriggerGD(Ent::Property _node): HelperObject<HitTriggerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "HitTriggerGD";
            static HitTriggerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HitTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HitTriggerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HitTriggerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HitTriggerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HitTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HitTriggerGD makeInstanceOf()
            {
                return HitTriggerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct HeightObj : HelperObject<HeightObj> // Object
        {
            explicit HeightObj(Ent::Property _node): HelperObject<HeightObj>(std::move(_node)) {}
            static constexpr char schemaName[] = "HeightObj";
            static HeightObj load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HeightObj(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HeightObj loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HeightObj(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HeightObj create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HeightObj(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HeightObj makeInstanceOf()
            {
                return HeightObj(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::DisplaceNoiseListItem> DisplaceNoiseList() const;
            Ent::Gen2::Int EditorSubdivision() const;
            Ent::Gen2::Matrix33 LocalMatrix() const;
            Ent::Gen2::String MeshFile() const;
            Ent::Gen2::String MeshName() const;
            Ent::Gen2::Int Priority() const;
            Ent::Gen2::Int Subdivision() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct HeightMapComponentGD : HelperObject<HeightMapComponentGD> // Object
        {
            explicit HeightMapComponentGD(Ent::Property _node): HelperObject<HeightMapComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "HeightMapComponentGD";
            static HeightMapComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HeightMapComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HeightMapComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HeightMapComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HeightMapComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HeightMapComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HeightMapComponentGD makeInstanceOf()
            {
                return HeightMapComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String HeightMapArchivePath() const;
            PrimArray<Ent::Gen2::String> HeightMapPaths() const;
            Ent::Gen2::Float HeightScale() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Bool SwapX() const;
            Ent::Gen2::Bool SwapY() const;
            Ent::Gen2::Vector2 WorldSize() const;
            Ent::Gen2::String _comment() const;
        };

        struct HealthAreaGD : HelperObject<HealthAreaGD> // Object
        {
            explicit HealthAreaGD(Ent::Property _node): HelperObject<HealthAreaGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "HealthAreaGD";
            static HealthAreaGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HealthAreaGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HealthAreaGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HealthAreaGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HealthAreaGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HealthAreaGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HealthAreaGD makeInstanceOf()
            {
                return HealthAreaGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float EnergyRestorationRate() const;
            Ent::Gen2::EnergySide FactionSide() const;
            Ent::Gen2::Float LifeRestorationRate() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::Float ReviveRestorationRate() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct HealerGD : HelperObject<HealerGD> // Object
        {
            explicit HealerGD(Ent::Property _node): HelperObject<HealerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "HealerGD";
            static HealerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HealerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HealerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HealerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HealerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HealerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HealerGD makeInstanceOf()
            {
                return HealerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct HealTriggerGD : HelperObject<HealTriggerGD> // Object
        {
            explicit HealTriggerGD(Ent::Property _node): HelperObject<HealTriggerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "HealTriggerGD";
            static HealTriggerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HealTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HealTriggerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HealTriggerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HealTriggerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HealTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HealTriggerGD makeInstanceOf()
            {
                return HealTriggerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct HealPumpGD : HelperObject<HealPumpGD> // Object
        {
            explicit HealPumpGD(Ent::Property _node): HelperObject<HealPumpGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "HealPumpGD";
            static HealPumpGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return HealPumpGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static HealPumpGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return HealPumpGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static HealPumpGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return HealPumpGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            HealPumpGD makeInstanceOf()
            {
                return HealPumpGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AlliesLifeAgentPerSecond() const;
            Ent::Gen2::Float EnemiesLifeAgentPerSecond() const;
            Ent::Gen2::Float LifeAmountRatio() const;
            Ent::Gen2::Float Range() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct GroundTypeSamplerGD : HelperObject<GroundTypeSamplerGD> // Object
        {
            explicit GroundTypeSamplerGD(Ent::Property _node): HelperObject<GroundTypeSamplerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "GroundTypeSamplerGD";
            static GroundTypeSamplerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GroundTypeSamplerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GroundTypeSamplerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GroundTypeSamplerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GroundTypeSamplerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GroundTypeSamplerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GroundTypeSamplerGD makeInstanceOf()
            {
                return GroundTypeSamplerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String GroundTypeMapPath() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct GrasperGD : HelperObject<GrasperGD> // Object
        {
            explicit GrasperGD(Ent::Property _node): HelperObject<GrasperGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "GrasperGD";
            static GrasperGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GrasperGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GrasperGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GrasperGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GrasperGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GrasperGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GrasperGD makeInstanceOf()
            {
                return GrasperGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float bestInteractionDeltaAngleCoeff() const;
            Ent::Gen2::Float bestInteractionDistanceCoeff() const;
            Ent::Gen2::Map<GraspTypeEnum, Ent::Gen2::GrasperInteractionData> interactionDatas() const;
            Ent::Gen2::Float jumpRiseMinCoeffToEnter() const;
            Ent::Gen2::GraspResistanceData resistanceData() const;
            Ent::Gen2::String sensorHotspotName() const;
        };

        struct GraspableGD : HelperObject<GraspableGD> // Object
        {
            explicit GraspableGD(Ent::Property _node): HelperObject<GraspableGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "GraspableGD";
            static GraspableGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GraspableGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GraspableGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GraspableGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GraspableGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GraspableGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GraspableGD makeInstanceOf()
            {
                return GraspableGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Map<GraspTypeEnum, Ent::Gen2::GraspableInteractionData> interactionDatas() const;
            Ent::Gen2::GraspResistanceData resistanceData() const;
        };

        struct GameEffectSpawnerGD : HelperObject<GameEffectSpawnerGD> // Object
        {
            explicit GameEffectSpawnerGD(Ent::Property _node): HelperObject<GameEffectSpawnerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameEffectSpawnerGD";
            static GameEffectSpawnerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameEffectSpawnerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameEffectSpawnerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameEffectSpawnerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameEffectSpawnerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameEffectSpawnerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameEffectSpawnerGD makeInstanceOf()
            {
                return GameEffectSpawnerGD(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::sGameEffectTemplate> StartGameEffects() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FurComponentGD : HelperObject<FurComponentGD> // Object
        {
            explicit FurComponentGD(Ent::Property _node): HelperObject<FurComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "FurComponentGD";
            static FurComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FurComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FurComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FurComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FurComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FurComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FurComponentGD makeInstanceOf()
            {
                return FurComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::FurProperties Properties() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidVolumeComponentGD : HelperObject<FluidVolumeComponentGD> // Object
        {
            explicit FluidVolumeComponentGD(Ent::Property _node): HelperObject<FluidVolumeComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidVolumeComponentGD";
            static FluidVolumeComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidVolumeComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidVolumeComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidVolumeComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidVolumeComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidVolumeComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidVolumeComponentGD makeInstanceOf()
            {
                return FluidVolumeComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::FluidVolumeComponentGD_FluidVolumeData FluidVolume() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidViewGD : HelperObject<FluidViewGD> // Object
        {
            explicit FluidViewGD(Ent::Property _node): HelperObject<FluidViewGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidViewGD";
            static FluidViewGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidViewGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidViewGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidViewGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidViewGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidViewGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidViewGD makeInstanceOf()
            {
                return FluidViewGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidGD : HelperObject<FluidGD> // Object
        {
            explicit FluidGD(Ent::Property _node): HelperObject<FluidGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidGD";
            static FluidGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidGD makeInstanceOf()
            {
                return FluidGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool IsWaterPlane() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float constrainedPlaneOffset() const;
            Ent::Gen2::Vector3 fluidCurrent() const;
            Ent::Gen2::Bool hasDepthLimit() const;
            Ent::Gen2::Bool isWaterfall() const;
            Ent::Gen2::FluidType type() const;
            Ent::Gen2::Bool useHalfShape() const;
        };

        struct FluidFXEntitySpawnerGD : HelperObject<FluidFXEntitySpawnerGD> // Object
        {
            explicit FluidFXEntitySpawnerGD(Ent::Property _node): HelperObject<FluidFXEntitySpawnerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidFXEntitySpawnerGD";
            static FluidFXEntitySpawnerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidFXEntitySpawnerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidFXEntitySpawnerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidFXEntitySpawnerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidFXEntitySpawnerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidFXEntitySpawnerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidFXEntitySpawnerGD makeInstanceOf()
            {
                return FluidFXEntitySpawnerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Precision SamplingPrecision() const;
            Array<Ent::Gen2::SpawningParameter> SpawningParameters() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Float UpdatePeriod() const;
            Ent::Gen2::String _comment() const;
        };

        struct FireSensorGD : HelperObject<FireSensorGD> // Object
        {
            explicit FireSensorGD(Ent::Property _node): HelperObject<FireSensorGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "FireSensorGD";
            static FireSensorGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FireSensorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FireSensorGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FireSensorGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FireSensorGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FireSensorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FireSensorGD makeInstanceOf()
            {
                return FireSensorGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EventTriggerGD : HelperObject<EventTriggerGD> // Object
        {
            explicit EventTriggerGD(Ent::Property _node): HelperObject<EventTriggerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EventTriggerGD";
            static EventTriggerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EventTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EventTriggerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EventTriggerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EventTriggerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EventTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EventTriggerGD makeInstanceOf()
            {
                return EventTriggerGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> Events() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EventHandlerGD : HelperObject<EventHandlerGD> // Object
        {
            explicit EventHandlerGD(Ent::Property _node): HelperObject<EventHandlerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EventHandlerGD";
            static EventHandlerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EventHandlerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EventHandlerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EventHandlerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EventHandlerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EventHandlerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EventHandlerGD makeInstanceOf()
            {
                return EventHandlerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnvStampGD : HelperObject<EnvStampGD> // Object
        {
            explicit EnvStampGD(Ent::Property _node): HelperObject<EnvStampGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnvStampGD";
            static EnvStampGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnvStampGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnvStampGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnvStampGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnvStampGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnvStampGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnvStampGD makeInstanceOf()
            {
                return EnvStampGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float RegenStateChangeDuration() const;
            Ent::Gen2::Map<EnergySideEnum, Array<Ent::Gen2::sEnvStamp>> Stamps() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergySpoutGD : HelperObject<EnergySpoutGD> // Object
        {
            explicit EnergySpoutGD(Ent::Property _node): HelperObject<EnergySpoutGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergySpoutGD";
            static EnergySpoutGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergySpoutGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergySpoutGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergySpoutGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergySpoutGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergySpoutGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergySpoutGD makeInstanceOf()
            {
                return EnergySpoutGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float EnergySpeed() const;
            Ent::Gen2::EntityRef ListenerEntityRef() const;
            Ent::Gen2::Float MinDistanceBetweenRegen() const;
            Ent::Gen2::Float MinTimeBetweenRegen() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::String SplineRegenEffectName() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergySideSwitcherGD : HelperObject<EnergySideSwitcherGD> // Object
        {
            explicit EnergySideSwitcherGD(Ent::Property _node): HelperObject<EnergySideSwitcherGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergySideSwitcherGD";
            static EnergySideSwitcherGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergySideSwitcherGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergySideSwitcherGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergySideSwitcherGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergySideSwitcherGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergySideSwitcherGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergySideSwitcherGD makeInstanceOf()
            {
                return EnergySideSwitcherGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<EnergySideEnum, Ent::Gen2::EnergySideData> EnergySideData() const;
            Ent::Gen2::EntityRef ReviveEnergyEntityRef() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergyPoolGD : HelperObject<EnergyPoolGD> // Object
        {
            explicit EnergyPoolGD(Ent::Property _node): HelperObject<EnergyPoolGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergyPoolGD";
            static EnergyPoolGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergyPoolGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergyPoolGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergyPoolGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergyPoolGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergyPoolGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergyPoolGD makeInstanceOf()
            {
                return EnergyPoolGD(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::EnergyPoolGD_EnergyArea> EnergyAreas() const;
            Ent::Gen2::Bool FactionOverride() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::TransitionSettings TransitionSettings() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergyNetworkListenerGD : HelperObject<EnergyNetworkListenerGD> // Object
        {
            explicit EnergyNetworkListenerGD(Ent::Property _node): HelperObject<EnergyNetworkListenerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergyNetworkListenerGD";
            static EnergyNetworkListenerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergyNetworkListenerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergyNetworkListenerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergyNetworkListenerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergyNetworkListenerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergyNetworkListenerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergyNetworkListenerGD makeInstanceOf()
            {
                return EnergyNetworkListenerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergyDrainGD : HelperObject<EnergyDrainGD> // Object
        {
            explicit EnergyDrainGD(Ent::Property _node): HelperObject<EnergyDrainGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergyDrainGD";
            static EnergyDrainGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergyDrainGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergyDrainGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergyDrainGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergyDrainGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergyDrainGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergyDrainGD makeInstanceOf()
            {
                return EnergyDrainGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef PoolEntityRef() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EnergyCrookGD : HelperObject<EnergyCrookGD> // Object
        {
            explicit EnergyCrookGD(Ent::Property _node): HelperObject<EnergyCrookGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EnergyCrookGD";
            static EnergyCrookGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EnergyCrookGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EnergyCrookGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EnergyCrookGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EnergyCrookGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EnergyCrookGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EnergyCrookGD makeInstanceOf()
            {
                return EnergyCrookGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef FatherEntityRef() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::Float RegenScale() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct DummyComponentGD : HelperObject<DummyComponentGD> // Object
        {
            explicit DummyComponentGD(Ent::Property _node): HelperObject<DummyComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "DummyComponentGD";
            static DummyComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DummyComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DummyComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DummyComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DummyComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DummyComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DummyComponentGD makeInstanceOf()
            {
                return DummyComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct DiveAttackGD : HelperObject<DiveAttackGD> // Object
        {
            explicit DiveAttackGD(Ent::Property _node): HelperObject<DiveAttackGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "DiveAttackGD";
            static DiveAttackGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DiveAttackGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DiveAttackGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DiveAttackGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DiveAttackGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DiveAttackGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DiveAttackGD makeInstanceOf()
            {
                return DiveAttackGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct DistanceTriggerGD : HelperObject<DistanceTriggerGD> // Object
        {
            explicit DistanceTriggerGD(Ent::Property _node): HelperObject<DistanceTriggerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "DistanceTriggerGD";
            static DistanceTriggerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DistanceTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DistanceTriggerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DistanceTriggerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DistanceTriggerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DistanceTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DistanceTriggerGD makeInstanceOf()
            {
                return DistanceTriggerGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::Float> Distances() const;
            PrimArray<Ent::Gen2::Float> Hystereses() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FightDistanceTriggerGD : HelperObject<FightDistanceTriggerGD> // Object
        {
            explicit FightDistanceTriggerGD(Ent::Property _node): HelperObject<FightDistanceTriggerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "FightDistanceTriggerGD";
            static FightDistanceTriggerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FightDistanceTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FightDistanceTriggerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FightDistanceTriggerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FightDistanceTriggerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FightDistanceTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FightDistanceTriggerGD makeInstanceOf()
            {
                return FightDistanceTriggerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::DistanceTriggerGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct DebugGridGD : HelperObject<DebugGridGD> // Object
        {
            explicit DebugGridGD(Ent::Property _node): HelperObject<DebugGridGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "DebugGridGD";
            static DebugGridGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DebugGridGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DebugGridGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DebugGridGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DebugGridGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DebugGridGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DebugGridGD makeInstanceOf()
            {
                return DebugGridGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int Height() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Int Width() const;
            Ent::Gen2::String _comment() const;
        };

        struct CustomThumbnail : HelperObject<CustomThumbnail> // Object
        {
            explicit CustomThumbnail(Ent::Property _node): HelperObject<CustomThumbnail>(std::move(_node)) {}
            static constexpr char schemaName[] = "CustomThumbnail";
            static CustomThumbnail load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CustomThumbnail(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CustomThumbnail loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CustomThumbnail(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CustomThumbnail create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CustomThumbnail(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CustomThumbnail makeInstanceOf()
            {
                return CustomThumbnail(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::ThumbPath Thumbnail() const;
            Ent::Gen2::String _comment() const;
        };

        struct CreatureUIGD : HelperObject<CreatureUIGD> // Object
        {
            explicit CreatureUIGD(Ent::Property _node): HelperObject<CreatureUIGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureUIGD";
            static CreatureUIGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureUIGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureUIGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureUIGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureUIGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureUIGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureUIGD makeInstanceOf()
            {
                return CreatureUIGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float LifeBarLength() const;
            Ent::Gen2::Float LifeBarWidth() const;
            Ent::Gen2::Float LifeBarZOffset() const;
            Ent::Gen2::Bool ShowLifeBar() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ConstrainedMoveGD : HelperObject<ConstrainedMoveGD> // Object
        {
            explicit ConstrainedMoveGD(Ent::Property _node): HelperObject<ConstrainedMoveGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConstrainedMoveGD";
            static ConstrainedMoveGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConstrainedMoveGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConstrainedMoveGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConstrainedMoveGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConstrainedMoveGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConstrainedMoveGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConstrainedMoveGD makeInstanceOf()
            {
                return ConstrainedMoveGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ConstrainedMoveContextInput ConstrainedMoveContextInput() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ConnectorGD : HelperObject<ConnectorGD> // Object
        {
            explicit ConnectorGD(Ent::Property _node): HelperObject<ConnectorGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConnectorGD";
            static ConnectorGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConnectorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConnectorGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConnectorGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConnectorGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConnectorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConnectorGD makeInstanceOf()
            {
                return ConnectorGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ComponentWithProtoCodeGD : HelperObject<ComponentWithProtoCodeGD> // Object
        {
            explicit ComponentWithProtoCodeGD(Ent::Property _node): HelperObject<ComponentWithProtoCodeGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ComponentWithProtoCodeGD";
            static ComponentWithProtoCodeGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ComponentWithProtoCodeGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ComponentWithProtoCodeGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ComponentWithProtoCodeGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ComponentWithProtoCodeGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ComponentWithProtoCodeGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ComponentWithProtoCodeGD makeInstanceOf()
            {
                return ComponentWithProtoCodeGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ClothAnimationGD : HelperObject<ClothAnimationGD> // Object
        {
            explicit ClothAnimationGD(Ent::Property _node): HelperObject<ClothAnimationGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ClothAnimationGD";
            static ClothAnimationGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ClothAnimationGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ClothAnimationGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ClothAnimationGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ClothAnimationGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ClothAnimationGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ClothAnimationGD makeInstanceOf()
            {
                return ClothAnimationGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String ClothSkeletonPath() const;
            Ent::Gen2::Float PhysicsDamping() const;
            Ent::Gen2::Bool PhysicsFixedDt() const;
            Ent::Gen2::Vector3 PhysicsGravity() const;
            Ent::Gen2::Float PhysicsMass() const;
            Ent::Gen2::Float PhysicsSpeedInfluence() const;
            Ent::Gen2::Bool PhysicsUseDefaultProperties() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ChildEntityPoolComponentGD : HelperObject<ChildEntityPoolComponentGD> // Object
        {
            explicit ChildEntityPoolComponentGD(Ent::Property _node): HelperObject<ChildEntityPoolComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ChildEntityPoolComponentGD";
            static ChildEntityPoolComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ChildEntityPoolComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ChildEntityPoolComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ChildEntityPoolComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ChildEntityPoolComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ChildEntityPoolComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ChildEntityPoolComponentGD makeInstanceOf()
            {
                return ChildEntityPoolComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AddStateAtStart() const;
            Ent::Gen2::Bool AttachToParent() const;
            PrimArray<Ent::Gen2::EntityRef> EntityRefs() const;
            Ent::Gen2::SpawnState SpawnState() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CharacterPlatformGD : HelperObject<CharacterPlatformGD> // Object
        {
            explicit CharacterPlatformGD(Ent::Property _node): HelperObject<CharacterPlatformGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "CharacterPlatformGD";
            static CharacterPlatformGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CharacterPlatformGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CharacterPlatformGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CharacterPlatformGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CharacterPlatformGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CharacterPlatformGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CharacterPlatformGD makeInstanceOf()
            {
                return CharacterPlatformGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CameraDataGD : HelperObject<CameraDataGD> // Object
        {
            explicit CameraDataGD(Ent::Property _node): HelperObject<CameraDataGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "CameraDataGD";
            static CameraDataGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CameraDataGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CameraDataGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CameraDataGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CameraDataGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CameraDataGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CameraDataGD makeInstanceOf()
            {
                return CameraDataGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String CameraDataResourcePath() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BreakableGD : HelperObject<BreakableGD> // Object
        {
            explicit BreakableGD(Ent::Property _node): HelperObject<BreakableGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "BreakableGD";
            static BreakableGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BreakableGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BreakableGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BreakableGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BreakableGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BreakableGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BreakableGD makeInstanceOf()
            {
                return BreakableGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef AssemblyEntity() const;
            Ent::Gen2::String BreakSoundBank() const;
            Ent::Gen2::String BreakSoundEvent() const;
            Ent::Gen2::EntityRef ChildEntity() const;
            Ent::Gen2::Float FadeoutDuration() const;
            Ent::Gen2::String GameEffectOnBreaking() const;
            Ent::Gen2::Float MaxContactAngle() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Float TimeBeforeFade() const;
            Ent::Gen2::EntityRef UnbrokenEntity() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool isBreakableWithAttack() const;
        };

        struct BittenGD : HelperObject<BittenGD> // Object
        {
            explicit BittenGD(Ent::Property _node): HelperObject<BittenGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "BittenGD";
            static BittenGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BittenGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BittenGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BittenGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BittenGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BittenGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BittenGD makeInstanceOf()
            {
                return BittenGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float MaxAngle() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AttackTriggerGD : HelperObject<AttackTriggerGD> // Object
        {
            explicit AttackTriggerGD(Ent::Property _node): HelperObject<AttackTriggerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackTriggerGD";
            static AttackTriggerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackTriggerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackTriggerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackTriggerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackTriggerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackTriggerGD makeInstanceOf()
            {
                return AttackTriggerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AssemblyGD : HelperObject<AssemblyGD> // Object
        {
            explicit AssemblyGD(Ent::Property _node): HelperObject<AssemblyGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AssemblyGD";
            static AssemblyGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AssemblyGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AssemblyGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AssemblyGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AssemblyGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AssemblyGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AssemblyGD makeInstanceOf()
            {
                return AssemblyGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationTransformDriverGD : HelperObject<AnimationTransformDriverGD> // Object
        {
            explicit AnimationTransformDriverGD(Ent::Property _node): HelperObject<AnimationTransformDriverGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationTransformDriverGD";
            static AnimationTransformDriverGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationTransformDriverGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationTransformDriverGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationTransformDriverGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationTransformDriverGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationTransformDriverGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationTransformDriverGD makeInstanceOf()
            {
                return AnimationTransformDriverGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationPlaylistGD : HelperObject<AnimationPlaylistGD> // Object
        {
            explicit AnimationPlaylistGD(Ent::Property _node): HelperObject<AnimationPlaylistGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationPlaylistGD";
            static AnimationPlaylistGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationPlaylistGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationPlaylistGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationPlaylistGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationPlaylistGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationPlaylistGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationPlaylistGD makeInstanceOf()
            {
                return AnimationPlaylistGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> PlayAnim() const;
            Ent::Gen2::Int PlayAnimInputID() const;
            Ent::Gen2::Bool RandomizeStartTime() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationPhysicsChainConstraintsGD : HelperObject<AnimationPhysicsChainConstraintsGD> // Object
        {
            explicit AnimationPhysicsChainConstraintsGD(Ent::Property _node): HelperObject<AnimationPhysicsChainConstraintsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationPhysicsChainConstraintsGD";
            static AnimationPhysicsChainConstraintsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationPhysicsChainConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationPhysicsChainConstraintsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationPhysicsChainConstraintsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationPhysicsChainConstraintsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationPhysicsChainConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationPhysicsChainConstraintsGD makeInstanceOf()
            {
                return AnimationPhysicsChainConstraintsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String BoneNamePrefix() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationModelGD : HelperObject<AnimationModelGD> // Object
        {
            explicit AnimationModelGD(Ent::Property _node): HelperObject<AnimationModelGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationModelGD";
            static AnimationModelGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationModelGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationModelGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationModelGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationModelGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationModelGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationModelGD makeInstanceOf()
            {
                return AnimationModelGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Map<LocomotionModeEnum, Ent::Gen2::Map<SpeedModeEnum, Ent::Gen2::Float>> additionalSpeedDebug() const;
            Ent::Gen2::Bool isLandAnimDriven() const;
            Ent::Gen2::Bool isTurnAllowed() const;
            Ent::Gen2::Float playRatioFactor() const;
            Ent::Gen2::Float scalePlayRatioCoeffInfluence() const;
            Ent::Gen2::Float startRunPlayRatioFactor() const;
            Ent::Gen2::Float turnPlayRatioFactor() const;
        };

        struct AnimationHitsConstraintsGD : HelperObject<AnimationHitsConstraintsGD> // Object
        {
            explicit AnimationHitsConstraintsGD(Ent::Property _node): HelperObject<AnimationHitsConstraintsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationHitsConstraintsGD";
            static AnimationHitsConstraintsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationHitsConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationHitsConstraintsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationHitsConstraintsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationHitsConstraintsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationHitsConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationHitsConstraintsGD makeInstanceOf()
            {
                return AnimationHitsConstraintsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct Component : Base // Union
        {
            explicit Component(Ent::Property _node): Base(std::move(_node)) {}
            static constexpr char schemaName[] = "Component";
            char const* getType() const;
            std::optional<Ent::Gen2::AIContextGD> AIContextGD();
            Ent::Gen2::AIContextGD setAIContextGD();
            std::optional<Ent::Gen2::ActorGD> ActorGD();
            Ent::Gen2::ActorGD setActorGD();
            std::optional<Ent::Gen2::AnimationControllerGD> AnimationControllerGD();
            Ent::Gen2::AnimationControllerGD setAnimationControllerGD();
            std::optional<Ent::Gen2::AnimationEventsGeneratorGD> AnimationEventsGeneratorGD();
            Ent::Gen2::AnimationEventsGeneratorGD setAnimationEventsGeneratorGD();
            std::optional<Ent::Gen2::AnimationGenericConstraintsGD> AnimationGenericConstraintsGD();
            Ent::Gen2::AnimationGenericConstraintsGD setAnimationGenericConstraintsGD();
            std::optional<Ent::Gen2::AnimationHitsConstraintsGD> AnimationHitsConstraintsGD();
            Ent::Gen2::AnimationHitsConstraintsGD setAnimationHitsConstraintsGD();
            std::optional<Ent::Gen2::AnimationLegsConstraintsGD> AnimationLegsConstraintsGD();
            Ent::Gen2::AnimationLegsConstraintsGD setAnimationLegsConstraintsGD();
            std::optional<Ent::Gen2::AnimationModelGD> AnimationModelGD();
            Ent::Gen2::AnimationModelGD setAnimationModelGD();
            std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD> AnimationPhysicsChainConstraintsGD();
            Ent::Gen2::AnimationPhysicsChainConstraintsGD setAnimationPhysicsChainConstraintsGD();
            std::optional<Ent::Gen2::AnimationPlaylistGD> AnimationPlaylistGD();
            Ent::Gen2::AnimationPlaylistGD setAnimationPlaylistGD();
            std::optional<Ent::Gen2::AnimationTailConstraintsGD> AnimationTailConstraintsGD();
            Ent::Gen2::AnimationTailConstraintsGD setAnimationTailConstraintsGD();
            std::optional<Ent::Gen2::AnimationTransformDriverGD> AnimationTransformDriverGD();
            Ent::Gen2::AnimationTransformDriverGD setAnimationTransformDriverGD();
            std::optional<Ent::Gen2::AnimationTreeConstraintsGD> AnimationTreeConstraintsGD();
            Ent::Gen2::AnimationTreeConstraintsGD setAnimationTreeConstraintsGD();
            std::optional<Ent::Gen2::AssemblyGD> AssemblyGD();
            Ent::Gen2::AssemblyGD setAssemblyGD();
            std::optional<Ent::Gen2::AttackComponentGD> AttackComponentGD();
            Ent::Gen2::AttackComponentGD setAttackComponentGD();
            std::optional<Ent::Gen2::AttackTriggerGD> AttackTriggerGD();
            Ent::Gen2::AttackTriggerGD setAttackTriggerGD();
            std::optional<Ent::Gen2::BeamTargetGD> BeamTargetGD();
            Ent::Gen2::BeamTargetGD setBeamTargetGD();
            std::optional<Ent::Gen2::BittenGD> BittenGD();
            Ent::Gen2::BittenGD setBittenGD();
            std::optional<Ent::Gen2::BoidsGD> BoidsGD();
            Ent::Gen2::BoidsGD setBoidsGD();
            std::optional<Ent::Gen2::BreakableGD> BreakableGD();
            Ent::Gen2::BreakableGD setBreakableGD();
            std::optional<Ent::Gen2::CameraDataGD> CameraDataGD();
            Ent::Gen2::CameraDataGD setCameraDataGD();
            std::optional<Ent::Gen2::CameraSetterGD> CameraSetterGD();
            Ent::Gen2::CameraSetterGD setCameraSetterGD();
            std::optional<Ent::Gen2::CharacterControllerGD> CharacterControllerGD();
            Ent::Gen2::CharacterControllerGD setCharacterControllerGD();
            std::optional<Ent::Gen2::CharacterPlatformGD> CharacterPlatformGD();
            Ent::Gen2::CharacterPlatformGD setCharacterPlatformGD();
            std::optional<Ent::Gen2::ChargedJumpGD> ChargedJumpGD();
            Ent::Gen2::ChargedJumpGD setChargedJumpGD();
            std::optional<Ent::Gen2::ChildEntityPoolComponentGD> ChildEntityPoolComponentGD();
            Ent::Gen2::ChildEntityPoolComponentGD setChildEntityPoolComponentGD();
            std::optional<Ent::Gen2::CinematicGD> CinematicGD();
            Ent::Gen2::CinematicGD setCinematicGD();
            std::optional<Ent::Gen2::ClothAnimationGD> ClothAnimationGD();
            Ent::Gen2::ClothAnimationGD setClothAnimationGD();
            std::optional<Ent::Gen2::ClothGD> ClothGD();
            Ent::Gen2::ClothGD setClothGD();
            std::optional<Ent::Gen2::ComponentWithProtoCodeGD> ComponentWithProtoCodeGD();
            Ent::Gen2::ComponentWithProtoCodeGD setComponentWithProtoCodeGD();
            std::optional<Ent::Gen2::ConnectorGD> ConnectorGD();
            Ent::Gen2::ConnectorGD setConnectorGD();
            std::optional<Ent::Gen2::ConstrainedMoveGD> ConstrainedMoveGD();
            Ent::Gen2::ConstrainedMoveGD setConstrainedMoveGD();
            std::optional<Ent::Gen2::CreatureAIGD> CreatureAIGD();
            Ent::Gen2::CreatureAIGD setCreatureAIGD();
            std::optional<Ent::Gen2::CreatureGD> CreatureGD();
            Ent::Gen2::CreatureGD setCreatureGD();
            std::optional<Ent::Gen2::CreatureUIGD> CreatureUIGD();
            Ent::Gen2::CreatureUIGD setCreatureUIGD();
            std::optional<Ent::Gen2::CustomThumbnail> CustomThumbnail();
            Ent::Gen2::CustomThumbnail setCustomThumbnail();
            std::optional<Ent::Gen2::DebugGridGD> DebugGridGD();
            Ent::Gen2::DebugGridGD setDebugGridGD();
            std::optional<Ent::Gen2::DistanceTriggerGD> DistanceTriggerGD();
            Ent::Gen2::DistanceTriggerGD setDistanceTriggerGD();
            std::optional<Ent::Gen2::DiveAttackGD> DiveAttackGD();
            Ent::Gen2::DiveAttackGD setDiveAttackGD();
            std::optional<Ent::Gen2::DummyComponentGD> DummyComponentGD();
            Ent::Gen2::DummyComponentGD setDummyComponentGD();
            std::optional<Ent::Gen2::EnergyCrookGD> EnergyCrookGD();
            Ent::Gen2::EnergyCrookGD setEnergyCrookGD();
            std::optional<Ent::Gen2::EnergyDrainGD> EnergyDrainGD();
            Ent::Gen2::EnergyDrainGD setEnergyDrainGD();
            std::optional<Ent::Gen2::EnergyNetworkListenerGD> EnergyNetworkListenerGD();
            Ent::Gen2::EnergyNetworkListenerGD setEnergyNetworkListenerGD();
            std::optional<Ent::Gen2::EnergyPoolGD> EnergyPoolGD();
            Ent::Gen2::EnergyPoolGD setEnergyPoolGD();
            std::optional<Ent::Gen2::EnergySideSwitcherGD> EnergySideSwitcherGD();
            Ent::Gen2::EnergySideSwitcherGD setEnergySideSwitcherGD();
            std::optional<Ent::Gen2::EnergySpoutGD> EnergySpoutGD();
            Ent::Gen2::EnergySpoutGD setEnergySpoutGD();
            std::optional<Ent::Gen2::EnvStampGD> EnvStampGD();
            Ent::Gen2::EnvStampGD setEnvStampGD();
            std::optional<Ent::Gen2::EventHandlerGD> EventHandlerGD();
            Ent::Gen2::EventHandlerGD setEventHandlerGD();
            std::optional<Ent::Gen2::EventTriggerGD> EventTriggerGD();
            Ent::Gen2::EventTriggerGD setEventTriggerGD();
            std::optional<Ent::Gen2::FightDistanceTriggerGD> FightDistanceTriggerGD();
            Ent::Gen2::FightDistanceTriggerGD setFightDistanceTriggerGD();
            std::optional<Ent::Gen2::FireSensorGD> FireSensorGD();
            Ent::Gen2::FireSensorGD setFireSensorGD();
            std::optional<Ent::Gen2::FluidFXEntitySpawnerGD> FluidFXEntitySpawnerGD();
            Ent::Gen2::FluidFXEntitySpawnerGD setFluidFXEntitySpawnerGD();
            std::optional<Ent::Gen2::FluidGD> FluidGD();
            Ent::Gen2::FluidGD setFluidGD();
            std::optional<Ent::Gen2::FluidViewGD> FluidViewGD();
            Ent::Gen2::FluidViewGD setFluidViewGD();
            std::optional<Ent::Gen2::FluidVolumeComponentGD> FluidVolumeComponentGD();
            Ent::Gen2::FluidVolumeComponentGD setFluidVolumeComponentGD();
            std::optional<Ent::Gen2::FurComponentGD> FurComponentGD();
            Ent::Gen2::FurComponentGD setFurComponentGD();
            std::optional<Ent::Gen2::GameEffectSpawnerGD> GameEffectSpawnerGD();
            Ent::Gen2::GameEffectSpawnerGD setGameEffectSpawnerGD();
            std::optional<Ent::Gen2::GraspableGD> GraspableGD();
            Ent::Gen2::GraspableGD setGraspableGD();
            std::optional<Ent::Gen2::GrasperGD> GrasperGD();
            Ent::Gen2::GrasperGD setGrasperGD();
            std::optional<Ent::Gen2::GroundTypeSamplerGD> GroundTypeSamplerGD();
            Ent::Gen2::GroundTypeSamplerGD setGroundTypeSamplerGD();
            std::optional<Ent::Gen2::HealPumpGD> HealPumpGD();
            Ent::Gen2::HealPumpGD setHealPumpGD();
            std::optional<Ent::Gen2::HealTriggerGD> HealTriggerGD();
            Ent::Gen2::HealTriggerGD setHealTriggerGD();
            std::optional<Ent::Gen2::HealerGD> HealerGD();
            Ent::Gen2::HealerGD setHealerGD();
            std::optional<Ent::Gen2::HealthAreaGD> HealthAreaGD();
            Ent::Gen2::HealthAreaGD setHealthAreaGD();
            std::optional<Ent::Gen2::HeightMapComponentGD> HeightMapComponentGD();
            Ent::Gen2::HeightMapComponentGD setHeightMapComponentGD();
            std::optional<Ent::Gen2::HeightObj> HeightObj();
            Ent::Gen2::HeightObj setHeightObj();
            std::optional<Ent::Gen2::HitTriggerGD> HitTriggerGD();
            Ent::Gen2::HitTriggerGD setHitTriggerGD();
            std::optional<Ent::Gen2::HotspotsGD> HotspotsGD();
            Ent::Gen2::HotspotsGD setHotspotsGD();
            std::optional<Ent::Gen2::IncapacitateComponentGD> IncapacitateComponentGD();
            Ent::Gen2::IncapacitateComponentGD setIncapacitateComponentGD();
            std::optional<Ent::Gen2::InfoboardRegistererGD> InfoboardRegistererGD();
            Ent::Gen2::InfoboardRegistererGD setInfoboardRegistererGD();
            std::optional<Ent::Gen2::InteractableGPEGD> InteractableGPEGD();
            Ent::Gen2::InteractableGPEGD setInteractableGPEGD();
            std::optional<Ent::Gen2::InteractorGD> InteractorGD();
            Ent::Gen2::InteractorGD setInteractorGD();
            std::optional<Ent::Gen2::InterestPointGD> InterestPointGD();
            Ent::Gen2::InterestPointGD setInterestPointGD();
            std::optional<Ent::Gen2::InventoryGD> InventoryGD();
            Ent::Gen2::InventoryGD setInventoryGD();
            std::optional<Ent::Gen2::ItemHolderGD> ItemHolderGD();
            Ent::Gen2::ItemHolderGD setItemHolderGD();
            std::optional<Ent::Gen2::LDPrimitive> LDPrimitive();
            Ent::Gen2::LDPrimitive setLDPrimitive();
            std::optional<Ent::Gen2::LifeComponentGD> LifeComponentGD();
            Ent::Gen2::LifeComponentGD setLifeComponentGD();
            std::optional<Ent::Gen2::LightComponentGD> LightComponentGD();
            Ent::Gen2::LightComponentGD setLightComponentGD();
            std::optional<Ent::Gen2::Mesh> Mesh();
            Ent::Gen2::Mesh setMesh();
            std::optional<Ent::Gen2::MeshNavigationInfosGD> MeshNavigationInfosGD();
            Ent::Gen2::MeshNavigationInfosGD setMeshNavigationInfosGD();
            std::optional<Ent::Gen2::MissionHolderGD> MissionHolderGD();
            Ent::Gen2::MissionHolderGD setMissionHolderGD();
            std::optional<Ent::Gen2::MountIKControllerGD> MountIKControllerGD();
            Ent::Gen2::MountIKControllerGD setMountIKControllerGD();
            std::optional<Ent::Gen2::MountableGD> MountableGD();
            Ent::Gen2::MountableGD setMountableGD();
            std::optional<Ent::Gen2::MounterGD> MounterGD();
            Ent::Gen2::MounterGD setMounterGD();
            std::optional<Ent::Gen2::MultiThumbnail> MultiThumbnail();
            Ent::Gen2::MultiThumbnail setMultiThumbnail();
            std::optional<Ent::Gen2::NavMeshActivatorGD> NavMeshActivatorGD();
            Ent::Gen2::NavMeshActivatorGD setNavMeshActivatorGD();
            std::optional<Ent::Gen2::NavMeshStamperGD> NavMeshStamperGD();
            Ent::Gen2::NavMeshStamperGD setNavMeshStamperGD();
            std::optional<Ent::Gen2::NetGD> NetGD();
            Ent::Gen2::NetGD setNetGD();
            std::optional<Ent::Gen2::NetworkLink> NetworkLink();
            Ent::Gen2::NetworkLink setNetworkLink();
            std::optional<Ent::Gen2::NetworkNode> NetworkNode();
            Ent::Gen2::NetworkNode setNetworkNode();
            std::optional<Ent::Gen2::NotVisibleInSubscene> NotVisibleInSubscene();
            Ent::Gen2::NotVisibleInSubscene setNotVisibleInSubscene();
            std::optional<Ent::Gen2::OutfitGD> OutfitGD();
            Ent::Gen2::OutfitGD setOutfitGD();
            std::optional<Ent::Gen2::OutfitWearerGD> OutfitWearerGD();
            Ent::Gen2::OutfitWearerGD setOutfitWearerGD();
            std::optional<Ent::Gen2::PathFinderGD> PathFinderGD();
            Ent::Gen2::PathFinderGD setPathFinderGD();
            std::optional<Ent::Gen2::PerceivableGD> PerceivableGD();
            Ent::Gen2::PerceivableGD setPerceivableGD();
            std::optional<Ent::Gen2::PerceiverGD> PerceiverGD();
            Ent::Gen2::PerceiverGD setPerceiverGD();
            std::optional<Ent::Gen2::PhysicsDataGD> PhysicsDataGD();
            Ent::Gen2::PhysicsDataGD setPhysicsDataGD();
            std::optional<Ent::Gen2::PhysicsGD> PhysicsGD();
            Ent::Gen2::PhysicsGD setPhysicsGD();
            std::optional<Ent::Gen2::PhysicsImpactMakerGD> PhysicsImpactMakerGD();
            Ent::Gen2::PhysicsImpactMakerGD setPhysicsImpactMakerGD();
            std::optional<Ent::Gen2::PhysicsMeshDeformerGD> PhysicsMeshDeformerGD();
            Ent::Gen2::PhysicsMeshDeformerGD setPhysicsMeshDeformerGD();
            std::optional<Ent::Gen2::PhysicsMeshProviderGD> PhysicsMeshProviderGD();
            Ent::Gen2::PhysicsMeshProviderGD setPhysicsMeshProviderGD();
            std::optional<Ent::Gen2::PhysicsTriggerGD> PhysicsTriggerGD();
            Ent::Gen2::PhysicsTriggerGD setPhysicsTriggerGD();
            std::optional<Ent::Gen2::PickableComponentGD> PickableComponentGD();
            Ent::Gen2::PickableComponentGD setPickableComponentGD();
            std::optional<Ent::Gen2::PickableDistributorComponentGD> PickableDistributorComponentGD();
            Ent::Gen2::PickableDistributorComponentGD setPickableDistributorComponentGD();
            std::optional<Ent::Gen2::PlayerComponentGD> PlayerComponentGD();
            Ent::Gen2::PlayerComponentGD setPlayerComponentGD();
            std::optional<Ent::Gen2::ProjectileGD> ProjectileGD();
            Ent::Gen2::ProjectileGD setProjectileGD();
            std::optional<Ent::Gen2::ProjectileShooterGD> ProjectileShooterGD();
            Ent::Gen2::ProjectileShooterGD setProjectileShooterGD();
            std::optional<Ent::Gen2::ProtoComponentGD> ProtoComponentGD();
            Ent::Gen2::ProtoComponentGD setProtoComponentGD();
            std::optional<Ent::Gen2::QuickCreatureSwitchGD> QuickCreatureSwitchGD();
            Ent::Gen2::QuickCreatureSwitchGD setQuickCreatureSwitchGD();
            std::optional<Ent::Gen2::RagdollGD> RagdollGD();
            Ent::Gen2::RagdollGD setRagdollGD();
            std::optional<Ent::Gen2::RegenSwitcherGD> RegenSwitcherGD();
            Ent::Gen2::RegenSwitcherGD setRegenSwitcherGD();
            std::optional<Ent::Gen2::RegenerableVegetationGD> RegenerableVegetationGD();
            Ent::Gen2::RegenerableVegetationGD setRegenerableVegetationGD();
            std::optional<Ent::Gen2::RespawnPlaceGD> RespawnPlaceGD();
            Ent::Gen2::RespawnPlaceGD setRespawnPlaceGD();
            std::optional<Ent::Gen2::RespawnabilityGD> RespawnabilityGD();
            Ent::Gen2::RespawnabilityGD setRespawnabilityGD();
            std::optional<Ent::Gen2::ReviveEnergyGD> ReviveEnergyGD();
            Ent::Gen2::ReviveEnergyGD setReviveEnergyGD();
            std::optional<Ent::Gen2::ScriptComponentGD> ScriptComponentGD();
            Ent::Gen2::ScriptComponentGD setScriptComponentGD();
            std::optional<Ent::Gen2::SeedPatch> SeedPatch();
            Ent::Gen2::SeedPatch setSeedPatch();
            std::optional<Ent::Gen2::SensorControllerGD> SensorControllerGD();
            Ent::Gen2::SensorControllerGD setSensorControllerGD();
            std::optional<Ent::Gen2::SensorVoxelsGD> SensorVoxelsGD();
            Ent::Gen2::SensorVoxelsGD setSensorVoxelsGD();
            std::optional<Ent::Gen2::ShamanItemGD> ShamanItemGD();
            Ent::Gen2::ShamanItemGD setShamanItemGD();
            std::optional<Ent::Gen2::ShamanVisionGD> ShamanVisionGD();
            Ent::Gen2::ShamanVisionGD setShamanVisionGD();
            std::optional<Ent::Gen2::ShapeshiftStatueGD> ShapeshiftStatueGD();
            Ent::Gen2::ShapeshiftStatueGD setShapeshiftStatueGD();
            std::optional<Ent::Gen2::SideMapGateGD> SideMapGateGD();
            Ent::Gen2::SideMapGateGD setSideMapGateGD();
            std::optional<Ent::Gen2::SmoothScaleComponentGD> SmoothScaleComponentGD();
            Ent::Gen2::SmoothScaleComponentGD setSmoothScaleComponentGD();
            std::optional<Ent::Gen2::SoftCollisionGD> SoftCollisionGD();
            Ent::Gen2::SoftCollisionGD setSoftCollisionGD();
            std::optional<Ent::Gen2::SoulRespawnOpportunityGD> SoulRespawnOpportunityGD();
            Ent::Gen2::SoulRespawnOpportunityGD setSoulRespawnOpportunityGD();
            std::optional<Ent::Gen2::SoundAreaGD> SoundAreaGD();
            Ent::Gen2::SoundAreaGD setSoundAreaGD();
            std::optional<Ent::Gen2::SoundEmitterGD> SoundEmitterGD();
            Ent::Gen2::SoundEmitterGD setSoundEmitterGD();
            std::optional<Ent::Gen2::SoundOpportunityComponentGD> SoundOpportunityComponentGD();
            Ent::Gen2::SoundOpportunityComponentGD setSoundOpportunityComponentGD();
            std::optional<Ent::Gen2::SpiritAnimalGD> SpiritAnimalGD();
            Ent::Gen2::SpiritAnimalGD setSpiritAnimalGD();
            std::optional<Ent::Gen2::SpiritAnimalShrineGD> SpiritAnimalShrineGD();
            Ent::Gen2::SpiritAnimalShrineGD setSpiritAnimalShrineGD();
            std::optional<Ent::Gen2::SpiritAnimalsHolderGD> SpiritAnimalsHolderGD();
            Ent::Gen2::SpiritAnimalsHolderGD setSpiritAnimalsHolderGD();
            std::optional<Ent::Gen2::StaffVertebrasGD> StaffVertebrasGD();
            Ent::Gen2::StaffVertebrasGD setStaffVertebrasGD();
            std::optional<Ent::Gen2::StaticObjectGD> StaticObjectGD();
            Ent::Gen2::StaticObjectGD setStaticObjectGD();
            std::optional<Ent::Gen2::StickToTerrain> StickToTerrain();
            Ent::Gen2::StickToTerrain setStickToTerrain();
            std::optional<Ent::Gen2::StreamableUnitGD> StreamableUnitGD();
            Ent::Gen2::StreamableUnitGD setStreamableUnitGD();
            std::optional<Ent::Gen2::StreamingLocatorGD> StreamingLocatorGD();
            Ent::Gen2::StreamingLocatorGD setStreamingLocatorGD();
            std::optional<Ent::Gen2::SubScene> SubScene();
            Ent::Gen2::SubScene setSubScene();
            std::optional<Ent::Gen2::SystemicCreature> SystemicCreature();
            Ent::Gen2::SystemicCreature setSystemicCreature();
            std::optional<Ent::Gen2::TeamGD> TeamGD();
            Ent::Gen2::TeamGD setTeamGD();
            std::optional<Ent::Gen2::TerrainGD> TerrainGD();
            Ent::Gen2::TerrainGD setTerrainGD();
            std::optional<Ent::Gen2::TerrainSurfaceObject> TerrainSurfaceObject();
            Ent::Gen2::TerrainSurfaceObject setTerrainSurfaceObject();
            std::optional<Ent::Gen2::TestArrays> TestArrays();
            Ent::Gen2::TestArrays setTestArrays();
            std::optional<Ent::Gen2::TestCreature> TestCreature();
            Ent::Gen2::TestCreature setTestCreature();
            std::optional<Ent::Gen2::TestDefaultValues> TestDefaultValues();
            Ent::Gen2::TestDefaultValues setTestDefaultValues();
            std::optional<Ent::Gen2::TestEntityRef> TestEntityRef();
            Ent::Gen2::TestEntityRef setTestEntityRef();
            std::optional<Ent::Gen2::TestSetOfObject> TestSetOfObject();
            Ent::Gen2::TestSetOfObject setTestSetOfObject();
            std::optional<Ent::Gen2::TestTagsList> TestTagsList();
            Ent::Gen2::TestTagsList setTestTagsList();
            std::optional<Ent::Gen2::TestUnion> TestUnion();
            Ent::Gen2::TestUnion setTestUnion();
            std::optional<Ent::Gen2::TransformGD> TransformGD();
            Ent::Gen2::TransformGD setTransformGD();
            std::optional<Ent::Gen2::TriggerEventCameraGD> TriggerEventCameraGD();
            Ent::Gen2::TriggerEventCameraGD setTriggerEventCameraGD();
            std::optional<Ent::Gen2::UnifiedPhysicsDataGD> UnifiedPhysicsDataGD();
            Ent::Gen2::UnifiedPhysicsDataGD setUnifiedPhysicsDataGD();
            std::optional<Ent::Gen2::UnitTestComponent> UnitTestComponent();
            Ent::Gen2::UnitTestComponent setUnitTestComponent();
            std::optional<Ent::Gen2::VelocityObstacleGD> VelocityObstacleGD();
            Ent::Gen2::VelocityObstacleGD setVelocityObstacleGD();
            std::optional<Ent::Gen2::VisualGD> VisualGD();
            Ent::Gen2::VisualGD setVisualGD();
            std::optional<Ent::Gen2::VolumeConstraintGD> VolumeConstraintGD();
            Ent::Gen2::VolumeConstraintGD setVolumeConstraintGD();
            std::optional<Ent::Gen2::VoxelSimulationGD> VoxelSimulationGD();
            Ent::Gen2::VoxelSimulationGD setVoxelSimulationGD();
            std::optional<Ent::Gen2::WallRunGD> WallRunGD();
            Ent::Gen2::WallRunGD setWallRunGD();
            std::optional<Ent::Gen2::WildObject> WildObject();
            Ent::Gen2::WildObject setWildObject();
        };

        struct Object_Components : UnionSetBase<Component> // union_set
        {
            explicit Object_Components(Ent::Property _node)
                : UnionSetBase<Component>(std::move(_node))
            {
            }
            
            char const* getType() const;
            std::optional<Ent::Gen2::AIContextGD> AIContextGD();
            Ent::Gen2::AIContextGD addAIContextGD();
            void removeAIContextGD();
            std::optional<Ent::Gen2::ActorGD> ActorGD();
            Ent::Gen2::ActorGD addActorGD();
            void removeActorGD();
            std::optional<Ent::Gen2::AnimationControllerGD> AnimationControllerGD();
            Ent::Gen2::AnimationControllerGD addAnimationControllerGD();
            void removeAnimationControllerGD();
            std::optional<Ent::Gen2::AnimationEventsGeneratorGD> AnimationEventsGeneratorGD();
            Ent::Gen2::AnimationEventsGeneratorGD addAnimationEventsGeneratorGD();
            void removeAnimationEventsGeneratorGD();
            std::optional<Ent::Gen2::AnimationGenericConstraintsGD> AnimationGenericConstraintsGD();
            Ent::Gen2::AnimationGenericConstraintsGD addAnimationGenericConstraintsGD();
            void removeAnimationGenericConstraintsGD();
            std::optional<Ent::Gen2::AnimationHitsConstraintsGD> AnimationHitsConstraintsGD();
            Ent::Gen2::AnimationHitsConstraintsGD addAnimationHitsConstraintsGD();
            void removeAnimationHitsConstraintsGD();
            std::optional<Ent::Gen2::AnimationLegsConstraintsGD> AnimationLegsConstraintsGD();
            Ent::Gen2::AnimationLegsConstraintsGD addAnimationLegsConstraintsGD();
            void removeAnimationLegsConstraintsGD();
            std::optional<Ent::Gen2::AnimationModelGD> AnimationModelGD();
            Ent::Gen2::AnimationModelGD addAnimationModelGD();
            void removeAnimationModelGD();
            std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD> AnimationPhysicsChainConstraintsGD();
            Ent::Gen2::AnimationPhysicsChainConstraintsGD addAnimationPhysicsChainConstraintsGD();
            void removeAnimationPhysicsChainConstraintsGD();
            std::optional<Ent::Gen2::AnimationPlaylistGD> AnimationPlaylistGD();
            Ent::Gen2::AnimationPlaylistGD addAnimationPlaylistGD();
            void removeAnimationPlaylistGD();
            std::optional<Ent::Gen2::AnimationTailConstraintsGD> AnimationTailConstraintsGD();
            Ent::Gen2::AnimationTailConstraintsGD addAnimationTailConstraintsGD();
            void removeAnimationTailConstraintsGD();
            std::optional<Ent::Gen2::AnimationTransformDriverGD> AnimationTransformDriverGD();
            Ent::Gen2::AnimationTransformDriverGD addAnimationTransformDriverGD();
            void removeAnimationTransformDriverGD();
            std::optional<Ent::Gen2::AnimationTreeConstraintsGD> AnimationTreeConstraintsGD();
            Ent::Gen2::AnimationTreeConstraintsGD addAnimationTreeConstraintsGD();
            void removeAnimationTreeConstraintsGD();
            std::optional<Ent::Gen2::AssemblyGD> AssemblyGD();
            Ent::Gen2::AssemblyGD addAssemblyGD();
            void removeAssemblyGD();
            std::optional<Ent::Gen2::AttackComponentGD> AttackComponentGD();
            Ent::Gen2::AttackComponentGD addAttackComponentGD();
            void removeAttackComponentGD();
            std::optional<Ent::Gen2::AttackTriggerGD> AttackTriggerGD();
            Ent::Gen2::AttackTriggerGD addAttackTriggerGD();
            void removeAttackTriggerGD();
            std::optional<Ent::Gen2::BeamTargetGD> BeamTargetGD();
            Ent::Gen2::BeamTargetGD addBeamTargetGD();
            void removeBeamTargetGD();
            std::optional<Ent::Gen2::BittenGD> BittenGD();
            Ent::Gen2::BittenGD addBittenGD();
            void removeBittenGD();
            std::optional<Ent::Gen2::BoidsGD> BoidsGD();
            Ent::Gen2::BoidsGD addBoidsGD();
            void removeBoidsGD();
            std::optional<Ent::Gen2::BreakableGD> BreakableGD();
            Ent::Gen2::BreakableGD addBreakableGD();
            void removeBreakableGD();
            std::optional<Ent::Gen2::CameraDataGD> CameraDataGD();
            Ent::Gen2::CameraDataGD addCameraDataGD();
            void removeCameraDataGD();
            std::optional<Ent::Gen2::CameraSetterGD> CameraSetterGD();
            Ent::Gen2::CameraSetterGD addCameraSetterGD();
            void removeCameraSetterGD();
            std::optional<Ent::Gen2::CharacterControllerGD> CharacterControllerGD();
            Ent::Gen2::CharacterControllerGD addCharacterControllerGD();
            void removeCharacterControllerGD();
            std::optional<Ent::Gen2::CharacterPlatformGD> CharacterPlatformGD();
            Ent::Gen2::CharacterPlatformGD addCharacterPlatformGD();
            void removeCharacterPlatformGD();
            std::optional<Ent::Gen2::ChargedJumpGD> ChargedJumpGD();
            Ent::Gen2::ChargedJumpGD addChargedJumpGD();
            void removeChargedJumpGD();
            std::optional<Ent::Gen2::ChildEntityPoolComponentGD> ChildEntityPoolComponentGD();
            Ent::Gen2::ChildEntityPoolComponentGD addChildEntityPoolComponentGD();
            void removeChildEntityPoolComponentGD();
            std::optional<Ent::Gen2::CinematicGD> CinematicGD();
            Ent::Gen2::CinematicGD addCinematicGD();
            void removeCinematicGD();
            std::optional<Ent::Gen2::ClothAnimationGD> ClothAnimationGD();
            Ent::Gen2::ClothAnimationGD addClothAnimationGD();
            void removeClothAnimationGD();
            std::optional<Ent::Gen2::ClothGD> ClothGD();
            Ent::Gen2::ClothGD addClothGD();
            void removeClothGD();
            std::optional<Ent::Gen2::ComponentWithProtoCodeGD> ComponentWithProtoCodeGD();
            Ent::Gen2::ComponentWithProtoCodeGD addComponentWithProtoCodeGD();
            void removeComponentWithProtoCodeGD();
            std::optional<Ent::Gen2::ConnectorGD> ConnectorGD();
            Ent::Gen2::ConnectorGD addConnectorGD();
            void removeConnectorGD();
            std::optional<Ent::Gen2::ConstrainedMoveGD> ConstrainedMoveGD();
            Ent::Gen2::ConstrainedMoveGD addConstrainedMoveGD();
            void removeConstrainedMoveGD();
            std::optional<Ent::Gen2::CreatureAIGD> CreatureAIGD();
            Ent::Gen2::CreatureAIGD addCreatureAIGD();
            void removeCreatureAIGD();
            std::optional<Ent::Gen2::CreatureGD> CreatureGD();
            Ent::Gen2::CreatureGD addCreatureGD();
            void removeCreatureGD();
            std::optional<Ent::Gen2::CreatureUIGD> CreatureUIGD();
            Ent::Gen2::CreatureUIGD addCreatureUIGD();
            void removeCreatureUIGD();
            std::optional<Ent::Gen2::CustomThumbnail> CustomThumbnail();
            Ent::Gen2::CustomThumbnail addCustomThumbnail();
            void removeCustomThumbnail();
            std::optional<Ent::Gen2::DebugGridGD> DebugGridGD();
            Ent::Gen2::DebugGridGD addDebugGridGD();
            void removeDebugGridGD();
            std::optional<Ent::Gen2::DistanceTriggerGD> DistanceTriggerGD();
            Ent::Gen2::DistanceTriggerGD addDistanceTriggerGD();
            void removeDistanceTriggerGD();
            std::optional<Ent::Gen2::DiveAttackGD> DiveAttackGD();
            Ent::Gen2::DiveAttackGD addDiveAttackGD();
            void removeDiveAttackGD();
            std::optional<Ent::Gen2::DummyComponentGD> DummyComponentGD();
            Ent::Gen2::DummyComponentGD addDummyComponentGD();
            void removeDummyComponentGD();
            std::optional<Ent::Gen2::EnergyCrookGD> EnergyCrookGD();
            Ent::Gen2::EnergyCrookGD addEnergyCrookGD();
            void removeEnergyCrookGD();
            std::optional<Ent::Gen2::EnergyDrainGD> EnergyDrainGD();
            Ent::Gen2::EnergyDrainGD addEnergyDrainGD();
            void removeEnergyDrainGD();
            std::optional<Ent::Gen2::EnergyNetworkListenerGD> EnergyNetworkListenerGD();
            Ent::Gen2::EnergyNetworkListenerGD addEnergyNetworkListenerGD();
            void removeEnergyNetworkListenerGD();
            std::optional<Ent::Gen2::EnergyPoolGD> EnergyPoolGD();
            Ent::Gen2::EnergyPoolGD addEnergyPoolGD();
            void removeEnergyPoolGD();
            std::optional<Ent::Gen2::EnergySideSwitcherGD> EnergySideSwitcherGD();
            Ent::Gen2::EnergySideSwitcherGD addEnergySideSwitcherGD();
            void removeEnergySideSwitcherGD();
            std::optional<Ent::Gen2::EnergySpoutGD> EnergySpoutGD();
            Ent::Gen2::EnergySpoutGD addEnergySpoutGD();
            void removeEnergySpoutGD();
            std::optional<Ent::Gen2::EnvStampGD> EnvStampGD();
            Ent::Gen2::EnvStampGD addEnvStampGD();
            void removeEnvStampGD();
            std::optional<Ent::Gen2::EventHandlerGD> EventHandlerGD();
            Ent::Gen2::EventHandlerGD addEventHandlerGD();
            void removeEventHandlerGD();
            std::optional<Ent::Gen2::EventTriggerGD> EventTriggerGD();
            Ent::Gen2::EventTriggerGD addEventTriggerGD();
            void removeEventTriggerGD();
            std::optional<Ent::Gen2::FightDistanceTriggerGD> FightDistanceTriggerGD();
            Ent::Gen2::FightDistanceTriggerGD addFightDistanceTriggerGD();
            void removeFightDistanceTriggerGD();
            std::optional<Ent::Gen2::FireSensorGD> FireSensorGD();
            Ent::Gen2::FireSensorGD addFireSensorGD();
            void removeFireSensorGD();
            std::optional<Ent::Gen2::FluidFXEntitySpawnerGD> FluidFXEntitySpawnerGD();
            Ent::Gen2::FluidFXEntitySpawnerGD addFluidFXEntitySpawnerGD();
            void removeFluidFXEntitySpawnerGD();
            std::optional<Ent::Gen2::FluidGD> FluidGD();
            Ent::Gen2::FluidGD addFluidGD();
            void removeFluidGD();
            std::optional<Ent::Gen2::FluidViewGD> FluidViewGD();
            Ent::Gen2::FluidViewGD addFluidViewGD();
            void removeFluidViewGD();
            std::optional<Ent::Gen2::FluidVolumeComponentGD> FluidVolumeComponentGD();
            Ent::Gen2::FluidVolumeComponentGD addFluidVolumeComponentGD();
            void removeFluidVolumeComponentGD();
            std::optional<Ent::Gen2::FurComponentGD> FurComponentGD();
            Ent::Gen2::FurComponentGD addFurComponentGD();
            void removeFurComponentGD();
            std::optional<Ent::Gen2::GameEffectSpawnerGD> GameEffectSpawnerGD();
            Ent::Gen2::GameEffectSpawnerGD addGameEffectSpawnerGD();
            void removeGameEffectSpawnerGD();
            std::optional<Ent::Gen2::GraspableGD> GraspableGD();
            Ent::Gen2::GraspableGD addGraspableGD();
            void removeGraspableGD();
            std::optional<Ent::Gen2::GrasperGD> GrasperGD();
            Ent::Gen2::GrasperGD addGrasperGD();
            void removeGrasperGD();
            std::optional<Ent::Gen2::GroundTypeSamplerGD> GroundTypeSamplerGD();
            Ent::Gen2::GroundTypeSamplerGD addGroundTypeSamplerGD();
            void removeGroundTypeSamplerGD();
            std::optional<Ent::Gen2::HealPumpGD> HealPumpGD();
            Ent::Gen2::HealPumpGD addHealPumpGD();
            void removeHealPumpGD();
            std::optional<Ent::Gen2::HealTriggerGD> HealTriggerGD();
            Ent::Gen2::HealTriggerGD addHealTriggerGD();
            void removeHealTriggerGD();
            std::optional<Ent::Gen2::HealerGD> HealerGD();
            Ent::Gen2::HealerGD addHealerGD();
            void removeHealerGD();
            std::optional<Ent::Gen2::HealthAreaGD> HealthAreaGD();
            Ent::Gen2::HealthAreaGD addHealthAreaGD();
            void removeHealthAreaGD();
            std::optional<Ent::Gen2::HeightMapComponentGD> HeightMapComponentGD();
            Ent::Gen2::HeightMapComponentGD addHeightMapComponentGD();
            void removeHeightMapComponentGD();
            std::optional<Ent::Gen2::HeightObj> HeightObj();
            Ent::Gen2::HeightObj addHeightObj();
            void removeHeightObj();
            std::optional<Ent::Gen2::HitTriggerGD> HitTriggerGD();
            Ent::Gen2::HitTriggerGD addHitTriggerGD();
            void removeHitTriggerGD();
            std::optional<Ent::Gen2::HotspotsGD> HotspotsGD();
            Ent::Gen2::HotspotsGD addHotspotsGD();
            void removeHotspotsGD();
            std::optional<Ent::Gen2::IncapacitateComponentGD> IncapacitateComponentGD();
            Ent::Gen2::IncapacitateComponentGD addIncapacitateComponentGD();
            void removeIncapacitateComponentGD();
            std::optional<Ent::Gen2::InfoboardRegistererGD> InfoboardRegistererGD();
            Ent::Gen2::InfoboardRegistererGD addInfoboardRegistererGD();
            void removeInfoboardRegistererGD();
            std::optional<Ent::Gen2::InteractableGPEGD> InteractableGPEGD();
            Ent::Gen2::InteractableGPEGD addInteractableGPEGD();
            void removeInteractableGPEGD();
            std::optional<Ent::Gen2::InteractorGD> InteractorGD();
            Ent::Gen2::InteractorGD addInteractorGD();
            void removeInteractorGD();
            std::optional<Ent::Gen2::InterestPointGD> InterestPointGD();
            Ent::Gen2::InterestPointGD addInterestPointGD();
            void removeInterestPointGD();
            std::optional<Ent::Gen2::InventoryGD> InventoryGD();
            Ent::Gen2::InventoryGD addInventoryGD();
            void removeInventoryGD();
            std::optional<Ent::Gen2::ItemHolderGD> ItemHolderGD();
            Ent::Gen2::ItemHolderGD addItemHolderGD();
            void removeItemHolderGD();
            std::optional<Ent::Gen2::LDPrimitive> LDPrimitive();
            Ent::Gen2::LDPrimitive addLDPrimitive();
            void removeLDPrimitive();
            std::optional<Ent::Gen2::LifeComponentGD> LifeComponentGD();
            Ent::Gen2::LifeComponentGD addLifeComponentGD();
            void removeLifeComponentGD();
            std::optional<Ent::Gen2::LightComponentGD> LightComponentGD();
            Ent::Gen2::LightComponentGD addLightComponentGD();
            void removeLightComponentGD();
            std::optional<Ent::Gen2::Mesh> Mesh();
            Ent::Gen2::Mesh addMesh();
            void removeMesh();
            std::optional<Ent::Gen2::MeshNavigationInfosGD> MeshNavigationInfosGD();
            Ent::Gen2::MeshNavigationInfosGD addMeshNavigationInfosGD();
            void removeMeshNavigationInfosGD();
            std::optional<Ent::Gen2::MissionHolderGD> MissionHolderGD();
            Ent::Gen2::MissionHolderGD addMissionHolderGD();
            void removeMissionHolderGD();
            std::optional<Ent::Gen2::MountIKControllerGD> MountIKControllerGD();
            Ent::Gen2::MountIKControllerGD addMountIKControllerGD();
            void removeMountIKControllerGD();
            std::optional<Ent::Gen2::MountableGD> MountableGD();
            Ent::Gen2::MountableGD addMountableGD();
            void removeMountableGD();
            std::optional<Ent::Gen2::MounterGD> MounterGD();
            Ent::Gen2::MounterGD addMounterGD();
            void removeMounterGD();
            std::optional<Ent::Gen2::MultiThumbnail> MultiThumbnail();
            Ent::Gen2::MultiThumbnail addMultiThumbnail();
            void removeMultiThumbnail();
            std::optional<Ent::Gen2::NavMeshActivatorGD> NavMeshActivatorGD();
            Ent::Gen2::NavMeshActivatorGD addNavMeshActivatorGD();
            void removeNavMeshActivatorGD();
            std::optional<Ent::Gen2::NavMeshStamperGD> NavMeshStamperGD();
            Ent::Gen2::NavMeshStamperGD addNavMeshStamperGD();
            void removeNavMeshStamperGD();
            std::optional<Ent::Gen2::NetGD> NetGD();
            Ent::Gen2::NetGD addNetGD();
            void removeNetGD();
            std::optional<Ent::Gen2::NetworkLink> NetworkLink();
            Ent::Gen2::NetworkLink addNetworkLink();
            void removeNetworkLink();
            std::optional<Ent::Gen2::NetworkNode> NetworkNode();
            Ent::Gen2::NetworkNode addNetworkNode();
            void removeNetworkNode();
            std::optional<Ent::Gen2::NotVisibleInSubscene> NotVisibleInSubscene();
            Ent::Gen2::NotVisibleInSubscene addNotVisibleInSubscene();
            void removeNotVisibleInSubscene();
            std::optional<Ent::Gen2::OutfitGD> OutfitGD();
            Ent::Gen2::OutfitGD addOutfitGD();
            void removeOutfitGD();
            std::optional<Ent::Gen2::OutfitWearerGD> OutfitWearerGD();
            Ent::Gen2::OutfitWearerGD addOutfitWearerGD();
            void removeOutfitWearerGD();
            std::optional<Ent::Gen2::PathFinderGD> PathFinderGD();
            Ent::Gen2::PathFinderGD addPathFinderGD();
            void removePathFinderGD();
            std::optional<Ent::Gen2::PerceivableGD> PerceivableGD();
            Ent::Gen2::PerceivableGD addPerceivableGD();
            void removePerceivableGD();
            std::optional<Ent::Gen2::PerceiverGD> PerceiverGD();
            Ent::Gen2::PerceiverGD addPerceiverGD();
            void removePerceiverGD();
            std::optional<Ent::Gen2::PhysicsDataGD> PhysicsDataGD();
            Ent::Gen2::PhysicsDataGD addPhysicsDataGD();
            void removePhysicsDataGD();
            std::optional<Ent::Gen2::PhysicsGD> PhysicsGD();
            Ent::Gen2::PhysicsGD addPhysicsGD();
            void removePhysicsGD();
            std::optional<Ent::Gen2::PhysicsImpactMakerGD> PhysicsImpactMakerGD();
            Ent::Gen2::PhysicsImpactMakerGD addPhysicsImpactMakerGD();
            void removePhysicsImpactMakerGD();
            std::optional<Ent::Gen2::PhysicsMeshDeformerGD> PhysicsMeshDeformerGD();
            Ent::Gen2::PhysicsMeshDeformerGD addPhysicsMeshDeformerGD();
            void removePhysicsMeshDeformerGD();
            std::optional<Ent::Gen2::PhysicsMeshProviderGD> PhysicsMeshProviderGD();
            Ent::Gen2::PhysicsMeshProviderGD addPhysicsMeshProviderGD();
            void removePhysicsMeshProviderGD();
            std::optional<Ent::Gen2::PhysicsTriggerGD> PhysicsTriggerGD();
            Ent::Gen2::PhysicsTriggerGD addPhysicsTriggerGD();
            void removePhysicsTriggerGD();
            std::optional<Ent::Gen2::PickableComponentGD> PickableComponentGD();
            Ent::Gen2::PickableComponentGD addPickableComponentGD();
            void removePickableComponentGD();
            std::optional<Ent::Gen2::PickableDistributorComponentGD> PickableDistributorComponentGD();
            Ent::Gen2::PickableDistributorComponentGD addPickableDistributorComponentGD();
            void removePickableDistributorComponentGD();
            std::optional<Ent::Gen2::PlayerComponentGD> PlayerComponentGD();
            Ent::Gen2::PlayerComponentGD addPlayerComponentGD();
            void removePlayerComponentGD();
            std::optional<Ent::Gen2::ProjectileGD> ProjectileGD();
            Ent::Gen2::ProjectileGD addProjectileGD();
            void removeProjectileGD();
            std::optional<Ent::Gen2::ProjectileShooterGD> ProjectileShooterGD();
            Ent::Gen2::ProjectileShooterGD addProjectileShooterGD();
            void removeProjectileShooterGD();
            std::optional<Ent::Gen2::ProtoComponentGD> ProtoComponentGD();
            Ent::Gen2::ProtoComponentGD addProtoComponentGD();
            void removeProtoComponentGD();
            std::optional<Ent::Gen2::QuickCreatureSwitchGD> QuickCreatureSwitchGD();
            Ent::Gen2::QuickCreatureSwitchGD addQuickCreatureSwitchGD();
            void removeQuickCreatureSwitchGD();
            std::optional<Ent::Gen2::RagdollGD> RagdollGD();
            Ent::Gen2::RagdollGD addRagdollGD();
            void removeRagdollGD();
            std::optional<Ent::Gen2::RegenSwitcherGD> RegenSwitcherGD();
            Ent::Gen2::RegenSwitcherGD addRegenSwitcherGD();
            void removeRegenSwitcherGD();
            std::optional<Ent::Gen2::RegenerableVegetationGD> RegenerableVegetationGD();
            Ent::Gen2::RegenerableVegetationGD addRegenerableVegetationGD();
            void removeRegenerableVegetationGD();
            std::optional<Ent::Gen2::RespawnPlaceGD> RespawnPlaceGD();
            Ent::Gen2::RespawnPlaceGD addRespawnPlaceGD();
            void removeRespawnPlaceGD();
            std::optional<Ent::Gen2::RespawnabilityGD> RespawnabilityGD();
            Ent::Gen2::RespawnabilityGD addRespawnabilityGD();
            void removeRespawnabilityGD();
            std::optional<Ent::Gen2::ReviveEnergyGD> ReviveEnergyGD();
            Ent::Gen2::ReviveEnergyGD addReviveEnergyGD();
            void removeReviveEnergyGD();
            std::optional<Ent::Gen2::ScriptComponentGD> ScriptComponentGD();
            Ent::Gen2::ScriptComponentGD addScriptComponentGD();
            void removeScriptComponentGD();
            std::optional<Ent::Gen2::SeedPatch> SeedPatch();
            Ent::Gen2::SeedPatch addSeedPatch();
            void removeSeedPatch();
            std::optional<Ent::Gen2::SensorControllerGD> SensorControllerGD();
            Ent::Gen2::SensorControllerGD addSensorControllerGD();
            void removeSensorControllerGD();
            std::optional<Ent::Gen2::SensorVoxelsGD> SensorVoxelsGD();
            Ent::Gen2::SensorVoxelsGD addSensorVoxelsGD();
            void removeSensorVoxelsGD();
            std::optional<Ent::Gen2::ShamanItemGD> ShamanItemGD();
            Ent::Gen2::ShamanItemGD addShamanItemGD();
            void removeShamanItemGD();
            std::optional<Ent::Gen2::ShamanVisionGD> ShamanVisionGD();
            Ent::Gen2::ShamanVisionGD addShamanVisionGD();
            void removeShamanVisionGD();
            std::optional<Ent::Gen2::ShapeshiftStatueGD> ShapeshiftStatueGD();
            Ent::Gen2::ShapeshiftStatueGD addShapeshiftStatueGD();
            void removeShapeshiftStatueGD();
            std::optional<Ent::Gen2::SideMapGateGD> SideMapGateGD();
            Ent::Gen2::SideMapGateGD addSideMapGateGD();
            void removeSideMapGateGD();
            std::optional<Ent::Gen2::SmoothScaleComponentGD> SmoothScaleComponentGD();
            Ent::Gen2::SmoothScaleComponentGD addSmoothScaleComponentGD();
            void removeSmoothScaleComponentGD();
            std::optional<Ent::Gen2::SoftCollisionGD> SoftCollisionGD();
            Ent::Gen2::SoftCollisionGD addSoftCollisionGD();
            void removeSoftCollisionGD();
            std::optional<Ent::Gen2::SoulRespawnOpportunityGD> SoulRespawnOpportunityGD();
            Ent::Gen2::SoulRespawnOpportunityGD addSoulRespawnOpportunityGD();
            void removeSoulRespawnOpportunityGD();
            std::optional<Ent::Gen2::SoundAreaGD> SoundAreaGD();
            Ent::Gen2::SoundAreaGD addSoundAreaGD();
            void removeSoundAreaGD();
            std::optional<Ent::Gen2::SoundEmitterGD> SoundEmitterGD();
            Ent::Gen2::SoundEmitterGD addSoundEmitterGD();
            void removeSoundEmitterGD();
            std::optional<Ent::Gen2::SoundOpportunityComponentGD> SoundOpportunityComponentGD();
            Ent::Gen2::SoundOpportunityComponentGD addSoundOpportunityComponentGD();
            void removeSoundOpportunityComponentGD();
            std::optional<Ent::Gen2::SpiritAnimalGD> SpiritAnimalGD();
            Ent::Gen2::SpiritAnimalGD addSpiritAnimalGD();
            void removeSpiritAnimalGD();
            std::optional<Ent::Gen2::SpiritAnimalShrineGD> SpiritAnimalShrineGD();
            Ent::Gen2::SpiritAnimalShrineGD addSpiritAnimalShrineGD();
            void removeSpiritAnimalShrineGD();
            std::optional<Ent::Gen2::SpiritAnimalsHolderGD> SpiritAnimalsHolderGD();
            Ent::Gen2::SpiritAnimalsHolderGD addSpiritAnimalsHolderGD();
            void removeSpiritAnimalsHolderGD();
            std::optional<Ent::Gen2::StaffVertebrasGD> StaffVertebrasGD();
            Ent::Gen2::StaffVertebrasGD addStaffVertebrasGD();
            void removeStaffVertebrasGD();
            std::optional<Ent::Gen2::StaticObjectGD> StaticObjectGD();
            Ent::Gen2::StaticObjectGD addStaticObjectGD();
            void removeStaticObjectGD();
            std::optional<Ent::Gen2::StickToTerrain> StickToTerrain();
            Ent::Gen2::StickToTerrain addStickToTerrain();
            void removeStickToTerrain();
            std::optional<Ent::Gen2::StreamableUnitGD> StreamableUnitGD();
            Ent::Gen2::StreamableUnitGD addStreamableUnitGD();
            void removeStreamableUnitGD();
            std::optional<Ent::Gen2::StreamingLocatorGD> StreamingLocatorGD();
            Ent::Gen2::StreamingLocatorGD addStreamingLocatorGD();
            void removeStreamingLocatorGD();
            std::optional<Ent::Gen2::SubScene> SubScene();
            Ent::Gen2::SubScene addSubScene();
            void removeSubScene();
            std::optional<Ent::Gen2::SystemicCreature> SystemicCreature();
            Ent::Gen2::SystemicCreature addSystemicCreature();
            void removeSystemicCreature();
            std::optional<Ent::Gen2::TeamGD> TeamGD();
            Ent::Gen2::TeamGD addTeamGD();
            void removeTeamGD();
            std::optional<Ent::Gen2::TerrainGD> TerrainGD();
            Ent::Gen2::TerrainGD addTerrainGD();
            void removeTerrainGD();
            std::optional<Ent::Gen2::TerrainSurfaceObject> TerrainSurfaceObject();
            Ent::Gen2::TerrainSurfaceObject addTerrainSurfaceObject();
            void removeTerrainSurfaceObject();
            std::optional<Ent::Gen2::TestArrays> TestArrays();
            Ent::Gen2::TestArrays addTestArrays();
            void removeTestArrays();
            std::optional<Ent::Gen2::TestCreature> TestCreature();
            Ent::Gen2::TestCreature addTestCreature();
            void removeTestCreature();
            std::optional<Ent::Gen2::TestDefaultValues> TestDefaultValues();
            Ent::Gen2::TestDefaultValues addTestDefaultValues();
            void removeTestDefaultValues();
            std::optional<Ent::Gen2::TestEntityRef> TestEntityRef();
            Ent::Gen2::TestEntityRef addTestEntityRef();
            void removeTestEntityRef();
            std::optional<Ent::Gen2::TestSetOfObject> TestSetOfObject();
            Ent::Gen2::TestSetOfObject addTestSetOfObject();
            void removeTestSetOfObject();
            std::optional<Ent::Gen2::TestTagsList> TestTagsList();
            Ent::Gen2::TestTagsList addTestTagsList();
            void removeTestTagsList();
            std::optional<Ent::Gen2::TestUnion> TestUnion();
            Ent::Gen2::TestUnion addTestUnion();
            void removeTestUnion();
            std::optional<Ent::Gen2::TransformGD> TransformGD();
            Ent::Gen2::TransformGD addTransformGD();
            void removeTransformGD();
            std::optional<Ent::Gen2::TriggerEventCameraGD> TriggerEventCameraGD();
            Ent::Gen2::TriggerEventCameraGD addTriggerEventCameraGD();
            void removeTriggerEventCameraGD();
            std::optional<Ent::Gen2::UnifiedPhysicsDataGD> UnifiedPhysicsDataGD();
            Ent::Gen2::UnifiedPhysicsDataGD addUnifiedPhysicsDataGD();
            void removeUnifiedPhysicsDataGD();
            std::optional<Ent::Gen2::UnitTestComponent> UnitTestComponent();
            Ent::Gen2::UnitTestComponent addUnitTestComponent();
            void removeUnitTestComponent();
            std::optional<Ent::Gen2::VelocityObstacleGD> VelocityObstacleGD();
            Ent::Gen2::VelocityObstacleGD addVelocityObstacleGD();
            void removeVelocityObstacleGD();
            std::optional<Ent::Gen2::VisualGD> VisualGD();
            Ent::Gen2::VisualGD addVisualGD();
            void removeVisualGD();
            std::optional<Ent::Gen2::VolumeConstraintGD> VolumeConstraintGD();
            Ent::Gen2::VolumeConstraintGD addVolumeConstraintGD();
            void removeVolumeConstraintGD();
            std::optional<Ent::Gen2::VoxelSimulationGD> VoxelSimulationGD();
            Ent::Gen2::VoxelSimulationGD addVoxelSimulationGD();
            void removeVoxelSimulationGD();
            std::optional<Ent::Gen2::WallRunGD> WallRunGD();
            Ent::Gen2::WallRunGD addWallRunGD();
            void removeWallRunGD();
            std::optional<Ent::Gen2::WildObject> WildObject();
            Ent::Gen2::WildObject addWildObject();
            void removeWildObject();
        };

        struct GameEffect : HelperObject<GameEffect> // Object
        {
            explicit GameEffect(Ent::Property _node): HelperObject<GameEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameEffect";
            static GameEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameEffect makeInstanceOf()
            {
                return GameEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Duration() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::Float PerceptionDistance() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::RadiusChange RadiusChange() const;
            Ent::Gen2::Float RadiusChangeDuration() const;
            Ent::Gen2::Float RadiusStart() const;
            Ent::Gen2::Float RadiusStop() const;
            Ent::Gen2::Component Super() const;
            Ent::Gen2::Float TimeBeforeStart() const;
            Ent::Gen2::String _comment() const;
        };

        struct WindTurbulenceEffect : HelperObject<WindTurbulenceEffect> // Object
        {
            explicit WindTurbulenceEffect(Ent::Property _node): HelperObject<WindTurbulenceEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "WindTurbulenceEffect";
            static WindTurbulenceEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return WindTurbulenceEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static WindTurbulenceEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return WindTurbulenceEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static WindTurbulenceEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return WindTurbulenceEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            WindTurbulenceEffect makeInstanceOf()
            {
                return WindTurbulenceEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float BendStrength() const;
            Ent::Gen2::Float GlobalStrength() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::Float TurbulenceStrength() const;
            Ent::Gen2::Bool UseGlobalStrength() const;
            Ent::Gen2::Float WindShakeStrength() const;
            Ent::Gen2::WindTurbulenceType WindTurbulenceType() const;
            Ent::Gen2::String _comment() const;
        };

        struct ShakeEffect : HelperObject<ShakeEffect> // Object
        {
            explicit ShakeEffect(Ent::Property _node): HelperObject<ShakeEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "ShakeEffect";
            static ShakeEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ShakeEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ShakeEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ShakeEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ShakeEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ShakeEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ShakeEffect makeInstanceOf()
            {
                return ShakeEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DistanceAttenuation() const;
            Ent::Gen2::Float Strength() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RepulseEffect : HelperObject<RepulseEffect> // Object
        {
            explicit RepulseEffect(Ent::Property _node): HelperObject<RepulseEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "RepulseEffect";
            static RepulseEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RepulseEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RepulseEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RepulseEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RepulseEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RepulseEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RepulseEffect makeInstanceOf()
            {
                return RepulseEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ApplyOnTrees() const;
            Ent::Gen2::Float DistanceAttenuation() const;
            Ent::Gen2::Float Strength() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct RegenEffect : HelperObject<RegenEffect> // Object
        {
            explicit RegenEffect(Ent::Property _node): HelperObject<RegenEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "RegenEffect";
            static RegenEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RegenEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RegenEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RegenEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RegenEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RegenEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RegenEffect makeInstanceOf()
            {
                return RegenEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EnergyValue EnergyValue() const;
            Ent::Gen2::RegenField Field() const;
            Ent::Gen2::Float InnerMultiplier() const;
            Ent::Gen2::Float InnerRadius() const;
            Ent::Gen2::Float Margin() const;
            Ent::Gen2::Float OuterMultiplier() const;
            Ent::Gen2::EnergySide State() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::Bool UseNewRegen() const;
            Ent::Gen2::String _comment() const;
        };

        struct FollowerCallEffect : HelperObject<FollowerCallEffect> // Object
        {
            explicit FollowerCallEffect(Ent::Property _node): HelperObject<FollowerCallEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "FollowerCallEffect";
            static FollowerCallEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FollowerCallEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FollowerCallEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FollowerCallEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FollowerCallEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FollowerCallEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FollowerCallEffect makeInstanceOf()
            {
                return FollowerCallEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String CallType() const;
            Ent::Gen2::Bool QuickOrder() const;
            Ent::Gen2::Specie Specie() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct FluidEffect : HelperObject<FluidEffect> // Object
        {
            explicit FluidEffect(Ent::Property _node): HelperObject<FluidEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "FluidEffect";
            static FluidEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FluidEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FluidEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FluidEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FluidEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FluidEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FluidEffect makeInstanceOf()
            {
                return FluidEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool DisplayFX() const;
            Ent::Gen2::EnergySide EnergySide() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::Float VolumePerSecond() const;
            Ent::Gen2::String _comment() const;
        };

        struct CallForHelpEffect : HelperObject<CallForHelpEffect> // Object
        {
            explicit CallForHelpEffect(Ent::Property _node): HelperObject<CallForHelpEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "CallForHelpEffect";
            static CallForHelpEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CallForHelpEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CallForHelpEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CallForHelpEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CallForHelpEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CallForHelpEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CallForHelpEffect makeInstanceOf()
            {
                return CallForHelpEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String CallType() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BeamEffect : HelperObject<BeamEffect> // Object
        {
            explicit BeamEffect(Ent::Property _node): HelperObject<BeamEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "BeamEffect";
            static BeamEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BeamEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BeamEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BeamEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BeamEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BeamEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BeamEffect makeInstanceOf()
            {
                return BeamEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AlwaysActive() const;
            Ent::Gen2::Bool AutoChose() const;
            Ent::Gen2::Bool CheckForTrees() const;
            Ent::Gen2::Bool EmittedByEnvironment() const;
            Ent::Gen2::FreezeData FreezeData() const;
            Ent::Gen2::Float Impact() const;
            Ent::Gen2::Bool OneShot() const;
            Ent::Gen2::Float Power() const;
            Ent::Gen2::Float ProjectileShieldRadius() const;
            Ent::Gen2::EnergySide Side() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BeamDetectionEffect : HelperObject<BeamDetectionEffect> // Object
        {
            explicit BeamDetectionEffect(Ent::Property _node): HelperObject<BeamDetectionEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "BeamDetectionEffect";
            static BeamDetectionEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BeamDetectionEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BeamDetectionEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BeamDetectionEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BeamDetectionEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BeamDetectionEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BeamDetectionEffect makeInstanceOf()
            {
                return BeamDetectionEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct Components : UnionSetBase<Component> // union_set
        {
            explicit Components(Ent::Property _node)
                : UnionSetBase<Component>(std::move(_node))
            {
            }
            
            char const* getType() const;
            std::optional<Ent::Gen2::AIContextGD> AIContextGD();
            Ent::Gen2::AIContextGD addAIContextGD();
            void removeAIContextGD();
            std::optional<Ent::Gen2::ActorGD> ActorGD();
            Ent::Gen2::ActorGD addActorGD();
            void removeActorGD();
            std::optional<Ent::Gen2::AnimationControllerGD> AnimationControllerGD();
            Ent::Gen2::AnimationControllerGD addAnimationControllerGD();
            void removeAnimationControllerGD();
            std::optional<Ent::Gen2::AnimationEventsGeneratorGD> AnimationEventsGeneratorGD();
            Ent::Gen2::AnimationEventsGeneratorGD addAnimationEventsGeneratorGD();
            void removeAnimationEventsGeneratorGD();
            std::optional<Ent::Gen2::AnimationGenericConstraintsGD> AnimationGenericConstraintsGD();
            Ent::Gen2::AnimationGenericConstraintsGD addAnimationGenericConstraintsGD();
            void removeAnimationGenericConstraintsGD();
            std::optional<Ent::Gen2::AnimationHitsConstraintsGD> AnimationHitsConstraintsGD();
            Ent::Gen2::AnimationHitsConstraintsGD addAnimationHitsConstraintsGD();
            void removeAnimationHitsConstraintsGD();
            std::optional<Ent::Gen2::AnimationLegsConstraintsGD> AnimationLegsConstraintsGD();
            Ent::Gen2::AnimationLegsConstraintsGD addAnimationLegsConstraintsGD();
            void removeAnimationLegsConstraintsGD();
            std::optional<Ent::Gen2::AnimationModelGD> AnimationModelGD();
            Ent::Gen2::AnimationModelGD addAnimationModelGD();
            void removeAnimationModelGD();
            std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD> AnimationPhysicsChainConstraintsGD();
            Ent::Gen2::AnimationPhysicsChainConstraintsGD addAnimationPhysicsChainConstraintsGD();
            void removeAnimationPhysicsChainConstraintsGD();
            std::optional<Ent::Gen2::AnimationPlaylistGD> AnimationPlaylistGD();
            Ent::Gen2::AnimationPlaylistGD addAnimationPlaylistGD();
            void removeAnimationPlaylistGD();
            std::optional<Ent::Gen2::AnimationTailConstraintsGD> AnimationTailConstraintsGD();
            Ent::Gen2::AnimationTailConstraintsGD addAnimationTailConstraintsGD();
            void removeAnimationTailConstraintsGD();
            std::optional<Ent::Gen2::AnimationTransformDriverGD> AnimationTransformDriverGD();
            Ent::Gen2::AnimationTransformDriverGD addAnimationTransformDriverGD();
            void removeAnimationTransformDriverGD();
            std::optional<Ent::Gen2::AnimationTreeConstraintsGD> AnimationTreeConstraintsGD();
            Ent::Gen2::AnimationTreeConstraintsGD addAnimationTreeConstraintsGD();
            void removeAnimationTreeConstraintsGD();
            std::optional<Ent::Gen2::AssemblyGD> AssemblyGD();
            Ent::Gen2::AssemblyGD addAssemblyGD();
            void removeAssemblyGD();
            std::optional<Ent::Gen2::AttackComponentGD> AttackComponentGD();
            Ent::Gen2::AttackComponentGD addAttackComponentGD();
            void removeAttackComponentGD();
            std::optional<Ent::Gen2::AttackTriggerGD> AttackTriggerGD();
            Ent::Gen2::AttackTriggerGD addAttackTriggerGD();
            void removeAttackTriggerGD();
            std::optional<Ent::Gen2::BeamTargetGD> BeamTargetGD();
            Ent::Gen2::BeamTargetGD addBeamTargetGD();
            void removeBeamTargetGD();
            std::optional<Ent::Gen2::BittenGD> BittenGD();
            Ent::Gen2::BittenGD addBittenGD();
            void removeBittenGD();
            std::optional<Ent::Gen2::BoidsGD> BoidsGD();
            Ent::Gen2::BoidsGD addBoidsGD();
            void removeBoidsGD();
            std::optional<Ent::Gen2::BreakableGD> BreakableGD();
            Ent::Gen2::BreakableGD addBreakableGD();
            void removeBreakableGD();
            std::optional<Ent::Gen2::CameraDataGD> CameraDataGD();
            Ent::Gen2::CameraDataGD addCameraDataGD();
            void removeCameraDataGD();
            std::optional<Ent::Gen2::CameraSetterGD> CameraSetterGD();
            Ent::Gen2::CameraSetterGD addCameraSetterGD();
            void removeCameraSetterGD();
            std::optional<Ent::Gen2::CharacterControllerGD> CharacterControllerGD();
            Ent::Gen2::CharacterControllerGD addCharacterControllerGD();
            void removeCharacterControllerGD();
            std::optional<Ent::Gen2::CharacterPlatformGD> CharacterPlatformGD();
            Ent::Gen2::CharacterPlatformGD addCharacterPlatformGD();
            void removeCharacterPlatformGD();
            std::optional<Ent::Gen2::ChargedJumpGD> ChargedJumpGD();
            Ent::Gen2::ChargedJumpGD addChargedJumpGD();
            void removeChargedJumpGD();
            std::optional<Ent::Gen2::ChildEntityPoolComponentGD> ChildEntityPoolComponentGD();
            Ent::Gen2::ChildEntityPoolComponentGD addChildEntityPoolComponentGD();
            void removeChildEntityPoolComponentGD();
            std::optional<Ent::Gen2::CinematicGD> CinematicGD();
            Ent::Gen2::CinematicGD addCinematicGD();
            void removeCinematicGD();
            std::optional<Ent::Gen2::ClothAnimationGD> ClothAnimationGD();
            Ent::Gen2::ClothAnimationGD addClothAnimationGD();
            void removeClothAnimationGD();
            std::optional<Ent::Gen2::ClothGD> ClothGD();
            Ent::Gen2::ClothGD addClothGD();
            void removeClothGD();
            std::optional<Ent::Gen2::ComponentWithProtoCodeGD> ComponentWithProtoCodeGD();
            Ent::Gen2::ComponentWithProtoCodeGD addComponentWithProtoCodeGD();
            void removeComponentWithProtoCodeGD();
            std::optional<Ent::Gen2::ConnectorGD> ConnectorGD();
            Ent::Gen2::ConnectorGD addConnectorGD();
            void removeConnectorGD();
            std::optional<Ent::Gen2::ConstrainedMoveGD> ConstrainedMoveGD();
            Ent::Gen2::ConstrainedMoveGD addConstrainedMoveGD();
            void removeConstrainedMoveGD();
            std::optional<Ent::Gen2::CreatureAIGD> CreatureAIGD();
            Ent::Gen2::CreatureAIGD addCreatureAIGD();
            void removeCreatureAIGD();
            std::optional<Ent::Gen2::CreatureGD> CreatureGD();
            Ent::Gen2::CreatureGD addCreatureGD();
            void removeCreatureGD();
            std::optional<Ent::Gen2::CreatureUIGD> CreatureUIGD();
            Ent::Gen2::CreatureUIGD addCreatureUIGD();
            void removeCreatureUIGD();
            std::optional<Ent::Gen2::CustomThumbnail> CustomThumbnail();
            Ent::Gen2::CustomThumbnail addCustomThumbnail();
            void removeCustomThumbnail();
            std::optional<Ent::Gen2::DebugGridGD> DebugGridGD();
            Ent::Gen2::DebugGridGD addDebugGridGD();
            void removeDebugGridGD();
            std::optional<Ent::Gen2::DistanceTriggerGD> DistanceTriggerGD();
            Ent::Gen2::DistanceTriggerGD addDistanceTriggerGD();
            void removeDistanceTriggerGD();
            std::optional<Ent::Gen2::DiveAttackGD> DiveAttackGD();
            Ent::Gen2::DiveAttackGD addDiveAttackGD();
            void removeDiveAttackGD();
            std::optional<Ent::Gen2::DummyComponentGD> DummyComponentGD();
            Ent::Gen2::DummyComponentGD addDummyComponentGD();
            void removeDummyComponentGD();
            std::optional<Ent::Gen2::EnergyCrookGD> EnergyCrookGD();
            Ent::Gen2::EnergyCrookGD addEnergyCrookGD();
            void removeEnergyCrookGD();
            std::optional<Ent::Gen2::EnergyDrainGD> EnergyDrainGD();
            Ent::Gen2::EnergyDrainGD addEnergyDrainGD();
            void removeEnergyDrainGD();
            std::optional<Ent::Gen2::EnergyNetworkListenerGD> EnergyNetworkListenerGD();
            Ent::Gen2::EnergyNetworkListenerGD addEnergyNetworkListenerGD();
            void removeEnergyNetworkListenerGD();
            std::optional<Ent::Gen2::EnergyPoolGD> EnergyPoolGD();
            Ent::Gen2::EnergyPoolGD addEnergyPoolGD();
            void removeEnergyPoolGD();
            std::optional<Ent::Gen2::EnergySideSwitcherGD> EnergySideSwitcherGD();
            Ent::Gen2::EnergySideSwitcherGD addEnergySideSwitcherGD();
            void removeEnergySideSwitcherGD();
            std::optional<Ent::Gen2::EnergySpoutGD> EnergySpoutGD();
            Ent::Gen2::EnergySpoutGD addEnergySpoutGD();
            void removeEnergySpoutGD();
            std::optional<Ent::Gen2::EnvStampGD> EnvStampGD();
            Ent::Gen2::EnvStampGD addEnvStampGD();
            void removeEnvStampGD();
            std::optional<Ent::Gen2::EventHandlerGD> EventHandlerGD();
            Ent::Gen2::EventHandlerGD addEventHandlerGD();
            void removeEventHandlerGD();
            std::optional<Ent::Gen2::EventTriggerGD> EventTriggerGD();
            Ent::Gen2::EventTriggerGD addEventTriggerGD();
            void removeEventTriggerGD();
            std::optional<Ent::Gen2::FightDistanceTriggerGD> FightDistanceTriggerGD();
            Ent::Gen2::FightDistanceTriggerGD addFightDistanceTriggerGD();
            void removeFightDistanceTriggerGD();
            std::optional<Ent::Gen2::FireSensorGD> FireSensorGD();
            Ent::Gen2::FireSensorGD addFireSensorGD();
            void removeFireSensorGD();
            std::optional<Ent::Gen2::FluidFXEntitySpawnerGD> FluidFXEntitySpawnerGD();
            Ent::Gen2::FluidFXEntitySpawnerGD addFluidFXEntitySpawnerGD();
            void removeFluidFXEntitySpawnerGD();
            std::optional<Ent::Gen2::FluidGD> FluidGD();
            Ent::Gen2::FluidGD addFluidGD();
            void removeFluidGD();
            std::optional<Ent::Gen2::FluidViewGD> FluidViewGD();
            Ent::Gen2::FluidViewGD addFluidViewGD();
            void removeFluidViewGD();
            std::optional<Ent::Gen2::FluidVolumeComponentGD> FluidVolumeComponentGD();
            Ent::Gen2::FluidVolumeComponentGD addFluidVolumeComponentGD();
            void removeFluidVolumeComponentGD();
            std::optional<Ent::Gen2::FurComponentGD> FurComponentGD();
            Ent::Gen2::FurComponentGD addFurComponentGD();
            void removeFurComponentGD();
            std::optional<Ent::Gen2::GameEffectSpawnerGD> GameEffectSpawnerGD();
            Ent::Gen2::GameEffectSpawnerGD addGameEffectSpawnerGD();
            void removeGameEffectSpawnerGD();
            std::optional<Ent::Gen2::GraspableGD> GraspableGD();
            Ent::Gen2::GraspableGD addGraspableGD();
            void removeGraspableGD();
            std::optional<Ent::Gen2::GrasperGD> GrasperGD();
            Ent::Gen2::GrasperGD addGrasperGD();
            void removeGrasperGD();
            std::optional<Ent::Gen2::GroundTypeSamplerGD> GroundTypeSamplerGD();
            Ent::Gen2::GroundTypeSamplerGD addGroundTypeSamplerGD();
            void removeGroundTypeSamplerGD();
            std::optional<Ent::Gen2::HealPumpGD> HealPumpGD();
            Ent::Gen2::HealPumpGD addHealPumpGD();
            void removeHealPumpGD();
            std::optional<Ent::Gen2::HealTriggerGD> HealTriggerGD();
            Ent::Gen2::HealTriggerGD addHealTriggerGD();
            void removeHealTriggerGD();
            std::optional<Ent::Gen2::HealerGD> HealerGD();
            Ent::Gen2::HealerGD addHealerGD();
            void removeHealerGD();
            std::optional<Ent::Gen2::HealthAreaGD> HealthAreaGD();
            Ent::Gen2::HealthAreaGD addHealthAreaGD();
            void removeHealthAreaGD();
            std::optional<Ent::Gen2::HeightMapComponentGD> HeightMapComponentGD();
            Ent::Gen2::HeightMapComponentGD addHeightMapComponentGD();
            void removeHeightMapComponentGD();
            std::optional<Ent::Gen2::HeightObj> HeightObj();
            Ent::Gen2::HeightObj addHeightObj();
            void removeHeightObj();
            std::optional<Ent::Gen2::HitTriggerGD> HitTriggerGD();
            Ent::Gen2::HitTriggerGD addHitTriggerGD();
            void removeHitTriggerGD();
            std::optional<Ent::Gen2::HotspotsGD> HotspotsGD();
            Ent::Gen2::HotspotsGD addHotspotsGD();
            void removeHotspotsGD();
            std::optional<Ent::Gen2::IncapacitateComponentGD> IncapacitateComponentGD();
            Ent::Gen2::IncapacitateComponentGD addIncapacitateComponentGD();
            void removeIncapacitateComponentGD();
            std::optional<Ent::Gen2::InfoboardRegistererGD> InfoboardRegistererGD();
            Ent::Gen2::InfoboardRegistererGD addInfoboardRegistererGD();
            void removeInfoboardRegistererGD();
            std::optional<Ent::Gen2::InteractableGPEGD> InteractableGPEGD();
            Ent::Gen2::InteractableGPEGD addInteractableGPEGD();
            void removeInteractableGPEGD();
            std::optional<Ent::Gen2::InteractorGD> InteractorGD();
            Ent::Gen2::InteractorGD addInteractorGD();
            void removeInteractorGD();
            std::optional<Ent::Gen2::InterestPointGD> InterestPointGD();
            Ent::Gen2::InterestPointGD addInterestPointGD();
            void removeInterestPointGD();
            std::optional<Ent::Gen2::InventoryGD> InventoryGD();
            Ent::Gen2::InventoryGD addInventoryGD();
            void removeInventoryGD();
            std::optional<Ent::Gen2::ItemHolderGD> ItemHolderGD();
            Ent::Gen2::ItemHolderGD addItemHolderGD();
            void removeItemHolderGD();
            std::optional<Ent::Gen2::LDPrimitive> LDPrimitive();
            Ent::Gen2::LDPrimitive addLDPrimitive();
            void removeLDPrimitive();
            std::optional<Ent::Gen2::LifeComponentGD> LifeComponentGD();
            Ent::Gen2::LifeComponentGD addLifeComponentGD();
            void removeLifeComponentGD();
            std::optional<Ent::Gen2::LightComponentGD> LightComponentGD();
            Ent::Gen2::LightComponentGD addLightComponentGD();
            void removeLightComponentGD();
            std::optional<Ent::Gen2::Mesh> Mesh();
            Ent::Gen2::Mesh addMesh();
            void removeMesh();
            std::optional<Ent::Gen2::MeshNavigationInfosGD> MeshNavigationInfosGD();
            Ent::Gen2::MeshNavigationInfosGD addMeshNavigationInfosGD();
            void removeMeshNavigationInfosGD();
            std::optional<Ent::Gen2::MissionHolderGD> MissionHolderGD();
            Ent::Gen2::MissionHolderGD addMissionHolderGD();
            void removeMissionHolderGD();
            std::optional<Ent::Gen2::MountIKControllerGD> MountIKControllerGD();
            Ent::Gen2::MountIKControllerGD addMountIKControllerGD();
            void removeMountIKControllerGD();
            std::optional<Ent::Gen2::MountableGD> MountableGD();
            Ent::Gen2::MountableGD addMountableGD();
            void removeMountableGD();
            std::optional<Ent::Gen2::MounterGD> MounterGD();
            Ent::Gen2::MounterGD addMounterGD();
            void removeMounterGD();
            std::optional<Ent::Gen2::MultiThumbnail> MultiThumbnail();
            Ent::Gen2::MultiThumbnail addMultiThumbnail();
            void removeMultiThumbnail();
            std::optional<Ent::Gen2::NavMeshActivatorGD> NavMeshActivatorGD();
            Ent::Gen2::NavMeshActivatorGD addNavMeshActivatorGD();
            void removeNavMeshActivatorGD();
            std::optional<Ent::Gen2::NavMeshStamperGD> NavMeshStamperGD();
            Ent::Gen2::NavMeshStamperGD addNavMeshStamperGD();
            void removeNavMeshStamperGD();
            std::optional<Ent::Gen2::NetGD> NetGD();
            Ent::Gen2::NetGD addNetGD();
            void removeNetGD();
            std::optional<Ent::Gen2::NetworkLink> NetworkLink();
            Ent::Gen2::NetworkLink addNetworkLink();
            void removeNetworkLink();
            std::optional<Ent::Gen2::NetworkNode> NetworkNode();
            Ent::Gen2::NetworkNode addNetworkNode();
            void removeNetworkNode();
            std::optional<Ent::Gen2::NotVisibleInSubscene> NotVisibleInSubscene();
            Ent::Gen2::NotVisibleInSubscene addNotVisibleInSubscene();
            void removeNotVisibleInSubscene();
            std::optional<Ent::Gen2::OutfitGD> OutfitGD();
            Ent::Gen2::OutfitGD addOutfitGD();
            void removeOutfitGD();
            std::optional<Ent::Gen2::OutfitWearerGD> OutfitWearerGD();
            Ent::Gen2::OutfitWearerGD addOutfitWearerGD();
            void removeOutfitWearerGD();
            std::optional<Ent::Gen2::PathFinderGD> PathFinderGD();
            Ent::Gen2::PathFinderGD addPathFinderGD();
            void removePathFinderGD();
            std::optional<Ent::Gen2::PerceivableGD> PerceivableGD();
            Ent::Gen2::PerceivableGD addPerceivableGD();
            void removePerceivableGD();
            std::optional<Ent::Gen2::PerceiverGD> PerceiverGD();
            Ent::Gen2::PerceiverGD addPerceiverGD();
            void removePerceiverGD();
            std::optional<Ent::Gen2::PhysicsDataGD> PhysicsDataGD();
            Ent::Gen2::PhysicsDataGD addPhysicsDataGD();
            void removePhysicsDataGD();
            std::optional<Ent::Gen2::PhysicsGD> PhysicsGD();
            Ent::Gen2::PhysicsGD addPhysicsGD();
            void removePhysicsGD();
            std::optional<Ent::Gen2::PhysicsImpactMakerGD> PhysicsImpactMakerGD();
            Ent::Gen2::PhysicsImpactMakerGD addPhysicsImpactMakerGD();
            void removePhysicsImpactMakerGD();
            std::optional<Ent::Gen2::PhysicsMeshDeformerGD> PhysicsMeshDeformerGD();
            Ent::Gen2::PhysicsMeshDeformerGD addPhysicsMeshDeformerGD();
            void removePhysicsMeshDeformerGD();
            std::optional<Ent::Gen2::PhysicsMeshProviderGD> PhysicsMeshProviderGD();
            Ent::Gen2::PhysicsMeshProviderGD addPhysicsMeshProviderGD();
            void removePhysicsMeshProviderGD();
            std::optional<Ent::Gen2::PhysicsTriggerGD> PhysicsTriggerGD();
            Ent::Gen2::PhysicsTriggerGD addPhysicsTriggerGD();
            void removePhysicsTriggerGD();
            std::optional<Ent::Gen2::PickableComponentGD> PickableComponentGD();
            Ent::Gen2::PickableComponentGD addPickableComponentGD();
            void removePickableComponentGD();
            std::optional<Ent::Gen2::PickableDistributorComponentGD> PickableDistributorComponentGD();
            Ent::Gen2::PickableDistributorComponentGD addPickableDistributorComponentGD();
            void removePickableDistributorComponentGD();
            std::optional<Ent::Gen2::PlayerComponentGD> PlayerComponentGD();
            Ent::Gen2::PlayerComponentGD addPlayerComponentGD();
            void removePlayerComponentGD();
            std::optional<Ent::Gen2::ProjectileGD> ProjectileGD();
            Ent::Gen2::ProjectileGD addProjectileGD();
            void removeProjectileGD();
            std::optional<Ent::Gen2::ProjectileShooterGD> ProjectileShooterGD();
            Ent::Gen2::ProjectileShooterGD addProjectileShooterGD();
            void removeProjectileShooterGD();
            std::optional<Ent::Gen2::ProtoComponentGD> ProtoComponentGD();
            Ent::Gen2::ProtoComponentGD addProtoComponentGD();
            void removeProtoComponentGD();
            std::optional<Ent::Gen2::QuickCreatureSwitchGD> QuickCreatureSwitchGD();
            Ent::Gen2::QuickCreatureSwitchGD addQuickCreatureSwitchGD();
            void removeQuickCreatureSwitchGD();
            std::optional<Ent::Gen2::RagdollGD> RagdollGD();
            Ent::Gen2::RagdollGD addRagdollGD();
            void removeRagdollGD();
            std::optional<Ent::Gen2::RegenSwitcherGD> RegenSwitcherGD();
            Ent::Gen2::RegenSwitcherGD addRegenSwitcherGD();
            void removeRegenSwitcherGD();
            std::optional<Ent::Gen2::RegenerableVegetationGD> RegenerableVegetationGD();
            Ent::Gen2::RegenerableVegetationGD addRegenerableVegetationGD();
            void removeRegenerableVegetationGD();
            std::optional<Ent::Gen2::RespawnPlaceGD> RespawnPlaceGD();
            Ent::Gen2::RespawnPlaceGD addRespawnPlaceGD();
            void removeRespawnPlaceGD();
            std::optional<Ent::Gen2::RespawnabilityGD> RespawnabilityGD();
            Ent::Gen2::RespawnabilityGD addRespawnabilityGD();
            void removeRespawnabilityGD();
            std::optional<Ent::Gen2::ReviveEnergyGD> ReviveEnergyGD();
            Ent::Gen2::ReviveEnergyGD addReviveEnergyGD();
            void removeReviveEnergyGD();
            std::optional<Ent::Gen2::ScriptComponentGD> ScriptComponentGD();
            Ent::Gen2::ScriptComponentGD addScriptComponentGD();
            void removeScriptComponentGD();
            std::optional<Ent::Gen2::SeedPatch> SeedPatch();
            Ent::Gen2::SeedPatch addSeedPatch();
            void removeSeedPatch();
            std::optional<Ent::Gen2::SensorControllerGD> SensorControllerGD();
            Ent::Gen2::SensorControllerGD addSensorControllerGD();
            void removeSensorControllerGD();
            std::optional<Ent::Gen2::SensorVoxelsGD> SensorVoxelsGD();
            Ent::Gen2::SensorVoxelsGD addSensorVoxelsGD();
            void removeSensorVoxelsGD();
            std::optional<Ent::Gen2::ShamanItemGD> ShamanItemGD();
            Ent::Gen2::ShamanItemGD addShamanItemGD();
            void removeShamanItemGD();
            std::optional<Ent::Gen2::ShamanVisionGD> ShamanVisionGD();
            Ent::Gen2::ShamanVisionGD addShamanVisionGD();
            void removeShamanVisionGD();
            std::optional<Ent::Gen2::ShapeshiftStatueGD> ShapeshiftStatueGD();
            Ent::Gen2::ShapeshiftStatueGD addShapeshiftStatueGD();
            void removeShapeshiftStatueGD();
            std::optional<Ent::Gen2::SideMapGateGD> SideMapGateGD();
            Ent::Gen2::SideMapGateGD addSideMapGateGD();
            void removeSideMapGateGD();
            std::optional<Ent::Gen2::SmoothScaleComponentGD> SmoothScaleComponentGD();
            Ent::Gen2::SmoothScaleComponentGD addSmoothScaleComponentGD();
            void removeSmoothScaleComponentGD();
            std::optional<Ent::Gen2::SoftCollisionGD> SoftCollisionGD();
            Ent::Gen2::SoftCollisionGD addSoftCollisionGD();
            void removeSoftCollisionGD();
            std::optional<Ent::Gen2::SoulRespawnOpportunityGD> SoulRespawnOpportunityGD();
            Ent::Gen2::SoulRespawnOpportunityGD addSoulRespawnOpportunityGD();
            void removeSoulRespawnOpportunityGD();
            std::optional<Ent::Gen2::SoundAreaGD> SoundAreaGD();
            Ent::Gen2::SoundAreaGD addSoundAreaGD();
            void removeSoundAreaGD();
            std::optional<Ent::Gen2::SoundEmitterGD> SoundEmitterGD();
            Ent::Gen2::SoundEmitterGD addSoundEmitterGD();
            void removeSoundEmitterGD();
            std::optional<Ent::Gen2::SoundOpportunityComponentGD> SoundOpportunityComponentGD();
            Ent::Gen2::SoundOpportunityComponentGD addSoundOpportunityComponentGD();
            void removeSoundOpportunityComponentGD();
            std::optional<Ent::Gen2::SpiritAnimalGD> SpiritAnimalGD();
            Ent::Gen2::SpiritAnimalGD addSpiritAnimalGD();
            void removeSpiritAnimalGD();
            std::optional<Ent::Gen2::SpiritAnimalShrineGD> SpiritAnimalShrineGD();
            Ent::Gen2::SpiritAnimalShrineGD addSpiritAnimalShrineGD();
            void removeSpiritAnimalShrineGD();
            std::optional<Ent::Gen2::SpiritAnimalsHolderGD> SpiritAnimalsHolderGD();
            Ent::Gen2::SpiritAnimalsHolderGD addSpiritAnimalsHolderGD();
            void removeSpiritAnimalsHolderGD();
            std::optional<Ent::Gen2::StaffVertebrasGD> StaffVertebrasGD();
            Ent::Gen2::StaffVertebrasGD addStaffVertebrasGD();
            void removeStaffVertebrasGD();
            std::optional<Ent::Gen2::StaticObjectGD> StaticObjectGD();
            Ent::Gen2::StaticObjectGD addStaticObjectGD();
            void removeStaticObjectGD();
            std::optional<Ent::Gen2::StickToTerrain> StickToTerrain();
            Ent::Gen2::StickToTerrain addStickToTerrain();
            void removeStickToTerrain();
            std::optional<Ent::Gen2::StreamableUnitGD> StreamableUnitGD();
            Ent::Gen2::StreamableUnitGD addStreamableUnitGD();
            void removeStreamableUnitGD();
            std::optional<Ent::Gen2::StreamingLocatorGD> StreamingLocatorGD();
            Ent::Gen2::StreamingLocatorGD addStreamingLocatorGD();
            void removeStreamingLocatorGD();
            std::optional<Ent::Gen2::SubScene> SubScene();
            Ent::Gen2::SubScene addSubScene();
            void removeSubScene();
            std::optional<Ent::Gen2::SystemicCreature> SystemicCreature();
            Ent::Gen2::SystemicCreature addSystemicCreature();
            void removeSystemicCreature();
            std::optional<Ent::Gen2::TeamGD> TeamGD();
            Ent::Gen2::TeamGD addTeamGD();
            void removeTeamGD();
            std::optional<Ent::Gen2::TerrainGD> TerrainGD();
            Ent::Gen2::TerrainGD addTerrainGD();
            void removeTerrainGD();
            std::optional<Ent::Gen2::TerrainSurfaceObject> TerrainSurfaceObject();
            Ent::Gen2::TerrainSurfaceObject addTerrainSurfaceObject();
            void removeTerrainSurfaceObject();
            std::optional<Ent::Gen2::TestArrays> TestArrays();
            Ent::Gen2::TestArrays addTestArrays();
            void removeTestArrays();
            std::optional<Ent::Gen2::TestCreature> TestCreature();
            Ent::Gen2::TestCreature addTestCreature();
            void removeTestCreature();
            std::optional<Ent::Gen2::TestDefaultValues> TestDefaultValues();
            Ent::Gen2::TestDefaultValues addTestDefaultValues();
            void removeTestDefaultValues();
            std::optional<Ent::Gen2::TestEntityRef> TestEntityRef();
            Ent::Gen2::TestEntityRef addTestEntityRef();
            void removeTestEntityRef();
            std::optional<Ent::Gen2::TestSetOfObject> TestSetOfObject();
            Ent::Gen2::TestSetOfObject addTestSetOfObject();
            void removeTestSetOfObject();
            std::optional<Ent::Gen2::TestTagsList> TestTagsList();
            Ent::Gen2::TestTagsList addTestTagsList();
            void removeTestTagsList();
            std::optional<Ent::Gen2::TestUnion> TestUnion();
            Ent::Gen2::TestUnion addTestUnion();
            void removeTestUnion();
            std::optional<Ent::Gen2::TransformGD> TransformGD();
            Ent::Gen2::TransformGD addTransformGD();
            void removeTransformGD();
            std::optional<Ent::Gen2::TriggerEventCameraGD> TriggerEventCameraGD();
            Ent::Gen2::TriggerEventCameraGD addTriggerEventCameraGD();
            void removeTriggerEventCameraGD();
            std::optional<Ent::Gen2::UnifiedPhysicsDataGD> UnifiedPhysicsDataGD();
            Ent::Gen2::UnifiedPhysicsDataGD addUnifiedPhysicsDataGD();
            void removeUnifiedPhysicsDataGD();
            std::optional<Ent::Gen2::UnitTestComponent> UnitTestComponent();
            Ent::Gen2::UnitTestComponent addUnitTestComponent();
            void removeUnitTestComponent();
            std::optional<Ent::Gen2::VelocityObstacleGD> VelocityObstacleGD();
            Ent::Gen2::VelocityObstacleGD addVelocityObstacleGD();
            void removeVelocityObstacleGD();
            std::optional<Ent::Gen2::VisualGD> VisualGD();
            Ent::Gen2::VisualGD addVisualGD();
            void removeVisualGD();
            std::optional<Ent::Gen2::VolumeConstraintGD> VolumeConstraintGD();
            Ent::Gen2::VolumeConstraintGD addVolumeConstraintGD();
            void removeVolumeConstraintGD();
            std::optional<Ent::Gen2::VoxelSimulationGD> VoxelSimulationGD();
            Ent::Gen2::VoxelSimulationGD addVoxelSimulationGD();
            void removeVoxelSimulationGD();
            std::optional<Ent::Gen2::WallRunGD> WallRunGD();
            Ent::Gen2::WallRunGD addWallRunGD();
            void removeWallRunGD();
            std::optional<Ent::Gen2::WildObject> WildObject();
            Ent::Gen2::WildObject addWildObject();
            void removeWildObject();
        };


        struct UIMessage : HelperObject<UIMessage> // Object
        {
            explicit UIMessage(Ent::Property _node): HelperObject<UIMessage>(std::move(_node)) {}
            static constexpr char schemaName[] = "UIMessage";
            static UIMessage load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return UIMessage(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static UIMessage loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return UIMessage(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static UIMessage create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return UIMessage(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            UIMessage makeInstanceOf()
            {
                return UIMessage(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Color Color() const;
            Ent::Gen2::Float Duration() const;
            Ent::Gen2::String Icon() const;
            Ent::Gen2::Vector2 ScreenPosition() const;
            Ent::Gen2::String Text() const;
            Ent::Gen2::Float TextScale() const;
            Ent::Gen2::String _comment() const;
        };

        struct UIManager : HelperObject<UIManager> // Object
        {
            explicit UIManager(Ent::Property _node): HelperObject<UIManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "UIManager";
            static UIManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return UIManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static UIManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return UIManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static UIManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return UIManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            UIManager makeInstanceOf()
            {
                return UIManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float BarAlpha() const;
            Ent::Gen2::Float BarHeight() const;
            Ent::Gen2::Float BarWidth() const;
            Ent::Gen2::String BlankMaterialPath() const;
            Ent::Gen2::Bool EnableReticle() const;
            Ent::Gen2::Bool EnableReticleLock() const;
            Ent::Gen2::String Font() const;
            Ent::Gen2::String HaloBigGRC() const;
            Ent::Gen2::String HaloSmallGRC() const;
            Array<Ent::Gen2::UIMessage> LaunchedMessages() const;
            Ent::Gen2::UIMessage LaunchedSceneMessage() const;
            Ent::Gen2::Bool ShowFoodBar() const;
            Ent::Gen2::Bool ShowLifeBar() const;
            Ent::Gen2::Bool ShowOxygenBar() const;
            Ent::Gen2::Bool ShowTempBar() const;
            Ent::Gen2::Bool ShowThirstBar() const;
            Ent::Gen2::Bool ShowTiredBar() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct SoundManager : HelperObject<SoundManager> // Object
        {
            explicit SoundManager(Ent::Property _node): HelperObject<SoundManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "SoundManager";
            static SoundManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SoundManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SoundManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SoundManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SoundManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SoundManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SoundManager makeInstanceOf()
            {
                return SoundManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AmbienceProbeLayerAttenuation() const;
            Ent::Gen2::Int AmbienceProbeLayerCount() const;
            Ent::Gen2::Float AmbienceProbeLayerSpacing() const;
            Ent::Gen2::Int AmbienceProbePerLayerCount() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::String> AmbienceTagMapping() const;
            Ent::Gen2::SoundManager_BiomeSoundBank BiomeSoundBank() const;
            Ent::Gen2::Float CallAnswerDelayMax() const;
            Ent::Gen2::Float CallAnswerDelayMin() const;
            Ent::Gen2::Float CallDistance() const;
            Ent::Gen2::Map<StyleModeEnum, Ent::Gen2::String> ClassStyleToHitActive() const;
            Array<Ent::Gen2::CreatureTypeData> CreatureType() const;
            Ent::Gen2::Bool DisplayListener() const;
            PrimArray<Ent::Gen2::String> EchoEntityNames() const;
            Ent::Gen2::Bool Enabled() const;
            PrimArray<Ent::Gen2::String> GroundSFX() const;
            Ent::Gen2::String GroundTypeWater() const;
            Ent::Gen2::String GroundTypeWaterDeep() const;
            Ent::Gen2::String GroundTypeWaterPuddle() const;
            Array<Ent::Gen2::GroundTypeData> GroundTypes() const;
            Ent::Gen2::Float HitIntensityHigh() const;
            Ent::Gen2::Float HitIntensityLow() const;
            Ent::Gen2::String InWaterEvent() const;
            Ent::Gen2::Float ListenerDistanceFromPlayer() const;
            Ent::Gen2::Bool ListenerOnFreeCam() const;
            Ent::Gen2::ScaleConverter OcclusionPlayerSpeedInfluenceSettings() const;
            Ent::Gen2::String OutWaterEvent() const;
            Ent::Gen2::String RTPC_3DFrontBack() const;
            Ent::Gen2::String RTPC_3DLeftRight() const;
            Ent::Gen2::String RTPC_AbsoluteHeight() const;
            Ent::Gen2::String RTPC_AmbSDFDistance() const;
            Ent::Gen2::String RTPC_AmbientRegenLevel() const;
            Ent::Gen2::String RTPC_AngleToListener() const;
            Ent::Gen2::String RTPC_BoidLeavesCount() const;
            Ent::Gen2::String RTPC_CreatureType() const;
            Ent::Gen2::String RTPC_DayHour() const;
            Ent::Gen2::String RTPC_Distance() const;
            Ent::Gen2::String RTPC_DreamFireDistance() const;
            Ent::Gen2::String RTPC_EntityAttackVolume() const;
            Ent::Gen2::String RTPC_EntityDoppler() const;
            Ent::Gen2::String RTPC_EntityHitIntensity() const;
            Ent::Gen2::String RTPC_EntityHitVolume() const;
            Ent::Gen2::String RTPC_EntityNodeRegen() const;
            Ent::Gen2::String RTPC_EntityPitch() const;
            Ent::Gen2::String RTPC_EntityRunDuration() const;
            Ent::Gen2::String RTPC_EntityScale() const;
            Ent::Gen2::String RTPC_EntityShamanVisiblity() const;
            Ent::Gen2::String RTPC_EntitySpeed() const;
            Ent::Gen2::String RTPC_FernProximity() const;
            Ent::Gen2::String RTPC_FlowersProximity() const;
            Ent::Gen2::String RTPC_Fx_Speed() const;
            Ent::Gen2::String RTPC_HunterDistance() const;
            Ent::Gen2::String RTPC_LocateClosestEntity() const;
            Ent::Gen2::String RTPC_LocateEntityPan() const;
            Ent::Gen2::String RTPC_OuterToInnerProximityEdges() const;
            Ent::Gen2::String RTPC_PCEnergy() const;
            Ent::Gen2::String RTPC_PCLife() const;
            Ent::Gen2::String RTPC_PCScale() const;
            Ent::Gen2::String RTPC_PCSpeed() const;
            Ent::Gen2::String RTPC_PcNPC() const;
            Ent::Gen2::String RTPC_PlayerAbsoluteHeight() const;
            Ent::Gen2::String RTPC_PlayerAcceleration() const;
            Ent::Gen2::String RTPC_PlayerRelativeHeight() const;
            Ent::Gen2::String RTPC_Progress() const;
            Ent::Gen2::String RTPC_RainIntensity() const;
            Ent::Gen2::String RTPC_RelativeHeight() const;
            Ent::Gen2::String RTPC_StormDistance() const;
            Ent::Gen2::String RTPC_StormIntensity() const;
            Ent::Gen2::String RTPC_SwampProximity() const;
            Ent::Gen2::String RTPC_UnderwaterCameraActivator() const;
            Ent::Gen2::String RTPC_UnderwaterDepth() const;
            Ent::Gen2::Float RainLevelStart() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::SmallActorSpawnPointData> SmallActorSpawnRules() const;
            Ent::Gen2::String SoundTagDataFile() const;
            Ent::Gen2::String Sound_GameEntity_Stop_All() const;
            Ent::Gen2::String Sound_GameObject_Dial_Stop() const;
            Ent::Gen2::String Sound_Game_Pause_All() const;
            Ent::Gen2::String Sound_Game_Resume_All() const;
            Ent::Gen2::String SoundbankEventDataFile() const;
            Ent::Gen2::Map<SpecieEnum, Ent::Gen2::String> SpeciesToHitActive() const;
            Ent::Gen2::String StateId_MainBiomeType() const;
            Ent::Gen2::String StateId_RainLevel() const;
            Ent::Gen2::String State_NoRain() const;
            Ent::Gen2::String State_Rain() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String SwitchId_Appeau() const;
            Ent::Gen2::String SwitchId_EntityState() const;
            Ent::Gen2::String SwitchId_GiveOrder_Tone() const;
            Ent::Gen2::String SwitchId_GiveOrder_Type() const;
            Ent::Gen2::String SwitchId_GroundType() const;
            Ent::Gen2::String SwitchId_Hit_Active() const;
            Ent::Gen2::String SwitchId_Hit_Intensity() const;
            Ent::Gen2::String SwitchId_Hit_Style() const;
            Ent::Gen2::String SwitchId_Level() const;
            Ent::Gen2::String SwitchId_OutfitInteraction() const;
            Ent::Gen2::String SwitchId_VegetType() const;
            Ent::Gen2::String SwitchState_EntityState_Attack() const;
            Ent::Gen2::String SwitchState_EntityState_Cold() const;
            Ent::Gen2::String SwitchState_EntityState_Defend() const;
            Ent::Gen2::String SwitchState_EntityState_Examine() const;
            Ent::Gen2::String SwitchState_EntityState_Flee() const;
            Ent::Gen2::String SwitchState_EntityState_Follow() const;
            Ent::Gen2::String SwitchState_EntityState_Hungry() const;
            Ent::Gen2::String SwitchState_EntityState_Hunt() const;
            Ent::Gen2::String SwitchState_EntityState_Idle() const;
            Ent::Gen2::String SwitchState_EntityState_Protect() const;
            Ent::Gen2::String SwitchState_EntityState_Sleep() const;
            Ent::Gen2::String SwitchState_EntityState_Thirst() const;
            Ent::Gen2::String SwitchState_EntityState_Threat() const;
            Ent::Gen2::String SwitchState_EntityState_Wait() const;
            Ent::Gen2::String SwitchState_GiveOrder_Follow() const;
            Ent::Gen2::String SwitchState_GiveOrder_Insistent() const;
            Ent::Gen2::String SwitchState_GiveOrder_Normal() const;
            Ent::Gen2::String SwitchState_GiveOrder_Wait() const;
            Ent::Gen2::String SwitchState_Level_High() const;
            Ent::Gen2::String SwitchState_Level_Low() const;
            Ent::Gen2::String SwitchState_Level_Medium() const;
            Ent::Gen2::String SwitchState_Level_VeryHigh() const;
            Ent::Gen2::String Switch_Ground_Prefix() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::Color> TagColors() const;
            Ent::Gen2::String UnderWaterBank() const;
            Ent::Gen2::Bool UnderWaterOnPlayer() const;
            Ent::Gen2::Float UnderwaterOutZone() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::String> VegetationTagMapping() const;
            Ent::Gen2::Float VerticalUnderWaterOffset() const;
            Ent::Gen2::Float VolumeRTPCScaleFactor() const;
            Ent::Gen2::String _comment() const;
        };

        struct OnlineDebugger_BandwidthWindow_BandwithLimit : HelperObject<OnlineDebugger_BandwidthWindow_BandwithLimit> // Object
        {
            explicit OnlineDebugger_BandwidthWindow_BandwithLimit(Ent::Property _node): HelperObject<OnlineDebugger_BandwidthWindow_BandwithLimit>(std::move(_node)) {}
            static constexpr char schemaName[] = "OnlineDebugger::BandwidthWindow::BandwithLimit";
            static OnlineDebugger_BandwidthWindow_BandwithLimit load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OnlineDebugger_BandwidthWindow_BandwithLimit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OnlineDebugger_BandwidthWindow_BandwithLimit loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OnlineDebugger_BandwidthWindow_BandwithLimit(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OnlineDebugger_BandwidthWindow_BandwithLimit create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OnlineDebugger_BandwidthWindow_BandwithLimit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OnlineDebugger_BandwidthWindow_BandwithLimit makeInstanceOf()
            {
                return OnlineDebugger_BandwidthWindow_BandwithLimit(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Color color() const;
            Ent::Gen2::Float limit() const;
        };

        struct OnlineDebugger_BandwidthWindow : HelperObject<OnlineDebugger_BandwidthWindow> // Object
        {
            explicit OnlineDebugger_BandwidthWindow(Ent::Property _node): HelperObject<OnlineDebugger_BandwidthWindow>(std::move(_node)) {}
            static constexpr char schemaName[] = "OnlineDebugger::BandwidthWindow";
            static OnlineDebugger_BandwidthWindow load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OnlineDebugger_BandwidthWindow(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OnlineDebugger_BandwidthWindow loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OnlineDebugger_BandwidthWindow(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OnlineDebugger_BandwidthWindow create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OnlineDebugger_BandwidthWindow(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OnlineDebugger_BandwidthWindow makeInstanceOf()
            {
                return OnlineDebugger_BandwidthWindow(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::OnlineDebugger_BandwidthWindow_BandwithLimit> DownColor() const;
            Ent::Gen2::Bool Enabled() const;
            Array<Ent::Gen2::OnlineDebugger_BandwidthWindow_BandwithLimit> UpColor() const;
            Ent::Gen2::String _comment() const;
        };

        struct LightComponentGD : HelperObject<LightComponentGD> // Object
        {
            explicit LightComponentGD(Ent::Property _node): HelperObject<LightComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "LightComponentGD";
            static LightComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return LightComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static LightComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return LightComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static LightComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return LightComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            LightComponentGD makeInstanceOf()
            {
                return LightComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector3 AngleOffset() const;
            Ent::Gen2::Float Brightness() const;
            Ent::Gen2::Bool CastShadow() const;
            Ent::Gen2::Color Color() const;
            Ent::Gen2::Vector3 Direction() const;
            Ent::Gen2::Float LinearAttenuationStart() const;
            Ent::Gen2::Float LinearAttenuationStop() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::Float RadialAttenuationStart() const;
            Ent::Gen2::Float RadialAttenuationStop() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::LightType Type_() const;
            Ent::Gen2::Bool VolumetricFog() const;
            Ent::Gen2::String _comment() const;
        };

        struct GradientColor : HelperObject<GradientColor> // Object
        {
            explicit GradientColor(Ent::Property _node): HelperObject<GradientColor>(std::move(_node)) {}
            static constexpr char schemaName[] = "GradientColor";
            static GradientColor load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GradientColor(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GradientColor loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GradientColor(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GradientColor create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GradientColor(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GradientColor makeInstanceOf()
            {
                return GradientColor(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Color color() const;
            Ent::Gen2::Float percent() const;
        };

        struct EditorManager : HelperObject<EditorManager> // Object
        {
            explicit EditorManager(Ent::Property _node): HelperObject<EditorManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "EditorManager";
            static EditorManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EditorManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EditorManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EditorManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EditorManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EditorManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EditorManager makeInstanceOf()
            {
                return EditorManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ActivateMouseControl() const;
            Ent::Gen2::Bool DisableDisplayDebugEntityInfo() const;
            Ent::Gen2::Bool GameBlockedWhenActive() const;
            Ent::Gen2::Float MoveZ_Blend() const;
            Ent::Gen2::Float MoveZ_BlendJoy() const;
            Ent::Gen2::Float MoveZ_SpeedAtScreenWidthMax() const;
            Ent::Gen2::Float MoveZ_SpeedAtScreenWidthMin() const;
            Ent::Gen2::Float Rotate_AccelerationTime() const;
            Ent::Gen2::Float Rotate_Blend() const;
            Ent::Gen2::Float Rotate_Speed() const;
            Ent::Gen2::Float Scale_AccelerationTime() const;
            Ent::Gen2::Float Scale_Blend() const;
            Ent::Gen2::Float Scale_Speed() const;
            Ent::Gen2::Float Selection_DistanceMax() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::Color Text_BackgroundColor() const;
            Ent::Gen2::Color Text_DefaultColor() const;
            Ent::Gen2::Float Text_Scale() const;
            Ent::Gen2::Color Text_SelectedColor() const;
            Ent::Gen2::String _comment() const;
        };

        struct BoidsGD : HelperObject<BoidsGD> // Object
        {
            explicit BoidsGD(Ent::Property _node): HelperObject<BoidsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "BoidsGD";
            static BoidsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BoidsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BoidsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BoidsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BoidsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BoidsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BoidsGD makeInstanceOf()
            {
                return BoidsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AffectedByFluid() const;
            Ent::Gen2::Bool AllowMerge() const;
            Ent::Gen2::Bool AutoMoveRoot() const;
            Ent::Gen2::EntityRef BudEntityRef() const;
            Ent::Gen2::Float BudVisualScaleMax() const;
            Ent::Gen2::Float BudVisualScaleMin() const;
            Ent::Gen2::Bool DisplayMaster() const;
            Ent::Gen2::Float FlockingAttackDamages() const;
            Ent::Gen2::Float FluidSurfaceHeightOffset() const;
            Ent::Gen2::Bool ForceOutsideWater() const;
            Ent::Gen2::EntityRef FullEntityPoolRef() const;
            Ent::Gen2::Float GetBackToFlockingDuration() const;
            Ent::Gen2::Float GhostDuration() const;
            Ent::Gen2::Bool HackCanCreateHitRigidbody() const;
            Ent::Gen2::Float HierarchyDistanceMultiplier() const;
            Ent::Gen2::Float InitialRadius() const;
            Ent::Gen2::Float LightBrightness() const;
            Ent::Gen2::Color LightColor() const;
            Ent::Gen2::Float MainTargetHeight() const;
            Ent::Gen2::Float MainTargetRotateDistance() const;
            Ent::Gen2::Float MainTargetSpeedMultiplier() const;
            Ent::Gen2::Float MinRegenToWakeUp() const;
            Ent::Gen2::Int NbAgents() const;
            Ent::Gen2::Int NbAgentsPerZone() const;
            Ent::Gen2::String ParamBlock() const;
            Ent::Gen2::String ParamBudAppear() const;
            Ent::Gen2::String ParamBudOpen() const;
            Ent::Gen2::String ParamHome() const;
            Ent::Gen2::String ParamMove() const;
            Ent::Gen2::String ParamSwim() const;
            Ent::Gen2::String ParamWakeUp() const;
            Ent::Gen2::Float PointCloudSearchRadius() const;
            Ent::Gen2::String PointCloudTag() const;
            Ent::Gen2::String PresetName() const;
            Ent::Gen2::String PresetNameBud() const;
            Ent::Gen2::Float RegenMaxThreshold() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Float VisualScaleMax() const;
            Ent::Gen2::Float VisualScaleMin() const;
            Ent::Gen2::Float WakeUpDuration() const;
            Ent::Gen2::String _comment() const;
        };

        struct Collider : HelperObject<Collider> // Object
        {
            explicit Collider(Ent::Property _node): HelperObject<Collider>(std::move(_node)) {}
            static constexpr char schemaName[] = "Collider";
            static Collider load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Collider(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Collider loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Collider(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Collider create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Collider(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Collider makeInstanceOf()
            {
                return Collider(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String BoneName() const;
            Ent::Gen2::Float RadiusFactor() const;
            Ent::Gen2::String _comment() const;
        };

        struct Codec : HelperObject<Codec> // Object
        {
            explicit Codec(Ent::Property _node): HelperObject<Codec>(std::move(_node)) {}
            static constexpr char schemaName[] = "Codec";
            static Codec load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Codec(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Codec loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Codec(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Codec create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Codec(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Codec makeInstanceOf()
            {
                return Codec(getProperty().makeInstanceOf());
            }
        
        };

        struct Zlib : HelperObject<Zlib> // Object
        {
            explicit Zlib(Ent::Property _node): HelperObject<Zlib>(std::move(_node)) {}
            static constexpr char schemaName[] = "Zlib";
            static Zlib load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Zlib(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Zlib loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Zlib(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Zlib create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Zlib(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Zlib makeInstanceOf()
            {
                return Zlib(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Codec Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct Lz4Fast : HelperObject<Lz4Fast> // Object
        {
            explicit Lz4Fast(Ent::Property _node): HelperObject<Lz4Fast>(std::move(_node)) {}
            static constexpr char schemaName[] = "Lz4Fast";
            static Lz4Fast load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Lz4Fast(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Lz4Fast loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Lz4Fast(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Lz4Fast create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Lz4Fast(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Lz4Fast makeInstanceOf()
            {
                return Lz4Fast(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Codec Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ClimbEdgeData_LedgeData : HelperObject<ClimbEdgeData_LedgeData> // Object
        {
            explicit ClimbEdgeData_LedgeData(Ent::Property _node): HelperObject<ClimbEdgeData_LedgeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ClimbEdgeData::LedgeData";
            static ClimbEdgeData_LedgeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ClimbEdgeData_LedgeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ClimbEdgeData_LedgeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ClimbEdgeData_LedgeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ClimbEdgeData_LedgeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ClimbEdgeData_LedgeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ClimbEdgeData_LedgeData makeInstanceOf()
            {
                return ClimbEdgeData_LedgeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float ledgeApproachSpeedMaxZ() const;
            Ent::Gen2::Float ledgeDepthRadiusCoeff() const;
            Ent::Gen2::Vector3 ledgeDetectionOffset() const;
            Ent::Gen2::Float ledgeDetectionRadiusMultiplier() const;
            Ent::Gen2::Float ledgeMaxDistance() const;
            Ent::Gen2::Float ledgeMaxHeightEpsilon() const;
            Ent::Gen2::Float ledgeMinDepthEpsilon() const;
            Ent::Gen2::Float ledgeMinWidthEpsilon() const;
        };

        struct ClimbEdgeData : HelperObject<ClimbEdgeData> // Object
        {
            explicit ClimbEdgeData(Ent::Property _node): HelperObject<ClimbEdgeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "ClimbEdgeData";
            static ClimbEdgeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ClimbEdgeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ClimbEdgeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ClimbEdgeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ClimbEdgeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ClimbEdgeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ClimbEdgeData makeInstanceOf()
            {
                return ClimbEdgeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::ScaleConverter edgeDetectionAnticipation() const;
            Ent::Gen2::Float edgeDetectionMaxFlotation() const;
            Ent::Gen2::ClimbEdgeData_LedgeData ledgeData() const;
            Ent::Gen2::ClimbEdgeData_LedgeData ledgeDataImmersed() const;
        };

        struct ClassMemberRef : HelperObject<ClassMemberRef> // Object
        {
            explicit ClassMemberRef(Ent::Property _node): HelperObject<ClassMemberRef>(std::move(_node)) {}
            static constexpr char schemaName[] = "ClassMemberRef";
            static ClassMemberRef load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ClassMemberRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ClassMemberRef loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ClassMemberRef(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ClassMemberRef create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ClassMemberRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ClassMemberRef makeInstanceOf()
            {
                return ClassMemberRef(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String class_() const;
            Ent::Gen2::String member() const;
        };

        struct ComponentSignalRef : HelperObject<ComponentSignalRef> // Object
        {
            explicit ComponentSignalRef(Ent::Property _node): HelperObject<ComponentSignalRef>(std::move(_node)) {}
            static constexpr char schemaName[] = "ComponentSignalRef";
            static ComponentSignalRef load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ComponentSignalRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ComponentSignalRef loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ComponentSignalRef(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ComponentSignalRef create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ComponentSignalRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ComponentSignalRef makeInstanceOf()
            {
                return ComponentSignalRef(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ClassMemberRef Signal() const;
            Ent::Gen2::String _comment() const;
        };

        struct ComponentMethodRef : HelperObject<ComponentMethodRef> // Object
        {
            explicit ComponentMethodRef(Ent::Property _node): HelperObject<ComponentMethodRef>(std::move(_node)) {}
            static constexpr char schemaName[] = "ComponentMethodRef";
            static ComponentMethodRef load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ComponentMethodRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ComponentMethodRef loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ComponentMethodRef(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ComponentMethodRef create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ComponentMethodRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ComponentMethodRef makeInstanceOf()
            {
                return ComponentMethodRef(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ClassMemberRef Method() const;
            Ent::Gen2::String _comment() const;
        };

        struct Connection : HelperObject<Connection> // Object
        {
            explicit Connection(Ent::Property _node): HelperObject<Connection>(std::move(_node)) {}
            static constexpr char schemaName[] = "Connection";
            static Connection load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Connection(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Connection loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Connection(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Connection create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Connection(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Connection makeInstanceOf()
            {
                return Connection(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::ComponentMethodRef receiver() const;
            Ent::Gen2::ComponentSignalRef sender() const;
        };

        struct CinematicUpdateType : EnumPropHelper<CinematicUpdateType, CinematicUpdateTypeEnum> // Enum
        {
            using Enum = CinematicUpdateTypeEnum;
            using PropHelper<CinematicUpdateType, Enum>::operator=;
            explicit CinematicUpdateType(Ent::Property _node): EnumPropHelper<CinematicUpdateType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "CinematicUpdateType";
            static constexpr char const* enumToString[] = {
                "none",
                "Internal",
                "Pesto",
                "CinematicUpdateType_COUNT",
            };
        };
        inline char const* toString(CinematicUpdateTypeEnum value)
        {
            if(size_t(value) >= std::size(CinematicUpdateType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return CinematicUpdateType::enumToString[size_t(value)];
        }
        inline char const* toInternal(CinematicUpdateTypeEnum value) { return toString(value); }
        template<> inline CinematicUpdateTypeEnum strToEnum<CinematicUpdateTypeEnum>(char const* value)
        {
            return static_cast<CinematicUpdateTypeEnum>(details::indexInEnum(value, CinematicUpdateType::enumToString));
        }

        struct CinematicSlot : HelperObject<CinematicSlot> // Object
        {
            explicit CinematicSlot(Ent::Property _node): HelperObject<CinematicSlot>(std::move(_node)) {}
            static constexpr char schemaName[] = "CinematicSlot";
            static CinematicSlot load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CinematicSlot(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CinematicSlot loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CinematicSlot(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CinematicSlot create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CinematicSlot(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CinematicSlot makeInstanceOf()
            {
                return CinematicSlot(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Anim() const;
            Ent::Gen2::Bool CameraHolder() const;
            Ent::Gen2::Bool CanBeInstanciated() const;
            Ent::Gen2::Bool DestroyAfter() const;
            Ent::Gen2::EntityRef EntityRef() const;
            Ent::Gen2::Bool EventCameraHolder() const;
            Ent::Gen2::Float FOV() const;
            Ent::Gen2::Float FadeInDelay() const;
            Ent::Gen2::Float FadeOutDelay() const;
            Ent::Gen2::Transform3D InitTransform() const;
            Ent::Gen2::Bool MainRole() const;
            Ent::Gen2::Bool Mandatory() const;
            Ent::Gen2::String Role() const;
            Ent::Gen2::String RoleInNextSequence() const;
            Ent::Gen2::Bool Visible() const;
            Ent::Gen2::String _comment() const;
        };

        struct Sequence : HelperObject<Sequence> // Object
        {
            explicit Sequence(Ent::Property _node): HelperObject<Sequence>(std::move(_node)) {}
            static constexpr char schemaName[] = "Sequence";
            static Sequence load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Sequence(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Sequence loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Sequence(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Sequence create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Sequence(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Sequence makeInstanceOf()
            {
                return Sequence(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ActivationDelay() const;
            Ent::Gen2::Bool AutoSwitchToNextSequence() const;
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::CinematicSlot> actors() const;
            Ent::Gen2::Bool loop() const;
            Ent::Gen2::String name() const;
        };

        struct CinematicGD : HelperObject<CinematicGD> // Object
        {
            explicit CinematicGD(Ent::Property _node): HelperObject<CinematicGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "CinematicGD";
            static CinematicGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CinematicGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CinematicGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CinematicGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CinematicGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CinematicGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CinematicGD makeInstanceOf()
            {
                return CinematicGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ActivationDistance() const;
            Array<Ent::Gen2::ResponsiblePointer_CineEvent_> ScriptEvents() const;
            Array<Ent::Gen2::Sequence> Sequences() const;
            Ent::Gen2::Bool Skippable() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::CinematicUpdateType UpdateType() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEvent : HelperObject<CineEvent> // Object
        {
            explicit CineEvent(Ent::Property _node): HelperObject<CineEvent>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEvent";
            static CineEvent load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEvent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEvent loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEvent(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEvent create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEvent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEvent makeInstanceOf()
            {
                return CineEvent(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool Active() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTrigger : HelperObject<CineEventTrigger> // Object
        {
            explicit CineEventTrigger(Ent::Property _node): HelperObject<CineEventTrigger>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTrigger";
            static CineEventTrigger load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTrigger(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTrigger loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTrigger(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTrigger create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTrigger(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTrigger makeInstanceOf()
            {
                return CineEventTrigger(getProperty().makeInstanceOf());
            }
            Ent::Gen2::CineEvent Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTriggerPlaySound : HelperObject<CineEventTriggerPlaySound> // Object
        {
            explicit CineEventTriggerPlaySound(Ent::Property _node): HelperObject<CineEventTriggerPlaySound>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTriggerPlaySound";
            static CineEventTriggerPlaySound load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTriggerPlaySound(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTriggerPlaySound loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTriggerPlaySound(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTriggerPlaySound create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTriggerPlaySound(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTriggerPlaySound makeInstanceOf()
            {
                return CineEventTriggerPlaySound(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String SoundEventName() const;
            Ent::Gen2::CineEventTrigger Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTriggerPlaySequence : HelperObject<CineEventTriggerPlaySequence> // Object
        {
            explicit CineEventTriggerPlaySequence(Ent::Property _node): HelperObject<CineEventTriggerPlaySequence>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTriggerPlaySequence";
            static CineEventTriggerPlaySequence load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTriggerPlaySequence(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTriggerPlaySequence loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTriggerPlaySequence(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTriggerPlaySequence create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTriggerPlaySequence(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTriggerPlaySequence makeInstanceOf()
            {
                return CineEventTriggerPlaySequence(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int SequenceID() const;
            Ent::Gen2::CineEventTrigger Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTriggerGameStateChange : HelperObject<CineEventTriggerGameStateChange> // Object
        {
            explicit CineEventTriggerGameStateChange(Ent::Property _node): HelperObject<CineEventTriggerGameStateChange>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTriggerGameStateChange";
            static CineEventTriggerGameStateChange load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTriggerGameStateChange(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTriggerGameStateChange loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTriggerGameStateChange(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTriggerGameStateChange create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTriggerGameStateChange(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTriggerGameStateChange makeInstanceOf()
            {
                return CineEventTriggerGameStateChange(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String GameStateName() const;
            Ent::Gen2::CineEventTrigger Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTriggerEventHandlerPost : HelperObject<CineEventTriggerEventHandlerPost> // Object
        {
            explicit CineEventTriggerEventHandlerPost(Ent::Property _node): HelperObject<CineEventTriggerEventHandlerPost>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTriggerEventHandlerPost";
            static CineEventTriggerEventHandlerPost load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTriggerEventHandlerPost(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTriggerEventHandlerPost loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTriggerEventHandlerPost(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTriggerEventHandlerPost create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTriggerEventHandlerPost(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTriggerEventHandlerPost makeInstanceOf()
            {
                return CineEventTriggerEventHandlerPost(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String EventCategory() const;
            Ent::Gen2::String EventName() const;
            Ent::Gen2::CineEventTrigger Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTriggerDisplayUIMessage : HelperObject<CineEventTriggerDisplayUIMessage> // Object
        {
            explicit CineEventTriggerDisplayUIMessage(Ent::Property _node): HelperObject<CineEventTriggerDisplayUIMessage>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTriggerDisplayUIMessage";
            static CineEventTriggerDisplayUIMessage load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTriggerDisplayUIMessage(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTriggerDisplayUIMessage loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTriggerDisplayUIMessage(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTriggerDisplayUIMessage create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTriggerDisplayUIMessage(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTriggerDisplayUIMessage makeInstanceOf()
            {
                return CineEventTriggerDisplayUIMessage(getProperty().makeInstanceOf());
            }
            Ent::Gen2::CineEventTrigger Super() const;
            Ent::Gen2::UIMessage UIMessage() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTest : HelperObject<CineEventTest> // Object
        {
            explicit CineEventTest(Ent::Property _node): HelperObject<CineEventTest>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTest";
            static CineEventTest load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTest(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTest loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTest(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTest create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTest(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTest makeInstanceOf()
            {
                return CineEventTest(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool InvertTest() const;
            Ent::Gen2::CineEvent Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTestIsCanceled : HelperObject<CineEventTestIsCanceled> // Object
        {
            explicit CineEventTestIsCanceled(Ent::Property _node): HelperObject<CineEventTestIsCanceled>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTestIsCanceled";
            static CineEventTestIsCanceled load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTestIsCanceled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTestIsCanceled loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTestIsCanceled(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTestIsCanceled create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTestIsCanceled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTestIsCanceled makeInstanceOf()
            {
                return CineEventTestIsCanceled(getProperty().makeInstanceOf());
            }
            Ent::Gen2::CineEventTest Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTestInput : HelperObject<CineEventTestInput> // Object
        {
            explicit CineEventTestInput(Ent::Property _node): HelperObject<CineEventTestInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTestInput";
            static CineEventTestInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTestInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTestInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTestInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTestInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTestInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTestInput makeInstanceOf()
            {
                return CineEventTestInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AnyButtonInput() const;
            Ent::Gen2::Bool AnyJoyInput() const;
            Ent::Gen2::CineEventTest Super() const;
            Ent::Gen2::Bool TriangleButtonInput() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTestEndCurrentSequence : HelperObject<CineEventTestEndCurrentSequence> // Object
        {
            explicit CineEventTestEndCurrentSequence(Ent::Property _node): HelperObject<CineEventTestEndCurrentSequence>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTestEndCurrentSequence";
            static CineEventTestEndCurrentSequence load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTestEndCurrentSequence(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTestEndCurrentSequence loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTestEndCurrentSequence(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTestEndCurrentSequence create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTestEndCurrentSequence(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTestEndCurrentSequence makeInstanceOf()
            {
                return CineEventTestEndCurrentSequence(getProperty().makeInstanceOf());
            }
            Ent::Gen2::CineEventTest Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CineEventTestCurrentGameState : HelperObject<CineEventTestCurrentGameState> // Object
        {
            explicit CineEventTestCurrentGameState(Ent::Property _node): HelperObject<CineEventTestCurrentGameState>(std::move(_node)) {}
            static constexpr char schemaName[] = "CineEventTestCurrentGameState";
            static CineEventTestCurrentGameState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CineEventTestCurrentGameState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CineEventTestCurrentGameState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CineEventTestCurrentGameState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CineEventTestCurrentGameState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CineEventTestCurrentGameState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CineEventTestCurrentGameState makeInstanceOf()
            {
                return CineEventTestCurrentGameState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String GameStateName() const;
            Ent::Gen2::CineEventTest Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CharacterControllerSlideData : HelperObject<CharacterControllerSlideData> // Object
        {
            explicit CharacterControllerSlideData(Ent::Property _node): HelperObject<CharacterControllerSlideData>(std::move(_node)) {}
            static constexpr char schemaName[] = "CharacterControllerSlideData";
            static CharacterControllerSlideData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CharacterControllerSlideData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CharacterControllerSlideData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CharacterControllerSlideData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CharacterControllerSlideData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CharacterControllerSlideData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CharacterControllerSlideData makeInstanceOf()
            {
                return CharacterControllerSlideData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::ScaleConverter adherenceRecoverSpeedDependingOnTheSlope() const;
            Ent::Gen2::Float adherenceThresholdHysteresis() const;
            Ent::Gen2::ScaleConverter adherenceThresholdRequiredToKeepControl() const;
            Ent::Gen2::Float adherenceUsingDownwardSlopeDirection() const;
            Ent::Gen2::Float adherenceUsingSideSlopeDirection() const;
            Ent::Gen2::Float adherenceUsingUpwardSlopeDirection() const;
            Ent::Gen2::Float animblendInTime() const;
            Ent::Gen2::Float friction() const;
            Ent::Gen2::Float maxSlopeAngle() const;
            Ent::Gen2::Float speedMediumCoeffHysteresis() const;
            Ent::Gen2::ScaleConverter speedMediumCoeffIn() const;
            Ent::Gen2::Float speedMediumCoeffMin() const;
        };

        struct CharacterControllerGroundNormalData : HelperObject<CharacterControllerGroundNormalData> // Object
        {
            explicit CharacterControllerGroundNormalData(Ent::Property _node): HelperObject<CharacterControllerGroundNormalData>(std::move(_node)) {}
            static constexpr char schemaName[] = "CharacterControllerGroundNormalData";
            static CharacterControllerGroundNormalData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CharacterControllerGroundNormalData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CharacterControllerGroundNormalData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CharacterControllerGroundNormalData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CharacterControllerGroundNormalData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CharacterControllerGroundNormalData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CharacterControllerGroundNormalData makeInstanceOf()
            {
                return CharacterControllerGroundNormalData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AllowOtherCreatureCast() const;
            Ent::Gen2::Float PercentageEdgeTolerance() const;
            Ent::Gen2::Float PercentageExtirpate() const;
            Ent::Gen2::Float WallAngle() const;
            Ent::Gen2::ScaleConverter WallCosAngleSpeedXYFactor() const;
            Ent::Gen2::String _comment() const;
        };

        struct CharacterControllerFallData : HelperObject<CharacterControllerFallData> // Object
        {
            explicit CharacterControllerFallData(Ent::Property _node): HelperObject<CharacterControllerFallData>(std::move(_node)) {}
            static constexpr char schemaName[] = "CharacterControllerFallData";
            static CharacterControllerFallData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CharacterControllerFallData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CharacterControllerFallData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CharacterControllerFallData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CharacterControllerFallData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CharacterControllerFallData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CharacterControllerFallData makeInstanceOf()
            {
                return CharacterControllerFallData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AirControlBrake() const;
            Ent::Gen2::Float AirControlSmooth() const;
            Ent::Gen2::Float AirControlSpeed() const;
            Ent::Gen2::ScaleConverter DamagesPerHeightFall() const;
            Ent::Gen2::Float MinHeightForDamageFall() const;
            Ent::Gen2::Float MinHeightForDeathFall() const;
            Ent::Gen2::Float MinHeightForRecoveryFall() const;
            Ent::Gen2::String _comment() const;
        };

        struct CharacterControllerClamberData : HelperObject<CharacterControllerClamberData> // Object
        {
            explicit CharacterControllerClamberData(Ent::Property _node): HelperObject<CharacterControllerClamberData>(std::move(_node)) {}
            static constexpr char schemaName[] = "CharacterControllerClamberData";
            static CharacterControllerClamberData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CharacterControllerClamberData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CharacterControllerClamberData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CharacterControllerClamberData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CharacterControllerClamberData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CharacterControllerClamberData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CharacterControllerClamberData makeInstanceOf()
            {
                return CharacterControllerClamberData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DropOffAngle() const;
            Ent::Gen2::Float EnterAngle() const;
            Ent::Gen2::Float ExitAngle() const;
            Ent::Gen2::Bool IsAllowed() const;
            Ent::Gen2::ScaleConverter VerticalOrientationRatio() const;
            Ent::Gen2::String _comment() const;
        };

        struct CarryMode : EnumPropHelper<CarryMode, CarryModeEnum> // Enum
        {
            using Enum = CarryModeEnum;
            using PropHelper<CarryMode, Enum>::operator=;
            explicit CarryMode(Ent::Property _node): EnumPropHelper<CarryMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "CarryMode";
            static constexpr char const* enumToString[] = {
                "carryno",
                "carrylight",
                "CarryMode_COUNT",
            };
        };
        inline char const* toString(CarryModeEnum value)
        {
            if(size_t(value) >= std::size(CarryMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return CarryMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(CarryModeEnum value) { return toString(value); }
        template<> inline CarryModeEnum strToEnum<CarryModeEnum>(char const* value)
        {
            return static_cast<CarryModeEnum>(details::indexInEnum(value, CarryMode::enumToString));
        }

        struct CapabilitiesAndTags : HelperObject<CapabilitiesAndTags> // Object
        {
            explicit CapabilitiesAndTags(Ent::Property _node): HelperObject<CapabilitiesAndTags>(std::move(_node)) {}
            static constexpr char schemaName[] = "CapabilitiesAndTags";
            static CapabilitiesAndTags load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CapabilitiesAndTags(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CapabilitiesAndTags loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CapabilitiesAndTags(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CapabilitiesAndTags create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CapabilitiesAndTags(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CapabilitiesAndTags makeInstanceOf()
            {
                return CapabilitiesAndTags(getProperty().makeInstanceOf());
            }
            Ent::Gen2::PrimitiveSet<NavMeshCapabilityEnum> Capabilities() const;
            Ent::Gen2::PrimitiveSet<NavMeshTagEnum> Tags() const;
            Ent::Gen2::String _comment() const;
        };

        struct ZoneStamper : HelperObject<ZoneStamper> // Object
        {
            explicit ZoneStamper(Ent::Property _node): HelperObject<ZoneStamper>(std::move(_node)) {}
            static constexpr char schemaName[] = "ZoneStamper";
            static ZoneStamper load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ZoneStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ZoneStamper loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ZoneStamper(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ZoneStamper create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ZoneStamper(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ZoneStamper makeInstanceOf()
            {
                return ZoneStamper(getProperty().makeInstanceOf());
            }
            Ent::Gen2::CapabilitiesAndTags CapabilitiesAndTags() const;
            Ent::Gen2::Float DownwardOffset() const;
            Ent::Gen2::variant_EntityRef_NavMeshArea_ NavMeshArea() const;
            Ent::Gen2::Int Priority() const;
            Ent::Gen2::variant_ZoneCylinderShape_ZoneMeshShape_ Shape() const;
            Ent::Gen2::GeometryStamper Super() const;
            Ent::Gen2::Float UpwardOffset() const;
            Ent::Gen2::String _comment() const;
        };

        struct OffMeshLink : HelperObject<OffMeshLink> // Object
        {
            explicit OffMeshLink(Ent::Property _node): HelperObject<OffMeshLink>(std::move(_node)) {}
            static constexpr char schemaName[] = "OffMeshLink";
            static OffMeshLink load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OffMeshLink(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OffMeshLink loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OffMeshLink(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OffMeshLink create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OffMeshLink(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OffMeshLink makeInstanceOf()
            {
                return OffMeshLink(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool bidirectional() const;
            Ent::Gen2::CapabilitiesAndTags capabilitiesAndTags() const;
            Ent::Gen2::EntityRef destination() const;
            Ent::Gen2::Float radius() const;
        };

        struct NavMeshStamperGD : HelperObject<NavMeshStamperGD> // Object
        {
            explicit NavMeshStamperGD(Ent::Property _node): HelperObject<NavMeshStamperGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "NavMeshStamperGD";
            static NavMeshStamperGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return NavMeshStamperGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static NavMeshStamperGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return NavMeshStamperGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static NavMeshStamperGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return NavMeshStamperGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            NavMeshStamperGD makeInstanceOf()
            {
                return NavMeshStamperGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool IsActive() const;
            Array<Ent::Gen2::MeshStamper> MeshStampers() const;
            Array<Ent::Gen2::OffMeshLink> OffMeshLinks() const;
            Array<Ent::Gen2::SkinnedPhysMeshStamper> SkinnedMeshStampers() const;
            Ent::Gen2::ComponentGD Super() const;
            Array<Ent::Gen2::ZoneStamper> ZoneStampers() const;
            Ent::Gen2::String _comment() const;
        };

        struct CanTakeHit : HelperObject<CanTakeHit> // Object
        {
            explicit CanTakeHit(Ent::Property _node): HelperObject<CanTakeHit>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::Bool val() const;
        };

        struct CreatureComponentInput : HelperObject<CreatureComponentInput> // Object
        {
            explicit CreatureComponentInput(Ent::Property _node): HelperObject<CreatureComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureComponentInput";
            static CreatureComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureComponentInput makeInstanceOf()
            {
                return CreatureComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::CanTakeHit CanTakeHit() const;
            Ent::Gen2::DeltaTimeFactor DeltaTimeFactor() const;
            Ent::Gen2::Invincible Invincible() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CameraType : EnumPropHelper<CameraType, CameraTypeEnum> // Enum
        {
            using Enum = CameraTypeEnum;
            using PropHelper<CameraType, Enum>::operator=;
            explicit CameraType(Ent::Property _node): EnumPropHelper<CameraType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "CameraType";
            static constexpr char const* enumToString[] = {
                "NONE",
                "Death",
                "Editor",
                "Event",
                "Free",
                "ThirdPerson",
                "ThirdPersonFollow",
                "ThirdPersonAim",
                "ThirdPersonClamber",
                "MotionConstraint",
                "OnSpline",
                "OnBones",
                "TopView",
                "EntitySwap",
                "SightConstraint",
                "Locked",
                "Pan",
                "CameraType_COUNT",
            };
        };
        inline char const* toString(CameraTypeEnum value)
        {
            if(size_t(value) >= std::size(CameraType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return CameraType::enumToString[size_t(value)];
        }
        inline char const* toInternal(CameraTypeEnum value) { return toString(value); }
        template<> inline CameraTypeEnum strToEnum<CameraTypeEnum>(char const* value)
        {
            return static_cast<CameraTypeEnum>(details::indexInEnum(value, CameraType::enumToString));
        }

        struct CameraSetterGD : HelperObject<CameraSetterGD> // Object
        {
            explicit CameraSetterGD(Ent::Property _node): HelperObject<CameraSetterGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "CameraSetterGD";
            static CameraSetterGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CameraSetterGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CameraSetterGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CameraSetterGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CameraSetterGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CameraSetterGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CameraSetterGD makeInstanceOf()
            {
                return CameraSetterGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool SetPositionToHotspot() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Bool SwitchToType() const;
            Ent::Gen2::CameraType Type_() const;
            Ent::Gen2::String _comment() const;
        };

        struct CameraSoundEvent : HelperObject<CameraSoundEvent> // Object
        {
            explicit CameraSoundEvent(Ent::Property _node): HelperObject<CameraSoundEvent>(std::move(_node)) {}
            static constexpr char schemaName[] = "CameraSoundEvent";
            static CameraSoundEvent load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CameraSoundEvent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CameraSoundEvent loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CameraSoundEvent(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CameraSoundEvent create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CameraSoundEvent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CameraSoundEvent makeInstanceOf()
            {
                return CameraSoundEvent(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String eventName() const;
            Ent::Gen2::String from_() const;
            Ent::Gen2::String to() const;
        };

        struct CameraShakeData : HelperObject<CameraShakeData> // Object
        {
            explicit CameraShakeData(Ent::Property _node): HelperObject<CameraShakeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "CameraShakeData";
            static CameraShakeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CameraShakeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CameraShakeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CameraShakeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CameraShakeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CameraShakeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CameraShakeData makeInstanceOf()
            {
                return CameraShakeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float shakeDuration() const;
            Ent::Gen2::Float shakeFrequency() const;
            Ent::Gen2::Float shakeIntensity() const;
            Ent::Gen2::Vector3 shakeRotation() const;
        };

        struct ExplosionEffect : HelperObject<ExplosionEffect> // Object
        {
            explicit ExplosionEffect(Ent::Property _node): HelperObject<ExplosionEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "ExplosionEffect";
            static ExplosionEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ExplosionEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ExplosionEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ExplosionEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ExplosionEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ExplosionEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ExplosionEffect makeInstanceOf()
            {
                return ExplosionEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ControllerVibrationCoef() const;
            Ent::Gen2::Float DistanceReductionStep() const;
            Ent::Gen2::Float Force() const;
            Ent::Gen2::Float ForceReductionByStep() const;
            Ent::Gen2::Float ShakeAttenuationRadius() const;
            Ent::Gen2::CameraShakeData ShakeData() const;
            Ent::Gen2::Float ShakeRadius() const;
            Ent::Gen2::GameEffect Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CameraFreeData : HelperObject<CameraFreeData> // Object
        {
            explicit CameraFreeData(Ent::Property _node): HelperObject<CameraFreeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "CameraFreeData";
            static CameraFreeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CameraFreeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CameraFreeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CameraFreeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CameraFreeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CameraFreeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CameraFreeData makeInstanceOf()
            {
                return CameraFreeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Acceleration() const;
            Ent::Gen2::Float Deceleration() const;
            Ent::Gen2::Float JoyThreshold() const;
            Ent::Gen2::Float MoveBlend() const;
            Ent::Gen2::Float MoveSpeed() const;
            Ent::Gen2::Float MoveSpeedZ() const;
            Ent::Gen2::Float RotateBlendX() const;
            Ent::Gen2::Float RotateBlendY() const;
            Ent::Gen2::Float RotateSpeedX() const;
            Ent::Gen2::Float RotateSpeedY() const;
            Ent::Gen2::Float SpeedMax() const;
            Ent::Gen2::String _comment() const;
        };

        struct CameraEditorData : HelperObject<CameraEditorData> // Object
        {
            explicit CameraEditorData(Ent::Property _node): HelperObject<CameraEditorData>(std::move(_node)) {}
            static constexpr char schemaName[] = "CameraEditorData";
            static CameraEditorData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CameraEditorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CameraEditorData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CameraEditorData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CameraEditorData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CameraEditorData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CameraEditorData makeInstanceOf()
            {
                return CameraEditorData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DistanceMax() const;
            Ent::Gen2::Float DistanceMin() const;
            Ent::Gen2::Float MoveBlend() const;
            Ent::Gen2::Float MoveSpeedAtScreenWidthMax() const;
            Ent::Gen2::Float MoveSpeedAtScreenWidthMin() const;
            Ent::Gen2::Float RotateBlendX() const;
            Ent::Gen2::Float RotateBlendY() const;
            Ent::Gen2::Float RotateSpeedX() const;
            Ent::Gen2::Float RotateSpeedY() const;
            Ent::Gen2::Float ScreenWidthMax() const;
            Ent::Gen2::Float ScreenWidthMin() const;
            Ent::Gen2::Float ZoomBlend() const;
            Ent::Gen2::Float ZoomSpeedAtScreenWidthMax() const;
            Ent::Gen2::Float ZoomSpeedAtScreenWidthMin() const;
            Ent::Gen2::String _comment() const;
        };

        struct CameraManager : HelperObject<CameraManager> // Object
        {
            explicit CameraManager(Ent::Property _node): HelperObject<CameraManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "CameraManager";
            static CameraManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CameraManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CameraManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CameraManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CameraManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CameraManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CameraManager makeInstanceOf()
            {
                return CameraManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ActivateDoF() const;
            Ent::Gen2::Vector2 AnglesLevels() const;
            Ent::Gen2::Bool CameraControlAxisInvertX() const;
            Ent::Gen2::Bool CameraControlAxisInvertY() const;
            Ent::Gen2::Vector2 DistanceFromTopPosition() const;
            Ent::Gen2::CameraEditorData Editor() const;
            Ent::Gen2::CameraFreeData Free() const;
            Ent::Gen2::Vector2 HeightLevel() const;
            Ent::Gen2::Float RotatePitchIn() const;
            Ent::Gen2::Float RotatePitchOut() const;
            Ent::Gen2::Float RotateYawIn() const;
            Ent::Gen2::Float RotateYawOut() const;
            Ent::Gen2::Float SpeedHorizontal() const;
            Ent::Gen2::Float SpeedVertical() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BoneStartPoint : HelperObject<BoneStartPoint> // Object
        {
            explicit BoneStartPoint(Ent::Property _node): HelperObject<BoneStartPoint>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::String val() const;
        };

        struct InteractorGD : HelperObject<InteractorGD> // Object
        {
            explicit InteractorGD(Ent::Property _node): HelperObject<InteractorGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "InteractorGD";
            static InteractorGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InteractorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InteractorGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InteractorGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InteractorGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InteractorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InteractorGD makeInstanceOf()
            {
                return InteractorGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> BeamEffectsNames() const;
            Ent::Gen2::BoneStartPoint BoneStartPoint() const;
            Ent::Gen2::Float MaxBeamRange() const;
            Ent::Gen2::Float RandomSphereCastsAngle() const;
            Ent::Gen2::Int RandomSphereCastsNb() const;
            Ent::Gen2::Float RememberTargetMaxTime() const;
            Ent::Gen2::Float SphereCastRadius() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BoneAnimation : HelperObject<BoneAnimation> // Object
        {
            explicit BoneAnimation(Ent::Property _node): HelperObject<BoneAnimation>(std::move(_node)) {}
            static constexpr char schemaName[] = "BoneAnimation";
            static BoneAnimation load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BoneAnimation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BoneAnimation loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BoneAnimation(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BoneAnimation create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BoneAnimation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BoneAnimation makeInstanceOf()
            {
                return BoneAnimation(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Array<Ent::Gen2::Vector4> Rotations() const;
            Array<Ent::Gen2::Vector3> Scales() const;
            Array<Ent::Gen2::Vector4> Translations() const;
            Ent::Gen2::String _comment() const;
        };

        struct BoidSpeedMaxData : HelperObject<BoidSpeedMaxData> // Object
        {
            explicit BoidSpeedMaxData(Ent::Property _node): HelperObject<BoidSpeedMaxData>(std::move(_node)) {}
            static constexpr char schemaName[] = "BoidSpeedMaxData";
            static BoidSpeedMaxData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BoidSpeedMaxData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BoidSpeedMaxData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BoidSpeedMaxData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BoidSpeedMaxData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BoidSpeedMaxData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BoidSpeedMaxData makeInstanceOf()
            {
                return BoidSpeedMaxData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Duration() const;
            Ent::Gen2::Float SpeedMax() const;
            Ent::Gen2::String _comment() const;
        };

        struct BoidGoalMode : EnumPropHelper<BoidGoalMode, BoidGoalModeEnum> // Enum
        {
            using Enum = BoidGoalModeEnum;
            using PropHelper<BoidGoalMode, Enum>::operator=;
            explicit BoidGoalMode(Ent::Property _node): EnumPropHelper<BoidGoalMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "BoidGoalMode";
            static constexpr char const* enumToString[] = {
                "none",
                "parent",
                "home",
                "BoidGoalMode_COUNT",
            };
        };
        inline char const* toString(BoidGoalModeEnum value)
        {
            if(size_t(value) >= std::size(BoidGoalMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BoidGoalMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(BoidGoalModeEnum value) { return toString(value); }
        template<> inline BoidGoalModeEnum strToEnum<BoidGoalModeEnum>(char const* value)
        {
            return static_cast<BoidGoalModeEnum>(details::indexInEnum(value, BoidGoalMode::enumToString));
        }

        struct BlendShapeAnimation : HelperObject<BlendShapeAnimation> // Object
        {
            explicit BlendShapeAnimation(Ent::Property _node): HelperObject<BlendShapeAnimation>(std::move(_node)) {}
            static constexpr char schemaName[] = "BlendShapeAnimation";
            static BlendShapeAnimation load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BlendShapeAnimation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BlendShapeAnimation loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BlendShapeAnimation(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BlendShapeAnimation create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BlendShapeAnimation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BlendShapeAnimation makeInstanceOf()
            {
                return BlendShapeAnimation(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            PrimArray<Ent::Gen2::Float> Weights() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationIntermediateFormat : HelperObject<AnimationIntermediateFormat> // Object
        {
            explicit AnimationIntermediateFormat(Ent::Property _node): HelperObject<AnimationIntermediateFormat>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationIntermediateFormat";
            static AnimationIntermediateFormat load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationIntermediateFormat(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationIntermediateFormat loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationIntermediateFormat(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationIntermediateFormat create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationIntermediateFormat(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationIntermediateFormat makeInstanceOf()
            {
                return AnimationIntermediateFormat(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::BlendShapeAnimation> BlendShapeAnimations() const;
            Array<Ent::Gen2::BoneAnimation> BoneAnimations() const;
            Ent::Gen2::Int EndFrame() const;
            Ent::Gen2::Float EndTime() const;
            Ent::Gen2::Int NumFrames() const;
            Ent::Gen2::Float Period() const;
            Ent::Gen2::Int StartFrame() const;
            Ent::Gen2::Float StartTime() const;
            Ent::Gen2::String _comment() const;
        };

        struct BiteData : HelperObject<BiteData> // Object
        {
            explicit BiteData(Ent::Property _node): HelperObject<BiteData>(std::move(_node)) {}
            static constexpr char schemaName[] = "BiteData";
            static BiteData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BiteData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BiteData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BiteData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BiteData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BiteData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BiteData makeInstanceOf()
            {
                return BiteData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool CanBiteBiped() const;
            Ent::Gen2::Bool CanBiteFriends() const;
            Ent::Gen2::Bool CheckHotspotOrientation() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool bezierMove() const;
            Ent::Gen2::Float biteDamagePerSec() const;
            Ent::Gen2::Float biteDefenseDamages() const;
            Ent::Gen2::Float biteDuration() const;
            Ent::Gen2::Float biteMaxRange() const;
        };

        struct BiomeSoundBank_sBiomeEnv : HelperObject<BiomeSoundBank_sBiomeEnv> // Object
        {
            explicit BiomeSoundBank_sBiomeEnv(Ent::Property _node): HelperObject<BiomeSoundBank_sBiomeEnv>(std::move(_node)) {}
            static constexpr char schemaName[] = "BiomeSoundBank::sBiomeEnv";
            static BiomeSoundBank_sBiomeEnv load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BiomeSoundBank_sBiomeEnv(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BiomeSoundBank_sBiomeEnv loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BiomeSoundBank_sBiomeEnv(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BiomeSoundBank_sBiomeEnv create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BiomeSoundBank_sBiomeEnv(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BiomeSoundBank_sBiomeEnv makeInstanceOf()
            {
                return BiomeSoundBank_sBiomeEnv(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Ent::Gen2::Float Spread() const;
            Ent::Gen2::String _comment() const;
        };

        struct BiomeSoundBank_sBiomeSound : HelperObject<BiomeSoundBank_sBiomeSound> // Object
        {
            explicit BiomeSoundBank_sBiomeSound(Ent::Property _node): HelperObject<BiomeSoundBank_sBiomeSound>(std::move(_node)) {}
            static constexpr char schemaName[] = "BiomeSoundBank::sBiomeSound";
            static BiomeSoundBank_sBiomeSound load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BiomeSoundBank_sBiomeSound(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BiomeSoundBank_sBiomeSound loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BiomeSoundBank_sBiomeSound(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BiomeSoundBank_sBiomeSound create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BiomeSoundBank_sBiomeSound(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BiomeSoundBank_sBiomeSound makeInstanceOf()
            {
                return BiomeSoundBank_sBiomeSound(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String AuxSend() const;
            Ent::Gen2::String Bank() const;
            Ent::Gen2::String Event() const;
            Ent::Gen2::String Event_Stop() const;
            Ent::Gen2::String MainState() const;
            Ent::Gen2::BiomeSoundBank_sBiomeEnv Super() const;
            Ent::Gen2::String Tag() const;
            Ent::Gen2::String Volume() const;
            Ent::Gen2::String _comment() const;
        };

        struct BiomeSoundBank_sBiomeSFX : HelperObject<BiomeSoundBank_sBiomeSFX> // Object
        {
            explicit BiomeSoundBank_sBiomeSFX(Ent::Property _node): HelperObject<BiomeSoundBank_sBiomeSFX>(std::move(_node)) {}
            static constexpr char schemaName[] = "BiomeSoundBank::sBiomeSFX";
            static BiomeSoundBank_sBiomeSFX load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BiomeSoundBank_sBiomeSFX(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BiomeSoundBank_sBiomeSFX loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BiomeSoundBank_sBiomeSFX(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BiomeSoundBank_sBiomeSFX create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BiomeSoundBank_sBiomeSFX(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BiomeSoundBank_sBiomeSFX makeInstanceOf()
            {
                return BiomeSoundBank_sBiomeSFX(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Rtpc() const;
            Ent::Gen2::String SFX() const;
            Ent::Gen2::BiomeSoundBank_sBiomeEnv Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BiomeSoundBank : HelperObject<BiomeSoundBank> // Object
        {
            explicit BiomeSoundBank(Ent::Property _node): HelperObject<BiomeSoundBank>(std::move(_node)) {}
            static constexpr char schemaName[] = "BiomeSoundBank";
            static BiomeSoundBank load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BiomeSoundBank(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BiomeSoundBank loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BiomeSoundBank(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BiomeSoundBank create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BiomeSoundBank(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BiomeSoundBank makeInstanceOf()
            {
                return BiomeSoundBank(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::BiomeSoundBank_sBiomeSFX> BiomeSFX() const;
            Array<Ent::Gen2::BiomeSoundBank_sBiomeSound> BiomeSounds() const;
            Ent::Gen2::String DefaultBiomeName() const;
            Ent::Gen2::String _comment() const;
        };

        struct BillboardRenderingType : EnumPropHelper<BillboardRenderingType, BillboardRenderingTypeEnum> // Enum
        {
            using Enum = BillboardRenderingTypeEnum;
            using PropHelper<BillboardRenderingType, Enum>::operator=;
            explicit BillboardRenderingType(Ent::Property _node): EnumPropHelper<BillboardRenderingType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "BillboardRenderingType";
            static constexpr char const* enumToString[] = {
                "Cross",
                "CameraFacingQuad",
                "Mesh",
                "BillboardRenderingType_COUNT",
            };
        };
        inline char const* toString(BillboardRenderingTypeEnum value)
        {
            if(size_t(value) >= std::size(BillboardRenderingType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BillboardRenderingType::enumToString[size_t(value)];
        }
        inline char const* toInternal(BillboardRenderingTypeEnum value) { return toString(value); }
        template<> inline BillboardRenderingTypeEnum strToEnum<BillboardRenderingTypeEnum>(char const* value)
        {
            return static_cast<BillboardRenderingTypeEnum>(details::indexInEnum(value, BillboardRenderingType::enumToString));
        }

        struct BillboardRenderingSides : EnumPropHelper<BillboardRenderingSides, BillboardRenderingSidesEnum> // Enum
        {
            using Enum = BillboardRenderingSidesEnum;
            using PropHelper<BillboardRenderingSides, Enum>::operator=;
            explicit BillboardRenderingSides(Ent::Property _node): EnumPropHelper<BillboardRenderingSides, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "BillboardRenderingSides";
            static constexpr char const* enumToString[] = {
                "SideA",
                "SideB",
                "BothSides",
                "BillboardRenderingSides_COUNT",
            };
        };
        inline char const* toString(BillboardRenderingSidesEnum value)
        {
            if(size_t(value) >= std::size(BillboardRenderingSides::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BillboardRenderingSides::enumToString[size_t(value)];
        }
        inline char const* toInternal(BillboardRenderingSidesEnum value) { return toString(value); }
        template<> inline BillboardRenderingSidesEnum strToEnum<BillboardRenderingSidesEnum>(char const* value)
        {
            return static_cast<BillboardRenderingSidesEnum>(details::indexInEnum(value, BillboardRenderingSides::enumToString));
        }

        struct BillboardRenderingAttribute : EnumPropHelper<BillboardRenderingAttribute, BillboardRenderingAttributeEnum> // Enum
        {
            using Enum = BillboardRenderingAttributeEnum;
            using PropHelper<BillboardRenderingAttribute, Enum>::operator=;
            explicit BillboardRenderingAttribute(Ent::Property _node): EnumPropHelper<BillboardRenderingAttribute, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "BillboardRenderingAttribute";
            static constexpr char const* enumToString[] = {
                "Horizontal",
                "Vertical",
                "Frontal",
                "BillboardRenderingAttribute_COUNT",
            };
        };
        inline char const* toString(BillboardRenderingAttributeEnum value)
        {
            if(size_t(value) >= std::size(BillboardRenderingAttribute::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BillboardRenderingAttribute::enumToString[size_t(value)];
        }
        inline char const* toInternal(BillboardRenderingAttributeEnum value) { return toString(value); }
        template<> inline BillboardRenderingAttributeEnum strToEnum<BillboardRenderingAttributeEnum>(char const* value)
        {
            return static_cast<BillboardRenderingAttributeEnum>(details::indexInEnum(value, BillboardRenderingAttribute::enumToString));
        }

        struct BillboardCameraFacingQuadType : EnumPropHelper<BillboardCameraFacingQuadType, BillboardCameraFacingQuadTypeEnum> // Enum
        {
            using Enum = BillboardCameraFacingQuadTypeEnum;
            using PropHelper<BillboardCameraFacingQuadType, Enum>::operator=;
            explicit BillboardCameraFacingQuadType(Ent::Property _node): EnumPropHelper<BillboardCameraFacingQuadType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "BillboardCameraFacingQuadType";
            static constexpr char const* enumToString[] = {
                "AroundAxis",
                "AroundCenter",
                "NotFacingCamera",
                "BGELikeShaft",
                "BillboardCameraFacingQuadType_COUNT",
            };
        };
        inline char const* toString(BillboardCameraFacingQuadTypeEnum value)
        {
            if(size_t(value) >= std::size(BillboardCameraFacingQuadType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BillboardCameraFacingQuadType::enumToString[size_t(value)];
        }
        inline char const* toInternal(BillboardCameraFacingQuadTypeEnum value) { return toString(value); }
        template<> inline BillboardCameraFacingQuadTypeEnum strToEnum<BillboardCameraFacingQuadTypeEnum>(char const* value)
        {
            return static_cast<BillboardCameraFacingQuadTypeEnum>(details::indexInEnum(value, BillboardCameraFacingQuadType::enumToString));
        }

        struct BillboardRendererProperties : HelperObject<BillboardRendererProperties> // Object
        {
            explicit BillboardRendererProperties(Ent::Property _node): HelperObject<BillboardRendererProperties>(std::move(_node)) {}
            static constexpr char schemaName[] = "BillboardRendererProperties";
            static BillboardRendererProperties load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BillboardRendererProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BillboardRendererProperties loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BillboardRendererProperties(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BillboardRendererProperties create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BillboardRendererProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BillboardRendererProperties makeInstanceOf()
            {
                return BillboardRendererProperties(getProperty().makeInstanceOf());
            }
            Ent::Gen2::BillboardRenderingAttribute Attribute() const;
            Ent::Gen2::BillboardCameraFacingQuadType BillboardType() const;
            PrimArray<Ent::Gen2::String> ExtraMaterialPathArray() const;
            Ent::Gen2::String MaterialPath() const;
            Ent::Gen2::Int NbMeshInstances() const;
            Ent::Gen2::Int NbQuads() const;
            Ent::Gen2::Vector3 Offset() const;
            Ent::Gen2::BillboardRenderingSides Sides() const;
            Ent::Gen2::String VisualPath() const;
            Ent::Gen2::String _comment() const;
        };

        struct BillboardProperties : HelperObject<BillboardProperties> // Object
        {
            explicit BillboardProperties(Ent::Property _node): HelperObject<BillboardProperties>(std::move(_node)) {}
            static constexpr char schemaName[] = "BillboardProperties";
            static BillboardProperties load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BillboardProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BillboardProperties loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BillboardProperties(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BillboardProperties create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BillboardProperties(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BillboardProperties makeInstanceOf()
            {
                return BillboardProperties(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Duration() const;
            Ent::Gen2::Bool Looping() const;
            Ent::Gen2::Float Luminosity() const;
            Ent::Gen2::String LuminosityCurvePath() const;
            Ent::Gen2::Float LuminosityVariability() const;
            Array<Ent::Gen2::BillboardRendererProperties> RenderingProperties() const;
            Ent::Gen2::BillboardRenderingType RenderingType() const;
            Ent::Gen2::Vector3 Size() const;
            Ent::Gen2::String SizeCurvePath() const;
            Ent::Gen2::Vector3 SizeVariability() const;
            Ent::Gen2::String _comment() const;
        };

        struct BehaviorTypedValue : HelperObject<BehaviorTypedValue> // Object
        {
            explicit BehaviorTypedValue(Ent::Property _node): HelperObject<BehaviorTypedValue>(std::move(_node)) {}
            static constexpr char schemaName[] = "BehaviorTypedValue";
            static BehaviorTypedValue load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BehaviorTypedValue(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BehaviorTypedValue loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BehaviorTypedValue(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BehaviorTypedValue create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BehaviorTypedValue(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BehaviorTypedValue makeInstanceOf()
            {
                return BehaviorTypedValue(getProperty().makeInstanceOf());
            }
            Ent::Gen2::variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_ Value() const;
            Ent::Gen2::String _comment() const;
        };

        struct BehaviorScriptData : HelperObject<BehaviorScriptData> // Object
        {
            explicit BehaviorScriptData(Ent::Property _node): HelperObject<BehaviorScriptData>(std::move(_node)) {}
            static constexpr char schemaName[] = "BehaviorScriptData";
            static BehaviorScriptData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BehaviorScriptData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BehaviorScriptData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BehaviorScriptData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BehaviorScriptData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BehaviorScriptData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BehaviorScriptData makeInstanceOf()
            {
                return BehaviorScriptData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Map<char const*, Ent::Gen2::BehaviorTypedValue> DataMap() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Int attackAggressivityDecrease() const;
            Ent::Gen2::Int hardFeelingsFriendlyHitCount() const;
            Ent::Gen2::Int hardFeelingsNotFriendlyHitCount() const;
            Ent::Gen2::Int panicAggressivityDecrease() const;
            Array<Ent::Gen2::ShootSequenceData> shootSequence() const;
        };

        struct CreatureAIGD : HelperObject<CreatureAIGD> // Object
        {
            explicit CreatureAIGD(Ent::Property _node): HelperObject<CreatureAIGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureAIGD";
            static CreatureAIGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureAIGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureAIGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureAIGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureAIGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureAIGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureAIGD makeInstanceOf()
            {
                return CreatureAIGD(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> BehaviorModifiersTags() const;
            Ent::Gen2::String BehaviorPath() const;
            Ent::Gen2::String BehaviorState() const;
            Ent::Gen2::Bool CanBeMaster() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::BehaviorScriptData behaviorScriptData() const;
            Ent::Gen2::Float m_oblivionTimerAfterSuspicious() const;
            Ent::Gen2::Float m_oblivionTimerBeforeSuspicious() const;
            Ent::Gen2::Float m_timerBeforeCertain() const;
            Ent::Gen2::Float m_timerBeforeSuspicious() const;
        };

        struct BeamStaffMode : EnumPropHelper<BeamStaffMode, BeamStaffModeEnum> // Enum
        {
            using Enum = BeamStaffModeEnum;
            using PropHelper<BeamStaffMode, Enum>::operator=;
            explicit BeamStaffMode(Ent::Property _node): EnumPropHelper<BeamStaffMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "BeamStaffMode";
            static constexpr char const* enumToString[] = {
                "Off",
                "Searching",
                "Creature",
                "InteractingGPE",
                "Item",
                "PickUp",
                "Hatching",
                "SetRespawnPlaceAsCheckpoint",
                "SetSavePoint",
                "EnableSpiritShrine",
                "Any",
                "BeamStaffMode_COUNT",
            };
        };
        inline char const* toString(BeamStaffModeEnum value)
        {
            if(size_t(value) >= std::size(BeamStaffMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return BeamStaffMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(BeamStaffModeEnum value) { return toString(value); }
        template<> inline BeamStaffModeEnum strToEnum<BeamStaffModeEnum>(char const* value)
        {
            return static_cast<BeamStaffModeEnum>(details::indexInEnum(value, BeamStaffMode::enumToString));
        }

        struct BeamTargetGD : HelperObject<BeamTargetGD> // Object
        {
            explicit BeamTargetGD(Ent::Property _node): HelperObject<BeamTargetGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "BeamTargetGD";
            static BeamTargetGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BeamTargetGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BeamTargetGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BeamTargetGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BeamTargetGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BeamTargetGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BeamTargetGD makeInstanceOf()
            {
                return BeamTargetGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String EventTriggered() const;
            Ent::Gen2::HotSpotType HotspotType() const;
            Ent::Gen2::Float InteractMaxDistance() const;
            Ent::Gen2::Float InteractionRadius() const;
            Ent::Gen2::BeamStaffMode Mode() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct BaseParameters : HelperObject<BaseParameters> // Object
        {
            explicit BaseParameters(Ent::Property _node): HelperObject<BaseParameters>(std::move(_node)) {}
            static constexpr char schemaName[] = "BaseParameters";
            static BaseParameters load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BaseParameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BaseParameters loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BaseParameters(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BaseParameters create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BaseParameters(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BaseParameters makeInstanceOf()
            {
                return BaseParameters(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float additionalSpeedRequired() const;
            Ent::Gen2::Vector3 direction() const;
            Ent::Gen2::Int flags() const;
            Ent::Gen2::Float force() const;
            Ent::Gen2::Position position() const;
            Ent::Gen2::Bool shouldIgnoreSourceContactsDuringHit() const;
            Ent::Gen2::Size size() const;
            Ent::Gen2::HitStyle style() const;
            Ent::Gen2::HitType type() const;
        };

        struct Hit : HelperObject<Hit> // Object
        {
            explicit Hit(Ent::Property _node): HelperObject<Hit>(std::move(_node)) {}
            static constexpr char schemaName[] = "Hit";
            static Hit load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Hit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Hit loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Hit(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Hit create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Hit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Hit makeInstanceOf()
            {
                return Hit(getProperty().makeInstanceOf());
            }
            Ent::Gen2::BaseParameters BaseParameters() const;
            Ent::Gen2::DamagesInstant DamageInstantParameters() const;
            Ent::Gen2::TargetCollision TargetCollision() const;
            Ent::Gen2::String _comment() const;
        };

        struct AutoRotationType : EnumPropHelper<AutoRotationType, AutoRotationTypeEnum> // Enum
        {
            using Enum = AutoRotationTypeEnum;
            using PropHelper<AutoRotationType, Enum>::operator=;
            explicit AutoRotationType(Ent::Property _node): EnumPropHelper<AutoRotationType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AutoRotationType";
            static constexpr char const* enumToString[] = {
                "None",
                "2D",
                "3D",
                "AutoRotationType_COUNT",
            };
        };
        inline char const* toString(AutoRotationTypeEnum value)
        {
            if(size_t(value) >= std::size(AutoRotationType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AutoRotationType::enumToString[size_t(value)];
        }
        inline char const* toInternal(AutoRotationTypeEnum value) { return toString(value); }
        template<> inline AutoRotationTypeEnum strToEnum<AutoRotationTypeEnum>(char const* value)
        {
            return static_cast<AutoRotationTypeEnum>(details::indexInEnum(value, AutoRotationType::enumToString));
        }

        struct AttitudeMode : EnumPropHelper<AttitudeMode, AttitudeModeEnum> // Enum
        {
            using Enum = AttitudeModeEnum;
            using PropHelper<AttitudeMode, Enum>::operator=;
            explicit AttitudeMode(Ent::Property _node): EnumPropHelper<AttitudeMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttitudeMode";
            static constexpr char const* enumToString[] = {
                "normal",
                "injured",
                "dead",
                "aggressive",
                "groggy",
                "bitten",
                "charge",
                "AttitudeMode_COUNT",
            };
        };
        inline char const* toString(AttitudeModeEnum value)
        {
            if(size_t(value) >= std::size(AttitudeMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AttitudeMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(AttitudeModeEnum value) { return toString(value); }
        template<> inline AttitudeModeEnum strToEnum<AttitudeModeEnum>(char const* value)
        {
            return static_cast<AttitudeModeEnum>(details::indexInEnum(value, AttitudeMode::enumToString));
        }

        struct AttackType : EnumPropHelper<AttackType, AttackTypeEnum> // Enum
        {
            using Enum = AttackTypeEnum;
            using PropHelper<AttackType, Enum>::operator=;
            explicit AttackType(Ent::Property _node): EnumPropHelper<AttackType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackType";
            static constexpr char const* enumToString[] = {
                "Normal",
                "Backward",
                "Charged",
                "JumpOnto",
                "Bite",
                "Stomp",
                "Dive",
                "AttackType_COUNT",
            };
        };
        inline char const* toString(AttackTypeEnum value)
        {
            if(size_t(value) >= std::size(AttackType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AttackType::enumToString[size_t(value)];
        }
        inline char const* toInternal(AttackTypeEnum value) { return toString(value); }
        template<> inline AttackTypeEnum strToEnum<AttackTypeEnum>(char const* value)
        {
            return static_cast<AttackTypeEnum>(details::indexInEnum(value, AttackType::enumToString));
        }

        struct AttackPositionRetimingData_SpecieRetimingCoeff : HelperObject<AttackPositionRetimingData_SpecieRetimingCoeff> // Object
        {
            explicit AttackPositionRetimingData_SpecieRetimingCoeff(Ent::Property _node): HelperObject<AttackPositionRetimingData_SpecieRetimingCoeff>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackPositionRetimingData::SpecieRetimingCoeff";
            static AttackPositionRetimingData_SpecieRetimingCoeff load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackPositionRetimingData_SpecieRetimingCoeff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackPositionRetimingData_SpecieRetimingCoeff loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackPositionRetimingData_SpecieRetimingCoeff(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackPositionRetimingData_SpecieRetimingCoeff create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackPositionRetimingData_SpecieRetimingCoeff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackPositionRetimingData_SpecieRetimingCoeff makeInstanceOf()
            {
                return AttackPositionRetimingData_SpecieRetimingCoeff(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float defaultCoeff() const;
            Ent::Gen2::Float masterCoeff() const;
        };

        struct AttackPositionRetimingData : HelperObject<AttackPositionRetimingData> // Object
        {
            explicit AttackPositionRetimingData(Ent::Property _node): HelperObject<AttackPositionRetimingData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackPositionRetimingData";
            static AttackPositionRetimingData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackPositionRetimingData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackPositionRetimingData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackPositionRetimingData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackPositionRetimingData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackPositionRetimingData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackPositionRetimingData makeInstanceOf()
            {
                return AttackPositionRetimingData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float animTranslationCoeff() const;
            Ent::Gen2::Map<SpecieEnum, Ent::Gen2::AttackPositionRetimingData_SpecieRetimingCoeff> backwardRetimingCoeffBySpecie() const;
            Ent::Gen2::Float lengthMax() const;
            Ent::Gen2::Float lengthMin() const;
            Ent::Gen2::Float spherecastRadiusCoeff() const;
        };

        struct AttackPhysicsForceData : HelperObject<AttackPhysicsForceData> // Object
        {
            explicit AttackPhysicsForceData(Ent::Property _node): HelperObject<AttackPhysicsForceData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackPhysicsForceData";
            static AttackPhysicsForceData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackPhysicsForceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackPhysicsForceData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackPhysicsForceData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackPhysicsForceData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackPhysicsForceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackPhysicsForceData makeInstanceOf()
            {
                return AttackPhysicsForceData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float amount() const;
        };

        struct AttackImpactData : HelperObject<AttackImpactData> // Object
        {
            explicit AttackImpactData(Ent::Property _node): HelperObject<AttackImpactData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackImpactData";
            static AttackImpactData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackImpactData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackImpactData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackImpactData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackImpactData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackImpactData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackImpactData makeInstanceOf()
            {
                return AttackImpactData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float amount() const;
        };

        struct AttackData : HelperObject<AttackData> // Object
        {
            explicit AttackData(Ent::Property _node): HelperObject<AttackData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackData";
            static AttackData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackData makeInstanceOf()
            {
                return AttackData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AttackType DefaultAttackType() const;
            Ent::Gen2::String _comment() const;
        };

        struct AttackDamageData : HelperObject<AttackDamageData> // Object
        {
            explicit AttackDamageData(Ent::Property _node): HelperObject<AttackDamageData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackDamageData";
            static AttackDamageData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackDamageData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackDamageData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackDamageData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackDamageData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackDamageData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackDamageData makeInstanceOf()
            {
                return AttackDamageData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float amount() const;
        };

        struct GameAttackData : HelperObject<GameAttackData> // Object
        {
            explicit GameAttackData(Ent::Property _node): HelperObject<GameAttackData>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameAttackData";
            static GameAttackData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameAttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameAttackData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameAttackData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameAttackData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameAttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameAttackData makeInstanceOf()
            {
                return GameAttackData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AggressiveDuration() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::CameraShakeData> AttackCameraShakeData() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::AttackDamageData> AttackDamageData() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::AttackImpactData> AttackImpactData() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::AttackPhysicsForceData> AttackPhysicsForceData() const;
            Ent::Gen2::ScaleConverter DashTargetImpulse() const;
            Ent::Gen2::Float ShapeAfterGlowTime() const;
            Ent::Gen2::Float ShapeAnticipationTime() const;
            Ent::Gen2::Float ShapePassivedAnticipationTime() const;
            Ent::Gen2::Float ShapeRadiusScale() const;
            Ent::Gen2::Float SpeedLockedDelayAfterDodge() const;
            Ent::Gen2::Bool UseMountAttack() const;
            Ent::Gen2::String _comment() const;
        };

        struct GameManager : HelperObject<GameManager> // Object
        {
            explicit GameManager(Ent::Property _node): HelperObject<GameManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "GameManager";
            static GameManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GameManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GameManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GameManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GameManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GameManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GameManager makeInstanceOf()
            {
                return GameManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ActionAttackValidityTime() const;
            Ent::Gen2::GameAttackData AttackData() const;
            Ent::Gen2::FreezeData BeamFreezeData() const;
            Ent::Gen2::GameBeamSnapData BeamSnapData() const;
            Ent::Gen2::GameBiteData BiteData() const;
            Ent::Gen2::Map<char const*, Ent::Gen2::Float> CameraParamsSmoothData() const;
            Ent::Gen2::ConstrainedInputData ConstrainedInputData() const;
            Ent::Gen2::GameDeathData DeathData() const;
            Ent::Gen2::Float DefaultCameraParamsSmoothValue() const;
            Ent::Gen2::Int DefaultGamePadID() const;
            Ent::Gen2::GameEdgeData EdgeData() const;
            Ent::Gen2::Bool EnableSplashScreen() const;
            Ent::Gen2::GameFallData FallData() const;
            Ent::Gen2::GameFeetCatchUpData FeetCatchUpData() const;
            Ent::Gen2::GameFluidData FluidData() const;
            Ent::Gen2::GameFlyData FlyData() const;
            Ent::Gen2::Float GamePadAimHysteresis() const;
            Ent::Gen2::Float GamePadAimThreshold() const;
            Ent::Gen2::GamePadNavigationData GamePadNavigationData() const;
            Ent::Gen2::Float GamePadRumbleScale() const;
            Ent::Gen2::GamePadSpeedBehaviorData GamePadSpeedBehaviorData() const;
            Ent::Gen2::Float GameSpawnFadeInDelay() const;
            Ent::Gen2::Float GameSpawnFadeInDuration() const;
            Ent::Gen2::CameraShakeData HitShakeData() const;
            Array<Ent::Gen2::GameImmersionData> ImmersionData() const;
            Ent::Gen2::ScaleConverter InputCollisionAnticipationLength() const;
            Ent::Gen2::Float InteractionDisplayHysteresis() const;
            Ent::Gen2::Float InteractionPressDuration() const;
            Ent::Gen2::Float InteractionScreenViewDistance() const;
            Ent::Gen2::String IntroVideo() const;
            Ent::Gen2::GameLODData LODData() const;
            Ent::Gen2::GameImmersionData LavaImmersionData() const;
            Ent::Gen2::Float LockTargetMaxDistance() const;
            Ent::Gen2::Float LockTargetScreenViewDistance() const;
            Ent::Gen2::Float Long_Press_Duration() const;
            Ent::Gen2::Bool MountOnlyOnFollower() const;
            Ent::Gen2::String NewGameVideo() const;
            Ent::Gen2::String NewGameVideoMusicStart() const;
            Ent::Gen2::String NewGameVideoMusicStop() const;
            Ent::Gen2::GameParryData ParryData() const;
            Ent::Gen2::GamePropelData PropelData() const;
            Ent::Gen2::GameRespawnData RespawnData() const;
            Ent::Gen2::GameReviveData ReviveData() const;
            Ent::Gen2::GameShamanVisionData ShamanVisionData() const;
            Ent::Gen2::GameSlopeData SlopeData() const;
            Ent::Gen2::GameSnapData SnapData() const;
            Ent::Gen2::GameSoftCollisionData SoftCollisionData() const;
            Ent::Gen2::String Sound_TopView_Start() const;
            Ent::Gen2::String Sound_TopView_Stop() const;
            Ent::Gen2::Map<SizeEnum, Ent::Gen2::Float> SpeedMaxInUndergroundCavity() const;
            Ent::Gen2::String SplashScreenSoundStart() const;
            Ent::Gen2::String SplashScreenSoundStop() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::GameImmersionData WaterImmersionData() const;
            Ent::Gen2::String _comment() const;
        };

        struct AreaNavigation : HelperObject<AreaNavigation> // Object
        {
            explicit AreaNavigation(Ent::Property _node): HelperObject<AreaNavigation>(std::move(_node)) {}
            static constexpr char schemaName[] = "AreaNavigation";
            static AreaNavigation load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AreaNavigation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AreaNavigation loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AreaNavigation(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AreaNavigation create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AreaNavigation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AreaNavigation makeInstanceOf()
            {
                return AreaNavigation(getProperty().makeInstanceOf());
            }
            Ent::Gen2::CapabilitiesAndTags CapabilitiesAndTags() const;
            Ent::Gen2::Float GroundAreaCost() const;
            Ent::Gen2::Float WaterAreaCost() const;
            Ent::Gen2::String _comment() const;
        };

        struct PathFinderGD : HelperObject<PathFinderGD> // Object
        {
            explicit PathFinderGD(Ent::Property _node): HelperObject<PathFinderGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "PathFinderGD";
            static PathFinderGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PathFinderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PathFinderGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PathFinderGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PathFinderGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PathFinderGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PathFinderGD makeInstanceOf()
            {
                return PathFinderGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AreaNavigation NavigationCapacities() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String UsedNavMeshName() const;
            Ent::Gen2::String _comment() const;
        };

        struct Archetype : EnumPropHelper<Archetype, ArchetypeEnum> // Enum
        {
            using Enum = ArchetypeEnum;
            using PropHelper<Archetype, Enum>::operator=;
            explicit Archetype(Ent::Property _node): EnumPropHelper<Archetype, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "Archetype";
            static constexpr char const* enumToString[] = {
                "flying",
                "swimming",
                "quadripede",
                "bipede",
                "item",
                "structure",
                "activator",
                "Archetype_COUNT",
            };
        };
        inline char const* toString(ArchetypeEnum value)
        {
            if(size_t(value) >= std::size(Archetype::enumToString))
                throw std::runtime_error("Wrong enum value");
            return Archetype::enumToString[size_t(value)];
        }
        inline char const* toInternal(ArchetypeEnum value) { return toString(value); }
        template<> inline ArchetypeEnum strToEnum<ArchetypeEnum>(char const* value)
        {
            return static_cast<ArchetypeEnum>(details::indexInEnum(value, Archetype::enumToString));
        }

        struct AnimationTreeConstraintsGD_GrowData : HelperObject<AnimationTreeConstraintsGD_GrowData> // Object
        {
            explicit AnimationTreeConstraintsGD_GrowData(Ent::Property _node): HelperObject<AnimationTreeConstraintsGD_GrowData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD::GrowData";
            static AnimationTreeConstraintsGD_GrowData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationTreeConstraintsGD_GrowData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationTreeConstraintsGD_GrowData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationTreeConstraintsGD_GrowData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationTreeConstraintsGD_GrowData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationTreeConstraintsGD_GrowData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationTreeConstraintsGD_GrowData makeInstanceOf()
            {
                return AnimationTreeConstraintsGD_GrowData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DegrowShakeForce() const;
            Ent::Gen2::Float GrowShakeForce() const;
            Ent::Gen2::Float GrowSpeed() const;
            Ent::Gen2::GrowingState GrowingState() const;
            Ent::Gen2::ProgressSoundEventData ProgressSoundEventData() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationTreeConstraintsGD_ForceData : HelperObject<AnimationTreeConstraintsGD_ForceData> // Object
        {
            explicit AnimationTreeConstraintsGD_ForceData(Ent::Property _node): HelperObject<AnimationTreeConstraintsGD_ForceData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD::ForceData";
            static AnimationTreeConstraintsGD_ForceData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationTreeConstraintsGD_ForceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationTreeConstraintsGD_ForceData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationTreeConstraintsGD_ForceData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationTreeConstraintsGD_ForceData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationTreeConstraintsGD_ForceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationTreeConstraintsGD_ForceData makeInstanceOf()
            {
                return AnimationTreeConstraintsGD_ForceData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AutoSetupForceInfluence() const;
            Ent::Gen2::Int AutoSetupForceInfluenceLevelStart() const;
            Ent::Gen2::Int AutoSetupForceInfluenceLevelStop() const;
            Ent::Gen2::Float AutoSetupForceInfluenceValueAfterStop() const;
            Ent::Gen2::Float AutoSetupForceInfluenceValueBeforeStart() const;
            Ent::Gen2::Float AutoSetupForceInfluenceValueStart() const;
            Ent::Gen2::Float AutoSetupForceInfluenceValueStop() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationTreeConstraintsGD_BendData : HelperObject<AnimationTreeConstraintsGD_BendData> // Object
        {
            explicit AnimationTreeConstraintsGD_BendData(Ent::Property _node): HelperObject<AnimationTreeConstraintsGD_BendData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD::BendData";
            static AnimationTreeConstraintsGD_BendData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationTreeConstraintsGD_BendData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationTreeConstraintsGD_BendData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationTreeConstraintsGD_BendData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationTreeConstraintsGD_BendData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationTreeConstraintsGD_BendData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationTreeConstraintsGD_BendData makeInstanceOf()
            {
                return AnimationTreeConstraintsGD_BendData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AcceptDrag() const;
            Ent::Gen2::Bool AcceptDragOnBaseBone() const;
            Ent::Gen2::Float AttractDuration() const;
            Ent::Gen2::Float DragOnBaseBoneAttractionStartFactor() const;
            Ent::Gen2::Int MaxBendAngleFirstBone() const;
            Ent::Gen2::Float MaxBendAngleValueAtFirstBone() const;
            Ent::Gen2::Float MaxBendAngleValueAtLastBone() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationTreeConstraintsGD : HelperObject<AnimationTreeConstraintsGD> // Object
        {
            explicit AnimationTreeConstraintsGD(Ent::Property _node): HelperObject<AnimationTreeConstraintsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD";
            static AnimationTreeConstraintsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationTreeConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationTreeConstraintsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationTreeConstraintsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationTreeConstraintsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationTreeConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationTreeConstraintsGD makeInstanceOf()
            {
                return AnimationTreeConstraintsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AnimationTreeConstraintsGD_BendData BendData() const;
            Ent::Gen2::AnimationTreeConstraintsGD_ForceData ForceData() const;
            Ent::Gen2::AnimationTreeConstraintsGD_GrowData GrowData() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationSpace : EnumPropHelper<AnimationSpace, AnimationSpaceEnum> // Enum
        {
            using Enum = AnimationSpaceEnum;
            using PropHelper<AnimationSpace, Enum>::operator=;
            explicit AnimationSpace(Ent::Property _node): EnumPropHelper<AnimationSpace, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationSpace";
            static constexpr char const* enumToString[] = {
                "bonespace",
                "rootspace",
            };
        };
        inline char const* toString(AnimationSpaceEnum value)
        {
            if(size_t(value) >= std::size(AnimationSpace::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimationSpace::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimationSpaceEnum value) { return toString(value); }
        template<> inline AnimationSpaceEnum strToEnum<AnimationSpaceEnum>(char const* value)
        {
            return static_cast<AnimationSpaceEnum>(details::indexInEnum(value, AnimationSpace::enumToString));
        }

        struct AnimationModelComponentInput_StyleMode : HelperObject<AnimationModelComponentInput_StyleMode> // Object
        {
            explicit AnimationModelComponentInput_StyleMode(Ent::Property _node): HelperObject<AnimationModelComponentInput_StyleMode>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::StyleMode val() const;
        };

        struct AnimationModelComponentInput_SpeedMode : HelperObject<AnimationModelComponentInput_SpeedMode> // Object
        {
            explicit AnimationModelComponentInput_SpeedMode(Ent::Property _node): HelperObject<AnimationModelComponentInput_SpeedMode>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::SpeedMode val() const;
        };

        struct AnimationModelComponentInput_LocomotionMode : HelperObject<AnimationModelComponentInput_LocomotionMode> // Object
        {
            explicit AnimationModelComponentInput_LocomotionMode(Ent::Property _node): HelperObject<AnimationModelComponentInput_LocomotionMode>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::LocomotionMode val() const;
        };

        struct AnimationModelComponentInput_CarryMode : HelperObject<AnimationModelComponentInput_CarryMode> // Object
        {
            explicit AnimationModelComponentInput_CarryMode(Ent::Property _node): HelperObject<AnimationModelComponentInput_CarryMode>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::CarryMode val() const;
        };

        struct AnimationModelComponentInput_AttitudeMode : HelperObject<AnimationModelComponentInput_AttitudeMode> // Object
        {
            explicit AnimationModelComponentInput_AttitudeMode(Ent::Property _node): HelperObject<AnimationModelComponentInput_AttitudeMode>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::AttitudeMode val() const;
        };

        struct AnimationMode : EnumPropHelper<AnimationMode, AnimationModeEnum> // Enum
        {
            using Enum = AnimationModeEnum;
            using PropHelper<AnimationMode, Enum>::operator=;
            explicit AnimationMode(Ent::Property _node): EnumPropHelper<AnimationMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationMode";
            static constexpr char const* enumToString[] = {
                "absolute",
                "additive",
            };
        };
        inline char const* toString(AnimationModeEnum value)
        {
            if(size_t(value) >= std::size(AnimationMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimationMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimationModeEnum value) { return toString(value); }
        template<> inline AnimationModeEnum strToEnum<AnimationModeEnum>(char const* value)
        {
            return static_cast<AnimationModeEnum>(details::indexInEnum(value, AnimationMode::enumToString));
        }

        struct AnimationGenericConstraintsGD : HelperObject<AnimationGenericConstraintsGD> // Object
        {
            explicit AnimationGenericConstraintsGD(Ent::Property _node): HelperObject<AnimationGenericConstraintsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationGenericConstraintsGD";
            static AnimationGenericConstraintsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationGenericConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationGenericConstraintsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationGenericConstraintsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationGenericConstraintsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationGenericConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationGenericConstraintsGD makeInstanceOf()
            {
                return AnimationGenericConstraintsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AnimationMode AnimationMode() const;
            Ent::Gen2::Int AnimationPass() const;
            Ent::Gen2::AnimationSpace AnimationSpace() const;
            Ent::Gen2::Float ControlRate() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationLegsConstraints_SlopeOffsetInfo : HelperObject<AnimationLegsConstraints_SlopeOffsetInfo> // Object
        {
            explicit AnimationLegsConstraints_SlopeOffsetInfo(Ent::Property _node): HelperObject<AnimationLegsConstraints_SlopeOffsetInfo>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationLegsConstraints::SlopeOffsetInfo";
            static AnimationLegsConstraints_SlopeOffsetInfo load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationLegsConstraints_SlopeOffsetInfo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationLegsConstraints_SlopeOffsetInfo loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationLegsConstraints_SlopeOffsetInfo(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationLegsConstraints_SlopeOffsetInfo create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationLegsConstraints_SlopeOffsetInfo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationLegsConstraints_SlopeOffsetInfo makeInstanceOf()
            {
                return AnimationLegsConstraints_SlopeOffsetInfo(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float MaxSlopeAngle() const;
            Ent::Gen2::Vector3 RotationOffset() const;
            Ent::Gen2::Vector3 TranslationOffset() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationLegsConstraintsGD : HelperObject<AnimationLegsConstraintsGD> // Object
        {
            explicit AnimationLegsConstraintsGD(Ent::Property _node): HelperObject<AnimationLegsConstraintsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationLegsConstraintsGD";
            static AnimationLegsConstraintsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationLegsConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationLegsConstraintsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationLegsConstraintsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationLegsConstraintsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationLegsConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationLegsConstraintsGD makeInstanceOf()
            {
                return AnimationLegsConstraintsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AllowHeightMapCastFallback() const;
            Ent::Gen2::AnimationLegsConstraints_SlopeOffsetInfo AscendingSlopeOffsetInfo() const;
            Ent::Gen2::Float BackLegsCompensateExtensionThreshold() const;
            Ent::Gen2::Vector2 BackLegsHeightRangeForIKInfluence() const;
            Ent::Gen2::Bool BoneBending() const;
            Ent::Gen2::Float BoneBendingAnticipation() const;
            Ent::Gen2::Float BoneBendingAnticipationBackward() const;
            Ent::Gen2::Float BoneBendingLocomotionInfluenceSpeed() const;
            Ent::Gen2::Float CastDeltaDistToTriggerSmooth() const;
            Ent::Gen2::AnimationLegsConstraints_SlopeOffsetInfo DescendingSlopeOffsetInfo() const;
            Ent::Gen2::Float FeetInfluence() const;
            Ent::Gen2::Float FrontLegsCompensateExtensionThreshold() const;
            Ent::Gen2::Vector2 FrontLegsHeightRangeForIKInfluence() const;
            Ent::Gen2::Float GlobalInfluence() const;
            Ent::Gen2::Float LegInfluence() const;
            Ent::Gen2::Bool LegLock() const;
            Ent::Gen2::Float MaxHeightForFootInfluence() const;
            Ent::Gen2::Float ObstructionCastHitPosMarginOffsetFactor() const;
            Ent::Gen2::Float ObstructionCastOffsetFactor() const;
            Ent::Gen2::Float ObstructionCastSafeRadiusFactor() const;
            Ent::Gen2::ScaleConverter SpeedFactorFromLockedRootDistance() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Bool UseObstructionCast() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationEventsGeneratorGD_TrackedBone : HelperObject<AnimationEventsGeneratorGD_TrackedBone> // Object
        {
            explicit AnimationEventsGeneratorGD_TrackedBone(Ent::Property _node): HelperObject<AnimationEventsGeneratorGD_TrackedBone>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationEventsGeneratorGD::TrackedBone";
            static AnimationEventsGeneratorGD_TrackedBone load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationEventsGeneratorGD_TrackedBone(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationEventsGeneratorGD_TrackedBone loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationEventsGeneratorGD_TrackedBone(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationEventsGeneratorGD_TrackedBone create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationEventsGeneratorGD_TrackedBone(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationEventsGeneratorGD_TrackedBone makeInstanceOf()
            {
                return AnimationEventsGeneratorGD_TrackedBone(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Ent::Gen2::Int OffsetFrameCountStart() const;
            Ent::Gen2::Int OffsetFrameCountStop() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationEventsGeneratorGD : HelperObject<AnimationEventsGeneratorGD> // Object
        {
            explicit AnimationEventsGeneratorGD(Ent::Property _node): HelperObject<AnimationEventsGeneratorGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationEventsGeneratorGD";
            static AnimationEventsGeneratorGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationEventsGeneratorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationEventsGeneratorGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationEventsGeneratorGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationEventsGeneratorGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationEventsGeneratorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationEventsGeneratorGD makeInstanceOf()
            {
                return AnimationEventsGeneratorGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Array<Ent::Gen2::AnimationEventsGeneratorGD_TrackedBone> TrackedBones() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimTagTimelineTransition : EnumPropHelper<AnimTagTimelineTransition, AnimTagTimelineTransitionEnum> // Enum
        {
            using Enum = AnimTagTimelineTransitionEnum;
            using PropHelper<AnimTagTimelineTransition, Enum>::operator=;
            explicit AnimTagTimelineTransition(Ent::Property _node): EnumPropHelper<AnimTagTimelineTransition, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimTagTimelineTransition";
            static constexpr char const* enumToString[] = {
                "beginning",
                "copy",
                "reverse",
                "AnimTagTimelineTransition_COUNT",
            };
        };
        inline char const* toString(AnimTagTimelineTransitionEnum value)
        {
            if(size_t(value) >= std::size(AnimTagTimelineTransition::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimTagTimelineTransition::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimTagTimelineTransitionEnum value) { return toString(value); }
        template<> inline AnimTagTimelineTransitionEnum strToEnum<AnimTagTimelineTransitionEnum>(char const* value)
        {
            return static_cast<AnimTagTimelineTransitionEnum>(details::indexInEnum(value, AnimTagTimelineTransition::enumToString));
        }

        struct AnimTag : EnumPropHelper<AnimTag, AnimTagEnum> // Enum
        {
            using Enum = AnimTagEnum;
            using PropHelper<AnimTag, Enum>::operator=;
            explicit AnimTag(Ent::Property _node): EnumPropHelper<AnimTag, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimTag";
            static constexpr char const* enumToString[] = {
                "none",
                "apex",
                "forward",
                "forwardright",
                "right",
                "backwardright",
                "backward",
                "backwardleft",
                "left",
                "forwardleft",
                "regular",
                "alignedregular",
                "goofy",
                "alignedgoofy",
                "top",
                "bottom",
                "up",
                "upforward",
                "upward",
                "down",
                "downforward",
                "downward",
                "in",
                "out",
                "horizontal",
                "vertical",
                "count",
            };
        };
        inline char const* toString(AnimTagEnum value)
        {
            if(size_t(value) >= std::size(AnimTag::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimTag::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimTagEnum value) { return toString(value); }
        template<> inline AnimTagEnum strToEnum<AnimTagEnum>(char const* value)
        {
            return static_cast<AnimTagEnum>(details::indexInEnum(value, AnimTag::enumToString));
        }

        struct MoveCapacityData_AnimTagTransitionGroup : HelperObject<MoveCapacityData_AnimTagTransitionGroup> // Object
        {
            explicit MoveCapacityData_AnimTagTransitionGroup(Ent::Property _node): HelperObject<MoveCapacityData_AnimTagTransitionGroup>(std::move(_node)) {}
            static constexpr char schemaName[] = "MoveCapacityData::AnimTagTransitionGroup";
            static MoveCapacityData_AnimTagTransitionGroup load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MoveCapacityData_AnimTagTransitionGroup(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MoveCapacityData_AnimTagTransitionGroup loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MoveCapacityData_AnimTagTransitionGroup(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MoveCapacityData_AnimTagTransitionGroup create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MoveCapacityData_AnimTagTransitionGroup(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MoveCapacityData_AnimTagTransitionGroup makeInstanceOf()
            {
                return MoveCapacityData_AnimTagTransitionGroup(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            PrimArray<Ent::Gen2::AnimTag> animTags() const;
            Ent::Gen2::Float blendIn() const;
        };

        struct MoveCapacityData_AnimTagTimelineTransitionItem : HelperObject<MoveCapacityData_AnimTagTimelineTransitionItem> // Object
        {
            explicit MoveCapacityData_AnimTagTimelineTransitionItem(Ent::Property _node): HelperObject<MoveCapacityData_AnimTagTimelineTransitionItem>(std::move(_node)) {}
            static constexpr char schemaName[] = "MoveCapacityData::AnimTagTimelineTransitionItem";
            static MoveCapacityData_AnimTagTimelineTransitionItem load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MoveCapacityData_AnimTagTimelineTransitionItem(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MoveCapacityData_AnimTagTimelineTransitionItem loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MoveCapacityData_AnimTagTimelineTransitionItem(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MoveCapacityData_AnimTagTimelineTransitionItem create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MoveCapacityData_AnimTagTimelineTransitionItem(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MoveCapacityData_AnimTagTimelineTransitionItem makeInstanceOf()
            {
                return MoveCapacityData_AnimTagTimelineTransitionItem(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::AnimTag to() const;
            Ent::Gen2::AnimTagTimelineTransition type() const;
        };

        struct MoveCapacityData_AnimTagTimelineTransitionTable : HelperObject<MoveCapacityData_AnimTagTimelineTransitionTable> // Object
        {
            explicit MoveCapacityData_AnimTagTimelineTransitionTable(Ent::Property _node): HelperObject<MoveCapacityData_AnimTagTimelineTransitionTable>(std::move(_node)) {}
            static constexpr char schemaName[] = "MoveCapacityData::AnimTagTimelineTransitionTable";
            static MoveCapacityData_AnimTagTimelineTransitionTable load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MoveCapacityData_AnimTagTimelineTransitionTable(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MoveCapacityData_AnimTagTimelineTransitionTable loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MoveCapacityData_AnimTagTimelineTransitionTable(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MoveCapacityData_AnimTagTimelineTransitionTable create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MoveCapacityData_AnimTagTimelineTransitionTable(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MoveCapacityData_AnimTagTimelineTransitionTable makeInstanceOf()
            {
                return MoveCapacityData_AnimTagTimelineTransitionTable(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::AnimTag from_() const;
            Array<Ent::Gen2::MoveCapacityData_AnimTagTimelineTransitionItem> transitions() const;
        };

        struct MoveCapacityData : HelperObject<MoveCapacityData> // Object
        {
            explicit MoveCapacityData(Ent::Property _node): HelperObject<MoveCapacityData>(std::move(_node)) {}
            static constexpr char schemaName[] = "MoveCapacityData";
            static MoveCapacityData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MoveCapacityData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MoveCapacityData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MoveCapacityData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MoveCapacityData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MoveCapacityData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MoveCapacityData makeInstanceOf()
            {
                return MoveCapacityData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float airControlFactor() const;
            Ent::Gen2::Bool allowClampSpeedBiggerThanLocomotionDuringBlend() const;
            Ent::Gen2::Bool allowKeepAnimationPlayRatioUnclamped() const;
            Ent::Gen2::Float angularSpeedMaxFlyDumpFactor() const;
            Ent::Gen2::Float angularSpeedMaxGroundDumpFactor() const;
            Ent::Gen2::Float angularSpeedMaxRiderDumpFactor() const;
            Ent::Gen2::Float angularSpeedMaxWaterDumpFactor() const;
            Ent::Gen2::MoveCapacityData_AnimTagTimelineTransitionTable animTagTimelineTransitionTable() const;
            Ent::Gen2::Float brakeDeceleration() const;
            Ent::Gen2::Bool canSpiritAttack() const;
            Ent::Gen2::Bool canUseCliffGrip() const;
            Ent::Gen2::Float capsuleBigRadius() const;
            Ent::Gen2::Float capsuleEnormousRadius() const;
            Ent::Gen2::Float capsuleMediumRadius() const;
            Ent::Gen2::Float capsuleSmallRadius() const;
            Ent::Gen2::Float capsuleTinyRadius() const;
            Ent::Gen2::ScaleConverter constraintDetectionAnticipation() const;
            Ent::Gen2::Vector3 constraintDetectionOffset() const;
            Ent::Gen2::Float constraintDetectionRadiusMultiplier() const;
            Ent::Gen2::Float coyoteJumpMaxTime() const;
            Ent::Gen2::Float crashPreventionSafeguardFactor() const;
            Ent::Gen2::Float defaultWorldUpSpeedFactor() const;
            Ent::Gen2::Float dodgeCooldownTime() const;
            Ent::Gen2::Bool doubleJump() const;
            Ent::Gen2::ScaleConverter dropPlaneLegLenFactor() const;
            Ent::Gen2::Bool dropSyncTrajectoryAndVisual() const;
            Ent::Gen2::Float ellipseCoeff() const;
            Ent::Gen2::ScaleConverter extirpateObstacleAcceleration() const;
            Ent::Gen2::Float extirpateObstacleDuration() const;
            Ent::Gen2::ScaleConverter flyCentrifugalCoeff() const;
            Ent::Gen2::Float flyCentrifugalRate() const;
            Ent::Gen2::Float jumpAnalogScale() const;
            Ent::Gen2::Bool jumpOntoPosition() const;
            Ent::Gen2::Float legLength() const;
            Ent::Gen2::Float mass() const;
            Ent::Gen2::Float maxAverageSpeedDuringJumpOnto() const;
            Ent::Gen2::Float maxFlapTime() const;
            Ent::Gen2::Float maxTimeBetweenFlaps() const;
            Ent::Gen2::Float maxUnmountRetimingDist() const;
            Ent::Gen2::Float minFlapTime() const;
            Ent::Gen2::Float minSpeedToSteerPitch() const;
            Ent::Gen2::Float minTimeBetweenFlaps() const;
            Ent::Gen2::Float minimumDropTimeBeforeAClimbEdge() const;
            Ent::Gen2::Int nbAttackJump() const;
            Ent::Gen2::MoveCapacityData_OrientationSpeed orientationSpeedFly() const;
            Ent::Gen2::MoveCapacityData_OrientationSpeed orientationSpeedGround() const;
            Ent::Gen2::MoveCapacityData_OrientationSpeed orientationSpeedWater() const;
            Ent::Gen2::Float patinateSpeedMinEnter() const;
            Ent::Gen2::Float patinateSpeedMinExit() const;
            Ent::Gen2::Float reachSpeedAcceleration() const;
            Array<Ent::Gen2::MoveCapacityData_ReachSpeed> reachSpeedByLocomotion() const;
            Ent::Gen2::Float reachSpeedDeceleration() const;
            Ent::Gen2::Bool reactToOtherCharacterBodyCollision() const;
            Ent::Gen2::Float rigidbodyScalingSpeed() const;
            Ent::Gen2::Float sphereCastRadiusRatio() const;
            Ent::Gen2::Float sphereOverrideRadius() const;
            Ent::Gen2::Float strafeBlendIn() const;
            Ent::Gen2::Float strafeBlendWeightMinToChangeAnim() const;
            Ent::Gen2::Float strafeOrientationRateFactor() const;
            Ent::Gen2::SpeedMode strafeSpeedModeMax() const;
            Ent::Gen2::Float strafeStopOrientationRateFactor() const;
            Ent::Gen2::Float strafeTurnAngleMin() const;
            Ent::Gen2::Float trajectoryRateFactorDuringLateralLand() const;
            Ent::Gen2::Float turnAroundInputDirectionAngleDeltaMin() const;
            Ent::Gen2::Float turnRotationMinRatioForNewTurn() const;
            Ent::Gen2::Float turnRotationMinRatioToFinish() const;
        };

        struct CharacterControllerGD : HelperObject<CharacterControllerGD> // Object
        {
            explicit CharacterControllerGD(Ent::Property _node): HelperObject<CharacterControllerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "CharacterControllerGD";
            static CharacterControllerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CharacterControllerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CharacterControllerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CharacterControllerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CharacterControllerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CharacterControllerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CharacterControllerGD makeInstanceOf()
            {
                return CharacterControllerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AllowHeightMapFallback() const;
            Ent::Gen2::CharacterControllerClamberData ClamberData() const;
            Ent::Gen2::CharacterControllerFallData FallData() const;
            Ent::Gen2::CharacterControllerGroundNormalData GroundNormalData() const;
            Ent::Gen2::HeadCollisionBehaviorData HeadCollisionData() const;
            Ent::Gen2::HitWallData HitWallData() const;
            Ent::Gen2::ImmersedBehaviorData ImmersedData() const;
            Ent::Gen2::InputCollisionBehaviorData InputCollisionData() const;
            Ent::Gen2::MeshNavigationBehaviorData MeshNavigationData() const;
            Ent::Gen2::PredictionBehaviorData PredictionData() const;
            Ent::Gen2::Vector3 RotationSmooth() const;
            Ent::Gen2::CharacterControllerSlideData SlideData() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::ClimbEdgeData climbEdgeData() const;
            Ent::Gen2::MoveCapacityData moveCapacityData() const;
        };

        struct DirectionSync : HelperObject<DirectionSync> // Object
        {
            explicit DirectionSync(Ent::Property _node): HelperObject<DirectionSync>(std::move(_node)) {}
            static constexpr char schemaName[] = "DirectionSync";
            static DirectionSync load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DirectionSync(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DirectionSync loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DirectionSync(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DirectionSync create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DirectionSync(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DirectionSync makeInstanceOf()
            {
                return DirectionSync(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool isOpposite() const;
            Ent::Gen2::Bool mirrorKey() const;
            Ent::Gen2::Float syncCoeff() const;
            Ent::Gen2::AnimTag tag1() const;
            Ent::Gen2::AnimTag tag2() const;
        };

        struct DirectionSyncData : HelperObject<DirectionSyncData> // Object
        {
            explicit DirectionSyncData(Ent::Property _node): HelperObject<DirectionSyncData>(std::move(_node)) {}
            static constexpr char schemaName[] = "DirectionSyncData";
            static DirectionSyncData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return DirectionSyncData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static DirectionSyncData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return DirectionSyncData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static DirectionSyncData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return DirectionSyncData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            DirectionSyncData makeInstanceOf()
            {
                return DirectionSyncData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::DirectionSync> datas() const;
            Ent::Gen2::String name() const;
        };

        struct AnimationManager : HelperObject<AnimationManager> // Object
        {
            explicit AnimationManager(Ent::Property _node): HelperObject<AnimationManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationManager";
            static AnimationManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationManager makeInstanceOf()
            {
                return AnimationManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AnimationVariantDelayMax() const;
            Ent::Gen2::Float AnimationVariantDelayMin() const;
            Ent::Gen2::Float LookAtSlopeCoeff() const;
            Ent::Gen2::Float PlayRatioMax() const;
            Ent::Gen2::Float PlayRatioMin() const;
            PrimArray<Ent::Gen2::String> RejectedMetadataStatus() const;
            Ent::Gen2::Manager Super() const;
            Array<Ent::Gen2::DirectionSyncData> SyncDatas() const;
            Ent::Gen2::String _comment() const;
            PrimArray<Ent::Gen2::String> canDetachFromGroundAction() const;
        };

        struct AnimationModelComponentInput_AnimTag : HelperObject<AnimationModelComponentInput_AnimTag> // Object
        {
            explicit AnimationModelComponentInput_AnimTag(Ent::Property _node): HelperObject<AnimationModelComponentInput_AnimTag>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::AnimTag val() const;
        };

        struct AnimMirroringSpecData : HelperObject<AnimMirroringSpecData> // Object
        {
            explicit AnimMirroringSpecData(Ent::Property _node): HelperObject<AnimMirroringSpecData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimMirroringSpecData";
            static AnimMirroringSpecData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimMirroringSpecData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimMirroringSpecData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimMirroringSpecData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimMirroringSpecData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimMirroringSpecData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimMirroringSpecData makeInstanceOf()
            {
                return AnimMirroringSpecData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String name() const;
            Ent::Gen2::String name2() const;
            Ent::Gen2::String spec() const;
        };

        struct AnimMirroringData : HelperObject<AnimMirroringData> // Object
        {
            explicit AnimMirroringData(Ent::Property _node): HelperObject<AnimMirroringData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimMirroringData";
            static AnimMirroringData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimMirroringData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimMirroringData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimMirroringData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimMirroringData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimMirroringData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimMirroringData makeInstanceOf()
            {
                return AnimMirroringData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Array<Ent::Gen2::AnimMirroringSpecData> specs() const;
        };

        struct AnimationControllerGD : HelperObject<AnimationControllerGD> // Object
        {
            explicit AnimationControllerGD(Ent::Property _node): HelperObject<AnimationControllerGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationControllerGD";
            static AnimationControllerGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationControllerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationControllerGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationControllerGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationControllerGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationControllerGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationControllerGD makeInstanceOf()
            {
                return AnimationControllerGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String EDITOR_skeleton() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String animDatabase() const;
            Ent::Gen2::AnimMirroringData mirroringData() const;
            Ent::Gen2::Float romLookAtInfluence() const;
            Ent::Gen2::String skeleton() const;
            Ent::Gen2::String syncDataName() const;
        };

        struct AnimAdditionalTag : EnumPropHelper<AnimAdditionalTag, AnimAdditionalTagEnum> // Enum
        {
            using Enum = AnimAdditionalTagEnum;
            using PropHelper<AnimAdditionalTag, Enum>::operator=;
            explicit AnimAdditionalTag(Ent::Property _node): EnumPropHelper<AnimAdditionalTag, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimAdditionalTag";
            static constexpr char const* enumToString[] = {
                "none",
                "small",
                "light",
                "medium",
                "big",
                "enormous",
                "menace",
                "variant1",
                "variant2",
                "variant3",
                "variant4",
                "variant5",
                "variant6",
                "variant7",
                "variant8",
                "variant9",
                "variant10",
                "variant11",
                "variant12",
                "variant13",
                "variant14",
                "variant15",
                "variant16",
                "variant17",
                "variant18",
                "variant19",
                "variant20",
                "ejected",
                "ejectedfar",
                "plunge",
                "lateralplunge",
                "aerialplunge",
                "waterfall",
                "bounce",
                "AnimAdditionalTag_COUNT",
            };
        };
        inline char const* toString(AnimAdditionalTagEnum value)
        {
            if(size_t(value) >= std::size(AnimAdditionalTag::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AnimAdditionalTag::enumToString[size_t(value)];
        }
        inline char const* toInternal(AnimAdditionalTagEnum value) { return toString(value); }
        template<> inline AnimAdditionalTagEnum strToEnum<AnimAdditionalTagEnum>(char const* value)
        {
            return static_cast<AnimAdditionalTagEnum>(details::indexInEnum(value, AnimAdditionalTag::enumToString));
        }

        struct AttackChargedData : HelperObject<AttackChargedData> // Object
        {
            explicit AttackChargedData(Ent::Property _node): HelperObject<AttackChargedData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackChargedData";
            static AttackChargedData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackChargedData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackChargedData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackChargedData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackChargedData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackChargedData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackChargedData makeInstanceOf()
            {
                return AttackChargedData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AnimAdditionalTag AnimationTag() const;
            Ent::Gen2::FloatRange ChargeRatio() const;
            Ent::Gen2::String _comment() const;
        };

        struct StrongAttackData : HelperObject<StrongAttackData> // Object
        {
            explicit StrongAttackData(Ent::Property _node): HelperObject<StrongAttackData>(std::move(_node)) {}
            static constexpr char schemaName[] = "StrongAttackData";
            static StrongAttackData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StrongAttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StrongAttackData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StrongAttackData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StrongAttackData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StrongAttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StrongAttackData makeInstanceOf()
            {
                return StrongAttackData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ResponsiblePointer_ActorState_ StrongAttackState() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float attackOrientationRate() const;
            Array<Ent::Gen2::AttackChargedData> chargedDatas() const;
            Ent::Gen2::Float chargedMaxDuration() const;
            Ent::Gen2::Float chargingDeceleration() const;
            Ent::Gen2::Float chargingOrientationRate() const;
        };

        struct strongAttackData : HelperObject<strongAttackData> // Object
        {
            explicit strongAttackData(Ent::Property _node): HelperObject<strongAttackData>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::StrongAttackData val() const;
        };

        struct AnalyticsManager_MongoDBConnection : HelperObject<AnalyticsManager_MongoDBConnection> // Object
        {
            explicit AnalyticsManager_MongoDBConnection(Ent::Property _node): HelperObject<AnalyticsManager_MongoDBConnection>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnalyticsManager::MongoDBConnection";
            static AnalyticsManager_MongoDBConnection load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnalyticsManager_MongoDBConnection(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnalyticsManager_MongoDBConnection loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnalyticsManager_MongoDBConnection(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnalyticsManager_MongoDBConnection create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnalyticsManager_MongoDBConnection(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnalyticsManager_MongoDBConnection makeInstanceOf()
            {
                return AnalyticsManager_MongoDBConnection(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String collection() const;
            Ent::Gen2::String database() const;
            Ent::Gen2::String uri() const;
        };

        struct AnalyticsManager : HelperObject<AnalyticsManager> // Object
        {
            explicit AnalyticsManager(Ent::Property _node): HelperObject<AnalyticsManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnalyticsManager";
            static AnalyticsManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnalyticsManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnalyticsManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnalyticsManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnalyticsManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnalyticsManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnalyticsManager makeInstanceOf()
            {
                return AnalyticsManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool EnableAnalyticsTeleportation() const;
            Ent::Gen2::Bool EnableEventLogger() const;
            Ent::Gen2::AnalyticsManager_MongoDBConnection MongoDBConnection() const;
            Array<Ent::Gen2::ResponsiblePointer_AnalyticsObserverInterface_> Plugins() const;
            Ent::Gen2::Bool StartPaused() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AerialAttackData : HelperObject<AerialAttackData> // Object
        {
            explicit AerialAttackData(Ent::Property _node): HelperObject<AerialAttackData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AerialAttackData";
            static AerialAttackData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AerialAttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AerialAttackData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AerialAttackData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AerialAttackData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AerialAttackData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AerialAttackData makeInstanceOf()
            {
                return AerialAttackData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ResponsiblePointer_ActorState_ AerialAttackState() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float attackOrientationRate() const;
        };

        struct AttackComponentGD_AerialAttackData : HelperObject<AttackComponentGD_AerialAttackData> // Object
        {
            explicit AttackComponentGD_AerialAttackData(Ent::Property _node): HelperObject<AttackComponentGD_AerialAttackData>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::AerialAttackData val() const;
        };

        struct AttackComponentGD : HelperObject<AttackComponentGD> // Object
        {
            explicit AttackComponentGD(Ent::Property _node): HelperObject<AttackComponentGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AttackComponentGD";
            static AttackComponentGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AttackComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AttackComponentGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AttackComponentGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AttackComponentGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AttackComponentGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AttackComponentGD makeInstanceOf()
            {
                return AttackComponentGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AttackComponentGD_AerialAttackData AerialAttackData() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::AttackPositionRetimingData attackPositionRetimingData() const;
            Ent::Gen2::lightAttackData lightAttackData() const;
            Ent::Gen2::strongAttackData strongAttackData() const;
        };

        struct AdditionnalTag : HelperObject<AdditionnalTag> // Object
        {
            explicit AdditionnalTag(Ent::Property _node): HelperObject<AdditionnalTag>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::AnimAdditionalTag val() const;
        };

        struct ActorStates : UnionSetBase<ResponsiblePointer_ActorState_> // union_set
        {
            explicit ActorStates(Ent::Property _node)
                : UnionSetBase<ResponsiblePointer_ActorState_>(std::move(_node))
            {
            }
            static constexpr char schemaName[] = "ActorStates";
            char const* getType() const;
            std::optional<Ent::Gen2::ActionAimProjectile> ActionAimProjectile();
            Ent::Gen2::ActionAimProjectile addActionAimProjectile();
            void removeActionAimProjectile();
            std::optional<Ent::Gen2::ActionAttack> ActionAttack();
            Ent::Gen2::ActionAttack addActionAttack();
            void removeActionAttack();
            std::optional<Ent::Gen2::ActionAttackJumpOnto> ActionAttackJumpOnto();
            Ent::Gen2::ActionAttackJumpOnto addActionAttackJumpOnto();
            void removeActionAttackJumpOnto();
            std::optional<Ent::Gen2::ActionAttackStomp> ActionAttackStomp();
            Ent::Gen2::ActionAttackStomp addActionAttackStomp();
            void removeActionAttackStomp();
            std::optional<Ent::Gen2::ActionBite> ActionBite();
            Ent::Gen2::ActionBite addActionBite();
            void removeActionBite();
            std::optional<Ent::Gen2::ActionBiteIn> ActionBiteIn();
            Ent::Gen2::ActionBiteIn addActionBiteIn();
            void removeActionBiteIn();
            std::optional<Ent::Gen2::ActionBiteOut> ActionBiteOut();
            Ent::Gen2::ActionBiteOut addActionBiteOut();
            void removeActionBiteOut();
            std::optional<Ent::Gen2::ActionBittenState> ActionBittenState();
            Ent::Gen2::ActionBittenState addActionBittenState();
            void removeActionBittenState();
            std::optional<Ent::Gen2::ActionBrake> ActionBrake();
            Ent::Gen2::ActionBrake addActionBrake();
            void removeActionBrake();
            std::optional<Ent::Gen2::ActionCallForHelp> ActionCallForHelp();
            Ent::Gen2::ActionCallForHelp addActionCallForHelp();
            void removeActionCallForHelp();
            std::optional<Ent::Gen2::ActionCentrifugal> ActionCentrifugal();
            Ent::Gen2::ActionCentrifugal addActionCentrifugal();
            void removeActionCentrifugal();
            std::optional<Ent::Gen2::ActionChangeMount> ActionChangeMount();
            Ent::Gen2::ActionChangeMount addActionChangeMount();
            void removeActionChangeMount();
            std::optional<Ent::Gen2::ActionChangeRidingSpot> ActionChangeRidingSpot();
            Ent::Gen2::ActionChangeRidingSpot addActionChangeRidingSpot();
            void removeActionChangeRidingSpot();
            std::optional<Ent::Gen2::ActionChosen> ActionChosen();
            Ent::Gen2::ActionChosen addActionChosen();
            void removeActionChosen();
            std::optional<Ent::Gen2::ActionCinematic> ActionCinematic();
            Ent::Gen2::ActionCinematic addActionCinematic();
            void removeActionCinematic();
            std::optional<Ent::Gen2::ActionClamberDropOff> ActionClamberDropOff();
            Ent::Gen2::ActionClamberDropOff addActionClamberDropOff();
            void removeActionClamberDropOff();
            std::optional<Ent::Gen2::ActionClamberJump> ActionClamberJump();
            Ent::Gen2::ActionClamberJump addActionClamberJump();
            void removeActionClamberJump();
            std::optional<Ent::Gen2::ActionClamberJumpOff> ActionClamberJumpOff();
            Ent::Gen2::ActionClamberJumpOff addActionClamberJumpOff();
            void removeActionClamberJumpOff();
            std::optional<Ent::Gen2::ActionClamberLand> ActionClamberLand();
            Ent::Gen2::ActionClamberLand addActionClamberLand();
            void removeActionClamberLand();
            std::optional<Ent::Gen2::ActionClamberMove> ActionClamberMove();
            Ent::Gen2::ActionClamberMove addActionClamberMove();
            void removeActionClamberMove();
            std::optional<Ent::Gen2::ActionClamberRise> ActionClamberRise();
            Ent::Gen2::ActionClamberRise addActionClamberRise();
            void removeActionClamberRise();
            std::optional<Ent::Gen2::ActionClimbEdge> ActionClimbEdge();
            Ent::Gen2::ActionClimbEdge addActionClimbEdge();
            void removeActionClimbEdge();
            std::optional<Ent::Gen2::ActionCollapse> ActionCollapse();
            Ent::Gen2::ActionCollapse addActionCollapse();
            void removeActionCollapse();
            std::optional<Ent::Gen2::ActionDecelerate> ActionDecelerate();
            Ent::Gen2::ActionDecelerate addActionDecelerate();
            void removeActionDecelerate();
            std::optional<Ent::Gen2::ActionDigUpTreasure> ActionDigUpTreasure();
            Ent::Gen2::ActionDigUpTreasure addActionDigUpTreasure();
            void removeActionDigUpTreasure();
            std::optional<Ent::Gen2::ActionDisableAndFollow> ActionDisableAndFollow();
            Ent::Gen2::ActionDisableAndFollow addActionDisableAndFollow();
            void removeActionDisableAndFollow();
            std::optional<Ent::Gen2::ActionDodge> ActionDodge();
            Ent::Gen2::ActionDodge addActionDodge();
            void removeActionDodge();
            std::optional<Ent::Gen2::ActionDrawAttention> ActionDrawAttention();
            Ent::Gen2::ActionDrawAttention addActionDrawAttention();
            void removeActionDrawAttention();
            std::optional<Ent::Gen2::ActionDrawWeapon> ActionDrawWeapon();
            Ent::Gen2::ActionDrawWeapon addActionDrawWeapon();
            void removeActionDrawWeapon();
            std::optional<Ent::Gen2::ActionDrawWeaponState> ActionDrawWeaponState();
            Ent::Gen2::ActionDrawWeaponState addActionDrawWeaponState();
            void removeActionDrawWeaponState();
            std::optional<Ent::Gen2::ActionDrift> ActionDrift();
            Ent::Gen2::ActionDrift addActionDrift();
            void removeActionDrift();
            std::optional<Ent::Gen2::ActionDrop> ActionDrop();
            Ent::Gen2::ActionDrop addActionDrop();
            void removeActionDrop();
            std::optional<Ent::Gen2::ActionEmote> ActionEmote();
            Ent::Gen2::ActionEmote addActionEmote();
            void removeActionEmote();
            std::optional<Ent::Gen2::ActionFlyCrash> ActionFlyCrash();
            Ent::Gen2::ActionFlyCrash addActionFlyCrash();
            void removeActionFlyCrash();
            std::optional<Ent::Gen2::ActionFlyDive> ActionFlyDive();
            Ent::Gen2::ActionFlyDive addActionFlyDive();
            void removeActionFlyDive();
            std::optional<Ent::Gen2::ActionFlyDown> ActionFlyDown();
            Ent::Gen2::ActionFlyDown addActionFlyDown();
            void removeActionFlyDown();
            std::optional<Ent::Gen2::ActionFlyFlap> ActionFlyFlap();
            Ent::Gen2::ActionFlyFlap addActionFlyFlap();
            void removeActionFlyFlap();
            std::optional<Ent::Gen2::ActionFlyUp> ActionFlyUp();
            Ent::Gen2::ActionFlyUp addActionFlyUp();
            void removeActionFlyUp();
            std::optional<Ent::Gen2::ActionHit> ActionHit();
            Ent::Gen2::ActionHit addActionHit();
            void removeActionHit();
            std::optional<Ent::Gen2::ActionIdle> ActionIdle();
            Ent::Gen2::ActionIdle addActionIdle();
            void removeActionIdle();
            std::optional<Ent::Gen2::ActionIncarnate> ActionIncarnate();
            Ent::Gen2::ActionIncarnate addActionIncarnate();
            void removeActionIncarnate();
            std::optional<Ent::Gen2::ActionIncarnated> ActionIncarnated();
            Ent::Gen2::ActionIncarnated addActionIncarnated();
            void removeActionIncarnated();
            std::optional<Ent::Gen2::ActionJump> ActionJump();
            Ent::Gen2::ActionJump addActionJump();
            void removeActionJump();
            std::optional<Ent::Gen2::ActionJumpOnto> ActionJumpOnto();
            Ent::Gen2::ActionJumpOnto addActionJumpOnto();
            void removeActionJumpOnto();
            std::optional<Ent::Gen2::ActionLand> ActionLand();
            Ent::Gen2::ActionLand addActionLand();
            void removeActionLand();
            std::optional<Ent::Gen2::ActionLandingMount> ActionLandingMount();
            Ent::Gen2::ActionLandingMount addActionLandingMount();
            void removeActionLandingMount();
            std::optional<Ent::Gen2::ActionLookAt> ActionLookAt();
            Ent::Gen2::ActionLookAt addActionLookAt();
            void removeActionLookAt();
            std::optional<Ent::Gen2::ActionMountReception> ActionMountReception();
            Ent::Gen2::ActionMountReception addActionMountReception();
            void removeActionMountReception();
            std::optional<Ent::Gen2::ActionMove> ActionMove();
            Ent::Gen2::ActionMove addActionMove();
            void removeActionMove();
            std::optional<Ent::Gen2::ActionMoveProjectile> ActionMoveProjectile();
            Ent::Gen2::ActionMoveProjectile addActionMoveProjectile();
            void removeActionMoveProjectile();
            std::optional<Ent::Gen2::ActionMoveTo> ActionMoveTo();
            Ent::Gen2::ActionMoveTo addActionMoveTo();
            void removeActionMoveTo();
            std::optional<Ent::Gen2::ActionOrientMount> ActionOrientMount();
            Ent::Gen2::ActionOrientMount addActionOrientMount();
            void removeActionOrientMount();
            std::optional<Ent::Gen2::ActionOutfitSpecialState> ActionOutfitSpecialState();
            Ent::Gen2::ActionOutfitSpecialState addActionOutfitSpecialState();
            void removeActionOutfitSpecialState();
            std::optional<Ent::Gen2::ActionPathfindAndMove> ActionPathfindAndMove();
            Ent::Gen2::ActionPathfindAndMove addActionPathfindAndMove();
            void removeActionPathfindAndMove();
            std::optional<Ent::Gen2::ActionPatinate> ActionPatinate();
            Ent::Gen2::ActionPatinate addActionPatinate();
            void removeActionPatinate();
            std::optional<Ent::Gen2::ActionPlayAnim> ActionPlayAnim();
            Ent::Gen2::ActionPlayAnim addActionPlayAnim();
            void removeActionPlayAnim();
            std::optional<Ent::Gen2::ActionPropelled> ActionPropelled();
            Ent::Gen2::ActionPropelled addActionPropelled();
            void removeActionPropelled();
            std::optional<Ent::Gen2::ActionPushed> ActionPushed();
            Ent::Gen2::ActionPushed addActionPushed();
            void removeActionPushed();
            std::optional<Ent::Gen2::ActionQuadStandUpState> ActionQuadStandUpState();
            Ent::Gen2::ActionQuadStandUpState addActionQuadStandUpState();
            void removeActionQuadStandUpState();
            std::optional<Ent::Gen2::ActionQuadStandUpStateIn> ActionQuadStandUpStateIn();
            Ent::Gen2::ActionQuadStandUpStateIn addActionQuadStandUpStateIn();
            void removeActionQuadStandUpStateIn();
            std::optional<Ent::Gen2::ActionQuadStandUpStateOut> ActionQuadStandUpStateOut();
            Ent::Gen2::ActionQuadStandUpStateOut addActionQuadStandUpStateOut();
            void removeActionQuadStandUpStateOut();
            std::optional<Ent::Gen2::ActionRagdoll> ActionRagdoll();
            Ent::Gen2::ActionRagdoll addActionRagdoll();
            void removeActionRagdoll();
            std::optional<Ent::Gen2::ActionReviveMaskEffect> ActionReviveMaskEffect();
            Ent::Gen2::ActionReviveMaskEffect addActionReviveMaskEffect();
            void removeActionReviveMaskEffect();
            std::optional<Ent::Gen2::ActionRiderStance> ActionRiderStance();
            Ent::Gen2::ActionRiderStance addActionRiderStance();
            void removeActionRiderStance();
            std::optional<Ent::Gen2::ActionRise> ActionRise();
            Ent::Gen2::ActionRise addActionRise();
            void removeActionRise();
            std::optional<Ent::Gen2::ActionScaleRider> ActionScaleRider();
            Ent::Gen2::ActionScaleRider addActionScaleRider();
            void removeActionScaleRider();
            std::optional<Ent::Gen2::ActionShakeOff> ActionShakeOff();
            Ent::Gen2::ActionShakeOff addActionShakeOff();
            void removeActionShakeOff();
            std::optional<Ent::Gen2::ActionShamanVision> ActionShamanVision();
            Ent::Gen2::ActionShamanVision addActionShamanVision();
            void removeActionShamanVision();
            std::optional<Ent::Gen2::ActionShootBeam> ActionShootBeam();
            Ent::Gen2::ActionShootBeam addActionShootBeam();
            void removeActionShootBeam();
            std::optional<Ent::Gen2::ActionSlide> ActionSlide();
            Ent::Gen2::ActionSlide addActionSlide();
            void removeActionSlide();
            std::optional<Ent::Gen2::ActionStartRun> ActionStartRun();
            Ent::Gen2::ActionStartRun addActionStartRun();
            void removeActionStartRun();
            std::optional<Ent::Gen2::ActionStop> ActionStop();
            Ent::Gen2::ActionStop addActionStop();
            void removeActionStop();
            std::optional<Ent::Gen2::ActionStrafe> ActionStrafe();
            Ent::Gen2::ActionStrafe addActionStrafe();
            void removeActionStrafe();
            std::optional<Ent::Gen2::ActionStrafeTurn> ActionStrafeTurn();
            Ent::Gen2::ActionStrafeTurn addActionStrafeTurn();
            void removeActionStrafeTurn();
            std::optional<Ent::Gen2::ActionTakeOff> ActionTakeOff();
            Ent::Gen2::ActionTakeOff addActionTakeOff();
            void removeActionTakeOff();
            std::optional<Ent::Gen2::ActionTalk> ActionTalk();
            Ent::Gen2::ActionTalk addActionTalk();
            void removeActionTalk();
            std::optional<Ent::Gen2::ActionTopView> ActionTopView();
            Ent::Gen2::ActionTopView addActionTopView();
            void removeActionTopView();
            std::optional<Ent::Gen2::ActionTriggerCrouch> ActionTriggerCrouch();
            Ent::Gen2::ActionTriggerCrouch addActionTriggerCrouch();
            void removeActionTriggerCrouch();
            std::optional<Ent::Gen2::ActionTriggerShamanVisionExit> ActionTriggerShamanVisionExit();
            Ent::Gen2::ActionTriggerShamanVisionExit addActionTriggerShamanVisionExit();
            void removeActionTriggerShamanVisionExit();
            std::optional<Ent::Gen2::ActionTriggerStandUp> ActionTriggerStandUp();
            Ent::Gen2::ActionTriggerStandUp addActionTriggerStandUp();
            void removeActionTriggerStandUp();
            std::optional<Ent::Gen2::ActionTurn> ActionTurn();
            Ent::Gen2::ActionTurn addActionTurn();
            void removeActionTurn();
            std::optional<Ent::Gen2::ActionUnmount> ActionUnmount();
            Ent::Gen2::ActionUnmount addActionUnmount();
            void removeActionUnmount();
            std::optional<Ent::Gen2::ActionWait> ActionWait();
            Ent::Gen2::ActionWait addActionWait();
            void removeActionWait();
            std::optional<Ent::Gen2::ActorStateAimCharge> ActorStateAimCharge();
            Ent::Gen2::ActorStateAimCharge addActorStateAimCharge();
            void removeActorStateAimCharge();
            std::optional<Ent::Gen2::ActorStateAlive> ActorStateAlive();
            Ent::Gen2::ActorStateAlive addActorStateAlive();
            void removeActorStateAlive();
            std::optional<Ent::Gen2::ActorStateAnsweringCall> ActorStateAnsweringCall();
            Ent::Gen2::ActorStateAnsweringCall addActorStateAnsweringCall();
            void removeActorStateAnsweringCall();
            std::optional<Ent::Gen2::ActorStateApplyHit> ActorStateApplyHit();
            Ent::Gen2::ActorStateApplyHit addActorStateApplyHit();
            void removeActorStateApplyHit();
            std::optional<Ent::Gen2::ActorStateAttitudeAggressive> ActorStateAttitudeAggressive();
            Ent::Gen2::ActorStateAttitudeAggressive addActorStateAttitudeAggressive();
            void removeActorStateAttitudeAggressive();
            std::optional<Ent::Gen2::ActorStateBehaviorState> ActorStateBehaviorState();
            Ent::Gen2::ActorStateBehaviorState addActorStateBehaviorState();
            void removeActorStateBehaviorState();
            std::optional<Ent::Gen2::ActorStateBeingImmersed> ActorStateBeingImmersed();
            Ent::Gen2::ActorStateBeingImmersed addActorStateBeingImmersed();
            void removeActorStateBeingImmersed();
            std::optional<Ent::Gen2::ActorStateBeingImmersedFromInAir> ActorStateBeingImmersedFromInAir();
            Ent::Gen2::ActorStateBeingImmersedFromInAir addActorStateBeingImmersedFromInAir();
            void removeActorStateBeingImmersedFromInAir();
            std::optional<Ent::Gen2::ActorStateBeingImmersedFromOnGround> ActorStateBeingImmersedFromOnGround();
            Ent::Gen2::ActorStateBeingImmersedFromOnGround addActorStateBeingImmersedFromOnGround();
            void removeActorStateBeingImmersedFromOnGround();
            std::optional<Ent::Gen2::ActorStateBeingInAir> ActorStateBeingInAir();
            Ent::Gen2::ActorStateBeingInAir addActorStateBeingInAir();
            void removeActorStateBeingInAir();
            std::optional<Ent::Gen2::ActorStateBeingOnGround> ActorStateBeingOnGround();
            Ent::Gen2::ActorStateBeingOnGround addActorStateBeingOnGround();
            void removeActorStateBeingOnGround();
            std::optional<Ent::Gen2::ActorStateBeingOnGroundFromImmersed> ActorStateBeingOnGroundFromImmersed();
            Ent::Gen2::ActorStateBeingOnGroundFromImmersed addActorStateBeingOnGroundFromImmersed();
            void removeActorStateBeingOnGroundFromImmersed();
            std::optional<Ent::Gen2::ActorStateBeingOnMount> ActorStateBeingOnMount();
            Ent::Gen2::ActorStateBeingOnMount addActorStateBeingOnMount();
            void removeActorStateBeingOnMount();
            std::optional<Ent::Gen2::ActorStateBeingOnPossessedGPE> ActorStateBeingOnPossessedGPE();
            Ent::Gen2::ActorStateBeingOnPossessedGPE addActorStateBeingOnPossessedGPE();
            void removeActorStateBeingOnPossessedGPE();
            std::optional<Ent::Gen2::ActorStateBeingRided> ActorStateBeingRided();
            Ent::Gen2::ActorStateBeingRided addActorStateBeingRided();
            void removeActorStateBeingRided();
            std::optional<Ent::Gen2::ActorStateBendingConstraint> ActorStateBendingConstraint();
            Ent::Gen2::ActorStateBendingConstraint addActorStateBendingConstraint();
            void removeActorStateBendingConstraint();
            std::optional<Ent::Gen2::ActorStateBendingTree> ActorStateBendingTree();
            Ent::Gen2::ActorStateBendingTree addActorStateBendingTree();
            void removeActorStateBendingTree();
            std::optional<Ent::Gen2::ActorStateBiteEntityLiving> ActorStateBiteEntityLiving();
            Ent::Gen2::ActorStateBiteEntityLiving addActorStateBiteEntityLiving();
            void removeActorStateBiteEntityLiving();
            std::optional<Ent::Gen2::ActorStateBiteJumpOut> ActorStateBiteJumpOut();
            Ent::Gen2::ActorStateBiteJumpOut addActorStateBiteJumpOut();
            void removeActorStateBiteJumpOut();
            std::optional<Ent::Gen2::ActorStateBittenRegenerated> ActorStateBittenRegenerated();
            Ent::Gen2::ActorStateBittenRegenerated addActorStateBittenRegenerated();
            void removeActorStateBittenRegenerated();
            std::optional<Ent::Gen2::ActorStateBittenShaked> ActorStateBittenShaked();
            Ent::Gen2::ActorStateBittenShaked addActorStateBittenShaked();
            void removeActorStateBittenShaked();
            std::optional<Ent::Gen2::ActorStateBuried> ActorStateBuried();
            Ent::Gen2::ActorStateBuried addActorStateBuried();
            void removeActorStateBuried();
            std::optional<Ent::Gen2::ActorStateCallingFollower> ActorStateCallingFollower();
            Ent::Gen2::ActorStateCallingFollower addActorStateCallingFollower();
            void removeActorStateCallingFollower();
            std::optional<Ent::Gen2::ActorStateCatapulted> ActorStateCatapulted();
            Ent::Gen2::ActorStateCatapulted addActorStateCatapulted();
            void removeActorStateCatapulted();
            std::optional<Ent::Gen2::ActorStateCatapultedLand> ActorStateCatapultedLand();
            Ent::Gen2::ActorStateCatapultedLand addActorStateCatapultedLand();
            void removeActorStateCatapultedLand();
            std::optional<Ent::Gen2::ActorStateChangeEnergySide> ActorStateChangeEnergySide();
            Ent::Gen2::ActorStateChangeEnergySide addActorStateChangeEnergySide();
            void removeActorStateChangeEnergySide();
            std::optional<Ent::Gen2::ActorStateChargeSpendLife> ActorStateChargeSpendLife();
            Ent::Gen2::ActorStateChargeSpendLife addActorStateChargeSpendLife();
            void removeActorStateChargeSpendLife();
            std::optional<Ent::Gen2::ActorStateConvertWithFlow> ActorStateConvertWithFlow();
            Ent::Gen2::ActorStateConvertWithFlow addActorStateConvertWithFlow();
            void removeActorStateConvertWithFlow();
            std::optional<Ent::Gen2::ActorStateCreature> ActorStateCreature();
            Ent::Gen2::ActorStateCreature addActorStateCreature();
            void removeActorStateCreature();
            std::optional<Ent::Gen2::ActorStateDead> ActorStateDead();
            Ent::Gen2::ActorStateDead addActorStateDead();
            void removeActorStateDead();
            std::optional<Ent::Gen2::ActorStateDisabled> ActorStateDisabled();
            Ent::Gen2::ActorStateDisabled addActorStateDisabled();
            void removeActorStateDisabled();
            std::optional<Ent::Gen2::ActorStateDisabledIn> ActorStateDisabledIn();
            Ent::Gen2::ActorStateDisabledIn addActorStateDisabledIn();
            void removeActorStateDisabledIn();
            std::optional<Ent::Gen2::ActorStateDisabledOut> ActorStateDisabledOut();
            Ent::Gen2::ActorStateDisabledOut addActorStateDisabledOut();
            void removeActorStateDisabledOut();
            std::optional<Ent::Gen2::ActorStateDodge3D> ActorStateDodge3D();
            Ent::Gen2::ActorStateDodge3D addActorStateDodge3D();
            void removeActorStateDodge3D();
            std::optional<Ent::Gen2::ActorStateDucking> ActorStateDucking();
            Ent::Gen2::ActorStateDucking addActorStateDucking();
            void removeActorStateDucking();
            std::optional<Ent::Gen2::ActorStateEnergyShooting> ActorStateEnergyShooting();
            Ent::Gen2::ActorStateEnergyShooting addActorStateEnergyShooting();
            void removeActorStateEnergyShooting();
            std::optional<Ent::Gen2::ActorStateExitingFly> ActorStateExitingFly();
            Ent::Gen2::ActorStateExitingFly addActorStateExitingFly();
            void removeActorStateExitingFly();
            std::optional<Ent::Gen2::ActorStateFlockingAttackFlocking> ActorStateFlockingAttackFlocking();
            Ent::Gen2::ActorStateFlockingAttackFlocking addActorStateFlockingAttackFlocking();
            void removeActorStateFlockingAttackFlocking();
            std::optional<Ent::Gen2::ActorStateFlockingChangingParams> ActorStateFlockingChangingParams();
            Ent::Gen2::ActorStateFlockingChangingParams addActorStateFlockingChangingParams();
            void removeActorStateFlockingChangingParams();
            std::optional<Ent::Gen2::ActorStateFlockingIndividualSpawning> ActorStateFlockingIndividualSpawning();
            Ent::Gen2::ActorStateFlockingIndividualSpawning addActorStateFlockingIndividualSpawning();
            void removeActorStateFlockingIndividualSpawning();
            std::optional<Ent::Gen2::ActorStateFlockingLiving> ActorStateFlockingLiving();
            Ent::Gen2::ActorStateFlockingLiving addActorStateFlockingLiving();
            void removeActorStateFlockingLiving();
            std::optional<Ent::Gen2::ActorStateFlockingRigidbodyBeingActive> ActorStateFlockingRigidbodyBeingActive();
            Ent::Gen2::ActorStateFlockingRigidbodyBeingActive addActorStateFlockingRigidbodyBeingActive();
            void removeActorStateFlockingRigidbodyBeingActive();
            std::optional<Ent::Gen2::ActorStateFluidSlowDown> ActorStateFluidSlowDown();
            Ent::Gen2::ActorStateFluidSlowDown addActorStateFluidSlowDown();
            void removeActorStateFluidSlowDown();
            std::optional<Ent::Gen2::ActorStateForceAgainstSlope> ActorStateForceAgainstSlope();
            Ent::Gen2::ActorStateForceAgainstSlope addActorStateForceAgainstSlope();
            void removeActorStateForceAgainstSlope();
            std::optional<Ent::Gen2::ActorStateHasNoBody> ActorStateHasNoBody();
            Ent::Gen2::ActorStateHasNoBody addActorStateHasNoBody();
            void removeActorStateHasNoBody();
            std::optional<Ent::Gen2::ActorStateHeld> ActorStateHeld();
            Ent::Gen2::ActorStateHeld addActorStateHeld();
            void removeActorStateHeld();
            std::optional<Ent::Gen2::ActorStateHitEnergyWall> ActorStateHitEnergyWall();
            Ent::Gen2::ActorStateHitEnergyWall addActorStateHitEnergyWall();
            void removeActorStateHitEnergyWall();
            std::optional<Ent::Gen2::ActorStateHoldingItem> ActorStateHoldingItem();
            Ent::Gen2::ActorStateHoldingItem addActorStateHoldingItem();
            void removeActorStateHoldingItem();
            std::optional<Ent::Gen2::ActorStateIKConstraint> ActorStateIKConstraint();
            Ent::Gen2::ActorStateIKConstraint addActorStateIKConstraint();
            void removeActorStateIKConstraint();
            std::optional<Ent::Gen2::ActorStateInvincible> ActorStateInvincible();
            Ent::Gen2::ActorStateInvincible addActorStateInvincible();
            void removeActorStateInvincible();
            std::optional<Ent::Gen2::ActorStateLeavingLava> ActorStateLeavingLava();
            Ent::Gen2::ActorStateLeavingLava addActorStateLeavingLava();
            void removeActorStateLeavingLava();
            std::optional<Ent::Gen2::ActorStateLosingOxygen> ActorStateLosingOxygen();
            Ent::Gen2::ActorStateLosingOxygen addActorStateLosingOxygen();
            void removeActorStateLosingOxygen();
            std::optional<Ent::Gen2::ActorStateMeetingLava> ActorStateMeetingLava();
            Ent::Gen2::ActorStateMeetingLava addActorStateMeetingLava();
            void removeActorStateMeetingLava();
            std::optional<Ent::Gen2::ActorStateMoveAlongBezier> ActorStateMoveAlongBezier();
            Ent::Gen2::ActorStateMoveAlongBezier addActorStateMoveAlongBezier();
            void removeActorStateMoveAlongBezier();
            std::optional<Ent::Gen2::ActorStateMovingClamber> ActorStateMovingClamber();
            Ent::Gen2::ActorStateMovingClamber addActorStateMovingClamber();
            void removeActorStateMovingClamber();
            std::optional<Ent::Gen2::ActorStateMovingDive> ActorStateMovingDive();
            Ent::Gen2::ActorStateMovingDive addActorStateMovingDive();
            void removeActorStateMovingDive();
            std::optional<Ent::Gen2::ActorStateMovingFall> ActorStateMovingFall();
            Ent::Gen2::ActorStateMovingFall addActorStateMovingFall();
            void removeActorStateMovingFall();
            std::optional<Ent::Gen2::ActorStateMovingFly> ActorStateMovingFly();
            Ent::Gen2::ActorStateMovingFly addActorStateMovingFly();
            void removeActorStateMovingFly();
            std::optional<Ent::Gen2::ActorStateMovingProne> ActorStateMovingProne();
            Ent::Gen2::ActorStateMovingProne addActorStateMovingProne();
            void removeActorStateMovingProne();
            std::optional<Ent::Gen2::ActorStateMovingRide> ActorStateMovingRide();
            Ent::Gen2::ActorStateMovingRide addActorStateMovingRide();
            void removeActorStateMovingRide();
            std::optional<Ent::Gen2::ActorStateMovingStandUp> ActorStateMovingStandUp();
            Ent::Gen2::ActorStateMovingStandUp addActorStateMovingStandUp();
            void removeActorStateMovingStandUp();
            std::optional<Ent::Gen2::ActorStateMovingSwim> ActorStateMovingSwim();
            Ent::Gen2::ActorStateMovingSwim addActorStateMovingSwim();
            void removeActorStateMovingSwim();
            std::optional<Ent::Gen2::ActorStateNavigationMesh> ActorStateNavigationMesh();
            Ent::Gen2::ActorStateNavigationMesh addActorStateNavigationMesh();
            void removeActorStateNavigationMesh();
            std::optional<Ent::Gen2::ActorStatePossessFlocking> ActorStatePossessFlocking();
            Ent::Gen2::ActorStatePossessFlocking addActorStatePossessFlocking();
            void removeActorStatePossessFlocking();
            std::optional<Ent::Gen2::ActorStatePossessGPE> ActorStatePossessGPE();
            Ent::Gen2::ActorStatePossessGPE addActorStatePossessGPE();
            void removeActorStatePossessGPE();
            std::optional<Ent::Gen2::ActorStateReactingLava> ActorStateReactingLava();
            Ent::Gen2::ActorStateReactingLava addActorStateReactingLava();
            void removeActorStateReactingLava();
            std::optional<Ent::Gen2::ActorStateRecover> ActorStateRecover();
            Ent::Gen2::ActorStateRecover addActorStateRecover();
            void removeActorStateRecover();
            std::optional<Ent::Gen2::ActorStateRequestingHealing> ActorStateRequestingHealing();
            Ent::Gen2::ActorStateRequestingHealing addActorStateRequestingHealing();
            void removeActorStateRequestingHealing();
            std::optional<Ent::Gen2::ActorStateRequestingWaiting> ActorStateRequestingWaiting();
            Ent::Gen2::ActorStateRequestingWaiting addActorStateRequestingWaiting();
            void removeActorStateRequestingWaiting();
            std::optional<Ent::Gen2::ActorStateScreaming> ActorStateScreaming();
            Ent::Gen2::ActorStateScreaming addActorStateScreaming();
            void removeActorStateScreaming();
            std::optional<Ent::Gen2::ActorStateSendMission> ActorStateSendMission();
            Ent::Gen2::ActorStateSendMission addActorStateSendMission();
            void removeActorStateSendMission();
            std::optional<Ent::Gen2::ActorStateShamanItemLiving> ActorStateShamanItemLiving();
            Ent::Gen2::ActorStateShamanItemLiving addActorStateShamanItemLiving();
            void removeActorStateShamanItemLiving();
            std::optional<Ent::Gen2::ActorStateShamanItemPartState> ActorStateShamanItemPartState();
            Ent::Gen2::ActorStateShamanItemPartState addActorStateShamanItemPartState();
            void removeActorStateShamanItemPartState();
            std::optional<Ent::Gen2::ActorStateShapeshift> ActorStateShapeshift();
            Ent::Gen2::ActorStateShapeshift addActorStateShapeshift();
            void removeActorStateShapeshift();
            std::optional<Ent::Gen2::ActorStateShootingFlow> ActorStateShootingFlow();
            Ent::Gen2::ActorStateShootingFlow addActorStateShootingFlow();
            void removeActorStateShootingFlow();
            std::optional<Ent::Gen2::ActorStateSink> ActorStateSink();
            Ent::Gen2::ActorStateSink addActorStateSink();
            void removeActorStateSink();
            std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpRequest> ActorStateSkeletonPartPickUpRequest();
            Ent::Gen2::ActorStateSkeletonPartPickUpRequest addActorStateSkeletonPartPickUpRequest();
            void removeActorStateSkeletonPartPickUpRequest();
            std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpState> ActorStateSkeletonPartPickUpState();
            Ent::Gen2::ActorStateSkeletonPartPickUpState addActorStateSkeletonPartPickUpState();
            void removeActorStateSkeletonPartPickUpState();
            std::optional<Ent::Gen2::ActorStateSleeping> ActorStateSleeping();
            Ent::Gen2::ActorStateSleeping addActorStateSleeping();
            void removeActorStateSleeping();
            std::optional<Ent::Gen2::ActorStateSlope> ActorStateSlope();
            Ent::Gen2::ActorStateSlope addActorStateSlope();
            void removeActorStateSlope();
            std::optional<Ent::Gen2::ActorStateSoulRespawn> ActorStateSoulRespawn();
            Ent::Gen2::ActorStateSoulRespawn addActorStateSoulRespawn();
            void removeActorStateSoulRespawn();
            std::optional<Ent::Gen2::ActorStateSoulWaitingToRespawn> ActorStateSoulWaitingToRespawn();
            Ent::Gen2::ActorStateSoulWaitingToRespawn addActorStateSoulWaitingToRespawn();
            void removeActorStateSoulWaitingToRespawn();
            std::optional<Ent::Gen2::ActorStateSpeedMultiplier> ActorStateSpeedMultiplier();
            Ent::Gen2::ActorStateSpeedMultiplier addActorStateSpeedMultiplier();
            void removeActorStateSpeedMultiplier();
            std::optional<Ent::Gen2::ActorStateStopAttitudeAggressive> ActorStateStopAttitudeAggressive();
            Ent::Gen2::ActorStateStopAttitudeAggressive addActorStateStopAttitudeAggressive();
            void removeActorStateStopAttitudeAggressive();
            std::optional<Ent::Gen2::ActorStateTaunting> ActorStateTaunting();
            Ent::Gen2::ActorStateTaunting addActorStateTaunting();
            void removeActorStateTaunting();
            std::optional<Ent::Gen2::ActorStateTeleport> ActorStateTeleport();
            Ent::Gen2::ActorStateTeleport addActorStateTeleport();
            void removeActorStateTeleport();
            std::optional<Ent::Gen2::ActorStateTeleportToTarget> ActorStateTeleportToTarget();
            Ent::Gen2::ActorStateTeleportToTarget addActorStateTeleportToTarget();
            void removeActorStateTeleportToTarget();
            std::optional<Ent::Gen2::ActorStateTeleportWhileMoving> ActorStateTeleportWhileMoving();
            Ent::Gen2::ActorStateTeleportWhileMoving addActorStateTeleportWhileMoving();
            void removeActorStateTeleportWhileMoving();
            std::optional<Ent::Gen2::ActorStateTryEquipShamanStaff> ActorStateTryEquipShamanStaff();
            Ent::Gen2::ActorStateTryEquipShamanStaff addActorStateTryEquipShamanStaff();
            void removeActorStateTryEquipShamanStaff();
            std::optional<Ent::Gen2::ActorStateTryUpgradeShamanStaff> ActorStateTryUpgradeShamanStaff();
            Ent::Gen2::ActorStateTryUpgradeShamanStaff addActorStateTryUpgradeShamanStaff();
            void removeActorStateTryUpgradeShamanStaff();
            std::optional<Ent::Gen2::EntityStateAboutToBeHatched> EntityStateAboutToBeHatched();
            Ent::Gen2::EntityStateAboutToBeHatched addEntityStateAboutToBeHatched();
            void removeEntityStateAboutToBeHatched();
            std::optional<Ent::Gen2::EntityStateAerialJump> EntityStateAerialJump();
            Ent::Gen2::EntityStateAerialJump addEntityStateAerialJump();
            void removeEntityStateAerialJump();
            std::optional<Ent::Gen2::EntityStateAimAt> EntityStateAimAt();
            Ent::Gen2::EntityStateAimAt addEntityStateAimAt();
            void removeEntityStateAimAt();
            std::optional<Ent::Gen2::EntityStateAirControl> EntityStateAirControl();
            Ent::Gen2::EntityStateAirControl addEntityStateAirControl();
            void removeEntityStateAirControl();
            std::optional<Ent::Gen2::EntityStateApplyExtraLife> EntityStateApplyExtraLife();
            Ent::Gen2::EntityStateApplyExtraLife addEntityStateApplyExtraLife();
            void removeEntityStateApplyExtraLife();
            std::optional<Ent::Gen2::EntityStateAskStaffGuide> EntityStateAskStaffGuide();
            Ent::Gen2::EntityStateAskStaffGuide addEntityStateAskStaffGuide();
            void removeEntityStateAskStaffGuide();
            std::optional<Ent::Gen2::EntityStateAttackDive> EntityStateAttackDive();
            Ent::Gen2::EntityStateAttackDive addEntityStateAttackDive();
            void removeEntityStateAttackDive();
            std::optional<Ent::Gen2::EntityStateAttitudeGroggy> EntityStateAttitudeGroggy();
            Ent::Gen2::EntityStateAttitudeGroggy addEntityStateAttitudeGroggy();
            void removeEntityStateAttitudeGroggy();
            std::optional<Ent::Gen2::EntityStateBackwardDodge> EntityStateBackwardDodge();
            Ent::Gen2::EntityStateBackwardDodge addEntityStateBackwardDodge();
            void removeEntityStateBackwardDodge();
            std::optional<Ent::Gen2::EntityStateBackwardLand> EntityStateBackwardLand();
            Ent::Gen2::EntityStateBackwardLand addEntityStateBackwardLand();
            void removeEntityStateBackwardLand();
            std::optional<Ent::Gen2::EntityStateBeingBlockedByVine> EntityStateBeingBlockedByVine();
            Ent::Gen2::EntityStateBeingBlockedByVine addEntityStateBeingBlockedByVine();
            void removeEntityStateBeingBlockedByVine();
            std::optional<Ent::Gen2::EntityStateBeingInReeds> EntityStateBeingInReeds();
            Ent::Gen2::EntityStateBeingInReeds addEntityStateBeingInReeds();
            void removeEntityStateBeingInReeds();
            std::optional<Ent::Gen2::EntityStateBeingLinked> EntityStateBeingLinked();
            Ent::Gen2::EntityStateBeingLinked addEntityStateBeingLinked();
            void removeEntityStateBeingLinked();
            std::optional<Ent::Gen2::EntityStateBeingOnSlope> EntityStateBeingOnSlope();
            Ent::Gen2::EntityStateBeingOnSlope addEntityStateBeingOnSlope();
            void removeEntityStateBeingOnSlope();
            std::optional<Ent::Gen2::EntityStateBeingOnSpike> EntityStateBeingOnSpike();
            Ent::Gen2::EntityStateBeingOnSpike addEntityStateBeingOnSpike();
            void removeEntityStateBeingOnSpike();
            std::optional<Ent::Gen2::EntityStateBite> EntityStateBite();
            Ent::Gen2::EntityStateBite addEntityStateBite();
            void removeEntityStateBite();
            std::optional<Ent::Gen2::EntityStateBiteAttack> EntityStateBiteAttack();
            Ent::Gen2::EntityStateBiteAttack addEntityStateBiteAttack();
            void removeEntityStateBiteAttack();
            std::optional<Ent::Gen2::EntityStateBiteIn> EntityStateBiteIn();
            Ent::Gen2::EntityStateBiteIn addEntityStateBiteIn();
            void removeEntityStateBiteIn();
            std::optional<Ent::Gen2::EntityStateBiteOut> EntityStateBiteOut();
            Ent::Gen2::EntityStateBiteOut addEntityStateBiteOut();
            void removeEntityStateBiteOut();
            std::optional<Ent::Gen2::EntityStateBitten> EntityStateBitten();
            Ent::Gen2::EntityStateBitten addEntityStateBitten();
            void removeEntityStateBitten();
            std::optional<Ent::Gen2::EntityStateBittenDefense> EntityStateBittenDefense();
            Ent::Gen2::EntityStateBittenDefense addEntityStateBittenDefense();
            void removeEntityStateBittenDefense();
            std::optional<Ent::Gen2::EntityStateBoidsHomePos> EntityStateBoidsHomePos();
            Ent::Gen2::EntityStateBoidsHomePos addEntityStateBoidsHomePos();
            void removeEntityStateBoidsHomePos();
            std::optional<Ent::Gen2::EntityStateBounce> EntityStateBounce();
            Ent::Gen2::EntityStateBounce addEntityStateBounce();
            void removeEntityStateBounce();
            std::optional<Ent::Gen2::EntityStateBounceLand> EntityStateBounceLand();
            Ent::Gen2::EntityStateBounceLand addEntityStateBounceLand();
            void removeEntityStateBounceLand();
            std::optional<Ent::Gen2::EntityStateBreakableBreaking> EntityStateBreakableBreaking();
            Ent::Gen2::EntityStateBreakableBreaking addEntityStateBreakableBreaking();
            void removeEntityStateBreakableBreaking();
            std::optional<Ent::Gen2::EntityStateBreakableBroken> EntityStateBreakableBroken();
            Ent::Gen2::EntityStateBreakableBroken addEntityStateBreakableBroken();
            void removeEntityStateBreakableBroken();
            std::optional<Ent::Gen2::EntityStateBreakableEntire> EntityStateBreakableEntire();
            Ent::Gen2::EntityStateBreakableEntire addEntityStateBreakableEntire();
            void removeEntityStateBreakableEntire();
            std::optional<Ent::Gen2::EntityStateBridgeAttached> EntityStateBridgeAttached();
            Ent::Gen2::EntityStateBridgeAttached addEntityStateBridgeAttached();
            void removeEntityStateBridgeAttached();
            std::optional<Ent::Gen2::EntityStateBridgeAttracted> EntityStateBridgeAttracted();
            Ent::Gen2::EntityStateBridgeAttracted addEntityStateBridgeAttracted();
            void removeEntityStateBridgeAttracted();
            std::optional<Ent::Gen2::EntityStateBridgeBeingControlled> EntityStateBridgeBeingControlled();
            Ent::Gen2::EntityStateBridgeBeingControlled addEntityStateBridgeBeingControlled();
            void removeEntityStateBridgeBeingControlled();
            std::optional<Ent::Gen2::EntityStateCallAndMountSpiritAnimal> EntityStateCallAndMountSpiritAnimal();
            Ent::Gen2::EntityStateCallAndMountSpiritAnimal addEntityStateCallAndMountSpiritAnimal();
            void removeEntityStateCallAndMountSpiritAnimal();
            std::optional<Ent::Gen2::EntityStateCanNotBePerceived> EntityStateCanNotBePerceived();
            Ent::Gen2::EntityStateCanNotBePerceived addEntityStateCanNotBePerceived();
            void removeEntityStateCanNotBePerceived();
            std::optional<Ent::Gen2::EntityStateChargeMode> EntityStateChargeMode();
            Ent::Gen2::EntityStateChargeMode addEntityStateChargeMode();
            void removeEntityStateChargeMode();
            std::optional<Ent::Gen2::EntityStateChargedJump> EntityStateChargedJump();
            Ent::Gen2::EntityStateChargedJump addEntityStateChargedJump();
            void removeEntityStateChargedJump();
            std::optional<Ent::Gen2::EntityStateChargingJump> EntityStateChargingJump();
            Ent::Gen2::EntityStateChargingJump addEntityStateChargingJump();
            void removeEntityStateChargingJump();
            std::optional<Ent::Gen2::EntityStateCinematicCompleted> EntityStateCinematicCompleted();
            Ent::Gen2::EntityStateCinematicCompleted addEntityStateCinematicCompleted();
            void removeEntityStateCinematicCompleted();
            std::optional<Ent::Gen2::EntityStateCinematicReady> EntityStateCinematicReady();
            Ent::Gen2::EntityStateCinematicReady addEntityStateCinematicReady();
            void removeEntityStateCinematicReady();
            std::optional<Ent::Gen2::EntityStateClassicDodge> EntityStateClassicDodge();
            Ent::Gen2::EntityStateClassicDodge addEntityStateClassicDodge();
            void removeEntityStateClassicDodge();
            std::optional<Ent::Gen2::EntityStateClassicLand> EntityStateClassicLand();
            Ent::Gen2::EntityStateClassicLand addEntityStateClassicLand();
            void removeEntityStateClassicLand();
            std::optional<Ent::Gen2::EntityStateClimbWaterfall> EntityStateClimbWaterfall();
            Ent::Gen2::EntityStateClimbWaterfall addEntityStateClimbWaterfall();
            void removeEntityStateClimbWaterfall();
            std::optional<Ent::Gen2::EntityStateClimbWaterfallImpulse> EntityStateClimbWaterfallImpulse();
            Ent::Gen2::EntityStateClimbWaterfallImpulse addEntityStateClimbWaterfallImpulse();
            void removeEntityStateClimbWaterfallImpulse();
            std::optional<Ent::Gen2::EntityStateCollectVertebrae> EntityStateCollectVertebrae();
            Ent::Gen2::EntityStateCollectVertebrae addEntityStateCollectVertebrae();
            void removeEntityStateCollectVertebrae();
            std::optional<Ent::Gen2::EntityStateCombat> EntityStateCombat();
            Ent::Gen2::EntityStateCombat addEntityStateCombat();
            void removeEntityStateCombat();
            std::optional<Ent::Gen2::EntityStateConstrainedInput> EntityStateConstrainedInput();
            Ent::Gen2::EntityStateConstrainedInput addEntityStateConstrainedInput();
            void removeEntityStateConstrainedInput();
            std::optional<Ent::Gen2::EntityStateConstrainedMove> EntityStateConstrainedMove();
            Ent::Gen2::EntityStateConstrainedMove addEntityStateConstrainedMove();
            void removeEntityStateConstrainedMove();
            std::optional<Ent::Gen2::EntityStateControlGPE> EntityStateControlGPE();
            Ent::Gen2::EntityStateControlGPE addEntityStateControlGPE();
            void removeEntityStateControlGPE();
            std::optional<Ent::Gen2::EntityStateCreatureHatching> EntityStateCreatureHatching();
            Ent::Gen2::EntityStateCreatureHatching addEntityStateCreatureHatching();
            void removeEntityStateCreatureHatching();
            std::optional<Ent::Gen2::EntityStateCreatureProfile> EntityStateCreatureProfile();
            Ent::Gen2::EntityStateCreatureProfile addEntityStateCreatureProfile();
            void removeEntityStateCreatureProfile();
            std::optional<Ent::Gen2::EntityStateDamageLand> EntityStateDamageLand();
            Ent::Gen2::EntityStateDamageLand addEntityStateDamageLand();
            void removeEntityStateDamageLand();
            std::optional<Ent::Gen2::EntityStateDeathLand> EntityStateDeathLand();
            Ent::Gen2::EntityStateDeathLand addEntityStateDeathLand();
            void removeEntityStateDeathLand();
            std::optional<Ent::Gen2::EntityStateDisablePerceptionRequest> EntityStateDisablePerceptionRequest();
            Ent::Gen2::EntityStateDisablePerceptionRequest addEntityStateDisablePerceptionRequest();
            void removeEntityStateDisablePerceptionRequest();
            std::optional<Ent::Gen2::EntityStateDisabledVertebrae> EntityStateDisabledVertebrae();
            Ent::Gen2::EntityStateDisabledVertebrae addEntityStateDisabledVertebrae();
            void removeEntityStateDisabledVertebrae();
            std::optional<Ent::Gen2::EntityStateDisguise> EntityStateDisguise();
            Ent::Gen2::EntityStateDisguise addEntityStateDisguise();
            void removeEntityStateDisguise();
            std::optional<Ent::Gen2::EntityStateDisplayHatchingCost> EntityStateDisplayHatchingCost();
            Ent::Gen2::EntityStateDisplayHatchingCost addEntityStateDisplayHatchingCost();
            void removeEntityStateDisplayHatchingCost();
            std::optional<Ent::Gen2::EntityStateDodgeCooldown> EntityStateDodgeCooldown();
            Ent::Gen2::EntityStateDodgeCooldown addEntityStateDodgeCooldown();
            void removeEntityStateDodgeCooldown();
            std::optional<Ent::Gen2::EntityStateEjectedLand> EntityStateEjectedLand();
            Ent::Gen2::EntityStateEjectedLand addEntityStateEjectedLand();
            void removeEntityStateEjectedLand();
            std::optional<Ent::Gen2::EntityStateEnergyRootAbortHatching> EntityStateEnergyRootAbortHatching();
            Ent::Gen2::EntityStateEnergyRootAbortHatching addEntityStateEnergyRootAbortHatching();
            void removeEntityStateEnergyRootAbortHatching();
            std::optional<Ent::Gen2::EntityStateEnergyRootHatching> EntityStateEnergyRootHatching();
            Ent::Gen2::EntityStateEnergyRootHatching addEntityStateEnergyRootHatching();
            void removeEntityStateEnergyRootHatching();
            std::optional<Ent::Gen2::EntityStateEnergySide> EntityStateEnergySide();
            Ent::Gen2::EntityStateEnergySide addEntityStateEnergySide();
            void removeEntityStateEnergySide();
            std::optional<Ent::Gen2::EntityStateEnergySpoutState> EntityStateEnergySpoutState();
            Ent::Gen2::EntityStateEnergySpoutState addEntityStateEnergySpoutState();
            void removeEntityStateEnergySpoutState();
            std::optional<Ent::Gen2::EntityStateExtraLife> EntityStateExtraLife();
            Ent::Gen2::EntityStateExtraLife addEntityStateExtraLife();
            void removeEntityStateExtraLife();
            std::optional<Ent::Gen2::EntityStateFailingOrder> EntityStateFailingOrder();
            Ent::Gen2::EntityStateFailingOrder addEntityStateFailingOrder();
            void removeEntityStateFailingOrder();
            std::optional<Ent::Gen2::EntityStateFall> EntityStateFall();
            Ent::Gen2::EntityStateFall addEntityStateFall();
            void removeEntityStateFall();
            std::optional<Ent::Gen2::EntityStateFallDying> EntityStateFallDying();
            Ent::Gen2::EntityStateFallDying addEntityStateFallDying();
            void removeEntityStateFallDying();
            std::optional<Ent::Gen2::EntityStateFallInjured> EntityStateFallInjured();
            Ent::Gen2::EntityStateFallInjured addEntityStateFallInjured();
            void removeEntityStateFallInjured();
            std::optional<Ent::Gen2::EntityStateFallSafe> EntityStateFallSafe();
            Ent::Gen2::EntityStateFallSafe addEntityStateFallSafe();
            void removeEntityStateFallSafe();
            std::optional<Ent::Gen2::EntityStateFastRun> EntityStateFastRun();
            Ent::Gen2::EntityStateFastRun addEntityStateFastRun();
            void removeEntityStateFastRun();
            std::optional<Ent::Gen2::EntityStateForceCanBeTargeted> EntityStateForceCanBeTargeted();
            Ent::Gen2::EntityStateForceCanBeTargeted addEntityStateForceCanBeTargeted();
            void removeEntityStateForceCanBeTargeted();
            std::optional<Ent::Gen2::EntityStateGrab> EntityStateGrab();
            Ent::Gen2::EntityStateGrab addEntityStateGrab();
            void removeEntityStateGrab();
            std::optional<Ent::Gen2::EntityStateGrabAttack> EntityStateGrabAttack();
            Ent::Gen2::EntityStateGrabAttack addEntityStateGrabAttack();
            void removeEntityStateGrabAttack();
            std::optional<Ent::Gen2::EntityStateGrabIn> EntityStateGrabIn();
            Ent::Gen2::EntityStateGrabIn addEntityStateGrabIn();
            void removeEntityStateGrabIn();
            std::optional<Ent::Gen2::EntityStateGrabOut> EntityStateGrabOut();
            Ent::Gen2::EntityStateGrabOut addEntityStateGrabOut();
            void removeEntityStateGrabOut();
            std::optional<Ent::Gen2::EntityStateGrabbed> EntityStateGrabbed();
            Ent::Gen2::EntityStateGrabbed addEntityStateGrabbed();
            void removeEntityStateGrabbed();
            std::optional<Ent::Gen2::EntityStateGrabbedIn> EntityStateGrabbedIn();
            Ent::Gen2::EntityStateGrabbedIn addEntityStateGrabbedIn();
            void removeEntityStateGrabbedIn();
            std::optional<Ent::Gen2::EntityStateGrabbedOut> EntityStateGrabbedOut();
            Ent::Gen2::EntityStateGrabbedOut addEntityStateGrabbedOut();
            void removeEntityStateGrabbedOut();
            std::optional<Ent::Gen2::EntityStateGrasp> EntityStateGrasp();
            Ent::Gen2::EntityStateGrasp addEntityStateGrasp();
            void removeEntityStateGrasp();
            std::optional<Ent::Gen2::EntityStateGroundedJump> EntityStateGroundedJump();
            Ent::Gen2::EntityStateGroundedJump addEntityStateGroundedJump();
            void removeEntityStateGroundedJump();
            std::optional<Ent::Gen2::EntityStateHide> EntityStateHide();
            Ent::Gen2::EntityStateHide addEntityStateHide();
            void removeEntityStateHide();
            std::optional<Ent::Gen2::EntityStateHideIn> EntityStateHideIn();
            Ent::Gen2::EntityStateHideIn addEntityStateHideIn();
            void removeEntityStateHideIn();
            std::optional<Ent::Gen2::EntityStateHideOut> EntityStateHideOut();
            Ent::Gen2::EntityStateHideOut addEntityStateHideOut();
            void removeEntityStateHideOut();
            std::optional<Ent::Gen2::EntityStateHintFull> EntityStateHintFull();
            Ent::Gen2::EntityStateHintFull addEntityStateHintFull();
            void removeEntityStateHintFull();
            std::optional<Ent::Gen2::EntityStateHintLight> EntityStateHintLight();
            Ent::Gen2::EntityStateHintLight addEntityStateHintLight();
            void removeEntityStateHintLight();
            std::optional<Ent::Gen2::EntityStateHintNone> EntityStateHintNone();
            Ent::Gen2::EntityStateHintNone addEntityStateHintNone();
            void removeEntityStateHintNone();
            std::optional<Ent::Gen2::EntityStateHitWall> EntityStateHitWall();
            Ent::Gen2::EntityStateHitWall addEntityStateHitWall();
            void removeEntityStateHitWall();
            std::optional<Ent::Gen2::EntityStateHoldingStaffVertebras> EntityStateHoldingStaffVertebras();
            Ent::Gen2::EntityStateHoldingStaffVertebras addEntityStateHoldingStaffVertebras();
            void removeEntityStateHoldingStaffVertebras();
            std::optional<Ent::Gen2::EntityStateImmersedJump> EntityStateImmersedJump();
            Ent::Gen2::EntityStateImmersedJump addEntityStateImmersedJump();
            void removeEntityStateImmersedJump();
            std::optional<Ent::Gen2::EntityStateInVertebraeArea> EntityStateInVertebraeArea();
            Ent::Gen2::EntityStateInVertebraeArea addEntityStateInVertebraeArea();
            void removeEntityStateInVertebraeArea();
            std::optional<Ent::Gen2::EntityStateIncapacitated> EntityStateIncapacitated();
            Ent::Gen2::EntityStateIncapacitated addEntityStateIncapacitated();
            void removeEntityStateIncapacitated();
            std::optional<Ent::Gen2::EntityStateInconvertible> EntityStateInconvertible();
            Ent::Gen2::EntityStateInconvertible addEntityStateInconvertible();
            void removeEntityStateInconvertible();
            std::optional<Ent::Gen2::EntityStateInjured> EntityStateInjured();
            Ent::Gen2::EntityStateInjured addEntityStateInjured();
            void removeEntityStateInjured();
            std::optional<Ent::Gen2::EntityStateInteractedGPE> EntityStateInteractedGPE();
            Ent::Gen2::EntityStateInteractedGPE addEntityStateInteractedGPE();
            void removeEntityStateInteractedGPE();
            std::optional<Ent::Gen2::EntityStateJumpHeightMultiplier> EntityStateJumpHeightMultiplier();
            Ent::Gen2::EntityStateJumpHeightMultiplier addEntityStateJumpHeightMultiplier();
            void removeEntityStateJumpHeightMultiplier();
            std::optional<Ent::Gen2::EntityStateJustStarted> EntityStateJustStarted();
            Ent::Gen2::EntityStateJustStarted addEntityStateJustStarted();
            void removeEntityStateJustStarted();
            std::optional<Ent::Gen2::EntityStateLateralDodge> EntityStateLateralDodge();
            Ent::Gen2::EntityStateLateralDodge addEntityStateLateralDodge();
            void removeEntityStateLateralDodge();
            std::optional<Ent::Gen2::EntityStateLateralLand> EntityStateLateralLand();
            Ent::Gen2::EntityStateLateralLand addEntityStateLateralLand();
            void removeEntityStateLateralLand();
            std::optional<Ent::Gen2::EntityStateManageChildEntityPool> EntityStateManageChildEntityPool();
            Ent::Gen2::EntityStateManageChildEntityPool addEntityStateManageChildEntityPool();
            void removeEntityStateManageChildEntityPool();
            std::optional<Ent::Gen2::EntityStateMask> EntityStateMask();
            Ent::Gen2::EntityStateMask addEntityStateMask();
            void removeEntityStateMask();
            std::optional<Ent::Gen2::EntityStateMeditateToInteract> EntityStateMeditateToInteract();
            Ent::Gen2::EntityStateMeditateToInteract addEntityStateMeditateToInteract();
            void removeEntityStateMeditateToInteract();
            std::optional<Ent::Gen2::EntityStateMineRespawning> EntityStateMineRespawning();
            Ent::Gen2::EntityStateMineRespawning addEntityStateMineRespawning();
            void removeEntityStateMineRespawning();
            std::optional<Ent::Gen2::EntityStateMineScaling> EntityStateMineScaling();
            Ent::Gen2::EntityStateMineScaling addEntityStateMineScaling();
            void removeEntityStateMineScaling();
            std::optional<Ent::Gen2::EntityStateMotionConstrained> EntityStateMotionConstrained();
            Ent::Gen2::EntityStateMotionConstrained addEntityStateMotionConstrained();
            void removeEntityStateMotionConstrained();
            std::optional<Ent::Gen2::EntityStateMotionConstrainedLand> EntityStateMotionConstrainedLand();
            Ent::Gen2::EntityStateMotionConstrainedLand addEntityStateMotionConstrainedLand();
            void removeEntityStateMotionConstrainedLand();
            std::optional<Ent::Gen2::EntityStateMoveOnOffMeshLink> EntityStateMoveOnOffMeshLink();
            Ent::Gen2::EntityStateMoveOnOffMeshLink addEntityStateMoveOnOffMeshLink();
            void removeEntityStateMoveOnOffMeshLink();
            std::optional<Ent::Gen2::EntityStateOrderingAttack> EntityStateOrderingAttack();
            Ent::Gen2::EntityStateOrderingAttack addEntityStateOrderingAttack();
            void removeEntityStateOrderingAttack();
            std::optional<Ent::Gen2::EntityStateOrientedDrift> EntityStateOrientedDrift();
            Ent::Gen2::EntityStateOrientedDrift addEntityStateOrientedDrift();
            void removeEntityStateOrientedDrift();
            std::optional<Ent::Gen2::EntityStateParried> EntityStateParried();
            Ent::Gen2::EntityStateParried addEntityStateParried();
            void removeEntityStateParried();
            std::optional<Ent::Gen2::EntityStateParry> EntityStateParry();
            Ent::Gen2::EntityStateParry addEntityStateParry();
            void removeEntityStateParry();
            std::optional<Ent::Gen2::EntityStateParryCooldown> EntityStateParryCooldown();
            Ent::Gen2::EntityStateParryCooldown addEntityStateParryCooldown();
            void removeEntityStateParryCooldown();
            std::optional<Ent::Gen2::EntityStatePhysicsIdle> EntityStatePhysicsIdle();
            Ent::Gen2::EntityStatePhysicsIdle addEntityStatePhysicsIdle();
            void removeEntityStatePhysicsIdle();
            std::optional<Ent::Gen2::EntityStatePhysicsMove> EntityStatePhysicsMove();
            Ent::Gen2::EntityStatePhysicsMove addEntityStatePhysicsMove();
            void removeEntityStatePhysicsMove();
            std::optional<Ent::Gen2::EntityStatePickableDistributor> EntityStatePickableDistributor();
            Ent::Gen2::EntityStatePickableDistributor addEntityStatePickableDistributor();
            void removeEntityStatePickableDistributor();
            std::optional<Ent::Gen2::EntityStatePlayer> EntityStatePlayer();
            Ent::Gen2::EntityStatePlayer addEntityStatePlayer();
            void removeEntityStatePlayer();
            std::optional<Ent::Gen2::EntityStatePlungeLand> EntityStatePlungeLand();
            Ent::Gen2::EntityStatePlungeLand addEntityStatePlungeLand();
            void removeEntityStatePlungeLand();
            std::optional<Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh> EntityStatePrepareToHoldingOnToNavigationMesh();
            Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh addEntityStatePrepareToHoldingOnToNavigationMesh();
            void removeEntityStatePrepareToHoldingOnToNavigationMesh();
            std::optional<Ent::Gen2::EntityStateRaise> EntityStateRaise();
            Ent::Gen2::EntityStateRaise addEntityStateRaise();
            void removeEntityStateRaise();
            std::optional<Ent::Gen2::EntityStateReadyToGiveOrder> EntityStateReadyToGiveOrder();
            Ent::Gen2::EntityStateReadyToGiveOrder addEntityStateReadyToGiveOrder();
            void removeEntityStateReadyToGiveOrder();
            std::optional<Ent::Gen2::EntityStateRecoverLand> EntityStateRecoverLand();
            Ent::Gen2::EntityStateRecoverLand addEntityStateRecoverLand();
            void removeEntityStateRecoverLand();
            std::optional<Ent::Gen2::EntityStateRegainCapacity> EntityStateRegainCapacity();
            Ent::Gen2::EntityStateRegainCapacity addEntityStateRegainCapacity();
            void removeEntityStateRegainCapacity();
            std::optional<Ent::Gen2::EntityStateReserveMountSlots> EntityStateReserveMountSlots();
            Ent::Gen2::EntityStateReserveMountSlots addEntityStateReserveMountSlots();
            void removeEntityStateReserveMountSlots();
            std::optional<Ent::Gen2::EntityStateRespawn> EntityStateRespawn();
            Ent::Gen2::EntityStateRespawn addEntityStateRespawn();
            void removeEntityStateRespawn();
            std::optional<Ent::Gen2::EntityStateRespawnability> EntityStateRespawnability();
            Ent::Gen2::EntityStateRespawnability addEntityStateRespawnability();
            void removeEntityStateRespawnability();
            std::optional<Ent::Gen2::EntityStateRevive> EntityStateRevive();
            Ent::Gen2::EntityStateRevive addEntityStateRevive();
            void removeEntityStateRevive();
            std::optional<Ent::Gen2::EntityStateSavePointActivated> EntityStateSavePointActivated();
            Ent::Gen2::EntityStateSavePointActivated addEntityStateSavePointActivated();
            void removeEntityStateSavePointActivated();
            std::optional<Ent::Gen2::EntityStateSetSavePoint> EntityStateSetSavePoint();
            Ent::Gen2::EntityStateSetSavePoint addEntityStateSetSavePoint();
            void removeEntityStateSetSavePoint();
            std::optional<Ent::Gen2::EntityStateShootHatchingEnergy> EntityStateShootHatchingEnergy();
            Ent::Gen2::EntityStateShootHatchingEnergy addEntityStateShootHatchingEnergy();
            void removeEntityStateShootHatchingEnergy();
            std::optional<Ent::Gen2::EntityStateSlowMotion> EntityStateSlowMotion();
            Ent::Gen2::EntityStateSlowMotion addEntityStateSlowMotion();
            void removeEntityStateSlowMotion();
            std::optional<Ent::Gen2::EntityStateSnappedToHatchingTarget> EntityStateSnappedToHatchingTarget();
            Ent::Gen2::EntityStateSnappedToHatchingTarget addEntityStateSnappedToHatchingTarget();
            void removeEntityStateSnappedToHatchingTarget();
            std::optional<Ent::Gen2::EntityStateSoftCollide> EntityStateSoftCollide();
            Ent::Gen2::EntityStateSoftCollide addEntityStateSoftCollide();
            void removeEntityStateSoftCollide();
            std::optional<Ent::Gen2::EntityStateSpeedLimiter> EntityStateSpeedLimiter();
            Ent::Gen2::EntityStateSpeedLimiter addEntityStateSpeedLimiter();
            void removeEntityStateSpeedLimiter();
            std::optional<Ent::Gen2::EntityStateSpiritAnimalBeingCalled> EntityStateSpiritAnimalBeingCalled();
            Ent::Gen2::EntityStateSpiritAnimalBeingCalled addEntityStateSpiritAnimalBeingCalled();
            void removeEntityStateSpiritAnimalBeingCalled();
            std::optional<Ent::Gen2::EntityStateSpiritAnimalFleshForm> EntityStateSpiritAnimalFleshForm();
            Ent::Gen2::EntityStateSpiritAnimalFleshForm addEntityStateSpiritAnimalFleshForm();
            void removeEntityStateSpiritAnimalFleshForm();
            std::optional<Ent::Gen2::EntityStateSpiritAnimalSoulForm> EntityStateSpiritAnimalSoulForm();
            Ent::Gen2::EntityStateSpiritAnimalSoulForm addEntityStateSpiritAnimalSoulForm();
            void removeEntityStateSpiritAnimalSoulForm();
            std::optional<Ent::Gen2::EntityStateSpiritAttack> EntityStateSpiritAttack();
            Ent::Gen2::EntityStateSpiritAttack addEntityStateSpiritAttack();
            void removeEntityStateSpiritAttack();
            std::optional<Ent::Gen2::EntityStateSpiritAttacked> EntityStateSpiritAttacked();
            Ent::Gen2::EntityStateSpiritAttacked addEntityStateSpiritAttacked();
            void removeEntityStateSpiritAttacked();
            std::optional<Ent::Gen2::EntityStateSpiritShrineDisabled> EntityStateSpiritShrineDisabled();
            Ent::Gen2::EntityStateSpiritShrineDisabled addEntityStateSpiritShrineDisabled();
            void removeEntityStateSpiritShrineDisabled();
            std::optional<Ent::Gen2::EntityStateSpiritShrineEnabled> EntityStateSpiritShrineEnabled();
            Ent::Gen2::EntityStateSpiritShrineEnabled addEntityStateSpiritShrineEnabled();
            void removeEntityStateSpiritShrineEnabled();
            std::optional<Ent::Gen2::EntityStateStaffOwnedVertebras> EntityStateStaffOwnedVertebras();
            Ent::Gen2::EntityStateStaffOwnedVertebras addEntityStateStaffOwnedVertebras();
            void removeEntityStateStaffOwnedVertebras();
            std::optional<Ent::Gen2::EntityStateStaffVertebrasAutoRefill> EntityStateStaffVertebrasAutoRefill();
            Ent::Gen2::EntityStateStaffVertebrasAutoRefill addEntityStateStaffVertebrasAutoRefill();
            void removeEntityStateStaffVertebrasAutoRefill();
            std::optional<Ent::Gen2::EntityStateStalactiteFallen> EntityStateStalactiteFallen();
            Ent::Gen2::EntityStateStalactiteFallen addEntityStateStalactiteFallen();
            void removeEntityStateStalactiteFallen();
            std::optional<Ent::Gen2::EntityStateStalactiteReadyToFall> EntityStateStalactiteReadyToFall();
            Ent::Gen2::EntityStateStalactiteReadyToFall addEntityStateStalactiteReadyToFall();
            void removeEntityStateStalactiteReadyToFall();
            std::optional<Ent::Gen2::EntityStateStickedLand> EntityStateStickedLand();
            Ent::Gen2::EntityStateStickedLand addEntityStateStickedLand();
            void removeEntityStateStickedLand();
            std::optional<Ent::Gen2::EntityStateStrafeDodge> EntityStateStrafeDodge();
            Ent::Gen2::EntityStateStrafeDodge addEntityStateStrafeDodge();
            void removeEntityStateStrafeDodge();
            std::optional<Ent::Gen2::EntityStateStrongAttack> EntityStateStrongAttack();
            Ent::Gen2::EntityStateStrongAttack addEntityStateStrongAttack();
            void removeEntityStateStrongAttack();
            std::optional<Ent::Gen2::EntityStateStrongAttackCharged> EntityStateStrongAttackCharged();
            Ent::Gen2::EntityStateStrongAttackCharged addEntityStateStrongAttackCharged();
            void removeEntityStateStrongAttackCharged();
            std::optional<Ent::Gen2::EntityStateStrongAttackCharging> EntityStateStrongAttackCharging();
            Ent::Gen2::EntityStateStrongAttackCharging addEntityStateStrongAttackCharging();
            void removeEntityStateStrongAttackCharging();
            std::optional<Ent::Gen2::EntityStateStrongAttackJumped> EntityStateStrongAttackJumped();
            Ent::Gen2::EntityStateStrongAttackJumped addEntityStateStrongAttackJumped();
            void removeEntityStateStrongAttackJumped();
            std::optional<Ent::Gen2::EntityStateTakeDamageOnMount> EntityStateTakeDamageOnMount();
            Ent::Gen2::EntityStateTakeDamageOnMount addEntityStateTakeDamageOnMount();
            void removeEntityStateTakeDamageOnMount();
            std::optional<Ent::Gen2::EntityStateTooDeep> EntityStateTooDeep();
            Ent::Gen2::EntityStateTooDeep addEntityStateTooDeep();
            void removeEntityStateTooDeep();
            std::optional<Ent::Gen2::EntityStateTreeMetamorphosis> EntityStateTreeMetamorphosis();
            Ent::Gen2::EntityStateTreeMetamorphosis addEntityStateTreeMetamorphosis();
            void removeEntityStateTreeMetamorphosis();
            std::optional<Ent::Gen2::EntityStateTreeMetamorphosisUsingScale> EntityStateTreeMetamorphosisUsingScale();
            Ent::Gen2::EntityStateTreeMetamorphosisUsingScale addEntityStateTreeMetamorphosisUsingScale();
            void removeEntityStateTreeMetamorphosisUsingScale();
            std::optional<Ent::Gen2::EntityStateTreeSwitchTransition> EntityStateTreeSwitchTransition();
            Ent::Gen2::EntityStateTreeSwitchTransition addEntityStateTreeSwitchTransition();
            void removeEntityStateTreeSwitchTransition();
            std::optional<Ent::Gen2::EntityStateTreeTurretTargeting> EntityStateTreeTurretTargeting();
            Ent::Gen2::EntityStateTreeTurretTargeting addEntityStateTreeTurretTargeting();
            void removeEntityStateTreeTurretTargeting();
            std::optional<Ent::Gen2::EntityStateTriggerBeamTargetEvent> EntityStateTriggerBeamTargetEvent();
            Ent::Gen2::EntityStateTriggerBeamTargetEvent addEntityStateTriggerBeamTargetEvent();
            void removeEntityStateTriggerBeamTargetEvent();
            std::optional<Ent::Gen2::EntityStateTryUnmount> EntityStateTryUnmount();
            Ent::Gen2::EntityStateTryUnmount addEntityStateTryUnmount();
            void removeEntityStateTryUnmount();
            std::optional<Ent::Gen2::EntityStateUndergroundCavity> EntityStateUndergroundCavity();
            Ent::Gen2::EntityStateUndergroundCavity addEntityStateUndergroundCavity();
            void removeEntityStateUndergroundCavity();
            std::optional<Ent::Gen2::EntityStateUseAsActiveCheckpoint> EntityStateUseAsActiveCheckpoint();
            Ent::Gen2::EntityStateUseAsActiveCheckpoint addEntityStateUseAsActiveCheckpoint();
            void removeEntityStateUseAsActiveCheckpoint();
            std::optional<Ent::Gen2::EntityStateWaitToJumpAgain> EntityStateWaitToJumpAgain();
            Ent::Gen2::EntityStateWaitToJumpAgain addEntityStateWaitToJumpAgain();
            void removeEntityStateWaitToJumpAgain();
            std::optional<Ent::Gen2::EntityStateWallRun> EntityStateWallRun();
            Ent::Gen2::EntityStateWallRun addEntityStateWallRun();
            void removeEntityStateWallRun();
            std::optional<Ent::Gen2::EntityStateWallRunDrop> EntityStateWallRunDrop();
            Ent::Gen2::EntityStateWallRunDrop addEntityStateWallRunDrop();
            void removeEntityStateWallRunDrop();
            std::optional<Ent::Gen2::EntityStateWallRunJump> EntityStateWallRunJump();
            Ent::Gen2::EntityStateWallRunJump addEntityStateWallRunJump();
            void removeEntityStateWallRunJump();
            std::optional<Ent::Gen2::EntityStateWaterfallEndJump> EntityStateWaterfallEndJump();
            Ent::Gen2::EntityStateWaterfallEndJump addEntityStateWaterfallEndJump();
            void removeEntityStateWaterfallEndJump();
        };

        struct Object : HelperObject<Object> // Object
        {
            explicit Object(Ent::Property _node): HelperObject<Object>(std::move(_node)) {}
            static constexpr char schemaName[] = "Object";
            static Object load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Object(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Object loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Object(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Object create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Object(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Object makeInstanceOf()
            {
                return Object(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorStates ActorStates() const;
            Ent::Gen2::Color Color() const;
            Ent::Gen2::Object_Components Components() const;
            Ent::Gen2::Object_MaxActivationLevel MaxActivationLevel() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::String Thumbnail() const;
            Ent::Gen2::Bool __removed__() const;
            Ent::Gen2::String _comment() const;
        };

        struct UnitTestComponent : HelperObject<UnitTestComponent> // Object
        {
            explicit UnitTestComponent(Ent::Property _node): HelperObject<UnitTestComponent>(std::move(_node)) {}
            static constexpr char schemaName[] = "UnitTestComponent";
            static UnitTestComponent load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return UnitTestComponent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static UnitTestComponent loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return UnitTestComponent(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static UnitTestComponent create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return UnitTestComponent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            UnitTestComponent makeInstanceOf()
            {
                return UnitTestComponent(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Object Entity() const;
            Ent::Gen2::PrimitiveSet<ReviveSideEnum> EnumSet() const;
            Ent::Gen2::Position Position() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct Entity : HelperObject<Entity> // Object
        {
            explicit Entity(Ent::Property _node): HelperObject<Entity>(std::move(_node)) {}
            static constexpr char schemaName[] = "Entity";
            static Entity load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Entity(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Entity loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Entity(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Entity create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Entity(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Entity makeInstanceOf()
            {
                return Entity(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorStates ActorStates() const;
            Ent::Gen2::Color Color() const;
            Ent::Gen2::Components Components() const;
            Ent::Gen2::MaxActivationLevel MaxActivationLevel() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::String Thumbnail() const;
            Ent::Gen2::String _comment() const;
        };

        struct SubScene : HelperObject<SubScene> // Object
        {
            explicit SubScene(Ent::Property _node): HelperObject<SubScene>(std::move(_node)) {}
            static constexpr char schemaName[] = "SubScene";
            static SubScene load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SubScene(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SubScene loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SubScene(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SubScene create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SubScene(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SubScene makeInstanceOf()
            {
                return SubScene(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ObjectSet<char const*, Ent::Gen2::Entity> Embedded() const;
            Ent::Gen2::RuntimeMode RuntimeMode() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct Scene : HelperObject<Scene> // Object
        {
            explicit Scene(Ent::Property _node): HelperObject<Scene>(std::move(_node)) {}
            static constexpr char schemaName[] = "Scene";
            static Scene load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Scene(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Scene loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Scene(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Scene create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Scene(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Scene makeInstanceOf()
            {
                return Scene(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ObjectSet<char const*, Ent::Gen2::Entity> Objects() const;
            Ent::Gen2::Int Version() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateTeleport_Inputs : HelperObject<ActorStateTeleport_Inputs> // Object
        {
            explicit ActorStateTeleport_Inputs(Ent::Property _node): HelperObject<ActorStateTeleport_Inputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateTeleport::Inputs";
            static ActorStateTeleport_Inputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateTeleport_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateTeleport_Inputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateTeleport_Inputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateTeleport_Inputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateTeleport_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateTeleport_Inputs makeInstanceOf()
            {
                return ActorStateTeleport_Inputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Orientation Orientation() const;
            Ent::Gen2::Position Position() const;
            Ent::Gen2::Bool ResetCamera() const;
            Ent::Gen2::Bool TouchGround() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateTeleportWhileMovingInputs : HelperObject<ActorStateTeleportWhileMovingInputs> // Object
        {
            explicit ActorStateTeleportWhileMovingInputs(Ent::Property _node): HelperObject<ActorStateTeleportWhileMovingInputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateTeleportWhileMovingInputs";
            static ActorStateTeleportWhileMovingInputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateTeleportWhileMovingInputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateTeleportWhileMovingInputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateTeleportWhileMovingInputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateTeleportWhileMovingInputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateTeleportWhileMovingInputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateTeleportWhileMovingInputs makeInstanceOf()
            {
                return ActorStateTeleportWhileMovingInputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool aerialMount() const;
            Ent::Gen2::Vector3 direction() const;
            Ent::Gen2::Quat orientation() const;
            Ent::Gen2::Position position() const;
            Ent::Gen2::Float speedRequired() const;
        };

        struct ActorStateFlockingChangingParams_Params : HelperObject<ActorStateFlockingChangingParams_Params> // Object
        {
            explicit ActorStateFlockingChangingParams_Params(Ent::Property _node): HelperObject<ActorStateFlockingChangingParams_Params>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateFlockingChangingParams::Params";
            static ActorStateFlockingChangingParams_Params load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateFlockingChangingParams_Params(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateFlockingChangingParams_Params loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateFlockingChangingParams_Params(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateFlockingChangingParams_Params create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateFlockingChangingParams_Params(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateFlockingChangingParams_Params makeInstanceOf()
            {
                return ActorStateFlockingChangingParams_Params(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ApplyAfterCurrent() const;
            Ent::Gen2::Bool ApplyOnBud() const;
            Ent::Gen2::Float DelayRandom() const;
            Ent::Gen2::Float DelayStatic() const;
            Ent::Gen2::String Hash() const;
            Ent::Gen2::Int Layer() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateArbiterDecision : EnumPropHelper<ActorStateArbiterDecision, ActorStateArbiterDecisionEnum> // Enum
        {
            using Enum = ActorStateArbiterDecisionEnum;
            using PropHelper<ActorStateArbiterDecision, Enum>::operator=;
            explicit ActorStateArbiterDecision(Ent::Property _node): EnumPropHelper<ActorStateArbiterDecision, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateArbiterDecision";
            static constexpr char const* enumToString[] = {
                "CancelCurrent",
                "Coexist",
                "RejectNew",
                "Specific",
                "Wait",
                "ArbiterDecision_COUNT",
            };
        };
        inline char const* toString(ActorStateArbiterDecisionEnum value)
        {
            if(size_t(value) >= std::size(ActorStateArbiterDecision::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ActorStateArbiterDecision::enumToString[size_t(value)];
        }
        inline char const* toInternal(ActorStateArbiterDecisionEnum value) { return toString(value); }
        template<> inline ActorStateArbiterDecisionEnum strToEnum<ActorStateArbiterDecisionEnum>(char const* value)
        {
            return static_cast<ActorStateArbiterDecisionEnum>(details::indexInEnum(value, ActorStateArbiterDecision::enumToString));
        }

        struct ActorState : HelperObject<ActorState> // Object
        {
            explicit ActorState(Ent::Property _node): HelperObject<ActorState>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorState";
            static ActorState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorState makeInstanceOf()
            {
                return ActorState(getProperty().makeInstanceOf());
            }
        
        };

        struct EntityStateWaterfallEndJump : HelperObject<EntityStateWaterfallEndJump> // Object
        {
            explicit EntityStateWaterfallEndJump(Ent::Property _node): HelperObject<EntityStateWaterfallEndJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateWaterfallEndJump";
            static EntityStateWaterfallEndJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateWaterfallEndJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateWaterfallEndJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateWaterfallEndJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateWaterfallEndJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateWaterfallEndJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateWaterfallEndJump makeInstanceOf()
            {
                return EntityStateWaterfallEndJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateWallRunJump : HelperObject<EntityStateWallRunJump> // Object
        {
            explicit EntityStateWallRunJump(Ent::Property _node): HelperObject<EntityStateWallRunJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateWallRunJump";
            static EntityStateWallRunJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateWallRunJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateWallRunJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateWallRunJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateWallRunJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateWallRunJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateWallRunJump makeInstanceOf()
            {
                return EntityStateWallRunJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateWallRunDrop : HelperObject<EntityStateWallRunDrop> // Object
        {
            explicit EntityStateWallRunDrop(Ent::Property _node): HelperObject<EntityStateWallRunDrop>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateWallRunDrop";
            static EntityStateWallRunDrop load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateWallRunDrop(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateWallRunDrop loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateWallRunDrop(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateWallRunDrop create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateWallRunDrop(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateWallRunDrop makeInstanceOf()
            {
                return EntityStateWallRunDrop(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateWallRun : HelperObject<EntityStateWallRun> // Object
        {
            explicit EntityStateWallRun(Ent::Property _node): HelperObject<EntityStateWallRun>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateWallRun";
            static EntityStateWallRun load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateWallRun(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateWallRun loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateWallRun(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateWallRun create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateWallRun(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateWallRun makeInstanceOf()
            {
                return EntityStateWallRun(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateWaitToJumpAgain : HelperObject<EntityStateWaitToJumpAgain> // Object
        {
            explicit EntityStateWaitToJumpAgain(Ent::Property _node): HelperObject<EntityStateWaitToJumpAgain>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateWaitToJumpAgain";
            static EntityStateWaitToJumpAgain load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateWaitToJumpAgain(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateWaitToJumpAgain loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateWaitToJumpAgain(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateWaitToJumpAgain create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateWaitToJumpAgain(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateWaitToJumpAgain makeInstanceOf()
            {
                return EntityStateWaitToJumpAgain(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateUseAsActiveCheckpoint : HelperObject<EntityStateUseAsActiveCheckpoint> // Object
        {
            explicit EntityStateUseAsActiveCheckpoint(Ent::Property _node): HelperObject<EntityStateUseAsActiveCheckpoint>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateUseAsActiveCheckpoint";
            static EntityStateUseAsActiveCheckpoint load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateUseAsActiveCheckpoint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateUseAsActiveCheckpoint loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateUseAsActiveCheckpoint(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateUseAsActiveCheckpoint create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateUseAsActiveCheckpoint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateUseAsActiveCheckpoint makeInstanceOf()
            {
                return EntityStateUseAsActiveCheckpoint(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateUndergroundCavity : HelperObject<EntityStateUndergroundCavity> // Object
        {
            explicit EntityStateUndergroundCavity(Ent::Property _node): HelperObject<EntityStateUndergroundCavity>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateUndergroundCavity";
            static EntityStateUndergroundCavity load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateUndergroundCavity(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateUndergroundCavity loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateUndergroundCavity(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateUndergroundCavity create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateUndergroundCavity(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateUndergroundCavity makeInstanceOf()
            {
                return EntityStateUndergroundCavity(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateTryUnmount : HelperObject<EntityStateTryUnmount> // Object
        {
            explicit EntityStateTryUnmount(Ent::Property _node): HelperObject<EntityStateTryUnmount>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateTryUnmount";
            static EntityStateTryUnmount load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateTryUnmount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateTryUnmount loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateTryUnmount(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateTryUnmount create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateTryUnmount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateTryUnmount makeInstanceOf()
            {
                return EntityStateTryUnmount(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateTriggerBeamTargetEvent : HelperObject<EntityStateTriggerBeamTargetEvent> // Object
        {
            explicit EntityStateTriggerBeamTargetEvent(Ent::Property _node): HelperObject<EntityStateTriggerBeamTargetEvent>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateTriggerBeamTargetEvent";
            static EntityStateTriggerBeamTargetEvent load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateTriggerBeamTargetEvent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateTriggerBeamTargetEvent loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateTriggerBeamTargetEvent(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateTriggerBeamTargetEvent create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateTriggerBeamTargetEvent(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateTriggerBeamTargetEvent makeInstanceOf()
            {
                return EntityStateTriggerBeamTargetEvent(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateTreeTurretTargeting : HelperObject<EntityStateTreeTurretTargeting> // Object
        {
            explicit EntityStateTreeTurretTargeting(Ent::Property _node): HelperObject<EntityStateTreeTurretTargeting>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateTreeTurretTargeting";
            static EntityStateTreeTurretTargeting load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateTreeTurretTargeting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateTreeTurretTargeting loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateTreeTurretTargeting(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateTreeTurretTargeting create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateTreeTurretTargeting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateTreeTurretTargeting makeInstanceOf()
            {
                return EntityStateTreeTurretTargeting(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateTreeSwitchTransition : HelperObject<EntityStateTreeSwitchTransition> // Object
        {
            explicit EntityStateTreeSwitchTransition(Ent::Property _node): HelperObject<EntityStateTreeSwitchTransition>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateTreeSwitchTransition";
            static EntityStateTreeSwitchTransition load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateTreeSwitchTransition(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateTreeSwitchTransition loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateTreeSwitchTransition(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateTreeSwitchTransition create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateTreeSwitchTransition(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateTreeSwitchTransition makeInstanceOf()
            {
                return EntityStateTreeSwitchTransition(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateTreeMetamorphosisUsingScale : HelperObject<EntityStateTreeMetamorphosisUsingScale> // Object
        {
            explicit EntityStateTreeMetamorphosisUsingScale(Ent::Property _node): HelperObject<EntityStateTreeMetamorphosisUsingScale>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateTreeMetamorphosisUsingScale";
            static EntityStateTreeMetamorphosisUsingScale load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateTreeMetamorphosisUsingScale(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateTreeMetamorphosisUsingScale loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateTreeMetamorphosisUsingScale(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateTreeMetamorphosisUsingScale create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateTreeMetamorphosisUsingScale(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateTreeMetamorphosisUsingScale makeInstanceOf()
            {
                return EntityStateTreeMetamorphosisUsingScale(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateTreeMetamorphosis : HelperObject<EntityStateTreeMetamorphosis> // Object
        {
            explicit EntityStateTreeMetamorphosis(Ent::Property _node): HelperObject<EntityStateTreeMetamorphosis>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateTreeMetamorphosis";
            static EntityStateTreeMetamorphosis load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateTreeMetamorphosis(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateTreeMetamorphosis loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateTreeMetamorphosis(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateTreeMetamorphosis create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateTreeMetamorphosis(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateTreeMetamorphosis makeInstanceOf()
            {
                return EntityStateTreeMetamorphosis(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateTooDeep : HelperObject<EntityStateTooDeep> // Object
        {
            explicit EntityStateTooDeep(Ent::Property _node): HelperObject<EntityStateTooDeep>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateTooDeep";
            static EntityStateTooDeep load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateTooDeep(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateTooDeep loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateTooDeep(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateTooDeep create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateTooDeep(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateTooDeep makeInstanceOf()
            {
                return EntityStateTooDeep(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateTakeDamageOnMount : HelperObject<EntityStateTakeDamageOnMount> // Object
        {
            explicit EntityStateTakeDamageOnMount(Ent::Property _node): HelperObject<EntityStateTakeDamageOnMount>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateTakeDamageOnMount";
            static EntityStateTakeDamageOnMount load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateTakeDamageOnMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateTakeDamageOnMount loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateTakeDamageOnMount(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateTakeDamageOnMount create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateTakeDamageOnMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateTakeDamageOnMount makeInstanceOf()
            {
                return EntityStateTakeDamageOnMount(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStrongAttackJumped : HelperObject<EntityStateStrongAttackJumped> // Object
        {
            explicit EntityStateStrongAttackJumped(Ent::Property _node): HelperObject<EntityStateStrongAttackJumped>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStrongAttackJumped";
            static EntityStateStrongAttackJumped load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStrongAttackJumped(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStrongAttackJumped loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStrongAttackJumped(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStrongAttackJumped create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStrongAttackJumped(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStrongAttackJumped makeInstanceOf()
            {
                return EntityStateStrongAttackJumped(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStrongAttackCharging : HelperObject<EntityStateStrongAttackCharging> // Object
        {
            explicit EntityStateStrongAttackCharging(Ent::Property _node): HelperObject<EntityStateStrongAttackCharging>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStrongAttackCharging";
            static EntityStateStrongAttackCharging load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStrongAttackCharging(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStrongAttackCharging loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStrongAttackCharging(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStrongAttackCharging create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStrongAttackCharging(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStrongAttackCharging makeInstanceOf()
            {
                return EntityStateStrongAttackCharging(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStrongAttackCharged : HelperObject<EntityStateStrongAttackCharged> // Object
        {
            explicit EntityStateStrongAttackCharged(Ent::Property _node): HelperObject<EntityStateStrongAttackCharged>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStrongAttackCharged";
            static EntityStateStrongAttackCharged load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStrongAttackCharged(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStrongAttackCharged loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStrongAttackCharged(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStrongAttackCharged create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStrongAttackCharged(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStrongAttackCharged makeInstanceOf()
            {
                return EntityStateStrongAttackCharged(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStrongAttack : HelperObject<EntityStateStrongAttack> // Object
        {
            explicit EntityStateStrongAttack(Ent::Property _node): HelperObject<EntityStateStrongAttack>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStrongAttack";
            static EntityStateStrongAttack load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStrongAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStrongAttack loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStrongAttack(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStrongAttack create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStrongAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStrongAttack makeInstanceOf()
            {
                return EntityStateStrongAttack(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStrafeDodge : HelperObject<EntityStateStrafeDodge> // Object
        {
            explicit EntityStateStrafeDodge(Ent::Property _node): HelperObject<EntityStateStrafeDodge>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStrafeDodge";
            static EntityStateStrafeDodge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStrafeDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStrafeDodge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStrafeDodge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStrafeDodge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStrafeDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStrafeDodge makeInstanceOf()
            {
                return EntityStateStrafeDodge(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStickedLand : HelperObject<EntityStateStickedLand> // Object
        {
            explicit EntityStateStickedLand(Ent::Property _node): HelperObject<EntityStateStickedLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStickedLand";
            static EntityStateStickedLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStickedLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStickedLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStickedLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStickedLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStickedLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStickedLand makeInstanceOf()
            {
                return EntityStateStickedLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStalactiteReadyToFall : HelperObject<EntityStateStalactiteReadyToFall> // Object
        {
            explicit EntityStateStalactiteReadyToFall(Ent::Property _node): HelperObject<EntityStateStalactiteReadyToFall>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStalactiteReadyToFall";
            static EntityStateStalactiteReadyToFall load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStalactiteReadyToFall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStalactiteReadyToFall loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStalactiteReadyToFall(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStalactiteReadyToFall create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStalactiteReadyToFall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStalactiteReadyToFall makeInstanceOf()
            {
                return EntityStateStalactiteReadyToFall(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStalactiteFallen : HelperObject<EntityStateStalactiteFallen> // Object
        {
            explicit EntityStateStalactiteFallen(Ent::Property _node): HelperObject<EntityStateStalactiteFallen>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStalactiteFallen";
            static EntityStateStalactiteFallen load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStalactiteFallen(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStalactiteFallen loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStalactiteFallen(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStalactiteFallen create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStalactiteFallen(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStalactiteFallen makeInstanceOf()
            {
                return EntityStateStalactiteFallen(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStaffVertebrasAutoRefill : HelperObject<EntityStateStaffVertebrasAutoRefill> // Object
        {
            explicit EntityStateStaffVertebrasAutoRefill(Ent::Property _node): HelperObject<EntityStateStaffVertebrasAutoRefill>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStaffVertebrasAutoRefill";
            static EntityStateStaffVertebrasAutoRefill load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStaffVertebrasAutoRefill(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStaffVertebrasAutoRefill loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStaffVertebrasAutoRefill(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStaffVertebrasAutoRefill create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStaffVertebrasAutoRefill(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStaffVertebrasAutoRefill makeInstanceOf()
            {
                return EntityStateStaffVertebrasAutoRefill(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateStaffOwnedVertebras : HelperObject<EntityStateStaffOwnedVertebras> // Object
        {
            explicit EntityStateStaffOwnedVertebras(Ent::Property _node): HelperObject<EntityStateStaffOwnedVertebras>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateStaffOwnedVertebras";
            static EntityStateStaffOwnedVertebras load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateStaffOwnedVertebras(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateStaffOwnedVertebras loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateStaffOwnedVertebras(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateStaffOwnedVertebras create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateStaffOwnedVertebras(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateStaffOwnedVertebras makeInstanceOf()
            {
                return EntityStateStaffOwnedVertebras(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityStateStaffOwnedVertebras_Inputs Inputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSpiritShrineEnabled : HelperObject<EntityStateSpiritShrineEnabled> // Object
        {
            explicit EntityStateSpiritShrineEnabled(Ent::Property _node): HelperObject<EntityStateSpiritShrineEnabled>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSpiritShrineEnabled";
            static EntityStateSpiritShrineEnabled load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSpiritShrineEnabled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSpiritShrineEnabled loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSpiritShrineEnabled(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSpiritShrineEnabled create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSpiritShrineEnabled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSpiritShrineEnabled makeInstanceOf()
            {
                return EntityStateSpiritShrineEnabled(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSpiritShrineDisabled : HelperObject<EntityStateSpiritShrineDisabled> // Object
        {
            explicit EntityStateSpiritShrineDisabled(Ent::Property _node): HelperObject<EntityStateSpiritShrineDisabled>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSpiritShrineDisabled";
            static EntityStateSpiritShrineDisabled load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSpiritShrineDisabled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSpiritShrineDisabled loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSpiritShrineDisabled(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSpiritShrineDisabled create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSpiritShrineDisabled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSpiritShrineDisabled makeInstanceOf()
            {
                return EntityStateSpiritShrineDisabled(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSpiritAttacked : HelperObject<EntityStateSpiritAttacked> // Object
        {
            explicit EntityStateSpiritAttacked(Ent::Property _node): HelperObject<EntityStateSpiritAttacked>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSpiritAttacked";
            static EntityStateSpiritAttacked load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSpiritAttacked(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSpiritAttacked loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSpiritAttacked(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSpiritAttacked create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSpiritAttacked(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSpiritAttacked makeInstanceOf()
            {
                return EntityStateSpiritAttacked(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSpiritAttack : HelperObject<EntityStateSpiritAttack> // Object
        {
            explicit EntityStateSpiritAttack(Ent::Property _node): HelperObject<EntityStateSpiritAttack>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSpiritAttack";
            static EntityStateSpiritAttack load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSpiritAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSpiritAttack loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSpiritAttack(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSpiritAttack create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSpiritAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSpiritAttack makeInstanceOf()
            {
                return EntityStateSpiritAttack(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSpiritAnimalSoulForm : HelperObject<EntityStateSpiritAnimalSoulForm> // Object
        {
            explicit EntityStateSpiritAnimalSoulForm(Ent::Property _node): HelperObject<EntityStateSpiritAnimalSoulForm>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSpiritAnimalSoulForm";
            static EntityStateSpiritAnimalSoulForm load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSpiritAnimalSoulForm(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSpiritAnimalSoulForm loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSpiritAnimalSoulForm(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSpiritAnimalSoulForm create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSpiritAnimalSoulForm(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSpiritAnimalSoulForm makeInstanceOf()
            {
                return EntityStateSpiritAnimalSoulForm(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSpiritAnimalFleshForm : HelperObject<EntityStateSpiritAnimalFleshForm> // Object
        {
            explicit EntityStateSpiritAnimalFleshForm(Ent::Property _node): HelperObject<EntityStateSpiritAnimalFleshForm>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSpiritAnimalFleshForm";
            static EntityStateSpiritAnimalFleshForm load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSpiritAnimalFleshForm(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSpiritAnimalFleshForm loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSpiritAnimalFleshForm(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSpiritAnimalFleshForm create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSpiritAnimalFleshForm(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSpiritAnimalFleshForm makeInstanceOf()
            {
                return EntityStateSpiritAnimalFleshForm(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSpiritAnimalBeingCalled : HelperObject<EntityStateSpiritAnimalBeingCalled> // Object
        {
            explicit EntityStateSpiritAnimalBeingCalled(Ent::Property _node): HelperObject<EntityStateSpiritAnimalBeingCalled>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSpiritAnimalBeingCalled";
            static EntityStateSpiritAnimalBeingCalled load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSpiritAnimalBeingCalled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSpiritAnimalBeingCalled loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSpiritAnimalBeingCalled(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSpiritAnimalBeingCalled create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSpiritAnimalBeingCalled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSpiritAnimalBeingCalled makeInstanceOf()
            {
                return EntityStateSpiritAnimalBeingCalled(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSpeedLimiter : HelperObject<EntityStateSpeedLimiter> // Object
        {
            explicit EntityStateSpeedLimiter(Ent::Property _node): HelperObject<EntityStateSpeedLimiter>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSpeedLimiter";
            static EntityStateSpeedLimiter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSpeedLimiter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSpeedLimiter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSpeedLimiter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSpeedLimiter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSpeedLimiter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSpeedLimiter makeInstanceOf()
            {
                return EntityStateSpeedLimiter(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float SpeedMax() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSoftCollide : HelperObject<EntityStateSoftCollide> // Object
        {
            explicit EntityStateSoftCollide(Ent::Property _node): HelperObject<EntityStateSoftCollide>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSoftCollide";
            static EntityStateSoftCollide load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSoftCollide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSoftCollide loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSoftCollide(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSoftCollide create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSoftCollide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSoftCollide makeInstanceOf()
            {
                return EntityStateSoftCollide(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSnappedToHatchingTarget : HelperObject<EntityStateSnappedToHatchingTarget> // Object
        {
            explicit EntityStateSnappedToHatchingTarget(Ent::Property _node): HelperObject<EntityStateSnappedToHatchingTarget>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSnappedToHatchingTarget";
            static EntityStateSnappedToHatchingTarget load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSnappedToHatchingTarget(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSnappedToHatchingTarget loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSnappedToHatchingTarget(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSnappedToHatchingTarget create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSnappedToHatchingTarget(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSnappedToHatchingTarget makeInstanceOf()
            {
                return EntityStateSnappedToHatchingTarget(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSlowMotion : HelperObject<EntityStateSlowMotion> // Object
        {
            explicit EntityStateSlowMotion(Ent::Property _node): HelperObject<EntityStateSlowMotion>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSlowMotion";
            static EntityStateSlowMotion load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSlowMotion(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSlowMotion loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSlowMotion(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSlowMotion create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSlowMotion(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSlowMotion makeInstanceOf()
            {
                return EntityStateSlowMotion(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateShootHatchingEnergy : HelperObject<EntityStateShootHatchingEnergy> // Object
        {
            explicit EntityStateShootHatchingEnergy(Ent::Property _node): HelperObject<EntityStateShootHatchingEnergy>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateShootHatchingEnergy";
            static EntityStateShootHatchingEnergy load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateShootHatchingEnergy(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateShootHatchingEnergy loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateShootHatchingEnergy(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateShootHatchingEnergy create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateShootHatchingEnergy(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateShootHatchingEnergy makeInstanceOf()
            {
                return EntityStateShootHatchingEnergy(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSetSavePoint : HelperObject<EntityStateSetSavePoint> // Object
        {
            explicit EntityStateSetSavePoint(Ent::Property _node): HelperObject<EntityStateSetSavePoint>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSetSavePoint";
            static EntityStateSetSavePoint load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSetSavePoint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSetSavePoint loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSetSavePoint(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSetSavePoint create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSetSavePoint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSetSavePoint makeInstanceOf()
            {
                return EntityStateSetSavePoint(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateSavePointActivated : HelperObject<EntityStateSavePointActivated> // Object
        {
            explicit EntityStateSavePointActivated(Ent::Property _node): HelperObject<EntityStateSavePointActivated>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateSavePointActivated";
            static EntityStateSavePointActivated load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateSavePointActivated(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateSavePointActivated loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateSavePointActivated(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateSavePointActivated create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateSavePointActivated(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateSavePointActivated makeInstanceOf()
            {
                return EntityStateSavePointActivated(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateRevive : HelperObject<EntityStateRevive> // Object
        {
            explicit EntityStateRevive(Ent::Property _node): HelperObject<EntityStateRevive>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateRevive";
            static EntityStateRevive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateRevive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateRevive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateRevive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateRevive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateRevive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateRevive makeInstanceOf()
            {
                return EntityStateRevive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityStateRevive_Inputs Inputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateRespawnability : HelperObject<EntityStateRespawnability> // Object
        {
            explicit EntityStateRespawnability(Ent::Property _node): HelperObject<EntityStateRespawnability>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateRespawnability";
            static EntityStateRespawnability load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateRespawnability(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateRespawnability loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateRespawnability(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateRespawnability create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateRespawnability(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateRespawnability makeInstanceOf()
            {
                return EntityStateRespawnability(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef RespawnPlaceEntityRef() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateRespawn : HelperObject<EntityStateRespawn> // Object
        {
            explicit EntityStateRespawn(Ent::Property _node): HelperObject<EntityStateRespawn>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateRespawn";
            static EntityStateRespawn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateRespawn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateRespawn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateRespawn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateRespawn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateRespawn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateRespawn makeInstanceOf()
            {
                return EntityStateRespawn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateReserveMountSlots : HelperObject<EntityStateReserveMountSlots> // Object
        {
            explicit EntityStateReserveMountSlots(Ent::Property _node): HelperObject<EntityStateReserveMountSlots>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateReserveMountSlots";
            static EntityStateReserveMountSlots load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateReserveMountSlots(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateReserveMountSlots loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateReserveMountSlots(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateReserveMountSlots create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateReserveMountSlots(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateReserveMountSlots makeInstanceOf()
            {
                return EntityStateReserveMountSlots(getProperty().makeInstanceOf());
            }
            Ent::Gen2::MountableData MountableDataTo() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateRegainCapacity : HelperObject<EntityStateRegainCapacity> // Object
        {
            explicit EntityStateRegainCapacity(Ent::Property _node): HelperObject<EntityStateRegainCapacity>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateRegainCapacity";
            static EntityStateRegainCapacity load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateRegainCapacity(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateRegainCapacity loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateRegainCapacity(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateRegainCapacity create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateRegainCapacity(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateRegainCapacity makeInstanceOf()
            {
                return EntityStateRegainCapacity(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateRecoverLand : HelperObject<EntityStateRecoverLand> // Object
        {
            explicit EntityStateRecoverLand(Ent::Property _node): HelperObject<EntityStateRecoverLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateRecoverLand";
            static EntityStateRecoverLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateRecoverLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateRecoverLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateRecoverLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateRecoverLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateRecoverLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateRecoverLand makeInstanceOf()
            {
                return EntityStateRecoverLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateReadyToGiveOrder : HelperObject<EntityStateReadyToGiveOrder> // Object
        {
            explicit EntityStateReadyToGiveOrder(Ent::Property _node): HelperObject<EntityStateReadyToGiveOrder>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateReadyToGiveOrder";
            static EntityStateReadyToGiveOrder load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateReadyToGiveOrder(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateReadyToGiveOrder loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateReadyToGiveOrder(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateReadyToGiveOrder create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateReadyToGiveOrder(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateReadyToGiveOrder makeInstanceOf()
            {
                return EntityStateReadyToGiveOrder(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateRaise : HelperObject<EntityStateRaise> // Object
        {
            explicit EntityStateRaise(Ent::Property _node): HelperObject<EntityStateRaise>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateRaise";
            static EntityStateRaise load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateRaise(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateRaise loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateRaise(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateRaise create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateRaise(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateRaise makeInstanceOf()
            {
                return EntityStateRaise(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Damages() const;
            Ent::Gen2::EnergySide EnergySide() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStatePrepareToHoldingOnToNavigationMesh : HelperObject<EntityStatePrepareToHoldingOnToNavigationMesh> // Object
        {
            explicit EntityStatePrepareToHoldingOnToNavigationMesh(Ent::Property _node): HelperObject<EntityStatePrepareToHoldingOnToNavigationMesh>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStatePrepareToHoldingOnToNavigationMesh";
            static EntityStatePrepareToHoldingOnToNavigationMesh load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStatePrepareToHoldingOnToNavigationMesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStatePrepareToHoldingOnToNavigationMesh loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStatePrepareToHoldingOnToNavigationMesh(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStatePrepareToHoldingOnToNavigationMesh create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStatePrepareToHoldingOnToNavigationMesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStatePrepareToHoldingOnToNavigationMesh makeInstanceOf()
            {
                return EntityStatePrepareToHoldingOnToNavigationMesh(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStatePlungeLand : HelperObject<EntityStatePlungeLand> // Object
        {
            explicit EntityStatePlungeLand(Ent::Property _node): HelperObject<EntityStatePlungeLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStatePlungeLand";
            static EntityStatePlungeLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStatePlungeLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStatePlungeLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStatePlungeLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStatePlungeLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStatePlungeLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStatePlungeLand makeInstanceOf()
            {
                return EntityStatePlungeLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStatePlayer : HelperObject<EntityStatePlayer> // Object
        {
            explicit EntityStatePlayer(Ent::Property _node): HelperObject<EntityStatePlayer>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStatePlayer";
            static EntityStatePlayer load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStatePlayer(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStatePlayer loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStatePlayer(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStatePlayer create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStatePlayer(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStatePlayer makeInstanceOf()
            {
                return EntityStatePlayer(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStatePickableDistributor : HelperObject<EntityStatePickableDistributor> // Object
        {
            explicit EntityStatePickableDistributor(Ent::Property _node): HelperObject<EntityStatePickableDistributor>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStatePickableDistributor";
            static EntityStatePickableDistributor load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStatePickableDistributor(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStatePickableDistributor loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStatePickableDistributor(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStatePickableDistributor create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStatePickableDistributor(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStatePickableDistributor makeInstanceOf()
            {
                return EntityStatePickableDistributor(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStatePhysicsMove : HelperObject<EntityStatePhysicsMove> // Object
        {
            explicit EntityStatePhysicsMove(Ent::Property _node): HelperObject<EntityStatePhysicsMove>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStatePhysicsMove";
            static EntityStatePhysicsMove load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStatePhysicsMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStatePhysicsMove loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStatePhysicsMove(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStatePhysicsMove create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStatePhysicsMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStatePhysicsMove makeInstanceOf()
            {
                return EntityStatePhysicsMove(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AngularVelocityMultiplier() const;
            Ent::Gen2::Float CustomGravity() const;
            Ent::Gen2::Float ForceMultiplier() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStatePhysicsIdle : HelperObject<EntityStatePhysicsIdle> // Object
        {
            explicit EntityStatePhysicsIdle(Ent::Property _node): HelperObject<EntityStatePhysicsIdle>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStatePhysicsIdle";
            static EntityStatePhysicsIdle load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStatePhysicsIdle(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStatePhysicsIdle loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStatePhysicsIdle(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStatePhysicsIdle create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStatePhysicsIdle(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStatePhysicsIdle makeInstanceOf()
            {
                return EntityStatePhysicsIdle(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateParryCooldown : HelperObject<EntityStateParryCooldown> // Object
        {
            explicit EntityStateParryCooldown(Ent::Property _node): HelperObject<EntityStateParryCooldown>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateParryCooldown";
            static EntityStateParryCooldown load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateParryCooldown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateParryCooldown loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateParryCooldown(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateParryCooldown create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateParryCooldown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateParryCooldown makeInstanceOf()
            {
                return EntityStateParryCooldown(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateParry : HelperObject<EntityStateParry> // Object
        {
            explicit EntityStateParry(Ent::Property _node): HelperObject<EntityStateParry>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateParry";
            static EntityStateParry load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateParry(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateParry loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateParry(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateParry create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateParry(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateParry makeInstanceOf()
            {
                return EntityStateParry(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateParried : HelperObject<EntityStateParried> // Object
        {
            explicit EntityStateParried(Ent::Property _node): HelperObject<EntityStateParried>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateParried";
            static EntityStateParried load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateParried(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateParried loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateParried(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateParried create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateParried(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateParried makeInstanceOf()
            {
                return EntityStateParried(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateOrientedDrift : HelperObject<EntityStateOrientedDrift> // Object
        {
            explicit EntityStateOrientedDrift(Ent::Property _node): HelperObject<EntityStateOrientedDrift>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateOrientedDrift";
            static EntityStateOrientedDrift load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateOrientedDrift(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateOrientedDrift loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateOrientedDrift(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateOrientedDrift create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateOrientedDrift(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateOrientedDrift makeInstanceOf()
            {
                return EntityStateOrientedDrift(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateOrderingAttack : HelperObject<EntityStateOrderingAttack> // Object
        {
            explicit EntityStateOrderingAttack(Ent::Property _node): HelperObject<EntityStateOrderingAttack>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateOrderingAttack";
            static EntityStateOrderingAttack load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateOrderingAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateOrderingAttack loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateOrderingAttack(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateOrderingAttack create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateOrderingAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateOrderingAttack makeInstanceOf()
            {
                return EntityStateOrderingAttack(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateMoveOnOffMeshLink : HelperObject<EntityStateMoveOnOffMeshLink> // Object
        {
            explicit EntityStateMoveOnOffMeshLink(Ent::Property _node): HelperObject<EntityStateMoveOnOffMeshLink>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateMoveOnOffMeshLink";
            static EntityStateMoveOnOffMeshLink load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateMoveOnOffMeshLink(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateMoveOnOffMeshLink loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateMoveOnOffMeshLink(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateMoveOnOffMeshLink create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateMoveOnOffMeshLink(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateMoveOnOffMeshLink makeInstanceOf()
            {
                return EntityStateMoveOnOffMeshLink(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateMotionConstrainedLand : HelperObject<EntityStateMotionConstrainedLand> // Object
        {
            explicit EntityStateMotionConstrainedLand(Ent::Property _node): HelperObject<EntityStateMotionConstrainedLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateMotionConstrainedLand";
            static EntityStateMotionConstrainedLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateMotionConstrainedLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateMotionConstrainedLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateMotionConstrainedLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateMotionConstrainedLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateMotionConstrainedLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateMotionConstrainedLand makeInstanceOf()
            {
                return EntityStateMotionConstrainedLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateMotionConstrained : HelperObject<EntityStateMotionConstrained> // Object
        {
            explicit EntityStateMotionConstrained(Ent::Property _node): HelperObject<EntityStateMotionConstrained>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateMotionConstrained";
            static EntityStateMotionConstrained load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateMotionConstrained(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateMotionConstrained loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateMotionConstrained(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateMotionConstrained create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateMotionConstrained(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateMotionConstrained makeInstanceOf()
            {
                return EntityStateMotionConstrained(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityStateMotionConstrained_Inputs Inputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateMineScaling : HelperObject<EntityStateMineScaling> // Object
        {
            explicit EntityStateMineScaling(Ent::Property _node): HelperObject<EntityStateMineScaling>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateMineScaling";
            static EntityStateMineScaling load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateMineScaling(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateMineScaling loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateMineScaling(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateMineScaling create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateMineScaling(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateMineScaling makeInstanceOf()
            {
                return EntityStateMineScaling(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateMineRespawning : HelperObject<EntityStateMineRespawning> // Object
        {
            explicit EntityStateMineRespawning(Ent::Property _node): HelperObject<EntityStateMineRespawning>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateMineRespawning";
            static EntityStateMineRespawning load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateMineRespawning(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateMineRespawning loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateMineRespawning(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateMineRespawning create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateMineRespawning(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateMineRespawning makeInstanceOf()
            {
                return EntityStateMineRespawning(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateMeditateToInteract : HelperObject<EntityStateMeditateToInteract> // Object
        {
            explicit EntityStateMeditateToInteract(Ent::Property _node): HelperObject<EntityStateMeditateToInteract>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateMeditateToInteract";
            static EntityStateMeditateToInteract load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateMeditateToInteract(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateMeditateToInteract loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateMeditateToInteract(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateMeditateToInteract create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateMeditateToInteract(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateMeditateToInteract makeInstanceOf()
            {
                return EntityStateMeditateToInteract(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateMask : HelperObject<EntityStateMask> // Object
        {
            explicit EntityStateMask(Ent::Property _node): HelperObject<EntityStateMask>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateMask";
            static EntityStateMask load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateMask(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateMask loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateMask(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateMask create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateMask(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateMask makeInstanceOf()
            {
                return EntityStateMask(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String MaskMeshPath() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateManageChildEntityPool : HelperObject<EntityStateManageChildEntityPool> // Object
        {
            explicit EntityStateManageChildEntityPool(Ent::Property _node): HelperObject<EntityStateManageChildEntityPool>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateManageChildEntityPool";
            static EntityStateManageChildEntityPool load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateManageChildEntityPool(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateManageChildEntityPool loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateManageChildEntityPool(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateManageChildEntityPool create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateManageChildEntityPool(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateManageChildEntityPool makeInstanceOf()
            {
                return EntityStateManageChildEntityPool(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityStateManageChildEntityPool_Inputs Inputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateLateralLand : HelperObject<EntityStateLateralLand> // Object
        {
            explicit EntityStateLateralLand(Ent::Property _node): HelperObject<EntityStateLateralLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateLateralLand";
            static EntityStateLateralLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateLateralLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateLateralLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateLateralLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateLateralLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateLateralLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateLateralLand makeInstanceOf()
            {
                return EntityStateLateralLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateLateralDodge : HelperObject<EntityStateLateralDodge> // Object
        {
            explicit EntityStateLateralDodge(Ent::Property _node): HelperObject<EntityStateLateralDodge>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateLateralDodge";
            static EntityStateLateralDodge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateLateralDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateLateralDodge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateLateralDodge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateLateralDodge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateLateralDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateLateralDodge makeInstanceOf()
            {
                return EntityStateLateralDodge(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateJustStarted : HelperObject<EntityStateJustStarted> // Object
        {
            explicit EntityStateJustStarted(Ent::Property _node): HelperObject<EntityStateJustStarted>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateJustStarted";
            static EntityStateJustStarted load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateJustStarted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateJustStarted loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateJustStarted(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateJustStarted create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateJustStarted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateJustStarted makeInstanceOf()
            {
                return EntityStateJustStarted(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateJumpHeightMultiplier : HelperObject<EntityStateJumpHeightMultiplier> // Object
        {
            explicit EntityStateJumpHeightMultiplier(Ent::Property _node): HelperObject<EntityStateJumpHeightMultiplier>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateJumpHeightMultiplier";
            static EntityStateJumpHeightMultiplier load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateJumpHeightMultiplier(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateJumpHeightMultiplier loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateJumpHeightMultiplier(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateJumpHeightMultiplier create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateJumpHeightMultiplier(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateJumpHeightMultiplier makeInstanceOf()
            {
                return EntityStateJumpHeightMultiplier(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float JumpHeightMultiplier() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateInteractedGPE : HelperObject<EntityStateInteractedGPE> // Object
        {
            explicit EntityStateInteractedGPE(Ent::Property _node): HelperObject<EntityStateInteractedGPE>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateInteractedGPE";
            static EntityStateInteractedGPE load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateInteractedGPE(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateInteractedGPE loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateInteractedGPE(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateInteractedGPE create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateInteractedGPE(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateInteractedGPE makeInstanceOf()
            {
                return EntityStateInteractedGPE(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateInjured : HelperObject<EntityStateInjured> // Object
        {
            explicit EntityStateInjured(Ent::Property _node): HelperObject<EntityStateInjured>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateInjured";
            static EntityStateInjured load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateInjured(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateInjured loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateInjured(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateInjured create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateInjured(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateInjured makeInstanceOf()
            {
                return EntityStateInjured(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateInconvertible : HelperObject<EntityStateInconvertible> // Object
        {
            explicit EntityStateInconvertible(Ent::Property _node): HelperObject<EntityStateInconvertible>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateInconvertible";
            static EntityStateInconvertible load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateInconvertible(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateInconvertible loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateInconvertible(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateInconvertible create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateInconvertible(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateInconvertible makeInstanceOf()
            {
                return EntityStateInconvertible(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateIncapacitated : HelperObject<EntityStateIncapacitated> // Object
        {
            explicit EntityStateIncapacitated(Ent::Property _node): HelperObject<EntityStateIncapacitated>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateIncapacitated";
            static EntityStateIncapacitated load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateIncapacitated(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateIncapacitated loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateIncapacitated(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateIncapacitated create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateIncapacitated(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateIncapacitated makeInstanceOf()
            {
                return EntityStateIncapacitated(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityStateIncapacitated_Inputs Inputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateInVertebraeArea : HelperObject<EntityStateInVertebraeArea> // Object
        {
            explicit EntityStateInVertebraeArea(Ent::Property _node): HelperObject<EntityStateInVertebraeArea>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateInVertebraeArea";
            static EntityStateInVertebraeArea load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateInVertebraeArea(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateInVertebraeArea loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateInVertebraeArea(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateInVertebraeArea create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateInVertebraeArea(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateInVertebraeArea makeInstanceOf()
            {
                return EntityStateInVertebraeArea(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateImmersedJump : HelperObject<EntityStateImmersedJump> // Object
        {
            explicit EntityStateImmersedJump(Ent::Property _node): HelperObject<EntityStateImmersedJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateImmersedJump";
            static EntityStateImmersedJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateImmersedJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateImmersedJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateImmersedJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateImmersedJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateImmersedJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateImmersedJump makeInstanceOf()
            {
                return EntityStateImmersedJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateHoldingStaffVertebras : HelperObject<EntityStateHoldingStaffVertebras> // Object
        {
            explicit EntityStateHoldingStaffVertebras(Ent::Property _node): HelperObject<EntityStateHoldingStaffVertebras>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateHoldingStaffVertebras";
            static EntityStateHoldingStaffVertebras load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateHoldingStaffVertebras(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateHoldingStaffVertebras loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateHoldingStaffVertebras(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateHoldingStaffVertebras create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateHoldingStaffVertebras(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateHoldingStaffVertebras makeInstanceOf()
            {
                return EntityStateHoldingStaffVertebras(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateHitWall : HelperObject<EntityStateHitWall> // Object
        {
            explicit EntityStateHitWall(Ent::Property _node): HelperObject<EntityStateHitWall>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateHitWall";
            static EntityStateHitWall load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateHitWall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateHitWall loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateHitWall(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateHitWall create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateHitWall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateHitWall makeInstanceOf()
            {
                return EntityStateHitWall(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateHintNone : HelperObject<EntityStateHintNone> // Object
        {
            explicit EntityStateHintNone(Ent::Property _node): HelperObject<EntityStateHintNone>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateHintNone";
            static EntityStateHintNone load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateHintNone(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateHintNone loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateHintNone(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateHintNone create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateHintNone(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateHintNone makeInstanceOf()
            {
                return EntityStateHintNone(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateHintLight : HelperObject<EntityStateHintLight> // Object
        {
            explicit EntityStateHintLight(Ent::Property _node): HelperObject<EntityStateHintLight>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateHintLight";
            static EntityStateHintLight load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateHintLight(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateHintLight loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateHintLight(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateHintLight create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateHintLight(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateHintLight makeInstanceOf()
            {
                return EntityStateHintLight(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateHintFull : HelperObject<EntityStateHintFull> // Object
        {
            explicit EntityStateHintFull(Ent::Property _node): HelperObject<EntityStateHintFull>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateHintFull";
            static EntityStateHintFull load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateHintFull(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateHintFull loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateHintFull(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateHintFull create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateHintFull(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateHintFull makeInstanceOf()
            {
                return EntityStateHintFull(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateHideOut : HelperObject<EntityStateHideOut> // Object
        {
            explicit EntityStateHideOut(Ent::Property _node): HelperObject<EntityStateHideOut>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateHideOut";
            static EntityStateHideOut load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateHideOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateHideOut loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateHideOut(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateHideOut create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateHideOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateHideOut makeInstanceOf()
            {
                return EntityStateHideOut(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateHideIn : HelperObject<EntityStateHideIn> // Object
        {
            explicit EntityStateHideIn(Ent::Property _node): HelperObject<EntityStateHideIn>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateHideIn";
            static EntityStateHideIn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateHideIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateHideIn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateHideIn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateHideIn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateHideIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateHideIn makeInstanceOf()
            {
                return EntityStateHideIn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateHide : HelperObject<EntityStateHide> // Object
        {
            explicit EntityStateHide(Ent::Property _node): HelperObject<EntityStateHide>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateHide";
            static EntityStateHide load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateHide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateHide loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateHide(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateHide create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateHide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateHide makeInstanceOf()
            {
                return EntityStateHide(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ExitRequired() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGroundedJump : HelperObject<EntityStateGroundedJump> // Object
        {
            explicit EntityStateGroundedJump(Ent::Property _node): HelperObject<EntityStateGroundedJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGroundedJump";
            static EntityStateGroundedJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGroundedJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGroundedJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGroundedJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGroundedJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGroundedJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGroundedJump makeInstanceOf()
            {
                return EntityStateGroundedJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGrasp : HelperObject<EntityStateGrasp> // Object
        {
            explicit EntityStateGrasp(Ent::Property _node): HelperObject<EntityStateGrasp>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGrasp";
            static EntityStateGrasp load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGrasp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGrasp loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGrasp(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGrasp create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGrasp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGrasp makeInstanceOf()
            {
                return EntityStateGrasp(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGrabbedOut : HelperObject<EntityStateGrabbedOut> // Object
        {
            explicit EntityStateGrabbedOut(Ent::Property _node): HelperObject<EntityStateGrabbedOut>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGrabbedOut";
            static EntityStateGrabbedOut load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGrabbedOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGrabbedOut loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGrabbedOut(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGrabbedOut create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGrabbedOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGrabbedOut makeInstanceOf()
            {
                return EntityStateGrabbedOut(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGrabbedIn : HelperObject<EntityStateGrabbedIn> // Object
        {
            explicit EntityStateGrabbedIn(Ent::Property _node): HelperObject<EntityStateGrabbedIn>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGrabbedIn";
            static EntityStateGrabbedIn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGrabbedIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGrabbedIn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGrabbedIn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGrabbedIn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGrabbedIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGrabbedIn makeInstanceOf()
            {
                return EntityStateGrabbedIn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGrabbed : HelperObject<EntityStateGrabbed> // Object
        {
            explicit EntityStateGrabbed(Ent::Property _node): HelperObject<EntityStateGrabbed>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGrabbed";
            static EntityStateGrabbed load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGrabbed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGrabbed loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGrabbed(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGrabbed create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGrabbed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGrabbed makeInstanceOf()
            {
                return EntityStateGrabbed(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGrabOut : HelperObject<EntityStateGrabOut> // Object
        {
            explicit EntityStateGrabOut(Ent::Property _node): HelperObject<EntityStateGrabOut>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGrabOut";
            static EntityStateGrabOut load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGrabOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGrabOut loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGrabOut(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGrabOut create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGrabOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGrabOut makeInstanceOf()
            {
                return EntityStateGrabOut(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGrabIn : HelperObject<EntityStateGrabIn> // Object
        {
            explicit EntityStateGrabIn(Ent::Property _node): HelperObject<EntityStateGrabIn>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGrabIn";
            static EntityStateGrabIn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGrabIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGrabIn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGrabIn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGrabIn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGrabIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGrabIn makeInstanceOf()
            {
                return EntityStateGrabIn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGrabAttack : HelperObject<EntityStateGrabAttack> // Object
        {
            explicit EntityStateGrabAttack(Ent::Property _node): HelperObject<EntityStateGrabAttack>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGrabAttack";
            static EntityStateGrabAttack load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGrabAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGrabAttack loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGrabAttack(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGrabAttack create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGrabAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGrabAttack makeInstanceOf()
            {
                return EntityStateGrabAttack(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateGrab : HelperObject<EntityStateGrab> // Object
        {
            explicit EntityStateGrab(Ent::Property _node): HelperObject<EntityStateGrab>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateGrab";
            static EntityStateGrab load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateGrab(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateGrab loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateGrab(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateGrab create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateGrab(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateGrab makeInstanceOf()
            {
                return EntityStateGrab(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateForceCanBeTargeted : HelperObject<EntityStateForceCanBeTargeted> // Object
        {
            explicit EntityStateForceCanBeTargeted(Ent::Property _node): HelperObject<EntityStateForceCanBeTargeted>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateForceCanBeTargeted";
            static EntityStateForceCanBeTargeted load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateForceCanBeTargeted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateForceCanBeTargeted loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateForceCanBeTargeted(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateForceCanBeTargeted create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateForceCanBeTargeted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateForceCanBeTargeted makeInstanceOf()
            {
                return EntityStateForceCanBeTargeted(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool CanBeTargeted() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateFastRun : HelperObject<EntityStateFastRun> // Object
        {
            explicit EntityStateFastRun(Ent::Property _node): HelperObject<EntityStateFastRun>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateFastRun";
            static EntityStateFastRun load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateFastRun(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateFastRun loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateFastRun(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateFastRun create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateFastRun(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateFastRun makeInstanceOf()
            {
                return EntityStateFastRun(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateFallSafe : HelperObject<EntityStateFallSafe> // Object
        {
            explicit EntityStateFallSafe(Ent::Property _node): HelperObject<EntityStateFallSafe>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateFallSafe";
            static EntityStateFallSafe load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateFallSafe(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateFallSafe loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateFallSafe(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateFallSafe create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateFallSafe(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateFallSafe makeInstanceOf()
            {
                return EntityStateFallSafe(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateFallInjured : HelperObject<EntityStateFallInjured> // Object
        {
            explicit EntityStateFallInjured(Ent::Property _node): HelperObject<EntityStateFallInjured>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateFallInjured";
            static EntityStateFallInjured load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateFallInjured(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateFallInjured loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateFallInjured(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateFallInjured create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateFallInjured(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateFallInjured makeInstanceOf()
            {
                return EntityStateFallInjured(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateFallDying : HelperObject<EntityStateFallDying> // Object
        {
            explicit EntityStateFallDying(Ent::Property _node): HelperObject<EntityStateFallDying>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateFallDying";
            static EntityStateFallDying load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateFallDying(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateFallDying loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateFallDying(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateFallDying create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateFallDying(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateFallDying makeInstanceOf()
            {
                return EntityStateFallDying(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateFall : HelperObject<EntityStateFall> // Object
        {
            explicit EntityStateFall(Ent::Property _node): HelperObject<EntityStateFall>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateFall";
            static EntityStateFall load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateFall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateFall loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateFall(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateFall create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateFall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateFall makeInstanceOf()
            {
                return EntityStateFall(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateFailingOrder : HelperObject<EntityStateFailingOrder> // Object
        {
            explicit EntityStateFailingOrder(Ent::Property _node): HelperObject<EntityStateFailingOrder>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateFailingOrder";
            static EntityStateFailingOrder load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateFailingOrder(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateFailingOrder loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateFailingOrder(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateFailingOrder create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateFailingOrder(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateFailingOrder makeInstanceOf()
            {
                return EntityStateFailingOrder(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateExtraLife : HelperObject<EntityStateExtraLife> // Object
        {
            explicit EntityStateExtraLife(Ent::Property _node): HelperObject<EntityStateExtraLife>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateExtraLife";
            static EntityStateExtraLife load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateExtraLife(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateExtraLife loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateExtraLife(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateExtraLife create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateExtraLife(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateExtraLife makeInstanceOf()
            {
                return EntityStateExtraLife(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateEnergySpoutState : HelperObject<EntityStateEnergySpoutState> // Object
        {
            explicit EntityStateEnergySpoutState(Ent::Property _node): HelperObject<EntityStateEnergySpoutState>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateEnergySpoutState";
            static EntityStateEnergySpoutState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateEnergySpoutState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateEnergySpoutState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateEnergySpoutState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateEnergySpoutState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateEnergySpoutState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateEnergySpoutState makeInstanceOf()
            {
                return EntityStateEnergySpoutState(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::EnergySideEvent> EnergySideEvents() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateEnergySide : HelperObject<EntityStateEnergySide> // Object
        {
            explicit EntityStateEnergySide(Ent::Property _node): HelperObject<EntityStateEnergySide>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateEnergySide";
            static EntityStateEnergySide load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateEnergySide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateEnergySide loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateEnergySide(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateEnergySide create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateEnergySide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateEnergySide makeInstanceOf()
            {
                return EntityStateEnergySide(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EnergySide EnergySide() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateEnergyRootHatching : HelperObject<EntityStateEnergyRootHatching> // Object
        {
            explicit EntityStateEnergyRootHatching(Ent::Property _node): HelperObject<EntityStateEnergyRootHatching>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateEnergyRootHatching";
            static EntityStateEnergyRootHatching load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateEnergyRootHatching(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateEnergyRootHatching loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateEnergyRootHatching(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateEnergyRootHatching create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateEnergyRootHatching(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateEnergyRootHatching makeInstanceOf()
            {
                return EntityStateEnergyRootHatching(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateEnergyRootAbortHatching : HelperObject<EntityStateEnergyRootAbortHatching> // Object
        {
            explicit EntityStateEnergyRootAbortHatching(Ent::Property _node): HelperObject<EntityStateEnergyRootAbortHatching>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateEnergyRootAbortHatching";
            static EntityStateEnergyRootAbortHatching load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateEnergyRootAbortHatching(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateEnergyRootAbortHatching loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateEnergyRootAbortHatching(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateEnergyRootAbortHatching create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateEnergyRootAbortHatching(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateEnergyRootAbortHatching makeInstanceOf()
            {
                return EntityStateEnergyRootAbortHatching(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateEjectedLand : HelperObject<EntityStateEjectedLand> // Object
        {
            explicit EntityStateEjectedLand(Ent::Property _node): HelperObject<EntityStateEjectedLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateEjectedLand";
            static EntityStateEjectedLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateEjectedLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateEjectedLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateEjectedLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateEjectedLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateEjectedLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateEjectedLand makeInstanceOf()
            {
                return EntityStateEjectedLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateDodgeCooldown : HelperObject<EntityStateDodgeCooldown> // Object
        {
            explicit EntityStateDodgeCooldown(Ent::Property _node): HelperObject<EntityStateDodgeCooldown>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateDodgeCooldown";
            static EntityStateDodgeCooldown load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateDodgeCooldown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateDodgeCooldown loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateDodgeCooldown(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateDodgeCooldown create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateDodgeCooldown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateDodgeCooldown makeInstanceOf()
            {
                return EntityStateDodgeCooldown(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateDisplayHatchingCost : HelperObject<EntityStateDisplayHatchingCost> // Object
        {
            explicit EntityStateDisplayHatchingCost(Ent::Property _node): HelperObject<EntityStateDisplayHatchingCost>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateDisplayHatchingCost";
            static EntityStateDisplayHatchingCost load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateDisplayHatchingCost(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateDisplayHatchingCost loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateDisplayHatchingCost(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateDisplayHatchingCost create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateDisplayHatchingCost(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateDisplayHatchingCost makeInstanceOf()
            {
                return EntityStateDisplayHatchingCost(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateDisguise : HelperObject<EntityStateDisguise> // Object
        {
            explicit EntityStateDisguise(Ent::Property _node): HelperObject<EntityStateDisguise>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateDisguise";
            static EntityStateDisguise load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateDisguise(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateDisguise loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateDisguise(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateDisguise create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateDisguise(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateDisguise makeInstanceOf()
            {
                return EntityStateDisguise(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ExitRequired() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateDisabledVertebrae : HelperObject<EntityStateDisabledVertebrae> // Object
        {
            explicit EntityStateDisabledVertebrae(Ent::Property _node): HelperObject<EntityStateDisabledVertebrae>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateDisabledVertebrae";
            static EntityStateDisabledVertebrae load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateDisabledVertebrae(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateDisabledVertebrae loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateDisabledVertebrae(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateDisabledVertebrae create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateDisabledVertebrae(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateDisabledVertebrae makeInstanceOf()
            {
                return EntityStateDisabledVertebrae(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateDisablePerceptionRequest : HelperObject<EntityStateDisablePerceptionRequest> // Object
        {
            explicit EntityStateDisablePerceptionRequest(Ent::Property _node): HelperObject<EntityStateDisablePerceptionRequest>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateDisablePerceptionRequest";
            static EntityStateDisablePerceptionRequest load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateDisablePerceptionRequest(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateDisablePerceptionRequest loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateDisablePerceptionRequest(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateDisablePerceptionRequest create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateDisablePerceptionRequest(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateDisablePerceptionRequest makeInstanceOf()
            {
                return EntityStateDisablePerceptionRequest(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateDeathLand : HelperObject<EntityStateDeathLand> // Object
        {
            explicit EntityStateDeathLand(Ent::Property _node): HelperObject<EntityStateDeathLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateDeathLand";
            static EntityStateDeathLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateDeathLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateDeathLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateDeathLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateDeathLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateDeathLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateDeathLand makeInstanceOf()
            {
                return EntityStateDeathLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateDamageLand : HelperObject<EntityStateDamageLand> // Object
        {
            explicit EntityStateDamageLand(Ent::Property _node): HelperObject<EntityStateDamageLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateDamageLand";
            static EntityStateDamageLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateDamageLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateDamageLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateDamageLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateDamageLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateDamageLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateDamageLand makeInstanceOf()
            {
                return EntityStateDamageLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCreatureProfile : HelperObject<EntityStateCreatureProfile> // Object
        {
            explicit EntityStateCreatureProfile(Ent::Property _node): HelperObject<EntityStateCreatureProfile>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCreatureProfile";
            static EntityStateCreatureProfile load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCreatureProfile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCreatureProfile loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCreatureProfile(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCreatureProfile create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCreatureProfile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCreatureProfile makeInstanceOf()
            {
                return EntityStateCreatureProfile(getProperty().makeInstanceOf());
            }
            Ent::Gen2::CreatureProfile Profile() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCreatureHatching : HelperObject<EntityStateCreatureHatching> // Object
        {
            explicit EntityStateCreatureHatching(Ent::Property _node): HelperObject<EntityStateCreatureHatching>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCreatureHatching";
            static EntityStateCreatureHatching load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCreatureHatching(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCreatureHatching loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCreatureHatching(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCreatureHatching create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCreatureHatching(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCreatureHatching makeInstanceOf()
            {
                return EntityStateCreatureHatching(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityStateCreatureHatching_Inputs Inputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateControlGPE : HelperObject<EntityStateControlGPE> // Object
        {
            explicit EntityStateControlGPE(Ent::Property _node): HelperObject<EntityStateControlGPE>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateControlGPE";
            static EntityStateControlGPE load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateControlGPE(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateControlGPE loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateControlGPE(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateControlGPE create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateControlGPE(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateControlGPE makeInstanceOf()
            {
                return EntityStateControlGPE(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateConstrainedMove : HelperObject<EntityStateConstrainedMove> // Object
        {
            explicit EntityStateConstrainedMove(Ent::Property _node): HelperObject<EntityStateConstrainedMove>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateConstrainedMove";
            static EntityStateConstrainedMove load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateConstrainedMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateConstrainedMove loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateConstrainedMove(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateConstrainedMove create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateConstrainedMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateConstrainedMove makeInstanceOf()
            {
                return EntityStateConstrainedMove(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateConstrainedInput : HelperObject<EntityStateConstrainedInput> // Object
        {
            explicit EntityStateConstrainedInput(Ent::Property _node): HelperObject<EntityStateConstrainedInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateConstrainedInput";
            static EntityStateConstrainedInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateConstrainedInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateConstrainedInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateConstrainedInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateConstrainedInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateConstrainedInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateConstrainedInput makeInstanceOf()
            {
                return EntityStateConstrainedInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCombat : HelperObject<EntityStateCombat> // Object
        {
            explicit EntityStateCombat(Ent::Property _node): HelperObject<EntityStateCombat>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCombat";
            static EntityStateCombat load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCombat(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCombat loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCombat(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCombat create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCombat(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCombat makeInstanceOf()
            {
                return EntityStateCombat(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCollectVertebrae : HelperObject<EntityStateCollectVertebrae> // Object
        {
            explicit EntityStateCollectVertebrae(Ent::Property _node): HelperObject<EntityStateCollectVertebrae>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCollectVertebrae";
            static EntityStateCollectVertebrae load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCollectVertebrae(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCollectVertebrae loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCollectVertebrae(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCollectVertebrae create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCollectVertebrae(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCollectVertebrae makeInstanceOf()
            {
                return EntityStateCollectVertebrae(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float meditationDuration() const;
        };

        struct EntityStateClimbWaterfallImpulse : HelperObject<EntityStateClimbWaterfallImpulse> // Object
        {
            explicit EntityStateClimbWaterfallImpulse(Ent::Property _node): HelperObject<EntityStateClimbWaterfallImpulse>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateClimbWaterfallImpulse";
            static EntityStateClimbWaterfallImpulse load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateClimbWaterfallImpulse(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateClimbWaterfallImpulse loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateClimbWaterfallImpulse(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateClimbWaterfallImpulse create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateClimbWaterfallImpulse(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateClimbWaterfallImpulse makeInstanceOf()
            {
                return EntityStateClimbWaterfallImpulse(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateClimbWaterfall : HelperObject<EntityStateClimbWaterfall> // Object
        {
            explicit EntityStateClimbWaterfall(Ent::Property _node): HelperObject<EntityStateClimbWaterfall>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateClimbWaterfall";
            static EntityStateClimbWaterfall load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateClimbWaterfall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateClimbWaterfall loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateClimbWaterfall(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateClimbWaterfall create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateClimbWaterfall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateClimbWaterfall makeInstanceOf()
            {
                return EntityStateClimbWaterfall(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateClassicLand : HelperObject<EntityStateClassicLand> // Object
        {
            explicit EntityStateClassicLand(Ent::Property _node): HelperObject<EntityStateClassicLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateClassicLand";
            static EntityStateClassicLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateClassicLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateClassicLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateClassicLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateClassicLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateClassicLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateClassicLand makeInstanceOf()
            {
                return EntityStateClassicLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateClassicDodge : HelperObject<EntityStateClassicDodge> // Object
        {
            explicit EntityStateClassicDodge(Ent::Property _node): HelperObject<EntityStateClassicDodge>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateClassicDodge";
            static EntityStateClassicDodge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateClassicDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateClassicDodge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateClassicDodge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateClassicDodge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateClassicDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateClassicDodge makeInstanceOf()
            {
                return EntityStateClassicDodge(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCinematicReady : HelperObject<EntityStateCinematicReady> // Object
        {
            explicit EntityStateCinematicReady(Ent::Property _node): HelperObject<EntityStateCinematicReady>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCinematicReady";
            static EntityStateCinematicReady load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCinematicReady(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCinematicReady loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCinematicReady(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCinematicReady create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCinematicReady(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCinematicReady makeInstanceOf()
            {
                return EntityStateCinematicReady(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCinematicCompleted : HelperObject<EntityStateCinematicCompleted> // Object
        {
            explicit EntityStateCinematicCompleted(Ent::Property _node): HelperObject<EntityStateCinematicCompleted>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCinematicCompleted";
            static EntityStateCinematicCompleted load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCinematicCompleted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCinematicCompleted loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCinematicCompleted(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCinematicCompleted create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCinematicCompleted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCinematicCompleted makeInstanceOf()
            {
                return EntityStateCinematicCompleted(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateChargingJump : HelperObject<EntityStateChargingJump> // Object
        {
            explicit EntityStateChargingJump(Ent::Property _node): HelperObject<EntityStateChargingJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateChargingJump";
            static EntityStateChargingJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateChargingJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateChargingJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateChargingJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateChargingJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateChargingJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateChargingJump makeInstanceOf()
            {
                return EntityStateChargingJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateChargedJump : HelperObject<EntityStateChargedJump> // Object
        {
            explicit EntityStateChargedJump(Ent::Property _node): HelperObject<EntityStateChargedJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateChargedJump";
            static EntityStateChargedJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateChargedJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateChargedJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateChargedJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateChargedJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateChargedJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateChargedJump makeInstanceOf()
            {
                return EntityStateChargedJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateChargeMode : HelperObject<EntityStateChargeMode> // Object
        {
            explicit EntityStateChargeMode(Ent::Property _node): HelperObject<EntityStateChargeMode>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateChargeMode";
            static EntityStateChargeMode load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateChargeMode(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateChargeMode loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateChargeMode(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateChargeMode create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateChargeMode(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateChargeMode makeInstanceOf()
            {
                return EntityStateChargeMode(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityStateChargeMode_EntityStateChargeModeInputs ChargeModeInputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCanNotBePerceived : HelperObject<EntityStateCanNotBePerceived> // Object
        {
            explicit EntityStateCanNotBePerceived(Ent::Property _node): HelperObject<EntityStateCanNotBePerceived>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCanNotBePerceived";
            static EntityStateCanNotBePerceived load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCanNotBePerceived(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCanNotBePerceived loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCanNotBePerceived(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCanNotBePerceived create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCanNotBePerceived(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCanNotBePerceived makeInstanceOf()
            {
                return EntityStateCanNotBePerceived(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateCallAndMountSpiritAnimal : HelperObject<EntityStateCallAndMountSpiritAnimal> // Object
        {
            explicit EntityStateCallAndMountSpiritAnimal(Ent::Property _node): HelperObject<EntityStateCallAndMountSpiritAnimal>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateCallAndMountSpiritAnimal";
            static EntityStateCallAndMountSpiritAnimal load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateCallAndMountSpiritAnimal(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateCallAndMountSpiritAnimal loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateCallAndMountSpiritAnimal(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateCallAndMountSpiritAnimal create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateCallAndMountSpiritAnimal(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateCallAndMountSpiritAnimal makeInstanceOf()
            {
                return EntityStateCallAndMountSpiritAnimal(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBridgeBeingControlled : HelperObject<EntityStateBridgeBeingControlled> // Object
        {
            explicit EntityStateBridgeBeingControlled(Ent::Property _node): HelperObject<EntityStateBridgeBeingControlled>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBridgeBeingControlled";
            static EntityStateBridgeBeingControlled load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBridgeBeingControlled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBridgeBeingControlled loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBridgeBeingControlled(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBridgeBeingControlled create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBridgeBeingControlled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBridgeBeingControlled makeInstanceOf()
            {
                return EntityStateBridgeBeingControlled(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float CollisionRaycastLength() const;
            Ent::Gen2::Float HorizontalSpeed() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::Float VerticalSpeed() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBridgeAttracted : HelperObject<EntityStateBridgeAttracted> // Object
        {
            explicit EntityStateBridgeAttracted(Ent::Property _node): HelperObject<EntityStateBridgeAttracted>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBridgeAttracted";
            static EntityStateBridgeAttracted load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBridgeAttracted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBridgeAttracted loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBridgeAttracted(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBridgeAttracted create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBridgeAttracted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBridgeAttracted makeInstanceOf()
            {
                return EntityStateBridgeAttracted(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::EntityRef> AttachPointsRef() const;
            Ent::Gen2::Float AttachTime() const;
            Ent::Gen2::Position AttractionTarget() const;
            Ent::Gen2::EntityRef BridgeLinkRef() const;
            Ent::Gen2::Float GroundAttachRaycastLength() const;
            Ent::Gen2::String HotspotName() const;
            Ent::Gen2::Float MaximalAttachDistance() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBridgeAttached : HelperObject<EntityStateBridgeAttached> // Object
        {
            explicit EntityStateBridgeAttached(Ent::Property _node): HelperObject<EntityStateBridgeAttached>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBridgeAttached";
            static EntityStateBridgeAttached load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBridgeAttached(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBridgeAttached loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBridgeAttached(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBridgeAttached create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBridgeAttached(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBridgeAttached makeInstanceOf()
            {
                return EntityStateBridgeAttached(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBreakableEntire : HelperObject<EntityStateBreakableEntire> // Object
        {
            explicit EntityStateBreakableEntire(Ent::Property _node): HelperObject<EntityStateBreakableEntire>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBreakableEntire";
            static EntityStateBreakableEntire load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBreakableEntire(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBreakableEntire loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBreakableEntire(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBreakableEntire create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBreakableEntire(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBreakableEntire makeInstanceOf()
            {
                return EntityStateBreakableEntire(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBreakableBroken : HelperObject<EntityStateBreakableBroken> // Object
        {
            explicit EntityStateBreakableBroken(Ent::Property _node): HelperObject<EntityStateBreakableBroken>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBreakableBroken";
            static EntityStateBreakableBroken load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBreakableBroken(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBreakableBroken loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBreakableBroken(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBreakableBroken create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBreakableBroken(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBreakableBroken makeInstanceOf()
            {
                return EntityStateBreakableBroken(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBreakableBreaking : HelperObject<EntityStateBreakableBreaking> // Object
        {
            explicit EntityStateBreakableBreaking(Ent::Property _node): HelperObject<EntityStateBreakableBreaking>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBreakableBreaking";
            static EntityStateBreakableBreaking load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBreakableBreaking(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBreakableBreaking loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBreakableBreaking(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBreakableBreaking create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBreakableBreaking(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBreakableBreaking makeInstanceOf()
            {
                return EntityStateBreakableBreaking(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBounceLand : HelperObject<EntityStateBounceLand> // Object
        {
            explicit EntityStateBounceLand(Ent::Property _node): HelperObject<EntityStateBounceLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBounceLand";
            static EntityStateBounceLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBounceLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBounceLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBounceLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBounceLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBounceLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBounceLand makeInstanceOf()
            {
                return EntityStateBounceLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBounce : HelperObject<EntityStateBounce> // Object
        {
            explicit EntityStateBounce(Ent::Property _node): HelperObject<EntityStateBounce>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBounce";
            static EntityStateBounce load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBounce(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBounce loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBounce(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBounce create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBounce(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBounce makeInstanceOf()
            {
                return EntityStateBounce(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBoidsHomePos : HelperObject<EntityStateBoidsHomePos> // Object
        {
            explicit EntityStateBoidsHomePos(Ent::Property _node): HelperObject<EntityStateBoidsHomePos>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBoidsHomePos";
            static EntityStateBoidsHomePos load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBoidsHomePos(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBoidsHomePos loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBoidsHomePos(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBoidsHomePos create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBoidsHomePos(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBoidsHomePos makeInstanceOf()
            {
                return EntityStateBoidsHomePos(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Position HomePosition() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBittenDefense : HelperObject<EntityStateBittenDefense> // Object
        {
            explicit EntityStateBittenDefense(Ent::Property _node): HelperObject<EntityStateBittenDefense>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBittenDefense";
            static EntityStateBittenDefense load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBittenDefense(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBittenDefense loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBittenDefense(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBittenDefense create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBittenDefense(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBittenDefense makeInstanceOf()
            {
                return EntityStateBittenDefense(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBitten : HelperObject<EntityStateBitten> // Object
        {
            explicit EntityStateBitten(Ent::Property _node): HelperObject<EntityStateBitten>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBitten";
            static EntityStateBitten load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBitten(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBitten loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBitten(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBitten create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBitten(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBitten makeInstanceOf()
            {
                return EntityStateBitten(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBiteOut : HelperObject<EntityStateBiteOut> // Object
        {
            explicit EntityStateBiteOut(Ent::Property _node): HelperObject<EntityStateBiteOut>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBiteOut";
            static EntityStateBiteOut load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBiteOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBiteOut loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBiteOut(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBiteOut create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBiteOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBiteOut makeInstanceOf()
            {
                return EntityStateBiteOut(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBiteIn : HelperObject<EntityStateBiteIn> // Object
        {
            explicit EntityStateBiteIn(Ent::Property _node): HelperObject<EntityStateBiteIn>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBiteIn";
            static EntityStateBiteIn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBiteIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBiteIn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBiteIn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBiteIn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBiteIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBiteIn makeInstanceOf()
            {
                return EntityStateBiteIn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBiteAttack : HelperObject<EntityStateBiteAttack> // Object
        {
            explicit EntityStateBiteAttack(Ent::Property _node): HelperObject<EntityStateBiteAttack>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBiteAttack";
            static EntityStateBiteAttack load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBiteAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBiteAttack loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBiteAttack(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBiteAttack create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBiteAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBiteAttack makeInstanceOf()
            {
                return EntityStateBiteAttack(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBite : HelperObject<EntityStateBite> // Object
        {
            explicit EntityStateBite(Ent::Property _node): HelperObject<EntityStateBite>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBite";
            static EntityStateBite load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBite(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBite loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBite(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBite create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBite(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBite makeInstanceOf()
            {
                return EntityStateBite(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBeingOnSpike : HelperObject<EntityStateBeingOnSpike> // Object
        {
            explicit EntityStateBeingOnSpike(Ent::Property _node): HelperObject<EntityStateBeingOnSpike>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBeingOnSpike";
            static EntityStateBeingOnSpike load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBeingOnSpike(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBeingOnSpike loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBeingOnSpike(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBeingOnSpike create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBeingOnSpike(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBeingOnSpike makeInstanceOf()
            {
                return EntityStateBeingOnSpike(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float SpikeCooldown() const;
            Ent::Gen2::Float SpikeDamage() const;
            Ent::Gen2::Int SpikeDeadlyHitCount() const;
            Ent::Gen2::Bool SpikeEject() const;
            Ent::Gen2::Float SpikeImpact() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBeingOnSlope : HelperObject<EntityStateBeingOnSlope> // Object
        {
            explicit EntityStateBeingOnSlope(Ent::Property _node): HelperObject<EntityStateBeingOnSlope>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBeingOnSlope";
            static EntityStateBeingOnSlope load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBeingOnSlope(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBeingOnSlope loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBeingOnSlope(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBeingOnSlope create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBeingOnSlope(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBeingOnSlope makeInstanceOf()
            {
                return EntityStateBeingOnSlope(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBeingLinked : HelperObject<EntityStateBeingLinked> // Object
        {
            explicit EntityStateBeingLinked(Ent::Property _node): HelperObject<EntityStateBeingLinked>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBeingLinked";
            static EntityStateBeingLinked load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBeingLinked(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBeingLinked loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBeingLinked(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBeingLinked create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBeingLinked(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBeingLinked makeInstanceOf()
            {
                return EntityStateBeingLinked(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBeingInReeds : HelperObject<EntityStateBeingInReeds> // Object
        {
            explicit EntityStateBeingInReeds(Ent::Property _node): HelperObject<EntityStateBeingInReeds>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBeingInReeds";
            static EntityStateBeingInReeds load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBeingInReeds(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBeingInReeds loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBeingInReeds(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBeingInReeds create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBeingInReeds(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBeingInReeds makeInstanceOf()
            {
                return EntityStateBeingInReeds(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBeingBlockedByVine : HelperObject<EntityStateBeingBlockedByVine> // Object
        {
            explicit EntityStateBeingBlockedByVine(Ent::Property _node): HelperObject<EntityStateBeingBlockedByVine>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBeingBlockedByVine";
            static EntityStateBeingBlockedByVine load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBeingBlockedByVine(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBeingBlockedByVine loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBeingBlockedByVine(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBeingBlockedByVine create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBeingBlockedByVine(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBeingBlockedByVine makeInstanceOf()
            {
                return EntityStateBeingBlockedByVine(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef Blocker() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBackwardLand : HelperObject<EntityStateBackwardLand> // Object
        {
            explicit EntityStateBackwardLand(Ent::Property _node): HelperObject<EntityStateBackwardLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBackwardLand";
            static EntityStateBackwardLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBackwardLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBackwardLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBackwardLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBackwardLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBackwardLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBackwardLand makeInstanceOf()
            {
                return EntityStateBackwardLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateBackwardDodge : HelperObject<EntityStateBackwardDodge> // Object
        {
            explicit EntityStateBackwardDodge(Ent::Property _node): HelperObject<EntityStateBackwardDodge>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateBackwardDodge";
            static EntityStateBackwardDodge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateBackwardDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateBackwardDodge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateBackwardDodge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateBackwardDodge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateBackwardDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateBackwardDodge makeInstanceOf()
            {
                return EntityStateBackwardDodge(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateAttitudeGroggy : HelperObject<EntityStateAttitudeGroggy> // Object
        {
            explicit EntityStateAttitudeGroggy(Ent::Property _node): HelperObject<EntityStateAttitudeGroggy>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateAttitudeGroggy";
            static EntityStateAttitudeGroggy load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateAttitudeGroggy(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateAttitudeGroggy loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateAttitudeGroggy(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateAttitudeGroggy create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateAttitudeGroggy(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateAttitudeGroggy makeInstanceOf()
            {
                return EntityStateAttitudeGroggy(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateAttackDive : HelperObject<EntityStateAttackDive> // Object
        {
            explicit EntityStateAttackDive(Ent::Property _node): HelperObject<EntityStateAttackDive>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateAttackDive";
            static EntityStateAttackDive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateAttackDive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateAttackDive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateAttackDive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateAttackDive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateAttackDive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateAttackDive makeInstanceOf()
            {
                return EntityStateAttackDive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateAskStaffGuide : HelperObject<EntityStateAskStaffGuide> // Object
        {
            explicit EntityStateAskStaffGuide(Ent::Property _node): HelperObject<EntityStateAskStaffGuide>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateAskStaffGuide";
            static EntityStateAskStaffGuide load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateAskStaffGuide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateAskStaffGuide loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateAskStaffGuide(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateAskStaffGuide create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateAskStaffGuide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateAskStaffGuide makeInstanceOf()
            {
                return EntityStateAskStaffGuide(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateApplyExtraLife : HelperObject<EntityStateApplyExtraLife> // Object
        {
            explicit EntityStateApplyExtraLife(Ent::Property _node): HelperObject<EntityStateApplyExtraLife>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateApplyExtraLife";
            static EntityStateApplyExtraLife load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateApplyExtraLife(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateApplyExtraLife loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateApplyExtraLife(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateApplyExtraLife create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateApplyExtraLife(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateApplyExtraLife makeInstanceOf()
            {
                return EntityStateApplyExtraLife(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateAirControl : HelperObject<EntityStateAirControl> // Object
        {
            explicit EntityStateAirControl(Ent::Property _node): HelperObject<EntityStateAirControl>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateAirControl";
            static EntityStateAirControl load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateAirControl(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateAirControl loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateAirControl(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateAirControl create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateAirControl(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateAirControl makeInstanceOf()
            {
                return EntityStateAirControl(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateAimAt : HelperObject<EntityStateAimAt> // Object
        {
            explicit EntityStateAimAt(Ent::Property _node): HelperObject<EntityStateAimAt>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateAimAt";
            static EntityStateAimAt load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateAimAt(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateAimAt loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateAimAt(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateAimAt create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateAimAt(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateAimAt makeInstanceOf()
            {
                return EntityStateAimAt(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateAerialJump : HelperObject<EntityStateAerialJump> // Object
        {
            explicit EntityStateAerialJump(Ent::Property _node): HelperObject<EntityStateAerialJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateAerialJump";
            static EntityStateAerialJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateAerialJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateAerialJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateAerialJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateAerialJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateAerialJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateAerialJump makeInstanceOf()
            {
                return EntityStateAerialJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityStateAboutToBeHatched : HelperObject<EntityStateAboutToBeHatched> // Object
        {
            explicit EntityStateAboutToBeHatched(Ent::Property _node): HelperObject<EntityStateAboutToBeHatched>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityStateAboutToBeHatched";
            static EntityStateAboutToBeHatched load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityStateAboutToBeHatched(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityStateAboutToBeHatched loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityStateAboutToBeHatched(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityStateAboutToBeHatched create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityStateAboutToBeHatched(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityStateAboutToBeHatched makeInstanceOf()
            {
                return EntityStateAboutToBeHatched(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateTryUpgradeShamanStaff : HelperObject<ActorStateTryUpgradeShamanStaff> // Object
        {
            explicit ActorStateTryUpgradeShamanStaff(Ent::Property _node): HelperObject<ActorStateTryUpgradeShamanStaff>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateTryUpgradeShamanStaff";
            static ActorStateTryUpgradeShamanStaff load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateTryUpgradeShamanStaff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateTryUpgradeShamanStaff loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateTryUpgradeShamanStaff(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateTryUpgradeShamanStaff create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateTryUpgradeShamanStaff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateTryUpgradeShamanStaff makeInstanceOf()
            {
                return ActorStateTryUpgradeShamanStaff(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateTryEquipShamanStaff : HelperObject<ActorStateTryEquipShamanStaff> // Object
        {
            explicit ActorStateTryEquipShamanStaff(Ent::Property _node): HelperObject<ActorStateTryEquipShamanStaff>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateTryEquipShamanStaff";
            static ActorStateTryEquipShamanStaff load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateTryEquipShamanStaff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateTryEquipShamanStaff loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateTryEquipShamanStaff(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateTryEquipShamanStaff create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateTryEquipShamanStaff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateTryEquipShamanStaff makeInstanceOf()
            {
                return ActorStateTryEquipShamanStaff(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateTeleportWhileMoving : HelperObject<ActorStateTeleportWhileMoving> // Object
        {
            explicit ActorStateTeleportWhileMoving(Ent::Property _node): HelperObject<ActorStateTeleportWhileMoving>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateTeleportWhileMoving";
            static ActorStateTeleportWhileMoving load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateTeleportWhileMoving(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateTeleportWhileMoving loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateTeleportWhileMoving(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateTeleportWhileMoving create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateTeleportWhileMoving(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateTeleportWhileMoving makeInstanceOf()
            {
                return ActorStateTeleportWhileMoving(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::ActorStateTeleportWhileMovingInputs input() const;
        };

        struct ActorStateTeleportToTarget : HelperObject<ActorStateTeleportToTarget> // Object
        {
            explicit ActorStateTeleportToTarget(Ent::Property _node): HelperObject<ActorStateTeleportToTarget>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateTeleportToTarget";
            static ActorStateTeleportToTarget load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateTeleportToTarget(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateTeleportToTarget loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateTeleportToTarget(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateTeleportToTarget create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateTeleportToTarget(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateTeleportToTarget makeInstanceOf()
            {
                return ActorStateTeleportToTarget(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateTeleport : HelperObject<ActorStateTeleport> // Object
        {
            explicit ActorStateTeleport(Ent::Property _node): HelperObject<ActorStateTeleport>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateTeleport";
            static ActorStateTeleport load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateTeleport(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateTeleport loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateTeleport(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateTeleport create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateTeleport(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateTeleport makeInstanceOf()
            {
                return ActorStateTeleport(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorStateTeleport_Inputs Inputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateTaunting : HelperObject<ActorStateTaunting> // Object
        {
            explicit ActorStateTaunting(Ent::Property _node): HelperObject<ActorStateTaunting>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateTaunting";
            static ActorStateTaunting load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateTaunting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateTaunting loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateTaunting(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateTaunting create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateTaunting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateTaunting makeInstanceOf()
            {
                return ActorStateTaunting(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateStopAttitudeAggressive : HelperObject<ActorStateStopAttitudeAggressive> // Object
        {
            explicit ActorStateStopAttitudeAggressive(Ent::Property _node): HelperObject<ActorStateStopAttitudeAggressive>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateStopAttitudeAggressive";
            static ActorStateStopAttitudeAggressive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateStopAttitudeAggressive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateStopAttitudeAggressive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateStopAttitudeAggressive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateStopAttitudeAggressive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateStopAttitudeAggressive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateStopAttitudeAggressive makeInstanceOf()
            {
                return ActorStateStopAttitudeAggressive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSpeedMultiplier : HelperObject<ActorStateSpeedMultiplier> // Object
        {
            explicit ActorStateSpeedMultiplier(Ent::Property _node): HelperObject<ActorStateSpeedMultiplier>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSpeedMultiplier";
            static ActorStateSpeedMultiplier load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSpeedMultiplier(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSpeedMultiplier loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSpeedMultiplier(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSpeedMultiplier create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSpeedMultiplier(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSpeedMultiplier makeInstanceOf()
            {
                return ActorStateSpeedMultiplier(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float SpeedMultiplier() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSoulWaitingToRespawn : HelperObject<ActorStateSoulWaitingToRespawn> // Object
        {
            explicit ActorStateSoulWaitingToRespawn(Ent::Property _node): HelperObject<ActorStateSoulWaitingToRespawn>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSoulWaitingToRespawn";
            static ActorStateSoulWaitingToRespawn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSoulWaitingToRespawn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSoulWaitingToRespawn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSoulWaitingToRespawn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSoulWaitingToRespawn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSoulWaitingToRespawn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSoulWaitingToRespawn makeInstanceOf()
            {
                return ActorStateSoulWaitingToRespawn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EnergySide EnergySide() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSoulRespawn : HelperObject<ActorStateSoulRespawn> // Object
        {
            explicit ActorStateSoulRespawn(Ent::Property _node): HelperObject<ActorStateSoulRespawn>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSoulRespawn";
            static ActorStateSoulRespawn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSoulRespawn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSoulRespawn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSoulRespawn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSoulRespawn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSoulRespawn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSoulRespawn makeInstanceOf()
            {
                return ActorStateSoulRespawn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSlope : HelperObject<ActorStateSlope> // Object
        {
            explicit ActorStateSlope(Ent::Property _node): HelperObject<ActorStateSlope>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSlope";
            static ActorStateSlope load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSlope(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSlope loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSlope(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSlope create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSlope(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSlope makeInstanceOf()
            {
                return ActorStateSlope(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSleeping : HelperObject<ActorStateSleeping> // Object
        {
            explicit ActorStateSleeping(Ent::Property _node): HelperObject<ActorStateSleeping>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSleeping";
            static ActorStateSleeping load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSleeping(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSleeping loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSleeping(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSleeping create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSleeping(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSleeping makeInstanceOf()
            {
                return ActorStateSleeping(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSkeletonPartPickUpState : HelperObject<ActorStateSkeletonPartPickUpState> // Object
        {
            explicit ActorStateSkeletonPartPickUpState(Ent::Property _node): HelperObject<ActorStateSkeletonPartPickUpState>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSkeletonPartPickUpState";
            static ActorStateSkeletonPartPickUpState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSkeletonPartPickUpState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSkeletonPartPickUpState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSkeletonPartPickUpState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSkeletonPartPickUpState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSkeletonPartPickUpState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSkeletonPartPickUpState makeInstanceOf()
            {
                return ActorStateSkeletonPartPickUpState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSkeletonPartPickUpRequest : HelperObject<ActorStateSkeletonPartPickUpRequest> // Object
        {
            explicit ActorStateSkeletonPartPickUpRequest(Ent::Property _node): HelperObject<ActorStateSkeletonPartPickUpRequest>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSkeletonPartPickUpRequest";
            static ActorStateSkeletonPartPickUpRequest load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSkeletonPartPickUpRequest(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSkeletonPartPickUpRequest loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSkeletonPartPickUpRequest(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSkeletonPartPickUpRequest create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSkeletonPartPickUpRequest(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSkeletonPartPickUpRequest makeInstanceOf()
            {
                return ActorStateSkeletonPartPickUpRequest(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSink : HelperObject<ActorStateSink> // Object
        {
            explicit ActorStateSink(Ent::Property _node): HelperObject<ActorStateSink>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSink";
            static ActorStateSink load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSink(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSink loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSink(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSink create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSink(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSink makeInstanceOf()
            {
                return ActorStateSink(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateShootingFlow : HelperObject<ActorStateShootingFlow> // Object
        {
            explicit ActorStateShootingFlow(Ent::Property _node): HelperObject<ActorStateShootingFlow>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateShootingFlow";
            static ActorStateShootingFlow load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateShootingFlow(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateShootingFlow loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateShootingFlow(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateShootingFlow create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateShootingFlow(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateShootingFlow makeInstanceOf()
            {
                return ActorStateShootingFlow(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateShapeshift : HelperObject<ActorStateShapeshift> // Object
        {
            explicit ActorStateShapeshift(Ent::Property _node): HelperObject<ActorStateShapeshift>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateShapeshift";
            static ActorStateShapeshift load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateShapeshift(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateShapeshift loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateShapeshift(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateShapeshift create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateShapeshift(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateShapeshift makeInstanceOf()
            {
                return ActorStateShapeshift(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateShamanItemPartState : HelperObject<ActorStateShamanItemPartState> // Object
        {
            explicit ActorStateShamanItemPartState(Ent::Property _node): HelperObject<ActorStateShamanItemPartState>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateShamanItemPartState";
            static ActorStateShamanItemPartState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateShamanItemPartState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateShamanItemPartState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateShamanItemPartState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateShamanItemPartState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateShamanItemPartState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateShamanItemPartState makeInstanceOf()
            {
                return ActorStateShamanItemPartState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateShamanItemLiving : HelperObject<ActorStateShamanItemLiving> // Object
        {
            explicit ActorStateShamanItemLiving(Ent::Property _node): HelperObject<ActorStateShamanItemLiving>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateShamanItemLiving";
            static ActorStateShamanItemLiving load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateShamanItemLiving(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateShamanItemLiving loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateShamanItemLiving(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateShamanItemLiving create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateShamanItemLiving(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateShamanItemLiving makeInstanceOf()
            {
                return ActorStateShamanItemLiving(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool End() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateSendMission : HelperObject<ActorStateSendMission> // Object
        {
            explicit ActorStateSendMission(Ent::Property _node): HelperObject<ActorStateSendMission>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateSendMission";
            static ActorStateSendMission load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateSendMission(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateSendMission loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateSendMission(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateSendMission create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateSendMission(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateSendMission makeInstanceOf()
            {
                return ActorStateSendMission(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateScreaming : HelperObject<ActorStateScreaming> // Object
        {
            explicit ActorStateScreaming(Ent::Property _node): HelperObject<ActorStateScreaming>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateScreaming";
            static ActorStateScreaming load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateScreaming(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateScreaming loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateScreaming(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateScreaming create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateScreaming(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateScreaming makeInstanceOf()
            {
                return ActorStateScreaming(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateRequestingWaiting : HelperObject<ActorStateRequestingWaiting> // Object
        {
            explicit ActorStateRequestingWaiting(Ent::Property _node): HelperObject<ActorStateRequestingWaiting>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateRequestingWaiting";
            static ActorStateRequestingWaiting load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateRequestingWaiting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateRequestingWaiting loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateRequestingWaiting(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateRequestingWaiting create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateRequestingWaiting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateRequestingWaiting makeInstanceOf()
            {
                return ActorStateRequestingWaiting(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateRequestingHealing : HelperObject<ActorStateRequestingHealing> // Object
        {
            explicit ActorStateRequestingHealing(Ent::Property _node): HelperObject<ActorStateRequestingHealing>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateRequestingHealing";
            static ActorStateRequestingHealing load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateRequestingHealing(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateRequestingHealing loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateRequestingHealing(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateRequestingHealing create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateRequestingHealing(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateRequestingHealing makeInstanceOf()
            {
                return ActorStateRequestingHealing(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateRecover : HelperObject<ActorStateRecover> // Object
        {
            explicit ActorStateRecover(Ent::Property _node): HelperObject<ActorStateRecover>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateRecover";
            static ActorStateRecover load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateRecover(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateRecover loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateRecover(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateRecover create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateRecover(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateRecover makeInstanceOf()
            {
                return ActorStateRecover(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateReactingLava : HelperObject<ActorStateReactingLava> // Object
        {
            explicit ActorStateReactingLava(Ent::Property _node): HelperObject<ActorStateReactingLava>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateReactingLava";
            static ActorStateReactingLava load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateReactingLava(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateReactingLava loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateReactingLava(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateReactingLava create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateReactingLava(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateReactingLava makeInstanceOf()
            {
                return ActorStateReactingLava(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStatePossessGPE : HelperObject<ActorStatePossessGPE> // Object
        {
            explicit ActorStatePossessGPE(Ent::Property _node): HelperObject<ActorStatePossessGPE>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStatePossessGPE";
            static ActorStatePossessGPE load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStatePossessGPE(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStatePossessGPE loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStatePossessGPE(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStatePossessGPE create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStatePossessGPE(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStatePossessGPE makeInstanceOf()
            {
                return ActorStatePossessGPE(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStatePossessFlocking : HelperObject<ActorStatePossessFlocking> // Object
        {
            explicit ActorStatePossessFlocking(Ent::Property _node): HelperObject<ActorStatePossessFlocking>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStatePossessFlocking";
            static ActorStatePossessFlocking load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStatePossessFlocking(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStatePossessFlocking loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStatePossessFlocking(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStatePossessFlocking create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStatePossessFlocking(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStatePossessFlocking makeInstanceOf()
            {
                return ActorStatePossessFlocking(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateNavigationMesh : HelperObject<ActorStateNavigationMesh> // Object
        {
            explicit ActorStateNavigationMesh(Ent::Property _node): HelperObject<ActorStateNavigationMesh>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateNavigationMesh";
            static ActorStateNavigationMesh load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateNavigationMesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateNavigationMesh loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateNavigationMesh(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateNavigationMesh create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateNavigationMesh(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateNavigationMesh makeInstanceOf()
            {
                return ActorStateNavigationMesh(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMovingSwim : HelperObject<ActorStateMovingSwim> // Object
        {
            explicit ActorStateMovingSwim(Ent::Property _node): HelperObject<ActorStateMovingSwim>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMovingSwim";
            static ActorStateMovingSwim load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMovingSwim(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMovingSwim loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMovingSwim(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMovingSwim create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMovingSwim(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMovingSwim makeInstanceOf()
            {
                return ActorStateMovingSwim(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMovingStandUp : HelperObject<ActorStateMovingStandUp> // Object
        {
            explicit ActorStateMovingStandUp(Ent::Property _node): HelperObject<ActorStateMovingStandUp>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMovingStandUp";
            static ActorStateMovingStandUp load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMovingStandUp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMovingStandUp loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMovingStandUp(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMovingStandUp create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMovingStandUp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMovingStandUp makeInstanceOf()
            {
                return ActorStateMovingStandUp(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMovingRide : HelperObject<ActorStateMovingRide> // Object
        {
            explicit ActorStateMovingRide(Ent::Property _node): HelperObject<ActorStateMovingRide>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMovingRide";
            static ActorStateMovingRide load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMovingRide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMovingRide loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMovingRide(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMovingRide create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMovingRide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMovingRide makeInstanceOf()
            {
                return ActorStateMovingRide(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMovingProne : HelperObject<ActorStateMovingProne> // Object
        {
            explicit ActorStateMovingProne(Ent::Property _node): HelperObject<ActorStateMovingProne>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMovingProne";
            static ActorStateMovingProne load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMovingProne(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMovingProne loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMovingProne(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMovingProne create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMovingProne(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMovingProne makeInstanceOf()
            {
                return ActorStateMovingProne(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMovingFly : HelperObject<ActorStateMovingFly> // Object
        {
            explicit ActorStateMovingFly(Ent::Property _node): HelperObject<ActorStateMovingFly>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMovingFly";
            static ActorStateMovingFly load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMovingFly(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMovingFly loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMovingFly(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMovingFly create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMovingFly(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMovingFly makeInstanceOf()
            {
                return ActorStateMovingFly(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMovingFall : HelperObject<ActorStateMovingFall> // Object
        {
            explicit ActorStateMovingFall(Ent::Property _node): HelperObject<ActorStateMovingFall>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMovingFall";
            static ActorStateMovingFall load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMovingFall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMovingFall loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMovingFall(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMovingFall create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMovingFall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMovingFall makeInstanceOf()
            {
                return ActorStateMovingFall(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMovingDive : HelperObject<ActorStateMovingDive> // Object
        {
            explicit ActorStateMovingDive(Ent::Property _node): HelperObject<ActorStateMovingDive>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMovingDive";
            static ActorStateMovingDive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMovingDive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMovingDive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMovingDive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMovingDive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMovingDive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMovingDive makeInstanceOf()
            {
                return ActorStateMovingDive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMovingClamber : HelperObject<ActorStateMovingClamber> // Object
        {
            explicit ActorStateMovingClamber(Ent::Property _node): HelperObject<ActorStateMovingClamber>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMovingClamber";
            static ActorStateMovingClamber load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMovingClamber(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMovingClamber loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMovingClamber(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMovingClamber create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMovingClamber(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMovingClamber makeInstanceOf()
            {
                return ActorStateMovingClamber(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMoveAlongBezier : HelperObject<ActorStateMoveAlongBezier> // Object
        {
            explicit ActorStateMoveAlongBezier(Ent::Property _node): HelperObject<ActorStateMoveAlongBezier>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMoveAlongBezier";
            static ActorStateMoveAlongBezier load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMoveAlongBezier(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMoveAlongBezier loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMoveAlongBezier(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMoveAlongBezier create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMoveAlongBezier(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMoveAlongBezier makeInstanceOf()
            {
                return ActorStateMoveAlongBezier(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateMeetingLava : HelperObject<ActorStateMeetingLava> // Object
        {
            explicit ActorStateMeetingLava(Ent::Property _node): HelperObject<ActorStateMeetingLava>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateMeetingLava";
            static ActorStateMeetingLava load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateMeetingLava(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateMeetingLava loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateMeetingLava(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateMeetingLava create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateMeetingLava(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateMeetingLava makeInstanceOf()
            {
                return ActorStateMeetingLava(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateLosingOxygen : HelperObject<ActorStateLosingOxygen> // Object
        {
            explicit ActorStateLosingOxygen(Ent::Property _node): HelperObject<ActorStateLosingOxygen>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateLosingOxygen";
            static ActorStateLosingOxygen load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateLosingOxygen(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateLosingOxygen loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateLosingOxygen(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateLosingOxygen create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateLosingOxygen(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateLosingOxygen makeInstanceOf()
            {
                return ActorStateLosingOxygen(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateLeavingLava : HelperObject<ActorStateLeavingLava> // Object
        {
            explicit ActorStateLeavingLava(Ent::Property _node): HelperObject<ActorStateLeavingLava>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateLeavingLava";
            static ActorStateLeavingLava load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateLeavingLava(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateLeavingLava loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateLeavingLava(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateLeavingLava create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateLeavingLava(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateLeavingLava makeInstanceOf()
            {
                return ActorStateLeavingLava(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateInvincible : HelperObject<ActorStateInvincible> // Object
        {
            explicit ActorStateInvincible(Ent::Property _node): HelperObject<ActorStateInvincible>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateInvincible";
            static ActorStateInvincible load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateInvincible(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateInvincible loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateInvincible(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateInvincible create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateInvincible(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateInvincible makeInstanceOf()
            {
                return ActorStateInvincible(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateIKConstraint : HelperObject<ActorStateIKConstraint> // Object
        {
            explicit ActorStateIKConstraint(Ent::Property _node): HelperObject<ActorStateIKConstraint>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateIKConstraint";
            static ActorStateIKConstraint load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateIKConstraint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateIKConstraint loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateIKConstraint(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateIKConstraint create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateIKConstraint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateIKConstraint makeInstanceOf()
            {
                return ActorStateIKConstraint(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateHoldingItem : HelperObject<ActorStateHoldingItem> // Object
        {
            explicit ActorStateHoldingItem(Ent::Property _node): HelperObject<ActorStateHoldingItem>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateHoldingItem";
            static ActorStateHoldingItem load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateHoldingItem(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateHoldingItem loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateHoldingItem(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateHoldingItem create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateHoldingItem(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateHoldingItem makeInstanceOf()
            {
                return ActorStateHoldingItem(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EntityRef InventoryEntityRef() const;
            Ent::Gen2::EntityRef ItemEntityRef() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateHitEnergyWall : HelperObject<ActorStateHitEnergyWall> // Object
        {
            explicit ActorStateHitEnergyWall(Ent::Property _node): HelperObject<ActorStateHitEnergyWall>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateHitEnergyWall";
            static ActorStateHitEnergyWall load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateHitEnergyWall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateHitEnergyWall loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateHitEnergyWall(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateHitEnergyWall create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateHitEnergyWall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateHitEnergyWall makeInstanceOf()
            {
                return ActorStateHitEnergyWall(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateHeld : HelperObject<ActorStateHeld> // Object
        {
            explicit ActorStateHeld(Ent::Property _node): HelperObject<ActorStateHeld>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateHeld";
            static ActorStateHeld load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateHeld(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateHeld loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateHeld(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateHeld create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateHeld(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateHeld makeInstanceOf()
            {
                return ActorStateHeld(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateHasNoBody : HelperObject<ActorStateHasNoBody> // Object
        {
            explicit ActorStateHasNoBody(Ent::Property _node): HelperObject<ActorStateHasNoBody>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateHasNoBody";
            static ActorStateHasNoBody load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateHasNoBody(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateHasNoBody loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateHasNoBody(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateHasNoBody create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateHasNoBody(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateHasNoBody makeInstanceOf()
            {
                return ActorStateHasNoBody(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateForceAgainstSlope : HelperObject<ActorStateForceAgainstSlope> // Object
        {
            explicit ActorStateForceAgainstSlope(Ent::Property _node): HelperObject<ActorStateForceAgainstSlope>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateForceAgainstSlope";
            static ActorStateForceAgainstSlope load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateForceAgainstSlope(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateForceAgainstSlope loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateForceAgainstSlope(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateForceAgainstSlope create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateForceAgainstSlope(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateForceAgainstSlope makeInstanceOf()
            {
                return ActorStateForceAgainstSlope(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateFluidSlowDown : HelperObject<ActorStateFluidSlowDown> // Object
        {
            explicit ActorStateFluidSlowDown(Ent::Property _node): HelperObject<ActorStateFluidSlowDown>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateFluidSlowDown";
            static ActorStateFluidSlowDown load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateFluidSlowDown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateFluidSlowDown loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateFluidSlowDown(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateFluidSlowDown create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateFluidSlowDown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateFluidSlowDown makeInstanceOf()
            {
                return ActorStateFluidSlowDown(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateFlockingRigidbodyBeingActive : HelperObject<ActorStateFlockingRigidbodyBeingActive> // Object
        {
            explicit ActorStateFlockingRigidbodyBeingActive(Ent::Property _node): HelperObject<ActorStateFlockingRigidbodyBeingActive>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateFlockingRigidbodyBeingActive";
            static ActorStateFlockingRigidbodyBeingActive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateFlockingRigidbodyBeingActive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateFlockingRigidbodyBeingActive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateFlockingRigidbodyBeingActive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateFlockingRigidbodyBeingActive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateFlockingRigidbodyBeingActive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateFlockingRigidbodyBeingActive makeInstanceOf()
            {
                return ActorStateFlockingRigidbodyBeingActive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateFlockingLiving : HelperObject<ActorStateFlockingLiving> // Object
        {
            explicit ActorStateFlockingLiving(Ent::Property _node): HelperObject<ActorStateFlockingLiving>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateFlockingLiving";
            static ActorStateFlockingLiving load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateFlockingLiving(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateFlockingLiving loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateFlockingLiving(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateFlockingLiving create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateFlockingLiving(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateFlockingLiving makeInstanceOf()
            {
                return ActorStateFlockingLiving(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool CanCreateHitRigidBodies() const;
            Ent::Gen2::Bool Killed() const;
            Ent::Gen2::Bool Regenerated() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateFlockingIndividualSpawning : HelperObject<ActorStateFlockingIndividualSpawning> // Object
        {
            explicit ActorStateFlockingIndividualSpawning(Ent::Property _node): HelperObject<ActorStateFlockingIndividualSpawning>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateFlockingIndividualSpawning";
            static ActorStateFlockingIndividualSpawning load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateFlockingIndividualSpawning(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateFlockingIndividualSpawning loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateFlockingIndividualSpawning(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateFlockingIndividualSpawning create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateFlockingIndividualSpawning(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateFlockingIndividualSpawning makeInstanceOf()
            {
                return ActorStateFlockingIndividualSpawning(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateFlockingChangingParams : HelperObject<ActorStateFlockingChangingParams> // Object
        {
            explicit ActorStateFlockingChangingParams(Ent::Property _node): HelperObject<ActorStateFlockingChangingParams>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateFlockingChangingParams";
            static ActorStateFlockingChangingParams load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateFlockingChangingParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateFlockingChangingParams loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateFlockingChangingParams(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateFlockingChangingParams create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateFlockingChangingParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateFlockingChangingParams makeInstanceOf()
            {
                return ActorStateFlockingChangingParams(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorStateFlockingChangingParams_Params Params() const;
            Ent::Gen2::ActorStateFlockingChangingParams_Params ParamsBud() const;
            Ent::Gen2::Bool ShouldApplyBudParam() const;
            Ent::Gen2::Bool ShouldApplyParam() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateFlockingAttackFlocking : HelperObject<ActorStateFlockingAttackFlocking> // Object
        {
            explicit ActorStateFlockingAttackFlocking(Ent::Property _node): HelperObject<ActorStateFlockingAttackFlocking>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateFlockingAttackFlocking";
            static ActorStateFlockingAttackFlocking load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateFlockingAttackFlocking(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateFlockingAttackFlocking loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateFlockingAttackFlocking(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateFlockingAttackFlocking create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateFlockingAttackFlocking(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateFlockingAttackFlocking makeInstanceOf()
            {
                return ActorStateFlockingAttackFlocking(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateExitingFly : HelperObject<ActorStateExitingFly> // Object
        {
            explicit ActorStateExitingFly(Ent::Property _node): HelperObject<ActorStateExitingFly>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateExitingFly";
            static ActorStateExitingFly load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateExitingFly(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateExitingFly loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateExitingFly(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateExitingFly create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateExitingFly(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateExitingFly makeInstanceOf()
            {
                return ActorStateExitingFly(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateEnergyShooting : HelperObject<ActorStateEnergyShooting> // Object
        {
            explicit ActorStateEnergyShooting(Ent::Property _node): HelperObject<ActorStateEnergyShooting>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateEnergyShooting";
            static ActorStateEnergyShooting load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateEnergyShooting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateEnergyShooting loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateEnergyShooting(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateEnergyShooting create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateEnergyShooting(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateEnergyShooting makeInstanceOf()
            {
                return ActorStateEnergyShooting(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateDucking : HelperObject<ActorStateDucking> // Object
        {
            explicit ActorStateDucking(Ent::Property _node): HelperObject<ActorStateDucking>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateDucking";
            static ActorStateDucking load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateDucking(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateDucking loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateDucking(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateDucking create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateDucking(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateDucking makeInstanceOf()
            {
                return ActorStateDucking(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ExitRequired() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateDodge3D : HelperObject<ActorStateDodge3D> // Object
        {
            explicit ActorStateDodge3D(Ent::Property _node): HelperObject<ActorStateDodge3D>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateDodge3D";
            static ActorStateDodge3D load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateDodge3D(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateDodge3D loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateDodge3D(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateDodge3D create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateDodge3D(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateDodge3D makeInstanceOf()
            {
                return ActorStateDodge3D(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateDisabledOut : HelperObject<ActorStateDisabledOut> // Object
        {
            explicit ActorStateDisabledOut(Ent::Property _node): HelperObject<ActorStateDisabledOut>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateDisabledOut";
            static ActorStateDisabledOut load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateDisabledOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateDisabledOut loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateDisabledOut(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateDisabledOut create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateDisabledOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateDisabledOut makeInstanceOf()
            {
                return ActorStateDisabledOut(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateDisabledIn : HelperObject<ActorStateDisabledIn> // Object
        {
            explicit ActorStateDisabledIn(Ent::Property _node): HelperObject<ActorStateDisabledIn>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateDisabledIn";
            static ActorStateDisabledIn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateDisabledIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateDisabledIn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateDisabledIn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateDisabledIn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateDisabledIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateDisabledIn makeInstanceOf()
            {
                return ActorStateDisabledIn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateDisabled : HelperObject<ActorStateDisabled> // Object
        {
            explicit ActorStateDisabled(Ent::Property _node): HelperObject<ActorStateDisabled>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateDisabled";
            static ActorStateDisabled load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateDisabled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateDisabled loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateDisabled(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateDisabled create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateDisabled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateDisabled makeInstanceOf()
            {
                return ActorStateDisabled(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateDead : HelperObject<ActorStateDead> // Object
        {
            explicit ActorStateDead(Ent::Property _node): HelperObject<ActorStateDead>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateDead";
            static ActorStateDead load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateDead(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateDead loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateDead(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateDead create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateDead(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateDead makeInstanceOf()
            {
                return ActorStateDead(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateCreature : HelperObject<ActorStateCreature> // Object
        {
            explicit ActorStateCreature(Ent::Property _node): HelperObject<ActorStateCreature>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateCreature";
            static ActorStateCreature load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateCreature(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateCreature loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateCreature(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateCreature create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateCreature(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateCreature makeInstanceOf()
            {
                return ActorStateCreature(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Position Position() const;
            Ent::Gen2::Quat Rotation() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateConvertWithFlow : HelperObject<ActorStateConvertWithFlow> // Object
        {
            explicit ActorStateConvertWithFlow(Ent::Property _node): HelperObject<ActorStateConvertWithFlow>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateConvertWithFlow";
            static ActorStateConvertWithFlow load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateConvertWithFlow(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateConvertWithFlow loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateConvertWithFlow(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateConvertWithFlow create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateConvertWithFlow(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateConvertWithFlow makeInstanceOf()
            {
                return ActorStateConvertWithFlow(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateChargeSpendLife : HelperObject<ActorStateChargeSpendLife> // Object
        {
            explicit ActorStateChargeSpendLife(Ent::Property _node): HelperObject<ActorStateChargeSpendLife>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateChargeSpendLife";
            static ActorStateChargeSpendLife load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateChargeSpendLife(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateChargeSpendLife loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateChargeSpendLife(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateChargeSpendLife create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateChargeSpendLife(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateChargeSpendLife makeInstanceOf()
            {
                return ActorStateChargeSpendLife(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateChangeEnergySide : HelperObject<ActorStateChangeEnergySide> // Object
        {
            explicit ActorStateChangeEnergySide(Ent::Property _node): HelperObject<ActorStateChangeEnergySide>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateChangeEnergySide";
            static ActorStateChangeEnergySide load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateChangeEnergySide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateChangeEnergySide loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateChangeEnergySide(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateChangeEnergySide create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateChangeEnergySide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateChangeEnergySide makeInstanceOf()
            {
                return ActorStateChangeEnergySide(getProperty().makeInstanceOf());
            }
            Ent::Gen2::EnergySide EnergySide() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateCatapultedLand : HelperObject<ActorStateCatapultedLand> // Object
        {
            explicit ActorStateCatapultedLand(Ent::Property _node): HelperObject<ActorStateCatapultedLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateCatapultedLand";
            static ActorStateCatapultedLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateCatapultedLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateCatapultedLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateCatapultedLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateCatapultedLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateCatapultedLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateCatapultedLand makeInstanceOf()
            {
                return ActorStateCatapultedLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateCatapulted : HelperObject<ActorStateCatapulted> // Object
        {
            explicit ActorStateCatapulted(Ent::Property _node): HelperObject<ActorStateCatapulted>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateCatapulted";
            static ActorStateCatapulted load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateCatapulted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateCatapulted loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateCatapulted(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateCatapulted create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateCatapulted(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateCatapulted makeInstanceOf()
            {
                return ActorStateCatapulted(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AirControlMultiplier() const;
            Ent::Gen2::Float FallHeightProtection() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateCallingFollower : HelperObject<ActorStateCallingFollower> // Object
        {
            explicit ActorStateCallingFollower(Ent::Property _node): HelperObject<ActorStateCallingFollower>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateCallingFollower";
            static ActorStateCallingFollower load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateCallingFollower(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateCallingFollower loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateCallingFollower(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateCallingFollower create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateCallingFollower(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateCallingFollower makeInstanceOf()
            {
                return ActorStateCallingFollower(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBuried : HelperObject<ActorStateBuried> // Object
        {
            explicit ActorStateBuried(Ent::Property _node): HelperObject<ActorStateBuried>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBuried";
            static ActorStateBuried load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBuried(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBuried loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBuried(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBuried create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBuried(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBuried makeInstanceOf()
            {
                return ActorStateBuried(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBittenShaked : HelperObject<ActorStateBittenShaked> // Object
        {
            explicit ActorStateBittenShaked(Ent::Property _node): HelperObject<ActorStateBittenShaked>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBittenShaked";
            static ActorStateBittenShaked load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBittenShaked(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBittenShaked loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBittenShaked(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBittenShaked create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBittenShaked(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBittenShaked makeInstanceOf()
            {
                return ActorStateBittenShaked(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBittenRegenerated : HelperObject<ActorStateBittenRegenerated> // Object
        {
            explicit ActorStateBittenRegenerated(Ent::Property _node): HelperObject<ActorStateBittenRegenerated>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBittenRegenerated";
            static ActorStateBittenRegenerated load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBittenRegenerated(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBittenRegenerated loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBittenRegenerated(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBittenRegenerated create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBittenRegenerated(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBittenRegenerated makeInstanceOf()
            {
                return ActorStateBittenRegenerated(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBiteJumpOut : HelperObject<ActorStateBiteJumpOut> // Object
        {
            explicit ActorStateBiteJumpOut(Ent::Property _node): HelperObject<ActorStateBiteJumpOut>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBiteJumpOut";
            static ActorStateBiteJumpOut load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBiteJumpOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBiteJumpOut loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBiteJumpOut(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBiteJumpOut create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBiteJumpOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBiteJumpOut makeInstanceOf()
            {
                return ActorStateBiteJumpOut(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBiteEntityLiving : HelperObject<ActorStateBiteEntityLiving> // Object
        {
            explicit ActorStateBiteEntityLiving(Ent::Property _node): HelperObject<ActorStateBiteEntityLiving>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBiteEntityLiving";
            static ActorStateBiteEntityLiving load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBiteEntityLiving(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBiteEntityLiving loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBiteEntityLiving(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBiteEntityLiving create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBiteEntityLiving(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBiteEntityLiving makeInstanceOf()
            {
                return ActorStateBiteEntityLiving(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int State() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBendingTree : HelperObject<ActorStateBendingTree> // Object
        {
            explicit ActorStateBendingTree(Ent::Property _node): HelperObject<ActorStateBendingTree>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBendingTree";
            static ActorStateBendingTree load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBendingTree(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBendingTree loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBendingTree(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBendingTree create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBendingTree(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBendingTree makeInstanceOf()
            {
                return ActorStateBendingTree(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool AttackInput() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBendingConstraint : HelperObject<ActorStateBendingConstraint> // Object
        {
            explicit ActorStateBendingConstraint(Ent::Property _node): HelperObject<ActorStateBendingConstraint>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBendingConstraint";
            static ActorStateBendingConstraint load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBendingConstraint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBendingConstraint loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBendingConstraint(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBendingConstraint create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBendingConstraint(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBendingConstraint makeInstanceOf()
            {
                return ActorStateBendingConstraint(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingRided : HelperObject<ActorStateBeingRided> // Object
        {
            explicit ActorStateBeingRided(Ent::Property _node): HelperObject<ActorStateBeingRided>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingRided";
            static ActorStateBeingRided load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingRided(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingRided loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingRided(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingRided create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingRided(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingRided makeInstanceOf()
            {
                return ActorStateBeingRided(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingOnPossessedGPE : HelperObject<ActorStateBeingOnPossessedGPE> // Object
        {
            explicit ActorStateBeingOnPossessedGPE(Ent::Property _node): HelperObject<ActorStateBeingOnPossessedGPE>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingOnPossessedGPE";
            static ActorStateBeingOnPossessedGPE load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingOnPossessedGPE(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingOnPossessedGPE loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingOnPossessedGPE(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingOnPossessedGPE create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingOnPossessedGPE(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingOnPossessedGPE makeInstanceOf()
            {
                return ActorStateBeingOnPossessedGPE(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingOnMount : HelperObject<ActorStateBeingOnMount> // Object
        {
            explicit ActorStateBeingOnMount(Ent::Property _node): HelperObject<ActorStateBeingOnMount>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingOnMount";
            static ActorStateBeingOnMount load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingOnMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingOnMount loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingOnMount(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingOnMount create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingOnMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingOnMount makeInstanceOf()
            {
                return ActorStateBeingOnMount(getProperty().makeInstanceOf());
            }
            Ent::Gen2::MountableData MountableData() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingOnGroundFromImmersed : HelperObject<ActorStateBeingOnGroundFromImmersed> // Object
        {
            explicit ActorStateBeingOnGroundFromImmersed(Ent::Property _node): HelperObject<ActorStateBeingOnGroundFromImmersed>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingOnGroundFromImmersed";
            static ActorStateBeingOnGroundFromImmersed load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingOnGroundFromImmersed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingOnGroundFromImmersed loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingOnGroundFromImmersed(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingOnGroundFromImmersed create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingOnGroundFromImmersed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingOnGroundFromImmersed makeInstanceOf()
            {
                return ActorStateBeingOnGroundFromImmersed(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingOnGround : HelperObject<ActorStateBeingOnGround> // Object
        {
            explicit ActorStateBeingOnGround(Ent::Property _node): HelperObject<ActorStateBeingOnGround>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingOnGround";
            static ActorStateBeingOnGround load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingOnGround(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingOnGround loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingOnGround(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingOnGround create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingOnGround(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingOnGround makeInstanceOf()
            {
                return ActorStateBeingOnGround(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingInAir : HelperObject<ActorStateBeingInAir> // Object
        {
            explicit ActorStateBeingInAir(Ent::Property _node): HelperObject<ActorStateBeingInAir>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingInAir";
            static ActorStateBeingInAir load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingInAir(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingInAir loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingInAir(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingInAir create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingInAir(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingInAir makeInstanceOf()
            {
                return ActorStateBeingInAir(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingImmersedFromOnGround : HelperObject<ActorStateBeingImmersedFromOnGround> // Object
        {
            explicit ActorStateBeingImmersedFromOnGround(Ent::Property _node): HelperObject<ActorStateBeingImmersedFromOnGround>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingImmersedFromOnGround";
            static ActorStateBeingImmersedFromOnGround load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingImmersedFromOnGround(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingImmersedFromOnGround loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingImmersedFromOnGround(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingImmersedFromOnGround create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingImmersedFromOnGround(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingImmersedFromOnGround makeInstanceOf()
            {
                return ActorStateBeingImmersedFromOnGround(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingImmersedFromInAir : HelperObject<ActorStateBeingImmersedFromInAir> // Object
        {
            explicit ActorStateBeingImmersedFromInAir(Ent::Property _node): HelperObject<ActorStateBeingImmersedFromInAir>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingImmersedFromInAir";
            static ActorStateBeingImmersedFromInAir load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingImmersedFromInAir(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingImmersedFromInAir loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingImmersedFromInAir(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingImmersedFromInAir create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingImmersedFromInAir(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingImmersedFromInAir makeInstanceOf()
            {
                return ActorStateBeingImmersedFromInAir(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBeingImmersed : HelperObject<ActorStateBeingImmersed> // Object
        {
            explicit ActorStateBeingImmersed(Ent::Property _node): HelperObject<ActorStateBeingImmersed>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBeingImmersed";
            static ActorStateBeingImmersed load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBeingImmersed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBeingImmersed loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBeingImmersed(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBeingImmersed create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBeingImmersed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBeingImmersed makeInstanceOf()
            {
                return ActorStateBeingImmersed(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateBehaviorState : HelperObject<ActorStateBehaviorState> // Object
        {
            explicit ActorStateBehaviorState(Ent::Property _node): HelperObject<ActorStateBehaviorState>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateBehaviorState";
            static ActorStateBehaviorState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateBehaviorState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateBehaviorState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateBehaviorState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateBehaviorState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateBehaviorState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateBehaviorState makeInstanceOf()
            {
                return ActorStateBehaviorState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int State() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateAttitudeAggressive : HelperObject<ActorStateAttitudeAggressive> // Object
        {
            explicit ActorStateAttitudeAggressive(Ent::Property _node): HelperObject<ActorStateAttitudeAggressive>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateAttitudeAggressive";
            static ActorStateAttitudeAggressive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateAttitudeAggressive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateAttitudeAggressive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateAttitudeAggressive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateAttitudeAggressive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateAttitudeAggressive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateAttitudeAggressive makeInstanceOf()
            {
                return ActorStateAttitudeAggressive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateApplyHit : HelperObject<ActorStateApplyHit> // Object
        {
            explicit ActorStateApplyHit(Ent::Property _node): HelperObject<ActorStateApplyHit>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateApplyHit";
            static ActorStateApplyHit load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateApplyHit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateApplyHit loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateApplyHit(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateApplyHit create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateApplyHit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateApplyHit makeInstanceOf()
            {
                return ActorStateApplyHit(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateAnsweringCall : HelperObject<ActorStateAnsweringCall> // Object
        {
            explicit ActorStateAnsweringCall(Ent::Property _node): HelperObject<ActorStateAnsweringCall>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateAnsweringCall";
            static ActorStateAnsweringCall load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateAnsweringCall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateAnsweringCall loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateAnsweringCall(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateAnsweringCall create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateAnsweringCall(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateAnsweringCall makeInstanceOf()
            {
                return ActorStateAnsweringCall(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateAlive : HelperObject<ActorStateAlive> // Object
        {
            explicit ActorStateAlive(Ent::Property _node): HelperObject<ActorStateAlive>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateAlive";
            static ActorStateAlive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateAlive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateAlive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateAlive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateAlive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateAlive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateAlive makeInstanceOf()
            {
                return ActorStateAlive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Damages() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateAimCharge : HelperObject<ActorStateAimCharge> // Object
        {
            explicit ActorStateAimCharge(Ent::Property _node): HelperObject<ActorStateAimCharge>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateAimCharge";
            static ActorStateAimCharge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateAimCharge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateAimCharge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateAimCharge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateAimCharge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateAimCharge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateAimCharge makeInstanceOf()
            {
                return ActorStateAimCharge(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionWait : HelperObject<ActionWait> // Object
        {
            explicit ActionWait(Ent::Property _node): HelperObject<ActionWait>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionWait";
            static ActionWait load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionWait(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionWait loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionWait(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionWait create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionWait(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionWait makeInstanceOf()
            {
                return ActionWait(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ExitRequired() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionUnmount : HelperObject<ActionUnmount> // Object
        {
            explicit ActionUnmount(Ent::Property _node): HelperObject<ActionUnmount>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionUnmount";
            static ActionUnmount load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionUnmount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionUnmount loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionUnmount(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionUnmount create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionUnmount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionUnmount makeInstanceOf()
            {
                return ActionUnmount(getProperty().makeInstanceOf());
            }
            Ent::Gen2::MountableData MountableData() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 acrobaticDirection() const;
            Ent::Gen2::Bool acrobaticUnmount() const;
            Ent::Gen2::SpeedMode speedMode() const;
        };

        struct ActionTriggerStandUp : HelperObject<ActionTriggerStandUp> // Object
        {
            explicit ActionTriggerStandUp(Ent::Property _node): HelperObject<ActionTriggerStandUp>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionTriggerStandUp";
            static ActionTriggerStandUp load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionTriggerStandUp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionTriggerStandUp loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionTriggerStandUp(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionTriggerStandUp create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionTriggerStandUp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionTriggerStandUp makeInstanceOf()
            {
                return ActionTriggerStandUp(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionTriggerShamanVisionExit : HelperObject<ActionTriggerShamanVisionExit> // Object
        {
            explicit ActionTriggerShamanVisionExit(Ent::Property _node): HelperObject<ActionTriggerShamanVisionExit>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionTriggerShamanVisionExit";
            static ActionTriggerShamanVisionExit load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionTriggerShamanVisionExit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionTriggerShamanVisionExit loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionTriggerShamanVisionExit(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionTriggerShamanVisionExit create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionTriggerShamanVisionExit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionTriggerShamanVisionExit makeInstanceOf()
            {
                return ActionTriggerShamanVisionExit(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionTriggerCrouch : HelperObject<ActionTriggerCrouch> // Object
        {
            explicit ActionTriggerCrouch(Ent::Property _node): HelperObject<ActionTriggerCrouch>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionTriggerCrouch";
            static ActionTriggerCrouch load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionTriggerCrouch(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionTriggerCrouch loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionTriggerCrouch(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionTriggerCrouch create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionTriggerCrouch(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionTriggerCrouch makeInstanceOf()
            {
                return ActionTriggerCrouch(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionTopView : HelperObject<ActionTopView> // Object
        {
            explicit ActionTopView(Ent::Property _node): HelperObject<ActionTopView>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionTopView";
            static ActionTopView load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionTopView(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionTopView loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionTopView(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionTopView create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionTopView(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionTopView makeInstanceOf()
            {
                return ActionTopView(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionTalk : HelperObject<ActionTalk> // Object
        {
            explicit ActionTalk(Ent::Property _node): HelperObject<ActionTalk>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionTalk";
            static ActionTalk load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionTalk(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionTalk loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionTalk(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionTalk create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionTalk(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionTalk makeInstanceOf()
            {
                return ActionTalk(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionTakeOff : HelperObject<ActionTakeOff> // Object
        {
            explicit ActionTakeOff(Ent::Property _node): HelperObject<ActionTakeOff>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionTakeOff";
            static ActionTakeOff load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionTakeOff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionTakeOff loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionTakeOff(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionTakeOff create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionTakeOff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionTakeOff makeInstanceOf()
            {
                return ActionTakeOff(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStrafeTurn : HelperObject<ActionStrafeTurn> // Object
        {
            explicit ActionStrafeTurn(Ent::Property _node): HelperObject<ActionStrafeTurn>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStrafeTurn";
            static ActionStrafeTurn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStrafeTurn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStrafeTurn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStrafeTurn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStrafeTurn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStrafeTurn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStrafeTurn makeInstanceOf()
            {
                return ActionStrafeTurn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStrafe : HelperObject<ActionStrafe> // Object
        {
            explicit ActionStrafe(Ent::Property _node): HelperObject<ActionStrafe>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStrafe";
            static ActionStrafe load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStrafe(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStrafe loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStrafe(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStrafe create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStrafe(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStrafe makeInstanceOf()
            {
                return ActionStrafe(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool changeAnimationAllowed() const;
            Ent::Gen2::Float speedrequired() const;
            Ent::Gen2::Vector3 trajectoryDir() const;
            Ent::Gen2::Vector3 visualDir() const;
        };

        struct ActionStop : HelperObject<ActionStop> // Object
        {
            explicit ActionStop(Ent::Property _node): HelperObject<ActionStop>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStop";
            static ActionStop load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStop(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStop loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStop(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStop create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStop(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStop makeInstanceOf()
            {
                return ActionStop(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStartRun : HelperObject<ActionStartRun> // Object
        {
            explicit ActionStartRun(Ent::Property _node): HelperObject<ActionStartRun>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStartRun";
            static ActionStartRun load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStartRun(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStartRun loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStartRun(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStartRun create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStartRun(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStartRun makeInstanceOf()
            {
                return ActionStartRun(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionSlide : HelperObject<ActionSlide> // Object
        {
            explicit ActionSlide(Ent::Property _node): HelperObject<ActionSlide>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionSlide";
            static ActionSlide load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionSlide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionSlide loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionSlide(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionSlide create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionSlide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionSlide makeInstanceOf()
            {
                return ActionSlide(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionShootBeam : HelperObject<ActionShootBeam> // Object
        {
            explicit ActionShootBeam(Ent::Property _node): HelperObject<ActionShootBeam>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionShootBeam";
            static ActionShootBeam load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionShootBeam(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionShootBeam loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionShootBeam(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionShootBeam create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionShootBeam(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionShootBeam makeInstanceOf()
            {
                return ActionShootBeam(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionShamanVision : HelperObject<ActionShamanVision> // Object
        {
            explicit ActionShamanVision(Ent::Property _node): HelperObject<ActionShamanVision>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionShamanVision";
            static ActionShamanVision load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionShamanVision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionShamanVision loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionShamanVision(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionShamanVision create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionShamanVision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionShamanVision makeInstanceOf()
            {
                return ActionShamanVision(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionScaleRider : HelperObject<ActionScaleRider> // Object
        {
            explicit ActionScaleRider(Ent::Property _node): HelperObject<ActionScaleRider>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionScaleRider";
            static ActionScaleRider load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionScaleRider(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionScaleRider loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionScaleRider(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionScaleRider create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionScaleRider(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionScaleRider makeInstanceOf()
            {
                return ActionScaleRider(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionRise : HelperObject<ActionRise> // Object
        {
            explicit ActionRise(Ent::Property _node): HelperObject<ActionRise>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionRise";
            static ActionRise load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionRise(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionRise loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionRise(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionRise create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionRise(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionRise makeInstanceOf()
            {
                return ActionRise(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionRiderStance : HelperObject<ActionRiderStance> // Object
        {
            explicit ActionRiderStance(Ent::Property _node): HelperObject<ActionRiderStance>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionRiderStance";
            static ActionRiderStance load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionRiderStance(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionRiderStance loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionRiderStance(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionRiderStance create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionRiderStance(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionRiderStance makeInstanceOf()
            {
                return ActionRiderStance(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionReviveMaskEffect : HelperObject<ActionReviveMaskEffect> // Object
        {
            explicit ActionReviveMaskEffect(Ent::Property _node): HelperObject<ActionReviveMaskEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionReviveMaskEffect";
            static ActionReviveMaskEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionReviveMaskEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionReviveMaskEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionReviveMaskEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionReviveMaskEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionReviveMaskEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionReviveMaskEffect makeInstanceOf()
            {
                return ActionReviveMaskEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionRagdoll : HelperObject<ActionRagdoll> // Object
        {
            explicit ActionRagdoll(Ent::Property _node): HelperObject<ActionRagdoll>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionRagdoll";
            static ActionRagdoll load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionRagdoll(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionRagdoll loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionRagdoll(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionRagdoll create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionRagdoll(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionRagdoll makeInstanceOf()
            {
                return ActionRagdoll(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int State() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionQuadStandUpStateOut : HelperObject<ActionQuadStandUpStateOut> // Object
        {
            explicit ActionQuadStandUpStateOut(Ent::Property _node): HelperObject<ActionQuadStandUpStateOut>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionQuadStandUpStateOut";
            static ActionQuadStandUpStateOut load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionQuadStandUpStateOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionQuadStandUpStateOut loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionQuadStandUpStateOut(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionQuadStandUpStateOut create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionQuadStandUpStateOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionQuadStandUpStateOut makeInstanceOf()
            {
                return ActionQuadStandUpStateOut(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionQuadStandUpStateIn : HelperObject<ActionQuadStandUpStateIn> // Object
        {
            explicit ActionQuadStandUpStateIn(Ent::Property _node): HelperObject<ActionQuadStandUpStateIn>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionQuadStandUpStateIn";
            static ActionQuadStandUpStateIn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionQuadStandUpStateIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionQuadStandUpStateIn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionQuadStandUpStateIn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionQuadStandUpStateIn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionQuadStandUpStateIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionQuadStandUpStateIn makeInstanceOf()
            {
                return ActionQuadStandUpStateIn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionQuadStandUpState : HelperObject<ActionQuadStandUpState> // Object
        {
            explicit ActionQuadStandUpState(Ent::Property _node): HelperObject<ActionQuadStandUpState>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionQuadStandUpState";
            static ActionQuadStandUpState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionQuadStandUpState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionQuadStandUpState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionQuadStandUpState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionQuadStandUpState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionQuadStandUpState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionQuadStandUpState makeInstanceOf()
            {
                return ActionQuadStandUpState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ExitRequired() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionPushed : HelperObject<ActionPushed> // Object
        {
            explicit ActionPushed(Ent::Property _node): HelperObject<ActionPushed>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionPushed";
            static ActionPushed load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionPushed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionPushed loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionPushed(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionPushed create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionPushed(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionPushed makeInstanceOf()
            {
                return ActionPushed(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionPropelled : HelperObject<ActionPropelled> // Object
        {
            explicit ActionPropelled(Ent::Property _node): HelperObject<ActionPropelled>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionPropelled";
            static ActionPropelled load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionPropelled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionPropelled loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionPropelled(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionPropelled create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionPropelled(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionPropelled makeInstanceOf()
            {
                return ActionPropelled(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AirControlMultiplier() const;
            Ent::Gen2::Float FallHeightProtection() const;
            Ent::Gen2::Bool InstantVisualOrientation() const;
            Ent::Gen2::Vector3 PropelForce() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionPlayAnim : HelperObject<ActionPlayAnim> // Object
        {
            explicit ActionPlayAnim(Ent::Property _node): HelperObject<ActionPlayAnim>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionPlayAnim";
            static ActionPlayAnim load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionPlayAnim(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionPlayAnim loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionPlayAnim(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionPlayAnim create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionPlayAnim(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionPlayAnim makeInstanceOf()
            {
                return ActionPlayAnim(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float MaxTime() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool exitRequired() const;
        };

        struct ActionPatinate : HelperObject<ActionPatinate> // Object
        {
            explicit ActionPatinate(Ent::Property _node): HelperObject<ActionPatinate>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionPatinate";
            static ActionPatinate load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionPatinate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionPatinate loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionPatinate(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionPatinate create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionPatinate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionPatinate makeInstanceOf()
            {
                return ActionPatinate(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionPathfindAndMove : HelperObject<ActionPathfindAndMove> // Object
        {
            explicit ActionPathfindAndMove(Ent::Property _node): HelperObject<ActionPathfindAndMove>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionPathfindAndMove";
            static ActionPathfindAndMove load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionPathfindAndMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionPathfindAndMove loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionPathfindAndMove(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionPathfindAndMove create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionPathfindAndMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionPathfindAndMove makeInstanceOf()
            {
                return ActionPathfindAndMove(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionOutfitSpecialState : HelperObject<ActionOutfitSpecialState> // Object
        {
            explicit ActionOutfitSpecialState(Ent::Property _node): HelperObject<ActionOutfitSpecialState>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionOutfitSpecialState";
            static ActionOutfitSpecialState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionOutfitSpecialState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionOutfitSpecialState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionOutfitSpecialState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionOutfitSpecialState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionOutfitSpecialState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionOutfitSpecialState makeInstanceOf()
            {
                return ActionOutfitSpecialState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionOrientMount : HelperObject<ActionOrientMount> // Object
        {
            explicit ActionOrientMount(Ent::Property _node): HelperObject<ActionOrientMount>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionOrientMount";
            static ActionOrientMount load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionOrientMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionOrientMount loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionOrientMount(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionOrientMount create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionOrientMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionOrientMount makeInstanceOf()
            {
                return ActionOrientMount(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 m_direction() const;
        };

        struct ActionMoveTo : HelperObject<ActionMoveTo> // Object
        {
            explicit ActionMoveTo(Ent::Property _node): HelperObject<ActionMoveTo>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionMoveTo";
            static ActionMoveTo load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionMoveTo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionMoveTo loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionMoveTo(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionMoveTo create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionMoveTo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionMoveTo makeInstanceOf()
            {
                return ActionMoveTo(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionMoveProjectile : HelperObject<ActionMoveProjectile> // Object
        {
            explicit ActionMoveProjectile(Ent::Property _node): HelperObject<ActionMoveProjectile>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionMoveProjectile";
            static ActionMoveProjectile load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionMoveProjectile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionMoveProjectile loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionMoveProjectile(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionMoveProjectile create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionMoveProjectile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionMoveProjectile makeInstanceOf()
            {
                return ActionMoveProjectile(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::ProjectileTrajectory Trajectory() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionMove : HelperObject<ActionMove> // Object
        {
            explicit ActionMove(Ent::Property _node): HelperObject<ActionMove>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionMove";
            static ActionMove load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionMove loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionMove(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionMove create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionMove makeInstanceOf()
            {
                return ActionMove(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Vector3 CurrentDirection() const;
            Ent::Gen2::Bool InstantReachSpeedRequired() const;
            Ent::Gen2::Float Speed() const;
            Ent::Gen2::SpeedMode SpeedModeDest() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionMountReception : HelperObject<ActionMountReception> // Object
        {
            explicit ActionMountReception(Ent::Property _node): HelperObject<ActionMountReception>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionMountReception";
            static ActionMountReception load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionMountReception(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionMountReception loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionMountReception(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionMountReception create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionMountReception(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionMountReception makeInstanceOf()
            {
                return ActionMountReception(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionLookAt : HelperObject<ActionLookAt> // Object
        {
            explicit ActionLookAt(Ent::Property _node): HelperObject<ActionLookAt>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionLookAt";
            static ActionLookAt load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionLookAt(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionLookAt loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionLookAt(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionLookAt create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionLookAt(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionLookAt makeInstanceOf()
            {
                return ActionLookAt(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionLandingMount : HelperObject<ActionLandingMount> // Object
        {
            explicit ActionLandingMount(Ent::Property _node): HelperObject<ActionLandingMount>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionLandingMount";
            static ActionLandingMount load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionLandingMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionLandingMount loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionLandingMount(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionLandingMount create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionLandingMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionLandingMount makeInstanceOf()
            {
                return ActionLandingMount(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionLand : HelperObject<ActionLand> // Object
        {
            explicit ActionLand(Ent::Property _node): HelperObject<ActionLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionLand";
            static ActionLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionLand makeInstanceOf()
            {
                return ActionLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionJumpOnto : HelperObject<ActionJumpOnto> // Object
        {
            explicit ActionJumpOnto(Ent::Property _node): HelperObject<ActionJumpOnto>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionJumpOnto";
            static ActionJumpOnto load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionJumpOnto(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionJumpOnto loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionJumpOnto(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionJumpOnto create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionJumpOnto(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionJumpOnto makeInstanceOf()
            {
                return ActionJumpOnto(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionJump : HelperObject<ActionJump> // Object
        {
            explicit ActionJump(Ent::Property _node): HelperObject<ActionJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionJump";
            static ActionJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionJump makeInstanceOf()
            {
                return ActionJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool jumpAnalog() const;
        };

        struct ActionIncarnated : HelperObject<ActionIncarnated> // Object
        {
            explicit ActionIncarnated(Ent::Property _node): HelperObject<ActionIncarnated>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionIncarnated";
            static ActionIncarnated load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionIncarnated(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionIncarnated loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionIncarnated(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionIncarnated create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionIncarnated(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionIncarnated makeInstanceOf()
            {
                return ActionIncarnated(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionIncarnate : HelperObject<ActionIncarnate> // Object
        {
            explicit ActionIncarnate(Ent::Property _node): HelperObject<ActionIncarnate>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionIncarnate";
            static ActionIncarnate load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionIncarnate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionIncarnate loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionIncarnate(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionIncarnate create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionIncarnate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionIncarnate makeInstanceOf()
            {
                return ActionIncarnate(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ExitRequired() const;
            Ent::Gen2::String GameEffectHash() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionIdle : HelperObject<ActionIdle> // Object
        {
            explicit ActionIdle(Ent::Property _node): HelperObject<ActionIdle>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionIdle";
            static ActionIdle load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionIdle(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionIdle loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionIdle(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionIdle create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionIdle(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionIdle makeInstanceOf()
            {
                return ActionIdle(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionHit : HelperObject<ActionHit> // Object
        {
            explicit ActionHit(Ent::Property _node): HelperObject<ActionHit>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionHit";
            static ActionHit load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionHit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionHit loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionHit(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionHit create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionHit(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionHit makeInstanceOf()
            {
                return ActionHit(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Hit Hit() const;
            Ent::Gen2::Bool NoAnimNeeded() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::Bool TransferAllowed() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionFlyUp : HelperObject<ActionFlyUp> // Object
        {
            explicit ActionFlyUp(Ent::Property _node): HelperObject<ActionFlyUp>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionFlyUp";
            static ActionFlyUp load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionFlyUp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionFlyUp loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionFlyUp(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionFlyUp create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionFlyUp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionFlyUp makeInstanceOf()
            {
                return ActionFlyUp(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionFlyFlap : HelperObject<ActionFlyFlap> // Object
        {
            explicit ActionFlyFlap(Ent::Property _node): HelperObject<ActionFlyFlap>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionFlyFlap";
            static ActionFlyFlap load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionFlyFlap(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionFlyFlap loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionFlyFlap(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionFlyFlap create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionFlyFlap(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionFlyFlap makeInstanceOf()
            {
                return ActionFlyFlap(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionFlyDown : HelperObject<ActionFlyDown> // Object
        {
            explicit ActionFlyDown(Ent::Property _node): HelperObject<ActionFlyDown>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionFlyDown";
            static ActionFlyDown load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionFlyDown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionFlyDown loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionFlyDown(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionFlyDown create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionFlyDown(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionFlyDown makeInstanceOf()
            {
                return ActionFlyDown(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionFlyDive : HelperObject<ActionFlyDive> // Object
        {
            explicit ActionFlyDive(Ent::Property _node): HelperObject<ActionFlyDive>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionFlyDive";
            static ActionFlyDive load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionFlyDive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionFlyDive loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionFlyDive(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionFlyDive create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionFlyDive(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionFlyDive makeInstanceOf()
            {
                return ActionFlyDive(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionFlyCrash : HelperObject<ActionFlyCrash> // Object
        {
            explicit ActionFlyCrash(Ent::Property _node): HelperObject<ActionFlyCrash>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionFlyCrash";
            static ActionFlyCrash load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionFlyCrash(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionFlyCrash loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionFlyCrash(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionFlyCrash create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionFlyCrash(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionFlyCrash makeInstanceOf()
            {
                return ActionFlyCrash(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionDrop : HelperObject<ActionDrop> // Object
        {
            explicit ActionDrop(Ent::Property _node): HelperObject<ActionDrop>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDrop";
            static ActionDrop load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDrop(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDrop loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDrop(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDrop create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDrop(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDrop makeInstanceOf()
            {
                return ActionDrop(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionDrift : HelperObject<ActionDrift> // Object
        {
            explicit ActionDrift(Ent::Property _node): HelperObject<ActionDrift>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDrift";
            static ActionDrift load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDrift(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDrift loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDrift(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDrift create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDrift(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDrift makeInstanceOf()
            {
                return ActionDrift(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionDrawWeaponState : HelperObject<ActionDrawWeaponState> // Object
        {
            explicit ActionDrawWeaponState(Ent::Property _node): HelperObject<ActionDrawWeaponState>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDrawWeaponState";
            static ActionDrawWeaponState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDrawWeaponState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDrawWeaponState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDrawWeaponState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDrawWeaponState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDrawWeaponState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDrawWeaponState makeInstanceOf()
            {
                return ActionDrawWeaponState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool m_longRangeWeapon() const;
            Ent::Gen2::Bool m_noDrawAnimation() const;
            Ent::Gen2::Bool m_offHandWeapon() const;
            Ent::Gen2::Float m_sheatheDuration() const;
            Ent::Gen2::Bool m_shortDrawAnimation() const;
            Ent::Gen2::Float m_timer() const;
        };

        struct ActionDrawWeapon : HelperObject<ActionDrawWeapon> // Object
        {
            explicit ActionDrawWeapon(Ent::Property _node): HelperObject<ActionDrawWeapon>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDrawWeapon";
            static ActionDrawWeapon load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDrawWeapon(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDrawWeapon loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDrawWeapon(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDrawWeapon create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDrawWeapon(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDrawWeapon makeInstanceOf()
            {
                return ActionDrawWeapon(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionDrawAttention : HelperObject<ActionDrawAttention> // Object
        {
            explicit ActionDrawAttention(Ent::Property _node): HelperObject<ActionDrawAttention>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDrawAttention";
            static ActionDrawAttention load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDrawAttention(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDrawAttention loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDrawAttention(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDrawAttention create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDrawAttention(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDrawAttention makeInstanceOf()
            {
                return ActionDrawAttention(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionDodge : HelperObject<ActionDodge> // Object
        {
            explicit ActionDodge(Ent::Property _node): HelperObject<ActionDodge>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDodge";
            static ActionDodge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDodge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDodge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDodge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDodge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDodge makeInstanceOf()
            {
                return ActionDodge(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionDisableAndFollow : HelperObject<ActionDisableAndFollow> // Object
        {
            explicit ActionDisableAndFollow(Ent::Property _node): HelperObject<ActionDisableAndFollow>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDisableAndFollow";
            static ActionDisableAndFollow load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDisableAndFollow(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDisableAndFollow loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDisableAndFollow(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDisableAndFollow create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDisableAndFollow(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDisableAndFollow makeInstanceOf()
            {
                return ActionDisableAndFollow(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionDigUpTreasure : HelperObject<ActionDigUpTreasure> // Object
        {
            explicit ActionDigUpTreasure(Ent::Property _node): HelperObject<ActionDigUpTreasure>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDigUpTreasure";
            static ActionDigUpTreasure load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDigUpTreasure(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDigUpTreasure loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDigUpTreasure(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDigUpTreasure create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDigUpTreasure(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDigUpTreasure makeInstanceOf()
            {
                return ActionDigUpTreasure(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionDecelerate : HelperObject<ActionDecelerate> // Object
        {
            explicit ActionDecelerate(Ent::Property _node): HelperObject<ActionDecelerate>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionDecelerate";
            static ActionDecelerate load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionDecelerate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionDecelerate loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionDecelerate(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionDecelerate create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionDecelerate(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionDecelerate makeInstanceOf()
            {
                return ActionDecelerate(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionCollapse : HelperObject<ActionCollapse> // Object
        {
            explicit ActionCollapse(Ent::Property _node): HelperObject<ActionCollapse>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionCollapse";
            static ActionCollapse load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionCollapse(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionCollapse loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionCollapse(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionCollapse create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionCollapse(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionCollapse makeInstanceOf()
            {
                return ActionCollapse(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionClimbEdge : HelperObject<ActionClimbEdge> // Object
        {
            explicit ActionClimbEdge(Ent::Property _node): HelperObject<ActionClimbEdge>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionClimbEdge";
            static ActionClimbEdge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionClimbEdge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionClimbEdge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionClimbEdge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionClimbEdge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionClimbEdge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionClimbEdge makeInstanceOf()
            {
                return ActionClimbEdge(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::LedgePositionInfo ledgePosInfo() const;
        };

        struct ActionClamberRise : HelperObject<ActionClamberRise> // Object
        {
            explicit ActionClamberRise(Ent::Property _node): HelperObject<ActionClamberRise>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionClamberRise";
            static ActionClamberRise load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionClamberRise(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionClamberRise loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionClamberRise(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionClamberRise create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionClamberRise(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionClamberRise makeInstanceOf()
            {
                return ActionClamberRise(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionClamberMove : HelperObject<ActionClamberMove> // Object
        {
            explicit ActionClamberMove(Ent::Property _node): HelperObject<ActionClamberMove>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionClamberMove";
            static ActionClamberMove load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionClamberMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionClamberMove loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionClamberMove(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionClamberMove create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionClamberMove(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionClamberMove makeInstanceOf()
            {
                return ActionClamberMove(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionClamberLand : HelperObject<ActionClamberLand> // Object
        {
            explicit ActionClamberLand(Ent::Property _node): HelperObject<ActionClamberLand>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionClamberLand";
            static ActionClamberLand load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionClamberLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionClamberLand loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionClamberLand(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionClamberLand create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionClamberLand(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionClamberLand makeInstanceOf()
            {
                return ActionClamberLand(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionClamberJumpOff : HelperObject<ActionClamberJumpOff> // Object
        {
            explicit ActionClamberJumpOff(Ent::Property _node): HelperObject<ActionClamberJumpOff>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionClamberJumpOff";
            static ActionClamberJumpOff load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionClamberJumpOff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionClamberJumpOff loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionClamberJumpOff(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionClamberJumpOff create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionClamberJumpOff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionClamberJumpOff makeInstanceOf()
            {
                return ActionClamberJumpOff(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionClamberJump : HelperObject<ActionClamberJump> // Object
        {
            explicit ActionClamberJump(Ent::Property _node): HelperObject<ActionClamberJump>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionClamberJump";
            static ActionClamberJump load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionClamberJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionClamberJump loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionClamberJump(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionClamberJump create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionClamberJump(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionClamberJump makeInstanceOf()
            {
                return ActionClamberJump(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionClamberDropOff : HelperObject<ActionClamberDropOff> // Object
        {
            explicit ActionClamberDropOff(Ent::Property _node): HelperObject<ActionClamberDropOff>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionClamberDropOff";
            static ActionClamberDropOff load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionClamberDropOff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionClamberDropOff loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionClamberDropOff(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionClamberDropOff create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionClamberDropOff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionClamberDropOff makeInstanceOf()
            {
                return ActionClamberDropOff(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionCinematic : HelperObject<ActionCinematic> // Object
        {
            explicit ActionCinematic(Ent::Property _node): HelperObject<ActionCinematic>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionCinematic";
            static ActionCinematic load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionCinematic(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionCinematic loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionCinematic(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionCinematic create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionCinematic(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionCinematic makeInstanceOf()
            {
                return ActionCinematic(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionChosen : HelperObject<ActionChosen> // Object
        {
            explicit ActionChosen(Ent::Property _node): HelperObject<ActionChosen>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionChosen";
            static ActionChosen load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionChosen(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionChosen loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionChosen(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionChosen create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionChosen(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionChosen makeInstanceOf()
            {
                return ActionChosen(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool ExitRequired() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionChangeRidingSpot : HelperObject<ActionChangeRidingSpot> // Object
        {
            explicit ActionChangeRidingSpot(Ent::Property _node): HelperObject<ActionChangeRidingSpot>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionChangeRidingSpot";
            static ActionChangeRidingSpot load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionChangeRidingSpot(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionChangeRidingSpot loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionChangeRidingSpot(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionChangeRidingSpot create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionChangeRidingSpot(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionChangeRidingSpot makeInstanceOf()
            {
                return ActionChangeRidingSpot(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::Int TargetHotspotDestID() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionChangeMount : HelperObject<ActionChangeMount> // Object
        {
            explicit ActionChangeMount(Ent::Property _node): HelperObject<ActionChangeMount>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionChangeMount";
            static ActionChangeMount load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionChangeMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionChangeMount loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionChangeMount(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionChangeMount create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionChangeMount(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionChangeMount makeInstanceOf()
            {
                return ActionChangeMount(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionCentrifugal : HelperObject<ActionCentrifugal> // Object
        {
            explicit ActionCentrifugal(Ent::Property _node): HelperObject<ActionCentrifugal>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionCentrifugal";
            static ActionCentrifugal load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionCentrifugal(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionCentrifugal loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionCentrifugal(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionCentrifugal create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionCentrifugal(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionCentrifugal makeInstanceOf()
            {
                return ActionCentrifugal(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionCallForHelp : HelperObject<ActionCallForHelp> // Object
        {
            explicit ActionCallForHelp(Ent::Property _node): HelperObject<ActionCallForHelp>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionCallForHelp";
            static ActionCallForHelp load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionCallForHelp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionCallForHelp loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionCallForHelp(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionCallForHelp create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionCallForHelp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionCallForHelp makeInstanceOf()
            {
                return ActionCallForHelp(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionBrake : HelperObject<ActionBrake> // Object
        {
            explicit ActionBrake(Ent::Property _node): HelperObject<ActionBrake>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionBrake";
            static ActionBrake load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionBrake(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionBrake loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionBrake(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionBrake create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionBrake(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionBrake makeInstanceOf()
            {
                return ActionBrake(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionBittenState : HelperObject<ActionBittenState> // Object
        {
            explicit ActionBittenState(Ent::Property _node): HelperObject<ActionBittenState>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionBittenState";
            static ActionBittenState load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionBittenState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionBittenState loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionBittenState(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionBittenState create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionBittenState(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionBittenState makeInstanceOf()
            {
                return ActionBittenState(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionBiteOut : HelperObject<ActionBiteOut> // Object
        {
            explicit ActionBiteOut(Ent::Property _node): HelperObject<ActionBiteOut>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionBiteOut";
            static ActionBiteOut load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionBiteOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionBiteOut loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionBiteOut(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionBiteOut create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionBiteOut(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionBiteOut makeInstanceOf()
            {
                return ActionBiteOut(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionBiteIn : HelperObject<ActionBiteIn> // Object
        {
            explicit ActionBiteIn(Ent::Property _node): HelperObject<ActionBiteIn>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionBiteIn";
            static ActionBiteIn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionBiteIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionBiteIn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionBiteIn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionBiteIn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionBiteIn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionBiteIn makeInstanceOf()
            {
                return ActionBiteIn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionBite : HelperObject<ActionBite> // Object
        {
            explicit ActionBite(Ent::Property _node): HelperObject<ActionBite>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionBite";
            static ActionBite load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionBite(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionBite loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionBite(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionBite create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionBite(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionBite makeInstanceOf()
            {
                return ActionBite(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float RadiusMultiplier() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionAttackStomp : HelperObject<ActionAttackStomp> // Object
        {
            explicit ActionAttackStomp(Ent::Property _node): HelperObject<ActionAttackStomp>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionAttackStomp";
            static ActionAttackStomp load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionAttackStomp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionAttackStomp loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionAttackStomp(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionAttackStomp create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionAttackStomp(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionAttackStomp makeInstanceOf()
            {
                return ActionAttackStomp(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionAttackJumpOnto : HelperObject<ActionAttackJumpOnto> // Object
        {
            explicit ActionAttackJumpOnto(Ent::Property _node): HelperObject<ActionAttackJumpOnto>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionAttackJumpOnto";
            static ActionAttackJumpOnto load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionAttackJumpOnto(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionAttackJumpOnto loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionAttackJumpOnto(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionAttackJumpOnto create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionAttackJumpOnto(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionAttackJumpOnto makeInstanceOf()
            {
                return ActionAttackJumpOnto(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float RadiusMultiplier() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorCategory : EnumPropHelper<ActorCategory, ActorCategoryEnum> // Enum
        {
            using Enum = ActorCategoryEnum;
            using PropHelper<ActorCategory, Enum>::operator=;
            explicit ActorCategory(Ent::Property _node): EnumPropHelper<ActorCategory, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorCategory";
            static constexpr char const* enumToString[] = {
                "CATEGORY_All",
                "CATEGORY_Action",
                "CATEGORY_AnimationLegConstraint",
                "CATEGORY_ActionAttack",
                "CATEGORY_Attitude",
                "CATEGORY_Context",
                "CATEGORY_Control",
                "CATEGORY_ActionCosmetic",
                "CATEGORY_ActionDamage",
                "CATEGORY_ActionDefault",
                "CATEGORY_ActionDie",
                "CATEGORY_Environment",
                "CATEGORY_Fall",
                "CATEGORY_ActionGrab",
                "CATEGORY_ActionGrasp",
                "CATEGORY_ActionBite",
                "CATEGORY_Hint",
                "CATEGORY_LookAt",
                "CATEGORY_ActionJump",
                "CATEGORY_ActionLand",
                "CATEGORY_Life",
                "CATEGORY_Locomotion",
                "CATEGORY_ActionMove",
                "CATEGORY_Persistent",
                "CATEGORY_Purgatory",
                "CATEGORY_ActionSlide",
                "CATEGORY_ActionStop",
                "CATEGORY_ActionStrafe",
                "CATEGORY_Transition",
                "CATEGORY_Trigger",
                "CATEGORY_ActionWingFlutter",
                "CATEGORY_Health",
                "CATEGORY_HealthAlive",
                "CATEGORY_HealthDead",
                "CATEGORY_KnockedOut",
                "CATEGORY_EntitySwitchTransition",
                "CATEGORY_EnergyRoot",
                "CATEGORY_EnergySpout",
                "CATEGORY_Energy",
                "CATEGORY_GPE",
                "CATEGORY_SpiritAnimal",
                "CATEGORY_Hatching",
                "CATEGORY_Respawn",
                "CATEGORY_Save",
                "CATEGORY_Cinematic",
                "CATEGORY_Loading",
                "CATEGORY_NoCategory",
            };
        };
        inline char const* toString(ActorCategoryEnum value)
        {
            if(size_t(value) >= std::size(ActorCategory::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ActorCategory::enumToString[size_t(value)];
        }
        inline char const* toInternal(ActorCategoryEnum value) { return toString(value); }
        template<> inline ActorCategoryEnum strToEnum<ActorCategoryEnum>(char const* value)
        {
            return static_cast<ActorCategoryEnum>(details::indexInEnum(value, ActorCategory::enumToString));
        }

        struct ConditionalRigidityAttribute_Conditions : HelperObject<ConditionalRigidityAttribute_Conditions> // Object
        {
            explicit ConditionalRigidityAttribute_Conditions(Ent::Property _node): HelperObject<ConditionalRigidityAttribute_Conditions>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::Conditions";
            static ConditionalRigidityAttribute_Conditions load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConditionalRigidityAttribute_Conditions(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConditionalRigidityAttribute_Conditions loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConditionalRigidityAttribute_Conditions(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConditionalRigidityAttribute_Conditions create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConditionalRigidityAttribute_Conditions(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConditionalRigidityAttribute_Conditions makeInstanceOf()
            {
                return ConditionalRigidityAttribute_Conditions(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::ActorCategory> ActorCategories() const;
            PrimArray<Ent::Gen2::String> ActorStates() const;
            Ent::Gen2::Vector2 AngularVelocityFactorRange() const;
            Ent::Gen2::Vector2 DirectionDotRange() const;
            Ent::Gen2::Vector2 LinearVelocityFactorRange() const;
            Ent::Gen2::String _comment() const;
        };

        struct ConditionalRigidityAttribute : HelperObject<ConditionalRigidityAttribute> // Object
        {
            explicit ConditionalRigidityAttribute(Ent::Property _node): HelperObject<ConditionalRigidityAttribute>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute";
            static ConditionalRigidityAttribute load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConditionalRigidityAttribute(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConditionalRigidityAttribute loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConditionalRigidityAttribute(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConditionalRigidityAttribute create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConditionalRigidityAttribute(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConditionalRigidityAttribute makeInstanceOf()
            {
                return ConditionalRigidityAttribute(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ConditionalRigidityAttribute_Attributes Attributes() const;
            Ent::Gen2::ConditionalRigidityAttribute_Conditions Conditions() const;
            Ent::Gen2::Bool Default() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimationTailConstraintsGD : HelperObject<AnimationTailConstraintsGD> // Object
        {
            explicit AnimationTailConstraintsGD(Ent::Property _node): HelperObject<AnimationTailConstraintsGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationTailConstraintsGD";
            static AnimationTailConstraintsGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationTailConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationTailConstraintsGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationTailConstraintsGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationTailConstraintsGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationTailConstraintsGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationTailConstraintsGD makeInstanceOf()
            {
                return AnimationTailConstraintsGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float AngularSpeedMaxForSpeedModeFurious() const;
            Ent::Gen2::Float AngularSpeedMaxForSpeedModeNone() const;
            Ent::Gen2::Bool BoneInjectDirectionFromUseAmplitudeFactor() const;
            Ent::Gen2::String BoneNameEnd() const;
            Ent::Gen2::String BoneNameInjectDirectionFrom() const;
            Ent::Gen2::String BoneNameStart() const;
            Array<Ent::Gen2::Collider> Colliders() const;
            Ent::Gen2::Float CollidersRadiusFactorGrounded() const;
            Ent::Gen2::Float CompensateSegmentStretchFactor() const;
            Array<Ent::Gen2::ConditionalRigidityAttribute> ConditionalRigidityAttributes() const;
            Array<Ent::Gen2::StickToGround> StickToGrounds() const;
            Ent::Gen2::Float StickToGroundsGravity() const;
            Ent::Gen2::Float StickToGroundsGravityUnderwater() const;
            Ent::Gen2::Float StickToGroundsRadiusFactorDead() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorAbility : EnumPropHelper<ActorAbility, ActorAbilityEnum> // Enum
        {
            using Enum = ActorAbilityEnum;
            using PropHelper<ActorAbility, Enum>::operator=;
            explicit ActorAbility(Ent::Property _node): EnumPropHelper<ActorAbility, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorAbility";
            static constexpr char const* enumToString[] = {
                "landing",
                "crouch",
                "fly",
                "ride",
                "dive",
                "stinky",
                "ActorAbility_COUNT",
            };
        };
        inline char const* toString(ActorAbilityEnum value)
        {
            if(size_t(value) >= std::size(ActorAbility::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ActorAbility::enumToString[size_t(value)];
        }
        inline char const* toInternal(ActorAbilityEnum value) { return toString(value); }
        template<> inline ActorAbilityEnum strToEnum<ActorAbilityEnum>(char const* value)
        {
            return static_cast<ActorAbilityEnum>(details::indexInEnum(value, ActorAbility::enumToString));
        }

        struct ActionTurn_Inputs : HelperObject<ActionTurn_Inputs> // Object
        {
            explicit ActionTurn_Inputs(Ent::Property _node): HelperObject<ActionTurn_Inputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionTurn::Inputs";
            static ActionTurn_Inputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionTurn_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionTurn_Inputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionTurn_Inputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionTurn_Inputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionTurn_Inputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionTurn_Inputs makeInstanceOf()
            {
                return ActionTurn_Inputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool checkDir() const;
            Ent::Gen2::Vector3 directionREQUIRED() const;
            Ent::Gen2::Bool speedModeUpdateAllowed() const;
            Ent::Gen2::Bool useRequest() const;
        };

        struct ActionTurn : HelperObject<ActionTurn> // Object
        {
            explicit ActionTurn(Ent::Property _node): HelperObject<ActionTurn>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionTurn";
            static ActionTurn load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionTurn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionTurn loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionTurn(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionTurn create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionTurn(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionTurn makeInstanceOf()
            {
                return ActionTurn(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Vector3 direction() const;
            Ent::Gen2::ActionTurn_Inputs inputs() const;
            Ent::Gen2::Float speedAtStart() const;
            Ent::Gen2::SpeedMode speedModeRequired() const;
            Ent::Gen2::SpeedMode speedModeStart() const;
        };

        struct ActionStateArbiter_StateStateDecision : HelperObject<ActionStateArbiter_StateStateDecision> // Object
        {
            explicit ActionStateArbiter_StateStateDecision(Ent::Property _node): HelperObject<ActionStateArbiter_StateStateDecision>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateStateDecision";
            static ActionStateArbiter_StateStateDecision load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_StateStateDecision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_StateStateDecision loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_StateStateDecision(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_StateStateDecision create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_StateStateDecision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_StateStateDecision makeInstanceOf()
            {
                return ActionStateArbiter_StateStateDecision(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Current() const;
            Ent::Gen2::ActorStateArbiterDecision Decision() const;
            Ent::Gen2::String New() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_StateStateDecisionPass : HelperObject<ActionStateArbiter_StateStateDecisionPass> // Object
        {
            explicit ActionStateArbiter_StateStateDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_StateStateDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateStateDecisionPass";
            static ActionStateArbiter_StateStateDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_StateStateDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_StateStateDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_StateStateDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_StateStateDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_StateStateDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_StateStateDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_StateStateDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_StateStateDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_StateOrderPass : HelperObject<ActionStateArbiter_StateOrderPass> // Object
        {
            explicit ActionStateArbiter_StateOrderPass(Ent::Property _node): HelperObject<ActionStateArbiter_StateOrderPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateOrderPass";
            static ActionStateArbiter_StateOrderPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_StateOrderPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_StateOrderPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_StateOrderPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_StateOrderPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_StateOrderPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_StateOrderPass makeInstanceOf()
            {
                return ActionStateArbiter_StateOrderPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::Tuple<Ent::Gen2::String, Ent::Gen2::String>> Dependencies() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_StateCategoryDecision : HelperObject<ActionStateArbiter_StateCategoryDecision> // Object
        {
            explicit ActionStateArbiter_StateCategoryDecision(Ent::Property _node): HelperObject<ActionStateArbiter_StateCategoryDecision>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateCategoryDecision";
            static ActionStateArbiter_StateCategoryDecision load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_StateCategoryDecision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_StateCategoryDecision loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_StateCategoryDecision(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_StateCategoryDecision create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_StateCategoryDecision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_StateCategoryDecision makeInstanceOf()
            {
                return ActionStateArbiter_StateCategoryDecision(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Current() const;
            Ent::Gen2::ActorStateArbiterDecision Decision() const;
            Ent::Gen2::String New() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_StateCategoryDecisionPass : HelperObject<ActionStateArbiter_StateCategoryDecisionPass> // Object
        {
            explicit ActionStateArbiter_StateCategoryDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_StateCategoryDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateCategoryDecisionPass";
            static ActionStateArbiter_StateCategoryDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_StateCategoryDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_StateCategoryDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_StateCategoryDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_StateCategoryDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_StateCategoryDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_StateCategoryDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_StateCategoryDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_StateCategoryDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_StateAllDecisionPass : HelperObject<ActionStateArbiter_StateAllDecisionPass> // Object
        {
            explicit ActionStateArbiter_StateAllDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_StateAllDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::StateAllDecisionPass";
            static ActionStateArbiter_StateAllDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_StateAllDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_StateAllDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_StateAllDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_StateAllDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_StateAllDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_StateAllDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_StateAllDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_StateCategoryDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_CategoryStateDecision : HelperObject<ActionStateArbiter_CategoryStateDecision> // Object
        {
            explicit ActionStateArbiter_CategoryStateDecision(Ent::Property _node): HelperObject<ActionStateArbiter_CategoryStateDecision>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryStateDecision";
            static ActionStateArbiter_CategoryStateDecision load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_CategoryStateDecision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_CategoryStateDecision loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_CategoryStateDecision(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_CategoryStateDecision create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_CategoryStateDecision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_CategoryStateDecision makeInstanceOf()
            {
                return ActionStateArbiter_CategoryStateDecision(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Current() const;
            Ent::Gen2::ActorStateArbiterDecision Decision() const;
            Ent::Gen2::String New() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_CategoryStateDecisionPass : HelperObject<ActionStateArbiter_CategoryStateDecisionPass> // Object
        {
            explicit ActionStateArbiter_CategoryStateDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_CategoryStateDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryStateDecisionPass";
            static ActionStateArbiter_CategoryStateDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_CategoryStateDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_CategoryStateDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_CategoryStateDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_CategoryStateDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_CategoryStateDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_CategoryStateDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_CategoryStateDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_CategoryStateDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_CategoryOrderPass : HelperObject<ActionStateArbiter_CategoryOrderPass> // Object
        {
            explicit ActionStateArbiter_CategoryOrderPass(Ent::Property _node): HelperObject<ActionStateArbiter_CategoryOrderPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryOrderPass";
            static ActionStateArbiter_CategoryOrderPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_CategoryOrderPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_CategoryOrderPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_CategoryOrderPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_CategoryOrderPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_CategoryOrderPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_CategoryOrderPass makeInstanceOf()
            {
                return ActionStateArbiter_CategoryOrderPass(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> Order() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_CategoryCategoryDecision : HelperObject<ActionStateArbiter_CategoryCategoryDecision> // Object
        {
            explicit ActionStateArbiter_CategoryCategoryDecision(Ent::Property _node): HelperObject<ActionStateArbiter_CategoryCategoryDecision>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryCategoryDecision";
            static ActionStateArbiter_CategoryCategoryDecision load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_CategoryCategoryDecision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_CategoryCategoryDecision loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_CategoryCategoryDecision(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_CategoryCategoryDecision create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_CategoryCategoryDecision(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_CategoryCategoryDecision makeInstanceOf()
            {
                return ActionStateArbiter_CategoryCategoryDecision(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Current() const;
            Ent::Gen2::ActorStateArbiterDecision Decision() const;
            Ent::Gen2::String New() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_PairDecisionPass : HelperObject<ActionStateArbiter_PairDecisionPass> // Object
        {
            explicit ActionStateArbiter_PairDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_PairDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::PairDecisionPass";
            static ActionStateArbiter_PairDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_PairDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_PairDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_PairDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_PairDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_PairDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_PairDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_PairDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_CategoryCategoryDecisionPass : HelperObject<ActionStateArbiter_CategoryCategoryDecisionPass> // Object
        {
            explicit ActionStateArbiter_CategoryCategoryDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_CategoryCategoryDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryCategoryDecisionPass";
            static ActionStateArbiter_CategoryCategoryDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_CategoryCategoryDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_CategoryCategoryDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_CategoryCategoryDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_CategoryCategoryDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_CategoryCategoryDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_CategoryCategoryDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_CategoryCategoryDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_CategoryAllDecisionPass : HelperObject<ActionStateArbiter_CategoryAllDecisionPass> // Object
        {
            explicit ActionStateArbiter_CategoryAllDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_CategoryAllDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::CategoryAllDecisionPass";
            static ActionStateArbiter_CategoryAllDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_CategoryAllDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_CategoryAllDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_CategoryAllDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_CategoryAllDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_CategoryAllDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_CategoryAllDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_CategoryAllDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_AllStateDecisionPass : HelperObject<ActionStateArbiter_AllStateDecisionPass> // Object
        {
            explicit ActionStateArbiter_AllStateDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_AllStateDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::AllStateDecisionPass";
            static ActionStateArbiter_AllStateDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_AllStateDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_AllStateDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_AllStateDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_AllStateDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_AllStateDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_AllStateDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_AllStateDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_CategoryStateDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_AllCategoryDecisionPass : HelperObject<ActionStateArbiter_AllCategoryDecisionPass> // Object
        {
            explicit ActionStateArbiter_AllCategoryDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_AllCategoryDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::AllCategoryDecisionPass";
            static ActionStateArbiter_AllCategoryDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_AllCategoryDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_AllCategoryDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_AllCategoryDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_AllCategoryDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_AllCategoryDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_AllCategoryDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_AllCategoryDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter_AllAllDecisionPass : HelperObject<ActionStateArbiter_AllAllDecisionPass> // Object
        {
            explicit ActionStateArbiter_AllAllDecisionPass(Ent::Property _node): HelperObject<ActionStateArbiter_AllAllDecisionPass>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter::AllAllDecisionPass";
            static ActionStateArbiter_AllAllDecisionPass load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter_AllAllDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter_AllAllDecisionPass loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter_AllAllDecisionPass(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter_AllAllDecisionPass create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter_AllAllDecisionPass(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter_AllAllDecisionPass makeInstanceOf()
            {
                return ActionStateArbiter_AllAllDecisionPass(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> Decisions() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStateArbiter : HelperObject<ActionStateArbiter> // Object
        {
            explicit ActionStateArbiter(Ent::Property _node): HelperObject<ActionStateArbiter>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStateArbiter";
            static ActionStateArbiter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStateArbiter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStateArbiter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStateArbiter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStateArbiter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStateArbiter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStateArbiter makeInstanceOf()
            {
                return ActionStateArbiter(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActionStateArbiter_AllAllDecisionPass AllAll() const;
            Ent::Gen2::ActionStateArbiter_AllCategoryDecisionPass AllCategory() const;
            Ent::Gen2::ActionStateArbiter_AllStateDecisionPass AllState() const;
            Ent::Gen2::ActionStateArbiter_CategoryAllDecisionPass CategoryAll() const;
            Ent::Gen2::ActionStateArbiter_CategoryCategoryDecisionPass CategoryCategory() const;
            PrimArray<Ent::Gen2::ActorCategory> CategoryNeedingRelay() const;
            Ent::Gen2::ActionStateArbiter_CategoryOrderPass CategoryOrder() const;
            Ent::Gen2::ActionStateArbiter_CategoryStateDecisionPass CategoryState() const;
            Ent::Gen2::ActionStateArbiter_PairDecisionPass Pair() const;
            Ent::Gen2::ActionStateArbiter_StateAllDecisionPass StateAll() const;
            Ent::Gen2::ActionStateArbiter_StateCategoryDecisionPass StateCategory() const;
            Ent::Gen2::ActionStateArbiter_StateOrderPass StateOrder() const;
            Ent::Gen2::ActionStateArbiter_StateStateDecisionPass StateState() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionStackFilter : HelperObject<ActionStackFilter> // Object
        {
            explicit ActionStackFilter(Ent::Property _node): HelperObject<ActionStackFilter>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStackFilter";
            static ActionStackFilter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStackFilter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStackFilter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStackFilter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStackFilter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStackFilter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStackFilter makeInstanceOf()
            {
                return ActionStackFilter(getProperty().makeInstanceOf());
            }
        
        };

        struct ActionStackFilterRide : HelperObject<ActionStackFilterRide> // Object
        {
            explicit ActionStackFilterRide(Ent::Property _node): HelperObject<ActionStackFilterRide>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionStackFilterRide";
            static ActionStackFilterRide load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionStackFilterRide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionStackFilterRide loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionStackFilterRide(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionStackFilterRide create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionStackFilterRide(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionStackFilterRide makeInstanceOf()
            {
                return ActionStackFilterRide(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActionStackFilter Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionShakeOffInputs : HelperObject<ActionShakeOffInputs> // Object
        {
            explicit ActionShakeOffInputs(Ent::Property _node): HelperObject<ActionShakeOffInputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionShakeOffInputs";
            static ActionShakeOffInputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionShakeOffInputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionShakeOffInputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionShakeOffInputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionShakeOffInputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionShakeOffInputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionShakeOffInputs makeInstanceOf()
            {
                return ActionShakeOffInputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool TryEjectAllBiters() const;
            Ent::Gen2::Bool UseRandomDirection() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionShakeOff : HelperObject<ActionShakeOff> // Object
        {
            explicit ActionShakeOff(Ent::Property _node): HelperObject<ActionShakeOff>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionShakeOff";
            static ActionShakeOff load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionShakeOff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionShakeOff loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionShakeOff(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionShakeOff create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionShakeOff(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionShakeOff makeInstanceOf()
            {
                return ActionShakeOff(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActionShakeOffInputs Inputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionMode : EnumPropHelper<ActionMode, ActionModeEnum> // Enum
        {
            using Enum = ActionModeEnum;
            using PropHelper<ActionMode, Enum>::operator=;
            explicit ActionMode(Ent::Property _node): EnumPropHelper<ActionMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionMode";
            static constexpr char const* enumToString[] = {
                "noaction",
                "attack",
                "attackjump",
                "attackcharged",
                "attackpush",
                "attackjumponto",
                "bite",
                "biteattack",
                "stun",
                "collapse",
                "throw",
                "respawn",
                "incarnate",
                "incarnated",
                "hit",
                "hitwall",
                "hitjump",
                "landing",
                "landingfail",
                "landingcatapult",
                "landingrecover",
                "landingdamage",
                "landingdying",
                "landinggrip",
                "landingtree",
                "jumpmount",
                "fallin",
                "landingmount",
                "soul",
                "mountreception",
                "changeridingspot",
                "goingtomountstate",
                "mount",
                "unmount",
                "flap",
                "flystop",
                "flapfast",
                "turn",
                "turnfromspeed0",
                "turnfromspeed1",
                "turnfromspeed2",
                "turnfromspeed3",
                "jump",
                "jumpoff",
                "doublejump",
                "jumpcharging",
                "jumpcharged",
                "longjump",
                "bounce",
                "regenerate",
                "drift",
                "wait",
                "chosen",
                "revive",
                "revivemaskeffect",
                "shakeoff",
                "convert",
                "drop",
                "landingdrop",
                "dropoff",
                "start",
                "reachspeed3",
                "strafe",
                "strafeturn",
                "slide",
                "slope",
                "forceagainstslope",
                "patinate",
                "climb",
                "call",
                "callanswer",
                "scream",
                "grab",
                "grabattack",
                "grabbed",
                "grabbedin",
                "grabbedout",
                "taunt",
                "sink",
                "shoot",
                "reload",
                "stop",
                "rise",
                "centrifugal",
                "climbedgehead",
                "climbedgehips",
                "climbedgefoot",
                "jumpedge",
                "catapult",
                "sleep",
                "head",
                "chest",
                "ascendpurgatory",
                "purgatory",
                "stung",
                "riderstance",
                "drawweapon",
                "levitate",
                "levitatemove",
                "aim",
                "wallrun",
                "wallrunjump",
                "wallrundrop",
                "strongattackcharging",
                "strongattackcharged",
                "strongattack",
                "aimcharge",
                "aimcharged",
                "aimflow",
                "shootcharged",
                "shootchargedlight",
                "shootchargedmedium",
                "shootchargedbig",
                "emptyshoot",
                "attackstomp",
                "requestwait",
                "requestheal",
                "quadstandupin",
                "standupin",
                "diguptreasure",
                "swimin",
                "swimlanding",
                "duck",
                "recover",
                "happy",
                "underground",
                "spawn",
                "unspawn",
                "dance",
                "askstaffguide",
                "hintfull",
                "hintlight",
                "hintnone",
                "hatching",
                "dying",
                "followerorder",
                "ultimateattack",
                "ultimateattacked",
                "parry",
                "failingorder",
                "settingrespawnplace",
                "romlookat",
                "emoteshame",
                "emotecrazy",
                "emotetaunt",
                "emoteproud",
                "emotemenace",
                "emotehello",
                "emoteimpatience",
                "ActionMode_COUNT",
            };
        };
        inline char const* toString(ActionModeEnum value)
        {
            if(size_t(value) >= std::size(ActionMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return ActionMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(ActionModeEnum value) { return toString(value); }
        template<> inline ActionModeEnum strToEnum<ActionModeEnum>(char const* value)
        {
            return static_cast<ActionModeEnum>(details::indexInEnum(value, ActionMode::enumToString));
        }

        struct InGameCameraParams : HelperObject<InGameCameraParams> // Object
        {
            explicit InGameCameraParams(Ent::Property _node): HelperObject<InGameCameraParams>(std::move(_node)) {}
            static constexpr char schemaName[] = "InGameCameraParams";
            static InGameCameraParams load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InGameCameraParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InGameCameraParams loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InGameCameraParams(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InGameCameraParams create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InGameCameraParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InGameCameraParams makeInstanceOf()
            {
                return InGameCameraParams(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ActivationDelay() const;
            Ent::Gen2::ActionMode AnimAction() const;
            Ent::Gen2::AnimTag AnimTag() const;
            Ent::Gen2::Float AnticipationCameraSightTime() const;
            Ent::Gen2::Bool AnticipationForceReset() const;
            Ent::Gen2::Float AnticipationMaxPitch() const;
            Ent::Gen2::Float AnticipationMaxYaw() const;
            Ent::Gen2::Bool AnticipationNoMoveLock() const;
            Ent::Gen2::Float AnticipationPitchAngleMax() const;
            Ent::Gen2::Float AnticipationPitchAngleMin() const;
            Ent::Gen2::Float AnticipationSmooth() const;
            Ent::Gen2::Float AnticipationYawAngleMax() const;
            Ent::Gen2::Float AnticipationYawAngleMin() const;
            Ent::Gen2::Float AnticipationZSmooth() const;
            Ent::Gen2::Float AntipationYawSpeedForce() const;
            Ent::Gen2::Float AntipationYawSpeedForceSmooth() const;
            Ent::Gen2::AutoRotationType AutoRotate() const;
            Ent::Gen2::Float AutoRotateIdealPitch() const;
            Ent::Gen2::Float AutoRotatePitchMaxSpeed() const;
            Ent::Gen2::Float AutoRotatePitchMinAngle() const;
            Ent::Gen2::Float AutoRotatePitchSpeedSmooth() const;
            Ent::Gen2::Float AutoRotateRollFactor() const;
            Ent::Gen2::Float AutoRotateUnlockPitchDelta() const;
            Ent::Gen2::Float AutoRotateUnlockYawDelta() const;
            Ent::Gen2::Float AutoRotateYawMaxSpeed() const;
            Ent::Gen2::Float AutoRotateYawMinAngle() const;
            Ent::Gen2::Float AutoRotateYawMinSpeed() const;
            Ent::Gen2::Float AutoRotateYawSpeedSmooth() const;
            Ent::Gen2::CameraType CameraType() const;
            Ent::Gen2::Float CollisionBackToPosSpeed() const;
            Ent::Gen2::Float CollisionCorrectionSpeed() const;
            Ent::Gen2::Float CollisionWantedNearPlane() const;
            Ent::Gen2::Float CollisionZOffset() const;
            Ent::Gen2::Float CollisionZOffsetMaxRadius() const;
            Ent::Gen2::Float CollisionZOffsetSmooth() const;
            Ent::Gen2::Bool DOFEnabled() const;
            Ent::Gen2::Float DOFFarStart() const;
            Ent::Gen2::Float DOFFarStop() const;
            Ent::Gen2::Float DOFMultiplier() const;
            Ent::Gen2::Float DOFNearStart() const;
            Ent::Gen2::Float DOFNearStop() const;
            Ent::Gen2::Float DecenteringPositionX() const;
            Ent::Gen2::Float DecenteringPositionY() const;
            Ent::Gen2::Float DecenteringPositionZ() const;
            Ent::Gen2::Float DistanceModifierRamp() const;
            Ent::Gen2::Float DodgeLatenessSmooth() const;
            Ent::Gen2::Float DodgeLatenessSmoothThreshold() const;
            Ent::Gen2::Float FOV() const;
            Ent::Gen2::Float FOVRamp() const;
            Ent::Gen2::Float FightDistanceOffset() const;
            Ent::Gen2::Float FightDistanceOffsetSpeed() const;
            Ent::Gen2::Float FightRotationDuration() const;
            Ent::Gen2::Float FightRotationInDuration() const;
            Ent::Gen2::Float FightRotationOutDuration() const;
            Ent::Gen2::Float FightRotationSpeed() const;
            Ent::Gen2::Float FightSpeedRationImpactCoeff() const;
            Ent::Gen2::Position InterestPointPosition() const;
            Ent::Gen2::Vector3 InterestPointSight() const;
            Ent::Gen2::Float InterestPointSightAngleSpeed() const;
            Ent::Gen2::Float InterestPointTimeToReachMaxWeight() const;
            Ent::Gen2::Float JoyAccelerationBoostChangingSideH() const;
            Ent::Gen2::Float JoyAccelerationBoostChangingSideV() const;
            Ent::Gen2::Float JoyAccelerationH() const;
            Ent::Gen2::Float JoyAccelerationV() const;
            Ent::Gen2::Float JoyDecelerationH() const;
            Ent::Gen2::Float JoyDecelerationV() const;
            Ent::Gen2::ScaleConverter JoyRotationScaleConverterH() const;
            Ent::Gen2::ScaleConverter JoyRotationScaleConverterV() const;
            Ent::Gen2::Float JoySpeedFactor() const;
            Ent::Gen2::Float JoySpeedMaxH() const;
            Ent::Gen2::Float JoySpeedMaxV() const;
            Ent::Gen2::Bool JumpEnable() const;
            Ent::Gen2::Float LockDecenteringDuration() const;
            Ent::Gen2::Float LockDistSpeed() const;
            Ent::Gen2::Float LockEndTransitionThreshold() const;
            Ent::Gen2::Float LockLowSpeedDist() const;
            Ent::Gen2::Float LockMaxDecentering() const;
            Ent::Gen2::Float LockMaxDist() const;
            Ent::Gen2::Float LockMinCameraDist() const;
            Ent::Gen2::Float LockOffsetTransitionSmooth() const;
            Ent::Gen2::Float LockPitchSpeed() const;
            Ent::Gen2::Float LockPitchSpeedClose() const;
            Ent::Gen2::Float LockSizeRatioThreshold() const;
            Ent::Gen2::Float LockTransitionSmooth() const;
            Ent::Gen2::Float LockTriggerDist() const;
            Ent::Gen2::Float LockYawSpeed() const;
            Ent::Gen2::Float LockYawSpeedClose() const;
            Ent::Gen2::Float LookAtOffsetPitch() const;
            Ent::Gen2::Float LookAtOffsetYaw() const;
            Ent::Gen2::Float NearPlane() const;
            Ent::Gen2::Float PitchConstraintAnticipation() const;
            Ent::Gen2::Float PitchConstraintMax() const;
            Ent::Gen2::Float PitchConstraintMin() const;
            Ent::Gen2::Float PitchToFOV() const;
            Ent::Gen2::Float SpacePitchOffset() const;
            Ent::Gen2::ScaleConverter SpeedToDistanceModifier() const;
            Ent::Gen2::ScaleConverter SpeedToFOV() const;
            Ent::Gen2::Float TargetBrutalStopSmoothThreshold() const;
            Ent::Gen2::Float TargetDeadZoneRadius() const;
            Ent::Gen2::Float TargetDistance() const;
            Ent::Gen2::Float TargetJumpSmooth() const;
            Ent::Gen2::Float TargetMaxSpeed() const;
            Ent::Gen2::Float TargetMinSmooth() const;
            Ent::Gen2::Float TargetOffsetX() const;
            Ent::Gen2::Float TargetOffsetY() const;
            Ent::Gen2::Float TargetOffsetZ() const;
            Ent::Gen2::Float TargetSmoothMultiplier() const;
            Ent::Gen2::Float TargetSmoothMultiplierZ() const;
            Ent::Gen2::Float TargetXOffsetFromYawForce() const;
            Ent::Gen2::Float TargetXOffsetFromYawSmooth() const;
            Ent::Gen2::Float TargetZOffsetFromPitchForce() const;
            Ent::Gen2::Float TargetZOffsetFromPitchSmooth() const;
            Ent::Gen2::Bool UseSpeedToFOV() const;
            Ent::Gen2::Float WorldZOffset() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool defaultParamsRequired() const;
        };

        struct InGameCameraObservationParams : HelperObject<InGameCameraObservationParams> // Object
        {
            explicit InGameCameraObservationParams(Ent::Property _node): HelperObject<InGameCameraObservationParams>(std::move(_node)) {}
            static constexpr char schemaName[] = "InGameCameraObservationParams";
            static InGameCameraObservationParams load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InGameCameraObservationParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InGameCameraObservationParams loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InGameCameraObservationParams(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InGameCameraObservationParams create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InGameCameraObservationParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InGameCameraObservationParams makeInstanceOf()
            {
                return InGameCameraObservationParams(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::InGameCameraParams aim() const;
            Ent::Gen2::InGameCameraParams fps() const;
            Ent::Gen2::InGameCameraParams lock() const;
            Ent::Gen2::InGameCameraParams motionconstraint() const;
            Ent::Gen2::InGameCameraParams shoulder() const;
            Ent::Gen2::InGameCameraParams sightconstraint() const;
            Ent::Gen2::InGameCameraParams strongattack() const;
            Ent::Gen2::InGameCameraParams thirdperson() const;
            Ent::Gen2::InGameCameraParams zoom() const;
        };

        struct InGameCameraData : HelperObject<InGameCameraData> // Object
        {
            explicit InGameCameraData(Ent::Property _node): HelperObject<InGameCameraData>(std::move(_node)) {}
            static constexpr char schemaName[] = "InGameCameraData";
            static InGameCameraData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InGameCameraData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InGameCameraData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InGameCameraData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InGameCameraData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InGameCameraData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InGameCameraData makeInstanceOf()
            {
                return InGameCameraData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::InGameCameraObservationParams cinematic() const;
            Ent::Gen2::InGameCameraObservationParams clamber() const;
            Ent::Gen2::InGameCameraObservationParams crouch() const;
            Ent::Gen2::InGameCameraObservationParams dive() const;
            Ent::Gen2::InGameCameraObservationParams fall() const;
            Ent::Gen2::InGameCameraObservationParams fight() const;
            Ent::Gen2::InGameCameraObservationParams fly() const;
            Ent::Gen2::InGameCameraObservationParams prone() const;
            Ent::Gen2::InGameCameraObservationParams ridden() const;
            Ent::Gen2::InGameCameraObservationParams riddenfly() const;
            Ent::Gen2::InGameCameraObservationParams ride() const;
            Array<Ent::Gen2::CameraSoundEvent> soundEvents() const;
            Ent::Gen2::InGameCameraObservationParams standup() const;
            Ent::Gen2::InGameCameraObservationParams swim() const;
        };

        struct ChargedJumpAnimation : HelperObject<ChargedJumpAnimation> // Object
        {
            explicit ChargedJumpAnimation(Ent::Property _node): HelperObject<ChargedJumpAnimation>(std::move(_node)) {}
            static constexpr char schemaName[] = "ChargedJumpAnimation";
            static ChargedJumpAnimation load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ChargedJumpAnimation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ChargedJumpAnimation loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ChargedJumpAnimation(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ChargedJumpAnimation create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ChargedJumpAnimation(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ChargedJumpAnimation makeInstanceOf()
            {
                return ChargedJumpAnimation(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::ActionMode animActionMode() const;
            Ent::Gen2::Float lerpFactorScaleXY() const;
            Ent::Gen2::Float lerpFactorScaleZ() const;
            Ent::Gen2::ScaleConverter scaleByPower() const;
        };

        struct ChargedJumpGD : HelperObject<ChargedJumpGD> // Object
        {
            explicit ChargedJumpGD(Ent::Property _node): HelperObject<ChargedJumpGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ChargedJumpGD";
            static ChargedJumpGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ChargedJumpGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ChargedJumpGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ChargedJumpGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ChargedJumpGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ChargedJumpGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ChargedJumpGD makeInstanceOf()
            {
                return ChargedJumpGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float bounceJumpTimeWindow() const;
            Array<Ent::Gen2::ChargedJumpAnimation> chargedJumpAnimations() const;
            Ent::Gen2::Float chargingDecelerationFactor() const;
            Ent::Gen2::ScaleConverter nextJumpPowerByFallHeight() const;
        };

        struct BoidParams : HelperObject<BoidParams> // Object
        {
            explicit BoidParams(Ent::Property _node): HelperObject<BoidParams>(std::move(_node)) {}
            static constexpr char schemaName[] = "BoidParams";
            static BoidParams load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BoidParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BoidParams loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BoidParams(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BoidParams create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BoidParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BoidParams makeInstanceOf()
            {
                return BoidParams(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Acceleration() const;
            Ent::Gen2::ActionMode Action() const;
            Ent::Gen2::ActionMode ActionSecondary() const;
            Ent::Gen2::Float AlignmentDistance() const;
            Ent::Gen2::Float AlignmentStrength() const;
            Ent::Gen2::Bool AllowMerge() const;
            Ent::Gen2::Float AngularSlerpCoeff() const;
            Ent::Gen2::Float AngularSpeedMax() const;
            Ent::Gen2::Bool AnimFromStart() const;
            Ent::Gen2::Bool BlockProcess() const;
            Ent::Gen2::Bool ClampVerticalAngle() const;
            Ent::Gen2::Float CohesionStrength() const;
            Ent::Gen2::Float DragForce() const;
            Ent::Gen2::Float EntityDistance() const;
            Ent::Gen2::Bool FlapBehavior() const;
            Ent::Gen2::Float FlattenZFactorLeaves() const;
            Ent::Gen2::Float FlattenZFactorRoots() const;
            Ent::Gen2::Float FollowEmitterStrength() const;
            Ent::Gen2::BoidGoalMode GoalMode() const;
            Ent::Gen2::Bool GroundRepulse() const;
            Ent::Gen2::Float GroundRepulseHeight() const;
            Ent::Gen2::Float GroundRepulseStrength() const;
            Ent::Gen2::Float InitialInertiaFactor() const;
            Ent::Gen2::Float InitialInertiaVerticalFactor() const;
            Ent::Gen2::Float LightBrightness() const;
            Ent::Gen2::Color LightColor() const;
            Ent::Gen2::LocomotionMode Locomotion() const;
            Ent::Gen2::Float MaxVerticalAngle() const;
            Ent::Gen2::Float MaxVerticalAngleVariation() const;
            Ent::Gen2::Int NbMaxNewChildren() const;
            Ent::Gen2::Bool OnGround() const;
            Ent::Gen2::Float RepulsionStrength() const;
            Ent::Gen2::Float RotateBendFactor() const;
            Ent::Gen2::Bool SightZ() const;
            Array<Ent::Gen2::BoidSpeedMaxData> SpeedMaxData() const;
            Ent::Gen2::SpeedMode SpeedMode() const;
            Ent::Gen2::Float SpeedRandomMultiplier() const;
            Ent::Gen2::StyleMode StyleMode() const;
            Ent::Gen2::Float UpdateForceFactor() const;
            Ent::Gen2::Float UpdateInertiaFactor() const;
            Ent::Gen2::Float VerticalMasterPositionOffset() const;
            Ent::Gen2::Int VisibilityStateFrameDelay() const;
            Ent::Gen2::Bool Visible() const;
            Ent::Gen2::Float VisualScaleMultiplierAtStartup() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String _name() const;
        };

        struct AnimationModelComponentInput_ActionMode : HelperObject<AnimationModelComponentInput_ActionMode> // Object
        {
            explicit AnimationModelComponentInput_ActionMode(Ent::Property _node): HelperObject<AnimationModelComponentInput_ActionMode>(std::move(_node)) {}
            
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool engaged() const;
            Ent::Gen2::ActionMode val() const;
        };

        struct AnimationModelComponentInput : HelperObject<AnimationModelComponentInput> // Object
        {
            explicit AnimationModelComponentInput(Ent::Property _node): HelperObject<AnimationModelComponentInput>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationModelComponentInput";
            static AnimationModelComponentInput load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationModelComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationModelComponentInput loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationModelComponentInput(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationModelComponentInput create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationModelComponentInput(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationModelComponentInput makeInstanceOf()
            {
                return AnimationModelComponentInput(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AnimationModelComponentInput_ActionMode ActionMode() const;
            Ent::Gen2::AdditionnalTag AdditionnalTag() const;
            Ent::Gen2::AnimationModelComponentInput_AnimTag AnimTag() const;
            Ent::Gen2::AnimationModelComponentInput_AttitudeMode AttitudeMode() const;
            Ent::Gen2::AnimationModelComponentInput_CarryMode CarryMode() const;
            Ent::Gen2::ForceBlendIn ForceBlendIn() const;
            Ent::Gen2::ForceBlendInReachRequired ForceBlendInReachRequired() const;
            Ent::Gen2::AnimationModelComponentInput_LocomotionMode LocomotionMode() const;
            Ent::Gen2::PlayRatio PlayRatio() const;
            Ent::Gen2::AnimationModelComponentInput_SpeedMode SpeedMode() const;
            Ent::Gen2::SpeedModeMax SpeedModeMax() const;
            Ent::Gen2::SpeedScaleXY SpeedScaleXY() const;
            Ent::Gen2::AnimationModelComponentInput_StyleMode StyleMode() const;
            Ent::Gen2::ComponentInput Super() const;
            Ent::Gen2::VariantAllowed VariantAllowed() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnimTags : HelperObject<AnimTags> // Object
        {
            explicit AnimTags(Ent::Property _node): HelperObject<AnimTags>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimTags";
            static AnimTags load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimTags(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimTags loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimTags(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimTags create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimTags(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimTags makeInstanceOf()
            {
                return AnimTags(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActionMode ActionMode() const;
            Ent::Gen2::AnimAdditionalTag AnimAdditionalTag() const;
            Ent::Gen2::AnimTag AnimTag() const;
            Ent::Gen2::AttitudeMode AttitudeMode() const;
            Ent::Gen2::CarryMode CarryMode() const;
            Ent::Gen2::LocomotionMode LocomotionMode() const;
            Ent::Gen2::Float PlayRatio() const;
            Ent::Gen2::SpeedMode SpeedMode() const;
            Ent::Gen2::StyleMode StyleMode() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionEmote : HelperObject<ActionEmote> // Object
        {
            explicit ActionEmote(Ent::Property _node): HelperObject<ActionEmote>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionEmote";
            static ActionEmote load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionEmote(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionEmote loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionEmote(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionEmote create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionEmote(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionEmote makeInstanceOf()
            {
                return ActionEmote(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActionMode AnimAction() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionAimProjectile : HelperObject<ActionAimProjectile> // Object
        {
            explicit ActionAimProjectile(Ent::Property _node): HelperObject<ActionAimProjectile>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionAimProjectile";
            static ActionAimProjectile load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionAimProjectile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionAimProjectile loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionAimProjectile(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionAimProjectile create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionAimProjectile(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionAimProjectile makeInstanceOf()
            {
                return ActionAimProjectile(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::ActionMode actionMode() const;
        };

        struct ActionAttack_AttackOutputs : HelperObject<ActionAttack_AttackOutputs> // Object
        {
            explicit ActionAttack_AttackOutputs(Ent::Property _node): HelperObject<ActionAttack_AttackOutputs>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionAttack::AttackOutputs";
            static ActionAttack_AttackOutputs load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionAttack_AttackOutputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionAttack_AttackOutputs loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionAttack_AttackOutputs(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionAttack_AttackOutputs create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionAttack_AttackOutputs(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionAttack_AttackOutputs makeInstanceOf()
            {
                return ActionAttack_AttackOutputs(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AnimTags AnimTags() const;
            Ent::Gen2::Vector3 Direction() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActionAttack : HelperObject<ActionAttack> // Object
        {
            explicit ActionAttack(Ent::Property _node): HelperObject<ActionAttack>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActionAttack";
            static ActionAttack load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActionAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActionAttack loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActionAttack(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActionAttack create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActionAttack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActionAttack makeInstanceOf()
            {
                return ActionAttack(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActionAttack_AttackOutputs Outputs() const;
            Ent::Gen2::ActorState Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AbilityData : HelperObject<AbilityData> // Object
        {
            explicit AbilityData(Ent::Property _node): HelperObject<AbilityData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AbilityData";
            static AbilityData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AbilityData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AbilityData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AbilityData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AbilityData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AbilityData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AbilityData makeInstanceOf()
            {
                return AbilityData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            PrimArray<Ent::Gen2::ActorAbility> abilities() const;
        };

        struct ActorGD : HelperObject<ActorGD> // Object
        {
            explicit ActorGD(Ent::Property _node): HelperObject<ActorGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorGD";
            static ActorGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorGD makeInstanceOf()
            {
                return ActorGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Archetype Archetype() const;
            Ent::Gen2::StyleMode ClassStyleTag() const;
            Ent::Gen2::String FactionName() const;
            Ent::Gen2::String Icon() const;
            Ent::Gen2::Bool InSpiritWorld() const;
            Ent::Gen2::Specie Specie() const;
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::Bool Weapon() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::AbilityData abilityData() const;
            Ent::Gen2::AttackData attackData() const;
            Ent::Gen2::ImpactAndSolidityData impactAndSolidityData() const;
            Ent::Gen2::ProjectileData projectileData() const;
            Ent::Gen2::Float radius() const;
            Ent::Gen2::ShootData shootData() const;
            Ent::Gen2::StunData stunData() const;
            Ent::Gen2::Float volume() const;
        };

        struct ProjectileGD : HelperObject<ProjectileGD> // Object
        {
            explicit ProjectileGD(Ent::Property _node): HelperObject<ProjectileGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ProjectileGD";
            static ProjectileGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ProjectileGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ProjectileGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ProjectileGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ProjectileGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ProjectileGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ProjectileGD makeInstanceOf()
            {
                return ProjectileGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ActorGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct CreatureGD : HelperObject<CreatureGD> // Object
        {
            explicit CreatureGD(Ent::Property _node): HelperObject<CreatureGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "CreatureGD";
            static CreatureGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CreatureGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CreatureGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CreatureGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CreatureGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CreatureGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CreatureGD makeInstanceOf()
            {
                return CreatureGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Bool DisableLookAt() const;
            Ent::Gen2::Float FlyPitchAngleMax() const;
            Ent::Gen2::Float FlyPitchAngleMin() const;
            Ent::Gen2::Bool IsBig() const;
            Ent::Gen2::Bool IsDivinity() const;
            Ent::Gen2::Bool IsGuardian() const;
            Ent::Gen2::Bool IsStaff() const;
            Ent::Gen2::Bool SpawnSoulIfNoEnemy() const;
            Ent::Gen2::SpeedFastMinDuration SpeedFastMinDuration() const;
            Ent::Gen2::ActorGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::BiteData biteData() const;
            Ent::Gen2::CreatureDangerousness dangerousnessData() const;
            Ent::Gen2::RevivedData revivedData() const;
        };

        struct ClothGD : HelperObject<ClothGD> // Object
        {
            explicit ClothGD(Ent::Property _node): HelperObject<ClothGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "ClothGD";
            static ClothGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ClothGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ClothGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ClothGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ClothGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ClothGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ClothGD makeInstanceOf()
            {
                return ClothGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String BodyEventsPath() const;
            Ent::Gen2::String BodyNamePath() const;
            PrimArray<Ent::Gen2::String> SoundBanks() const;
            Ent::Gen2::SoundEventMapping SoundEventMappingRules() const;
            Ent::Gen2::ActorGD Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct AaMode : EnumPropHelper<AaMode, AaModeEnum> // Enum
        {
            using Enum = AaModeEnum;
            using PropHelper<AaMode, Enum>::operator=;
            explicit AaMode(Ent::Property _node): EnumPropHelper<AaMode, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AaMode";
            static constexpr char const* enumToString[] = {
                "Fxaa",
                "Smaa",
                "None",
                "AaMode_Count",
            };
        };
        inline char const* toString(AaModeEnum value)
        {
            if(size_t(value) >= std::size(AaMode::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AaMode::enumToString[size_t(value)];
        }
        inline char const* toInternal(AaModeEnum value) { return toString(value); }
        template<> inline AaModeEnum strToEnum<AaModeEnum>(char const* value)
        {
            return static_cast<AaModeEnum>(details::indexInEnum(value, AaMode::enumToString));
        }

        struct RenderManager_RenderConfig : HelperObject<RenderManager_RenderConfig> // Object
        {
            explicit RenderManager_RenderConfig(Ent::Property _node): HelperObject<RenderManager_RenderConfig>(std::move(_node)) {}
            static constexpr char schemaName[] = "RenderManager::RenderConfig";
            static RenderManager_RenderConfig load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RenderManager_RenderConfig(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RenderManager_RenderConfig loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RenderManager_RenderConfig(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RenderManager_RenderConfig create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RenderManager_RenderConfig(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RenderManager_RenderConfig makeInstanceOf()
            {
                return RenderManager_RenderConfig(getProperty().makeInstanceOf());
            }
            Ent::Gen2::AaMode AaMode() const;
            Ent::Gen2::Int ClusteredLighting() const;
            Ent::Gen2::Int DisplacementMapSize() const;
            Ent::Gen2::Int EnableAsyncPipelineCreation() const;
            Ent::Gen2::Int EnableColorCorrection() const;
            Ent::Gen2::Int EnableComputeForDeferredLighting() const;
            Ent::Gen2::Int EnableComputeForUnderWater() const;
            Ent::Gen2::Int EnableDepthOfField() const;
            Ent::Gen2::Int EnableFurTranslucency() const;
            Ent::Gen2::Int EnableLensFlare() const;
            Ent::Gen2::Int EnableMTR() const;
            Ent::Gen2::Int EnableMotionBlur() const;
            Ent::Gen2::Int EnableNonBlockingDrawUpdates() const;
            Ent::Gen2::Int EnableSSAO() const;
            Ent::Gen2::Int EnableSSCS() const;
            Ent::Gen2::Int EnableSSR() const;
            Ent::Gen2::Int EnableSSSS() const;
            Ent::Gen2::Int EnableTonemapping() const;
            Ent::Gen2::Int EnableUnderwaterPostEffect() const;
            Ent::Gen2::Int EnableVegetationDrawDatabase() const;
            Ent::Gen2::Int FurFocusShadowMapResolution() const;
            Ent::Gen2::Float GlobalLODBias() const;
            Ent::Gen2::Float GlobalLODScale() const;
            Ent::Gen2::Float LODDecimationFactor() const;
            Ent::Gen2::String MaterialBank() const;
            Ent::Gen2::Int MaxActiveShadowLights() const;
            Ent::Gen2::Float MinTriangleSize() const;
            Ent::Gen2::Int ParticleLigthingAtlasSize() const;
            Ent::Gen2::Int PlanarReflectionsDownsample() const;
            Ent::Gen2::Int Quality() const;
            Ent::Gen2::Int QualityDepthOfField() const;
            Ent::Gen2::Int RemoveTemporalNaNs() const;
            Ent::Gen2::Int RippleMapSize() const;
            Ent::Gen2::Int SamplesSSAO() const;
            Ent::Gen2::Int SamplesSSSS() const;
            Ent::Gen2::Float ShadowLODScale() const;
            Ent::Gen2::Int ShadowMapSize() const;
            Ent::Gen2::Float TerrainAlbedoMapBlendAreaRatio() const;
            Ent::Gen2::Float TerrainAlbedoMapExtent() const;
            Ent::Gen2::Int UseHiZBufferForClusteredLighting() const;
            Ent::Gen2::String _comment() const;
        };

        struct RenderManager : HelperObject<RenderManager> // Object
        {
            explicit RenderManager(Ent::Property _node): HelperObject<RenderManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "RenderManager";
            static RenderManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RenderManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RenderManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RenderManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RenderManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RenderManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RenderManager makeInstanceOf()
            {
                return RenderManager(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String DecalMeshPath() const;
            Ent::Gen2::RenderManager_DepthOfFieldConfig DepthOfField() const;
            Ent::Gen2::Bool DisableMoveDrawOrigin() const;
            Ent::Gen2::Bool DoubleSizeIn4K() const;
            Ent::Gen2::Bool EnableFade() const;
            Ent::Gen2::Bool EnableLODTransitions() const;
            Ent::Gen2::Float FloatPrecisionThreshold() const;
            Ent::Gen2::Bool Fullscreen() const;
            Ent::Gen2::RenderManager_RenderConfig Global() const;
            Ent::Gen2::Int ImGuiFontScale() const;
            Ent::Gen2::Float LODTransitionDuration() const;
            Ent::Gen2::ScaleConverter MotionBlurHeightFactorFromSpeed() const;
            Ent::Gen2::RenderManager_RenderConfig PC() const;
            Ent::Gen2::RenderManager_RenderConfig PS4() const;
            Ent::Gen2::RenderManager_RenderConfig PS4Neo() const;
            Ent::Gen2::RenderManager_RenderConfig PS5() const;
            Ent::Gen2::Bool RenderToWindow() const;
            Ent::Gen2::Int ResolutionX() const;
            Ent::Gen2::Int ResolutionY() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::Int VSync() const;
            Ent::Gen2::Int WindowPositionX() const;
            Ent::Gen2::Int WindowPositionY() const;
            Ent::Gen2::Int WindowSizeX() const;
            Ent::Gen2::Int WindowSizeY() const;
            Ent::Gen2::String _comment() const;
        };

        struct AIOrderType : EnumPropHelper<AIOrderType, AIOrderTypeEnum> // Enum
        {
            using Enum = AIOrderTypeEnum;
            using PropHelper<AIOrderType, Enum>::operator=;
            explicit AIOrderType(Ent::Property _node): EnumPropHelper<AIOrderType, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "AIOrderType";
            static constexpr char const* enumToString[] = {
                "AIOrderType_None",
                "follow",
                "attack",
                "stay",
                "heal",
                "transhumance",
                "changemode",
                "readytoattack",
                "AIOrderType_COUNT",
            };
        };
        inline char const* toString(AIOrderTypeEnum value)
        {
            if(size_t(value) >= std::size(AIOrderType::enumToString))
                throw std::runtime_error("Wrong enum value");
            return AIOrderType::enumToString[size_t(value)];
        }
        inline char const* toInternal(AIOrderTypeEnum value) { return toString(value); }
        template<> inline AIOrderTypeEnum strToEnum<AIOrderTypeEnum>(char const* value)
        {
            return static_cast<AIOrderTypeEnum>(details::indexInEnum(value, AIOrderType::enumToString));
        }

        struct AIContextSlot : HelperObject<AIContextSlot> // Object
        {
            explicit AIContextSlot(Ent::Property _node): HelperObject<AIContextSlot>(std::move(_node)) {}
            static constexpr char schemaName[] = "AIContextSlot";
            static AIContextSlot load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AIContextSlot(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AIContextSlot loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AIContextSlot(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AIContextSlot create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AIContextSlot(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AIContextSlot makeInstanceOf()
            {
                return AIContextSlot(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int Count() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::String _comment() const;
        };

        struct AIContextGD : HelperObject<AIContextGD> // Object
        {
            explicit AIContextGD(Ent::Property _node): HelperObject<AIContextGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "AIContextGD";
            static AIContextGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AIContextGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AIContextGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AIContextGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AIContextGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AIContextGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AIContextGD makeInstanceOf()
            {
                return AIContextGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::ComponentGD Super() const;
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float attackCircleRadius() const;
            Ent::Gen2::Float distanceBetweenCreatures() const;
            Ent::Gen2::Float distantReachCircleRadius() const;
            Ent::Gen2::Float followCircleRadius() const;
            Ent::Gen2::Float lockTargetCircleRadius() const;
            Array<Ent::Gen2::AIContextSlot> slots() const;
        };

        struct AIAggroInitAndDecValue : HelperObject<AIAggroInitAndDecValue> // Object
        {
            explicit AIAggroInitAndDecValue(Ent::Property _node): HelperObject<AIAggroInitAndDecValue>(std::move(_node)) {}
            static constexpr char schemaName[] = "AIAggroInitAndDecValue";
            static AIAggroInitAndDecValue load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AIAggroInitAndDecValue(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AIAggroInitAndDecValue loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AIAggroInitAndDecValue(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AIAggroInitAndDecValue create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AIAggroInitAndDecValue(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AIAggroInitAndDecValue makeInstanceOf()
            {
                return AIAggroInitAndDecValue(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int DecrementValue() const;
            Ent::Gen2::Int InitValue() const;
            Ent::Gen2::Int MaxValue() const;
            Ent::Gen2::String _comment() const;
        };

        struct AIKnowledgeManager : HelperObject<AIKnowledgeManager> // Object
        {
            explicit AIKnowledgeManager(Ent::Property _node): HelperObject<AIKnowledgeManager>(std::move(_node)) {}
            static constexpr char schemaName[] = "AIKnowledgeManager";
            static AIKnowledgeManager load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AIKnowledgeManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AIKnowledgeManager loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AIKnowledgeManager(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AIKnowledgeManager create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AIKnowledgeManager(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AIKnowledgeManager makeInstanceOf()
            {
                return AIKnowledgeManager(getProperty().makeInstanceOf());
            }
            Array<Ent::Gen2::AIAggroInitAndDecValue> AggroValues() const;
            Ent::Gen2::Map<AIOrderTypeEnum, Ent::Gen2::Int> OrderPriorities() const;
            Ent::Gen2::Manager Super() const;
            Ent::Gen2::String _comment() const;
        };

        struct ActorStateStack : HelperObject<ActorStateStack> // Object
        {
            explicit ActorStateStack(Ent::Property _node): HelperObject<ActorStateStack>(std::move(_node)) {}
            static constexpr char schemaName[] = "ActorStateStack";
            static ActorStateStack load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ActorStateStack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ActorStateStack loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ActorStateStack(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ActorStateStack create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ActorStateStack(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ActorStateStack makeInstanceOf()
            {
                return ActorStateStack(getProperty().makeInstanceOf());
            }
        
        };

        struct AnalyticsFPS : HelperObject<AnalyticsFPS> // Object
        {
            explicit AnalyticsFPS(Ent::Property _node): HelperObject<AnalyticsFPS>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnalyticsFPS";
            static AnalyticsFPS load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnalyticsFPS(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnalyticsFPS loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnalyticsFPS(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnalyticsFPS create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnalyticsFPS(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnalyticsFPS makeInstanceOf()
            {
                return AnalyticsFPS(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float TeleportationDistance() const;
            Ent::Gen2::Float TeleportationInterval() const;
            Ent::Gen2::String _comment() const;
        };

        struct AnalyticsInGameViewer : HelperObject<AnalyticsInGameViewer> // Object
        {
            explicit AnalyticsInGameViewer(Ent::Property _node): HelperObject<AnalyticsInGameViewer>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnalyticsInGameViewer";
            static AnalyticsInGameViewer load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnalyticsInGameViewer(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnalyticsInGameViewer loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnalyticsInGameViewer(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnalyticsInGameViewer create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnalyticsInGameViewer(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnalyticsInGameViewer makeInstanceOf()
            {
                return AnalyticsInGameViewer(getProperty().makeInstanceOf());
            }
        
        };

        struct AnalyticsObserverInterface : HelperObject<AnalyticsObserverInterface> // Object
        {
            explicit AnalyticsObserverInterface(Ent::Property _node): HelperObject<AnalyticsObserverInterface>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnalyticsObserverInterface";
            static AnalyticsObserverInterface load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnalyticsObserverInterface(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnalyticsObserverInterface loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnalyticsObserverInterface(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnalyticsObserverInterface create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnalyticsObserverInterface(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnalyticsObserverInterface makeInstanceOf()
            {
                return AnalyticsObserverInterface(getProperty().makeInstanceOf());
            }
        
        };

        struct AnimationGDData : HelperObject<AnimationGDData> // Object
        {
            explicit AnimationGDData(Ent::Property _node): HelperObject<AnimationGDData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationGDData";
            static AnimationGDData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationGDData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationGDData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationGDData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationGDData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationGDData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationGDData makeInstanceOf()
            {
                return AnimationGDData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String animationDatabasePath() const;
            Ent::Gen2::String skeletonPath() const;
        };

        struct AnimationTreeConstraintsGD_BendSoundEventData : HelperObject<AnimationTreeConstraintsGD_BendSoundEventData> // Object
        {
            explicit AnimationTreeConstraintsGD_BendSoundEventData(Ent::Property _node): HelperObject<AnimationTreeConstraintsGD_BendSoundEventData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AnimationTreeConstraintsGD::BendSoundEventData";
            static AnimationTreeConstraintsGD_BendSoundEventData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AnimationTreeConstraintsGD_BendSoundEventData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AnimationTreeConstraintsGD_BendSoundEventData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AnimationTreeConstraintsGD_BendSoundEventData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AnimationTreeConstraintsGD_BendSoundEventData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AnimationTreeConstraintsGD_BendSoundEventData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AnimationTreeConstraintsGD_BendSoundEventData makeInstanceOf()
            {
                return AnimationTreeConstraintsGD_BendSoundEventData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String BendStartEventName() const;
            Ent::Gen2::String CatapultStartEventName() const;
            Ent::Gen2::String _comment() const;
        };

        struct AudioEventData : HelperObject<AudioEventData> // Object
        {
            explicit AudioEventData(Ent::Property _node): HelperObject<AudioEventData>(std::move(_node)) {}
            static constexpr char schemaName[] = "AudioEventData";
            static AudioEventData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return AudioEventData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static AudioEventData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return AudioEventData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static AudioEventData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return AudioEventData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            AudioEventData makeInstanceOf()
            {
                return AudioEventData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int ID() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::Float Range() const;
            Ent::Gen2::String _comment() const;
        };

        struct BehaviorPesto : HelperObject<BehaviorPesto> // Object
        {
            explicit BehaviorPesto(Ent::Property _node): HelperObject<BehaviorPesto>(std::move(_node)) {}
            static constexpr char schemaName[] = "BehaviorPesto";
            static BehaviorPesto load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return BehaviorPesto(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static BehaviorPesto loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return BehaviorPesto(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static BehaviorPesto create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return BehaviorPesto(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            BehaviorPesto makeInstanceOf()
            {
                return BehaviorPesto(getProperty().makeInstanceOf());
            }
        
        };

        struct CheatCodeReplication : HelperObject<CheatCodeReplication> // Object
        {
            explicit CheatCodeReplication(Ent::Property _node): HelperObject<CheatCodeReplication>(std::move(_node)) {}
            static constexpr char schemaName[] = "CheatCodeReplication";
            static CheatCodeReplication load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CheatCodeReplication(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CheatCodeReplication loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CheatCodeReplication(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CheatCodeReplication create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CheatCodeReplication(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CheatCodeReplication makeInstanceOf()
            {
                return CheatCodeReplication(getProperty().makeInstanceOf());
            }
        
        };

        struct ClassRef : HelperObject<ClassRef> // Object
        {
            explicit ClassRef(Ent::Property _node): HelperObject<ClassRef>(std::move(_node)) {}
            static constexpr char schemaName[] = "ClassRef";
            static ClassRef load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ClassRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ClassRef loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ClassRef(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ClassRef create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ClassRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ClassRef makeInstanceOf()
            {
                return ClassRef(getProperty().makeInstanceOf());
            }
        
        };

        struct CloudsGenerator : HelperObject<CloudsGenerator> // Object
        {
            explicit CloudsGenerator(Ent::Property _node): HelperObject<CloudsGenerator>(std::move(_node)) {}
            static constexpr char schemaName[] = "CloudsGenerator";
            static CloudsGenerator load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return CloudsGenerator(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static CloudsGenerator loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return CloudsGenerator(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static CloudsGenerator create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return CloudsGenerator(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            CloudsGenerator makeInstanceOf()
            {
                return CloudsGenerator(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float ApearanceDuration() const;
            Ent::Gen2::Float ApearanceDurationRandom() const;
            Ent::Gen2::Float CloudSize() const;
            Ent::Gen2::Float CloudSizeRandom() const;
            Ent::Gen2::Float CloudSpeedMultiplier() const;
            Ent::Gen2::Float CloudStrength() const;
            Ent::Gen2::Float CloudsCoverageDensity() const;
            Ent::Gen2::Float DisapearanceDuration() const;
            Ent::Gen2::Float DisapearanceDurationRandom() const;
            Ent::Gen2::Float LifeDuration() const;
            Ent::Gen2::Float LifeDurationRandom() const;
            Ent::Gen2::String _comment() const;
        };

        struct ConditionalRigidityAttribute_ActorStateName : HelperObject<ConditionalRigidityAttribute_ActorStateName> // Object
        {
            explicit ConditionalRigidityAttribute_ActorStateName(Ent::Property _node): HelperObject<ConditionalRigidityAttribute_ActorStateName>(std::move(_node)) {}
            static constexpr char schemaName[] = "ConditionalRigidityAttribute::ActorStateName";
            static ConditionalRigidityAttribute_ActorStateName load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ConditionalRigidityAttribute_ActorStateName(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ConditionalRigidityAttribute_ActorStateName loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ConditionalRigidityAttribute_ActorStateName(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ConditionalRigidityAttribute_ActorStateName create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ConditionalRigidityAttribute_ActorStateName(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ConditionalRigidityAttribute_ActorStateName makeInstanceOf()
            {
                return ConditionalRigidityAttribute_ActorStateName(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String ActionName() const;
            Ent::Gen2::String _comment() const;
        };

        struct ContactActor : HelperObject<ContactActor> // Object
        {
            explicit ContactActor(Ent::Property _node): HelperObject<ContactActor>(std::move(_node)) {}
            static constexpr char schemaName[] = "ContactActor";
            static ContactActor load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ContactActor(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ContactActor loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ContactActor(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ContactActor create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ContactActor(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ContactActor makeInstanceOf()
            {
                return ContactActor(getProperty().makeInstanceOf());
            }
        
        };

        struct Edge : HelperObject<Edge> // Object
        {
            explicit Edge(Ent::Property _node): HelperObject<Edge>(std::move(_node)) {}
            static constexpr char schemaName[] = "Edge";
            static Edge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Edge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Edge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Edge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Edge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Edge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Edge makeInstanceOf()
            {
                return Edge(getProperty().makeInstanceOf());
            }
        
        };

        struct EntityArchive_MetaData : HelperObject<EntityArchive_MetaData> // Object
        {
            explicit EntityArchive_MetaData(Ent::Property _node): HelperObject<EntityArchive_MetaData>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityArchive::MetaData";
            static EntityArchive_MetaData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityArchive_MetaData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityArchive_MetaData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityArchive_MetaData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityArchive_MetaData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityArchive_MetaData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityArchive_MetaData makeInstanceOf()
            {
                return EntityArchive_MetaData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Ent::Gen2::String RawDataPath() const;
            Ent::Gen2::Int Version() const;
            Ent::Gen2::String _comment() const;
        };

        struct EntityGD : HelperObject<EntityGD> // Object
        {
            explicit EntityGD(Ent::Property _node): HelperObject<EntityGD>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityGD";
            static EntityGD load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityGD loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityGD(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityGD create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityGD(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityGD makeInstanceOf()
            {
                return EntityGD(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            PrimArray<Ent::Gen2::String> components() const;
        };

        struct EntityGDRef : HelperObject<EntityGDRef> // Object
        {
            explicit EntityGDRef(Ent::Property _node): HelperObject<EntityGDRef>(std::move(_node)) {}
            static constexpr char schemaName[] = "EntityGDRef";
            static EntityGDRef load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return EntityGDRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static EntityGDRef loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return EntityGDRef(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static EntityGDRef create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return EntityGDRef(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            EntityGDRef makeInstanceOf()
            {
                return EntityGDRef(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::String hash() const;
        };

        struct FadeEffect : HelperObject<FadeEffect> // Object
        {
            explicit FadeEffect(Ent::Property _node): HelperObject<FadeEffect>(std::move(_node)) {}
            static constexpr char schemaName[] = "FadeEffect";
            static FadeEffect load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return FadeEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static FadeEffect loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return FadeEffect(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static FadeEffect create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return FadeEffect(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            FadeEffect makeInstanceOf()
            {
                return FadeEffect(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Bool affectVisibilityProperty() const;
            Ent::Gen2::Float delay() const;
            Ent::Gen2::Float destinationAlpha() const;
            Ent::Gen2::Float duration() const;
            Ent::Gen2::Bool infiniteDuration() const;
            Ent::Gen2::Float sourceAlpha() const;
        };

        struct GRC : HelperObject<GRC> // Object
        {
            explicit GRC(Ent::Property _node): HelperObject<GRC>(std::move(_node)) {}
            static constexpr char schemaName[] = "GRC";
            static GRC load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GRC(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GRC loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GRC(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GRC create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GRC(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GRC makeInstanceOf()
            {
                return GRC(getProperty().makeInstanceOf());
            }
        
        };

        struct GVoxelVolumeCollection : HelperObject<GVoxelVolumeCollection> // Object
        {
            explicit GVoxelVolumeCollection(Ent::Property _node): HelperObject<GVoxelVolumeCollection>(std::move(_node)) {}
            static constexpr char schemaName[] = "GVoxelVolumeCollection";
            static GVoxelVolumeCollection load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return GVoxelVolumeCollection(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static GVoxelVolumeCollection loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return GVoxelVolumeCollection(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static GVoxelVolumeCollection create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return GVoxelVolumeCollection(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            GVoxelVolumeCollection makeInstanceOf()
            {
                return GVoxelVolumeCollection(getProperty().makeInstanceOf());
            }
        
        };

        struct IMatchMakerApi : HelperObject<IMatchMakerApi> // Object
        {
            explicit IMatchMakerApi(Ent::Property _node): HelperObject<IMatchMakerApi>(std::move(_node)) {}
            static constexpr char schemaName[] = "IMatchMakerApi";
            static IMatchMakerApi load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return IMatchMakerApi(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static IMatchMakerApi loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return IMatchMakerApi(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static IMatchMakerApi create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return IMatchMakerApi(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            IMatchMakerApi makeInstanceOf()
            {
                return IMatchMakerApi(getProperty().makeInstanceOf());
            }
        
        };

        struct IOnlineApi : HelperObject<IOnlineApi> // Object
        {
            explicit IOnlineApi(Ent::Property _node): HelperObject<IOnlineApi>(std::move(_node)) {}
            static constexpr char schemaName[] = "IOnlineApi";
            static IOnlineApi load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return IOnlineApi(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static IOnlineApi loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return IOnlineApi(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static IOnlineApi create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return IOnlineApi(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            IOnlineApi makeInstanceOf()
            {
                return IOnlineApi(getProperty().makeInstanceOf());
            }
        
        };

        struct InputController : HelperObject<InputController> // Object
        {
            explicit InputController(Ent::Property _node): HelperObject<InputController>(std::move(_node)) {}
            static constexpr char schemaName[] = "InputController";
            static InputController load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return InputController(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static InputController loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return InputController(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static InputController create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return InputController(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            InputController makeInstanceOf()
            {
                return InputController(getProperty().makeInstanceOf());
            }
        
        };



        struct MeshNavigationBehavior : HelperObject<MeshNavigationBehavior> // Object
        {
            explicit MeshNavigationBehavior(Ent::Property _node): HelperObject<MeshNavigationBehavior>(std::move(_node)) {}
            static constexpr char schemaName[] = "MeshNavigationBehavior";
            static MeshNavigationBehavior load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MeshNavigationBehavior(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MeshNavigationBehavior loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MeshNavigationBehavior(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MeshNavigationBehavior create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MeshNavigationBehavior(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MeshNavigationBehavior makeInstanceOf()
            {
                return MeshNavigationBehavior(getProperty().makeInstanceOf());
            }
        
        };

        struct MeshShape : HelperObject<MeshShape> // Object
        {
            explicit MeshShape(Ent::Property _node): HelperObject<MeshShape>(std::move(_node)) {}
            static constexpr char schemaName[] = "MeshShape";
            static MeshShape load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return MeshShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static MeshShape loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return MeshShape(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static MeshShape create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return MeshShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            MeshShape makeInstanceOf()
            {
                return MeshShape(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Path() const;
            Ent::Gen2::String _comment() const;
        };

        struct NavMeshArea : EnumPropHelper<NavMeshArea, NavMeshAreaEnum> // Enum
        {
            using Enum = NavMeshAreaEnum;
            using PropHelper<NavMeshArea, Enum>::operator=;
            explicit NavMeshArea(Ent::Property _node): EnumPropHelper<NavMeshArea, Enum>(std::move(_node)) {}
            static constexpr char schemaName[] = "NavMeshArea";
            static constexpr char const* enumToString[] = {
                "Hole",
                "Ground",
                "ShallowWater",
                "DeepWater",
                "Beach",
                "Special",
                "NavMeshArea_COUNT",
            };
        };
        inline char const* toString(NavMeshAreaEnum value)
        {
            if(size_t(value) >= std::size(NavMeshArea::enumToString))
                throw std::runtime_error("Wrong enum value");
            return NavMeshArea::enumToString[size_t(value)];
        }
        inline char const* toInternal(NavMeshAreaEnum value) { return toString(value); }
        template<> inline NavMeshAreaEnum strToEnum<NavMeshAreaEnum>(char const* value)
        {
            return static_cast<NavMeshAreaEnum>(details::indexInEnum(value, NavMeshArea::enumToString));
        }

        struct NetRoot : HelperObject<NetRoot> // Object
        {
            explicit NetRoot(Ent::Property _node): HelperObject<NetRoot>(std::move(_node)) {}
            static constexpr char schemaName[] = "NetRoot";
            static NetRoot load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return NetRoot(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static NetRoot loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return NetRoot(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static NetRoot create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return NetRoot(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            NetRoot makeInstanceOf()
            {
                return NetRoot(getProperty().makeInstanceOf());
            }
        
        };

        struct OutfitFadeParameter : HelperObject<OutfitFadeParameter> // Object
        {
            explicit OutfitFadeParameter(Ent::Property _node): HelperObject<OutfitFadeParameter>(std::move(_node)) {}
            static constexpr char schemaName[] = "OutfitFadeParameter";
            static OutfitFadeParameter load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OutfitFadeParameter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OutfitFadeParameter loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OutfitFadeParameter(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OutfitFadeParameter create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OutfitFadeParameter(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OutfitFadeParameter makeInstanceOf()
            {
                return OutfitFadeParameter(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Delay() const;
            Ent::Gen2::Bool Emissive() const;
            Ent::Gen2::Bool Enabled() const;
            Ent::Gen2::Bool FadeBodyPiece() const;
            Ent::Gen2::Float Time() const;
            Ent::Gen2::String _comment() const;
        };

        struct OwnershipModule : HelperObject<OwnershipModule> // Object
        {
            explicit OwnershipModule(Ent::Property _node): HelperObject<OwnershipModule>(std::move(_node)) {}
            static constexpr char schemaName[] = "OwnershipModule";
            static OwnershipModule load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return OwnershipModule(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static OwnershipModule loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return OwnershipModule(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static OwnershipModule create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return OwnershipModule(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            OwnershipModule makeInstanceOf()
            {
                return OwnershipModule(getProperty().makeInstanceOf());
            }
        
        };

        struct PhysicsNetworker : HelperObject<PhysicsNetworker> // Object
        {
            explicit PhysicsNetworker(Ent::Property _node): HelperObject<PhysicsNetworker>(std::move(_node)) {}
            static constexpr char schemaName[] = "PhysicsNetworker";
            static PhysicsNetworker load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PhysicsNetworker(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PhysicsNetworker loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PhysicsNetworker(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PhysicsNetworker create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PhysicsNetworker(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PhysicsNetworker makeInstanceOf()
            {
                return PhysicsNetworker(getProperty().makeInstanceOf());
            }
        
        };

        struct PlayerManagerDebugger : HelperObject<PlayerManagerDebugger> // Object
        {
            explicit PlayerManagerDebugger(Ent::Property _node): HelperObject<PlayerManagerDebugger>(std::move(_node)) {}
            static constexpr char schemaName[] = "PlayerManagerDebugger";
            static PlayerManagerDebugger load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PlayerManagerDebugger(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PlayerManagerDebugger loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PlayerManagerDebugger(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PlayerManagerDebugger create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PlayerManagerDebugger(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PlayerManagerDebugger makeInstanceOf()
            {
                return PlayerManagerDebugger(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String SaveServerURL() const;
            Ent::Gen2::Float SelectionSpeed() const;
            Ent::Gen2::String _comment() const;
        };

        struct PointCloud : HelperObject<PointCloud> // Object
        {
            explicit PointCloud(Ent::Property _node): HelperObject<PointCloud>(std::move(_node)) {}
            static constexpr char schemaName[] = "PointCloud";
            static PointCloud load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return PointCloud(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static PointCloud loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return PointCloud(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static PointCloud create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return PointCloud(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            PointCloud makeInstanceOf()
            {
                return PointCloud(getProperty().makeInstanceOf());
            }
        
        };

        struct RagdollSetupData : HelperObject<RagdollSetupData> // Object
        {
            explicit RagdollSetupData(Ent::Property _node): HelperObject<RagdollSetupData>(std::move(_node)) {}
            static constexpr char schemaName[] = "RagdollSetupData";
            static RagdollSetupData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return RagdollSetupData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static RagdollSetupData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return RagdollSetupData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static RagdollSetupData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return RagdollSetupData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            RagdollSetupData makeInstanceOf()
            {
                return RagdollSetupData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float blend() const;
            Ent::Gen2::Float inertiaFactor() const;
            Ent::Gen2::Float jointsRigidity() const;
        };

        struct ReplicaReplay : HelperObject<ReplicaReplay> // Object
        {
            explicit ReplicaReplay(Ent::Property _node): HelperObject<ReplicaReplay>(std::move(_node)) {}
            static constexpr char schemaName[] = "ReplicaReplay";
            static ReplicaReplay load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ReplicaReplay(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ReplicaReplay loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ReplicaReplay(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ReplicaReplay create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ReplicaReplay(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ReplicaReplay makeInstanceOf()
            {
                return ReplicaReplay(getProperty().makeInstanceOf());
            }
        
        };

        struct SceneNode : HelperObject<SceneNode> // Object
        {
            explicit SceneNode(Ent::Property _node): HelperObject<SceneNode>(std::move(_node)) {}
            static constexpr char schemaName[] = "SceneNode";
            static SceneNode load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SceneNode(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SceneNode loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SceneNode(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SceneNode create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SceneNode(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SceneNode makeInstanceOf()
            {
                return SceneNode(getProperty().makeInstanceOf());
            }
        
        };

        struct SceneNodeGraph : HelperObject<SceneNodeGraph> // Object
        {
            explicit SceneNodeGraph(Ent::Property _node): HelperObject<SceneNodeGraph>(std::move(_node)) {}
            static constexpr char schemaName[] = "SceneNodeGraph";
            static SceneNodeGraph load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SceneNodeGraph(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SceneNodeGraph loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SceneNodeGraph(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SceneNodeGraph create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SceneNodeGraph(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SceneNodeGraph makeInstanceOf()
            {
                return SceneNodeGraph(getProperty().makeInstanceOf());
            }
        
        };

        struct Sensor : HelperObject<Sensor> // Object
        {
            explicit Sensor(Ent::Property _node): HelperObject<Sensor>(std::move(_node)) {}
            static constexpr char schemaName[] = "Sensor";
            static Sensor load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Sensor(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Sensor loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Sensor(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Sensor create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Sensor(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Sensor makeInstanceOf()
            {
                return Sensor(getProperty().makeInstanceOf());
            }
        
        };

        struct SmallActorSpawnRuleExchangeData : HelperObject<SmallActorSpawnRuleExchangeData> // Object
        {
            explicit SmallActorSpawnRuleExchangeData(Ent::Property _node): HelperObject<SmallActorSpawnRuleExchangeData>(std::move(_node)) {}
            static constexpr char schemaName[] = "SmallActorSpawnRuleExchangeData";
            static SmallActorSpawnRuleExchangeData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return SmallActorSpawnRuleExchangeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static SmallActorSpawnRuleExchangeData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return SmallActorSpawnRuleExchangeData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static SmallActorSpawnRuleExchangeData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return SmallActorSpawnRuleExchangeData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            SmallActorSpawnRuleExchangeData makeInstanceOf()
            {
                return SmallActorSpawnRuleExchangeData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String AudioEventName() const;
            Ent::Gen2::String AudioEventSoundBank() const;
            Ent::Gen2::Bool IsValid() const;
            Ent::Gen2::Int RuleIndex() const;
            Ent::Gen2::String _comment() const;
        };

        struct StateGauge : HelperObject<StateGauge> // Object
        {
            explicit StateGauge(Ent::Property _node): HelperObject<StateGauge>(std::move(_node)) {}
            static constexpr char schemaName[] = "StateGauge";
            static StateGauge load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return StateGauge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static StateGauge loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return StateGauge(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static StateGauge create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return StateGauge(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            StateGauge makeInstanceOf()
            {
                return StateGauge(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String _comment() const;
            Ent::Gen2::Float m_amount() const;
            Ent::Gen2::Float m_maxAmount() const;
            Ent::Gen2::Float m_pendingDiff() const;
        };


        struct TagInfo : HelperObject<TagInfo> // Object
        {
            explicit TagInfo(Ent::Property _node): HelperObject<TagInfo>(std::move(_node)) {}
            static constexpr char schemaName[] = "TagInfo";
            static TagInfo load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TagInfo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TagInfo loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TagInfo(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TagInfo create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TagInfo(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TagInfo makeInstanceOf()
            {
                return TagInfo(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int AudioWeight() const;
            Ent::Gen2::String _comment() const;
        };

        struct Team_PlayerData : HelperObject<Team_PlayerData> // Object
        {
            explicit Team_PlayerData(Ent::Property _node): HelperObject<Team_PlayerData>(std::move(_node)) {}
            static constexpr char schemaName[] = "Team::PlayerData";
            static Team_PlayerData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Team_PlayerData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Team_PlayerData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Team_PlayerData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Team_PlayerData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Team_PlayerData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Team_PlayerData makeInstanceOf()
            {
                return Team_PlayerData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int PlayerID() const;
            Ent::Gen2::String _comment() const;
        };

        struct TextureGroundTypeMap : HelperObject<TextureGroundTypeMap> // Object
        {
            explicit TextureGroundTypeMap(Ent::Property _node): HelperObject<TextureGroundTypeMap>(std::move(_node)) {}
            static constexpr char schemaName[] = "TextureGroundTypeMap";
            static TextureGroundTypeMap load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TextureGroundTypeMap(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TextureGroundTypeMap loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TextureGroundTypeMap(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TextureGroundTypeMap create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TextureGroundTypeMap(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TextureGroundTypeMap makeInstanceOf()
            {
                return TextureGroundTypeMap(getProperty().makeInstanceOf());
            }
        
        };

        struct TextureHeightMap : HelperObject<TextureHeightMap> // Object
        {
            explicit TextureHeightMap(Ent::Property _node): HelperObject<TextureHeightMap>(std::move(_node)) {}
            static constexpr char schemaName[] = "TextureHeightMap";
            static TextureHeightMap load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TextureHeightMap(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TextureHeightMap loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TextureHeightMap(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TextureHeightMap create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TextureHeightMap(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TextureHeightMap makeInstanceOf()
            {
                return TextureHeightMap(getProperty().makeInstanceOf());
            }
        
        };

        struct Timer : HelperObject<Timer> // Object
        {
            explicit Timer(Ent::Property _node): HelperObject<Timer>(std::move(_node)) {}
            static constexpr char schemaName[] = "Timer";
            static Timer load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return Timer(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static Timer loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return Timer(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static Timer create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return Timer(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            Timer makeInstanceOf()
            {
                return Timer(getProperty().makeInstanceOf());
            }
        
        };

        struct TravelParams : HelperObject<TravelParams> // Object
        {
            explicit TravelParams(Ent::Property _node): HelperObject<TravelParams>(std::move(_node)) {}
            static constexpr char schemaName[] = "TravelParams";
            static TravelParams load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return TravelParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static TravelParams loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return TravelParams(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static TravelParams create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return TravelParams(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            TravelParams makeInstanceOf()
            {
                return TravelParams(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float Acceleration() const;
            Ent::Gen2::Float AccelerationZ() const;
            Ent::Gen2::Float Deceleration() const;
            Ent::Gen2::Float HeightOffset() const;
            Ent::Gen2::Float MoveBlend() const;
            Ent::Gen2::Float TravelSpeed() const;
            Ent::Gen2::Bool UseFlyingNavMesh() const;
            Ent::Gen2::String _comment() const;
        };

        struct VegetationResourceData : HelperObject<VegetationResourceData> // Object
        {
            explicit VegetationResourceData(Ent::Property _node): HelperObject<VegetationResourceData>(std::move(_node)) {}
            static constexpr char schemaName[] = "VegetationResourceData";
            static VegetationResourceData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VegetationResourceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VegetationResourceData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VegetationResourceData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VegetationResourceData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VegetationResourceData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VegetationResourceData makeInstanceOf()
            {
                return VegetationResourceData(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String GRCPath() const;
            Ent::Gen2::String Name() const;
            Ent::Gen2::PrimitiveSet<char const*> Tags() const;
            Ent::Gen2::String VisibilityDistanceCategory() const;
            Ent::Gen2::String _comment() const;
        };

        struct VegetationVisibilityDistanceCategory : HelperObject<VegetationVisibilityDistanceCategory> // Object
        {
            explicit VegetationVisibilityDistanceCategory(Ent::Property _node): HelperObject<VegetationVisibilityDistanceCategory>(std::move(_node)) {}
            static constexpr char schemaName[] = "VegetationVisibilityDistanceCategory";
            static VegetationVisibilityDistanceCategory load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VegetationVisibilityDistanceCategory(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VegetationVisibilityDistanceCategory loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VegetationVisibilityDistanceCategory(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VegetationVisibilityDistanceCategory create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VegetationVisibilityDistanceCategory(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VegetationVisibilityDistanceCategory makeInstanceOf()
            {
                return VegetationVisibilityDistanceCategory(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String Name() const;
            Ent::Gen2::Float VisibilityDistance() const;
            Ent::Gen2::String _comment() const;
        };

        struct VisualResourceBuildData : HelperObject<VisualResourceBuildData> // Object
        {
            explicit VisualResourceBuildData(Ent::Property _node): HelperObject<VisualResourceBuildData>(std::move(_node)) {}
            static constexpr char schemaName[] = "VisualResourceBuildData";
            static VisualResourceBuildData load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return VisualResourceBuildData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static VisualResourceBuildData loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return VisualResourceBuildData(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static VisualResourceBuildData create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return VisualResourceBuildData(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            VisualResourceBuildData makeInstanceOf()
            {
                return VisualResourceBuildData(getProperty().makeInstanceOf());
            }
            PrimArray<Ent::Gen2::String> GRCs() const;
            PrimArray<Ent::Gen2::Int> LODs() const;
            Ent::Gen2::String _comment() const;
        };

        struct ZoneCylinderShape : HelperObject<ZoneCylinderShape> // Object
        {
            explicit ZoneCylinderShape(Ent::Property _node): HelperObject<ZoneCylinderShape>(std::move(_node)) {}
            static constexpr char schemaName[] = "ZoneCylinderShape";
            static ZoneCylinderShape load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ZoneCylinderShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ZoneCylinderShape loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ZoneCylinderShape(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ZoneCylinderShape create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ZoneCylinderShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ZoneCylinderShape makeInstanceOf()
            {
                return ZoneCylinderShape(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Float DistanceBetweenPoints() const;
            Ent::Gen2::Float Radius() const;
            Ent::Gen2::String _comment() const;
        };

        struct ZoneMeshShape : HelperObject<ZoneMeshShape> // Object
        {
            explicit ZoneMeshShape(Ent::Property _node): HelperObject<ZoneMeshShape>(std::move(_node)) {}
            static constexpr char schemaName[] = "ZoneMeshShape";
            static ZoneMeshShape load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return ZoneMeshShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static ZoneMeshShape loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return ZoneMeshShape(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static ZoneMeshShape create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return ZoneMeshShape(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            ZoneMeshShape makeInstanceOf()
            {
                return ZoneMeshShape(getProperty().makeInstanceOf());
            }
            Ent::Gen2::String ConvexZoneFilePath() const;
            Ent::Gen2::String _comment() const;
        };

        struct sBiomeSFXResult : HelperObject<sBiomeSFXResult> // Object
        {
            explicit sBiomeSFXResult(Ent::Property _node): HelperObject<sBiomeSFXResult>(std::move(_node)) {}
            static constexpr char schemaName[] = "sBiomeSFXResult";
            static sBiomeSFXResult load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sBiomeSFXResult(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sBiomeSFXResult loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sBiomeSFXResult(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sBiomeSFXResult create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sBiomeSFXResult(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sBiomeSFXResult makeInstanceOf()
            {
                return sBiomeSFXResult(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int ID() const;
            Ent::Gen2::Float Weight() const;
            Ent::Gen2::String _comment() const;
        };

        struct sBiomeSoundResult : HelperObject<sBiomeSoundResult> // Object
        {
            explicit sBiomeSoundResult(Ent::Property _node): HelperObject<sBiomeSoundResult>(std::move(_node)) {}
            static constexpr char schemaName[] = "sBiomeSoundResult";
            static sBiomeSoundResult load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sBiomeSoundResult(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sBiomeSoundResult loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sBiomeSoundResult(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sBiomeSoundResult create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sBiomeSoundResult(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sBiomeSoundResult makeInstanceOf()
            {
                return sBiomeSoundResult(getProperty().makeInstanceOf());
            }
            Ent::Gen2::Int ID() const;
            Ent::Gen2::Float Weight() const;
            Ent::Gen2::String _comment() const;
        };

        struct sJointMotorDesc : HelperObject<sJointMotorDesc> // Object
        {
            explicit sJointMotorDesc(Ent::Property _node): HelperObject<sJointMotorDesc>(std::move(_node)) {}
            static constexpr char schemaName[] = "sJointMotorDesc";
            static sJointMotorDesc load(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                return sJointMotorDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str()));
            }
            static sJointMotorDesc loadCopy(Ent::EntityLib& _entlib, std::filesystem::path const& _sourceFile)
            {
                auto& storage = _entlib.createTempJsonFile();
                storage = _entlib.readJsonFile(_sourceFile.string().c_str());
                return sJointMotorDesc(Ent::Property(
                    &_entlib, _entlib.getSchema(schemaName), _sourceFile.string().c_str(), &storage));
            }
            static sJointMotorDesc create(Ent::EntityLib& _entlib)
            {
                auto& storage = _entlib.createTempJsonFile();
                return sJointMotorDesc(Ent::Property(&_entlib, _entlib.getSchema(schemaName), "", &storage));
            }
            sJointMotorDesc makeInstanceOf()
            {
                return sJointMotorDesc(getProperty().makeInstanceOf());
            }
        
        };


        // variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_
        inline char const* variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::String> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::string()
        {
            return strcmp(
                getProperty().getUnionType(), "string") != 0?
                    std::optional<Ent::Gen2::String>{}:
                    std::optional<Ent::Gen2::String>(getProperty().getUnionData());
        }
        inline Ent::Gen2::String variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setstring()
        {
            return Ent::Gen2::String(getProperty().setUnionType("string"));
        }
        inline std::optional<Ent::Gen2::Bool> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::bool_()
        {
            return strcmp(
                getProperty().getUnionType(), "bool") != 0?
                    std::optional<Ent::Gen2::Bool>{}:
                    std::optional<Ent::Gen2::Bool>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Bool variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setbool_()
        {
            return Ent::Gen2::Bool(getProperty().setUnionType("bool"));
        }
        inline std::optional<Ent::Gen2::Int> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::s32()
        {
            return strcmp(
                getProperty().getUnionType(), "s32") != 0?
                    std::optional<Ent::Gen2::Int>{}:
                    std::optional<Ent::Gen2::Int>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Int variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::sets32()
        {
            return Ent::Gen2::Int(getProperty().setUnionType("s32"));
        }
        inline std::optional<Ent::Gen2::Float> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::float_()
        {
            return strcmp(
                getProperty().getUnionType(), "float") != 0?
                    std::optional<Ent::Gen2::Float>{}:
                    std::optional<Ent::Gen2::Float>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Float variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setfloat_()
        {
            return Ent::Gen2::Float(getProperty().setUnionType("float"));
        }
        inline std::optional<Ent::Gen2::Vector2> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Vector2()
        {
            return strcmp(
                getProperty().getUnionType(), "Vector2") != 0?
                    std::optional<Ent::Gen2::Vector2>{}:
                    std::optional<Ent::Gen2::Vector2>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Vector2 variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setVector2()
        {
            return Ent::Gen2::Vector2(getProperty().setUnionType("Vector2"));
        }
        inline std::optional<Ent::Gen2::Vector3> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Vector3()
        {
            return strcmp(
                getProperty().getUnionType(), "Vector3") != 0?
                    std::optional<Ent::Gen2::Vector3>{}:
                    std::optional<Ent::Gen2::Vector3>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Vector3 variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setVector3()
        {
            return Ent::Gen2::Vector3(getProperty().setUnionType("Vector3"));
        }
        inline std::optional<Ent::Gen2::Position> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Position()
        {
            return strcmp(
                getProperty().getUnionType(), "Position") != 0?
                    std::optional<Ent::Gen2::Position>{}:
                    std::optional<Ent::Gen2::Position>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Position variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setPosition()
        {
            return Ent::Gen2::Position(getProperty().setUnionType("Position"));
        }
        inline std::optional<PrimArray<Ent::Gen2::String>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::stringVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<string>") != 0?
                    std::optional<PrimArray<Ent::Gen2::String>>{}:
                    std::optional<PrimArray<Ent::Gen2::String>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::String> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setstringVec()
        {
            return PrimArray<Ent::Gen2::String>(getProperty().setUnionType("vector<string>"));
        }
        inline std::optional<PrimArray<Ent::Gen2::Bool>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::boolVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<bool>") != 0?
                    std::optional<PrimArray<Ent::Gen2::Bool>>{}:
                    std::optional<PrimArray<Ent::Gen2::Bool>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::Bool> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setboolVec()
        {
            return PrimArray<Ent::Gen2::Bool>(getProperty().setUnionType("vector<bool>"));
        }
        inline std::optional<PrimArray<Ent::Gen2::Int>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::s32Vec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<s32>") != 0?
                    std::optional<PrimArray<Ent::Gen2::Int>>{}:
                    std::optional<PrimArray<Ent::Gen2::Int>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::Int> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::sets32Vec()
        {
            return PrimArray<Ent::Gen2::Int>(getProperty().setUnionType("vector<s32>"));
        }
        inline std::optional<PrimArray<Ent::Gen2::Float>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::floatVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<float>") != 0?
                    std::optional<PrimArray<Ent::Gen2::Float>>{}:
                    std::optional<PrimArray<Ent::Gen2::Float>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::Float> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setfloatVec()
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().setUnionType("vector<float>"));
        }
        inline std::optional<Array<Ent::Gen2::Vector2>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Vector2Vec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<Vector2>") != 0?
                    std::optional<Array<Ent::Gen2::Vector2>>{}:
                    std::optional<Array<Ent::Gen2::Vector2>>(getProperty().getUnionData());
        }
        inline Array<Ent::Gen2::Vector2> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setVector2Vec()
        {
            return Array<Ent::Gen2::Vector2>(getProperty().setUnionType("vector<Vector2>"));
        }
        inline std::optional<Array<Ent::Gen2::Vector3>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::Vector3Vec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<Vector3>") != 0?
                    std::optional<Array<Ent::Gen2::Vector3>>{}:
                    std::optional<Array<Ent::Gen2::Vector3>>(getProperty().getUnionData());
        }
        inline Array<Ent::Gen2::Vector3> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setVector3Vec()
        {
            return Array<Ent::Gen2::Vector3>(getProperty().setUnionType("vector<Vector3>"));
        }
        inline std::optional<Array<Ent::Gen2::Position>> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::PositionVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<Position>") != 0?
                    std::optional<Array<Ent::Gen2::Position>>{}:
                    std::optional<Array<Ent::Gen2::Position>>(getProperty().getUnionData());
        }
        inline Array<Ent::Gen2::Position> variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_::setPositionVec()
        {
            return Array<Ent::Gen2::Position>(getProperty().setUnionType("vector<Position>"));
        }
        // variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_
        inline char const* variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::String> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::string()
        {
            return strcmp(
                getProperty().getUnionType(), "string") != 0?
                    std::optional<Ent::Gen2::String>{}:
                    std::optional<Ent::Gen2::String>(getProperty().getUnionData());
        }
        inline Ent::Gen2::String variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setstring()
        {
            return Ent::Gen2::String(getProperty().setUnionType("string"));
        }
        inline std::optional<Ent::Gen2::Bool> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::bool_()
        {
            return strcmp(
                getProperty().getUnionType(), "bool") != 0?
                    std::optional<Ent::Gen2::Bool>{}:
                    std::optional<Ent::Gen2::Bool>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Bool variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setbool_()
        {
            return Ent::Gen2::Bool(getProperty().setUnionType("bool"));
        }
        inline std::optional<Ent::Gen2::Int> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::s32()
        {
            return strcmp(
                getProperty().getUnionType(), "s32") != 0?
                    std::optional<Ent::Gen2::Int>{}:
                    std::optional<Ent::Gen2::Int>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Int variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::sets32()
        {
            return Ent::Gen2::Int(getProperty().setUnionType("s32"));
        }
        inline std::optional<Ent::Gen2::Float> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::float_()
        {
            return strcmp(
                getProperty().getUnionType(), "float") != 0?
                    std::optional<Ent::Gen2::Float>{}:
                    std::optional<Ent::Gen2::Float>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Float variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setfloat_()
        {
            return Ent::Gen2::Float(getProperty().setUnionType("float"));
        }
        inline std::optional<Ent::Gen2::EntityRef> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::EntityRef()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityRef") != 0?
                    std::optional<Ent::Gen2::EntityRef>{}:
                    std::optional<Ent::Gen2::EntityRef>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityRef variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setEntityRef()
        {
            return Ent::Gen2::EntityRef(getProperty().setUnionType("EntityRef"));
        }
        inline std::optional<Ent::Gen2::Vector2> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Vector2()
        {
            return strcmp(
                getProperty().getUnionType(), "Vector2") != 0?
                    std::optional<Ent::Gen2::Vector2>{}:
                    std::optional<Ent::Gen2::Vector2>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Vector2 variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setVector2()
        {
            return Ent::Gen2::Vector2(getProperty().setUnionType("Vector2"));
        }
        inline std::optional<Ent::Gen2::Vector3> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Vector3()
        {
            return strcmp(
                getProperty().getUnionType(), "Vector3") != 0?
                    std::optional<Ent::Gen2::Vector3>{}:
                    std::optional<Ent::Gen2::Vector3>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Vector3 variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setVector3()
        {
            return Ent::Gen2::Vector3(getProperty().setUnionType("Vector3"));
        }
        inline std::optional<Ent::Gen2::Position> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Position()
        {
            return strcmp(
                getProperty().getUnionType(), "Position") != 0?
                    std::optional<Ent::Gen2::Position>{}:
                    std::optional<Ent::Gen2::Position>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Position variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setPosition()
        {
            return Ent::Gen2::Position(getProperty().setUnionType("Position"));
        }
        inline std::optional<PrimArray<Ent::Gen2::String>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::stringVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<string>") != 0?
                    std::optional<PrimArray<Ent::Gen2::String>>{}:
                    std::optional<PrimArray<Ent::Gen2::String>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::String> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setstringVec()
        {
            return PrimArray<Ent::Gen2::String>(getProperty().setUnionType("vector<string>"));
        }
        inline std::optional<PrimArray<Ent::Gen2::Bool>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::boolVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<bool>") != 0?
                    std::optional<PrimArray<Ent::Gen2::Bool>>{}:
                    std::optional<PrimArray<Ent::Gen2::Bool>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::Bool> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setboolVec()
        {
            return PrimArray<Ent::Gen2::Bool>(getProperty().setUnionType("vector<bool>"));
        }
        inline std::optional<PrimArray<Ent::Gen2::Int>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::s32Vec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<s32>") != 0?
                    std::optional<PrimArray<Ent::Gen2::Int>>{}:
                    std::optional<PrimArray<Ent::Gen2::Int>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::Int> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::sets32Vec()
        {
            return PrimArray<Ent::Gen2::Int>(getProperty().setUnionType("vector<s32>"));
        }
        inline std::optional<PrimArray<Ent::Gen2::Float>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::floatVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<float>") != 0?
                    std::optional<PrimArray<Ent::Gen2::Float>>{}:
                    std::optional<PrimArray<Ent::Gen2::Float>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::Float> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setfloatVec()
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().setUnionType("vector<float>"));
        }
        inline std::optional<PrimArray<Ent::Gen2::EntityRef>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::EntityRefVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<EntityRef>") != 0?
                    std::optional<PrimArray<Ent::Gen2::EntityRef>>{}:
                    std::optional<PrimArray<Ent::Gen2::EntityRef>>(getProperty().getUnionData());
        }
        inline PrimArray<Ent::Gen2::EntityRef> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setEntityRefVec()
        {
            return PrimArray<Ent::Gen2::EntityRef>(getProperty().setUnionType("vector<EntityRef>"));
        }
        inline std::optional<Array<Ent::Gen2::Vector2>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Vector2Vec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<Vector2>") != 0?
                    std::optional<Array<Ent::Gen2::Vector2>>{}:
                    std::optional<Array<Ent::Gen2::Vector2>>(getProperty().getUnionData());
        }
        inline Array<Ent::Gen2::Vector2> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setVector2Vec()
        {
            return Array<Ent::Gen2::Vector2>(getProperty().setUnionType("vector<Vector2>"));
        }
        inline std::optional<Array<Ent::Gen2::Vector3>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::Vector3Vec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<Vector3>") != 0?
                    std::optional<Array<Ent::Gen2::Vector3>>{}:
                    std::optional<Array<Ent::Gen2::Vector3>>(getProperty().getUnionData());
        }
        inline Array<Ent::Gen2::Vector3> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setVector3Vec()
        {
            return Array<Ent::Gen2::Vector3>(getProperty().setUnionType("vector<Vector3>"));
        }
        inline std::optional<Array<Ent::Gen2::Position>> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::PositionVec()
        {
            return strcmp(
                getProperty().getUnionType(), "vector<Position>") != 0?
                    std::optional<Array<Ent::Gen2::Position>>{}:
                    std::optional<Array<Ent::Gen2::Position>>(getProperty().getUnionData());
        }
        inline Array<Ent::Gen2::Position> variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_::setPositionVec()
        {
            return Array<Ent::Gen2::Position>(getProperty().setUnionType("vector<Position>"));
        }
        // variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_
        inline char const* variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::Int> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::s32()
        {
            return strcmp(
                getProperty().getUnionType(), "s32") != 0?
                    std::optional<Ent::Gen2::Int>{}:
                    std::optional<Ent::Gen2::Int>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Int variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::sets32()
        {
            return Ent::Gen2::Int(getProperty().setUnionType("s32"));
        }
        inline std::optional<Ent::Gen2::Float> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::float_()
        {
            return strcmp(
                getProperty().getUnionType(), "float") != 0?
                    std::optional<Ent::Gen2::Float>{}:
                    std::optional<Ent::Gen2::Float>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Float variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setfloat_()
        {
            return Ent::Gen2::Float(getProperty().setUnionType("float"));
        }
        inline std::optional<Ent::Gen2::Bool> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::bool_()
        {
            return strcmp(
                getProperty().getUnionType(), "bool") != 0?
                    std::optional<Ent::Gen2::Bool>{}:
                    std::optional<Ent::Gen2::Bool>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Bool variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setbool_()
        {
            return Ent::Gen2::Bool(getProperty().setUnionType("bool"));
        }
        inline std::optional<Ent::Gen2::String> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::string()
        {
            return strcmp(
                getProperty().getUnionType(), "string") != 0?
                    std::optional<Ent::Gen2::String>{}:
                    std::optional<Ent::Gen2::String>(getProperty().getUnionData());
        }
        inline Ent::Gen2::String variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setstring()
        {
            return Ent::Gen2::String(getProperty().setUnionType("string"));
        }
        inline std::optional<Ent::Gen2::Vector2> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::Vector2()
        {
            return strcmp(
                getProperty().getUnionType(), "Vector2") != 0?
                    std::optional<Ent::Gen2::Vector2>{}:
                    std::optional<Ent::Gen2::Vector2>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Vector2 variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setVector2()
        {
            return Ent::Gen2::Vector2(getProperty().setUnionType("Vector2"));
        }
        inline std::optional<Ent::Gen2::Vector3> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::Vector3()
        {
            return strcmp(
                getProperty().getUnionType(), "Vector3") != 0?
                    std::optional<Ent::Gen2::Vector3>{}:
                    std::optional<Ent::Gen2::Vector3>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Vector3 variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setVector3()
        {
            return Ent::Gen2::Vector3(getProperty().setUnionType("Vector3"));
        }
        inline std::optional<Ent::Gen2::Quat> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::Quat()
        {
            return strcmp(
                getProperty().getUnionType(), "Quat") != 0?
                    std::optional<Ent::Gen2::Quat>{}:
                    std::optional<Ent::Gen2::Quat>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Quat variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setQuat()
        {
            return Ent::Gen2::Quat(getProperty().setUnionType("Quat"));
        }
        inline std::optional<Ent::Gen2::Position> variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::Position()
        {
            return strcmp(
                getProperty().getUnionType(), "Position") != 0?
                    std::optional<Ent::Gen2::Position>{}:
                    std::optional<Ent::Gen2::Position>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Position variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_::setPosition()
        {
            return Ent::Gen2::Position(getProperty().setUnionType("Position"));
        }
        // variant_ZoneCylinderShape_ZoneMeshShape_
        inline char const* variant_ZoneCylinderShape_ZoneMeshShape_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::ZoneCylinderShape> variant_ZoneCylinderShape_ZoneMeshShape_::ZoneCylinderShape()
        {
            return strcmp(
                getProperty().getUnionType(), "ZoneCylinderShape") != 0?
                    std::optional<Ent::Gen2::ZoneCylinderShape>{}:
                    std::optional<Ent::Gen2::ZoneCylinderShape>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ZoneCylinderShape variant_ZoneCylinderShape_ZoneMeshShape_::setZoneCylinderShape()
        {
            return Ent::Gen2::ZoneCylinderShape(getProperty().setUnionType("ZoneCylinderShape"));
        }
        inline std::optional<Ent::Gen2::ZoneMeshShape> variant_ZoneCylinderShape_ZoneMeshShape_::ZoneMeshShape()
        {
            return strcmp(
                getProperty().getUnionType(), "ZoneMeshShape") != 0?
                    std::optional<Ent::Gen2::ZoneMeshShape>{}:
                    std::optional<Ent::Gen2::ZoneMeshShape>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ZoneMeshShape variant_ZoneCylinderShape_ZoneMeshShape_::setZoneMeshShape()
        {
            return Ent::Gen2::ZoneMeshShape(getProperty().setUnionType("ZoneMeshShape"));
        }
        // variant_Pasta_Easing_Curve_string_
        inline char const* variant_Pasta_Easing_Curve_string_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::Pasta_Easing_Curve> variant_Pasta_Easing_Curve_string_::Pasta_Easing_Curve()
        {
            return strcmp(
                getProperty().getUnionType(), "Pasta::Easing::Curve") != 0?
                    std::optional<Ent::Gen2::Pasta_Easing_Curve>{}:
                    std::optional<Ent::Gen2::Pasta_Easing_Curve>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Pasta_Easing_Curve variant_Pasta_Easing_Curve_string_::setPasta_Easing_Curve()
        {
            return Ent::Gen2::Pasta_Easing_Curve(getProperty().setUnionType("Pasta::Easing::Curve"));
        }
        inline std::optional<Ent::Gen2::String> variant_Pasta_Easing_Curve_string_::string()
        {
            return strcmp(
                getProperty().getUnionType(), "string") != 0?
                    std::optional<Ent::Gen2::String>{}:
                    std::optional<Ent::Gen2::String>(getProperty().getUnionData());
        }
        inline Ent::Gen2::String variant_Pasta_Easing_Curve_string_::setstring()
        {
            return Ent::Gen2::String(getProperty().setUnionType("string"));
        }
        // variant_MeshShape_ShapeSphere_ShapeBox_
        inline char const* variant_MeshShape_ShapeSphere_ShapeBox_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::MeshShape> variant_MeshShape_ShapeSphere_ShapeBox_::MeshShape()
        {
            return strcmp(
                getProperty().getUnionType(), "MeshShape") != 0?
                    std::optional<Ent::Gen2::MeshShape>{}:
                    std::optional<Ent::Gen2::MeshShape>(getProperty().getUnionData());
        }
        inline Ent::Gen2::MeshShape variant_MeshShape_ShapeSphere_ShapeBox_::setMeshShape()
        {
            return Ent::Gen2::MeshShape(getProperty().setUnionType("MeshShape"));
        }
        inline std::optional<Ent::Gen2::ShapeSphere> variant_MeshShape_ShapeSphere_ShapeBox_::ShapeSphere()
        {
            return strcmp(
                getProperty().getUnionType(), "ShapeSphere") != 0?
                    std::optional<Ent::Gen2::ShapeSphere>{}:
                    std::optional<Ent::Gen2::ShapeSphere>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ShapeSphere variant_MeshShape_ShapeSphere_ShapeBox_::setShapeSphere()
        {
            return Ent::Gen2::ShapeSphere(getProperty().setUnionType("ShapeSphere"));
        }
        inline std::optional<Ent::Gen2::ShapeBox> variant_MeshShape_ShapeSphere_ShapeBox_::ShapeBox()
        {
            return strcmp(
                getProperty().getUnionType(), "ShapeBox") != 0?
                    std::optional<Ent::Gen2::ShapeBox>{}:
                    std::optional<Ent::Gen2::ShapeBox>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ShapeBox variant_MeshShape_ShapeSphere_ShapeBox_::setShapeBox()
        {
            return Ent::Gen2::ShapeBox(getProperty().setUnionType("ShapeBox"));
        }
        // variant_EntityRef_NavMeshArea_
        inline char const* variant_EntityRef_NavMeshArea_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::EntityRef> variant_EntityRef_NavMeshArea_::EntityRef()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityRef") != 0?
                    std::optional<Ent::Gen2::EntityRef>{}:
                    std::optional<Ent::Gen2::EntityRef>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityRef variant_EntityRef_NavMeshArea_::setEntityRef()
        {
            return Ent::Gen2::EntityRef(getProperty().setUnionType("EntityRef"));
        }
        inline std::optional<Ent::Gen2::NavMeshArea> variant_EntityRef_NavMeshArea_::NavMeshArea()
        {
            return strcmp(
                getProperty().getUnionType(), "NavMeshArea") != 0?
                    std::optional<Ent::Gen2::NavMeshArea>{}:
                    std::optional<Ent::Gen2::NavMeshArea>(getProperty().getUnionData());
        }
        inline Ent::Gen2::NavMeshArea variant_EntityRef_NavMeshArea_::setNavMeshArea()
        {
            return Ent::Gen2::NavMeshArea(getProperty().setUnionType("NavMeshArea"));
        }
        // usePerception
        inline Ent::Gen2::String usePerception::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool usePerception::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool usePerception::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // tryGrasp
        inline Ent::Gen2::String tryGrasp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool tryGrasp::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool tryGrasp::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // sPhysicsShapeSphere
        inline Ent::Gen2::String sPhysicsShapeSphere::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float sPhysicsShapeSphere::radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("radius"));
        }
        // sPhysicsShapeMesh
        inline Ent::Gen2::String sPhysicsShapeMesh::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String sPhysicsShapeMesh::path() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("path"));
        }
        // sPhysicsShapeCylinder
        inline Ent::Gen2::String sPhysicsShapeCylinder::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float sPhysicsShapeCylinder::length() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("length"));
        }
        inline Ent::Gen2::Float sPhysicsShapeCylinder::radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("radius"));
        }
        // sPhysicsShapeCapsule
        inline Ent::Gen2::String sPhysicsShapeCapsule::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float sPhysicsShapeCapsule::length() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("length"));
        }
        inline Ent::Gen2::Float sPhysicsShapeCapsule::radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("radius"));
        }
        // sJointFixedDesc
        // sJointBallDesc
        // resetCreatureRequest
        inline Ent::Gen2::String resetCreatureRequest::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool resetCreatureRequest::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool resetCreatureRequest::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // jumpPower
        inline Ent::Gen2::String jumpPower::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool jumpPower::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float jumpPower::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // isPerceivableForEnemies
        inline Ent::Gen2::String isPerceivableForEnemies::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool isPerceivableForEnemies::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool isPerceivableForEnemies::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // isPerceivable
        inline Ent::Gen2::String isPerceivable::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool isPerceivable::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool isPerceivable::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // eventStringHash
        inline Ent::Gen2::String eventStringHash::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool eventStringHash::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::String eventStringHash::val() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("val"));
        }
        // enableSynchronization
        inline Ent::Gen2::String enableSynchronization::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool enableSynchronization::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool enableSynchronization::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // computePitchAngle
        inline Ent::Gen2::String computePitchAngle::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool computePitchAngle::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool computePitchAngle::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // allowedTypesItem
        inline Ent::Gen2::String allowedTypesItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool allowedTypesItem::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool allowedTypesItem::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // Walkability
        inline Ent::Gen2::String Walkability::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool Walkability::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool Walkability::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // sPhysicsShapeBox
        inline Ent::Gen2::String sPhysicsShapeBox::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 sPhysicsShapeBox::size() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("size"));
        }
        // sEnvStamp
        inline Ent::Gen2::Bool sEnvStamp::AffectCoverage() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectCoverage"));
        }
        inline Ent::Gen2::Bool sEnvStamp::AffectFogColor() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectFogColor"));
        }
        inline Ent::Gen2::Bool sEnvStamp::AffectFogDensity() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectFogDensity"));
        }
        inline Ent::Gen2::Bool sEnvStamp::AffectFogFalloff() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectFogFalloff"));
        }
        inline Ent::Gen2::Bool sEnvStamp::AffectFogHeight() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectFogHeight"));
        }
        inline Ent::Gen2::Bool sEnvStamp::AffectPull() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectPull"));
        }
        inline Ent::Gen2::Bool sEnvStamp::AffectType() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectType"));
        }
        inline Ent::Gen2::Bool sEnvStamp::AffectWetness() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectWetness"));
        }
        inline Ent::Gen2::Int sEnvStamp::AtlasID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("AtlasID"));
        }
        inline Ent::Gen2::Vector3 sEnvStamp::FogColor() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("FogColor"));
        }
        inline Ent::Gen2::Bool sEnvStamp::IsCloud() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsCloud"));
        }
        inline Ent::Gen2::Vector3 sEnvStamp::PositionOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("PositionOffset"));
        }
        inline Ent::Gen2::Float sEnvStamp::Rotation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Rotation"));
        }
        inline Ent::Gen2::Float sEnvStamp::Size() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Size"));
        }
        inline Ent::Gen2::Float sEnvStamp::Strength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Strength"));
        }
        inline Ent::Gen2::String sEnvStamp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // retiming
        inline Ent::Gen2::String retiming::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool retiming::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Vector3 retiming::val() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("val"));
        }
        // WaveRendererProperties
        inline Ent::Gen2::Int WaveRendererProperties::BonesGridHeight() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("BonesGridHeight"));
        }
        inline Ent::Gen2::Int WaveRendererProperties::BonesGridWidth() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("BonesGridWidth"));
        }
        inline Ent::Gen2::Int WaveRendererProperties::BonesIgnoreOffset() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("BonesIgnoreOffset"));
        }
        inline Ent::Gen2::String WaveRendererProperties::MaterialPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MaterialPath"));
        }
        inline Ent::Gen2::String WaveRendererProperties::MeshPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MeshPath"));
        }
        inline Ent::Gen2::Int WaveRendererProperties::NbMeshInstances() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbMeshInstances"));
        }
        inline Ent::Gen2::Int WaveRendererProperties::NbQuads() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbQuads"));
        }
        inline Ent::Gen2::Vector3 WaveRendererProperties::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::Vector3 WaveRendererProperties::Scale() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Scale"));
        }
        inline Ent::Gen2::String WaveRendererProperties::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // WaveProperties
        inline Ent::Gen2::Float WaveProperties::Duration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Duration"));
        }
        inline Ent::Gen2::Float WaveProperties::IntervalBetweenWaveFronts() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IntervalBetweenWaveFronts"));
        }
        inline Ent::Gen2::Bool WaveProperties::Looping() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Looping"));
        }
        inline Ent::Gen2::Float WaveProperties::Luminosity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Luminosity"));
        }
        inline Ent::Gen2::String WaveProperties::LuminosityCurvePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("LuminosityCurvePath"));
        }
        inline Ent::Gen2::Float WaveProperties::LuminosityVariability() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LuminosityVariability"));
        }
        inline Array<Ent::Gen2::WaveRendererProperties> WaveProperties::RenderingProperties() const
        {
            return Array<Ent::Gen2::WaveRendererProperties>(getProperty().getObjectField("RenderingProperties"));
        }
        inline Ent::Gen2::WaveRenderingType WaveProperties::RenderingType() const
        {
            return Ent::Gen2::WaveRenderingType(getProperty().getObjectField("RenderingType"));
        }
        inline Ent::Gen2::Int WaveProperties::Width() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Width"));
        }
        inline Ent::Gen2::String WaveProperties::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // sJointUniversalDesc
        inline Ent::Gen2::String sJointUniversalDesc::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector2 sJointUniversalDesc::angleSwing1() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("angleSwing1"));
        }
        inline Ent::Gen2::Vector2 sJointUniversalDesc::angleSwing2() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("angleSwing2"));
        }
        // sJointSwingTwistDesc
        inline Ent::Gen2::String sJointSwingTwistDesc::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector2 sJointSwingTwistDesc::swingAngle() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("swingAngle"));
        }
        inline Ent::Gen2::Vector2 sJointSwingTwistDesc::twistAngle() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("twistAngle"));
        }
        // sJointSliderDesc
        inline Ent::Gen2::String sJointSliderDesc::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 sJointSliderDesc::direction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("direction"));
        }
        inline Ent::Gen2::Vector2 sJointSliderDesc::distance() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("distance"));
        }
        // sJointHingeDesc
        inline Ent::Gen2::String sJointHingeDesc::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector2 sJointHingeDesc::angle() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("angle"));
        }
        inline Ent::Gen2::Vector3 sJointHingeDesc::axis() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("axis"));
        }
        // ConditionalRigidityAttribute_Range
        inline Ent::Gen2::Vector2 ConditionalRigidityAttribute_Range::Range() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("Range"));
        }
        inline Ent::Gen2::String ConditionalRigidityAttribute_Range::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VariantAllowed
        inline Ent::Gen2::String VariantAllowed::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool VariantAllowed::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool VariantAllowed::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // UnionObjectArrayItem
        inline Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ UnionObjectArrayItem::Union() const
        {
            return Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(getProperty().getObjectField("Union"));
        }
        inline Ent::Gen2::String UnionObjectArrayItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TypedValue
        inline Ent::Gen2::String TypedValue::Alias() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Alias"));
        }
        inline Ent::Gen2::String TypedValue::Reference() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Reference"));
        }
        inline Ent::Gen2::variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_ TypedValue::Value() const
        {
            return Ent::Gen2::variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_(getProperty().getObjectField("Value"));
        }
        inline Ent::Gen2::String TypedValue::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TransitionNeighborData
        inline PrimArray<Ent::Gen2::Int> TransitionNeighborData::Backward() const
        {
            return PrimArray<Ent::Gen2::Int>(getProperty().getObjectField("Backward"));
        }
        inline PrimArray<Ent::Gen2::Int> TransitionNeighborData::Forward() const
        {
            return PrimArray<Ent::Gen2::Int>(getProperty().getObjectField("Forward"));
        }
        inline Ent::Gen2::Float TransitionNeighborData::TangentSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TangentSize"));
        }
        inline Ent::Gen2::String TransitionNeighborData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TrailRendererProperties
        inline Ent::Gen2::TrailRenderingAttribute TrailRendererProperties::Attribute() const
        {
            return Ent::Gen2::TrailRenderingAttribute(getProperty().getObjectField("Attribute"));
        }
        inline Ent::Gen2::String TrailRendererProperties::MaterialPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MaterialPath"));
        }
        inline Ent::Gen2::String TrailRendererProperties::MeshPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MeshPath"));
        }
        inline Ent::Gen2::Int TrailRendererProperties::NbMeshInstances() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbMeshInstances"));
        }
        inline Ent::Gen2::Int TrailRendererProperties::NbQuads() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbQuads"));
        }
        inline Ent::Gen2::Int TrailRendererProperties::NbTrailPointsBetweenFrontQuads() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbTrailPointsBetweenFrontQuads"));
        }
        inline Ent::Gen2::Int TrailRendererProperties::NbVertices() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbVertices"));
        }
        inline Ent::Gen2::Vector3 TrailRendererProperties::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::Vector2 TrailRendererProperties::RandomAxialRotationAmplitude() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("RandomAxialRotationAmplitude"));
        }
        inline Ent::Gen2::Float TrailRendererProperties::RandomUVOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RandomUVOffset"));
        }
        inline Ent::Gen2::TrailRenderingSides TrailRendererProperties::Sides() const
        {
            return Ent::Gen2::TrailRenderingSides(getProperty().getObjectField("Sides"));
        }
        inline Ent::Gen2::String TrailRendererProperties::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TrackedEntitiesItem
        // TestPropertyDefaultValues
        inline Ent::Gen2::Int TestPropertyDefaultValues::A() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("A"));
        }
        inline Ent::Gen2::Int TestPropertyDefaultValues::B() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("B"));
        }
        inline Ent::Gen2::String TestPropertyDefaultValues::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TestPropertyDefaultValues2
        inline Ent::Gen2::String TestPropertyDefaultValues2::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::TestPropertyDefaultValues TestPropertyDefaultValues2::propertyWithDefault2() const
        {
            return Ent::Gen2::TestPropertyDefaultValues(getProperty().getObjectField("propertyWithDefault2"));
        }
        inline Ent::Gen2::TestPropertyDefaultValues TestPropertyDefaultValues2::propertyWithDefault3() const
        {
            return Ent::Gen2::TestPropertyDefaultValues(getProperty().getObjectField("propertyWithDefault3"));
        }
        // Terrain_TerrainMeta
        inline Ent::Gen2::String Terrain_TerrainMeta::DataPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("DataPath"));
        }
        inline Ent::Gen2::Float Terrain_TerrainMeta::HeightScaleMeters() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HeightScaleMeters"));
        }
        inline Ent::Gen2::String Terrain_TerrainMeta::Material() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Material"));
        }
        inline Ent::Gen2::Float Terrain_TerrainMeta::RegionWidthMeters() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RegionWidthMeters"));
        }
        inline Ent::Gen2::Bool Terrain_TerrainMeta::RimTerrain() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("RimTerrain"));
        }
        inline Ent::Gen2::Float Terrain_TerrainMeta::SkirtScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SkirtScale"));
        }
        inline Ent::Gen2::Float Terrain_TerrainMeta::TexelsPerMeter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TexelsPerMeter"));
        }
        inline Ent::Gen2::String Terrain_TerrainMeta::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TargetCollision
        inline Ent::Gen2::String TargetCollision::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int TargetCollision::count() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("count"));
        }
        // TagsList
        inline Ent::Gen2::Map<char const*, Ent::Gen2::PrimitiveSet<char const*>> TagsList::Tags() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::PrimitiveSet<char const*>>(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String TagsList::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TaggedSDF
        inline Ent::Gen2::Float TaggedSDF::MaxTagDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxTagDistance"));
        }
        inline Ent::Gen2::Vector3 TaggedSDF::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::variant_MeshShape_ShapeSphere_ShapeBox_ TaggedSDF::Shape() const
        {
            return Ent::Gen2::variant_MeshShape_ShapeSphere_ShapeBox_(getProperty().getObjectField("Shape"));
        }
        inline Ent::Gen2::String TaggedSDF::Tag() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Tag"));
        }
        inline Ent::Gen2::String TaggedSDF::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // UIMusic
        inline Ent::Gen2::String UIMusic::MusicType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MusicType"));
        }
        inline Ent::Gen2::String UIMusic::SkillTree() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SkillTree"));
        }
        inline Ent::Gen2::SyncTempoMode UIMusic::SynchronizationMode() const
        {
            return Ent::Gen2::SyncTempoMode(getProperty().getObjectField("SynchronizationMode"));
        }
        inline Ent::Gen2::String UIMusic::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // StunData
        inline Ent::Gen2::String StunData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int StunData::damageHitBig() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("damageHitBig"));
        }
        inline Ent::Gen2::Int StunData::damageHitBite() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("damageHitBite"));
        }
        inline Ent::Gen2::Int StunData::damageHitEject() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("damageHitEject"));
        }
        inline Ent::Gen2::Int StunData::damageHitEjectFar() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("damageHitEjectFar"));
        }
        inline Ent::Gen2::Int StunData::damageHitLight() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("damageHitLight"));
        }
        inline Ent::Gen2::Int StunData::damageHitMedium() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("damageHitMedium"));
        }
        inline Ent::Gen2::Int StunData::malus() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("malus"));
        }
        inline Ent::Gen2::Float StunData::orientHitBig() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("orientHitBig"));
        }
        inline Ent::Gen2::Float StunData::orientHitEject() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("orientHitEject"));
        }
        inline Ent::Gen2::Float StunData::orientHitEjectFar() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("orientHitEjectFar"));
        }
        inline Ent::Gen2::Float StunData::orientHitLight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("orientHitLight"));
        }
        inline Ent::Gen2::Float StunData::orientHitMedium() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("orientHitMedium"));
        }
        inline Ent::Gen2::Float StunData::recoverTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("recoverTime"));
        }
        inline Ent::Gen2::Int StunData::resistance() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("resistance"));
        }
        inline Ent::Gen2::Float StunData::stunTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("stunTime"));
        }
        // StickToGround
        inline Ent::Gen2::String StickToGround::BoneNameEnd() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneNameEnd"));
        }
        inline Ent::Gen2::String StickToGround::BoneNameStart() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneNameStart"));
        }
        inline Ent::Gen2::String StickToGround::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SpeedScaleXY
        inline Ent::Gen2::String SpeedScaleXY::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool SpeedScaleXY::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float SpeedScaleXY::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // SpeedModeMax
        inline Ent::Gen2::String SpeedModeMax::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool SpeedModeMax::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::SpeedMode SpeedModeMax::val() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("val"));
        }
        // SpeedFastMinDuration
        inline Ent::Gen2::String SpeedFastMinDuration::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool SpeedFastMinDuration::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float SpeedFastMinDuration::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // SpawningParameter
        inline Ent::Gen2::String SpawningParameter::EntityName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EntityName"));
        }
        inline Ent::Gen2::Float SpawningParameter::MinimumDepth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinimumDepth"));
        }
        inline Ent::Gen2::Float SpawningParameter::PeriodRandomness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PeriodRandomness"));
        }
        inline Ent::Gen2::Float SpawningParameter::SpawningPeriod() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpawningPeriod"));
        }
        inline Ent::Gen2::String SpawningParameter::State() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("State"));
        }
        inline Ent::Gen2::String SpawningParameter::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoundOpportunityRangeDescription
        inline Ent::Gen2::Float SoundOpportunityRangeDescription::ChunkSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ChunkSize"));
        }
        inline Ent::Gen2::Float SoundOpportunityRangeDescription::MaxDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxDistance"));
        }
        inline Ent::Gen2::String SoundOpportunityRangeDescription::PCloudPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PCloudPath"));
        }
        inline Ent::Gen2::String SoundOpportunityRangeDescription::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoundOcclusionData
        inline Ent::Gen2::Float SoundOcclusionData::OcclusionMaxRatioAdjustRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OcclusionMaxRatioAdjustRate"));
        }
        inline Ent::Gen2::Float SoundOcclusionData::OcclusionMaxThickness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OcclusionMaxThickness"));
        }
        inline Ent::Gen2::Float SoundOcclusionData::OcclusionRatioAdjustRateFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OcclusionRatioAdjustRateFactor"));
        }
        inline Ent::Gen2::Float SoundOcclusionData::OcclusionSphereCastRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OcclusionSphereCastRadius"));
        }
        inline Ent::Gen2::Float SoundOcclusionData::OcclusionSphereCastVerticalOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OcclusionSphereCastVerticalOffset"));
        }
        inline Ent::Gen2::String SoundOcclusionData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoundManager_BiomeSoundBank
        // SoundEventMapping
        inline Ent::Gen2::Map<char const*, Ent::Gen2::String> SoundEventMapping::Explicit() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::String>(getProperty().getObjectField("Explicit"));
        }
        inline Ent::Gen2::PrimitiveSet<char const*> SoundEventMapping::Ignored() const
        {
            return Ent::Gen2::PrimitiveSet<char const*>(getProperty().getObjectField("Ignored"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::String> SoundEventMapping::Prefixed() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::String>(getProperty().getObjectField("Prefixed"));
        }
        inline Ent::Gen2::String SoundEventMapping::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // soundEmissionStrength
        inline Ent::Gen2::String soundEmissionStrength::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool soundEmissionStrength::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::SoundEmissionStrength soundEmissionStrength::val() const
        {
            return Ent::Gen2::SoundEmissionStrength(getProperty().getObjectField("val"));
        }
        // SoftCollisionGD_VegetationDetectionParameters
        inline Ent::Gen2::String SoftCollisionGD_VegetationDetectionParameters::BoneName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneName"));
        }
        inline Ent::Gen2::Vector3 SoftCollisionGD_VegetationDetectionParameters::BoneOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("BoneOffset"));
        }
        inline Ent::Gen2::Float SoftCollisionGD_VegetationDetectionParameters::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline PrimArray<Ent::Gen2::String> SoftCollisionGD_VegetationDetectionParameters::VegetationTagList() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("VegetationTagList"));
        }
        inline Ent::Gen2::String SoftCollisionGD_VegetationDetectionParameters::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SmoothScaleComponentInput_Parameters
        inline Ent::Gen2::Float SmoothScaleComponentInput_Parameters::Scale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Scale"));
        }
        inline Ent::Gen2::Float SmoothScaleComponentInput_Parameters::Time() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Time"));
        }
        inline Ent::Gen2::String SmoothScaleComponentInput_Parameters::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShowdownSpeciesAudioData
        inline Ent::Gen2::String ShowdownSpeciesAudioData::AudioCategory() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("AudioCategory"));
        }
        inline Ent::Gen2::String ShowdownSpeciesAudioData::Species() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Species"));
        }
        inline Ent::Gen2::String ShowdownSpeciesAudioData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShowdownLayerInfo
        inline Ent::Gen2::Float ShowdownLayerInfo::CoolDown() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CoolDown"));
        }
        inline Ent::Gen2::String ShowdownLayerInfo::DistanceRTPC() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("DistanceRTPC"));
        }
        inline Ent::Gen2::Bool ShowdownLayerInfo::Loop() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Loop"));
        }
        inline Ent::Gen2::String ShowdownLayerInfo::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String ShowdownLayerInfo::Priority() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Priority"));
        }
        inline Ent::Gen2::String ShowdownLayerInfo::UninvolvedDistanceRTPC() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("UninvolvedDistanceRTPC"));
        }
        inline Ent::Gen2::String ShowdownLayerInfo::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShowdownLayerData
        inline Ent::Gen2::ShowdownLayerInfo ShowdownLayerData::Attacked() const
        {
            return Ent::Gen2::ShowdownLayerInfo(getProperty().getObjectField("Attacked"));
        }
        inline Ent::Gen2::ShowdownLayerInfo ShowdownLayerData::Danger() const
        {
            return Ent::Gen2::ShowdownLayerInfo(getProperty().getObjectField("Danger"));
        }
        inline Ent::Gen2::ShowdownLayerInfo ShowdownLayerData::Detected() const
        {
            return Ent::Gen2::ShowdownLayerInfo(getProperty().getObjectField("Detected"));
        }
        inline Ent::Gen2::ShowdownLayerInfo ShowdownLayerData::Suspected() const
        {
            return Ent::Gen2::ShowdownLayerInfo(getProperty().getObjectField("Suspected"));
        }
        inline Ent::Gen2::String ShowdownLayerData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShowdownMusic
        inline Ent::Gen2::Float ShowdownMusic::AfterEpicCoolDown() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AfterEpicCoolDown"));
        }
        inline Ent::Gen2::Float ShowdownMusic::CloseRange() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CloseRange"));
        }
        inline Ent::Gen2::Float ShowdownMusic::CoolDownBeforeStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CoolDownBeforeStop"));
        }
        inline Ent::Gen2::String ShowdownMusic::EventsPrefix() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EventsPrefix"));
        }
        inline Ent::Gen2::Int ShowdownMusic::IntensityCountMax() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("IntensityCountMax"));
        }
        inline Ent::Gen2::Float ShowdownMusic::IntensityCountRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IntensityCountRatio"));
        }
        inline Ent::Gen2::Float ShowdownMusic::IntensityDistanceRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IntensityDistanceRatio"));
        }
        inline Ent::Gen2::String ShowdownMusic::IntensityRTPC() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("IntensityRTPC"));
        }
        inline Ent::Gen2::ShowdownLayerData ShowdownMusic::Layers() const
        {
            return Ent::Gen2::ShowdownLayerData(getProperty().getObjectField("Layers"));
        }
        inline Ent::Gen2::String ShowdownMusic::MostSignificantCreatureDistanceRTPC() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MostSignificantCreatureDistanceRTPC"));
        }
        inline Ent::Gen2::Float ShowdownMusic::MusicSourceAnchorRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MusicSourceAnchorRadius"));
        }
        inline Ent::Gen2::Float ShowdownMusic::MusicSourceDamping() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MusicSourceDamping"));
        }
        inline Ent::Gen2::Float ShowdownMusic::PlayerInvolvedScoreFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PlayerInvolvedScoreFactor"));
        }
        inline Ent::Gen2::Float ShowdownMusic::PlayerUninvolvedDistanceFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PlayerUninvolvedDistanceFactor"));
        }
        inline Ent::Gen2::String ShowdownMusic::RTPC_2D3D() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_2D3D"));
        }
        inline Ent::Gen2::String ShowdownMusic::RTPC_PlayersInFight() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PlayersInFight"));
        }
        inline Ent::Gen2::String ShowdownMusic::ShowdownBlueSideState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ShowdownBlueSideState"));
        }
        inline Ent::Gen2::String ShowdownMusic::ShowdownMusBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ShowdownMusBank"));
        }
        inline Ent::Gen2::String ShowdownMusic::ShowdownMusState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ShowdownMusState"));
        }
        inline Ent::Gen2::String ShowdownMusic::ShowdownNeutralSideState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ShowdownNeutralSideState"));
        }
        inline Ent::Gen2::String ShowdownMusic::ShowdownRedSideState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ShowdownRedSideState"));
        }
        inline Ent::Gen2::String ShowdownMusic::ShowdownSideState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ShowdownSideState"));
        }
        inline Ent::Gen2::String ShowdownMusic::ShowdownTypeState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ShowdownTypeState"));
        }
        inline Ent::Gen2::Float ShowdownMusic::SmoothDistanceRTPCs() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SmoothDistanceRTPCs"));
        }
        inline Ent::Gen2::Float ShowdownMusic::SmoothTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SmoothTime"));
        }
        inline Array<Ent::Gen2::ShowdownSpeciesAudioData> ShowdownMusic::SpeciesToAudioCategory() const
        {
            return Array<Ent::Gen2::ShowdownSpeciesAudioData>(getProperty().getObjectField("SpeciesToAudioCategory"));
        }
        inline Ent::Gen2::SyncTempoMode ShowdownMusic::SynchronizationMode() const
        {
            return Ent::Gen2::SyncTempoMode(getProperty().getObjectField("SynchronizationMode"));
        }
        inline Ent::Gen2::String ShowdownMusic::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShootSequenceData
        inline Ent::Gen2::Float ShootSequenceData::Param() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Param"));
        }
        inline Ent::Gen2::String ShootSequenceData::Type_() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Type"));
        }
        inline Ent::Gen2::String ShootSequenceData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShootData
        inline Ent::Gen2::String ShootData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String ShootData::ammoName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ammoName"));
        }
        inline Ent::Gen2::Float ShootData::anticipationImprecision() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("anticipationImprecision"));
        }
        inline Ent::Gen2::Bool ShootData::canShoot() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("canShoot"));
        }
        inline Ent::Gen2::Int ShootData::chargeTierCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("chargeTierCount"));
        }
        inline Ent::Gen2::Float ShootData::gravity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("gravity"));
        }
        inline Ent::Gen2::Float ShootData::lifeCost() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("lifeCost"));
        }
        inline Ent::Gen2::Float ShootData::lifeCostCharged() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("lifeCostCharged"));
        }
        inline Ent::Gen2::Float ShootData::maxChargeDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxChargeDuration"));
        }
        inline Ent::Gen2::Float ShootData::maxShootDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxShootDistance"));
        }
        inline Ent::Gen2::Float ShootData::minDelayBetweenShots() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("minDelayBetweenShots"));
        }
        inline Ent::Gen2::Bool ShootData::randomAngleShoot() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("randomAngleShoot"));
        }
        inline Ent::Gen2::Float ShootData::shootMaxAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("shootMaxAngle"));
        }
        inline Ent::Gen2::Float ShootData::shootSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("shootSpeed"));
        }
        inline Ent::Gen2::Float ShootData::zoneImprecision() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("zoneImprecision"));
        }
        // SetOfObjectItem
        inline Ent::Gen2::String SetOfObjectItem::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String SetOfObjectItem::Value() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Value"));
        }
        inline Ent::Gen2::String SetOfObjectItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SeedPatchData
        inline Ent::Gen2::Float SeedPatchData::NoiseBlur() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseBlur"));
        }
        inline Ent::Gen2::Float SeedPatchData::NoiseContrast() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseContrast"));
        }
        inline Ent::Gen2::Bool SeedPatchData::NoiseInvert() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("NoiseInvert"));
        }
        inline Ent::Gen2::String SeedPatchData::NoiseName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NoiseName"));
        }
        inline Ent::Gen2::Float SeedPatchData::NoiseOffsetX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseOffsetX"));
        }
        inline Ent::Gen2::Float SeedPatchData::NoiseOffsetY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseOffsetY"));
        }
        inline Ent::Gen2::Float SeedPatchData::NoiseOpacity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseOpacity"));
        }
        inline Ent::Gen2::Float SeedPatchData::NoisePosition() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoisePosition"));
        }
        inline Ent::Gen2::Float SeedPatchData::NoiseSizeX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseSizeX"));
        }
        inline Ent::Gen2::Float SeedPatchData::NoiseSizeY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseSizeY"));
        }
        inline Ent::Gen2::String SeedPatchData::SeedName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SeedName"));
        }
        inline Ent::Gen2::String SeedPatchData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SeedPatchDatas
        inline Ent::Gen2::Map<char const*, Ent::Gen2::SeedPatchData> SeedPatchDatas::DataMap() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::SeedPatchData>(getProperty().getObjectField("DataMap"));
        }
        inline Ent::Gen2::String SeedPatchDatas::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SeedPatchDataList
        inline Array<Ent::Gen2::SeedPatchData> SeedPatchDataList::Data() const
        {
            return Array<Ent::Gen2::SeedPatchData>(getProperty().getObjectField("Data"));
        }
        inline Ent::Gen2::String SeedPatchDataList::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ScriptPathAndDataSet
        inline Ent::Gen2::Bool ScriptPathAndDataSet::AutoLaunch() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AutoLaunch"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::TypedValue> ScriptPathAndDataSet::DataMap() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::TypedValue>(getProperty().getObjectField("DataMap"));
        }
        inline Ent::Gen2::String ScriptPathAndDataSet::NickName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NickName"));
        }
        inline Ent::Gen2::String ScriptPathAndDataSet::Path() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Path"));
        }
        inline Array<Ent::Gen2::ScriptPathAndDataSet> ScriptPathAndDataSet::SpawnDataSets() const
        {
            return Array<Ent::Gen2::ScriptPathAndDataSet>(getProperty().getObjectField("SpawnDataSets"));
        }
        inline Ent::Gen2::String ScriptPathAndDataSet::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ScaleFactor
        inline Ent::Gen2::String ScaleFactor::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ScaleFactor::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float ScaleFactor::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // ScaleConverter
        inline Ent::Gen2::String ScaleConverter::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::variant_Pasta_Easing_Curve_string_ ScaleConverter::easing() const
        {
            return Ent::Gen2::variant_Pasta_Easing_Curve_string_(getProperty().getObjectField("easing"));
        }
        inline Ent::Gen2::Vector2 ScaleConverter::in_() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("in"));
        }
        inline Ent::Gen2::String ScaleConverter::inText() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("inText"));
        }
        inline Ent::Gen2::Vector2 ScaleConverter::out() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("out"));
        }
        inline Ent::Gen2::String ScaleConverter::outText() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("outText"));
        }
        // RigidbodyScalingSpeed
        inline Ent::Gen2::String RigidbodyScalingSpeed::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool RigidbodyScalingSpeed::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float RigidbodyScalingSpeed::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // RigidbodyScaleMultiplier
        inline Ent::Gen2::String RigidbodyScaleMultiplier::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool RigidbodyScaleMultiplier::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float RigidbodyScaleMultiplier::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // RigidBodyUserData
        // RigidBodyUserDataLedges
        inline Ent::Gen2::RigidBodyUserData RigidBodyUserDataLedges::Super() const
        {
            return Ent::Gen2::RigidBodyUserData(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RigidBodyUserDataLedges::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RigidBodyUserDataImpact
        inline Ent::Gen2::RigidBodyUserData RigidBodyUserDataImpact::Super() const
        {
            return Ent::Gen2::RigidBodyUserData(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RigidBodyUserDataImpact::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RigidBodyMeshNavigation
        inline Ent::Gen2::RigidBodyUserData RigidBodyMeshNavigation::Super() const
        {
            return Ent::Gen2::RigidBodyUserData(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RigidBodyMeshNavigation::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidRigidbodyUserData
        inline Ent::Gen2::RigidBodyUserData FluidRigidbodyUserData::Super() const
        {
            return Ent::Gen2::RigidBodyUserData(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FluidRigidbodyUserData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RevivedData
        inline Ent::Gen2::Float RevivedData::NonCreatureConvertRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NonCreatureConvertRatio"));
        }
        inline Ent::Gen2::Float RevivedData::ReviveSinAmplitude() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ReviveSinAmplitude"));
        }
        inline Ent::Gen2::String RevivedData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ResponsiblePointer_GameEffect_
        inline char const* ResponsiblePointer_GameEffect_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::BeamDetectionEffect> ResponsiblePointer_GameEffect_::BeamDetectionEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "BeamDetectionEffect") != 0?
                    std::optional<Ent::Gen2::BeamDetectionEffect>{}:
                    std::optional<Ent::Gen2::BeamDetectionEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::BeamDetectionEffect ResponsiblePointer_GameEffect_::setBeamDetectionEffect()
        {
            return Ent::Gen2::BeamDetectionEffect(getProperty().setUnionType("BeamDetectionEffect"));
        }
        inline std::optional<Ent::Gen2::BeamEffect> ResponsiblePointer_GameEffect_::BeamEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "BeamEffect") != 0?
                    std::optional<Ent::Gen2::BeamEffect>{}:
                    std::optional<Ent::Gen2::BeamEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::BeamEffect ResponsiblePointer_GameEffect_::setBeamEffect()
        {
            return Ent::Gen2::BeamEffect(getProperty().setUnionType("BeamEffect"));
        }
        inline std::optional<Ent::Gen2::CallForHelpEffect> ResponsiblePointer_GameEffect_::CallForHelpEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "CallForHelpEffect") != 0?
                    std::optional<Ent::Gen2::CallForHelpEffect>{}:
                    std::optional<Ent::Gen2::CallForHelpEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CallForHelpEffect ResponsiblePointer_GameEffect_::setCallForHelpEffect()
        {
            return Ent::Gen2::CallForHelpEffect(getProperty().setUnionType("CallForHelpEffect"));
        }
        inline std::optional<Ent::Gen2::ExplosionEffect> ResponsiblePointer_GameEffect_::ExplosionEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "ExplosionEffect") != 0?
                    std::optional<Ent::Gen2::ExplosionEffect>{}:
                    std::optional<Ent::Gen2::ExplosionEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ExplosionEffect ResponsiblePointer_GameEffect_::setExplosionEffect()
        {
            return Ent::Gen2::ExplosionEffect(getProperty().setUnionType("ExplosionEffect"));
        }
        inline std::optional<Ent::Gen2::FluidEffect> ResponsiblePointer_GameEffect_::FluidEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "FluidEffect") != 0?
                    std::optional<Ent::Gen2::FluidEffect>{}:
                    std::optional<Ent::Gen2::FluidEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FluidEffect ResponsiblePointer_GameEffect_::setFluidEffect()
        {
            return Ent::Gen2::FluidEffect(getProperty().setUnionType("FluidEffect"));
        }
        inline std::optional<Ent::Gen2::FollowerCallEffect> ResponsiblePointer_GameEffect_::FollowerCallEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "FollowerCallEffect") != 0?
                    std::optional<Ent::Gen2::FollowerCallEffect>{}:
                    std::optional<Ent::Gen2::FollowerCallEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FollowerCallEffect ResponsiblePointer_GameEffect_::setFollowerCallEffect()
        {
            return Ent::Gen2::FollowerCallEffect(getProperty().setUnionType("FollowerCallEffect"));
        }
        inline std::optional<Ent::Gen2::RegenEffect> ResponsiblePointer_GameEffect_::RegenEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "RegenEffect") != 0?
                    std::optional<Ent::Gen2::RegenEffect>{}:
                    std::optional<Ent::Gen2::RegenEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::RegenEffect ResponsiblePointer_GameEffect_::setRegenEffect()
        {
            return Ent::Gen2::RegenEffect(getProperty().setUnionType("RegenEffect"));
        }
        inline std::optional<Ent::Gen2::RepulseEffect> ResponsiblePointer_GameEffect_::RepulseEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "RepulseEffect") != 0?
                    std::optional<Ent::Gen2::RepulseEffect>{}:
                    std::optional<Ent::Gen2::RepulseEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::RepulseEffect ResponsiblePointer_GameEffect_::setRepulseEffect()
        {
            return Ent::Gen2::RepulseEffect(getProperty().setUnionType("RepulseEffect"));
        }
        inline std::optional<Ent::Gen2::ShakeEffect> ResponsiblePointer_GameEffect_::ShakeEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "ShakeEffect") != 0?
                    std::optional<Ent::Gen2::ShakeEffect>{}:
                    std::optional<Ent::Gen2::ShakeEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ShakeEffect ResponsiblePointer_GameEffect_::setShakeEffect()
        {
            return Ent::Gen2::ShakeEffect(getProperty().setUnionType("ShakeEffect"));
        }
        inline std::optional<Ent::Gen2::WindTurbulenceEffect> ResponsiblePointer_GameEffect_::WindTurbulenceEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "WindTurbulenceEffect") != 0?
                    std::optional<Ent::Gen2::WindTurbulenceEffect>{}:
                    std::optional<Ent::Gen2::WindTurbulenceEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::WindTurbulenceEffect ResponsiblePointer_GameEffect_::setWindTurbulenceEffect()
        {
            return Ent::Gen2::WindTurbulenceEffect(getProperty().setUnionType("WindTurbulenceEffect"));
        }
        inline std::optional<Ent::Gen2::GameEffect> ResponsiblePointer_GameEffect_::GameEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "GameEffect") != 0?
                    std::optional<Ent::Gen2::GameEffect>{}:
                    std::optional<Ent::Gen2::GameEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::GameEffect ResponsiblePointer_GameEffect_::setGameEffect()
        {
            return Ent::Gen2::GameEffect(getProperty().setUnionType("GameEffect"));
        }
        // sGameEffectTemplate
        inline Ent::Gen2::String sGameEffectTemplate::BoneName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneName"));
        }
        inline Ent::Gen2::ResponsiblePointer_GameEffect_ sGameEffectTemplate::Effect() const
        {
            return Ent::Gen2::ResponsiblePointer_GameEffect_(getProperty().getObjectField("Effect"));
        }
        inline Ent::Gen2::Vector3 sGameEffectTemplate::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::String sGameEffectTemplate::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ResponsiblePointer_CineEvent_
        inline char const* ResponsiblePointer_CineEvent_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::CineEventTestCurrentGameState> ResponsiblePointer_CineEvent_::CineEventTestCurrentGameState()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTestCurrentGameState") != 0?
                    std::optional<Ent::Gen2::CineEventTestCurrentGameState>{}:
                    std::optional<Ent::Gen2::CineEventTestCurrentGameState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTestCurrentGameState ResponsiblePointer_CineEvent_::setCineEventTestCurrentGameState()
        {
            return Ent::Gen2::CineEventTestCurrentGameState(getProperty().setUnionType("CineEventTestCurrentGameState"));
        }
        inline std::optional<Ent::Gen2::CineEventTestEndCurrentSequence> ResponsiblePointer_CineEvent_::CineEventTestEndCurrentSequence()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTestEndCurrentSequence") != 0?
                    std::optional<Ent::Gen2::CineEventTestEndCurrentSequence>{}:
                    std::optional<Ent::Gen2::CineEventTestEndCurrentSequence>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTestEndCurrentSequence ResponsiblePointer_CineEvent_::setCineEventTestEndCurrentSequence()
        {
            return Ent::Gen2::CineEventTestEndCurrentSequence(getProperty().setUnionType("CineEventTestEndCurrentSequence"));
        }
        inline std::optional<Ent::Gen2::CineEventTestInput> ResponsiblePointer_CineEvent_::CineEventTestInput()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTestInput") != 0?
                    std::optional<Ent::Gen2::CineEventTestInput>{}:
                    std::optional<Ent::Gen2::CineEventTestInput>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTestInput ResponsiblePointer_CineEvent_::setCineEventTestInput()
        {
            return Ent::Gen2::CineEventTestInput(getProperty().setUnionType("CineEventTestInput"));
        }
        inline std::optional<Ent::Gen2::CineEventTestIsCanceled> ResponsiblePointer_CineEvent_::CineEventTestIsCanceled()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTestIsCanceled") != 0?
                    std::optional<Ent::Gen2::CineEventTestIsCanceled>{}:
                    std::optional<Ent::Gen2::CineEventTestIsCanceled>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTestIsCanceled ResponsiblePointer_CineEvent_::setCineEventTestIsCanceled()
        {
            return Ent::Gen2::CineEventTestIsCanceled(getProperty().setUnionType("CineEventTestIsCanceled"));
        }
        inline std::optional<Ent::Gen2::CineEventTriggerDisplayUIMessage> ResponsiblePointer_CineEvent_::CineEventTriggerDisplayUIMessage()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTriggerDisplayUIMessage") != 0?
                    std::optional<Ent::Gen2::CineEventTriggerDisplayUIMessage>{}:
                    std::optional<Ent::Gen2::CineEventTriggerDisplayUIMessage>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTriggerDisplayUIMessage ResponsiblePointer_CineEvent_::setCineEventTriggerDisplayUIMessage()
        {
            return Ent::Gen2::CineEventTriggerDisplayUIMessage(getProperty().setUnionType("CineEventTriggerDisplayUIMessage"));
        }
        inline std::optional<Ent::Gen2::CineEventTriggerEventHandlerPost> ResponsiblePointer_CineEvent_::CineEventTriggerEventHandlerPost()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTriggerEventHandlerPost") != 0?
                    std::optional<Ent::Gen2::CineEventTriggerEventHandlerPost>{}:
                    std::optional<Ent::Gen2::CineEventTriggerEventHandlerPost>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTriggerEventHandlerPost ResponsiblePointer_CineEvent_::setCineEventTriggerEventHandlerPost()
        {
            return Ent::Gen2::CineEventTriggerEventHandlerPost(getProperty().setUnionType("CineEventTriggerEventHandlerPost"));
        }
        inline std::optional<Ent::Gen2::CineEventTriggerGameStateChange> ResponsiblePointer_CineEvent_::CineEventTriggerGameStateChange()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTriggerGameStateChange") != 0?
                    std::optional<Ent::Gen2::CineEventTriggerGameStateChange>{}:
                    std::optional<Ent::Gen2::CineEventTriggerGameStateChange>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTriggerGameStateChange ResponsiblePointer_CineEvent_::setCineEventTriggerGameStateChange()
        {
            return Ent::Gen2::CineEventTriggerGameStateChange(getProperty().setUnionType("CineEventTriggerGameStateChange"));
        }
        inline std::optional<Ent::Gen2::CineEventTriggerPlaySequence> ResponsiblePointer_CineEvent_::CineEventTriggerPlaySequence()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTriggerPlaySequence") != 0?
                    std::optional<Ent::Gen2::CineEventTriggerPlaySequence>{}:
                    std::optional<Ent::Gen2::CineEventTriggerPlaySequence>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTriggerPlaySequence ResponsiblePointer_CineEvent_::setCineEventTriggerPlaySequence()
        {
            return Ent::Gen2::CineEventTriggerPlaySequence(getProperty().setUnionType("CineEventTriggerPlaySequence"));
        }
        inline std::optional<Ent::Gen2::CineEventTriggerPlaySound> ResponsiblePointer_CineEvent_::CineEventTriggerPlaySound()
        {
            return strcmp(
                getProperty().getUnionType(), "CineEventTriggerPlaySound") != 0?
                    std::optional<Ent::Gen2::CineEventTriggerPlaySound>{}:
                    std::optional<Ent::Gen2::CineEventTriggerPlaySound>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CineEventTriggerPlaySound ResponsiblePointer_CineEvent_::setCineEventTriggerPlaySound()
        {
            return Ent::Gen2::CineEventTriggerPlaySound(getProperty().setUnionType("CineEventTriggerPlaySound"));
        }
        // ResponsiblePointer_AnalyticsObserverInterface_
        // ResponsiblePointer_ActorState_
        inline char const* ResponsiblePointer_ActorState_::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::ActionAimProjectile> ResponsiblePointer_ActorState_::ActionAimProjectile()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionAimProjectile") != 0?
                    std::optional<Ent::Gen2::ActionAimProjectile>{}:
                    std::optional<Ent::Gen2::ActionAimProjectile>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionAimProjectile ResponsiblePointer_ActorState_::setActionAimProjectile()
        {
            return Ent::Gen2::ActionAimProjectile(getProperty().setUnionType("ActionAimProjectile"));
        }
        inline std::optional<Ent::Gen2::ActionAttack> ResponsiblePointer_ActorState_::ActionAttack()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionAttack") != 0?
                    std::optional<Ent::Gen2::ActionAttack>{}:
                    std::optional<Ent::Gen2::ActionAttack>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionAttack ResponsiblePointer_ActorState_::setActionAttack()
        {
            return Ent::Gen2::ActionAttack(getProperty().setUnionType("ActionAttack"));
        }
        inline std::optional<Ent::Gen2::ActionAttackJumpOnto> ResponsiblePointer_ActorState_::ActionAttackJumpOnto()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionAttackJumpOnto") != 0?
                    std::optional<Ent::Gen2::ActionAttackJumpOnto>{}:
                    std::optional<Ent::Gen2::ActionAttackJumpOnto>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionAttackJumpOnto ResponsiblePointer_ActorState_::setActionAttackJumpOnto()
        {
            return Ent::Gen2::ActionAttackJumpOnto(getProperty().setUnionType("ActionAttackJumpOnto"));
        }
        inline std::optional<Ent::Gen2::ActionAttackStomp> ResponsiblePointer_ActorState_::ActionAttackStomp()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionAttackStomp") != 0?
                    std::optional<Ent::Gen2::ActionAttackStomp>{}:
                    std::optional<Ent::Gen2::ActionAttackStomp>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionAttackStomp ResponsiblePointer_ActorState_::setActionAttackStomp()
        {
            return Ent::Gen2::ActionAttackStomp(getProperty().setUnionType("ActionAttackStomp"));
        }
        inline std::optional<Ent::Gen2::ActionBite> ResponsiblePointer_ActorState_::ActionBite()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionBite") != 0?
                    std::optional<Ent::Gen2::ActionBite>{}:
                    std::optional<Ent::Gen2::ActionBite>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionBite ResponsiblePointer_ActorState_::setActionBite()
        {
            return Ent::Gen2::ActionBite(getProperty().setUnionType("ActionBite"));
        }
        inline std::optional<Ent::Gen2::ActionBiteIn> ResponsiblePointer_ActorState_::ActionBiteIn()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionBiteIn") != 0?
                    std::optional<Ent::Gen2::ActionBiteIn>{}:
                    std::optional<Ent::Gen2::ActionBiteIn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionBiteIn ResponsiblePointer_ActorState_::setActionBiteIn()
        {
            return Ent::Gen2::ActionBiteIn(getProperty().setUnionType("ActionBiteIn"));
        }
        inline std::optional<Ent::Gen2::ActionBiteOut> ResponsiblePointer_ActorState_::ActionBiteOut()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionBiteOut") != 0?
                    std::optional<Ent::Gen2::ActionBiteOut>{}:
                    std::optional<Ent::Gen2::ActionBiteOut>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionBiteOut ResponsiblePointer_ActorState_::setActionBiteOut()
        {
            return Ent::Gen2::ActionBiteOut(getProperty().setUnionType("ActionBiteOut"));
        }
        inline std::optional<Ent::Gen2::ActionBittenState> ResponsiblePointer_ActorState_::ActionBittenState()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionBittenState") != 0?
                    std::optional<Ent::Gen2::ActionBittenState>{}:
                    std::optional<Ent::Gen2::ActionBittenState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionBittenState ResponsiblePointer_ActorState_::setActionBittenState()
        {
            return Ent::Gen2::ActionBittenState(getProperty().setUnionType("ActionBittenState"));
        }
        inline std::optional<Ent::Gen2::ActionBrake> ResponsiblePointer_ActorState_::ActionBrake()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionBrake") != 0?
                    std::optional<Ent::Gen2::ActionBrake>{}:
                    std::optional<Ent::Gen2::ActionBrake>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionBrake ResponsiblePointer_ActorState_::setActionBrake()
        {
            return Ent::Gen2::ActionBrake(getProperty().setUnionType("ActionBrake"));
        }
        inline std::optional<Ent::Gen2::ActionCallForHelp> ResponsiblePointer_ActorState_::ActionCallForHelp()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionCallForHelp") != 0?
                    std::optional<Ent::Gen2::ActionCallForHelp>{}:
                    std::optional<Ent::Gen2::ActionCallForHelp>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionCallForHelp ResponsiblePointer_ActorState_::setActionCallForHelp()
        {
            return Ent::Gen2::ActionCallForHelp(getProperty().setUnionType("ActionCallForHelp"));
        }
        inline std::optional<Ent::Gen2::ActionCentrifugal> ResponsiblePointer_ActorState_::ActionCentrifugal()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionCentrifugal") != 0?
                    std::optional<Ent::Gen2::ActionCentrifugal>{}:
                    std::optional<Ent::Gen2::ActionCentrifugal>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionCentrifugal ResponsiblePointer_ActorState_::setActionCentrifugal()
        {
            return Ent::Gen2::ActionCentrifugal(getProperty().setUnionType("ActionCentrifugal"));
        }
        inline std::optional<Ent::Gen2::ActionChangeMount> ResponsiblePointer_ActorState_::ActionChangeMount()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionChangeMount") != 0?
                    std::optional<Ent::Gen2::ActionChangeMount>{}:
                    std::optional<Ent::Gen2::ActionChangeMount>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionChangeMount ResponsiblePointer_ActorState_::setActionChangeMount()
        {
            return Ent::Gen2::ActionChangeMount(getProperty().setUnionType("ActionChangeMount"));
        }
        inline std::optional<Ent::Gen2::ActionChangeRidingSpot> ResponsiblePointer_ActorState_::ActionChangeRidingSpot()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionChangeRidingSpot") != 0?
                    std::optional<Ent::Gen2::ActionChangeRidingSpot>{}:
                    std::optional<Ent::Gen2::ActionChangeRidingSpot>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionChangeRidingSpot ResponsiblePointer_ActorState_::setActionChangeRidingSpot()
        {
            return Ent::Gen2::ActionChangeRidingSpot(getProperty().setUnionType("ActionChangeRidingSpot"));
        }
        inline std::optional<Ent::Gen2::ActionChosen> ResponsiblePointer_ActorState_::ActionChosen()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionChosen") != 0?
                    std::optional<Ent::Gen2::ActionChosen>{}:
                    std::optional<Ent::Gen2::ActionChosen>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionChosen ResponsiblePointer_ActorState_::setActionChosen()
        {
            return Ent::Gen2::ActionChosen(getProperty().setUnionType("ActionChosen"));
        }
        inline std::optional<Ent::Gen2::ActionCinematic> ResponsiblePointer_ActorState_::ActionCinematic()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionCinematic") != 0?
                    std::optional<Ent::Gen2::ActionCinematic>{}:
                    std::optional<Ent::Gen2::ActionCinematic>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionCinematic ResponsiblePointer_ActorState_::setActionCinematic()
        {
            return Ent::Gen2::ActionCinematic(getProperty().setUnionType("ActionCinematic"));
        }
        inline std::optional<Ent::Gen2::ActionClamberDropOff> ResponsiblePointer_ActorState_::ActionClamberDropOff()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionClamberDropOff") != 0?
                    std::optional<Ent::Gen2::ActionClamberDropOff>{}:
                    std::optional<Ent::Gen2::ActionClamberDropOff>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionClamberDropOff ResponsiblePointer_ActorState_::setActionClamberDropOff()
        {
            return Ent::Gen2::ActionClamberDropOff(getProperty().setUnionType("ActionClamberDropOff"));
        }
        inline std::optional<Ent::Gen2::ActionClamberJump> ResponsiblePointer_ActorState_::ActionClamberJump()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionClamberJump") != 0?
                    std::optional<Ent::Gen2::ActionClamberJump>{}:
                    std::optional<Ent::Gen2::ActionClamberJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionClamberJump ResponsiblePointer_ActorState_::setActionClamberJump()
        {
            return Ent::Gen2::ActionClamberJump(getProperty().setUnionType("ActionClamberJump"));
        }
        inline std::optional<Ent::Gen2::ActionClamberJumpOff> ResponsiblePointer_ActorState_::ActionClamberJumpOff()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionClamberJumpOff") != 0?
                    std::optional<Ent::Gen2::ActionClamberJumpOff>{}:
                    std::optional<Ent::Gen2::ActionClamberJumpOff>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionClamberJumpOff ResponsiblePointer_ActorState_::setActionClamberJumpOff()
        {
            return Ent::Gen2::ActionClamberJumpOff(getProperty().setUnionType("ActionClamberJumpOff"));
        }
        inline std::optional<Ent::Gen2::ActionClamberLand> ResponsiblePointer_ActorState_::ActionClamberLand()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionClamberLand") != 0?
                    std::optional<Ent::Gen2::ActionClamberLand>{}:
                    std::optional<Ent::Gen2::ActionClamberLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionClamberLand ResponsiblePointer_ActorState_::setActionClamberLand()
        {
            return Ent::Gen2::ActionClamberLand(getProperty().setUnionType("ActionClamberLand"));
        }
        inline std::optional<Ent::Gen2::ActionClamberMove> ResponsiblePointer_ActorState_::ActionClamberMove()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionClamberMove") != 0?
                    std::optional<Ent::Gen2::ActionClamberMove>{}:
                    std::optional<Ent::Gen2::ActionClamberMove>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionClamberMove ResponsiblePointer_ActorState_::setActionClamberMove()
        {
            return Ent::Gen2::ActionClamberMove(getProperty().setUnionType("ActionClamberMove"));
        }
        inline std::optional<Ent::Gen2::ActionClamberRise> ResponsiblePointer_ActorState_::ActionClamberRise()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionClamberRise") != 0?
                    std::optional<Ent::Gen2::ActionClamberRise>{}:
                    std::optional<Ent::Gen2::ActionClamberRise>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionClamberRise ResponsiblePointer_ActorState_::setActionClamberRise()
        {
            return Ent::Gen2::ActionClamberRise(getProperty().setUnionType("ActionClamberRise"));
        }
        inline std::optional<Ent::Gen2::ActionClimbEdge> ResponsiblePointer_ActorState_::ActionClimbEdge()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionClimbEdge") != 0?
                    std::optional<Ent::Gen2::ActionClimbEdge>{}:
                    std::optional<Ent::Gen2::ActionClimbEdge>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionClimbEdge ResponsiblePointer_ActorState_::setActionClimbEdge()
        {
            return Ent::Gen2::ActionClimbEdge(getProperty().setUnionType("ActionClimbEdge"));
        }
        inline std::optional<Ent::Gen2::ActionCollapse> ResponsiblePointer_ActorState_::ActionCollapse()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionCollapse") != 0?
                    std::optional<Ent::Gen2::ActionCollapse>{}:
                    std::optional<Ent::Gen2::ActionCollapse>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionCollapse ResponsiblePointer_ActorState_::setActionCollapse()
        {
            return Ent::Gen2::ActionCollapse(getProperty().setUnionType("ActionCollapse"));
        }
        inline std::optional<Ent::Gen2::ActionDecelerate> ResponsiblePointer_ActorState_::ActionDecelerate()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDecelerate") != 0?
                    std::optional<Ent::Gen2::ActionDecelerate>{}:
                    std::optional<Ent::Gen2::ActionDecelerate>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDecelerate ResponsiblePointer_ActorState_::setActionDecelerate()
        {
            return Ent::Gen2::ActionDecelerate(getProperty().setUnionType("ActionDecelerate"));
        }
        inline std::optional<Ent::Gen2::ActionDigUpTreasure> ResponsiblePointer_ActorState_::ActionDigUpTreasure()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDigUpTreasure") != 0?
                    std::optional<Ent::Gen2::ActionDigUpTreasure>{}:
                    std::optional<Ent::Gen2::ActionDigUpTreasure>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDigUpTreasure ResponsiblePointer_ActorState_::setActionDigUpTreasure()
        {
            return Ent::Gen2::ActionDigUpTreasure(getProperty().setUnionType("ActionDigUpTreasure"));
        }
        inline std::optional<Ent::Gen2::ActionDisableAndFollow> ResponsiblePointer_ActorState_::ActionDisableAndFollow()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDisableAndFollow") != 0?
                    std::optional<Ent::Gen2::ActionDisableAndFollow>{}:
                    std::optional<Ent::Gen2::ActionDisableAndFollow>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDisableAndFollow ResponsiblePointer_ActorState_::setActionDisableAndFollow()
        {
            return Ent::Gen2::ActionDisableAndFollow(getProperty().setUnionType("ActionDisableAndFollow"));
        }
        inline std::optional<Ent::Gen2::ActionDodge> ResponsiblePointer_ActorState_::ActionDodge()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDodge") != 0?
                    std::optional<Ent::Gen2::ActionDodge>{}:
                    std::optional<Ent::Gen2::ActionDodge>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDodge ResponsiblePointer_ActorState_::setActionDodge()
        {
            return Ent::Gen2::ActionDodge(getProperty().setUnionType("ActionDodge"));
        }
        inline std::optional<Ent::Gen2::ActionDrawAttention> ResponsiblePointer_ActorState_::ActionDrawAttention()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDrawAttention") != 0?
                    std::optional<Ent::Gen2::ActionDrawAttention>{}:
                    std::optional<Ent::Gen2::ActionDrawAttention>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDrawAttention ResponsiblePointer_ActorState_::setActionDrawAttention()
        {
            return Ent::Gen2::ActionDrawAttention(getProperty().setUnionType("ActionDrawAttention"));
        }
        inline std::optional<Ent::Gen2::ActionDrawWeapon> ResponsiblePointer_ActorState_::ActionDrawWeapon()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDrawWeapon") != 0?
                    std::optional<Ent::Gen2::ActionDrawWeapon>{}:
                    std::optional<Ent::Gen2::ActionDrawWeapon>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDrawWeapon ResponsiblePointer_ActorState_::setActionDrawWeapon()
        {
            return Ent::Gen2::ActionDrawWeapon(getProperty().setUnionType("ActionDrawWeapon"));
        }
        inline std::optional<Ent::Gen2::ActionDrawWeaponState> ResponsiblePointer_ActorState_::ActionDrawWeaponState()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDrawWeaponState") != 0?
                    std::optional<Ent::Gen2::ActionDrawWeaponState>{}:
                    std::optional<Ent::Gen2::ActionDrawWeaponState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDrawWeaponState ResponsiblePointer_ActorState_::setActionDrawWeaponState()
        {
            return Ent::Gen2::ActionDrawWeaponState(getProperty().setUnionType("ActionDrawWeaponState"));
        }
        inline std::optional<Ent::Gen2::ActionDrift> ResponsiblePointer_ActorState_::ActionDrift()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDrift") != 0?
                    std::optional<Ent::Gen2::ActionDrift>{}:
                    std::optional<Ent::Gen2::ActionDrift>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDrift ResponsiblePointer_ActorState_::setActionDrift()
        {
            return Ent::Gen2::ActionDrift(getProperty().setUnionType("ActionDrift"));
        }
        inline std::optional<Ent::Gen2::ActionDrop> ResponsiblePointer_ActorState_::ActionDrop()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionDrop") != 0?
                    std::optional<Ent::Gen2::ActionDrop>{}:
                    std::optional<Ent::Gen2::ActionDrop>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionDrop ResponsiblePointer_ActorState_::setActionDrop()
        {
            return Ent::Gen2::ActionDrop(getProperty().setUnionType("ActionDrop"));
        }
        inline std::optional<Ent::Gen2::ActionEmote> ResponsiblePointer_ActorState_::ActionEmote()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionEmote") != 0?
                    std::optional<Ent::Gen2::ActionEmote>{}:
                    std::optional<Ent::Gen2::ActionEmote>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionEmote ResponsiblePointer_ActorState_::setActionEmote()
        {
            return Ent::Gen2::ActionEmote(getProperty().setUnionType("ActionEmote"));
        }
        inline std::optional<Ent::Gen2::ActionFlyCrash> ResponsiblePointer_ActorState_::ActionFlyCrash()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionFlyCrash") != 0?
                    std::optional<Ent::Gen2::ActionFlyCrash>{}:
                    std::optional<Ent::Gen2::ActionFlyCrash>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionFlyCrash ResponsiblePointer_ActorState_::setActionFlyCrash()
        {
            return Ent::Gen2::ActionFlyCrash(getProperty().setUnionType("ActionFlyCrash"));
        }
        inline std::optional<Ent::Gen2::ActionFlyDive> ResponsiblePointer_ActorState_::ActionFlyDive()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionFlyDive") != 0?
                    std::optional<Ent::Gen2::ActionFlyDive>{}:
                    std::optional<Ent::Gen2::ActionFlyDive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionFlyDive ResponsiblePointer_ActorState_::setActionFlyDive()
        {
            return Ent::Gen2::ActionFlyDive(getProperty().setUnionType("ActionFlyDive"));
        }
        inline std::optional<Ent::Gen2::ActionFlyDown> ResponsiblePointer_ActorState_::ActionFlyDown()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionFlyDown") != 0?
                    std::optional<Ent::Gen2::ActionFlyDown>{}:
                    std::optional<Ent::Gen2::ActionFlyDown>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionFlyDown ResponsiblePointer_ActorState_::setActionFlyDown()
        {
            return Ent::Gen2::ActionFlyDown(getProperty().setUnionType("ActionFlyDown"));
        }
        inline std::optional<Ent::Gen2::ActionFlyFlap> ResponsiblePointer_ActorState_::ActionFlyFlap()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionFlyFlap") != 0?
                    std::optional<Ent::Gen2::ActionFlyFlap>{}:
                    std::optional<Ent::Gen2::ActionFlyFlap>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionFlyFlap ResponsiblePointer_ActorState_::setActionFlyFlap()
        {
            return Ent::Gen2::ActionFlyFlap(getProperty().setUnionType("ActionFlyFlap"));
        }
        inline std::optional<Ent::Gen2::ActionFlyUp> ResponsiblePointer_ActorState_::ActionFlyUp()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionFlyUp") != 0?
                    std::optional<Ent::Gen2::ActionFlyUp>{}:
                    std::optional<Ent::Gen2::ActionFlyUp>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionFlyUp ResponsiblePointer_ActorState_::setActionFlyUp()
        {
            return Ent::Gen2::ActionFlyUp(getProperty().setUnionType("ActionFlyUp"));
        }
        inline std::optional<Ent::Gen2::ActionHit> ResponsiblePointer_ActorState_::ActionHit()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionHit") != 0?
                    std::optional<Ent::Gen2::ActionHit>{}:
                    std::optional<Ent::Gen2::ActionHit>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionHit ResponsiblePointer_ActorState_::setActionHit()
        {
            return Ent::Gen2::ActionHit(getProperty().setUnionType("ActionHit"));
        }
        inline std::optional<Ent::Gen2::ActionIdle> ResponsiblePointer_ActorState_::ActionIdle()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionIdle") != 0?
                    std::optional<Ent::Gen2::ActionIdle>{}:
                    std::optional<Ent::Gen2::ActionIdle>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionIdle ResponsiblePointer_ActorState_::setActionIdle()
        {
            return Ent::Gen2::ActionIdle(getProperty().setUnionType("ActionIdle"));
        }
        inline std::optional<Ent::Gen2::ActionIncarnate> ResponsiblePointer_ActorState_::ActionIncarnate()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionIncarnate") != 0?
                    std::optional<Ent::Gen2::ActionIncarnate>{}:
                    std::optional<Ent::Gen2::ActionIncarnate>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionIncarnate ResponsiblePointer_ActorState_::setActionIncarnate()
        {
            return Ent::Gen2::ActionIncarnate(getProperty().setUnionType("ActionIncarnate"));
        }
        inline std::optional<Ent::Gen2::ActionIncarnated> ResponsiblePointer_ActorState_::ActionIncarnated()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionIncarnated") != 0?
                    std::optional<Ent::Gen2::ActionIncarnated>{}:
                    std::optional<Ent::Gen2::ActionIncarnated>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionIncarnated ResponsiblePointer_ActorState_::setActionIncarnated()
        {
            return Ent::Gen2::ActionIncarnated(getProperty().setUnionType("ActionIncarnated"));
        }
        inline std::optional<Ent::Gen2::ActionJump> ResponsiblePointer_ActorState_::ActionJump()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionJump") != 0?
                    std::optional<Ent::Gen2::ActionJump>{}:
                    std::optional<Ent::Gen2::ActionJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionJump ResponsiblePointer_ActorState_::setActionJump()
        {
            return Ent::Gen2::ActionJump(getProperty().setUnionType("ActionJump"));
        }
        inline std::optional<Ent::Gen2::ActionJumpOnto> ResponsiblePointer_ActorState_::ActionJumpOnto()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionJumpOnto") != 0?
                    std::optional<Ent::Gen2::ActionJumpOnto>{}:
                    std::optional<Ent::Gen2::ActionJumpOnto>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionJumpOnto ResponsiblePointer_ActorState_::setActionJumpOnto()
        {
            return Ent::Gen2::ActionJumpOnto(getProperty().setUnionType("ActionJumpOnto"));
        }
        inline std::optional<Ent::Gen2::ActionLand> ResponsiblePointer_ActorState_::ActionLand()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionLand") != 0?
                    std::optional<Ent::Gen2::ActionLand>{}:
                    std::optional<Ent::Gen2::ActionLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionLand ResponsiblePointer_ActorState_::setActionLand()
        {
            return Ent::Gen2::ActionLand(getProperty().setUnionType("ActionLand"));
        }
        inline std::optional<Ent::Gen2::ActionLandingMount> ResponsiblePointer_ActorState_::ActionLandingMount()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionLandingMount") != 0?
                    std::optional<Ent::Gen2::ActionLandingMount>{}:
                    std::optional<Ent::Gen2::ActionLandingMount>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionLandingMount ResponsiblePointer_ActorState_::setActionLandingMount()
        {
            return Ent::Gen2::ActionLandingMount(getProperty().setUnionType("ActionLandingMount"));
        }
        inline std::optional<Ent::Gen2::ActionLookAt> ResponsiblePointer_ActorState_::ActionLookAt()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionLookAt") != 0?
                    std::optional<Ent::Gen2::ActionLookAt>{}:
                    std::optional<Ent::Gen2::ActionLookAt>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionLookAt ResponsiblePointer_ActorState_::setActionLookAt()
        {
            return Ent::Gen2::ActionLookAt(getProperty().setUnionType("ActionLookAt"));
        }
        inline std::optional<Ent::Gen2::ActionMountReception> ResponsiblePointer_ActorState_::ActionMountReception()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionMountReception") != 0?
                    std::optional<Ent::Gen2::ActionMountReception>{}:
                    std::optional<Ent::Gen2::ActionMountReception>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionMountReception ResponsiblePointer_ActorState_::setActionMountReception()
        {
            return Ent::Gen2::ActionMountReception(getProperty().setUnionType("ActionMountReception"));
        }
        inline std::optional<Ent::Gen2::ActionMove> ResponsiblePointer_ActorState_::ActionMove()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionMove") != 0?
                    std::optional<Ent::Gen2::ActionMove>{}:
                    std::optional<Ent::Gen2::ActionMove>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionMove ResponsiblePointer_ActorState_::setActionMove()
        {
            return Ent::Gen2::ActionMove(getProperty().setUnionType("ActionMove"));
        }
        inline std::optional<Ent::Gen2::ActionMoveProjectile> ResponsiblePointer_ActorState_::ActionMoveProjectile()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionMoveProjectile") != 0?
                    std::optional<Ent::Gen2::ActionMoveProjectile>{}:
                    std::optional<Ent::Gen2::ActionMoveProjectile>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionMoveProjectile ResponsiblePointer_ActorState_::setActionMoveProjectile()
        {
            return Ent::Gen2::ActionMoveProjectile(getProperty().setUnionType("ActionMoveProjectile"));
        }
        inline std::optional<Ent::Gen2::ActionMoveTo> ResponsiblePointer_ActorState_::ActionMoveTo()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionMoveTo") != 0?
                    std::optional<Ent::Gen2::ActionMoveTo>{}:
                    std::optional<Ent::Gen2::ActionMoveTo>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionMoveTo ResponsiblePointer_ActorState_::setActionMoveTo()
        {
            return Ent::Gen2::ActionMoveTo(getProperty().setUnionType("ActionMoveTo"));
        }
        inline std::optional<Ent::Gen2::ActionOrientMount> ResponsiblePointer_ActorState_::ActionOrientMount()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionOrientMount") != 0?
                    std::optional<Ent::Gen2::ActionOrientMount>{}:
                    std::optional<Ent::Gen2::ActionOrientMount>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionOrientMount ResponsiblePointer_ActorState_::setActionOrientMount()
        {
            return Ent::Gen2::ActionOrientMount(getProperty().setUnionType("ActionOrientMount"));
        }
        inline std::optional<Ent::Gen2::ActionOutfitSpecialState> ResponsiblePointer_ActorState_::ActionOutfitSpecialState()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionOutfitSpecialState") != 0?
                    std::optional<Ent::Gen2::ActionOutfitSpecialState>{}:
                    std::optional<Ent::Gen2::ActionOutfitSpecialState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionOutfitSpecialState ResponsiblePointer_ActorState_::setActionOutfitSpecialState()
        {
            return Ent::Gen2::ActionOutfitSpecialState(getProperty().setUnionType("ActionOutfitSpecialState"));
        }
        inline std::optional<Ent::Gen2::ActionPathfindAndMove> ResponsiblePointer_ActorState_::ActionPathfindAndMove()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionPathfindAndMove") != 0?
                    std::optional<Ent::Gen2::ActionPathfindAndMove>{}:
                    std::optional<Ent::Gen2::ActionPathfindAndMove>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionPathfindAndMove ResponsiblePointer_ActorState_::setActionPathfindAndMove()
        {
            return Ent::Gen2::ActionPathfindAndMove(getProperty().setUnionType("ActionPathfindAndMove"));
        }
        inline std::optional<Ent::Gen2::ActionPatinate> ResponsiblePointer_ActorState_::ActionPatinate()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionPatinate") != 0?
                    std::optional<Ent::Gen2::ActionPatinate>{}:
                    std::optional<Ent::Gen2::ActionPatinate>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionPatinate ResponsiblePointer_ActorState_::setActionPatinate()
        {
            return Ent::Gen2::ActionPatinate(getProperty().setUnionType("ActionPatinate"));
        }
        inline std::optional<Ent::Gen2::ActionPlayAnim> ResponsiblePointer_ActorState_::ActionPlayAnim()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionPlayAnim") != 0?
                    std::optional<Ent::Gen2::ActionPlayAnim>{}:
                    std::optional<Ent::Gen2::ActionPlayAnim>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionPlayAnim ResponsiblePointer_ActorState_::setActionPlayAnim()
        {
            return Ent::Gen2::ActionPlayAnim(getProperty().setUnionType("ActionPlayAnim"));
        }
        inline std::optional<Ent::Gen2::ActionPropelled> ResponsiblePointer_ActorState_::ActionPropelled()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionPropelled") != 0?
                    std::optional<Ent::Gen2::ActionPropelled>{}:
                    std::optional<Ent::Gen2::ActionPropelled>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionPropelled ResponsiblePointer_ActorState_::setActionPropelled()
        {
            return Ent::Gen2::ActionPropelled(getProperty().setUnionType("ActionPropelled"));
        }
        inline std::optional<Ent::Gen2::ActionPushed> ResponsiblePointer_ActorState_::ActionPushed()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionPushed") != 0?
                    std::optional<Ent::Gen2::ActionPushed>{}:
                    std::optional<Ent::Gen2::ActionPushed>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionPushed ResponsiblePointer_ActorState_::setActionPushed()
        {
            return Ent::Gen2::ActionPushed(getProperty().setUnionType("ActionPushed"));
        }
        inline std::optional<Ent::Gen2::ActionQuadStandUpState> ResponsiblePointer_ActorState_::ActionQuadStandUpState()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionQuadStandUpState") != 0?
                    std::optional<Ent::Gen2::ActionQuadStandUpState>{}:
                    std::optional<Ent::Gen2::ActionQuadStandUpState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionQuadStandUpState ResponsiblePointer_ActorState_::setActionQuadStandUpState()
        {
            return Ent::Gen2::ActionQuadStandUpState(getProperty().setUnionType("ActionQuadStandUpState"));
        }
        inline std::optional<Ent::Gen2::ActionQuadStandUpStateIn> ResponsiblePointer_ActorState_::ActionQuadStandUpStateIn()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionQuadStandUpStateIn") != 0?
                    std::optional<Ent::Gen2::ActionQuadStandUpStateIn>{}:
                    std::optional<Ent::Gen2::ActionQuadStandUpStateIn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionQuadStandUpStateIn ResponsiblePointer_ActorState_::setActionQuadStandUpStateIn()
        {
            return Ent::Gen2::ActionQuadStandUpStateIn(getProperty().setUnionType("ActionQuadStandUpStateIn"));
        }
        inline std::optional<Ent::Gen2::ActionQuadStandUpStateOut> ResponsiblePointer_ActorState_::ActionQuadStandUpStateOut()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionQuadStandUpStateOut") != 0?
                    std::optional<Ent::Gen2::ActionQuadStandUpStateOut>{}:
                    std::optional<Ent::Gen2::ActionQuadStandUpStateOut>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionQuadStandUpStateOut ResponsiblePointer_ActorState_::setActionQuadStandUpStateOut()
        {
            return Ent::Gen2::ActionQuadStandUpStateOut(getProperty().setUnionType("ActionQuadStandUpStateOut"));
        }
        inline std::optional<Ent::Gen2::ActionRagdoll> ResponsiblePointer_ActorState_::ActionRagdoll()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionRagdoll") != 0?
                    std::optional<Ent::Gen2::ActionRagdoll>{}:
                    std::optional<Ent::Gen2::ActionRagdoll>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionRagdoll ResponsiblePointer_ActorState_::setActionRagdoll()
        {
            return Ent::Gen2::ActionRagdoll(getProperty().setUnionType("ActionRagdoll"));
        }
        inline std::optional<Ent::Gen2::ActionReviveMaskEffect> ResponsiblePointer_ActorState_::ActionReviveMaskEffect()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionReviveMaskEffect") != 0?
                    std::optional<Ent::Gen2::ActionReviveMaskEffect>{}:
                    std::optional<Ent::Gen2::ActionReviveMaskEffect>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionReviveMaskEffect ResponsiblePointer_ActorState_::setActionReviveMaskEffect()
        {
            return Ent::Gen2::ActionReviveMaskEffect(getProperty().setUnionType("ActionReviveMaskEffect"));
        }
        inline std::optional<Ent::Gen2::ActionRiderStance> ResponsiblePointer_ActorState_::ActionRiderStance()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionRiderStance") != 0?
                    std::optional<Ent::Gen2::ActionRiderStance>{}:
                    std::optional<Ent::Gen2::ActionRiderStance>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionRiderStance ResponsiblePointer_ActorState_::setActionRiderStance()
        {
            return Ent::Gen2::ActionRiderStance(getProperty().setUnionType("ActionRiderStance"));
        }
        inline std::optional<Ent::Gen2::ActionRise> ResponsiblePointer_ActorState_::ActionRise()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionRise") != 0?
                    std::optional<Ent::Gen2::ActionRise>{}:
                    std::optional<Ent::Gen2::ActionRise>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionRise ResponsiblePointer_ActorState_::setActionRise()
        {
            return Ent::Gen2::ActionRise(getProperty().setUnionType("ActionRise"));
        }
        inline std::optional<Ent::Gen2::ActionScaleRider> ResponsiblePointer_ActorState_::ActionScaleRider()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionScaleRider") != 0?
                    std::optional<Ent::Gen2::ActionScaleRider>{}:
                    std::optional<Ent::Gen2::ActionScaleRider>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionScaleRider ResponsiblePointer_ActorState_::setActionScaleRider()
        {
            return Ent::Gen2::ActionScaleRider(getProperty().setUnionType("ActionScaleRider"));
        }
        inline std::optional<Ent::Gen2::ActionShakeOff> ResponsiblePointer_ActorState_::ActionShakeOff()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionShakeOff") != 0?
                    std::optional<Ent::Gen2::ActionShakeOff>{}:
                    std::optional<Ent::Gen2::ActionShakeOff>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionShakeOff ResponsiblePointer_ActorState_::setActionShakeOff()
        {
            return Ent::Gen2::ActionShakeOff(getProperty().setUnionType("ActionShakeOff"));
        }
        inline std::optional<Ent::Gen2::ActionShamanVision> ResponsiblePointer_ActorState_::ActionShamanVision()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionShamanVision") != 0?
                    std::optional<Ent::Gen2::ActionShamanVision>{}:
                    std::optional<Ent::Gen2::ActionShamanVision>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionShamanVision ResponsiblePointer_ActorState_::setActionShamanVision()
        {
            return Ent::Gen2::ActionShamanVision(getProperty().setUnionType("ActionShamanVision"));
        }
        inline std::optional<Ent::Gen2::ActionShootBeam> ResponsiblePointer_ActorState_::ActionShootBeam()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionShootBeam") != 0?
                    std::optional<Ent::Gen2::ActionShootBeam>{}:
                    std::optional<Ent::Gen2::ActionShootBeam>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionShootBeam ResponsiblePointer_ActorState_::setActionShootBeam()
        {
            return Ent::Gen2::ActionShootBeam(getProperty().setUnionType("ActionShootBeam"));
        }
        inline std::optional<Ent::Gen2::ActionSlide> ResponsiblePointer_ActorState_::ActionSlide()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionSlide") != 0?
                    std::optional<Ent::Gen2::ActionSlide>{}:
                    std::optional<Ent::Gen2::ActionSlide>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionSlide ResponsiblePointer_ActorState_::setActionSlide()
        {
            return Ent::Gen2::ActionSlide(getProperty().setUnionType("ActionSlide"));
        }
        inline std::optional<Ent::Gen2::ActionStartRun> ResponsiblePointer_ActorState_::ActionStartRun()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionStartRun") != 0?
                    std::optional<Ent::Gen2::ActionStartRun>{}:
                    std::optional<Ent::Gen2::ActionStartRun>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionStartRun ResponsiblePointer_ActorState_::setActionStartRun()
        {
            return Ent::Gen2::ActionStartRun(getProperty().setUnionType("ActionStartRun"));
        }
        inline std::optional<Ent::Gen2::ActionStop> ResponsiblePointer_ActorState_::ActionStop()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionStop") != 0?
                    std::optional<Ent::Gen2::ActionStop>{}:
                    std::optional<Ent::Gen2::ActionStop>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionStop ResponsiblePointer_ActorState_::setActionStop()
        {
            return Ent::Gen2::ActionStop(getProperty().setUnionType("ActionStop"));
        }
        inline std::optional<Ent::Gen2::ActionStrafe> ResponsiblePointer_ActorState_::ActionStrafe()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionStrafe") != 0?
                    std::optional<Ent::Gen2::ActionStrafe>{}:
                    std::optional<Ent::Gen2::ActionStrafe>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionStrafe ResponsiblePointer_ActorState_::setActionStrafe()
        {
            return Ent::Gen2::ActionStrafe(getProperty().setUnionType("ActionStrafe"));
        }
        inline std::optional<Ent::Gen2::ActionStrafeTurn> ResponsiblePointer_ActorState_::ActionStrafeTurn()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionStrafeTurn") != 0?
                    std::optional<Ent::Gen2::ActionStrafeTurn>{}:
                    std::optional<Ent::Gen2::ActionStrafeTurn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionStrafeTurn ResponsiblePointer_ActorState_::setActionStrafeTurn()
        {
            return Ent::Gen2::ActionStrafeTurn(getProperty().setUnionType("ActionStrafeTurn"));
        }
        inline std::optional<Ent::Gen2::ActionTakeOff> ResponsiblePointer_ActorState_::ActionTakeOff()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionTakeOff") != 0?
                    std::optional<Ent::Gen2::ActionTakeOff>{}:
                    std::optional<Ent::Gen2::ActionTakeOff>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionTakeOff ResponsiblePointer_ActorState_::setActionTakeOff()
        {
            return Ent::Gen2::ActionTakeOff(getProperty().setUnionType("ActionTakeOff"));
        }
        inline std::optional<Ent::Gen2::ActionTalk> ResponsiblePointer_ActorState_::ActionTalk()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionTalk") != 0?
                    std::optional<Ent::Gen2::ActionTalk>{}:
                    std::optional<Ent::Gen2::ActionTalk>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionTalk ResponsiblePointer_ActorState_::setActionTalk()
        {
            return Ent::Gen2::ActionTalk(getProperty().setUnionType("ActionTalk"));
        }
        inline std::optional<Ent::Gen2::ActionTopView> ResponsiblePointer_ActorState_::ActionTopView()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionTopView") != 0?
                    std::optional<Ent::Gen2::ActionTopView>{}:
                    std::optional<Ent::Gen2::ActionTopView>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionTopView ResponsiblePointer_ActorState_::setActionTopView()
        {
            return Ent::Gen2::ActionTopView(getProperty().setUnionType("ActionTopView"));
        }
        inline std::optional<Ent::Gen2::ActionTriggerCrouch> ResponsiblePointer_ActorState_::ActionTriggerCrouch()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionTriggerCrouch") != 0?
                    std::optional<Ent::Gen2::ActionTriggerCrouch>{}:
                    std::optional<Ent::Gen2::ActionTriggerCrouch>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionTriggerCrouch ResponsiblePointer_ActorState_::setActionTriggerCrouch()
        {
            return Ent::Gen2::ActionTriggerCrouch(getProperty().setUnionType("ActionTriggerCrouch"));
        }
        inline std::optional<Ent::Gen2::ActionTriggerShamanVisionExit> ResponsiblePointer_ActorState_::ActionTriggerShamanVisionExit()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionTriggerShamanVisionExit") != 0?
                    std::optional<Ent::Gen2::ActionTriggerShamanVisionExit>{}:
                    std::optional<Ent::Gen2::ActionTriggerShamanVisionExit>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionTriggerShamanVisionExit ResponsiblePointer_ActorState_::setActionTriggerShamanVisionExit()
        {
            return Ent::Gen2::ActionTriggerShamanVisionExit(getProperty().setUnionType("ActionTriggerShamanVisionExit"));
        }
        inline std::optional<Ent::Gen2::ActionTriggerStandUp> ResponsiblePointer_ActorState_::ActionTriggerStandUp()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionTriggerStandUp") != 0?
                    std::optional<Ent::Gen2::ActionTriggerStandUp>{}:
                    std::optional<Ent::Gen2::ActionTriggerStandUp>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionTriggerStandUp ResponsiblePointer_ActorState_::setActionTriggerStandUp()
        {
            return Ent::Gen2::ActionTriggerStandUp(getProperty().setUnionType("ActionTriggerStandUp"));
        }
        inline std::optional<Ent::Gen2::ActionTurn> ResponsiblePointer_ActorState_::ActionTurn()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionTurn") != 0?
                    std::optional<Ent::Gen2::ActionTurn>{}:
                    std::optional<Ent::Gen2::ActionTurn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionTurn ResponsiblePointer_ActorState_::setActionTurn()
        {
            return Ent::Gen2::ActionTurn(getProperty().setUnionType("ActionTurn"));
        }
        inline std::optional<Ent::Gen2::ActionUnmount> ResponsiblePointer_ActorState_::ActionUnmount()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionUnmount") != 0?
                    std::optional<Ent::Gen2::ActionUnmount>{}:
                    std::optional<Ent::Gen2::ActionUnmount>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionUnmount ResponsiblePointer_ActorState_::setActionUnmount()
        {
            return Ent::Gen2::ActionUnmount(getProperty().setUnionType("ActionUnmount"));
        }
        inline std::optional<Ent::Gen2::ActionWait> ResponsiblePointer_ActorState_::ActionWait()
        {
            return strcmp(
                getProperty().getUnionType(), "ActionWait") != 0?
                    std::optional<Ent::Gen2::ActionWait>{}:
                    std::optional<Ent::Gen2::ActionWait>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActionWait ResponsiblePointer_ActorState_::setActionWait()
        {
            return Ent::Gen2::ActionWait(getProperty().setUnionType("ActionWait"));
        }
        inline std::optional<Ent::Gen2::ActorStateAimCharge> ResponsiblePointer_ActorState_::ActorStateAimCharge()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateAimCharge") != 0?
                    std::optional<Ent::Gen2::ActorStateAimCharge>{}:
                    std::optional<Ent::Gen2::ActorStateAimCharge>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateAimCharge ResponsiblePointer_ActorState_::setActorStateAimCharge()
        {
            return Ent::Gen2::ActorStateAimCharge(getProperty().setUnionType("ActorStateAimCharge"));
        }
        inline std::optional<Ent::Gen2::ActorStateAlive> ResponsiblePointer_ActorState_::ActorStateAlive()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateAlive") != 0?
                    std::optional<Ent::Gen2::ActorStateAlive>{}:
                    std::optional<Ent::Gen2::ActorStateAlive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateAlive ResponsiblePointer_ActorState_::setActorStateAlive()
        {
            return Ent::Gen2::ActorStateAlive(getProperty().setUnionType("ActorStateAlive"));
        }
        inline std::optional<Ent::Gen2::ActorStateAnsweringCall> ResponsiblePointer_ActorState_::ActorStateAnsweringCall()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateAnsweringCall") != 0?
                    std::optional<Ent::Gen2::ActorStateAnsweringCall>{}:
                    std::optional<Ent::Gen2::ActorStateAnsweringCall>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateAnsweringCall ResponsiblePointer_ActorState_::setActorStateAnsweringCall()
        {
            return Ent::Gen2::ActorStateAnsweringCall(getProperty().setUnionType("ActorStateAnsweringCall"));
        }
        inline std::optional<Ent::Gen2::ActorStateApplyHit> ResponsiblePointer_ActorState_::ActorStateApplyHit()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateApplyHit") != 0?
                    std::optional<Ent::Gen2::ActorStateApplyHit>{}:
                    std::optional<Ent::Gen2::ActorStateApplyHit>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateApplyHit ResponsiblePointer_ActorState_::setActorStateApplyHit()
        {
            return Ent::Gen2::ActorStateApplyHit(getProperty().setUnionType("ActorStateApplyHit"));
        }
        inline std::optional<Ent::Gen2::ActorStateAttitudeAggressive> ResponsiblePointer_ActorState_::ActorStateAttitudeAggressive()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateAttitudeAggressive") != 0?
                    std::optional<Ent::Gen2::ActorStateAttitudeAggressive>{}:
                    std::optional<Ent::Gen2::ActorStateAttitudeAggressive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateAttitudeAggressive ResponsiblePointer_ActorState_::setActorStateAttitudeAggressive()
        {
            return Ent::Gen2::ActorStateAttitudeAggressive(getProperty().setUnionType("ActorStateAttitudeAggressive"));
        }
        inline std::optional<Ent::Gen2::ActorStateBehaviorState> ResponsiblePointer_ActorState_::ActorStateBehaviorState()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBehaviorState") != 0?
                    std::optional<Ent::Gen2::ActorStateBehaviorState>{}:
                    std::optional<Ent::Gen2::ActorStateBehaviorState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBehaviorState ResponsiblePointer_ActorState_::setActorStateBehaviorState()
        {
            return Ent::Gen2::ActorStateBehaviorState(getProperty().setUnionType("ActorStateBehaviorState"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingImmersed> ResponsiblePointer_ActorState_::ActorStateBeingImmersed()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingImmersed") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingImmersed>{}:
                    std::optional<Ent::Gen2::ActorStateBeingImmersed>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingImmersed ResponsiblePointer_ActorState_::setActorStateBeingImmersed()
        {
            return Ent::Gen2::ActorStateBeingImmersed(getProperty().setUnionType("ActorStateBeingImmersed"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingImmersedFromInAir> ResponsiblePointer_ActorState_::ActorStateBeingImmersedFromInAir()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingImmersedFromInAir") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingImmersedFromInAir>{}:
                    std::optional<Ent::Gen2::ActorStateBeingImmersedFromInAir>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingImmersedFromInAir ResponsiblePointer_ActorState_::setActorStateBeingImmersedFromInAir()
        {
            return Ent::Gen2::ActorStateBeingImmersedFromInAir(getProperty().setUnionType("ActorStateBeingImmersedFromInAir"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingImmersedFromOnGround> ResponsiblePointer_ActorState_::ActorStateBeingImmersedFromOnGround()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingImmersedFromOnGround") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingImmersedFromOnGround>{}:
                    std::optional<Ent::Gen2::ActorStateBeingImmersedFromOnGround>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingImmersedFromOnGround ResponsiblePointer_ActorState_::setActorStateBeingImmersedFromOnGround()
        {
            return Ent::Gen2::ActorStateBeingImmersedFromOnGround(getProperty().setUnionType("ActorStateBeingImmersedFromOnGround"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingInAir> ResponsiblePointer_ActorState_::ActorStateBeingInAir()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingInAir") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingInAir>{}:
                    std::optional<Ent::Gen2::ActorStateBeingInAir>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingInAir ResponsiblePointer_ActorState_::setActorStateBeingInAir()
        {
            return Ent::Gen2::ActorStateBeingInAir(getProperty().setUnionType("ActorStateBeingInAir"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingOnGround> ResponsiblePointer_ActorState_::ActorStateBeingOnGround()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingOnGround") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingOnGround>{}:
                    std::optional<Ent::Gen2::ActorStateBeingOnGround>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingOnGround ResponsiblePointer_ActorState_::setActorStateBeingOnGround()
        {
            return Ent::Gen2::ActorStateBeingOnGround(getProperty().setUnionType("ActorStateBeingOnGround"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingOnGroundFromImmersed> ResponsiblePointer_ActorState_::ActorStateBeingOnGroundFromImmersed()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingOnGroundFromImmersed") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingOnGroundFromImmersed>{}:
                    std::optional<Ent::Gen2::ActorStateBeingOnGroundFromImmersed>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingOnGroundFromImmersed ResponsiblePointer_ActorState_::setActorStateBeingOnGroundFromImmersed()
        {
            return Ent::Gen2::ActorStateBeingOnGroundFromImmersed(getProperty().setUnionType("ActorStateBeingOnGroundFromImmersed"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingOnMount> ResponsiblePointer_ActorState_::ActorStateBeingOnMount()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingOnMount") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingOnMount>{}:
                    std::optional<Ent::Gen2::ActorStateBeingOnMount>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingOnMount ResponsiblePointer_ActorState_::setActorStateBeingOnMount()
        {
            return Ent::Gen2::ActorStateBeingOnMount(getProperty().setUnionType("ActorStateBeingOnMount"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingOnPossessedGPE> ResponsiblePointer_ActorState_::ActorStateBeingOnPossessedGPE()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingOnPossessedGPE") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingOnPossessedGPE>{}:
                    std::optional<Ent::Gen2::ActorStateBeingOnPossessedGPE>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingOnPossessedGPE ResponsiblePointer_ActorState_::setActorStateBeingOnPossessedGPE()
        {
            return Ent::Gen2::ActorStateBeingOnPossessedGPE(getProperty().setUnionType("ActorStateBeingOnPossessedGPE"));
        }
        inline std::optional<Ent::Gen2::ActorStateBeingRided> ResponsiblePointer_ActorState_::ActorStateBeingRided()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBeingRided") != 0?
                    std::optional<Ent::Gen2::ActorStateBeingRided>{}:
                    std::optional<Ent::Gen2::ActorStateBeingRided>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBeingRided ResponsiblePointer_ActorState_::setActorStateBeingRided()
        {
            return Ent::Gen2::ActorStateBeingRided(getProperty().setUnionType("ActorStateBeingRided"));
        }
        inline std::optional<Ent::Gen2::ActorStateBendingConstraint> ResponsiblePointer_ActorState_::ActorStateBendingConstraint()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBendingConstraint") != 0?
                    std::optional<Ent::Gen2::ActorStateBendingConstraint>{}:
                    std::optional<Ent::Gen2::ActorStateBendingConstraint>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBendingConstraint ResponsiblePointer_ActorState_::setActorStateBendingConstraint()
        {
            return Ent::Gen2::ActorStateBendingConstraint(getProperty().setUnionType("ActorStateBendingConstraint"));
        }
        inline std::optional<Ent::Gen2::ActorStateBendingTree> ResponsiblePointer_ActorState_::ActorStateBendingTree()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBendingTree") != 0?
                    std::optional<Ent::Gen2::ActorStateBendingTree>{}:
                    std::optional<Ent::Gen2::ActorStateBendingTree>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBendingTree ResponsiblePointer_ActorState_::setActorStateBendingTree()
        {
            return Ent::Gen2::ActorStateBendingTree(getProperty().setUnionType("ActorStateBendingTree"));
        }
        inline std::optional<Ent::Gen2::ActorStateBiteEntityLiving> ResponsiblePointer_ActorState_::ActorStateBiteEntityLiving()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBiteEntityLiving") != 0?
                    std::optional<Ent::Gen2::ActorStateBiteEntityLiving>{}:
                    std::optional<Ent::Gen2::ActorStateBiteEntityLiving>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBiteEntityLiving ResponsiblePointer_ActorState_::setActorStateBiteEntityLiving()
        {
            return Ent::Gen2::ActorStateBiteEntityLiving(getProperty().setUnionType("ActorStateBiteEntityLiving"));
        }
        inline std::optional<Ent::Gen2::ActorStateBiteJumpOut> ResponsiblePointer_ActorState_::ActorStateBiteJumpOut()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBiteJumpOut") != 0?
                    std::optional<Ent::Gen2::ActorStateBiteJumpOut>{}:
                    std::optional<Ent::Gen2::ActorStateBiteJumpOut>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBiteJumpOut ResponsiblePointer_ActorState_::setActorStateBiteJumpOut()
        {
            return Ent::Gen2::ActorStateBiteJumpOut(getProperty().setUnionType("ActorStateBiteJumpOut"));
        }
        inline std::optional<Ent::Gen2::ActorStateBittenRegenerated> ResponsiblePointer_ActorState_::ActorStateBittenRegenerated()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBittenRegenerated") != 0?
                    std::optional<Ent::Gen2::ActorStateBittenRegenerated>{}:
                    std::optional<Ent::Gen2::ActorStateBittenRegenerated>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBittenRegenerated ResponsiblePointer_ActorState_::setActorStateBittenRegenerated()
        {
            return Ent::Gen2::ActorStateBittenRegenerated(getProperty().setUnionType("ActorStateBittenRegenerated"));
        }
        inline std::optional<Ent::Gen2::ActorStateBittenShaked> ResponsiblePointer_ActorState_::ActorStateBittenShaked()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBittenShaked") != 0?
                    std::optional<Ent::Gen2::ActorStateBittenShaked>{}:
                    std::optional<Ent::Gen2::ActorStateBittenShaked>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBittenShaked ResponsiblePointer_ActorState_::setActorStateBittenShaked()
        {
            return Ent::Gen2::ActorStateBittenShaked(getProperty().setUnionType("ActorStateBittenShaked"));
        }
        inline std::optional<Ent::Gen2::ActorStateBuried> ResponsiblePointer_ActorState_::ActorStateBuried()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateBuried") != 0?
                    std::optional<Ent::Gen2::ActorStateBuried>{}:
                    std::optional<Ent::Gen2::ActorStateBuried>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateBuried ResponsiblePointer_ActorState_::setActorStateBuried()
        {
            return Ent::Gen2::ActorStateBuried(getProperty().setUnionType("ActorStateBuried"));
        }
        inline std::optional<Ent::Gen2::ActorStateCallingFollower> ResponsiblePointer_ActorState_::ActorStateCallingFollower()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateCallingFollower") != 0?
                    std::optional<Ent::Gen2::ActorStateCallingFollower>{}:
                    std::optional<Ent::Gen2::ActorStateCallingFollower>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateCallingFollower ResponsiblePointer_ActorState_::setActorStateCallingFollower()
        {
            return Ent::Gen2::ActorStateCallingFollower(getProperty().setUnionType("ActorStateCallingFollower"));
        }
        inline std::optional<Ent::Gen2::ActorStateCatapulted> ResponsiblePointer_ActorState_::ActorStateCatapulted()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateCatapulted") != 0?
                    std::optional<Ent::Gen2::ActorStateCatapulted>{}:
                    std::optional<Ent::Gen2::ActorStateCatapulted>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateCatapulted ResponsiblePointer_ActorState_::setActorStateCatapulted()
        {
            return Ent::Gen2::ActorStateCatapulted(getProperty().setUnionType("ActorStateCatapulted"));
        }
        inline std::optional<Ent::Gen2::ActorStateCatapultedLand> ResponsiblePointer_ActorState_::ActorStateCatapultedLand()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateCatapultedLand") != 0?
                    std::optional<Ent::Gen2::ActorStateCatapultedLand>{}:
                    std::optional<Ent::Gen2::ActorStateCatapultedLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateCatapultedLand ResponsiblePointer_ActorState_::setActorStateCatapultedLand()
        {
            return Ent::Gen2::ActorStateCatapultedLand(getProperty().setUnionType("ActorStateCatapultedLand"));
        }
        inline std::optional<Ent::Gen2::ActorStateChangeEnergySide> ResponsiblePointer_ActorState_::ActorStateChangeEnergySide()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateChangeEnergySide") != 0?
                    std::optional<Ent::Gen2::ActorStateChangeEnergySide>{}:
                    std::optional<Ent::Gen2::ActorStateChangeEnergySide>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateChangeEnergySide ResponsiblePointer_ActorState_::setActorStateChangeEnergySide()
        {
            return Ent::Gen2::ActorStateChangeEnergySide(getProperty().setUnionType("ActorStateChangeEnergySide"));
        }
        inline std::optional<Ent::Gen2::ActorStateChargeSpendLife> ResponsiblePointer_ActorState_::ActorStateChargeSpendLife()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateChargeSpendLife") != 0?
                    std::optional<Ent::Gen2::ActorStateChargeSpendLife>{}:
                    std::optional<Ent::Gen2::ActorStateChargeSpendLife>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateChargeSpendLife ResponsiblePointer_ActorState_::setActorStateChargeSpendLife()
        {
            return Ent::Gen2::ActorStateChargeSpendLife(getProperty().setUnionType("ActorStateChargeSpendLife"));
        }
        inline std::optional<Ent::Gen2::ActorStateConvertWithFlow> ResponsiblePointer_ActorState_::ActorStateConvertWithFlow()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateConvertWithFlow") != 0?
                    std::optional<Ent::Gen2::ActorStateConvertWithFlow>{}:
                    std::optional<Ent::Gen2::ActorStateConvertWithFlow>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateConvertWithFlow ResponsiblePointer_ActorState_::setActorStateConvertWithFlow()
        {
            return Ent::Gen2::ActorStateConvertWithFlow(getProperty().setUnionType("ActorStateConvertWithFlow"));
        }
        inline std::optional<Ent::Gen2::ActorStateCreature> ResponsiblePointer_ActorState_::ActorStateCreature()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateCreature") != 0?
                    std::optional<Ent::Gen2::ActorStateCreature>{}:
                    std::optional<Ent::Gen2::ActorStateCreature>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateCreature ResponsiblePointer_ActorState_::setActorStateCreature()
        {
            return Ent::Gen2::ActorStateCreature(getProperty().setUnionType("ActorStateCreature"));
        }
        inline std::optional<Ent::Gen2::ActorStateDead> ResponsiblePointer_ActorState_::ActorStateDead()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateDead") != 0?
                    std::optional<Ent::Gen2::ActorStateDead>{}:
                    std::optional<Ent::Gen2::ActorStateDead>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateDead ResponsiblePointer_ActorState_::setActorStateDead()
        {
            return Ent::Gen2::ActorStateDead(getProperty().setUnionType("ActorStateDead"));
        }
        inline std::optional<Ent::Gen2::ActorStateDisabled> ResponsiblePointer_ActorState_::ActorStateDisabled()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateDisabled") != 0?
                    std::optional<Ent::Gen2::ActorStateDisabled>{}:
                    std::optional<Ent::Gen2::ActorStateDisabled>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateDisabled ResponsiblePointer_ActorState_::setActorStateDisabled()
        {
            return Ent::Gen2::ActorStateDisabled(getProperty().setUnionType("ActorStateDisabled"));
        }
        inline std::optional<Ent::Gen2::ActorStateDisabledIn> ResponsiblePointer_ActorState_::ActorStateDisabledIn()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateDisabledIn") != 0?
                    std::optional<Ent::Gen2::ActorStateDisabledIn>{}:
                    std::optional<Ent::Gen2::ActorStateDisabledIn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateDisabledIn ResponsiblePointer_ActorState_::setActorStateDisabledIn()
        {
            return Ent::Gen2::ActorStateDisabledIn(getProperty().setUnionType("ActorStateDisabledIn"));
        }
        inline std::optional<Ent::Gen2::ActorStateDisabledOut> ResponsiblePointer_ActorState_::ActorStateDisabledOut()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateDisabledOut") != 0?
                    std::optional<Ent::Gen2::ActorStateDisabledOut>{}:
                    std::optional<Ent::Gen2::ActorStateDisabledOut>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateDisabledOut ResponsiblePointer_ActorState_::setActorStateDisabledOut()
        {
            return Ent::Gen2::ActorStateDisabledOut(getProperty().setUnionType("ActorStateDisabledOut"));
        }
        inline std::optional<Ent::Gen2::ActorStateDodge3D> ResponsiblePointer_ActorState_::ActorStateDodge3D()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateDodge3D") != 0?
                    std::optional<Ent::Gen2::ActorStateDodge3D>{}:
                    std::optional<Ent::Gen2::ActorStateDodge3D>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateDodge3D ResponsiblePointer_ActorState_::setActorStateDodge3D()
        {
            return Ent::Gen2::ActorStateDodge3D(getProperty().setUnionType("ActorStateDodge3D"));
        }
        inline std::optional<Ent::Gen2::ActorStateDucking> ResponsiblePointer_ActorState_::ActorStateDucking()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateDucking") != 0?
                    std::optional<Ent::Gen2::ActorStateDucking>{}:
                    std::optional<Ent::Gen2::ActorStateDucking>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateDucking ResponsiblePointer_ActorState_::setActorStateDucking()
        {
            return Ent::Gen2::ActorStateDucking(getProperty().setUnionType("ActorStateDucking"));
        }
        inline std::optional<Ent::Gen2::ActorStateEnergyShooting> ResponsiblePointer_ActorState_::ActorStateEnergyShooting()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateEnergyShooting") != 0?
                    std::optional<Ent::Gen2::ActorStateEnergyShooting>{}:
                    std::optional<Ent::Gen2::ActorStateEnergyShooting>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateEnergyShooting ResponsiblePointer_ActorState_::setActorStateEnergyShooting()
        {
            return Ent::Gen2::ActorStateEnergyShooting(getProperty().setUnionType("ActorStateEnergyShooting"));
        }
        inline std::optional<Ent::Gen2::ActorStateExitingFly> ResponsiblePointer_ActorState_::ActorStateExitingFly()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateExitingFly") != 0?
                    std::optional<Ent::Gen2::ActorStateExitingFly>{}:
                    std::optional<Ent::Gen2::ActorStateExitingFly>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateExitingFly ResponsiblePointer_ActorState_::setActorStateExitingFly()
        {
            return Ent::Gen2::ActorStateExitingFly(getProperty().setUnionType("ActorStateExitingFly"));
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingAttackFlocking> ResponsiblePointer_ActorState_::ActorStateFlockingAttackFlocking()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateFlockingAttackFlocking") != 0?
                    std::optional<Ent::Gen2::ActorStateFlockingAttackFlocking>{}:
                    std::optional<Ent::Gen2::ActorStateFlockingAttackFlocking>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateFlockingAttackFlocking ResponsiblePointer_ActorState_::setActorStateFlockingAttackFlocking()
        {
            return Ent::Gen2::ActorStateFlockingAttackFlocking(getProperty().setUnionType("ActorStateFlockingAttackFlocking"));
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingChangingParams> ResponsiblePointer_ActorState_::ActorStateFlockingChangingParams()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateFlockingChangingParams") != 0?
                    std::optional<Ent::Gen2::ActorStateFlockingChangingParams>{}:
                    std::optional<Ent::Gen2::ActorStateFlockingChangingParams>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateFlockingChangingParams ResponsiblePointer_ActorState_::setActorStateFlockingChangingParams()
        {
            return Ent::Gen2::ActorStateFlockingChangingParams(getProperty().setUnionType("ActorStateFlockingChangingParams"));
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingIndividualSpawning> ResponsiblePointer_ActorState_::ActorStateFlockingIndividualSpawning()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateFlockingIndividualSpawning") != 0?
                    std::optional<Ent::Gen2::ActorStateFlockingIndividualSpawning>{}:
                    std::optional<Ent::Gen2::ActorStateFlockingIndividualSpawning>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateFlockingIndividualSpawning ResponsiblePointer_ActorState_::setActorStateFlockingIndividualSpawning()
        {
            return Ent::Gen2::ActorStateFlockingIndividualSpawning(getProperty().setUnionType("ActorStateFlockingIndividualSpawning"));
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingLiving> ResponsiblePointer_ActorState_::ActorStateFlockingLiving()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateFlockingLiving") != 0?
                    std::optional<Ent::Gen2::ActorStateFlockingLiving>{}:
                    std::optional<Ent::Gen2::ActorStateFlockingLiving>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateFlockingLiving ResponsiblePointer_ActorState_::setActorStateFlockingLiving()
        {
            return Ent::Gen2::ActorStateFlockingLiving(getProperty().setUnionType("ActorStateFlockingLiving"));
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingRigidbodyBeingActive> ResponsiblePointer_ActorState_::ActorStateFlockingRigidbodyBeingActive()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateFlockingRigidbodyBeingActive") != 0?
                    std::optional<Ent::Gen2::ActorStateFlockingRigidbodyBeingActive>{}:
                    std::optional<Ent::Gen2::ActorStateFlockingRigidbodyBeingActive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateFlockingRigidbodyBeingActive ResponsiblePointer_ActorState_::setActorStateFlockingRigidbodyBeingActive()
        {
            return Ent::Gen2::ActorStateFlockingRigidbodyBeingActive(getProperty().setUnionType("ActorStateFlockingRigidbodyBeingActive"));
        }
        inline std::optional<Ent::Gen2::ActorStateFluidSlowDown> ResponsiblePointer_ActorState_::ActorStateFluidSlowDown()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateFluidSlowDown") != 0?
                    std::optional<Ent::Gen2::ActorStateFluidSlowDown>{}:
                    std::optional<Ent::Gen2::ActorStateFluidSlowDown>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateFluidSlowDown ResponsiblePointer_ActorState_::setActorStateFluidSlowDown()
        {
            return Ent::Gen2::ActorStateFluidSlowDown(getProperty().setUnionType("ActorStateFluidSlowDown"));
        }
        inline std::optional<Ent::Gen2::ActorStateForceAgainstSlope> ResponsiblePointer_ActorState_::ActorStateForceAgainstSlope()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateForceAgainstSlope") != 0?
                    std::optional<Ent::Gen2::ActorStateForceAgainstSlope>{}:
                    std::optional<Ent::Gen2::ActorStateForceAgainstSlope>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateForceAgainstSlope ResponsiblePointer_ActorState_::setActorStateForceAgainstSlope()
        {
            return Ent::Gen2::ActorStateForceAgainstSlope(getProperty().setUnionType("ActorStateForceAgainstSlope"));
        }
        inline std::optional<Ent::Gen2::ActorStateHasNoBody> ResponsiblePointer_ActorState_::ActorStateHasNoBody()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateHasNoBody") != 0?
                    std::optional<Ent::Gen2::ActorStateHasNoBody>{}:
                    std::optional<Ent::Gen2::ActorStateHasNoBody>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateHasNoBody ResponsiblePointer_ActorState_::setActorStateHasNoBody()
        {
            return Ent::Gen2::ActorStateHasNoBody(getProperty().setUnionType("ActorStateHasNoBody"));
        }
        inline std::optional<Ent::Gen2::ActorStateHeld> ResponsiblePointer_ActorState_::ActorStateHeld()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateHeld") != 0?
                    std::optional<Ent::Gen2::ActorStateHeld>{}:
                    std::optional<Ent::Gen2::ActorStateHeld>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateHeld ResponsiblePointer_ActorState_::setActorStateHeld()
        {
            return Ent::Gen2::ActorStateHeld(getProperty().setUnionType("ActorStateHeld"));
        }
        inline std::optional<Ent::Gen2::ActorStateHitEnergyWall> ResponsiblePointer_ActorState_::ActorStateHitEnergyWall()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateHitEnergyWall") != 0?
                    std::optional<Ent::Gen2::ActorStateHitEnergyWall>{}:
                    std::optional<Ent::Gen2::ActorStateHitEnergyWall>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateHitEnergyWall ResponsiblePointer_ActorState_::setActorStateHitEnergyWall()
        {
            return Ent::Gen2::ActorStateHitEnergyWall(getProperty().setUnionType("ActorStateHitEnergyWall"));
        }
        inline std::optional<Ent::Gen2::ActorStateHoldingItem> ResponsiblePointer_ActorState_::ActorStateHoldingItem()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateHoldingItem") != 0?
                    std::optional<Ent::Gen2::ActorStateHoldingItem>{}:
                    std::optional<Ent::Gen2::ActorStateHoldingItem>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateHoldingItem ResponsiblePointer_ActorState_::setActorStateHoldingItem()
        {
            return Ent::Gen2::ActorStateHoldingItem(getProperty().setUnionType("ActorStateHoldingItem"));
        }
        inline std::optional<Ent::Gen2::ActorStateIKConstraint> ResponsiblePointer_ActorState_::ActorStateIKConstraint()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateIKConstraint") != 0?
                    std::optional<Ent::Gen2::ActorStateIKConstraint>{}:
                    std::optional<Ent::Gen2::ActorStateIKConstraint>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateIKConstraint ResponsiblePointer_ActorState_::setActorStateIKConstraint()
        {
            return Ent::Gen2::ActorStateIKConstraint(getProperty().setUnionType("ActorStateIKConstraint"));
        }
        inline std::optional<Ent::Gen2::ActorStateInvincible> ResponsiblePointer_ActorState_::ActorStateInvincible()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateInvincible") != 0?
                    std::optional<Ent::Gen2::ActorStateInvincible>{}:
                    std::optional<Ent::Gen2::ActorStateInvincible>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateInvincible ResponsiblePointer_ActorState_::setActorStateInvincible()
        {
            return Ent::Gen2::ActorStateInvincible(getProperty().setUnionType("ActorStateInvincible"));
        }
        inline std::optional<Ent::Gen2::ActorStateLeavingLava> ResponsiblePointer_ActorState_::ActorStateLeavingLava()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateLeavingLava") != 0?
                    std::optional<Ent::Gen2::ActorStateLeavingLava>{}:
                    std::optional<Ent::Gen2::ActorStateLeavingLava>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateLeavingLava ResponsiblePointer_ActorState_::setActorStateLeavingLava()
        {
            return Ent::Gen2::ActorStateLeavingLava(getProperty().setUnionType("ActorStateLeavingLava"));
        }
        inline std::optional<Ent::Gen2::ActorStateLosingOxygen> ResponsiblePointer_ActorState_::ActorStateLosingOxygen()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateLosingOxygen") != 0?
                    std::optional<Ent::Gen2::ActorStateLosingOxygen>{}:
                    std::optional<Ent::Gen2::ActorStateLosingOxygen>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateLosingOxygen ResponsiblePointer_ActorState_::setActorStateLosingOxygen()
        {
            return Ent::Gen2::ActorStateLosingOxygen(getProperty().setUnionType("ActorStateLosingOxygen"));
        }
        inline std::optional<Ent::Gen2::ActorStateMeetingLava> ResponsiblePointer_ActorState_::ActorStateMeetingLava()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMeetingLava") != 0?
                    std::optional<Ent::Gen2::ActorStateMeetingLava>{}:
                    std::optional<Ent::Gen2::ActorStateMeetingLava>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMeetingLava ResponsiblePointer_ActorState_::setActorStateMeetingLava()
        {
            return Ent::Gen2::ActorStateMeetingLava(getProperty().setUnionType("ActorStateMeetingLava"));
        }
        inline std::optional<Ent::Gen2::ActorStateMoveAlongBezier> ResponsiblePointer_ActorState_::ActorStateMoveAlongBezier()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMoveAlongBezier") != 0?
                    std::optional<Ent::Gen2::ActorStateMoveAlongBezier>{}:
                    std::optional<Ent::Gen2::ActorStateMoveAlongBezier>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMoveAlongBezier ResponsiblePointer_ActorState_::setActorStateMoveAlongBezier()
        {
            return Ent::Gen2::ActorStateMoveAlongBezier(getProperty().setUnionType("ActorStateMoveAlongBezier"));
        }
        inline std::optional<Ent::Gen2::ActorStateMovingClamber> ResponsiblePointer_ActorState_::ActorStateMovingClamber()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMovingClamber") != 0?
                    std::optional<Ent::Gen2::ActorStateMovingClamber>{}:
                    std::optional<Ent::Gen2::ActorStateMovingClamber>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMovingClamber ResponsiblePointer_ActorState_::setActorStateMovingClamber()
        {
            return Ent::Gen2::ActorStateMovingClamber(getProperty().setUnionType("ActorStateMovingClamber"));
        }
        inline std::optional<Ent::Gen2::ActorStateMovingDive> ResponsiblePointer_ActorState_::ActorStateMovingDive()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMovingDive") != 0?
                    std::optional<Ent::Gen2::ActorStateMovingDive>{}:
                    std::optional<Ent::Gen2::ActorStateMovingDive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMovingDive ResponsiblePointer_ActorState_::setActorStateMovingDive()
        {
            return Ent::Gen2::ActorStateMovingDive(getProperty().setUnionType("ActorStateMovingDive"));
        }
        inline std::optional<Ent::Gen2::ActorStateMovingFall> ResponsiblePointer_ActorState_::ActorStateMovingFall()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMovingFall") != 0?
                    std::optional<Ent::Gen2::ActorStateMovingFall>{}:
                    std::optional<Ent::Gen2::ActorStateMovingFall>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMovingFall ResponsiblePointer_ActorState_::setActorStateMovingFall()
        {
            return Ent::Gen2::ActorStateMovingFall(getProperty().setUnionType("ActorStateMovingFall"));
        }
        inline std::optional<Ent::Gen2::ActorStateMovingFly> ResponsiblePointer_ActorState_::ActorStateMovingFly()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMovingFly") != 0?
                    std::optional<Ent::Gen2::ActorStateMovingFly>{}:
                    std::optional<Ent::Gen2::ActorStateMovingFly>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMovingFly ResponsiblePointer_ActorState_::setActorStateMovingFly()
        {
            return Ent::Gen2::ActorStateMovingFly(getProperty().setUnionType("ActorStateMovingFly"));
        }
        inline std::optional<Ent::Gen2::ActorStateMovingProne> ResponsiblePointer_ActorState_::ActorStateMovingProne()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMovingProne") != 0?
                    std::optional<Ent::Gen2::ActorStateMovingProne>{}:
                    std::optional<Ent::Gen2::ActorStateMovingProne>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMovingProne ResponsiblePointer_ActorState_::setActorStateMovingProne()
        {
            return Ent::Gen2::ActorStateMovingProne(getProperty().setUnionType("ActorStateMovingProne"));
        }
        inline std::optional<Ent::Gen2::ActorStateMovingRide> ResponsiblePointer_ActorState_::ActorStateMovingRide()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMovingRide") != 0?
                    std::optional<Ent::Gen2::ActorStateMovingRide>{}:
                    std::optional<Ent::Gen2::ActorStateMovingRide>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMovingRide ResponsiblePointer_ActorState_::setActorStateMovingRide()
        {
            return Ent::Gen2::ActorStateMovingRide(getProperty().setUnionType("ActorStateMovingRide"));
        }
        inline std::optional<Ent::Gen2::ActorStateMovingStandUp> ResponsiblePointer_ActorState_::ActorStateMovingStandUp()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMovingStandUp") != 0?
                    std::optional<Ent::Gen2::ActorStateMovingStandUp>{}:
                    std::optional<Ent::Gen2::ActorStateMovingStandUp>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMovingStandUp ResponsiblePointer_ActorState_::setActorStateMovingStandUp()
        {
            return Ent::Gen2::ActorStateMovingStandUp(getProperty().setUnionType("ActorStateMovingStandUp"));
        }
        inline std::optional<Ent::Gen2::ActorStateMovingSwim> ResponsiblePointer_ActorState_::ActorStateMovingSwim()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateMovingSwim") != 0?
                    std::optional<Ent::Gen2::ActorStateMovingSwim>{}:
                    std::optional<Ent::Gen2::ActorStateMovingSwim>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateMovingSwim ResponsiblePointer_ActorState_::setActorStateMovingSwim()
        {
            return Ent::Gen2::ActorStateMovingSwim(getProperty().setUnionType("ActorStateMovingSwim"));
        }
        inline std::optional<Ent::Gen2::ActorStateNavigationMesh> ResponsiblePointer_ActorState_::ActorStateNavigationMesh()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateNavigationMesh") != 0?
                    std::optional<Ent::Gen2::ActorStateNavigationMesh>{}:
                    std::optional<Ent::Gen2::ActorStateNavigationMesh>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateNavigationMesh ResponsiblePointer_ActorState_::setActorStateNavigationMesh()
        {
            return Ent::Gen2::ActorStateNavigationMesh(getProperty().setUnionType("ActorStateNavigationMesh"));
        }
        inline std::optional<Ent::Gen2::ActorStatePossessFlocking> ResponsiblePointer_ActorState_::ActorStatePossessFlocking()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStatePossessFlocking") != 0?
                    std::optional<Ent::Gen2::ActorStatePossessFlocking>{}:
                    std::optional<Ent::Gen2::ActorStatePossessFlocking>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStatePossessFlocking ResponsiblePointer_ActorState_::setActorStatePossessFlocking()
        {
            return Ent::Gen2::ActorStatePossessFlocking(getProperty().setUnionType("ActorStatePossessFlocking"));
        }
        inline std::optional<Ent::Gen2::ActorStatePossessGPE> ResponsiblePointer_ActorState_::ActorStatePossessGPE()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStatePossessGPE") != 0?
                    std::optional<Ent::Gen2::ActorStatePossessGPE>{}:
                    std::optional<Ent::Gen2::ActorStatePossessGPE>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStatePossessGPE ResponsiblePointer_ActorState_::setActorStatePossessGPE()
        {
            return Ent::Gen2::ActorStatePossessGPE(getProperty().setUnionType("ActorStatePossessGPE"));
        }
        inline std::optional<Ent::Gen2::ActorStateReactingLava> ResponsiblePointer_ActorState_::ActorStateReactingLava()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateReactingLava") != 0?
                    std::optional<Ent::Gen2::ActorStateReactingLava>{}:
                    std::optional<Ent::Gen2::ActorStateReactingLava>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateReactingLava ResponsiblePointer_ActorState_::setActorStateReactingLava()
        {
            return Ent::Gen2::ActorStateReactingLava(getProperty().setUnionType("ActorStateReactingLava"));
        }
        inline std::optional<Ent::Gen2::ActorStateRecover> ResponsiblePointer_ActorState_::ActorStateRecover()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateRecover") != 0?
                    std::optional<Ent::Gen2::ActorStateRecover>{}:
                    std::optional<Ent::Gen2::ActorStateRecover>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateRecover ResponsiblePointer_ActorState_::setActorStateRecover()
        {
            return Ent::Gen2::ActorStateRecover(getProperty().setUnionType("ActorStateRecover"));
        }
        inline std::optional<Ent::Gen2::ActorStateRequestingHealing> ResponsiblePointer_ActorState_::ActorStateRequestingHealing()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateRequestingHealing") != 0?
                    std::optional<Ent::Gen2::ActorStateRequestingHealing>{}:
                    std::optional<Ent::Gen2::ActorStateRequestingHealing>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateRequestingHealing ResponsiblePointer_ActorState_::setActorStateRequestingHealing()
        {
            return Ent::Gen2::ActorStateRequestingHealing(getProperty().setUnionType("ActorStateRequestingHealing"));
        }
        inline std::optional<Ent::Gen2::ActorStateRequestingWaiting> ResponsiblePointer_ActorState_::ActorStateRequestingWaiting()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateRequestingWaiting") != 0?
                    std::optional<Ent::Gen2::ActorStateRequestingWaiting>{}:
                    std::optional<Ent::Gen2::ActorStateRequestingWaiting>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateRequestingWaiting ResponsiblePointer_ActorState_::setActorStateRequestingWaiting()
        {
            return Ent::Gen2::ActorStateRequestingWaiting(getProperty().setUnionType("ActorStateRequestingWaiting"));
        }
        inline std::optional<Ent::Gen2::ActorStateScreaming> ResponsiblePointer_ActorState_::ActorStateScreaming()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateScreaming") != 0?
                    std::optional<Ent::Gen2::ActorStateScreaming>{}:
                    std::optional<Ent::Gen2::ActorStateScreaming>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateScreaming ResponsiblePointer_ActorState_::setActorStateScreaming()
        {
            return Ent::Gen2::ActorStateScreaming(getProperty().setUnionType("ActorStateScreaming"));
        }
        inline std::optional<Ent::Gen2::ActorStateSendMission> ResponsiblePointer_ActorState_::ActorStateSendMission()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSendMission") != 0?
                    std::optional<Ent::Gen2::ActorStateSendMission>{}:
                    std::optional<Ent::Gen2::ActorStateSendMission>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSendMission ResponsiblePointer_ActorState_::setActorStateSendMission()
        {
            return Ent::Gen2::ActorStateSendMission(getProperty().setUnionType("ActorStateSendMission"));
        }
        inline std::optional<Ent::Gen2::ActorStateShamanItemLiving> ResponsiblePointer_ActorState_::ActorStateShamanItemLiving()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateShamanItemLiving") != 0?
                    std::optional<Ent::Gen2::ActorStateShamanItemLiving>{}:
                    std::optional<Ent::Gen2::ActorStateShamanItemLiving>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateShamanItemLiving ResponsiblePointer_ActorState_::setActorStateShamanItemLiving()
        {
            return Ent::Gen2::ActorStateShamanItemLiving(getProperty().setUnionType("ActorStateShamanItemLiving"));
        }
        inline std::optional<Ent::Gen2::ActorStateShamanItemPartState> ResponsiblePointer_ActorState_::ActorStateShamanItemPartState()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateShamanItemPartState") != 0?
                    std::optional<Ent::Gen2::ActorStateShamanItemPartState>{}:
                    std::optional<Ent::Gen2::ActorStateShamanItemPartState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateShamanItemPartState ResponsiblePointer_ActorState_::setActorStateShamanItemPartState()
        {
            return Ent::Gen2::ActorStateShamanItemPartState(getProperty().setUnionType("ActorStateShamanItemPartState"));
        }
        inline std::optional<Ent::Gen2::ActorStateShapeshift> ResponsiblePointer_ActorState_::ActorStateShapeshift()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateShapeshift") != 0?
                    std::optional<Ent::Gen2::ActorStateShapeshift>{}:
                    std::optional<Ent::Gen2::ActorStateShapeshift>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateShapeshift ResponsiblePointer_ActorState_::setActorStateShapeshift()
        {
            return Ent::Gen2::ActorStateShapeshift(getProperty().setUnionType("ActorStateShapeshift"));
        }
        inline std::optional<Ent::Gen2::ActorStateShootingFlow> ResponsiblePointer_ActorState_::ActorStateShootingFlow()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateShootingFlow") != 0?
                    std::optional<Ent::Gen2::ActorStateShootingFlow>{}:
                    std::optional<Ent::Gen2::ActorStateShootingFlow>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateShootingFlow ResponsiblePointer_ActorState_::setActorStateShootingFlow()
        {
            return Ent::Gen2::ActorStateShootingFlow(getProperty().setUnionType("ActorStateShootingFlow"));
        }
        inline std::optional<Ent::Gen2::ActorStateSink> ResponsiblePointer_ActorState_::ActorStateSink()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSink") != 0?
                    std::optional<Ent::Gen2::ActorStateSink>{}:
                    std::optional<Ent::Gen2::ActorStateSink>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSink ResponsiblePointer_ActorState_::setActorStateSink()
        {
            return Ent::Gen2::ActorStateSink(getProperty().setUnionType("ActorStateSink"));
        }
        inline std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpRequest> ResponsiblePointer_ActorState_::ActorStateSkeletonPartPickUpRequest()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSkeletonPartPickUpRequest") != 0?
                    std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpRequest>{}:
                    std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpRequest>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSkeletonPartPickUpRequest ResponsiblePointer_ActorState_::setActorStateSkeletonPartPickUpRequest()
        {
            return Ent::Gen2::ActorStateSkeletonPartPickUpRequest(getProperty().setUnionType("ActorStateSkeletonPartPickUpRequest"));
        }
        inline std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpState> ResponsiblePointer_ActorState_::ActorStateSkeletonPartPickUpState()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSkeletonPartPickUpState") != 0?
                    std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpState>{}:
                    std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSkeletonPartPickUpState ResponsiblePointer_ActorState_::setActorStateSkeletonPartPickUpState()
        {
            return Ent::Gen2::ActorStateSkeletonPartPickUpState(getProperty().setUnionType("ActorStateSkeletonPartPickUpState"));
        }
        inline std::optional<Ent::Gen2::ActorStateSleeping> ResponsiblePointer_ActorState_::ActorStateSleeping()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSleeping") != 0?
                    std::optional<Ent::Gen2::ActorStateSleeping>{}:
                    std::optional<Ent::Gen2::ActorStateSleeping>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSleeping ResponsiblePointer_ActorState_::setActorStateSleeping()
        {
            return Ent::Gen2::ActorStateSleeping(getProperty().setUnionType("ActorStateSleeping"));
        }
        inline std::optional<Ent::Gen2::ActorStateSlope> ResponsiblePointer_ActorState_::ActorStateSlope()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSlope") != 0?
                    std::optional<Ent::Gen2::ActorStateSlope>{}:
                    std::optional<Ent::Gen2::ActorStateSlope>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSlope ResponsiblePointer_ActorState_::setActorStateSlope()
        {
            return Ent::Gen2::ActorStateSlope(getProperty().setUnionType("ActorStateSlope"));
        }
        inline std::optional<Ent::Gen2::ActorStateSoulRespawn> ResponsiblePointer_ActorState_::ActorStateSoulRespawn()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSoulRespawn") != 0?
                    std::optional<Ent::Gen2::ActorStateSoulRespawn>{}:
                    std::optional<Ent::Gen2::ActorStateSoulRespawn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSoulRespawn ResponsiblePointer_ActorState_::setActorStateSoulRespawn()
        {
            return Ent::Gen2::ActorStateSoulRespawn(getProperty().setUnionType("ActorStateSoulRespawn"));
        }
        inline std::optional<Ent::Gen2::ActorStateSoulWaitingToRespawn> ResponsiblePointer_ActorState_::ActorStateSoulWaitingToRespawn()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSoulWaitingToRespawn") != 0?
                    std::optional<Ent::Gen2::ActorStateSoulWaitingToRespawn>{}:
                    std::optional<Ent::Gen2::ActorStateSoulWaitingToRespawn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSoulWaitingToRespawn ResponsiblePointer_ActorState_::setActorStateSoulWaitingToRespawn()
        {
            return Ent::Gen2::ActorStateSoulWaitingToRespawn(getProperty().setUnionType("ActorStateSoulWaitingToRespawn"));
        }
        inline std::optional<Ent::Gen2::ActorStateSpeedMultiplier> ResponsiblePointer_ActorState_::ActorStateSpeedMultiplier()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateSpeedMultiplier") != 0?
                    std::optional<Ent::Gen2::ActorStateSpeedMultiplier>{}:
                    std::optional<Ent::Gen2::ActorStateSpeedMultiplier>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateSpeedMultiplier ResponsiblePointer_ActorState_::setActorStateSpeedMultiplier()
        {
            return Ent::Gen2::ActorStateSpeedMultiplier(getProperty().setUnionType("ActorStateSpeedMultiplier"));
        }
        inline std::optional<Ent::Gen2::ActorStateStopAttitudeAggressive> ResponsiblePointer_ActorState_::ActorStateStopAttitudeAggressive()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateStopAttitudeAggressive") != 0?
                    std::optional<Ent::Gen2::ActorStateStopAttitudeAggressive>{}:
                    std::optional<Ent::Gen2::ActorStateStopAttitudeAggressive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateStopAttitudeAggressive ResponsiblePointer_ActorState_::setActorStateStopAttitudeAggressive()
        {
            return Ent::Gen2::ActorStateStopAttitudeAggressive(getProperty().setUnionType("ActorStateStopAttitudeAggressive"));
        }
        inline std::optional<Ent::Gen2::ActorStateTaunting> ResponsiblePointer_ActorState_::ActorStateTaunting()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateTaunting") != 0?
                    std::optional<Ent::Gen2::ActorStateTaunting>{}:
                    std::optional<Ent::Gen2::ActorStateTaunting>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateTaunting ResponsiblePointer_ActorState_::setActorStateTaunting()
        {
            return Ent::Gen2::ActorStateTaunting(getProperty().setUnionType("ActorStateTaunting"));
        }
        inline std::optional<Ent::Gen2::ActorStateTeleport> ResponsiblePointer_ActorState_::ActorStateTeleport()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateTeleport") != 0?
                    std::optional<Ent::Gen2::ActorStateTeleport>{}:
                    std::optional<Ent::Gen2::ActorStateTeleport>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateTeleport ResponsiblePointer_ActorState_::setActorStateTeleport()
        {
            return Ent::Gen2::ActorStateTeleport(getProperty().setUnionType("ActorStateTeleport"));
        }
        inline std::optional<Ent::Gen2::ActorStateTeleportToTarget> ResponsiblePointer_ActorState_::ActorStateTeleportToTarget()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateTeleportToTarget") != 0?
                    std::optional<Ent::Gen2::ActorStateTeleportToTarget>{}:
                    std::optional<Ent::Gen2::ActorStateTeleportToTarget>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateTeleportToTarget ResponsiblePointer_ActorState_::setActorStateTeleportToTarget()
        {
            return Ent::Gen2::ActorStateTeleportToTarget(getProperty().setUnionType("ActorStateTeleportToTarget"));
        }
        inline std::optional<Ent::Gen2::ActorStateTeleportWhileMoving> ResponsiblePointer_ActorState_::ActorStateTeleportWhileMoving()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateTeleportWhileMoving") != 0?
                    std::optional<Ent::Gen2::ActorStateTeleportWhileMoving>{}:
                    std::optional<Ent::Gen2::ActorStateTeleportWhileMoving>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateTeleportWhileMoving ResponsiblePointer_ActorState_::setActorStateTeleportWhileMoving()
        {
            return Ent::Gen2::ActorStateTeleportWhileMoving(getProperty().setUnionType("ActorStateTeleportWhileMoving"));
        }
        inline std::optional<Ent::Gen2::ActorStateTryEquipShamanStaff> ResponsiblePointer_ActorState_::ActorStateTryEquipShamanStaff()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateTryEquipShamanStaff") != 0?
                    std::optional<Ent::Gen2::ActorStateTryEquipShamanStaff>{}:
                    std::optional<Ent::Gen2::ActorStateTryEquipShamanStaff>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateTryEquipShamanStaff ResponsiblePointer_ActorState_::setActorStateTryEquipShamanStaff()
        {
            return Ent::Gen2::ActorStateTryEquipShamanStaff(getProperty().setUnionType("ActorStateTryEquipShamanStaff"));
        }
        inline std::optional<Ent::Gen2::ActorStateTryUpgradeShamanStaff> ResponsiblePointer_ActorState_::ActorStateTryUpgradeShamanStaff()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorStateTryUpgradeShamanStaff") != 0?
                    std::optional<Ent::Gen2::ActorStateTryUpgradeShamanStaff>{}:
                    std::optional<Ent::Gen2::ActorStateTryUpgradeShamanStaff>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorStateTryUpgradeShamanStaff ResponsiblePointer_ActorState_::setActorStateTryUpgradeShamanStaff()
        {
            return Ent::Gen2::ActorStateTryUpgradeShamanStaff(getProperty().setUnionType("ActorStateTryUpgradeShamanStaff"));
        }
        inline std::optional<Ent::Gen2::EntityStateAboutToBeHatched> ResponsiblePointer_ActorState_::EntityStateAboutToBeHatched()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateAboutToBeHatched") != 0?
                    std::optional<Ent::Gen2::EntityStateAboutToBeHatched>{}:
                    std::optional<Ent::Gen2::EntityStateAboutToBeHatched>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateAboutToBeHatched ResponsiblePointer_ActorState_::setEntityStateAboutToBeHatched()
        {
            return Ent::Gen2::EntityStateAboutToBeHatched(getProperty().setUnionType("EntityStateAboutToBeHatched"));
        }
        inline std::optional<Ent::Gen2::EntityStateAerialJump> ResponsiblePointer_ActorState_::EntityStateAerialJump()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateAerialJump") != 0?
                    std::optional<Ent::Gen2::EntityStateAerialJump>{}:
                    std::optional<Ent::Gen2::EntityStateAerialJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateAerialJump ResponsiblePointer_ActorState_::setEntityStateAerialJump()
        {
            return Ent::Gen2::EntityStateAerialJump(getProperty().setUnionType("EntityStateAerialJump"));
        }
        inline std::optional<Ent::Gen2::EntityStateAimAt> ResponsiblePointer_ActorState_::EntityStateAimAt()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateAimAt") != 0?
                    std::optional<Ent::Gen2::EntityStateAimAt>{}:
                    std::optional<Ent::Gen2::EntityStateAimAt>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateAimAt ResponsiblePointer_ActorState_::setEntityStateAimAt()
        {
            return Ent::Gen2::EntityStateAimAt(getProperty().setUnionType("EntityStateAimAt"));
        }
        inline std::optional<Ent::Gen2::EntityStateAirControl> ResponsiblePointer_ActorState_::EntityStateAirControl()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateAirControl") != 0?
                    std::optional<Ent::Gen2::EntityStateAirControl>{}:
                    std::optional<Ent::Gen2::EntityStateAirControl>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateAirControl ResponsiblePointer_ActorState_::setEntityStateAirControl()
        {
            return Ent::Gen2::EntityStateAirControl(getProperty().setUnionType("EntityStateAirControl"));
        }
        inline std::optional<Ent::Gen2::EntityStateApplyExtraLife> ResponsiblePointer_ActorState_::EntityStateApplyExtraLife()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateApplyExtraLife") != 0?
                    std::optional<Ent::Gen2::EntityStateApplyExtraLife>{}:
                    std::optional<Ent::Gen2::EntityStateApplyExtraLife>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateApplyExtraLife ResponsiblePointer_ActorState_::setEntityStateApplyExtraLife()
        {
            return Ent::Gen2::EntityStateApplyExtraLife(getProperty().setUnionType("EntityStateApplyExtraLife"));
        }
        inline std::optional<Ent::Gen2::EntityStateAskStaffGuide> ResponsiblePointer_ActorState_::EntityStateAskStaffGuide()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateAskStaffGuide") != 0?
                    std::optional<Ent::Gen2::EntityStateAskStaffGuide>{}:
                    std::optional<Ent::Gen2::EntityStateAskStaffGuide>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateAskStaffGuide ResponsiblePointer_ActorState_::setEntityStateAskStaffGuide()
        {
            return Ent::Gen2::EntityStateAskStaffGuide(getProperty().setUnionType("EntityStateAskStaffGuide"));
        }
        inline std::optional<Ent::Gen2::EntityStateAttackDive> ResponsiblePointer_ActorState_::EntityStateAttackDive()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateAttackDive") != 0?
                    std::optional<Ent::Gen2::EntityStateAttackDive>{}:
                    std::optional<Ent::Gen2::EntityStateAttackDive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateAttackDive ResponsiblePointer_ActorState_::setEntityStateAttackDive()
        {
            return Ent::Gen2::EntityStateAttackDive(getProperty().setUnionType("EntityStateAttackDive"));
        }
        inline std::optional<Ent::Gen2::EntityStateAttitudeGroggy> ResponsiblePointer_ActorState_::EntityStateAttitudeGroggy()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateAttitudeGroggy") != 0?
                    std::optional<Ent::Gen2::EntityStateAttitudeGroggy>{}:
                    std::optional<Ent::Gen2::EntityStateAttitudeGroggy>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateAttitudeGroggy ResponsiblePointer_ActorState_::setEntityStateAttitudeGroggy()
        {
            return Ent::Gen2::EntityStateAttitudeGroggy(getProperty().setUnionType("EntityStateAttitudeGroggy"));
        }
        inline std::optional<Ent::Gen2::EntityStateBackwardDodge> ResponsiblePointer_ActorState_::EntityStateBackwardDodge()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBackwardDodge") != 0?
                    std::optional<Ent::Gen2::EntityStateBackwardDodge>{}:
                    std::optional<Ent::Gen2::EntityStateBackwardDodge>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBackwardDodge ResponsiblePointer_ActorState_::setEntityStateBackwardDodge()
        {
            return Ent::Gen2::EntityStateBackwardDodge(getProperty().setUnionType("EntityStateBackwardDodge"));
        }
        inline std::optional<Ent::Gen2::EntityStateBackwardLand> ResponsiblePointer_ActorState_::EntityStateBackwardLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBackwardLand") != 0?
                    std::optional<Ent::Gen2::EntityStateBackwardLand>{}:
                    std::optional<Ent::Gen2::EntityStateBackwardLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBackwardLand ResponsiblePointer_ActorState_::setEntityStateBackwardLand()
        {
            return Ent::Gen2::EntityStateBackwardLand(getProperty().setUnionType("EntityStateBackwardLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateBeingBlockedByVine> ResponsiblePointer_ActorState_::EntityStateBeingBlockedByVine()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBeingBlockedByVine") != 0?
                    std::optional<Ent::Gen2::EntityStateBeingBlockedByVine>{}:
                    std::optional<Ent::Gen2::EntityStateBeingBlockedByVine>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBeingBlockedByVine ResponsiblePointer_ActorState_::setEntityStateBeingBlockedByVine()
        {
            return Ent::Gen2::EntityStateBeingBlockedByVine(getProperty().setUnionType("EntityStateBeingBlockedByVine"));
        }
        inline std::optional<Ent::Gen2::EntityStateBeingInReeds> ResponsiblePointer_ActorState_::EntityStateBeingInReeds()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBeingInReeds") != 0?
                    std::optional<Ent::Gen2::EntityStateBeingInReeds>{}:
                    std::optional<Ent::Gen2::EntityStateBeingInReeds>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBeingInReeds ResponsiblePointer_ActorState_::setEntityStateBeingInReeds()
        {
            return Ent::Gen2::EntityStateBeingInReeds(getProperty().setUnionType("EntityStateBeingInReeds"));
        }
        inline std::optional<Ent::Gen2::EntityStateBeingLinked> ResponsiblePointer_ActorState_::EntityStateBeingLinked()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBeingLinked") != 0?
                    std::optional<Ent::Gen2::EntityStateBeingLinked>{}:
                    std::optional<Ent::Gen2::EntityStateBeingLinked>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBeingLinked ResponsiblePointer_ActorState_::setEntityStateBeingLinked()
        {
            return Ent::Gen2::EntityStateBeingLinked(getProperty().setUnionType("EntityStateBeingLinked"));
        }
        inline std::optional<Ent::Gen2::EntityStateBeingOnSlope> ResponsiblePointer_ActorState_::EntityStateBeingOnSlope()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBeingOnSlope") != 0?
                    std::optional<Ent::Gen2::EntityStateBeingOnSlope>{}:
                    std::optional<Ent::Gen2::EntityStateBeingOnSlope>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBeingOnSlope ResponsiblePointer_ActorState_::setEntityStateBeingOnSlope()
        {
            return Ent::Gen2::EntityStateBeingOnSlope(getProperty().setUnionType("EntityStateBeingOnSlope"));
        }
        inline std::optional<Ent::Gen2::EntityStateBeingOnSpike> ResponsiblePointer_ActorState_::EntityStateBeingOnSpike()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBeingOnSpike") != 0?
                    std::optional<Ent::Gen2::EntityStateBeingOnSpike>{}:
                    std::optional<Ent::Gen2::EntityStateBeingOnSpike>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBeingOnSpike ResponsiblePointer_ActorState_::setEntityStateBeingOnSpike()
        {
            return Ent::Gen2::EntityStateBeingOnSpike(getProperty().setUnionType("EntityStateBeingOnSpike"));
        }
        inline std::optional<Ent::Gen2::EntityStateBite> ResponsiblePointer_ActorState_::EntityStateBite()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBite") != 0?
                    std::optional<Ent::Gen2::EntityStateBite>{}:
                    std::optional<Ent::Gen2::EntityStateBite>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBite ResponsiblePointer_ActorState_::setEntityStateBite()
        {
            return Ent::Gen2::EntityStateBite(getProperty().setUnionType("EntityStateBite"));
        }
        inline std::optional<Ent::Gen2::EntityStateBiteAttack> ResponsiblePointer_ActorState_::EntityStateBiteAttack()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBiteAttack") != 0?
                    std::optional<Ent::Gen2::EntityStateBiteAttack>{}:
                    std::optional<Ent::Gen2::EntityStateBiteAttack>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBiteAttack ResponsiblePointer_ActorState_::setEntityStateBiteAttack()
        {
            return Ent::Gen2::EntityStateBiteAttack(getProperty().setUnionType("EntityStateBiteAttack"));
        }
        inline std::optional<Ent::Gen2::EntityStateBiteIn> ResponsiblePointer_ActorState_::EntityStateBiteIn()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBiteIn") != 0?
                    std::optional<Ent::Gen2::EntityStateBiteIn>{}:
                    std::optional<Ent::Gen2::EntityStateBiteIn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBiteIn ResponsiblePointer_ActorState_::setEntityStateBiteIn()
        {
            return Ent::Gen2::EntityStateBiteIn(getProperty().setUnionType("EntityStateBiteIn"));
        }
        inline std::optional<Ent::Gen2::EntityStateBiteOut> ResponsiblePointer_ActorState_::EntityStateBiteOut()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBiteOut") != 0?
                    std::optional<Ent::Gen2::EntityStateBiteOut>{}:
                    std::optional<Ent::Gen2::EntityStateBiteOut>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBiteOut ResponsiblePointer_ActorState_::setEntityStateBiteOut()
        {
            return Ent::Gen2::EntityStateBiteOut(getProperty().setUnionType("EntityStateBiteOut"));
        }
        inline std::optional<Ent::Gen2::EntityStateBitten> ResponsiblePointer_ActorState_::EntityStateBitten()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBitten") != 0?
                    std::optional<Ent::Gen2::EntityStateBitten>{}:
                    std::optional<Ent::Gen2::EntityStateBitten>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBitten ResponsiblePointer_ActorState_::setEntityStateBitten()
        {
            return Ent::Gen2::EntityStateBitten(getProperty().setUnionType("EntityStateBitten"));
        }
        inline std::optional<Ent::Gen2::EntityStateBittenDefense> ResponsiblePointer_ActorState_::EntityStateBittenDefense()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBittenDefense") != 0?
                    std::optional<Ent::Gen2::EntityStateBittenDefense>{}:
                    std::optional<Ent::Gen2::EntityStateBittenDefense>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBittenDefense ResponsiblePointer_ActorState_::setEntityStateBittenDefense()
        {
            return Ent::Gen2::EntityStateBittenDefense(getProperty().setUnionType("EntityStateBittenDefense"));
        }
        inline std::optional<Ent::Gen2::EntityStateBoidsHomePos> ResponsiblePointer_ActorState_::EntityStateBoidsHomePos()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBoidsHomePos") != 0?
                    std::optional<Ent::Gen2::EntityStateBoidsHomePos>{}:
                    std::optional<Ent::Gen2::EntityStateBoidsHomePos>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBoidsHomePos ResponsiblePointer_ActorState_::setEntityStateBoidsHomePos()
        {
            return Ent::Gen2::EntityStateBoidsHomePos(getProperty().setUnionType("EntityStateBoidsHomePos"));
        }
        inline std::optional<Ent::Gen2::EntityStateBounce> ResponsiblePointer_ActorState_::EntityStateBounce()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBounce") != 0?
                    std::optional<Ent::Gen2::EntityStateBounce>{}:
                    std::optional<Ent::Gen2::EntityStateBounce>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBounce ResponsiblePointer_ActorState_::setEntityStateBounce()
        {
            return Ent::Gen2::EntityStateBounce(getProperty().setUnionType("EntityStateBounce"));
        }
        inline std::optional<Ent::Gen2::EntityStateBounceLand> ResponsiblePointer_ActorState_::EntityStateBounceLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBounceLand") != 0?
                    std::optional<Ent::Gen2::EntityStateBounceLand>{}:
                    std::optional<Ent::Gen2::EntityStateBounceLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBounceLand ResponsiblePointer_ActorState_::setEntityStateBounceLand()
        {
            return Ent::Gen2::EntityStateBounceLand(getProperty().setUnionType("EntityStateBounceLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateBreakableBreaking> ResponsiblePointer_ActorState_::EntityStateBreakableBreaking()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBreakableBreaking") != 0?
                    std::optional<Ent::Gen2::EntityStateBreakableBreaking>{}:
                    std::optional<Ent::Gen2::EntityStateBreakableBreaking>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBreakableBreaking ResponsiblePointer_ActorState_::setEntityStateBreakableBreaking()
        {
            return Ent::Gen2::EntityStateBreakableBreaking(getProperty().setUnionType("EntityStateBreakableBreaking"));
        }
        inline std::optional<Ent::Gen2::EntityStateBreakableBroken> ResponsiblePointer_ActorState_::EntityStateBreakableBroken()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBreakableBroken") != 0?
                    std::optional<Ent::Gen2::EntityStateBreakableBroken>{}:
                    std::optional<Ent::Gen2::EntityStateBreakableBroken>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBreakableBroken ResponsiblePointer_ActorState_::setEntityStateBreakableBroken()
        {
            return Ent::Gen2::EntityStateBreakableBroken(getProperty().setUnionType("EntityStateBreakableBroken"));
        }
        inline std::optional<Ent::Gen2::EntityStateBreakableEntire> ResponsiblePointer_ActorState_::EntityStateBreakableEntire()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBreakableEntire") != 0?
                    std::optional<Ent::Gen2::EntityStateBreakableEntire>{}:
                    std::optional<Ent::Gen2::EntityStateBreakableEntire>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBreakableEntire ResponsiblePointer_ActorState_::setEntityStateBreakableEntire()
        {
            return Ent::Gen2::EntityStateBreakableEntire(getProperty().setUnionType("EntityStateBreakableEntire"));
        }
        inline std::optional<Ent::Gen2::EntityStateBridgeAttached> ResponsiblePointer_ActorState_::EntityStateBridgeAttached()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBridgeAttached") != 0?
                    std::optional<Ent::Gen2::EntityStateBridgeAttached>{}:
                    std::optional<Ent::Gen2::EntityStateBridgeAttached>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBridgeAttached ResponsiblePointer_ActorState_::setEntityStateBridgeAttached()
        {
            return Ent::Gen2::EntityStateBridgeAttached(getProperty().setUnionType("EntityStateBridgeAttached"));
        }
        inline std::optional<Ent::Gen2::EntityStateBridgeAttracted> ResponsiblePointer_ActorState_::EntityStateBridgeAttracted()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBridgeAttracted") != 0?
                    std::optional<Ent::Gen2::EntityStateBridgeAttracted>{}:
                    std::optional<Ent::Gen2::EntityStateBridgeAttracted>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBridgeAttracted ResponsiblePointer_ActorState_::setEntityStateBridgeAttracted()
        {
            return Ent::Gen2::EntityStateBridgeAttracted(getProperty().setUnionType("EntityStateBridgeAttracted"));
        }
        inline std::optional<Ent::Gen2::EntityStateBridgeBeingControlled> ResponsiblePointer_ActorState_::EntityStateBridgeBeingControlled()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateBridgeBeingControlled") != 0?
                    std::optional<Ent::Gen2::EntityStateBridgeBeingControlled>{}:
                    std::optional<Ent::Gen2::EntityStateBridgeBeingControlled>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateBridgeBeingControlled ResponsiblePointer_ActorState_::setEntityStateBridgeBeingControlled()
        {
            return Ent::Gen2::EntityStateBridgeBeingControlled(getProperty().setUnionType("EntityStateBridgeBeingControlled"));
        }
        inline std::optional<Ent::Gen2::EntityStateCallAndMountSpiritAnimal> ResponsiblePointer_ActorState_::EntityStateCallAndMountSpiritAnimal()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateCallAndMountSpiritAnimal") != 0?
                    std::optional<Ent::Gen2::EntityStateCallAndMountSpiritAnimal>{}:
                    std::optional<Ent::Gen2::EntityStateCallAndMountSpiritAnimal>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateCallAndMountSpiritAnimal ResponsiblePointer_ActorState_::setEntityStateCallAndMountSpiritAnimal()
        {
            return Ent::Gen2::EntityStateCallAndMountSpiritAnimal(getProperty().setUnionType("EntityStateCallAndMountSpiritAnimal"));
        }
        inline std::optional<Ent::Gen2::EntityStateCanNotBePerceived> ResponsiblePointer_ActorState_::EntityStateCanNotBePerceived()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateCanNotBePerceived") != 0?
                    std::optional<Ent::Gen2::EntityStateCanNotBePerceived>{}:
                    std::optional<Ent::Gen2::EntityStateCanNotBePerceived>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateCanNotBePerceived ResponsiblePointer_ActorState_::setEntityStateCanNotBePerceived()
        {
            return Ent::Gen2::EntityStateCanNotBePerceived(getProperty().setUnionType("EntityStateCanNotBePerceived"));
        }
        inline std::optional<Ent::Gen2::EntityStateChargeMode> ResponsiblePointer_ActorState_::EntityStateChargeMode()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateChargeMode") != 0?
                    std::optional<Ent::Gen2::EntityStateChargeMode>{}:
                    std::optional<Ent::Gen2::EntityStateChargeMode>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateChargeMode ResponsiblePointer_ActorState_::setEntityStateChargeMode()
        {
            return Ent::Gen2::EntityStateChargeMode(getProperty().setUnionType("EntityStateChargeMode"));
        }
        inline std::optional<Ent::Gen2::EntityStateChargedJump> ResponsiblePointer_ActorState_::EntityStateChargedJump()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateChargedJump") != 0?
                    std::optional<Ent::Gen2::EntityStateChargedJump>{}:
                    std::optional<Ent::Gen2::EntityStateChargedJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateChargedJump ResponsiblePointer_ActorState_::setEntityStateChargedJump()
        {
            return Ent::Gen2::EntityStateChargedJump(getProperty().setUnionType("EntityStateChargedJump"));
        }
        inline std::optional<Ent::Gen2::EntityStateChargingJump> ResponsiblePointer_ActorState_::EntityStateChargingJump()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateChargingJump") != 0?
                    std::optional<Ent::Gen2::EntityStateChargingJump>{}:
                    std::optional<Ent::Gen2::EntityStateChargingJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateChargingJump ResponsiblePointer_ActorState_::setEntityStateChargingJump()
        {
            return Ent::Gen2::EntityStateChargingJump(getProperty().setUnionType("EntityStateChargingJump"));
        }
        inline std::optional<Ent::Gen2::EntityStateCinematicCompleted> ResponsiblePointer_ActorState_::EntityStateCinematicCompleted()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateCinematicCompleted") != 0?
                    std::optional<Ent::Gen2::EntityStateCinematicCompleted>{}:
                    std::optional<Ent::Gen2::EntityStateCinematicCompleted>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateCinematicCompleted ResponsiblePointer_ActorState_::setEntityStateCinematicCompleted()
        {
            return Ent::Gen2::EntityStateCinematicCompleted(getProperty().setUnionType("EntityStateCinematicCompleted"));
        }
        inline std::optional<Ent::Gen2::EntityStateCinematicReady> ResponsiblePointer_ActorState_::EntityStateCinematicReady()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateCinematicReady") != 0?
                    std::optional<Ent::Gen2::EntityStateCinematicReady>{}:
                    std::optional<Ent::Gen2::EntityStateCinematicReady>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateCinematicReady ResponsiblePointer_ActorState_::setEntityStateCinematicReady()
        {
            return Ent::Gen2::EntityStateCinematicReady(getProperty().setUnionType("EntityStateCinematicReady"));
        }
        inline std::optional<Ent::Gen2::EntityStateClassicDodge> ResponsiblePointer_ActorState_::EntityStateClassicDodge()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateClassicDodge") != 0?
                    std::optional<Ent::Gen2::EntityStateClassicDodge>{}:
                    std::optional<Ent::Gen2::EntityStateClassicDodge>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateClassicDodge ResponsiblePointer_ActorState_::setEntityStateClassicDodge()
        {
            return Ent::Gen2::EntityStateClassicDodge(getProperty().setUnionType("EntityStateClassicDodge"));
        }
        inline std::optional<Ent::Gen2::EntityStateClassicLand> ResponsiblePointer_ActorState_::EntityStateClassicLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateClassicLand") != 0?
                    std::optional<Ent::Gen2::EntityStateClassicLand>{}:
                    std::optional<Ent::Gen2::EntityStateClassicLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateClassicLand ResponsiblePointer_ActorState_::setEntityStateClassicLand()
        {
            return Ent::Gen2::EntityStateClassicLand(getProperty().setUnionType("EntityStateClassicLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateClimbWaterfall> ResponsiblePointer_ActorState_::EntityStateClimbWaterfall()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateClimbWaterfall") != 0?
                    std::optional<Ent::Gen2::EntityStateClimbWaterfall>{}:
                    std::optional<Ent::Gen2::EntityStateClimbWaterfall>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateClimbWaterfall ResponsiblePointer_ActorState_::setEntityStateClimbWaterfall()
        {
            return Ent::Gen2::EntityStateClimbWaterfall(getProperty().setUnionType("EntityStateClimbWaterfall"));
        }
        inline std::optional<Ent::Gen2::EntityStateClimbWaterfallImpulse> ResponsiblePointer_ActorState_::EntityStateClimbWaterfallImpulse()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateClimbWaterfallImpulse") != 0?
                    std::optional<Ent::Gen2::EntityStateClimbWaterfallImpulse>{}:
                    std::optional<Ent::Gen2::EntityStateClimbWaterfallImpulse>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateClimbWaterfallImpulse ResponsiblePointer_ActorState_::setEntityStateClimbWaterfallImpulse()
        {
            return Ent::Gen2::EntityStateClimbWaterfallImpulse(getProperty().setUnionType("EntityStateClimbWaterfallImpulse"));
        }
        inline std::optional<Ent::Gen2::EntityStateCollectVertebrae> ResponsiblePointer_ActorState_::EntityStateCollectVertebrae()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateCollectVertebrae") != 0?
                    std::optional<Ent::Gen2::EntityStateCollectVertebrae>{}:
                    std::optional<Ent::Gen2::EntityStateCollectVertebrae>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateCollectVertebrae ResponsiblePointer_ActorState_::setEntityStateCollectVertebrae()
        {
            return Ent::Gen2::EntityStateCollectVertebrae(getProperty().setUnionType("EntityStateCollectVertebrae"));
        }
        inline std::optional<Ent::Gen2::EntityStateCombat> ResponsiblePointer_ActorState_::EntityStateCombat()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateCombat") != 0?
                    std::optional<Ent::Gen2::EntityStateCombat>{}:
                    std::optional<Ent::Gen2::EntityStateCombat>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateCombat ResponsiblePointer_ActorState_::setEntityStateCombat()
        {
            return Ent::Gen2::EntityStateCombat(getProperty().setUnionType("EntityStateCombat"));
        }
        inline std::optional<Ent::Gen2::EntityStateConstrainedInput> ResponsiblePointer_ActorState_::EntityStateConstrainedInput()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateConstrainedInput") != 0?
                    std::optional<Ent::Gen2::EntityStateConstrainedInput>{}:
                    std::optional<Ent::Gen2::EntityStateConstrainedInput>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateConstrainedInput ResponsiblePointer_ActorState_::setEntityStateConstrainedInput()
        {
            return Ent::Gen2::EntityStateConstrainedInput(getProperty().setUnionType("EntityStateConstrainedInput"));
        }
        inline std::optional<Ent::Gen2::EntityStateConstrainedMove> ResponsiblePointer_ActorState_::EntityStateConstrainedMove()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateConstrainedMove") != 0?
                    std::optional<Ent::Gen2::EntityStateConstrainedMove>{}:
                    std::optional<Ent::Gen2::EntityStateConstrainedMove>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateConstrainedMove ResponsiblePointer_ActorState_::setEntityStateConstrainedMove()
        {
            return Ent::Gen2::EntityStateConstrainedMove(getProperty().setUnionType("EntityStateConstrainedMove"));
        }
        inline std::optional<Ent::Gen2::EntityStateControlGPE> ResponsiblePointer_ActorState_::EntityStateControlGPE()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateControlGPE") != 0?
                    std::optional<Ent::Gen2::EntityStateControlGPE>{}:
                    std::optional<Ent::Gen2::EntityStateControlGPE>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateControlGPE ResponsiblePointer_ActorState_::setEntityStateControlGPE()
        {
            return Ent::Gen2::EntityStateControlGPE(getProperty().setUnionType("EntityStateControlGPE"));
        }
        inline std::optional<Ent::Gen2::EntityStateCreatureHatching> ResponsiblePointer_ActorState_::EntityStateCreatureHatching()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateCreatureHatching") != 0?
                    std::optional<Ent::Gen2::EntityStateCreatureHatching>{}:
                    std::optional<Ent::Gen2::EntityStateCreatureHatching>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateCreatureHatching ResponsiblePointer_ActorState_::setEntityStateCreatureHatching()
        {
            return Ent::Gen2::EntityStateCreatureHatching(getProperty().setUnionType("EntityStateCreatureHatching"));
        }
        inline std::optional<Ent::Gen2::EntityStateCreatureProfile> ResponsiblePointer_ActorState_::EntityStateCreatureProfile()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateCreatureProfile") != 0?
                    std::optional<Ent::Gen2::EntityStateCreatureProfile>{}:
                    std::optional<Ent::Gen2::EntityStateCreatureProfile>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateCreatureProfile ResponsiblePointer_ActorState_::setEntityStateCreatureProfile()
        {
            return Ent::Gen2::EntityStateCreatureProfile(getProperty().setUnionType("EntityStateCreatureProfile"));
        }
        inline std::optional<Ent::Gen2::EntityStateDamageLand> ResponsiblePointer_ActorState_::EntityStateDamageLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateDamageLand") != 0?
                    std::optional<Ent::Gen2::EntityStateDamageLand>{}:
                    std::optional<Ent::Gen2::EntityStateDamageLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateDamageLand ResponsiblePointer_ActorState_::setEntityStateDamageLand()
        {
            return Ent::Gen2::EntityStateDamageLand(getProperty().setUnionType("EntityStateDamageLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateDeathLand> ResponsiblePointer_ActorState_::EntityStateDeathLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateDeathLand") != 0?
                    std::optional<Ent::Gen2::EntityStateDeathLand>{}:
                    std::optional<Ent::Gen2::EntityStateDeathLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateDeathLand ResponsiblePointer_ActorState_::setEntityStateDeathLand()
        {
            return Ent::Gen2::EntityStateDeathLand(getProperty().setUnionType("EntityStateDeathLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateDisablePerceptionRequest> ResponsiblePointer_ActorState_::EntityStateDisablePerceptionRequest()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateDisablePerceptionRequest") != 0?
                    std::optional<Ent::Gen2::EntityStateDisablePerceptionRequest>{}:
                    std::optional<Ent::Gen2::EntityStateDisablePerceptionRequest>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateDisablePerceptionRequest ResponsiblePointer_ActorState_::setEntityStateDisablePerceptionRequest()
        {
            return Ent::Gen2::EntityStateDisablePerceptionRequest(getProperty().setUnionType("EntityStateDisablePerceptionRequest"));
        }
        inline std::optional<Ent::Gen2::EntityStateDisabledVertebrae> ResponsiblePointer_ActorState_::EntityStateDisabledVertebrae()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateDisabledVertebrae") != 0?
                    std::optional<Ent::Gen2::EntityStateDisabledVertebrae>{}:
                    std::optional<Ent::Gen2::EntityStateDisabledVertebrae>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateDisabledVertebrae ResponsiblePointer_ActorState_::setEntityStateDisabledVertebrae()
        {
            return Ent::Gen2::EntityStateDisabledVertebrae(getProperty().setUnionType("EntityStateDisabledVertebrae"));
        }
        inline std::optional<Ent::Gen2::EntityStateDisguise> ResponsiblePointer_ActorState_::EntityStateDisguise()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateDisguise") != 0?
                    std::optional<Ent::Gen2::EntityStateDisguise>{}:
                    std::optional<Ent::Gen2::EntityStateDisguise>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateDisguise ResponsiblePointer_ActorState_::setEntityStateDisguise()
        {
            return Ent::Gen2::EntityStateDisguise(getProperty().setUnionType("EntityStateDisguise"));
        }
        inline std::optional<Ent::Gen2::EntityStateDisplayHatchingCost> ResponsiblePointer_ActorState_::EntityStateDisplayHatchingCost()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateDisplayHatchingCost") != 0?
                    std::optional<Ent::Gen2::EntityStateDisplayHatchingCost>{}:
                    std::optional<Ent::Gen2::EntityStateDisplayHatchingCost>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateDisplayHatchingCost ResponsiblePointer_ActorState_::setEntityStateDisplayHatchingCost()
        {
            return Ent::Gen2::EntityStateDisplayHatchingCost(getProperty().setUnionType("EntityStateDisplayHatchingCost"));
        }
        inline std::optional<Ent::Gen2::EntityStateDodgeCooldown> ResponsiblePointer_ActorState_::EntityStateDodgeCooldown()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateDodgeCooldown") != 0?
                    std::optional<Ent::Gen2::EntityStateDodgeCooldown>{}:
                    std::optional<Ent::Gen2::EntityStateDodgeCooldown>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateDodgeCooldown ResponsiblePointer_ActorState_::setEntityStateDodgeCooldown()
        {
            return Ent::Gen2::EntityStateDodgeCooldown(getProperty().setUnionType("EntityStateDodgeCooldown"));
        }
        inline std::optional<Ent::Gen2::EntityStateEjectedLand> ResponsiblePointer_ActorState_::EntityStateEjectedLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateEjectedLand") != 0?
                    std::optional<Ent::Gen2::EntityStateEjectedLand>{}:
                    std::optional<Ent::Gen2::EntityStateEjectedLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateEjectedLand ResponsiblePointer_ActorState_::setEntityStateEjectedLand()
        {
            return Ent::Gen2::EntityStateEjectedLand(getProperty().setUnionType("EntityStateEjectedLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateEnergyRootAbortHatching> ResponsiblePointer_ActorState_::EntityStateEnergyRootAbortHatching()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateEnergyRootAbortHatching") != 0?
                    std::optional<Ent::Gen2::EntityStateEnergyRootAbortHatching>{}:
                    std::optional<Ent::Gen2::EntityStateEnergyRootAbortHatching>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateEnergyRootAbortHatching ResponsiblePointer_ActorState_::setEntityStateEnergyRootAbortHatching()
        {
            return Ent::Gen2::EntityStateEnergyRootAbortHatching(getProperty().setUnionType("EntityStateEnergyRootAbortHatching"));
        }
        inline std::optional<Ent::Gen2::EntityStateEnergyRootHatching> ResponsiblePointer_ActorState_::EntityStateEnergyRootHatching()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateEnergyRootHatching") != 0?
                    std::optional<Ent::Gen2::EntityStateEnergyRootHatching>{}:
                    std::optional<Ent::Gen2::EntityStateEnergyRootHatching>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateEnergyRootHatching ResponsiblePointer_ActorState_::setEntityStateEnergyRootHatching()
        {
            return Ent::Gen2::EntityStateEnergyRootHatching(getProperty().setUnionType("EntityStateEnergyRootHatching"));
        }
        inline std::optional<Ent::Gen2::EntityStateEnergySide> ResponsiblePointer_ActorState_::EntityStateEnergySide()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateEnergySide") != 0?
                    std::optional<Ent::Gen2::EntityStateEnergySide>{}:
                    std::optional<Ent::Gen2::EntityStateEnergySide>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateEnergySide ResponsiblePointer_ActorState_::setEntityStateEnergySide()
        {
            return Ent::Gen2::EntityStateEnergySide(getProperty().setUnionType("EntityStateEnergySide"));
        }
        inline std::optional<Ent::Gen2::EntityStateEnergySpoutState> ResponsiblePointer_ActorState_::EntityStateEnergySpoutState()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateEnergySpoutState") != 0?
                    std::optional<Ent::Gen2::EntityStateEnergySpoutState>{}:
                    std::optional<Ent::Gen2::EntityStateEnergySpoutState>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateEnergySpoutState ResponsiblePointer_ActorState_::setEntityStateEnergySpoutState()
        {
            return Ent::Gen2::EntityStateEnergySpoutState(getProperty().setUnionType("EntityStateEnergySpoutState"));
        }
        inline std::optional<Ent::Gen2::EntityStateExtraLife> ResponsiblePointer_ActorState_::EntityStateExtraLife()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateExtraLife") != 0?
                    std::optional<Ent::Gen2::EntityStateExtraLife>{}:
                    std::optional<Ent::Gen2::EntityStateExtraLife>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateExtraLife ResponsiblePointer_ActorState_::setEntityStateExtraLife()
        {
            return Ent::Gen2::EntityStateExtraLife(getProperty().setUnionType("EntityStateExtraLife"));
        }
        inline std::optional<Ent::Gen2::EntityStateFailingOrder> ResponsiblePointer_ActorState_::EntityStateFailingOrder()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateFailingOrder") != 0?
                    std::optional<Ent::Gen2::EntityStateFailingOrder>{}:
                    std::optional<Ent::Gen2::EntityStateFailingOrder>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateFailingOrder ResponsiblePointer_ActorState_::setEntityStateFailingOrder()
        {
            return Ent::Gen2::EntityStateFailingOrder(getProperty().setUnionType("EntityStateFailingOrder"));
        }
        inline std::optional<Ent::Gen2::EntityStateFall> ResponsiblePointer_ActorState_::EntityStateFall()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateFall") != 0?
                    std::optional<Ent::Gen2::EntityStateFall>{}:
                    std::optional<Ent::Gen2::EntityStateFall>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateFall ResponsiblePointer_ActorState_::setEntityStateFall()
        {
            return Ent::Gen2::EntityStateFall(getProperty().setUnionType("EntityStateFall"));
        }
        inline std::optional<Ent::Gen2::EntityStateFallDying> ResponsiblePointer_ActorState_::EntityStateFallDying()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateFallDying") != 0?
                    std::optional<Ent::Gen2::EntityStateFallDying>{}:
                    std::optional<Ent::Gen2::EntityStateFallDying>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateFallDying ResponsiblePointer_ActorState_::setEntityStateFallDying()
        {
            return Ent::Gen2::EntityStateFallDying(getProperty().setUnionType("EntityStateFallDying"));
        }
        inline std::optional<Ent::Gen2::EntityStateFallInjured> ResponsiblePointer_ActorState_::EntityStateFallInjured()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateFallInjured") != 0?
                    std::optional<Ent::Gen2::EntityStateFallInjured>{}:
                    std::optional<Ent::Gen2::EntityStateFallInjured>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateFallInjured ResponsiblePointer_ActorState_::setEntityStateFallInjured()
        {
            return Ent::Gen2::EntityStateFallInjured(getProperty().setUnionType("EntityStateFallInjured"));
        }
        inline std::optional<Ent::Gen2::EntityStateFallSafe> ResponsiblePointer_ActorState_::EntityStateFallSafe()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateFallSafe") != 0?
                    std::optional<Ent::Gen2::EntityStateFallSafe>{}:
                    std::optional<Ent::Gen2::EntityStateFallSafe>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateFallSafe ResponsiblePointer_ActorState_::setEntityStateFallSafe()
        {
            return Ent::Gen2::EntityStateFallSafe(getProperty().setUnionType("EntityStateFallSafe"));
        }
        inline std::optional<Ent::Gen2::EntityStateFastRun> ResponsiblePointer_ActorState_::EntityStateFastRun()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateFastRun") != 0?
                    std::optional<Ent::Gen2::EntityStateFastRun>{}:
                    std::optional<Ent::Gen2::EntityStateFastRun>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateFastRun ResponsiblePointer_ActorState_::setEntityStateFastRun()
        {
            return Ent::Gen2::EntityStateFastRun(getProperty().setUnionType("EntityStateFastRun"));
        }
        inline std::optional<Ent::Gen2::EntityStateForceCanBeTargeted> ResponsiblePointer_ActorState_::EntityStateForceCanBeTargeted()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateForceCanBeTargeted") != 0?
                    std::optional<Ent::Gen2::EntityStateForceCanBeTargeted>{}:
                    std::optional<Ent::Gen2::EntityStateForceCanBeTargeted>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateForceCanBeTargeted ResponsiblePointer_ActorState_::setEntityStateForceCanBeTargeted()
        {
            return Ent::Gen2::EntityStateForceCanBeTargeted(getProperty().setUnionType("EntityStateForceCanBeTargeted"));
        }
        inline std::optional<Ent::Gen2::EntityStateGrab> ResponsiblePointer_ActorState_::EntityStateGrab()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGrab") != 0?
                    std::optional<Ent::Gen2::EntityStateGrab>{}:
                    std::optional<Ent::Gen2::EntityStateGrab>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGrab ResponsiblePointer_ActorState_::setEntityStateGrab()
        {
            return Ent::Gen2::EntityStateGrab(getProperty().setUnionType("EntityStateGrab"));
        }
        inline std::optional<Ent::Gen2::EntityStateGrabAttack> ResponsiblePointer_ActorState_::EntityStateGrabAttack()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGrabAttack") != 0?
                    std::optional<Ent::Gen2::EntityStateGrabAttack>{}:
                    std::optional<Ent::Gen2::EntityStateGrabAttack>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGrabAttack ResponsiblePointer_ActorState_::setEntityStateGrabAttack()
        {
            return Ent::Gen2::EntityStateGrabAttack(getProperty().setUnionType("EntityStateGrabAttack"));
        }
        inline std::optional<Ent::Gen2::EntityStateGrabIn> ResponsiblePointer_ActorState_::EntityStateGrabIn()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGrabIn") != 0?
                    std::optional<Ent::Gen2::EntityStateGrabIn>{}:
                    std::optional<Ent::Gen2::EntityStateGrabIn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGrabIn ResponsiblePointer_ActorState_::setEntityStateGrabIn()
        {
            return Ent::Gen2::EntityStateGrabIn(getProperty().setUnionType("EntityStateGrabIn"));
        }
        inline std::optional<Ent::Gen2::EntityStateGrabOut> ResponsiblePointer_ActorState_::EntityStateGrabOut()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGrabOut") != 0?
                    std::optional<Ent::Gen2::EntityStateGrabOut>{}:
                    std::optional<Ent::Gen2::EntityStateGrabOut>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGrabOut ResponsiblePointer_ActorState_::setEntityStateGrabOut()
        {
            return Ent::Gen2::EntityStateGrabOut(getProperty().setUnionType("EntityStateGrabOut"));
        }
        inline std::optional<Ent::Gen2::EntityStateGrabbed> ResponsiblePointer_ActorState_::EntityStateGrabbed()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGrabbed") != 0?
                    std::optional<Ent::Gen2::EntityStateGrabbed>{}:
                    std::optional<Ent::Gen2::EntityStateGrabbed>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGrabbed ResponsiblePointer_ActorState_::setEntityStateGrabbed()
        {
            return Ent::Gen2::EntityStateGrabbed(getProperty().setUnionType("EntityStateGrabbed"));
        }
        inline std::optional<Ent::Gen2::EntityStateGrabbedIn> ResponsiblePointer_ActorState_::EntityStateGrabbedIn()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGrabbedIn") != 0?
                    std::optional<Ent::Gen2::EntityStateGrabbedIn>{}:
                    std::optional<Ent::Gen2::EntityStateGrabbedIn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGrabbedIn ResponsiblePointer_ActorState_::setEntityStateGrabbedIn()
        {
            return Ent::Gen2::EntityStateGrabbedIn(getProperty().setUnionType("EntityStateGrabbedIn"));
        }
        inline std::optional<Ent::Gen2::EntityStateGrabbedOut> ResponsiblePointer_ActorState_::EntityStateGrabbedOut()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGrabbedOut") != 0?
                    std::optional<Ent::Gen2::EntityStateGrabbedOut>{}:
                    std::optional<Ent::Gen2::EntityStateGrabbedOut>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGrabbedOut ResponsiblePointer_ActorState_::setEntityStateGrabbedOut()
        {
            return Ent::Gen2::EntityStateGrabbedOut(getProperty().setUnionType("EntityStateGrabbedOut"));
        }
        inline std::optional<Ent::Gen2::EntityStateGrasp> ResponsiblePointer_ActorState_::EntityStateGrasp()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGrasp") != 0?
                    std::optional<Ent::Gen2::EntityStateGrasp>{}:
                    std::optional<Ent::Gen2::EntityStateGrasp>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGrasp ResponsiblePointer_ActorState_::setEntityStateGrasp()
        {
            return Ent::Gen2::EntityStateGrasp(getProperty().setUnionType("EntityStateGrasp"));
        }
        inline std::optional<Ent::Gen2::EntityStateGroundedJump> ResponsiblePointer_ActorState_::EntityStateGroundedJump()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateGroundedJump") != 0?
                    std::optional<Ent::Gen2::EntityStateGroundedJump>{}:
                    std::optional<Ent::Gen2::EntityStateGroundedJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateGroundedJump ResponsiblePointer_ActorState_::setEntityStateGroundedJump()
        {
            return Ent::Gen2::EntityStateGroundedJump(getProperty().setUnionType("EntityStateGroundedJump"));
        }
        inline std::optional<Ent::Gen2::EntityStateHide> ResponsiblePointer_ActorState_::EntityStateHide()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateHide") != 0?
                    std::optional<Ent::Gen2::EntityStateHide>{}:
                    std::optional<Ent::Gen2::EntityStateHide>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateHide ResponsiblePointer_ActorState_::setEntityStateHide()
        {
            return Ent::Gen2::EntityStateHide(getProperty().setUnionType("EntityStateHide"));
        }
        inline std::optional<Ent::Gen2::EntityStateHideIn> ResponsiblePointer_ActorState_::EntityStateHideIn()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateHideIn") != 0?
                    std::optional<Ent::Gen2::EntityStateHideIn>{}:
                    std::optional<Ent::Gen2::EntityStateHideIn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateHideIn ResponsiblePointer_ActorState_::setEntityStateHideIn()
        {
            return Ent::Gen2::EntityStateHideIn(getProperty().setUnionType("EntityStateHideIn"));
        }
        inline std::optional<Ent::Gen2::EntityStateHideOut> ResponsiblePointer_ActorState_::EntityStateHideOut()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateHideOut") != 0?
                    std::optional<Ent::Gen2::EntityStateHideOut>{}:
                    std::optional<Ent::Gen2::EntityStateHideOut>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateHideOut ResponsiblePointer_ActorState_::setEntityStateHideOut()
        {
            return Ent::Gen2::EntityStateHideOut(getProperty().setUnionType("EntityStateHideOut"));
        }
        inline std::optional<Ent::Gen2::EntityStateHintFull> ResponsiblePointer_ActorState_::EntityStateHintFull()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateHintFull") != 0?
                    std::optional<Ent::Gen2::EntityStateHintFull>{}:
                    std::optional<Ent::Gen2::EntityStateHintFull>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateHintFull ResponsiblePointer_ActorState_::setEntityStateHintFull()
        {
            return Ent::Gen2::EntityStateHintFull(getProperty().setUnionType("EntityStateHintFull"));
        }
        inline std::optional<Ent::Gen2::EntityStateHintLight> ResponsiblePointer_ActorState_::EntityStateHintLight()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateHintLight") != 0?
                    std::optional<Ent::Gen2::EntityStateHintLight>{}:
                    std::optional<Ent::Gen2::EntityStateHintLight>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateHintLight ResponsiblePointer_ActorState_::setEntityStateHintLight()
        {
            return Ent::Gen2::EntityStateHintLight(getProperty().setUnionType("EntityStateHintLight"));
        }
        inline std::optional<Ent::Gen2::EntityStateHintNone> ResponsiblePointer_ActorState_::EntityStateHintNone()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateHintNone") != 0?
                    std::optional<Ent::Gen2::EntityStateHintNone>{}:
                    std::optional<Ent::Gen2::EntityStateHintNone>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateHintNone ResponsiblePointer_ActorState_::setEntityStateHintNone()
        {
            return Ent::Gen2::EntityStateHintNone(getProperty().setUnionType("EntityStateHintNone"));
        }
        inline std::optional<Ent::Gen2::EntityStateHitWall> ResponsiblePointer_ActorState_::EntityStateHitWall()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateHitWall") != 0?
                    std::optional<Ent::Gen2::EntityStateHitWall>{}:
                    std::optional<Ent::Gen2::EntityStateHitWall>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateHitWall ResponsiblePointer_ActorState_::setEntityStateHitWall()
        {
            return Ent::Gen2::EntityStateHitWall(getProperty().setUnionType("EntityStateHitWall"));
        }
        inline std::optional<Ent::Gen2::EntityStateHoldingStaffVertebras> ResponsiblePointer_ActorState_::EntityStateHoldingStaffVertebras()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateHoldingStaffVertebras") != 0?
                    std::optional<Ent::Gen2::EntityStateHoldingStaffVertebras>{}:
                    std::optional<Ent::Gen2::EntityStateHoldingStaffVertebras>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateHoldingStaffVertebras ResponsiblePointer_ActorState_::setEntityStateHoldingStaffVertebras()
        {
            return Ent::Gen2::EntityStateHoldingStaffVertebras(getProperty().setUnionType("EntityStateHoldingStaffVertebras"));
        }
        inline std::optional<Ent::Gen2::EntityStateImmersedJump> ResponsiblePointer_ActorState_::EntityStateImmersedJump()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateImmersedJump") != 0?
                    std::optional<Ent::Gen2::EntityStateImmersedJump>{}:
                    std::optional<Ent::Gen2::EntityStateImmersedJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateImmersedJump ResponsiblePointer_ActorState_::setEntityStateImmersedJump()
        {
            return Ent::Gen2::EntityStateImmersedJump(getProperty().setUnionType("EntityStateImmersedJump"));
        }
        inline std::optional<Ent::Gen2::EntityStateInVertebraeArea> ResponsiblePointer_ActorState_::EntityStateInVertebraeArea()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateInVertebraeArea") != 0?
                    std::optional<Ent::Gen2::EntityStateInVertebraeArea>{}:
                    std::optional<Ent::Gen2::EntityStateInVertebraeArea>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateInVertebraeArea ResponsiblePointer_ActorState_::setEntityStateInVertebraeArea()
        {
            return Ent::Gen2::EntityStateInVertebraeArea(getProperty().setUnionType("EntityStateInVertebraeArea"));
        }
        inline std::optional<Ent::Gen2::EntityStateIncapacitated> ResponsiblePointer_ActorState_::EntityStateIncapacitated()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateIncapacitated") != 0?
                    std::optional<Ent::Gen2::EntityStateIncapacitated>{}:
                    std::optional<Ent::Gen2::EntityStateIncapacitated>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateIncapacitated ResponsiblePointer_ActorState_::setEntityStateIncapacitated()
        {
            return Ent::Gen2::EntityStateIncapacitated(getProperty().setUnionType("EntityStateIncapacitated"));
        }
        inline std::optional<Ent::Gen2::EntityStateInconvertible> ResponsiblePointer_ActorState_::EntityStateInconvertible()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateInconvertible") != 0?
                    std::optional<Ent::Gen2::EntityStateInconvertible>{}:
                    std::optional<Ent::Gen2::EntityStateInconvertible>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateInconvertible ResponsiblePointer_ActorState_::setEntityStateInconvertible()
        {
            return Ent::Gen2::EntityStateInconvertible(getProperty().setUnionType("EntityStateInconvertible"));
        }
        inline std::optional<Ent::Gen2::EntityStateInjured> ResponsiblePointer_ActorState_::EntityStateInjured()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateInjured") != 0?
                    std::optional<Ent::Gen2::EntityStateInjured>{}:
                    std::optional<Ent::Gen2::EntityStateInjured>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateInjured ResponsiblePointer_ActorState_::setEntityStateInjured()
        {
            return Ent::Gen2::EntityStateInjured(getProperty().setUnionType("EntityStateInjured"));
        }
        inline std::optional<Ent::Gen2::EntityStateInteractedGPE> ResponsiblePointer_ActorState_::EntityStateInteractedGPE()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateInteractedGPE") != 0?
                    std::optional<Ent::Gen2::EntityStateInteractedGPE>{}:
                    std::optional<Ent::Gen2::EntityStateInteractedGPE>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateInteractedGPE ResponsiblePointer_ActorState_::setEntityStateInteractedGPE()
        {
            return Ent::Gen2::EntityStateInteractedGPE(getProperty().setUnionType("EntityStateInteractedGPE"));
        }
        inline std::optional<Ent::Gen2::EntityStateJumpHeightMultiplier> ResponsiblePointer_ActorState_::EntityStateJumpHeightMultiplier()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateJumpHeightMultiplier") != 0?
                    std::optional<Ent::Gen2::EntityStateJumpHeightMultiplier>{}:
                    std::optional<Ent::Gen2::EntityStateJumpHeightMultiplier>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateJumpHeightMultiplier ResponsiblePointer_ActorState_::setEntityStateJumpHeightMultiplier()
        {
            return Ent::Gen2::EntityStateJumpHeightMultiplier(getProperty().setUnionType("EntityStateJumpHeightMultiplier"));
        }
        inline std::optional<Ent::Gen2::EntityStateJustStarted> ResponsiblePointer_ActorState_::EntityStateJustStarted()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateJustStarted") != 0?
                    std::optional<Ent::Gen2::EntityStateJustStarted>{}:
                    std::optional<Ent::Gen2::EntityStateJustStarted>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateJustStarted ResponsiblePointer_ActorState_::setEntityStateJustStarted()
        {
            return Ent::Gen2::EntityStateJustStarted(getProperty().setUnionType("EntityStateJustStarted"));
        }
        inline std::optional<Ent::Gen2::EntityStateLateralDodge> ResponsiblePointer_ActorState_::EntityStateLateralDodge()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateLateralDodge") != 0?
                    std::optional<Ent::Gen2::EntityStateLateralDodge>{}:
                    std::optional<Ent::Gen2::EntityStateLateralDodge>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateLateralDodge ResponsiblePointer_ActorState_::setEntityStateLateralDodge()
        {
            return Ent::Gen2::EntityStateLateralDodge(getProperty().setUnionType("EntityStateLateralDodge"));
        }
        inline std::optional<Ent::Gen2::EntityStateLateralLand> ResponsiblePointer_ActorState_::EntityStateLateralLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateLateralLand") != 0?
                    std::optional<Ent::Gen2::EntityStateLateralLand>{}:
                    std::optional<Ent::Gen2::EntityStateLateralLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateLateralLand ResponsiblePointer_ActorState_::setEntityStateLateralLand()
        {
            return Ent::Gen2::EntityStateLateralLand(getProperty().setUnionType("EntityStateLateralLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateManageChildEntityPool> ResponsiblePointer_ActorState_::EntityStateManageChildEntityPool()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateManageChildEntityPool") != 0?
                    std::optional<Ent::Gen2::EntityStateManageChildEntityPool>{}:
                    std::optional<Ent::Gen2::EntityStateManageChildEntityPool>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateManageChildEntityPool ResponsiblePointer_ActorState_::setEntityStateManageChildEntityPool()
        {
            return Ent::Gen2::EntityStateManageChildEntityPool(getProperty().setUnionType("EntityStateManageChildEntityPool"));
        }
        inline std::optional<Ent::Gen2::EntityStateMask> ResponsiblePointer_ActorState_::EntityStateMask()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateMask") != 0?
                    std::optional<Ent::Gen2::EntityStateMask>{}:
                    std::optional<Ent::Gen2::EntityStateMask>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateMask ResponsiblePointer_ActorState_::setEntityStateMask()
        {
            return Ent::Gen2::EntityStateMask(getProperty().setUnionType("EntityStateMask"));
        }
        inline std::optional<Ent::Gen2::EntityStateMeditateToInteract> ResponsiblePointer_ActorState_::EntityStateMeditateToInteract()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateMeditateToInteract") != 0?
                    std::optional<Ent::Gen2::EntityStateMeditateToInteract>{}:
                    std::optional<Ent::Gen2::EntityStateMeditateToInteract>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateMeditateToInteract ResponsiblePointer_ActorState_::setEntityStateMeditateToInteract()
        {
            return Ent::Gen2::EntityStateMeditateToInteract(getProperty().setUnionType("EntityStateMeditateToInteract"));
        }
        inline std::optional<Ent::Gen2::EntityStateMineRespawning> ResponsiblePointer_ActorState_::EntityStateMineRespawning()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateMineRespawning") != 0?
                    std::optional<Ent::Gen2::EntityStateMineRespawning>{}:
                    std::optional<Ent::Gen2::EntityStateMineRespawning>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateMineRespawning ResponsiblePointer_ActorState_::setEntityStateMineRespawning()
        {
            return Ent::Gen2::EntityStateMineRespawning(getProperty().setUnionType("EntityStateMineRespawning"));
        }
        inline std::optional<Ent::Gen2::EntityStateMineScaling> ResponsiblePointer_ActorState_::EntityStateMineScaling()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateMineScaling") != 0?
                    std::optional<Ent::Gen2::EntityStateMineScaling>{}:
                    std::optional<Ent::Gen2::EntityStateMineScaling>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateMineScaling ResponsiblePointer_ActorState_::setEntityStateMineScaling()
        {
            return Ent::Gen2::EntityStateMineScaling(getProperty().setUnionType("EntityStateMineScaling"));
        }
        inline std::optional<Ent::Gen2::EntityStateMotionConstrained> ResponsiblePointer_ActorState_::EntityStateMotionConstrained()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateMotionConstrained") != 0?
                    std::optional<Ent::Gen2::EntityStateMotionConstrained>{}:
                    std::optional<Ent::Gen2::EntityStateMotionConstrained>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateMotionConstrained ResponsiblePointer_ActorState_::setEntityStateMotionConstrained()
        {
            return Ent::Gen2::EntityStateMotionConstrained(getProperty().setUnionType("EntityStateMotionConstrained"));
        }
        inline std::optional<Ent::Gen2::EntityStateMotionConstrainedLand> ResponsiblePointer_ActorState_::EntityStateMotionConstrainedLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateMotionConstrainedLand") != 0?
                    std::optional<Ent::Gen2::EntityStateMotionConstrainedLand>{}:
                    std::optional<Ent::Gen2::EntityStateMotionConstrainedLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateMotionConstrainedLand ResponsiblePointer_ActorState_::setEntityStateMotionConstrainedLand()
        {
            return Ent::Gen2::EntityStateMotionConstrainedLand(getProperty().setUnionType("EntityStateMotionConstrainedLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateMoveOnOffMeshLink> ResponsiblePointer_ActorState_::EntityStateMoveOnOffMeshLink()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateMoveOnOffMeshLink") != 0?
                    std::optional<Ent::Gen2::EntityStateMoveOnOffMeshLink>{}:
                    std::optional<Ent::Gen2::EntityStateMoveOnOffMeshLink>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateMoveOnOffMeshLink ResponsiblePointer_ActorState_::setEntityStateMoveOnOffMeshLink()
        {
            return Ent::Gen2::EntityStateMoveOnOffMeshLink(getProperty().setUnionType("EntityStateMoveOnOffMeshLink"));
        }
        inline std::optional<Ent::Gen2::EntityStateOrderingAttack> ResponsiblePointer_ActorState_::EntityStateOrderingAttack()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateOrderingAttack") != 0?
                    std::optional<Ent::Gen2::EntityStateOrderingAttack>{}:
                    std::optional<Ent::Gen2::EntityStateOrderingAttack>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateOrderingAttack ResponsiblePointer_ActorState_::setEntityStateOrderingAttack()
        {
            return Ent::Gen2::EntityStateOrderingAttack(getProperty().setUnionType("EntityStateOrderingAttack"));
        }
        inline std::optional<Ent::Gen2::EntityStateOrientedDrift> ResponsiblePointer_ActorState_::EntityStateOrientedDrift()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateOrientedDrift") != 0?
                    std::optional<Ent::Gen2::EntityStateOrientedDrift>{}:
                    std::optional<Ent::Gen2::EntityStateOrientedDrift>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateOrientedDrift ResponsiblePointer_ActorState_::setEntityStateOrientedDrift()
        {
            return Ent::Gen2::EntityStateOrientedDrift(getProperty().setUnionType("EntityStateOrientedDrift"));
        }
        inline std::optional<Ent::Gen2::EntityStateParried> ResponsiblePointer_ActorState_::EntityStateParried()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateParried") != 0?
                    std::optional<Ent::Gen2::EntityStateParried>{}:
                    std::optional<Ent::Gen2::EntityStateParried>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateParried ResponsiblePointer_ActorState_::setEntityStateParried()
        {
            return Ent::Gen2::EntityStateParried(getProperty().setUnionType("EntityStateParried"));
        }
        inline std::optional<Ent::Gen2::EntityStateParry> ResponsiblePointer_ActorState_::EntityStateParry()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateParry") != 0?
                    std::optional<Ent::Gen2::EntityStateParry>{}:
                    std::optional<Ent::Gen2::EntityStateParry>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateParry ResponsiblePointer_ActorState_::setEntityStateParry()
        {
            return Ent::Gen2::EntityStateParry(getProperty().setUnionType("EntityStateParry"));
        }
        inline std::optional<Ent::Gen2::EntityStateParryCooldown> ResponsiblePointer_ActorState_::EntityStateParryCooldown()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateParryCooldown") != 0?
                    std::optional<Ent::Gen2::EntityStateParryCooldown>{}:
                    std::optional<Ent::Gen2::EntityStateParryCooldown>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateParryCooldown ResponsiblePointer_ActorState_::setEntityStateParryCooldown()
        {
            return Ent::Gen2::EntityStateParryCooldown(getProperty().setUnionType("EntityStateParryCooldown"));
        }
        inline std::optional<Ent::Gen2::EntityStatePhysicsIdle> ResponsiblePointer_ActorState_::EntityStatePhysicsIdle()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStatePhysicsIdle") != 0?
                    std::optional<Ent::Gen2::EntityStatePhysicsIdle>{}:
                    std::optional<Ent::Gen2::EntityStatePhysicsIdle>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStatePhysicsIdle ResponsiblePointer_ActorState_::setEntityStatePhysicsIdle()
        {
            return Ent::Gen2::EntityStatePhysicsIdle(getProperty().setUnionType("EntityStatePhysicsIdle"));
        }
        inline std::optional<Ent::Gen2::EntityStatePhysicsMove> ResponsiblePointer_ActorState_::EntityStatePhysicsMove()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStatePhysicsMove") != 0?
                    std::optional<Ent::Gen2::EntityStatePhysicsMove>{}:
                    std::optional<Ent::Gen2::EntityStatePhysicsMove>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStatePhysicsMove ResponsiblePointer_ActorState_::setEntityStatePhysicsMove()
        {
            return Ent::Gen2::EntityStatePhysicsMove(getProperty().setUnionType("EntityStatePhysicsMove"));
        }
        inline std::optional<Ent::Gen2::EntityStatePickableDistributor> ResponsiblePointer_ActorState_::EntityStatePickableDistributor()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStatePickableDistributor") != 0?
                    std::optional<Ent::Gen2::EntityStatePickableDistributor>{}:
                    std::optional<Ent::Gen2::EntityStatePickableDistributor>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStatePickableDistributor ResponsiblePointer_ActorState_::setEntityStatePickableDistributor()
        {
            return Ent::Gen2::EntityStatePickableDistributor(getProperty().setUnionType("EntityStatePickableDistributor"));
        }
        inline std::optional<Ent::Gen2::EntityStatePlayer> ResponsiblePointer_ActorState_::EntityStatePlayer()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStatePlayer") != 0?
                    std::optional<Ent::Gen2::EntityStatePlayer>{}:
                    std::optional<Ent::Gen2::EntityStatePlayer>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStatePlayer ResponsiblePointer_ActorState_::setEntityStatePlayer()
        {
            return Ent::Gen2::EntityStatePlayer(getProperty().setUnionType("EntityStatePlayer"));
        }
        inline std::optional<Ent::Gen2::EntityStatePlungeLand> ResponsiblePointer_ActorState_::EntityStatePlungeLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStatePlungeLand") != 0?
                    std::optional<Ent::Gen2::EntityStatePlungeLand>{}:
                    std::optional<Ent::Gen2::EntityStatePlungeLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStatePlungeLand ResponsiblePointer_ActorState_::setEntityStatePlungeLand()
        {
            return Ent::Gen2::EntityStatePlungeLand(getProperty().setUnionType("EntityStatePlungeLand"));
        }
        inline std::optional<Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh> ResponsiblePointer_ActorState_::EntityStatePrepareToHoldingOnToNavigationMesh()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStatePrepareToHoldingOnToNavigationMesh") != 0?
                    std::optional<Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh>{}:
                    std::optional<Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh ResponsiblePointer_ActorState_::setEntityStatePrepareToHoldingOnToNavigationMesh()
        {
            return Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh(getProperty().setUnionType("EntityStatePrepareToHoldingOnToNavigationMesh"));
        }
        inline std::optional<Ent::Gen2::EntityStateRaise> ResponsiblePointer_ActorState_::EntityStateRaise()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateRaise") != 0?
                    std::optional<Ent::Gen2::EntityStateRaise>{}:
                    std::optional<Ent::Gen2::EntityStateRaise>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateRaise ResponsiblePointer_ActorState_::setEntityStateRaise()
        {
            return Ent::Gen2::EntityStateRaise(getProperty().setUnionType("EntityStateRaise"));
        }
        inline std::optional<Ent::Gen2::EntityStateReadyToGiveOrder> ResponsiblePointer_ActorState_::EntityStateReadyToGiveOrder()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateReadyToGiveOrder") != 0?
                    std::optional<Ent::Gen2::EntityStateReadyToGiveOrder>{}:
                    std::optional<Ent::Gen2::EntityStateReadyToGiveOrder>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateReadyToGiveOrder ResponsiblePointer_ActorState_::setEntityStateReadyToGiveOrder()
        {
            return Ent::Gen2::EntityStateReadyToGiveOrder(getProperty().setUnionType("EntityStateReadyToGiveOrder"));
        }
        inline std::optional<Ent::Gen2::EntityStateRecoverLand> ResponsiblePointer_ActorState_::EntityStateRecoverLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateRecoverLand") != 0?
                    std::optional<Ent::Gen2::EntityStateRecoverLand>{}:
                    std::optional<Ent::Gen2::EntityStateRecoverLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateRecoverLand ResponsiblePointer_ActorState_::setEntityStateRecoverLand()
        {
            return Ent::Gen2::EntityStateRecoverLand(getProperty().setUnionType("EntityStateRecoverLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateRegainCapacity> ResponsiblePointer_ActorState_::EntityStateRegainCapacity()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateRegainCapacity") != 0?
                    std::optional<Ent::Gen2::EntityStateRegainCapacity>{}:
                    std::optional<Ent::Gen2::EntityStateRegainCapacity>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateRegainCapacity ResponsiblePointer_ActorState_::setEntityStateRegainCapacity()
        {
            return Ent::Gen2::EntityStateRegainCapacity(getProperty().setUnionType("EntityStateRegainCapacity"));
        }
        inline std::optional<Ent::Gen2::EntityStateReserveMountSlots> ResponsiblePointer_ActorState_::EntityStateReserveMountSlots()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateReserveMountSlots") != 0?
                    std::optional<Ent::Gen2::EntityStateReserveMountSlots>{}:
                    std::optional<Ent::Gen2::EntityStateReserveMountSlots>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateReserveMountSlots ResponsiblePointer_ActorState_::setEntityStateReserveMountSlots()
        {
            return Ent::Gen2::EntityStateReserveMountSlots(getProperty().setUnionType("EntityStateReserveMountSlots"));
        }
        inline std::optional<Ent::Gen2::EntityStateRespawn> ResponsiblePointer_ActorState_::EntityStateRespawn()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateRespawn") != 0?
                    std::optional<Ent::Gen2::EntityStateRespawn>{}:
                    std::optional<Ent::Gen2::EntityStateRespawn>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateRespawn ResponsiblePointer_ActorState_::setEntityStateRespawn()
        {
            return Ent::Gen2::EntityStateRespawn(getProperty().setUnionType("EntityStateRespawn"));
        }
        inline std::optional<Ent::Gen2::EntityStateRespawnability> ResponsiblePointer_ActorState_::EntityStateRespawnability()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateRespawnability") != 0?
                    std::optional<Ent::Gen2::EntityStateRespawnability>{}:
                    std::optional<Ent::Gen2::EntityStateRespawnability>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateRespawnability ResponsiblePointer_ActorState_::setEntityStateRespawnability()
        {
            return Ent::Gen2::EntityStateRespawnability(getProperty().setUnionType("EntityStateRespawnability"));
        }
        inline std::optional<Ent::Gen2::EntityStateRevive> ResponsiblePointer_ActorState_::EntityStateRevive()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateRevive") != 0?
                    std::optional<Ent::Gen2::EntityStateRevive>{}:
                    std::optional<Ent::Gen2::EntityStateRevive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateRevive ResponsiblePointer_ActorState_::setEntityStateRevive()
        {
            return Ent::Gen2::EntityStateRevive(getProperty().setUnionType("EntityStateRevive"));
        }
        inline std::optional<Ent::Gen2::EntityStateSavePointActivated> ResponsiblePointer_ActorState_::EntityStateSavePointActivated()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSavePointActivated") != 0?
                    std::optional<Ent::Gen2::EntityStateSavePointActivated>{}:
                    std::optional<Ent::Gen2::EntityStateSavePointActivated>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSavePointActivated ResponsiblePointer_ActorState_::setEntityStateSavePointActivated()
        {
            return Ent::Gen2::EntityStateSavePointActivated(getProperty().setUnionType("EntityStateSavePointActivated"));
        }
        inline std::optional<Ent::Gen2::EntityStateSetSavePoint> ResponsiblePointer_ActorState_::EntityStateSetSavePoint()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSetSavePoint") != 0?
                    std::optional<Ent::Gen2::EntityStateSetSavePoint>{}:
                    std::optional<Ent::Gen2::EntityStateSetSavePoint>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSetSavePoint ResponsiblePointer_ActorState_::setEntityStateSetSavePoint()
        {
            return Ent::Gen2::EntityStateSetSavePoint(getProperty().setUnionType("EntityStateSetSavePoint"));
        }
        inline std::optional<Ent::Gen2::EntityStateShootHatchingEnergy> ResponsiblePointer_ActorState_::EntityStateShootHatchingEnergy()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateShootHatchingEnergy") != 0?
                    std::optional<Ent::Gen2::EntityStateShootHatchingEnergy>{}:
                    std::optional<Ent::Gen2::EntityStateShootHatchingEnergy>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateShootHatchingEnergy ResponsiblePointer_ActorState_::setEntityStateShootHatchingEnergy()
        {
            return Ent::Gen2::EntityStateShootHatchingEnergy(getProperty().setUnionType("EntityStateShootHatchingEnergy"));
        }
        inline std::optional<Ent::Gen2::EntityStateSlowMotion> ResponsiblePointer_ActorState_::EntityStateSlowMotion()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSlowMotion") != 0?
                    std::optional<Ent::Gen2::EntityStateSlowMotion>{}:
                    std::optional<Ent::Gen2::EntityStateSlowMotion>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSlowMotion ResponsiblePointer_ActorState_::setEntityStateSlowMotion()
        {
            return Ent::Gen2::EntityStateSlowMotion(getProperty().setUnionType("EntityStateSlowMotion"));
        }
        inline std::optional<Ent::Gen2::EntityStateSnappedToHatchingTarget> ResponsiblePointer_ActorState_::EntityStateSnappedToHatchingTarget()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSnappedToHatchingTarget") != 0?
                    std::optional<Ent::Gen2::EntityStateSnappedToHatchingTarget>{}:
                    std::optional<Ent::Gen2::EntityStateSnappedToHatchingTarget>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSnappedToHatchingTarget ResponsiblePointer_ActorState_::setEntityStateSnappedToHatchingTarget()
        {
            return Ent::Gen2::EntityStateSnappedToHatchingTarget(getProperty().setUnionType("EntityStateSnappedToHatchingTarget"));
        }
        inline std::optional<Ent::Gen2::EntityStateSoftCollide> ResponsiblePointer_ActorState_::EntityStateSoftCollide()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSoftCollide") != 0?
                    std::optional<Ent::Gen2::EntityStateSoftCollide>{}:
                    std::optional<Ent::Gen2::EntityStateSoftCollide>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSoftCollide ResponsiblePointer_ActorState_::setEntityStateSoftCollide()
        {
            return Ent::Gen2::EntityStateSoftCollide(getProperty().setUnionType("EntityStateSoftCollide"));
        }
        inline std::optional<Ent::Gen2::EntityStateSpeedLimiter> ResponsiblePointer_ActorState_::EntityStateSpeedLimiter()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSpeedLimiter") != 0?
                    std::optional<Ent::Gen2::EntityStateSpeedLimiter>{}:
                    std::optional<Ent::Gen2::EntityStateSpeedLimiter>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSpeedLimiter ResponsiblePointer_ActorState_::setEntityStateSpeedLimiter()
        {
            return Ent::Gen2::EntityStateSpeedLimiter(getProperty().setUnionType("EntityStateSpeedLimiter"));
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAnimalBeingCalled> ResponsiblePointer_ActorState_::EntityStateSpiritAnimalBeingCalled()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSpiritAnimalBeingCalled") != 0?
                    std::optional<Ent::Gen2::EntityStateSpiritAnimalBeingCalled>{}:
                    std::optional<Ent::Gen2::EntityStateSpiritAnimalBeingCalled>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSpiritAnimalBeingCalled ResponsiblePointer_ActorState_::setEntityStateSpiritAnimalBeingCalled()
        {
            return Ent::Gen2::EntityStateSpiritAnimalBeingCalled(getProperty().setUnionType("EntityStateSpiritAnimalBeingCalled"));
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAnimalFleshForm> ResponsiblePointer_ActorState_::EntityStateSpiritAnimalFleshForm()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSpiritAnimalFleshForm") != 0?
                    std::optional<Ent::Gen2::EntityStateSpiritAnimalFleshForm>{}:
                    std::optional<Ent::Gen2::EntityStateSpiritAnimalFleshForm>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSpiritAnimalFleshForm ResponsiblePointer_ActorState_::setEntityStateSpiritAnimalFleshForm()
        {
            return Ent::Gen2::EntityStateSpiritAnimalFleshForm(getProperty().setUnionType("EntityStateSpiritAnimalFleshForm"));
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAnimalSoulForm> ResponsiblePointer_ActorState_::EntityStateSpiritAnimalSoulForm()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSpiritAnimalSoulForm") != 0?
                    std::optional<Ent::Gen2::EntityStateSpiritAnimalSoulForm>{}:
                    std::optional<Ent::Gen2::EntityStateSpiritAnimalSoulForm>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSpiritAnimalSoulForm ResponsiblePointer_ActorState_::setEntityStateSpiritAnimalSoulForm()
        {
            return Ent::Gen2::EntityStateSpiritAnimalSoulForm(getProperty().setUnionType("EntityStateSpiritAnimalSoulForm"));
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAttack> ResponsiblePointer_ActorState_::EntityStateSpiritAttack()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSpiritAttack") != 0?
                    std::optional<Ent::Gen2::EntityStateSpiritAttack>{}:
                    std::optional<Ent::Gen2::EntityStateSpiritAttack>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSpiritAttack ResponsiblePointer_ActorState_::setEntityStateSpiritAttack()
        {
            return Ent::Gen2::EntityStateSpiritAttack(getProperty().setUnionType("EntityStateSpiritAttack"));
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAttacked> ResponsiblePointer_ActorState_::EntityStateSpiritAttacked()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSpiritAttacked") != 0?
                    std::optional<Ent::Gen2::EntityStateSpiritAttacked>{}:
                    std::optional<Ent::Gen2::EntityStateSpiritAttacked>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSpiritAttacked ResponsiblePointer_ActorState_::setEntityStateSpiritAttacked()
        {
            return Ent::Gen2::EntityStateSpiritAttacked(getProperty().setUnionType("EntityStateSpiritAttacked"));
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritShrineDisabled> ResponsiblePointer_ActorState_::EntityStateSpiritShrineDisabled()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSpiritShrineDisabled") != 0?
                    std::optional<Ent::Gen2::EntityStateSpiritShrineDisabled>{}:
                    std::optional<Ent::Gen2::EntityStateSpiritShrineDisabled>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSpiritShrineDisabled ResponsiblePointer_ActorState_::setEntityStateSpiritShrineDisabled()
        {
            return Ent::Gen2::EntityStateSpiritShrineDisabled(getProperty().setUnionType("EntityStateSpiritShrineDisabled"));
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritShrineEnabled> ResponsiblePointer_ActorState_::EntityStateSpiritShrineEnabled()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateSpiritShrineEnabled") != 0?
                    std::optional<Ent::Gen2::EntityStateSpiritShrineEnabled>{}:
                    std::optional<Ent::Gen2::EntityStateSpiritShrineEnabled>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateSpiritShrineEnabled ResponsiblePointer_ActorState_::setEntityStateSpiritShrineEnabled()
        {
            return Ent::Gen2::EntityStateSpiritShrineEnabled(getProperty().setUnionType("EntityStateSpiritShrineEnabled"));
        }
        inline std::optional<Ent::Gen2::EntityStateStaffOwnedVertebras> ResponsiblePointer_ActorState_::EntityStateStaffOwnedVertebras()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStaffOwnedVertebras") != 0?
                    std::optional<Ent::Gen2::EntityStateStaffOwnedVertebras>{}:
                    std::optional<Ent::Gen2::EntityStateStaffOwnedVertebras>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStaffOwnedVertebras ResponsiblePointer_ActorState_::setEntityStateStaffOwnedVertebras()
        {
            return Ent::Gen2::EntityStateStaffOwnedVertebras(getProperty().setUnionType("EntityStateStaffOwnedVertebras"));
        }
        inline std::optional<Ent::Gen2::EntityStateStaffVertebrasAutoRefill> ResponsiblePointer_ActorState_::EntityStateStaffVertebrasAutoRefill()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStaffVertebrasAutoRefill") != 0?
                    std::optional<Ent::Gen2::EntityStateStaffVertebrasAutoRefill>{}:
                    std::optional<Ent::Gen2::EntityStateStaffVertebrasAutoRefill>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStaffVertebrasAutoRefill ResponsiblePointer_ActorState_::setEntityStateStaffVertebrasAutoRefill()
        {
            return Ent::Gen2::EntityStateStaffVertebrasAutoRefill(getProperty().setUnionType("EntityStateStaffVertebrasAutoRefill"));
        }
        inline std::optional<Ent::Gen2::EntityStateStalactiteFallen> ResponsiblePointer_ActorState_::EntityStateStalactiteFallen()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStalactiteFallen") != 0?
                    std::optional<Ent::Gen2::EntityStateStalactiteFallen>{}:
                    std::optional<Ent::Gen2::EntityStateStalactiteFallen>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStalactiteFallen ResponsiblePointer_ActorState_::setEntityStateStalactiteFallen()
        {
            return Ent::Gen2::EntityStateStalactiteFallen(getProperty().setUnionType("EntityStateStalactiteFallen"));
        }
        inline std::optional<Ent::Gen2::EntityStateStalactiteReadyToFall> ResponsiblePointer_ActorState_::EntityStateStalactiteReadyToFall()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStalactiteReadyToFall") != 0?
                    std::optional<Ent::Gen2::EntityStateStalactiteReadyToFall>{}:
                    std::optional<Ent::Gen2::EntityStateStalactiteReadyToFall>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStalactiteReadyToFall ResponsiblePointer_ActorState_::setEntityStateStalactiteReadyToFall()
        {
            return Ent::Gen2::EntityStateStalactiteReadyToFall(getProperty().setUnionType("EntityStateStalactiteReadyToFall"));
        }
        inline std::optional<Ent::Gen2::EntityStateStickedLand> ResponsiblePointer_ActorState_::EntityStateStickedLand()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStickedLand") != 0?
                    std::optional<Ent::Gen2::EntityStateStickedLand>{}:
                    std::optional<Ent::Gen2::EntityStateStickedLand>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStickedLand ResponsiblePointer_ActorState_::setEntityStateStickedLand()
        {
            return Ent::Gen2::EntityStateStickedLand(getProperty().setUnionType("EntityStateStickedLand"));
        }
        inline std::optional<Ent::Gen2::EntityStateStrafeDodge> ResponsiblePointer_ActorState_::EntityStateStrafeDodge()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStrafeDodge") != 0?
                    std::optional<Ent::Gen2::EntityStateStrafeDodge>{}:
                    std::optional<Ent::Gen2::EntityStateStrafeDodge>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStrafeDodge ResponsiblePointer_ActorState_::setEntityStateStrafeDodge()
        {
            return Ent::Gen2::EntityStateStrafeDodge(getProperty().setUnionType("EntityStateStrafeDodge"));
        }
        inline std::optional<Ent::Gen2::EntityStateStrongAttack> ResponsiblePointer_ActorState_::EntityStateStrongAttack()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStrongAttack") != 0?
                    std::optional<Ent::Gen2::EntityStateStrongAttack>{}:
                    std::optional<Ent::Gen2::EntityStateStrongAttack>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStrongAttack ResponsiblePointer_ActorState_::setEntityStateStrongAttack()
        {
            return Ent::Gen2::EntityStateStrongAttack(getProperty().setUnionType("EntityStateStrongAttack"));
        }
        inline std::optional<Ent::Gen2::EntityStateStrongAttackCharged> ResponsiblePointer_ActorState_::EntityStateStrongAttackCharged()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStrongAttackCharged") != 0?
                    std::optional<Ent::Gen2::EntityStateStrongAttackCharged>{}:
                    std::optional<Ent::Gen2::EntityStateStrongAttackCharged>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStrongAttackCharged ResponsiblePointer_ActorState_::setEntityStateStrongAttackCharged()
        {
            return Ent::Gen2::EntityStateStrongAttackCharged(getProperty().setUnionType("EntityStateStrongAttackCharged"));
        }
        inline std::optional<Ent::Gen2::EntityStateStrongAttackCharging> ResponsiblePointer_ActorState_::EntityStateStrongAttackCharging()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStrongAttackCharging") != 0?
                    std::optional<Ent::Gen2::EntityStateStrongAttackCharging>{}:
                    std::optional<Ent::Gen2::EntityStateStrongAttackCharging>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStrongAttackCharging ResponsiblePointer_ActorState_::setEntityStateStrongAttackCharging()
        {
            return Ent::Gen2::EntityStateStrongAttackCharging(getProperty().setUnionType("EntityStateStrongAttackCharging"));
        }
        inline std::optional<Ent::Gen2::EntityStateStrongAttackJumped> ResponsiblePointer_ActorState_::EntityStateStrongAttackJumped()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateStrongAttackJumped") != 0?
                    std::optional<Ent::Gen2::EntityStateStrongAttackJumped>{}:
                    std::optional<Ent::Gen2::EntityStateStrongAttackJumped>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateStrongAttackJumped ResponsiblePointer_ActorState_::setEntityStateStrongAttackJumped()
        {
            return Ent::Gen2::EntityStateStrongAttackJumped(getProperty().setUnionType("EntityStateStrongAttackJumped"));
        }
        inline std::optional<Ent::Gen2::EntityStateTakeDamageOnMount> ResponsiblePointer_ActorState_::EntityStateTakeDamageOnMount()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateTakeDamageOnMount") != 0?
                    std::optional<Ent::Gen2::EntityStateTakeDamageOnMount>{}:
                    std::optional<Ent::Gen2::EntityStateTakeDamageOnMount>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateTakeDamageOnMount ResponsiblePointer_ActorState_::setEntityStateTakeDamageOnMount()
        {
            return Ent::Gen2::EntityStateTakeDamageOnMount(getProperty().setUnionType("EntityStateTakeDamageOnMount"));
        }
        inline std::optional<Ent::Gen2::EntityStateTooDeep> ResponsiblePointer_ActorState_::EntityStateTooDeep()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateTooDeep") != 0?
                    std::optional<Ent::Gen2::EntityStateTooDeep>{}:
                    std::optional<Ent::Gen2::EntityStateTooDeep>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateTooDeep ResponsiblePointer_ActorState_::setEntityStateTooDeep()
        {
            return Ent::Gen2::EntityStateTooDeep(getProperty().setUnionType("EntityStateTooDeep"));
        }
        inline std::optional<Ent::Gen2::EntityStateTreeMetamorphosis> ResponsiblePointer_ActorState_::EntityStateTreeMetamorphosis()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateTreeMetamorphosis") != 0?
                    std::optional<Ent::Gen2::EntityStateTreeMetamorphosis>{}:
                    std::optional<Ent::Gen2::EntityStateTreeMetamorphosis>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateTreeMetamorphosis ResponsiblePointer_ActorState_::setEntityStateTreeMetamorphosis()
        {
            return Ent::Gen2::EntityStateTreeMetamorphosis(getProperty().setUnionType("EntityStateTreeMetamorphosis"));
        }
        inline std::optional<Ent::Gen2::EntityStateTreeMetamorphosisUsingScale> ResponsiblePointer_ActorState_::EntityStateTreeMetamorphosisUsingScale()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateTreeMetamorphosisUsingScale") != 0?
                    std::optional<Ent::Gen2::EntityStateTreeMetamorphosisUsingScale>{}:
                    std::optional<Ent::Gen2::EntityStateTreeMetamorphosisUsingScale>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateTreeMetamorphosisUsingScale ResponsiblePointer_ActorState_::setEntityStateTreeMetamorphosisUsingScale()
        {
            return Ent::Gen2::EntityStateTreeMetamorphosisUsingScale(getProperty().setUnionType("EntityStateTreeMetamorphosisUsingScale"));
        }
        inline std::optional<Ent::Gen2::EntityStateTreeSwitchTransition> ResponsiblePointer_ActorState_::EntityStateTreeSwitchTransition()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateTreeSwitchTransition") != 0?
                    std::optional<Ent::Gen2::EntityStateTreeSwitchTransition>{}:
                    std::optional<Ent::Gen2::EntityStateTreeSwitchTransition>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateTreeSwitchTransition ResponsiblePointer_ActorState_::setEntityStateTreeSwitchTransition()
        {
            return Ent::Gen2::EntityStateTreeSwitchTransition(getProperty().setUnionType("EntityStateTreeSwitchTransition"));
        }
        inline std::optional<Ent::Gen2::EntityStateTreeTurretTargeting> ResponsiblePointer_ActorState_::EntityStateTreeTurretTargeting()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateTreeTurretTargeting") != 0?
                    std::optional<Ent::Gen2::EntityStateTreeTurretTargeting>{}:
                    std::optional<Ent::Gen2::EntityStateTreeTurretTargeting>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateTreeTurretTargeting ResponsiblePointer_ActorState_::setEntityStateTreeTurretTargeting()
        {
            return Ent::Gen2::EntityStateTreeTurretTargeting(getProperty().setUnionType("EntityStateTreeTurretTargeting"));
        }
        inline std::optional<Ent::Gen2::EntityStateTriggerBeamTargetEvent> ResponsiblePointer_ActorState_::EntityStateTriggerBeamTargetEvent()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateTriggerBeamTargetEvent") != 0?
                    std::optional<Ent::Gen2::EntityStateTriggerBeamTargetEvent>{}:
                    std::optional<Ent::Gen2::EntityStateTriggerBeamTargetEvent>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateTriggerBeamTargetEvent ResponsiblePointer_ActorState_::setEntityStateTriggerBeamTargetEvent()
        {
            return Ent::Gen2::EntityStateTriggerBeamTargetEvent(getProperty().setUnionType("EntityStateTriggerBeamTargetEvent"));
        }
        inline std::optional<Ent::Gen2::EntityStateTryUnmount> ResponsiblePointer_ActorState_::EntityStateTryUnmount()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateTryUnmount") != 0?
                    std::optional<Ent::Gen2::EntityStateTryUnmount>{}:
                    std::optional<Ent::Gen2::EntityStateTryUnmount>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateTryUnmount ResponsiblePointer_ActorState_::setEntityStateTryUnmount()
        {
            return Ent::Gen2::EntityStateTryUnmount(getProperty().setUnionType("EntityStateTryUnmount"));
        }
        inline std::optional<Ent::Gen2::EntityStateUndergroundCavity> ResponsiblePointer_ActorState_::EntityStateUndergroundCavity()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateUndergroundCavity") != 0?
                    std::optional<Ent::Gen2::EntityStateUndergroundCavity>{}:
                    std::optional<Ent::Gen2::EntityStateUndergroundCavity>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateUndergroundCavity ResponsiblePointer_ActorState_::setEntityStateUndergroundCavity()
        {
            return Ent::Gen2::EntityStateUndergroundCavity(getProperty().setUnionType("EntityStateUndergroundCavity"));
        }
        inline std::optional<Ent::Gen2::EntityStateUseAsActiveCheckpoint> ResponsiblePointer_ActorState_::EntityStateUseAsActiveCheckpoint()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateUseAsActiveCheckpoint") != 0?
                    std::optional<Ent::Gen2::EntityStateUseAsActiveCheckpoint>{}:
                    std::optional<Ent::Gen2::EntityStateUseAsActiveCheckpoint>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateUseAsActiveCheckpoint ResponsiblePointer_ActorState_::setEntityStateUseAsActiveCheckpoint()
        {
            return Ent::Gen2::EntityStateUseAsActiveCheckpoint(getProperty().setUnionType("EntityStateUseAsActiveCheckpoint"));
        }
        inline std::optional<Ent::Gen2::EntityStateWaitToJumpAgain> ResponsiblePointer_ActorState_::EntityStateWaitToJumpAgain()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateWaitToJumpAgain") != 0?
                    std::optional<Ent::Gen2::EntityStateWaitToJumpAgain>{}:
                    std::optional<Ent::Gen2::EntityStateWaitToJumpAgain>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateWaitToJumpAgain ResponsiblePointer_ActorState_::setEntityStateWaitToJumpAgain()
        {
            return Ent::Gen2::EntityStateWaitToJumpAgain(getProperty().setUnionType("EntityStateWaitToJumpAgain"));
        }
        inline std::optional<Ent::Gen2::EntityStateWallRun> ResponsiblePointer_ActorState_::EntityStateWallRun()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateWallRun") != 0?
                    std::optional<Ent::Gen2::EntityStateWallRun>{}:
                    std::optional<Ent::Gen2::EntityStateWallRun>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateWallRun ResponsiblePointer_ActorState_::setEntityStateWallRun()
        {
            return Ent::Gen2::EntityStateWallRun(getProperty().setUnionType("EntityStateWallRun"));
        }
        inline std::optional<Ent::Gen2::EntityStateWallRunDrop> ResponsiblePointer_ActorState_::EntityStateWallRunDrop()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateWallRunDrop") != 0?
                    std::optional<Ent::Gen2::EntityStateWallRunDrop>{}:
                    std::optional<Ent::Gen2::EntityStateWallRunDrop>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateWallRunDrop ResponsiblePointer_ActorState_::setEntityStateWallRunDrop()
        {
            return Ent::Gen2::EntityStateWallRunDrop(getProperty().setUnionType("EntityStateWallRunDrop"));
        }
        inline std::optional<Ent::Gen2::EntityStateWallRunJump> ResponsiblePointer_ActorState_::EntityStateWallRunJump()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateWallRunJump") != 0?
                    std::optional<Ent::Gen2::EntityStateWallRunJump>{}:
                    std::optional<Ent::Gen2::EntityStateWallRunJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateWallRunJump ResponsiblePointer_ActorState_::setEntityStateWallRunJump()
        {
            return Ent::Gen2::EntityStateWallRunJump(getProperty().setUnionType("EntityStateWallRunJump"));
        }
        inline std::optional<Ent::Gen2::EntityStateWaterfallEndJump> ResponsiblePointer_ActorState_::EntityStateWaterfallEndJump()
        {
            return strcmp(
                getProperty().getUnionType(), "EntityStateWaterfallEndJump") != 0?
                    std::optional<Ent::Gen2::EntityStateWaterfallEndJump>{}:
                    std::optional<Ent::Gen2::EntityStateWaterfallEndJump>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EntityStateWaterfallEndJump ResponsiblePointer_ActorState_::setEntityStateWaterfallEndJump()
        {
            return Ent::Gen2::EntityStateWaterfallEndJump(getProperty().setUnionType("EntityStateWaterfallEndJump"));
        }
        // SpawnState
        inline Ent::Gen2::String SpawnState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool SpawnState::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::ResponsiblePointer_ActorState_ SpawnState::val() const
        {
            return Ent::Gen2::ResponsiblePointer_ActorState_(getProperty().getObjectField("val"));
        }
        // RespawnState
        inline Ent::Gen2::String RespawnState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool RespawnState::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::ResponsiblePointer_ActorState_ RespawnState::val() const
        {
            return Ent::Gen2::ResponsiblePointer_ActorState_(getProperty().getObjectField("val"));
        }
        // RenderManager_DepthOfFieldConfig
        inline Ent::Gen2::Float RenderManager_DepthOfFieldConfig::FarTransitionDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FarTransitionDistance"));
        }
        inline Ent::Gen2::Float RenderManager_DepthOfFieldConfig::Multiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Multiplier"));
        }
        inline Ent::Gen2::Float RenderManager_DepthOfFieldConfig::NearTransitionDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NearTransitionDistance"));
        }
        inline Ent::Gen2::String RenderManager_DepthOfFieldConfig::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RegenerationManager_EnergyAreaSetting
        inline Ent::Gen2::Float RegenerationManager_EnergyAreaSetting::RegenValue() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RegenValue"));
        }
        inline Ent::Gen2::Float RegenerationManager_EnergyAreaSetting::SmoothMargin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SmoothMargin"));
        }
        inline Ent::Gen2::String RegenerationManager_EnergyAreaSetting::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RegenAreaTransitionSettings
        inline Ent::Gen2::ScaleConverter RegenAreaTransitionSettings::TransitionWaveRadialSpeed() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("TransitionWaveRadialSpeed"));
        }
        inline Ent::Gen2::Float RegenAreaTransitionSettings::TransitionWaveWidth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TransitionWaveWidth"));
        }
        inline Ent::Gen2::String RegenAreaTransitionSettings::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TransitionSettings
        inline Ent::Gen2::String TransitionSettings::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool TransitionSettings::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::RegenAreaTransitionSettings TransitionSettings::val() const
        {
            return Ent::Gen2::RegenAreaTransitionSettings(getProperty().getObjectField("val"));
        }
        // ReflectionTools_EnumSchema
        inline Ent::Gen2::String ReflectionTools_EnumSchema::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline PrimArray<Ent::Gen2::String> ReflectionTools_EnumSchema::Values() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("Values"));
        }
        inline Ent::Gen2::String ReflectionTools_EnumSchema::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline PrimArray<Ent::Gen2::String> ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods::ParamTypes() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("ParamTypes"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods::ReturnType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ReturnType"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData::Type_() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Type"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember::Type_() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Type"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Bool ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency::Optional() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Optional"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectionTools_FlatBufferSchemaDependenciesExporter
        inline Ent::Gen2::String ReflectionTools_FlatBufferSchemaDependenciesExporter::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String ReflectionTools_FlatBufferSchemaDependenciesExporter::className() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("className"));
        }
        inline Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> ReflectionTools_FlatBufferSchemaDependenciesExporter::dependencies() const
        {
            return Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency>(getProperty().getObjectField("dependencies"));
        }
        // ReflectionTools_ClassReflectionSchema
        inline PrimArray<Ent::Gen2::String> ReflectionTools_ClassReflectionSchema::BaseRecursive() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("BaseRecursive"));
        }
        inline Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency> ReflectionTools_ClassReflectionSchema::Dependencies() const
        {
            return Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency>(getProperty().getObjectField("Dependencies"));
        }
        inline Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember> ReflectionTools_ClassReflectionSchema::Members() const
        {
            return Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember>(getProperty().getObjectField("Members"));
        }
        inline Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData> ReflectionTools_ClassReflectionSchema::Metadata() const
        {
            return Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData>(getProperty().getObjectField("Metadata"));
        }
        inline Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> ReflectionTools_ClassReflectionSchema::Methods() const
        {
            return Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods>(getProperty().getObjectField("Methods"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> ReflectionTools_ClassReflectionSchema::RPCMethods() const
        {
            return Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods>(getProperty().getObjectField("RPCMethods"));
        }
        inline Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods> ReflectionTools_ClassReflectionSchema::Signals() const
        {
            return Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods>(getProperty().getObjectField("Signals"));
        }
        inline Ent::Gen2::String ReflectionTools_ClassReflectionSchema::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectionTools_ReflectionSchema
        inline Array<Ent::Gen2::ReflectionTools_EnumSchema> ReflectionTools_ReflectionSchema::Enums() const
        {
            return Array<Ent::Gen2::ReflectionTools_EnumSchema>(getProperty().getObjectField("Enums"));
        }
        inline Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema> ReflectionTools_ReflectionSchema::Schemas() const
        {
            return Array<Ent::Gen2::ReflectionTools_ClassReflectionSchema>(getProperty().getObjectField("Schemas"));
        }
        inline Ent::Gen2::String ReflectionTools_ReflectionSchema::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectionMethodParameter
        inline Ent::Gen2::String ReflectionMethodParameter::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int ReflectionMethodParameter::containerType() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("containerType"));
        }
        inline Ent::Gen2::Int ReflectionMethodParameter::elementType() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("elementType"));
        }
        inline Ent::Gen2::String ReflectionMethodParameter::elementTypeName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("elementTypeName"));
        }
        inline Ent::Gen2::String ReflectionMethodParameter::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        inline Ent::Gen2::String ReflectionMethodParameter::typeName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("typeName"));
        }
        // ReflectionMethod
        inline Ent::Gen2::String ReflectionMethod::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::ReflectionMethodParameter> ReflectionMethod::inputs() const
        {
            return Array<Ent::Gen2::ReflectionMethodParameter>(getProperty().getObjectField("inputs"));
        }
        inline Ent::Gen2::String ReflectionMethod::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        inline Array<Ent::Gen2::ReflectionMethodParameter> ReflectionMethod::outputs() const
        {
            return Array<Ent::Gen2::ReflectionMethodParameter>(getProperty().getObjectField("outputs"));
        }
        inline Ent::Gen2::Bool ReflectionMethod::threadSafe() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("threadSafe"));
        }
        // ReflectionEnum
        inline Ent::Gen2::String ReflectionEnum::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String ReflectionEnum::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        inline PrimArray<Ent::Gen2::String> ReflectionEnum::names() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("names"));
        }
        inline PrimArray<Ent::Gen2::Int> ReflectionEnum::values() const
        {
            return PrimArray<Ent::Gen2::Int>(getProperty().getObjectField("values"));
        }
        // ReflectionClass
        inline Ent::Gen2::String ReflectionClass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::ReflectionMethod> ReflectionClass::methods() const
        {
            return Array<Ent::Gen2::ReflectionMethod>(getProperty().getObjectField("methods"));
        }
        inline Ent::Gen2::String ReflectionClass::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        // ReflectionDb
        inline Ent::Gen2::String ReflectionDb::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::ReflectionClass> ReflectionDb::classes() const
        {
            return Array<Ent::Gen2::ReflectionClass>(getProperty().getObjectField("classes"));
        }
        inline Array<Ent::Gen2::ReflectionEnum> ReflectionDb::enums() const
        {
            return Array<Ent::Gen2::ReflectionEnum>(getProperty().getObjectField("enums"));
        }
        // ReflectedMaterialGroup
        inline PrimArray<Ent::Gen2::String> ReflectedMaterialGroup::Materials() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("Materials"));
        }
        inline PrimArray<Ent::Gen2::String> ReflectedMaterialGroup::Tags() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String ReflectedMaterialGroup::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectedMaterialGroupVector
        inline Ent::Gen2::Map<char const*, Ent::Gen2::ReflectedMaterialGroup> ReflectedMaterialGroupVector::Groups() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::ReflectedMaterialGroup>(getProperty().getObjectField("Groups"));
        }
        inline Ent::Gen2::String ReflectedMaterialGroupVector::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectedDetailMaterial
        inline Ent::Gen2::String ReflectedDetailMaterial::AlbedoMap() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("AlbedoMap"));
        }
        inline Ent::Gen2::String ReflectedDetailMaterial::CavityMap() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("CavityMap"));
        }
        inline Ent::Gen2::Vector3i ReflectedDetailMaterial::DebugAlbedo() const
        {
            return Ent::Gen2::Vector3i(getProperty().getObjectField("DebugAlbedo"));
        }
        inline Ent::Gen2::String ReflectedDetailMaterial::EmissiveMap() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EmissiveMap"));
        }
        inline Ent::Gen2::String ReflectedDetailMaterial::HeightMap() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HeightMap"));
        }
        inline Ent::Gen2::String ReflectedDetailMaterial::NormalMap() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NormalMap"));
        }
        inline Ent::Gen2::String ReflectedDetailMaterial::RoughMap() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RoughMap"));
        }
        inline Ent::Gen2::String ReflectedDetailMaterial::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectedDetailMaterialVariants
        inline Ent::Gen2::String ReflectedDetailMaterialVariants::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::ReflectedDetailMaterial> ReflectedDetailMaterialVariants::Variants() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::ReflectedDetailMaterial>(getProperty().getObjectField("Variants"));
        }
        inline Ent::Gen2::String ReflectedDetailMaterialVariants::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReflectedDetailMaterialBank
        inline Array<Ent::Gen2::ReflectedDetailMaterialVariants> ReflectedDetailMaterialBank::Bank() const
        {
            return Array<Ent::Gen2::ReflectedDetailMaterialVariants>(getProperty().getObjectField("Bank"));
        }
        inline PrimArray<Ent::Gen2::String> ReflectedDetailMaterialBank::Filters() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("Filters"));
        }
        inline Ent::Gen2::ReflectedMaterialGroupVector ReflectedDetailMaterialBank::Groups() const
        {
            return Ent::Gen2::ReflectedMaterialGroupVector(getProperty().getObjectField("Groups"));
        }
        inline Ent::Gen2::String ReflectedDetailMaterialBank::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RecastNavmeshGenerationParameters
        inline Ent::Gen2::Float RecastNavmeshGenerationParameters::CreatureHeight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CreatureHeight"));
        }
        inline Ent::Gen2::Float RecastNavmeshGenerationParameters::CreatureRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CreatureRadius"));
        }
        inline Ent::Gen2::String RecastNavmeshGenerationParameters::CreatureType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("CreatureType"));
        }
        inline Ent::Gen2::Float RecastNavmeshGenerationParameters::DeepWaterDepth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DeepWaterDepth"));
        }
        inline Ent::Gen2::Bool RecastNavmeshGenerationParameters::MarkWaterAreas() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("MarkWaterAreas"));
        }
        inline Ent::Gen2::Float RecastNavmeshGenerationParameters::MaxClimbHeight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxClimbHeight"));
        }
        inline Ent::Gen2::Float RecastNavmeshGenerationParameters::MaxWalkableSlopeAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxWalkableSlopeAngle"));
        }
        inline Ent::Gen2::Float RecastNavmeshGenerationParameters::MinWaterDepth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinWaterDepth"));
        }
        inline Ent::Gen2::Float RecastNavmeshGenerationParameters::VoxelPrecision() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VoxelPrecision"));
        }
        inline Ent::Gen2::String RecastNavmeshGenerationParameters::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // sPhysicsJointDesc
        inline Ent::Gen2::sJointBallDesc sPhysicsJointDesc::Ball() const
        {
            return Ent::Gen2::sJointBallDesc(getProperty().getObjectField("Ball"));
        }
        inline Ent::Gen2::sJointFixedDesc sPhysicsJointDesc::Fixed() const
        {
            return Ent::Gen2::sJointFixedDesc(getProperty().getObjectField("Fixed"));
        }
        inline Ent::Gen2::sJointHingeDesc sPhysicsJointDesc::Hinge() const
        {
            return Ent::Gen2::sJointHingeDesc(getProperty().getObjectField("Hinge"));
        }
        inline Ent::Gen2::String sPhysicsJointDesc::JointType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("JointType"));
        }
        inline Ent::Gen2::sJointSliderDesc sPhysicsJointDesc::Slider() const
        {
            return Ent::Gen2::sJointSliderDesc(getProperty().getObjectField("Slider"));
        }
        inline Ent::Gen2::sJointSwingTwistDesc sPhysicsJointDesc::SwingTwist() const
        {
            return Ent::Gen2::sJointSwingTwistDesc(getProperty().getObjectField("SwingTwist"));
        }
        inline Ent::Gen2::sJointUniversalDesc sPhysicsJointDesc::Universal() const
        {
            return Ent::Gen2::sJointUniversalDesc(getProperty().getObjectField("Universal"));
        }
        inline Ent::Gen2::String sPhysicsJointDesc::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline PrimArray<Ent::Gen2::String> sPhysicsJointDesc::flags() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("flags"));
        }
        inline Ent::Gen2::Int sPhysicsJointDesc::idRigodBodyA() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("idRigodBodyA"));
        }
        inline Ent::Gen2::Int sPhysicsJointDesc::idRigodBodyB() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("idRigodBodyB"));
        }
        inline Ent::Gen2::Quat sPhysicsJointDesc::orientation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("orientation"));
        }
        inline Ent::Gen2::String sPhysicsJointDesc::parent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("parent"));
        }
        inline Ent::Gen2::Vector3 sPhysicsJointDesc::translation() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("translation"));
        }
        // sPhysicShape
        inline Ent::Gen2::sPhysicsShapeBox sPhysicShape::Box() const
        {
            return Ent::Gen2::sPhysicsShapeBox(getProperty().getObjectField("Box"));
        }
        inline Ent::Gen2::sPhysicsShapeCapsule sPhysicShape::Capsule() const
        {
            return Ent::Gen2::sPhysicsShapeCapsule(getProperty().getObjectField("Capsule"));
        }
        inline Ent::Gen2::sPhysicsShapeCylinder sPhysicShape::Cylinder() const
        {
            return Ent::Gen2::sPhysicsShapeCylinder(getProperty().getObjectField("Cylinder"));
        }
        inline Ent::Gen2::sPhysicsShapeMesh sPhysicShape::Mesh() const
        {
            return Ent::Gen2::sPhysicsShapeMesh(getProperty().getObjectField("Mesh"));
        }
        inline Ent::Gen2::String sPhysicShape::PhysicsMaterial() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PhysicsMaterial"));
        }
        inline Ent::Gen2::sPhysicsShapeSphere sPhysicShape::Sphere() const
        {
            return Ent::Gen2::sPhysicsShapeSphere(getProperty().getObjectField("Sphere"));
        }
        inline Ent::Gen2::String sPhysicShape::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 sPhysicShape::angles() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("angles"));
        }
        inline Ent::Gen2::Quat sPhysicShape::orientation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("orientation"));
        }
        inline Ent::Gen2::Float sPhysicShape::scale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("scale"));
        }
        inline Ent::Gen2::Vector3 sPhysicShape::translation() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("translation"));
        }
        // sRigidBodyDesc
        inline Ent::Gen2::String sRigidBodyDesc::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 sRigidBodyDesc::angles() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("angles"));
        }
        inline PrimArray<Ent::Gen2::String> sRigidBodyDesc::flags() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("flags"));
        }
        inline Ent::Gen2::Int sRigidBodyDesc::id() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("id"));
        }
        inline Ent::Gen2::String sRigidBodyDesc::motionType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("motionType"));
        }
        inline Ent::Gen2::Quat sRigidBodyDesc::orientation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("orientation"));
        }
        inline Ent::Gen2::String sRigidBodyDesc::parent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("parent"));
        }
        inline Ent::Gen2::Float sRigidBodyDesc::scale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("scale"));
        }
        inline Array<Ent::Gen2::sPhysicShape> sRigidBodyDesc::shapes() const
        {
            return Array<Ent::Gen2::sPhysicShape>(getProperty().getObjectField("shapes"));
        }
        inline Ent::Gen2::Vector3 sRigidBodyDesc::translation() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("translation"));
        }
        // Transform3D
        inline Ent::Gen2::String Transform3D::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Quat Transform3D::orientation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("orientation"));
        }
        inline Ent::Gen2::Vector3 Transform3D::scale() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("scale"));
        }
        inline Ent::Gen2::Vector3 Transform3D::translation() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("translation"));
        }
        // ProjectileShooterData
        inline Ent::Gen2::EntityRef ProjectileShooterData::SubEntity() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("SubEntity"));
        }
        inline Ent::Gen2::String ProjectileShooterData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ProjectileData
        inline Ent::Gen2::String ProjectileData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ProjectileData::canCollideWithOtherProjectiles() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("canCollideWithOtherProjectiles"));
        }
        inline Ent::Gen2::Float ProjectileData::damages() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("damages"));
        }
        inline Ent::Gen2::Float ProjectileData::deleteAfterPlantTimer() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("deleteAfterPlantTimer"));
        }
        inline Ent::Gen2::Bool ProjectileData::destroyOnHit() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("destroyOnHit"));
        }
        inline Ent::Gen2::Float ProjectileData::distanceFromBodyAtLaunch() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("distanceFromBodyAtLaunch"));
        }
        inline Ent::Gen2::Bool ProjectileData::explodeOnFire() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("explodeOnFire"));
        }
        inline Ent::Gen2::Float ProjectileData::explosionShockForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("explosionShockForce"));
        }
        inline PrimArray<Ent::Gen2::String> ProjectileData::gameEffectOnHit() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("gameEffectOnHit"));
        }
        inline Ent::Gen2::Float ProjectileData::gravity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("gravity"));
        }
        inline Ent::Gen2::Bool ProjectileData::hasNoCollision() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("hasNoCollision"));
        }
        inline Ent::Gen2::Vector3 ProjectileData::hitSourceOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("hitSourceOffset"));
        }
        inline Ent::Gen2::Float ProjectileData::homingInRangeAnticipationDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("homingInRangeAnticipationDist"));
        }
        inline Ent::Gen2::Float ProjectileData::homingMaxAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("homingMaxAngle"));
        }
        inline Ent::Gen2::Float ProjectileData::homingMaxFlightTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("homingMaxFlightTime"));
        }
        inline Ent::Gen2::Float ProjectileData::homingMaxInFrontAnticipationDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("homingMaxInFrontAnticipationDist"));
        }
        inline Ent::Gen2::Float ProjectileData::homingMaxTotalAnticipationDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("homingMaxTotalAnticipationDist"));
        }
        inline PrimArray<Ent::Gen2::Float> ProjectileData::homingTotalAnticipationRatioSpeeds() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("homingTotalAnticipationRatioSpeeds"));
        }
        inline Ent::Gen2::Float ProjectileData::impact() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("impact"));
        }
        inline Ent::Gen2::Bool ProjectileData::isRegenProjectile() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isRegenProjectile"));
        }
        inline Ent::Gen2::Bool ProjectileData::isThrowable() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isThrowable"));
        }
        inline Ent::Gen2::Vector3 ProjectileData::launchRotation() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("launchRotation"));
        }
        inline Ent::Gen2::Float ProjectileData::launchSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("launchSpeed"));
        }
        inline Ent::Gen2::Float ProjectileData::noiseLevelOnImpact() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("noiseLevelOnImpact"));
        }
        inline Ent::Gen2::Bool ProjectileData::shouldBeVisibleBeforeShoot() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("shouldBeVisibleBeforeShoot"));
        }
        inline Ent::Gen2::Float ProjectileData::smoothTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("smoothTime"));
        }
        inline Ent::Gen2::Bool ProjectileData::stopOnWater() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("stopOnWater"));
        }
        inline Ent::Gen2::Float ProjectileData::straightDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("straightDistance"));
        }
        inline Ent::Gen2::Bool ProjectileData::visibleInFlight() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("visibleInFlight"));
        }
        // ProgressSoundEventData
        inline Ent::Gen2::String ProgressSoundEventData::DecreaseEventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("DecreaseEventName"));
        }
        inline Ent::Gen2::Float ProgressSoundEventData::DecreaseStartThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DecreaseStartThreshold"));
        }
        inline Ent::Gen2::Float ProgressSoundEventData::DecreaseStopThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DecreaseStopThreshold"));
        }
        inline Ent::Gen2::String ProgressSoundEventData::EventBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EventBank"));
        }
        inline Ent::Gen2::Bool ProgressSoundEventData::EventLooping() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EventLooping"));
        }
        inline Ent::Gen2::String ProgressSoundEventData::IncreaseEventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("IncreaseEventName"));
        }
        inline Ent::Gen2::Float ProgressSoundEventData::IncreaseStartThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IncreaseStartThreshold"));
        }
        inline Ent::Gen2::Float ProgressSoundEventData::IncreaseStopThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IncreaseStopThreshold"));
        }
        inline Ent::Gen2::String ProgressSoundEventData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PrimitiveShape
        inline Ent::Gen2::Float PrimitiveShape::SDFPadding() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SDFPadding"));
        }
        inline Ent::Gen2::Float PrimitiveShape::SDFVoxelSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SDFVoxelSize"));
        }
        inline Ent::Gen2::String PrimitiveShape::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShapeSphere
        inline Ent::Gen2::Float ShapeSphere::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::PrimitiveShape ShapeSphere::Super() const
        {
            return Ent::Gen2::PrimitiveShape(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ShapeSphere::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShapeBox
        inline Ent::Gen2::Vector3 ShapeBox::Size() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Size"));
        }
        inline Ent::Gen2::PrimitiveShape ShapeBox::Super() const
        {
            return Ent::Gen2::PrimitiveShape(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ShapeBox::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PrimitiveData
        inline Ent::Gen2::Float PrimitiveData::Height() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Height"));
        }
        inline Ent::Gen2::Float PrimitiveData::Length() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Length"));
        }
        inline Ent::Gen2::Float PrimitiveData::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::Float PrimitiveData::Width() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Width"));
        }
        inline Ent::Gen2::String PrimitiveData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PredictionBehaviorDuration
        inline Ent::Gen2::Float PredictionBehaviorDuration::Locked() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Locked"));
        }
        inline Ent::Gen2::Float PredictionBehaviorDuration::Step() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Step"));
        }
        inline Ent::Gen2::Float PredictionBehaviorDuration::Total() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Total"));
        }
        inline Ent::Gen2::String PredictionBehaviorDuration::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PredictionBehaviorData
        inline Ent::Gen2::PredictionBehaviorDuration PredictionBehaviorData::Duration() const
        {
            return Ent::Gen2::PredictionBehaviorDuration(getProperty().getObjectField("Duration"));
        }
        inline Ent::Gen2::String PredictionBehaviorData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // constraintPlaneWorldPosition
        inline Ent::Gen2::String constraintPlaneWorldPosition::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool constraintPlaneWorldPosition::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Position constraintPlaneWorldPosition::val() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("val"));
        }
        // ProjectileTrajectory
        inline Ent::Gen2::String ProjectileTrajectory::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 ProjectileTrajectory::m_direction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("m_direction"));
        }
        inline Ent::Gen2::Position ProjectileTrajectory::m_position() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("m_position"));
        }
        inline Ent::Gen2::Float ProjectileTrajectory::m_speed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_speed"));
        }
        inline Ent::Gen2::Float ProjectileTrajectory::m_straightDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_straightDistance"));
        }
        // PlayRatio
        inline Ent::Gen2::String PlayRatio::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool PlayRatio::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float PlayRatio::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // PhysicsMaterial
        inline PrimArray<Ent::Gen2::String> PhysicsMaterial::ClimbablePerSize() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("ClimbablePerSize"));
        }
        inline Ent::Gen2::Int PhysicsMaterial::MaterialId() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaterialId"));
        }
        inline Ent::Gen2::String PhysicsMaterial::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::PrimitiveSet<char const*> PhysicsMaterial::Tags() const
        {
            return Ent::Gen2::PrimitiveSet<char const*>(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String PhysicsMaterial::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsEffectsManager_PhysicsLimits
        inline Ent::Gen2::Int PhysicsEffectsManager_PhysicsLimits::AvgShapesPerRigidBody() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("AvgShapesPerRigidBody"));
        }
        inline Ent::Gen2::Int PhysicsEffectsManager_PhysicsLimits::MaxDynamicRigidBodies() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxDynamicRigidBodies"));
        }
        inline Ent::Gen2::Int PhysicsEffectsManager_PhysicsLimits::MaxNonContactPairs() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxNonContactPairs"));
        }
        inline Ent::Gen2::Int PhysicsEffectsManager_PhysicsLimits::MaxStaticRigidBodies() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxStaticRigidBodies"));
        }
        inline Ent::Gen2::Int PhysicsEffectsManager_PhysicsLimits::MaxTriggerRigidBodies() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxTriggerRigidBodies"));
        }
        inline Ent::Gen2::String PhysicsEffectsManager_PhysicsLimits::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PerceiverComponentInput_usePerception
        inline Ent::Gen2::String PerceiverComponentInput_usePerception::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool PerceiverComponentInput_usePerception::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool PerceiverComponentInput_usePerception::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // RadiusChange
        inline Ent::Gen2::ScaleConverter RadiusChange::Entry() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("Entry"));
        }
        inline Ent::Gen2::ScaleConverter RadiusChange::Exit() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("Exit"));
        }
        inline Ent::Gen2::Pasta_Easing_Curve RadiusChange::InBetweenEasing() const
        {
            return Ent::Gen2::Pasta_Easing_Curve(getProperty().getObjectField("InBetweenEasing"));
        }
        inline Ent::Gen2::String RadiusChange::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Parameters
        inline Ent::Gen2::String Parameters::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool Parameters::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::SmoothScaleComponentInput_Parameters Parameters::val() const
        {
            return Ent::Gen2::SmoothScaleComponentInput_Parameters(getProperty().getObjectField("val"));
        }
        // Game_OwnershipDebugger
        inline PrimArray<Ent::Gen2::OwnershipModuleDebugWindow> Game_OwnershipDebugger::Display() const
        {
            return PrimArray<Ent::Gen2::OwnershipModuleDebugWindow>(getProperty().getObjectField("Display"));
        }
        inline Ent::Gen2::String Game_OwnershipDebugger::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // OutfitPiece
        inline Ent::Gen2::EntityRef OutfitPiece::EntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("EntityRef"));
        }
        inline Ent::Gen2::OutfitPieceType OutfitPiece::Slot() const
        {
            return Ent::Gen2::OutfitPieceType(getProperty().getObjectField("Slot"));
        }
        inline Ent::Gen2::String OutfitPiece::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Orientation
        inline Ent::Gen2::String Orientation::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool Orientation::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Quat Orientation::val() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("val"));
        }
        // Online
        // MusicCategory
        inline Ent::Gen2::String MusicCategory::EventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EventName"));
        }
        inline Ent::Gen2::String MusicCategory::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Int MusicCategory::Weight() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Weight"));
        }
        inline Ent::Gen2::String MusicCategory::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MoveCapacityData_OrientationSpeed
        inline Ent::Gen2::String MoveCapacityData_OrientationSpeed::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 MoveCapacityData_OrientationSpeed::factor() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("factor"));
        }
        inline Ent::Gen2::Vector3 MoveCapacityData_OrientationSpeed::rate() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("rate"));
        }
        inline Ent::Gen2::ScaleConverter MoveCapacityData_OrientationSpeed::rotationRollFromAngularSpeed() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("rotationRollFromAngularSpeed"));
        }
        inline Ent::Gen2::ScaleConverter MoveCapacityData_OrientationSpeed::speedFactorFromSpeedSlow() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("speedFactorFromSpeedSlow"));
        }
        inline Ent::Gen2::Vector3 MoveCapacityData_OrientationSpeed::speedMax() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("speedMax"));
        }
        inline Ent::Gen2::Vector3 MoveCapacityData_OrientationSpeed::steeringAngle() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("steeringAngle"));
        }
        // MountableSnapLine_ControlPoint
        inline Ent::Gen2::String MountableSnapLine_ControlPoint::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int MountableSnapLine_ControlPoint::boneId() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("boneId"));
        }
        inline Ent::Gen2::Vector3 MountableSnapLine_ControlPoint::offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("offset"));
        }
        inline Ent::Gen2::Float MountableSnapLine_ControlPoint::radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("radius"));
        }
        // MountableData
        inline Ent::Gen2::Int MountableData::HotspotID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("HotspotID"));
        }
        inline Ent::Gen2::String MountableData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MinReviveRatio
        inline Ent::Gen2::String MinReviveRatio::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool MinReviveRatio::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float MinReviveRatio::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // MinRespawnDistance
        inline Ent::Gen2::String MinRespawnDistance::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool MinRespawnDistance::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float MinRespawnDistance::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // MinDistanceToRespawnPosition
        inline Ent::Gen2::String MinDistanceToRespawnPosition::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool MinDistanceToRespawnPosition::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float MinDistanceToRespawnPosition::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // MeshesItem
        inline Ent::Gen2::String MeshesItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String MeshesItem::mesh() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("mesh"));
        }
        // RUNTIME_LODsItem
        inline Array<Ent::Gen2::MeshesItem> RUNTIME_LODsItem::Meshes() const
        {
            return Array<Ent::Gen2::MeshesItem>(getProperty().getObjectField("Meshes"));
        }
        inline Ent::Gen2::String RUNTIME_LODsItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MeshNavigationBehaviorData
        inline Ent::Gen2::Float MeshNavigationBehaviorData::DeltaAngleMinToPrepareToHoldingOnToNavigationMesh() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DeltaAngleMinToPrepareToHoldingOnToNavigationMesh"));
        }
        inline Ent::Gen2::Bool MeshNavigationBehaviorData::EdgeTransitionConstraintAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EdgeTransitionConstraintAllowed"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::EdgeTransitionConstraintLedgeAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EdgeTransitionConstraintLedgeAngle"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::EdgeTransitionConstraintWallAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EdgeTransitionConstraintWallAngle"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::MaxNormalAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxNormalAngle"));
        }
        inline Ent::Gen2::MeshNavigationAllowedMode MeshNavigationBehaviorData::MeshNavigationAllowedMode() const
        {
            return Ent::Gen2::MeshNavigationAllowedMode(getProperty().getObjectField("MeshNavigationAllowedMode"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::OrientationRateToPrepareToHoldingOnToNavigationMesh() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OrientationRateToPrepareToHoldingOnToNavigationMesh"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::RayCastLengthLegFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RayCastLengthLegFactor"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::RayCastLengthSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RayCastLengthSpeedFactor"));
        }
        inline Ent::Gen2::Bool MeshNavigationBehaviorData::RollAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("RollAllowed"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::SlopeAngleMinForWall() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SlopeAngleMinForWall"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::SlopeAngleMinToAllowStickedLand() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SlopeAngleMinToAllowStickedLand"));
        }
        inline Ent::Gen2::Bool MeshNavigationBehaviorData::StickToAnyNormalAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("StickToAnyNormalAllowed"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::VerticalAngleMinToUseLandingTreeAnimation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VerticalAngleMinToUseLandingTreeAnimation"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::WallFrontProbeLengthFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WallFrontProbeLengthFactor"));
        }
        inline Ent::Gen2::Float MeshNavigationBehaviorData::WallRepulseFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WallRepulseFactor"));
        }
        inline Ent::Gen2::String MeshNavigationBehaviorData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VolumeConstraintDataGD
        inline Ent::Gen2::Vector3 VolumeConstraintDataGD::CameraConstraintLocalAxis() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("CameraConstraintLocalAxis"));
        }
        inline Ent::Gen2::Matrix44 VolumeConstraintDataGD::Matrix() const
        {
            return Ent::Gen2::Matrix44(getProperty().getObjectField("Matrix"));
        }
        inline Ent::Gen2::TransitionNeighborData VolumeConstraintDataGD::Neighbors() const
        {
            return Ent::Gen2::TransitionNeighborData(getProperty().getObjectField("Neighbors"));
        }
        inline Ent::Gen2::Vector3 VolumeConstraintDataGD::Size() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Size"));
        }
        inline PrimArray<Ent::Gen2::String> VolumeConstraintDataGD::Tags() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String VolumeConstraintDataGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Game_MacroNavMeshStamper
        inline Ent::Gen2::Vector3 Game_MacroNavMeshStamper::BoundingBox() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("BoundingBox"));
        }
        inline Ent::Gen2::Matrix44 Game_MacroNavMeshStamper::Matrix() const
        {
            return Ent::Gen2::Matrix44(getProperty().getObjectField("Matrix"));
        }
        inline Ent::Gen2::String Game_MacroNavMeshStamper::NavmeshPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NavmeshPath"));
        }
        inline Ent::Gen2::Vector3 Game_MacroNavMeshStamper::Position() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Position"));
        }
        inline Ent::Gen2::Float Game_MacroNavMeshStamper::RotationZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotationZ"));
        }
        inline Ent::Gen2::Bool Game_MacroNavMeshStamper::StickToGround() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("StickToGround"));
        }
        inline Ent::Gen2::String Game_MacroNavMeshStamper::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PointCloudInstanceDataResource
        inline Ent::Gen2::String PointCloudInstanceDataResource::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int PointCloudInstanceDataResource::index() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("index"));
        }
        inline Ent::Gen2::Matrix43 PointCloudInstanceDataResource::matrix() const
        {
            return Ent::Gen2::Matrix43(getProperty().getObjectField("matrix"));
        }
        // PointCloudChunk
        inline Ent::Gen2::String PointCloudChunk::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int PointCloudChunk::chunkPosX() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("chunkPosX"));
        }
        inline Ent::Gen2::Int PointCloudChunk::chunkPosY() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("chunkPosY"));
        }
        inline Ent::Gen2::Int PointCloudChunk::chunkPosZ() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("chunkPosZ"));
        }
        inline Array<Ent::Gen2::PointCloudInstanceDataResource> PointCloudChunk::instances() const
        {
            return Array<Ent::Gen2::PointCloudInstanceDataResource>(getProperty().getObjectField("instances"));
        }
        // MapOfObjectItem_A
        inline Ent::Gen2::String MapOfObjectItem_A::Value() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Value"));
        }
        inline Ent::Gen2::String MapOfObjectItem_A::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Manager_EntityID
        // Manager
        inline Ent::Gen2::Manager_EntityID Manager::EntityID() const
        {
            return Ent::Gen2::Manager_EntityID(getProperty().getObjectField("EntityID"));
        }
        inline Ent::Gen2::String Manager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // WorldManager
        inline Ent::Gen2::Manager WorldManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String WorldManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // WaveManager
        inline Ent::Gen2::Manager WaveManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String WaveManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // WaterManager
        inline Ent::Gen2::Manager WaterManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float WaterManager::WaterHeight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WaterHeight"));
        }
        inline Ent::Gen2::String WaterManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VisualManager
        inline Ent::Gen2::Manager VisualManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String VisualManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VegetationManager
        inline Ent::Gen2::Float VegetationManager::BuryDepth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BuryDepth"));
        }
        inline Ent::Gen2::Float VegetationManager::BuryScaleThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BuryScaleThreshold"));
        }
        inline Ent::Gen2::Bool VegetationManager::BuryVeget() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("BuryVeget"));
        }
        inline Ent::Gen2::Float VegetationManager::FadeOutScaleThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FadeOutScaleThreshold"));
        }
        inline Ent::Gen2::Bool VegetationManager::FadeOutVeget() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("FadeOutVeget"));
        }
        inline Ent::Gen2::Float VegetationManager::FullScaleGrowDistanceHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FullScaleGrowDistanceHysteresis"));
        }
        inline Ent::Gen2::Float VegetationManager::FullScaleGrowDistanceThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FullScaleGrowDistanceThreshold"));
        }
        inline Ent::Gen2::Float VegetationManager::FullScaleGrowMaxRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FullScaleGrowMaxRatio"));
        }
        inline Ent::Gen2::Float VegetationManager::FullScaleGrowMinRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FullScaleGrowMinRatio"));
        }
        inline Ent::Gen2::Float VegetationManager::GlobalDistanceMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GlobalDistanceMultiplier"));
        }
        inline Ent::Gen2::Bool VegetationManager::PreloadVegetation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("PreloadVegetation"));
        }
        inline Ent::Gen2::Bool VegetationManager::RegenInterpolation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("RegenInterpolation"));
        }
        inline Ent::Gen2::Float VegetationManager::ScaleSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ScaleSpeed"));
        }
        inline Ent::Gen2::Manager VegetationManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String VegetationManager::VegetationBankPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VegetationBankPath"));
        }
        inline Ent::Gen2::String VegetationManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TrailManager
        inline Ent::Gen2::Manager TrailManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String TrailManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TerrainManager
        inline Ent::Gen2::Manager TerrainManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String TerrainManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SyncTempoManager
        inline Ent::Gen2::Int SyncTempoManager::DefaultTempo() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("DefaultTempo"));
        }
        inline Ent::Gen2::String SyncTempoManager::RTPC_Tempo() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_Tempo"));
        }
        inline Ent::Gen2::String SyncTempoManager::StartSyncClickEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("StartSyncClickEvent"));
        }
        inline Ent::Gen2::String SyncTempoManager::StartSyncEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("StartSyncEvent"));
        }
        inline Ent::Gen2::String SyncTempoManager::StopSyncClickEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("StopSyncClickEvent"));
        }
        inline Ent::Gen2::String SyncTempoManager::StopSyncEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("StopSyncEvent"));
        }
        inline Ent::Gen2::Manager SyncTempoManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SyncTempoManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // StreamingManager
        inline Ent::Gen2::Bool StreamingManager::DisableStreaming() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisableStreaming"));
        }
        inline Ent::Gen2::Manager StreamingManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String StreamingManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SpatialMapManager
        inline Ent::Gen2::Manager SpatialMapManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SpatialMapManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShamanVisionManager
        inline Ent::Gen2::Float ShamanVisionManager::HighlightFactorGoddess() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HighlightFactorGoddess"));
        }
        inline Ent::Gen2::Float ShamanVisionManager::HighlightFactorPlayer() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HighlightFactorPlayer"));
        }
        inline Ent::Gen2::Float ShamanVisionManager::HighlightFactorSpecie() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HighlightFactorSpecie"));
        }
        inline Ent::Gen2::Bool ShamanVisionManager::ShowEnemiesState() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowEnemiesState"));
        }
        inline Ent::Gen2::Bool ShamanVisionManager::ShowInjuredState() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowInjuredState"));
        }
        inline Ent::Gen2::Bool ShamanVisionManager::ShowPlayersState() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowPlayersState"));
        }
        inline Ent::Gen2::Bool ShamanVisionManager::ShowPrisonersState() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowPrisonersState"));
        }
        inline Ent::Gen2::Bool ShamanVisionManager::ShowSpecieIcons() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowSpecieIcons"));
        }
        inline Ent::Gen2::Float ShamanVisionManager::StateMinSizeDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("StateMinSizeDistance"));
        }
        inline Ent::Gen2::Manager ShamanVisionManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float ShamanVisionManager::TimerFactorGoddess() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TimerFactorGoddess"));
        }
        inline Ent::Gen2::Float ShamanVisionManager::TimerFactorPlayer() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TimerFactorPlayer"));
        }
        inline Ent::Gen2::Float ShamanVisionManager::TimerFactorSpecie() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TimerFactorSpecie"));
        }
        inline Ent::Gen2::String ShamanVisionManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SensorManager
        inline Ent::Gen2::Int SensorManager::SensorPoolSize() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SensorPoolSize"));
        }
        inline Ent::Gen2::Manager SensorManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SensorManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Scheduler
        inline Ent::Gen2::Manager Scheduler::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String Scheduler::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SceneManager
        inline Ent::Gen2::Manager SceneManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SceneManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ResourceDebugger
        inline Ent::Gen2::Manager ResourceDebugger::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ResourceDebugger::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReloadManager
        inline Ent::Gen2::Manager ReloadManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ReloadManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RegionManager
        inline Ent::Gen2::Manager RegionManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RegionManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RPCServerManager
        inline Ent::Gen2::Manager RPCServerManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RPCServerManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RPCMarshallingTests
        inline Ent::Gen2::Manager RPCMarshallingTests::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RPCMarshallingTests::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // QualityManager
        inline Ent::Gen2::Float QualityManager::EntityLODDistanceHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EntityLODDistanceHysteresis"));
        }
        inline Ent::Gen2::Manager QualityManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String QualityManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PlayerManager
        inline Ent::Gen2::String PlayerManager::SaveGame() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SaveGame"));
        }
        inline Ent::Gen2::Manager PlayerManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PlayerManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsEffectsManager
        inline Ent::Gen2::Float PhysicsEffectsManager::GravityConstant() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GravityConstant"));
        }
        inline Ent::Gen2::PhysicsEffectsManager_PhysicsLimits PhysicsEffectsManager::Limits() const
        {
            return Ent::Gen2::PhysicsEffectsManager_PhysicsLimits(getProperty().getObjectField("Limits"));
        }
        inline Array<Ent::Gen2::PhysicsMaterial> PhysicsEffectsManager::MaterialBank() const
        {
            return Array<Ent::Gen2::PhysicsMaterial>(getProperty().getObjectField("MaterialBank"));
        }
        inline Ent::Gen2::Manager PhysicsEffectsManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PhysicsEffectsManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PestoManager
        inline Ent::Gen2::Manager PestoManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PestoManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PerceptionManager
        inline PrimArray<Ent::Gen2::Float> PerceptionManager::DistanceMultipliers() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("DistanceMultipliers"));
        }
        inline Ent::Gen2::Manager PerceptionManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PerceptionManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ParticleManager
        inline Ent::Gen2::Int ParticleManager::PoolSize() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("PoolSize"));
        }
        inline Ent::Gen2::Manager ParticleManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ParticleManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // NavMeshManager
        inline Ent::Gen2::Float NavMeshManager::NavMeshMaxHeight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NavMeshMaxHeight"));
        }
        inline Ent::Gen2::Float NavMeshManager::NavMeshMaxSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NavMeshMaxSize"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::RecastNavmeshGenerationParameters> NavMeshManager::RecastParameters() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::RecastNavmeshGenerationParameters>(getProperty().getObjectField("RecastParameters"));
        }
        inline Ent::Gen2::Manager NavMeshManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float NavMeshManager::TileMargin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TileMargin"));
        }
        inline Ent::Gen2::Float NavMeshManager::TileSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TileSize"));
        }
        inline Ent::Gen2::Float NavMeshManager::VerticalTolerance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VerticalTolerance"));
        }
        inline Ent::Gen2::String NavMeshManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // LoadSaveManager
        inline Ent::Gen2::String LoadSaveManager::ClothDataFile() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ClothDataFile"));
        }
        inline Ent::Gen2::String LoadSaveManager::IconDataFile() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("IconDataFile"));
        }
        inline Ent::Gen2::Manager LoadSaveManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String LoadSaveManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // LightManager
        inline Ent::Gen2::Manager LightManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String LightManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InputManager
        inline Ent::Gen2::Manager InputManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String InputManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InfoboardManager
        inline Ent::Gen2::Manager InfoboardManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String InfoboardManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HeightMapManager
        inline Ent::Gen2::Manager HeightMapManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String HeightMapManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GroundTypeManager
        inline Ent::Gen2::Manager GroundTypeManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GroundTypeManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameMasterManager
        inline Ent::Gen2::Float GameMasterManager::MaxTimeBetweenSoulOpportunityRespawn() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxTimeBetweenSoulOpportunityRespawn"));
        }
        inline Ent::Gen2::Float GameMasterManager::MinDistBetweenSoulOpportunityRespawn() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinDistBetweenSoulOpportunityRespawn"));
        }
        inline Ent::Gen2::Float GameMasterManager::RadiusWithoutEnemy() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadiusWithoutEnemy"));
        }
        inline Ent::Gen2::Float GameMasterManager::SoulOpportunitySpawnRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SoulOpportunitySpawnRadius"));
        }
        inline Ent::Gen2::Float GameMasterManager::SoulOpportunityUnspawnInsideFrustumRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SoulOpportunityUnspawnInsideFrustumRadius"));
        }
        inline Ent::Gen2::Float GameMasterManager::SoulOpportunityUnspawnOutsideFrustumRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SoulOpportunityUnspawnOutsideFrustumRadius"));
        }
        inline Ent::Gen2::Manager GameMasterManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GameMasterManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameEffectManager
        inline Ent::Gen2::String GameEffectManager::GameEffectFileExtension() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GameEffectFileExtension"));
        }
        inline Ent::Gen2::String GameEffectManager::GameEffectsRootPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GameEffectsRootPath"));
        }
        inline Ent::Gen2::Manager GameEffectManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GameEffectManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidManager
        inline Ent::Gen2::Manager FluidManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FluidManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidGameplayQueriesManager
        inline Ent::Gen2::Manager FluidGameplayQueriesManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FluidGameplayQueriesManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FightManager
        inline Ent::Gen2::Manager FightManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FightManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EventManager
        inline Ent::Gen2::Manager EventManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EventManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnvironmentManager
        inline Ent::Gen2::Manager EnvironmentManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EnvironmentManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityManager
        inline Ent::Gen2::Manager EntityManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DialogManager
        inline Ent::Gen2::String DialogManager::DialogFileExtension() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("DialogFileExtension"));
        }
        inline Ent::Gen2::String DialogManager::DialogsRootPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("DialogsRootPath"));
        }
        inline Ent::Gen2::Manager DialogManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String DialogManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BoidsManager
        inline Ent::Gen2::Float BoidsManager::FirstRootSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FirstRootSpeedFactor"));
        }
        inline Ent::Gen2::Float BoidsManager::MergeEntityDistanceMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MergeEntityDistanceMultiplier"));
        }
        inline Ent::Gen2::Manager BoidsManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BoidsManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String BoidsManager::boidPresets() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("boidPresets"));
        }
        // BillboardManager
        inline Ent::Gen2::Manager BillboardManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BillboardManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BehaviorManager
        inline Ent::Gen2::Manager BehaviorManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BehaviorManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimalManager
        inline Ent::Gen2::Manager AnimalManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimalManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String AnimalManager::animalName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("animalName"));
        }
        // ActorManager
        inline Array<PrimArray<Ent::Gen2::Float>> ActorManager::SizePerceptionRanges() const
        {
            return Array<PrimArray<Ent::Gen2::Float>>(getProperty().getObjectField("SizePerceptionRanges"));
        }
        inline PrimArray<Ent::Gen2::Float> ActorManager::Sizes() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("Sizes"));
        }
        inline Ent::Gen2::Manager ActorManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateManager
        inline Ent::Gen2::String ActionStateManager::ArbiterConfigFile() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ArbiterConfigFile"));
        }
        inline Ent::Gen2::Bool ActionStateManager::ForceTraceActorState() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ForceTraceActorState"));
        }
        inline Ent::Gen2::Manager ActionStateManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionStateManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MoveCapacityData_ReachSpeed
        inline Ent::Gen2::String MoveCapacityData_ReachSpeed::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float MoveCapacityData_ReachSpeed::acceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("acceleration"));
        }
        inline Ent::Gen2::Float MoveCapacityData_ReachSpeed::deceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("deceleration"));
        }
        inline Ent::Gen2::LocomotionMode MoveCapacityData_ReachSpeed::name() const
        {
            return Ent::Gen2::LocomotionMode(getProperty().getObjectField("name"));
        }
        // ListItem
        inline Ent::Gen2::String ListItem::EntityPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EntityPath"));
        }
        inline Ent::Gen2::EntityRef ListItem::EntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("EntityRef"));
        }
        inline Ent::Gen2::String ListItem::Tag() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Tag"));
        }
        inline Ent::Gen2::String ListItem::Thumbnail() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Thumbnail"));
        }
        inline Ent::Gen2::String ListItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Light
        inline Ent::Gen2::Float Light::Brightness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Brightness"));
        }
        inline Ent::Gen2::Bool Light::Cast_Shadows() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Cast Shadows"));
        }
        inline Ent::Gen2::Vector3 Light::Color() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Color"));
        }
        inline Ent::Gen2::Float Light::Dpsm_Plane_Threshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Dpsm Plane Threshold"));
        }
        inline Ent::Gen2::Float Light::Dpsm_Seam_Offset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Dpsm Seam Offset"));
        }
        inline Ent::Gen2::Bool Light::Enabled() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Enabled"));
        }
        inline Ent::Gen2::Float Light::Linear_attenuation_start() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Linear attenuation start"));
        }
        inline Ent::Gen2::Float Light::Linear_attenuation_stop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Linear attenuation stop"));
        }
        inline Ent::Gen2::Float Light::Radial_attenuation_start() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radial attenuation start"));
        }
        inline Ent::Gen2::Float Light::Radial_attenuation_stop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radial attenuation stop"));
        }
        inline Ent::Gen2::Float Light::Shadow_Depth_Bias() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Shadow Depth Bias"));
        }
        inline Ent::Gen2::Float Light::Shadow_Depth_Bias_Factor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Shadow Depth Bias Factor"));
        }
        inline Ent::Gen2::LightType Light::Type_() const
        {
            return Ent::Gen2::LightType(getProperty().getObjectField("Type"));
        }
        inline Ent::Gen2::Bool Light::Volumetric_Fog() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Volumetric Fog"));
        }
        inline Ent::Gen2::String Light::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // LightAttackData
        inline Ent::Gen2::ResponsiblePointer_ActorState_ LightAttackData::LightAttackState() const
        {
            return Ent::Gen2::ResponsiblePointer_ActorState_(getProperty().getObjectField("LightAttackState"));
        }
        inline Ent::Gen2::String LightAttackData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // lightAttackData
        inline Ent::Gen2::String lightAttackData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool lightAttackData::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::LightAttackData lightAttackData::val() const
        {
            return Ent::Gen2::LightAttackData(getProperty().getObjectField("val"));
        }
        // LedgePositionInfo
        // JumpHeightMultiplier
        inline Ent::Gen2::String JumpHeightMultiplier::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool JumpHeightMultiplier::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float JumpHeightMultiplier::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // IsActive
        inline Ent::Gen2::String IsActive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool IsActive::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool IsActive::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // Invincible
        inline Ent::Gen2::String Invincible::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool Invincible::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool Invincible::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // TaggedEntityRef
        inline Ent::Gen2::EntityRef TaggedEntityRef::EntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("EntityRef"));
        }
        inline PrimArray<Ent::Gen2::InventoryTags> TaggedEntityRef::Tags() const
        {
            return PrimArray<Ent::Gen2::InventoryTags>(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String TaggedEntityRef::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TrailProperties
        inline Ent::Gen2::Bool TrailProperties::ComputeSplineCurvilinearUV() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ComputeSplineCurvilinearUV"));
        }
        inline Ent::Gen2::Float TrailProperties::Duration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Duration"));
        }
        inline PrimArray<Ent::Gen2::Int> TrailProperties::FadeLuminosity() const
        {
            return PrimArray<Ent::Gen2::Int>(getProperty().getObjectField("FadeLuminosity"));
        }
        inline PrimArray<Ent::Gen2::Int> TrailProperties::FadeSize() const
        {
            return PrimArray<Ent::Gen2::Int>(getProperty().getObjectField("FadeSize"));
        }
        inline Ent::Gen2::Vector3 TrailProperties::FrontalAxis() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("FrontalAxis"));
        }
        inline Ent::Gen2::Vector3 TrailProperties::HorizontalAxis() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("HorizontalAxis"));
        }
        inline Ent::Gen2::InterpolationMethod TrailProperties::InterpolationMethod() const
        {
            return Ent::Gen2::InterpolationMethod(getProperty().getObjectField("InterpolationMethod"));
        }
        inline Ent::Gen2::Float TrailProperties::IntervalBetweenTrailPoints() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IntervalBetweenTrailPoints"));
        }
        inline Ent::Gen2::Float TrailProperties::Luminosity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Luminosity"));
        }
        inline Ent::Gen2::String TrailProperties::LuminosityCurvePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("LuminosityCurvePath"));
        }
        inline Ent::Gen2::Float TrailProperties::LuminosityVariability() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LuminosityVariability"));
        }
        inline Ent::Gen2::Int TrailProperties::NbSplinePointsBetweenTrailPoints() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbSplinePointsBetweenTrailPoints"));
        }
        inline Array<Ent::Gen2::TrailRendererProperties> TrailProperties::RenderingProperties() const
        {
            return Array<Ent::Gen2::TrailRendererProperties>(getProperty().getObjectField("RenderingProperties"));
        }
        inline Ent::Gen2::TrailRenderingType TrailProperties::RenderingType() const
        {
            return Ent::Gen2::TrailRenderingType(getProperty().getObjectField("RenderingType"));
        }
        inline Ent::Gen2::Vector2 TrailProperties::Size() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("Size"));
        }
        inline Ent::Gen2::String TrailProperties::SizeCurvePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SizeCurvePath"));
        }
        inline Ent::Gen2::Vector2 TrailProperties::SizeVariability() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("SizeVariability"));
        }
        inline Ent::Gen2::Bool TrailProperties::TrimTransparentPoints() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("TrimTransparentPoints"));
        }
        inline Ent::Gen2::TrailUVUnwrappingMode TrailProperties::UVUnwrappingMode() const
        {
            return Ent::Gen2::TrailUVUnwrappingMode(getProperty().getObjectField("UVUnwrappingMode"));
        }
        inline Ent::Gen2::String TrailProperties::UVZoomCurvilinearCurvePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("UVZoomCurvilinearCurvePath"));
        }
        inline Ent::Gen2::Vector3 TrailProperties::VerticalAxis() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("VerticalAxis"));
        }
        inline Ent::Gen2::String TrailProperties::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Interactor
        inline Ent::Gen2::String Interactor::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool Interactor::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        // InputCollisionBehaviorData
        inline Ent::Gen2::Float InputCollisionBehaviorData::AltitudeMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AltitudeMax"));
        }
        inline Ent::Gen2::Float InputCollisionBehaviorData::DepthMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DepthMax"));
        }
        inline Ent::Gen2::Float InputCollisionBehaviorData::FrontAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FrontAngle"));
        }
        inline Ent::Gen2::Float InputCollisionBehaviorData::RadiusCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadiusCoeff"));
        }
        inline Ent::Gen2::String InputCollisionBehaviorData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InertiaTensor
        inline Ent::Gen2::String InertiaTensor::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool InertiaTensor::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Vector3 InertiaTensor::val() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("val"));
        }
        // ImpactAndSolidityData
        inline Ent::Gen2::String ImpactAndSolidityData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline PrimArray<Ent::Gen2::Float> ImpactAndSolidityData::impactPercent() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("impactPercent"));
        }
        inline Ent::Gen2::Float ImpactAndSolidityData::solidity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("solidity"));
        }
        inline Ent::Gen2::Bool ImpactAndSolidityData::unbreakable() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("unbreakable"));
        }
        inline Ent::Gen2::Float ImpactAndSolidityData::velocityImpactMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("velocityImpactMax"));
        }
        // ID
        // PhysicsReplicateData
        inline Ent::Gen2::Vector3 PhysicsReplicateData::AngularV() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("AngularV"));
        }
        inline Ent::Gen2::ID PhysicsReplicateData::ID() const
        {
            return Ent::Gen2::ID(getProperty().getObjectField("ID"));
        }
        inline Ent::Gen2::Vector3 PhysicsReplicateData::LinearV() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("LinearV"));
        }
        inline Ent::Gen2::Position PhysicsReplicateData::Position() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("Position"));
        }
        inline Ent::Gen2::Quat PhysicsReplicateData::Rotation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("Rotation"));
        }
        inline Ent::Gen2::String PhysicsReplicateData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PickableDistributorComponentData
        inline Ent::Gen2::EntityRef PickableDistributorComponentData::EntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("EntityRef"));
        }
        inline Ent::Gen2::HotSpotType PickableDistributorComponentData::HotspotType() const
        {
            return Ent::Gen2::HotSpotType(getProperty().getObjectField("HotspotType"));
        }
        inline Ent::Gen2::String PickableDistributorComponentData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HotspotData
        inline Ent::Gen2::String HotspotData::Bone() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Bone"));
        }
        inline Ent::Gen2::Vector3 HotspotData::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::Quat HotspotData::Orientation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("Orientation"));
        }
        inline Ent::Gen2::Float HotspotData::Scale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Scale"));
        }
        inline Ent::Gen2::PrimitiveSet<char const*> HotspotData::Tags() const
        {
            return Ent::Gen2::PrimitiveSet<char const*>(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::EntityRef HotspotData::TargetEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("TargetEntityRef"));
        }
        inline Ent::Gen2::HotSpotType HotspotData::Type_() const
        {
            return Ent::Gen2::HotSpotType(getProperty().getObjectField("Type"));
        }
        inline Ent::Gen2::String HotspotData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HitWallEnvironmentData
        inline Ent::Gen2::Float HitWallEnvironmentData::NormalAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NormalAngleMax"));
        }
        inline Ent::Gen2::Float HitWallEnvironmentData::NormalAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NormalAngleMin"));
        }
        inline Ent::Gen2::Float HitWallEnvironmentData::RetimingVerticalAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RetimingVerticalAngleMax"));
        }
        inline Ent::Gen2::Float HitWallEnvironmentData::RetimingVerticalAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RetimingVerticalAngleMin"));
        }
        inline Ent::Gen2::String HitWallEnvironmentData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HitWallData
        inline Ent::Gen2::Float HitWallData::AverageSpeedThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AverageSpeedThreshold"));
        }
        inline Ent::Gen2::Float HitWallData::ContactAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ContactAngleMax"));
        }
        inline Ent::Gen2::HitWallEnvironmentData HitWallData::DefaultEnvironmentData() const
        {
            return Ent::Gen2::HitWallEnvironmentData(getProperty().getObjectField("DefaultEnvironmentData"));
        }
        inline Ent::Gen2::HitWallEnvironmentData HitWallData::GroundedEnvironmentData() const
        {
            return Ent::Gen2::HitWallEnvironmentData(getProperty().getObjectField("GroundedEnvironmentData"));
        }
        inline Ent::Gen2::Float HitWallData::HitWallFallHeightThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HitWallFallHeightThreshold"));
        }
        inline Ent::Gen2::Float HitWallData::OrientationAlignementFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OrientationAlignementFactor"));
        }
        inline Ent::Gen2::Float HitWallData::RetimingHorizontalAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RetimingHorizontalAngleMax"));
        }
        inline Ent::Gen2::String HitWallData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HeadCollisionBehaviorData
        inline Ent::Gen2::String HeadCollisionBehaviorData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float HeadCollisionBehaviorData::disableDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("disableDuration"));
        }
        inline Ent::Gen2::Float HeadCollisionBehaviorData::enableDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("enableDuration"));
        }
        inline Ent::Gen2::Vector3 HeadCollisionBehaviorData::headOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("headOffset"));
        }
        inline Ent::Gen2::Bool HeadCollisionBehaviorData::isEnabled() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isEnabled"));
        }
        inline Ent::Gen2::Float HeadCollisionBehaviorData::radiusCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("radiusCoeff"));
        }
        inline Ent::Gen2::ScaleConverter HeadCollisionBehaviorData::slopeInfluence() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("slopeInfluence"));
        }
        inline Ent::Gen2::Float HeadCollisionBehaviorData::softCollisionRigidbodyCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("softCollisionRigidbodyCoeff"));
        }
        inline Ent::Gen2::Float HeadCollisionBehaviorData::softCollisionVisualCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("softCollisionVisualCoeff"));
        }
        inline Ent::Gen2::ScaleConverter HeadCollisionBehaviorData::speedInfluence() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("speedInfluence"));
        }
        inline Ent::Gen2::ScaleConverter HeadCollisionBehaviorData::visualSmoothOut() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("visualSmoothOut"));
        }
        // VelocityObstaclesManager
        inline Ent::Gen2::Float VelocityObstaclesManager::AcceptableAccelerationForAvoidance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AcceptableAccelerationForAvoidance"));
        }
        inline Ent::Gen2::Bool VelocityObstaclesManager::Active() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Active"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::AvoidanceRadiusAdaptabilityFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AvoidanceRadiusAdaptabilityFactor"));
        }
        inline Ent::Gen2::Map<SizeEnum, PrimArray<Ent::Gen2::GroupAvoidanceEnum>> VelocityObstaclesManager::GroupsAvoidanceIgnoredBySize() const
        {
            return Ent::Gen2::Map<SizeEnum, PrimArray<Ent::Gen2::GroupAvoidanceEnum>>(getProperty().getObjectField("GroupsAvoidanceIgnoredBySize"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::RunningSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RunningSpeed"));
        }
        inline Ent::Gen2::Int VelocityObstaclesManager::SimMaxNeighbors() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SimMaxNeighbors"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::SimMaxSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SimMaxSpeed"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::SimNeighborDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SimNeighborDist"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::SimPrefSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SimPrefSpeedFactor"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::SimRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SimRadius"));
        }
        inline Ent::Gen2::Int VelocityObstaclesManager::SimSlowDownWhenAvoiding() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SimSlowDownWhenAvoiding"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::SimTimeHorizon() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SimTimeHorizon"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::SimTimeHorizonObst() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SimTimeHorizonObst"));
        }
        inline Ent::Gen2::Manager VelocityObstaclesManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float VelocityObstaclesManager::WalkingSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WalkingSpeed"));
        }
        inline Ent::Gen2::String VelocityObstaclesManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GroundTypeData
        inline Ent::Gen2::Float GroundTypeData::GrainRangeMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GrainRangeMax"));
        }
        inline Ent::Gen2::Float GroundTypeData::GrainRangeMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GrainRangeMin"));
        }
        inline Ent::Gen2::String GroundTypeData::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Float GroundTypeData::RegenRangeMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RegenRangeMax"));
        }
        inline Ent::Gen2::Float GroundTypeData::RegenRangeMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RegenRangeMin"));
        }
        inline Ent::Gen2::String GroundTypeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GrasperInteractionData
        inline Ent::Gen2::String GrasperInteractionData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float GrasperInteractionData::anticipationSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("anticipationSpeedFactor"));
        }
        inline Ent::Gen2::Float GrasperInteractionData::attackDamages() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("attackDamages"));
        }
        inline Ent::Gen2::Float GrasperInteractionData::deltaAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("deltaAngleMax"));
        }
        inline Ent::Gen2::Float GrasperInteractionData::distanceHysteris() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("distanceHysteris"));
        }
        inline Ent::Gen2::Float GrasperInteractionData::distanceMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("distanceMax"));
        }
        inline Ent::Gen2::Float GrasperInteractionData::graspDurationMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("graspDurationMax"));
        }
        inline Ent::Gen2::Float GrasperInteractionData::graspOutVisualRotationRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("graspOutVisualRotationRate"));
        }
        inline Ent::Gen2::Float GrasperInteractionData::graspStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("graspStrength"));
        }
        inline Ent::Gen2::String GrasperInteractionData::interactableBoneName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("interactableBoneName"));
        }
        inline Ent::Gen2::ScaleConverter GrasperInteractionData::syncDeltaRotationDuration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("syncDeltaRotationDuration"));
        }
        inline Ent::Gen2::ScaleConverter GrasperInteractionData::syncDeltaTranslationDuration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("syncDeltaTranslationDuration"));
        }
        // GraspableInteractionData
        inline Ent::Gen2::String GraspableInteractionData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float GraspableInteractionData::graspStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("graspStrength"));
        }
        inline Ent::Gen2::Float GraspableInteractionData::graspedDurationMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("graspedDurationMax"));
        }
        inline Ent::Gen2::HotSpotType GraspableInteractionData::hotspotType() const
        {
            return Ent::Gen2::HotSpotType(getProperty().getObjectField("hotspotType"));
        }
        inline Ent::Gen2::ScaleConverter GraspableInteractionData::impactRetiming() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("impactRetiming"));
        }
        inline Ent::Gen2::Float GraspableInteractionData::incapacitatedTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("incapacitatedTime"));
        }
        inline Ent::Gen2::String GraspableInteractionData::interactableBoneName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("interactableBoneName"));
        }
        inline Ent::Gen2::Float GraspableInteractionData::visualRotationRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("visualRotationRate"));
        }
        // GraspResistanceData
        inline Ent::Gen2::String GraspResistanceData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float GraspResistanceData::resistanceMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("resistanceMax"));
        }
        inline Ent::Gen2::ScaleConverter GraspResistanceData::strengthMultiplierCurve() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("strengthMultiplierCurve"));
        }
        // GeometryStamper
        inline Ent::Gen2::Transform3D GeometryStamper::Transform() const
        {
            return Ent::Gen2::Transform3D(getProperty().getObjectField("Transform"));
        }
        inline Ent::Gen2::String GeometryStamper::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SkinnedPhysMeshStamper
        inline Ent::Gen2::GeometryStamper SkinnedPhysMeshStamper::Super() const
        {
            return Ent::Gen2::GeometryStamper(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SkinnedPhysMeshStamper::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MeshStamper
        inline Ent::Gen2::String MeshStamper::MeshFilePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MeshFilePath"));
        }
        inline Ent::Gen2::GeometryStamper MeshStamper::Super() const
        {
            return Ent::Gen2::GeometryStamper(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Walkability MeshStamper::Walkability() const
        {
            return Ent::Gen2::Walkability(getProperty().getObjectField("Walkability"));
        }
        inline Ent::Gen2::String MeshStamper::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameTimeInMs
        // GameProfile
        inline Ent::Gen2::Map<char const*, Array<Array<Ent::Gen2::Tuple<Ent::Gen2::GameTimeInMs, Ent::Gen2::Float>>>> GameProfile::TypedScoreOverTimeList() const
        {
            return Ent::Gen2::Map<char const*, Array<Array<Ent::Gen2::Tuple<Ent::Gen2::GameTimeInMs, Ent::Gen2::Float>>>>(getProperty().getObjectField("TypedScoreOverTimeList"));
        }
        inline Ent::Gen2::String GameProfile::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameSoftCollisionData
        inline Ent::Gen2::Float GameSoftCollisionData::DecelerationFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DecelerationFactor"));
        }
        inline Ent::Gen2::Float GameSoftCollisionData::InsidePenetrationCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InsidePenetrationCoeff"));
        }
        inline Ent::Gen2::Float GameSoftCollisionData::MaxSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxSpeedFactor"));
        }
        inline Ent::Gen2::Float GameSoftCollisionData::MinSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinSpeedFactor"));
        }
        inline Ent::Gen2::SpeedMode GameSoftCollisionData::MinSpeedMode() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("MinSpeedMode"));
        }
        inline Ent::Gen2::Float GameSoftCollisionData::StuckDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("StuckDuration"));
        }
        inline Ent::Gen2::Float GameSoftCollisionData::StuckPenetrationCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("StuckPenetrationCoeff"));
        }
        inline Ent::Gen2::String GameSoftCollisionData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameSnapData
        inline Ent::Gen2::String GameSnapData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float GameSnapData::creatureSizeCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("creatureSizeCoeff"));
        }
        inline Ent::Gen2::Float GameSnapData::dirCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("dirCoeff"));
        }
        inline Ent::Gen2::Float GameSnapData::distCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("distCoeff"));
        }
        inline Ent::Gen2::Float GameSnapData::maxAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxAngle"));
        }
        inline Ent::Gen2::Float GameSnapData::maxDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxDist"));
        }
        // GameSlopeData
        inline Ent::Gen2::Float GameSlopeData::AngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngleMin"));
        }
        inline Ent::Gen2::Float GameSlopeData::AngleMinHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngleMinHysteresis"));
        }
        inline Ent::Gen2::Float GameSlopeData::ForceAgainstSlopeAdherenceMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ForceAgainstSlopeAdherenceMin"));
        }
        inline Ent::Gen2::Float GameSlopeData::ForceAgainstSlopeAdherenceMinHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ForceAgainstSlopeAdherenceMinHysteresis"));
        }
        inline Ent::Gen2::Float GameSlopeData::OrientationDotMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OrientationDotMin"));
        }
        inline Ent::Gen2::Float GameSlopeData::OrientationDotMinHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OrientationDotMinHysteresis"));
        }
        inline Ent::Gen2::String GameSlopeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameShamanVisionData
        inline Ent::Gen2::Float GameShamanVisionData::AudioAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AudioAngle"));
        }
        inline Ent::Gen2::Float GameShamanVisionData::IconDisableDisplayDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IconDisableDisplayDuration"));
        }
        inline Ent::Gen2::Float GameShamanVisionData::IconDisplayDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IconDisplayDuration"));
        }
        inline Ent::Gen2::Float GameShamanVisionData::IconEnableDisplayDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("IconEnableDisplayDuration"));
        }
        inline Ent::Gen2::ScaleConverter GameShamanVisionData::IntensityGoddess() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("IntensityGoddess"));
        }
        inline Ent::Gen2::ScaleConverter GameShamanVisionData::IntensityPlayer() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("IntensityPlayer"));
        }
        inline Ent::Gen2::ScaleConverter GameShamanVisionData::IntensitySpecie() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("IntensitySpecie"));
        }
        inline Ent::Gen2::ScaleConverter GameShamanVisionData::PerceptionGoddess() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("PerceptionGoddess"));
        }
        inline Ent::Gen2::ScaleConverter GameShamanVisionData::PerceptionPlayer() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("PerceptionPlayer"));
        }
        inline Ent::Gen2::ScaleConverter GameShamanVisionData::PerceptionSpecie() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("PerceptionSpecie"));
        }
        inline Ent::Gen2::String GameShamanVisionData::Sound_Locate_HeartBeat() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_Locate_HeartBeat"));
        }
        inline Ent::Gen2::String GameShamanVisionData::Sound_UI_Locate_HeartBeat_Stop() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_UI_Locate_HeartBeat_Stop"));
        }
        inline Ent::Gen2::String GameShamanVisionData::Sound_UI_Locate_In() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_UI_Locate_In"));
        }
        inline Ent::Gen2::String GameShamanVisionData::Sound_UI_Locate_Out() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_UI_Locate_Out"));
        }
        inline Ent::Gen2::String GameShamanVisionData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameReviveData
        inline Ent::Gen2::Float GameReviveData::AnimPlayRatioSpeedIn() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnimPlayRatioSpeedIn"));
        }
        inline Ent::Gen2::Float GameReviveData::AnimPlayRatioSpeedOut() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnimPlayRatioSpeedOut"));
        }
        inline Ent::Gen2::Float GameReviveData::AnimPlayRatioSpeedRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnimPlayRatioSpeedRate"));
        }
        inline Ent::Gen2::String GameReviveData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameRespawnData
        inline Ent::Gen2::Float GameRespawnData::RespawnDelayOnDeath() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RespawnDelayOnDeath"));
        }
        inline Ent::Gen2::Float GameRespawnData::SetRespawnPlaceAsCheckpointDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SetRespawnPlaceAsCheckpointDuration"));
        }
        inline Ent::Gen2::String GameRespawnData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GamePropelData
        inline Ent::Gen2::Float GamePropelData::AttractorFactorFallThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AttractorFactorFallThreshold"));
        }
        inline Ent::Gen2::Float GamePropelData::AttractorFactorRaiseThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AttractorFactorRaiseThreshold"));
        }
        inline Ent::Gen2::Float GamePropelData::EnterAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EnterAngleMin"));
        }
        inline Ent::Gen2::Float GamePropelData::EnterSpeedMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EnterSpeedMin"));
        }
        inline PrimArray<Ent::Gen2::Float> GamePropelData::Speed() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("Speed"));
        }
        inline Ent::Gen2::String GamePropelData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameParryData
        inline Ent::Gen2::Float GameParryData::Cooldown() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Cooldown"));
        }
        inline Ent::Gen2::String GameParryData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GamePadSpeedBehaviorData
        inline Ent::Gen2::ScaleConverter GamePadSpeedBehaviorData::DeadZoneThreshold() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("DeadZoneThreshold"));
        }
        inline Ent::Gen2::Float GamePadSpeedBehaviorData::JoyAcceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoyAcceleration"));
        }
        inline Ent::Gen2::Float GamePadSpeedBehaviorData::PostponeDelayMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PostponeDelayMax"));
        }
        inline Ent::Gen2::Float GamePadSpeedBehaviorData::PostponeNormMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PostponeNormMax"));
        }
        inline Ent::Gen2::Float GamePadSpeedBehaviorData::SpeedFastMinDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedFastMinDuration"));
        }
        inline Ent::Gen2::Float GamePadSpeedBehaviorData::SpeedMediumThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedMediumThreshold"));
        }
        inline Ent::Gen2::ScaleConverter GamePadSpeedBehaviorData::SpeedSlowThreshold() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("SpeedSlowThreshold"));
        }
        inline Ent::Gen2::String GamePadSpeedBehaviorData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GamePadNavigationData
        inline Ent::Gen2::String GamePadNavigationData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float GamePadNavigationData::clamberDirectionDeltaAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("clamberDirectionDeltaAngle"));
        }
        inline Ent::Gen2::Float GamePadNavigationData::invertInputFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("invertInputFactor"));
        }
        inline Ent::Gen2::Float GamePadNavigationData::joyLockedAngularSpeedMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("joyLockedAngularSpeedMax"));
        }
        inline Ent::Gen2::Float GamePadNavigationData::meshNavigationMaxDeltaAngleToKeepInputLock() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("meshNavigationMaxDeltaAngleToKeepInputLock"));
        }
        inline Ent::Gen2::Float GamePadNavigationData::normalAlignmentToKeepTrajectory() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("normalAlignmentToKeepTrajectory"));
        }
        // GameLODData
        inline PrimArray<Ent::Gen2::Float> GameLODData::CreatureDistance() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("CreatureDistance"));
        }
        inline Ent::Gen2::String GameLODData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameInfoDB
        inline Ent::Gen2::Map<char const*, Ent::Gen2::Map<char const*, Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_>> GameInfoDB::Store() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::Map<char const*, Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_>>(getProperty().getObjectField("Store"));
        }
        inline Ent::Gen2::String GameInfoDB::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameImmersionData
        inline Ent::Gen2::String GameImmersionData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float GameImmersionData::friction() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("friction"));
        }
        inline Ent::Gen2::Float GameImmersionData::immersedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("immersedFactor"));
        }
        inline Ent::Gen2::Float GameImmersionData::immersedFactorMaxToJump() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("immersedFactorMaxToJump"));
        }
        inline Ent::Gen2::Float GameImmersionData::pitchMaxAngleToJump() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("pitchMaxAngleToJump"));
        }
        inline Ent::Gen2::Float GameImmersionData::pitchMinAngleToJump() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("pitchMinAngleToJump"));
        }
        inline Ent::Gen2::ScaleConverter GameImmersionData::reachSurfaceAcceleration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("reachSurfaceAcceleration"));
        }
        inline Ent::Gen2::Float GameImmersionData::speedZMinToJump() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("speedZMinToJump"));
        }
        // GameFlyData_FlyUp
        inline Ent::Gen2::Float GameFlyData_FlyUp::Acceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Acceleration"));
        }
        inline Ent::Gen2::Float GameFlyData_FlyUp::Deceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Deceleration"));
        }
        inline Ent::Gen2::Float GameFlyData_FlyUp::ExitDeceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ExitDeceleration"));
        }
        inline Ent::Gen2::Float GameFlyData_FlyUp::PitchStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PitchStart"));
        }
        inline Ent::Gen2::ScaleConverter GameFlyData_FlyUp::SpeedFactor() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("SpeedFactor"));
        }
        inline Ent::Gen2::String GameFlyData_FlyUp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameFlyData_FlyDown
        inline Ent::Gen2::ScaleConverter GameFlyData_FlyDown::Acceleration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("Acceleration"));
        }
        inline Ent::Gen2::ScaleConverter GameFlyData_FlyDown::Deceleration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("Deceleration"));
        }
        inline Ent::Gen2::Float GameFlyData_FlyDown::ExitDeceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ExitDeceleration"));
        }
        inline Ent::Gen2::Float GameFlyData_FlyDown::PitchStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PitchStart"));
        }
        inline Ent::Gen2::Float GameFlyData_FlyDown::SpeedSlowFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedSlowFactor"));
        }
        inline Ent::Gen2::String GameFlyData_FlyDown::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameFlyData_Flap
        inline Ent::Gen2::Float GameFlyData_Flap::RollMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RollMin"));
        }
        inline Ent::Gen2::String GameFlyData_Flap::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameFlyData_Dive
        inline Ent::Gen2::ScaleConverter GameFlyData_Dive::Acceleration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("Acceleration"));
        }
        inline Ent::Gen2::ScaleConverter GameFlyData_Dive::Deceleration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("Deceleration"));
        }
        inline Ent::Gen2::Float GameFlyData_Dive::ExitDeceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ExitDeceleration"));
        }
        inline Ent::Gen2::Float GameFlyData_Dive::SpeedFastFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedFastFactor"));
        }
        inline Ent::Gen2::String GameFlyData_Dive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameFlyData_Centrifugal
        inline Ent::Gen2::ScaleConverter GameFlyData_Centrifugal::Acceleration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("Acceleration"));
        }
        inline Ent::Gen2::String GameFlyData_Centrifugal::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameFlyData
        inline Ent::Gen2::GameFlyData_Centrifugal GameFlyData::Centrifugal() const
        {
            return Ent::Gen2::GameFlyData_Centrifugal(getProperty().getObjectField("Centrifugal"));
        }
        inline Ent::Gen2::GameFlyData_Dive GameFlyData::Dive() const
        {
            return Ent::Gen2::GameFlyData_Dive(getProperty().getObjectField("Dive"));
        }
        inline Ent::Gen2::GameFlyData_Flap GameFlyData::Flap() const
        {
            return Ent::Gen2::GameFlyData_Flap(getProperty().getObjectField("Flap"));
        }
        inline Ent::Gen2::ScaleConverter GameFlyData::FlyBlendIn() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("FlyBlendIn"));
        }
        inline Ent::Gen2::GameFlyData_FlyDown GameFlyData::FlyDown() const
        {
            return Ent::Gen2::GameFlyData_FlyDown(getProperty().getObjectField("FlyDown"));
        }
        inline Ent::Gen2::ScaleConverter GameFlyData::FlyExitBlendIn() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("FlyExitBlendIn"));
        }
        inline Ent::Gen2::ScaleConverter GameFlyData::FlyPitchCoeffFromSpeedCoeff() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("FlyPitchCoeffFromSpeedCoeff"));
        }
        inline Ent::Gen2::GameFlyData_FlyUp GameFlyData::FlyUp() const
        {
            return Ent::Gen2::GameFlyData_FlyUp(getProperty().getObjectField("FlyUp"));
        }
        inline Ent::Gen2::String GameFlyData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameFluidData_HeightThreshold
        inline Ent::Gen2::Float GameFluidData_HeightThreshold::Damage() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Damage"));
        }
        inline Ent::Gen2::Float GameFluidData_HeightThreshold::Depth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Depth"));
        }
        inline Ent::Gen2::HitStyle GameFluidData_HeightThreshold::HitStyle() const
        {
            return Ent::Gen2::HitStyle(getProperty().getObjectField("HitStyle"));
        }
        inline Ent::Gen2::Float GameFluidData_HeightThreshold::Impact() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Impact"));
        }
        inline Ent::Gen2::String GameFluidData_HeightThreshold::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameFluidData
        inline PrimArray<Ent::Gen2::Float> GameFluidData::FlowSpeedInfluences() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("FlowSpeedInfluences"));
        }
        inline Array<Array<Ent::Gen2::GameFluidData_HeightThreshold>> GameFluidData::HeightThresholds() const
        {
            return Array<Array<Ent::Gen2::GameFluidData_HeightThreshold>>(getProperty().getObjectField("HeightThresholds"));
        }
        inline Ent::Gen2::String GameFluidData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameFeetCatchUpData
        inline Ent::Gen2::String GameFeetCatchUpData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::ScaleConverter GameFeetCatchUpData::aerialRate() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("aerialRate"));
        }
        inline Ent::Gen2::ScaleConverter GameFeetCatchUpData::groundRate() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("groundRate"));
        }
        inline Ent::Gen2::Map<SizeEnum, Ent::Gen2::Bool> GameFeetCatchUpData::useHeightmapPerSize() const
        {
            return Ent::Gen2::Map<SizeEnum, Ent::Gen2::Bool>(getProperty().getObjectField("useHeightmapPerSize"));
        }
        // GameFallData
        inline Ent::Gen2::Float GameFallData::Acceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Acceleration"));
        }
        inline Ent::Gen2::Float GameFallData::AirControlBrakeAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AirControlBrakeAngleMin"));
        }
        inline Ent::Gen2::ScaleConverter GameFallData::AirControlDirection() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("AirControlDirection"));
        }
        inline Ent::Gen2::Float GameFallData::AirControlSpeedAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AirControlSpeedAngleMax"));
        }
        inline Ent::Gen2::Float GameFallData::Friction() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Friction"));
        }
        inline Ent::Gen2::String GameFallData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameEdgeData
        inline Ent::Gen2::Float GameEdgeData::EdgeAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EdgeAngleMax"));
        }
        inline Ent::Gen2::Float GameEdgeData::EdgeSizeMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EdgeSizeMin"));
        }
        inline Ent::Gen2::String GameEdgeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameDeathData
        inline Ent::Gen2::String GameDeathData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float GameDeathData::defaultFreedDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("defaultFreedDelay"));
        }
        inline Ent::Gen2::Float GameDeathData::immersedFreedDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("immersedFreedDelay"));
        }
        inline Ent::Gen2::Float GameDeathData::leavingLavaDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("leavingLavaDelay"));
        }
        inline Ent::Gen2::Float GameDeathData::meetingLavaDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("meetingLavaDelay"));
        }
        // GameClockManager_TimeOfDay
        inline Ent::Gen2::Int GameClockManager_TimeOfDay::Hour() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Hour"));
        }
        inline Ent::Gen2::Int GameClockManager_TimeOfDay::Minute() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Minute"));
        }
        inline Ent::Gen2::String GameClockManager_TimeOfDay::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameClockManager_GameDate
        inline Ent::Gen2::Int GameClockManager_GameDate::DayOfYear() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("DayOfYear"));
        }
        inline Ent::Gen2::String GameClockManager_GameDate::Season() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Season"));
        }
        inline Ent::Gen2::GameClockManager_TimeOfDay GameClockManager_GameDate::TimeOfDay() const
        {
            return Ent::Gen2::GameClockManager_TimeOfDay(getProperty().getObjectField("TimeOfDay"));
        }
        inline Ent::Gen2::Int GameClockManager_GameDate::Year() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Year"));
        }
        inline Ent::Gen2::String GameClockManager_GameDate::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameClockManager
        inline Ent::Gen2::Int GameClockManager::DayDurationInMin() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("DayDurationInMin"));
        }
        inline Ent::Gen2::Int GameClockManager::DayDurationInMs() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("DayDurationInMs"));
        }
        inline Ent::Gen2::Int GameClockManager::FallDurationInDay() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("FallDurationInDay"));
        }
        inline Ent::Gen2::Bool GameClockManager::FreezeTime() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("FreezeTime"));
        }
        inline Ent::Gen2::Int GameClockManager::SpringDurationInDay() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SpringDurationInDay"));
        }
        inline Ent::Gen2::GameClockManager_GameDate GameClockManager::StartTime() const
        {
            return Ent::Gen2::GameClockManager_GameDate(getProperty().getObjectField("StartTime"));
        }
        inline Ent::Gen2::Int GameClockManager::SummerDurationInDay() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SummerDurationInDay"));
        }
        inline Ent::Gen2::Manager GameClockManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Int GameClockManager::WinterDurationInDay() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("WinterDurationInDay"));
        }
        inline Ent::Gen2::String GameClockManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameBiteData
        inline PrimArray<Ent::Gen2::Float> GameBiteData::BiterShakeStamina() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("BiterShakeStamina"));
        }
        inline PrimArray<Ent::Gen2::Float> GameBiteData::BiterStrength() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("BiterStrength"));
        }
        inline PrimArray<Ent::Gen2::Float> GameBiteData::BittenResistance() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("BittenResistance"));
        }
        inline PrimArray<Ent::Gen2::Float> GameBiteData::BittenShakeExhaustion() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("BittenShakeExhaustion"));
        }
        inline Ent::Gen2::String GameBiteData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameBeamSnapData
        inline Ent::Gen2::Float GameBeamSnapData::Max2DDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Max2DDist"));
        }
        inline Ent::Gen2::Float GameBeamSnapData::Max2DDistScoreCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Max2DDistScoreCoeff"));
        }
        inline Ent::Gen2::Float GameBeamSnapData::Max3DDistScoreCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Max3DDistScoreCoeff"));
        }
        inline Ent::Gen2::Float GameBeamSnapData::MinCameraDepth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinCameraDepth"));
        }
        inline Ent::Gen2::String GameBeamSnapData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FurProperties
        inline Ent::Gen2::Float FurProperties::AngularShift() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngularShift"));
        }
        inline Ent::Gen2::Float FurProperties::AzimuthalRoughness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AzimuthalRoughness"));
        }
        inline Ent::Gen2::Float FurProperties::FinsMaskUScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FinsMaskUScale"));
        }
        inline Ent::Gen2::Int FurProperties::FinsTextureArrayIndex() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("FinsTextureArrayIndex"));
        }
        inline Ent::Gen2::Float FurProperties::FocusShadowDistanceOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FocusShadowDistanceOffset"));
        }
        inline Ent::Gen2::Float FurProperties::LinearAbsorption() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LinearAbsorption"));
        }
        inline Ent::Gen2::Float FurProperties::MultiScatteringPower() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MultiScatteringPower"));
        }
        inline Ent::Gen2::Float FurProperties::MultiScatteringWrap() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MultiScatteringWrap"));
        }
        inline Ent::Gen2::Float FurProperties::Roughness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Roughness"));
        }
        inline Ent::Gen2::Vector3 FurProperties::SpecularFactor() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("SpecularFactor"));
        }
        inline Ent::Gen2::Float FurProperties::Stiffness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Stiffness"));
        }
        inline Ent::Gen2::Float FurProperties::Thickness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Thickness"));
        }
        inline Ent::Gen2::Bool FurProperties::UseNewLighting() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseNewLighting"));
        }
        inline Ent::Gen2::Float FurProperties::Weight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Weight"));
        }
        inline Ent::Gen2::String FurProperties::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float FurProperties::focusShadowRelativeThickness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("focusShadowRelativeThickness"));
        }
        // FreezeData
        inline Ent::Gen2::String FreezeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float FreezeData::deltaTimeFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("deltaTimeFactor"));
        }
        inline Ent::Gen2::eventStringHash FreezeData::eventStringHash() const
        {
            return Ent::Gen2::eventStringHash(getProperty().getObjectField("eventStringHash"));
        }
        inline Ent::Gen2::Float FreezeData::stateDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("stateDuration"));
        }
        inline Ent::Gen2::Float FreezeData::transitionInDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("transitionInDuration"));
        }
        inline Ent::Gen2::Float FreezeData::transitionOutDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("transitionOutDuration"));
        }
        // ForceMultiplier
        inline Ent::Gen2::String ForceMultiplier::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ForceMultiplier::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float ForceMultiplier::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // ForceBlendInReachRequired
        inline Ent::Gen2::String ForceBlendInReachRequired::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ForceBlendInReachRequired::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool ForceBlendInReachRequired::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // ForceBlendIn
        inline Ent::Gen2::String ForceBlendIn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ForceBlendIn::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float ForceBlendIn::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // FluidVolumeComponentGD_SimulationParameters
        inline Ent::Gen2::Float FluidVolumeComponentGD_SimulationParameters::Evaporation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Evaporation"));
        }
        inline Ent::Gen2::Float FluidVolumeComponentGD_SimulationParameters::Momentum() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Momentum"));
        }
        inline Ent::Gen2::Float FluidVolumeComponentGD_SimulationParameters::Precision() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Precision"));
        }
        inline Ent::Gen2::Float FluidVolumeComponentGD_SimulationParameters::Viscosity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Viscosity"));
        }
        inline Ent::Gen2::String FluidVolumeComponentGD_SimulationParameters::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidVolumeComponentGD_HeightMapData
        inline Ent::Gen2::String FluidVolumeComponentGD_HeightMapData::Path() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Path"));
        }
        inline Ent::Gen2::String FluidVolumeComponentGD_HeightMapData::TerrainName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("TerrainName"));
        }
        inline Ent::Gen2::Vector2 FluidVolumeComponentGD_HeightMapData::WorldSize() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("WorldSize"));
        }
        inline Ent::Gen2::String FluidVolumeComponentGD_HeightMapData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidVolumeComponentGD_FluidVolumeData
        inline Ent::Gen2::FluidVolumeComponentGD_HeightMapData FluidVolumeComponentGD_FluidVolumeData::HeightMap() const
        {
            return Ent::Gen2::FluidVolumeComponentGD_HeightMapData(getProperty().getObjectField("HeightMap"));
        }
        inline Ent::Gen2::Vector2 FluidVolumeComponentGD_FluidVolumeData::InHeightMapWorldSizeOffset() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("InHeightMapWorldSizeOffset"));
        }
        inline Ent::Gen2::String FluidVolumeComponentGD_FluidVolumeData::Material() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Material"));
        }
        inline Ent::Gen2::FluidVolumeComponentGD_SimulationParameters FluidVolumeComponentGD_FluidVolumeData::Simulation() const
        {
            return Ent::Gen2::FluidVolumeComponentGD_SimulationParameters(getProperty().getObjectField("Simulation"));
        }
        inline Ent::Gen2::Vector2 FluidVolumeComponentGD_FluidVolumeData::WorldSize() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("WorldSize"));
        }
        inline Ent::Gen2::String FluidVolumeComponentGD_FluidVolumeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ImmersedBehaviorData
        inline Ent::Gen2::String ImmersedBehaviorData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ImmersedBehaviorData::canClimbWaterfall() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("canClimbWaterfall"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::constrainedToPlaneForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("constrainedToPlaneForce"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::delayBetweenImpulses() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("delayBetweenImpulses"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::depth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("depth"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::depthHysteresisCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("depthHysteresisCoeff"));
        }
        inline Ent::Gen2::ScaleConverter ImmersedBehaviorData::depthMaxRange() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("depthMaxRange"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::flotation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("flotation"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::immersionEndWaterfallJump() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("immersionEndWaterfallJump"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::impulseForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("impulseForce"));
        }
        inline Ent::Gen2::Bool ImmersedBehaviorData::isAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isAllowed"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::minTooDeepPushSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("minTooDeepPushSpeed"));
        }
        inline Ent::Gen2::Float ImmersedBehaviorData::reachSurfaceAccelerationCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("reachSurfaceAccelerationCoeff"));
        }
        inline Ent::Gen2::Map<FluidTypeEnum, Ent::Gen2::ScaleConverter> ImmersedBehaviorData::slowDowns() const
        {
            return Ent::Gen2::Map<FluidTypeEnum, Ent::Gen2::ScaleConverter>(getProperty().getObjectField("slowDowns"));
        }
        // FluidData
        inline Ent::Gen2::String FluidData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::constraintPlaneWorldPosition FluidData::constraintPlaneWorldPosition() const
        {
            return Ent::Gen2::constraintPlaneWorldPosition(getProperty().getObjectField("constraintPlaneWorldPosition"));
        }
        inline Ent::Gen2::Float FluidData::depth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("depth"));
        }
        inline Ent::Gen2::Float FluidData::energy() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("energy"));
        }
        inline Ent::Gen2::Vector3 FluidData::fluidCurrent() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("fluidCurrent"));
        }
        inline Ent::Gen2::Bool FluidData::hasDepthImpactOnControl() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("hasDepthImpactOnControl"));
        }
        inline Ent::Gen2::Bool FluidData::isWaterfall() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isWaterfall"));
        }
        inline Ent::Gen2::Float FluidData::level() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("level"));
        }
        inline Ent::Gen2::Vector3 FluidData::normal() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("normal"));
        }
        inline Ent::Gen2::FluidType FluidData::type() const
        {
            return Ent::Gen2::FluidType(getProperty().getObjectField("type"));
        }
        // FloatRange
        inline Ent::Gen2::Vector2 FloatRange::MinMax() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("MinMax"));
        }
        inline Ent::Gen2::String FloatRange::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SmallActorSpawnRuleData
        inline Ent::Gen2::String SmallActorSpawnRuleData::AudioEventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("AudioEventName"));
        }
        inline Ent::Gen2::String SmallActorSpawnRuleData::AudioEventSoundBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("AudioEventSoundBank"));
        }
        inline Ent::Gen2::FloatRange SmallActorSpawnRuleData::DayTimeRange() const
        {
            return Ent::Gen2::FloatRange(getProperty().getObjectField("DayTimeRange"));
        }
        inline Ent::Gen2::FloatRange SmallActorSpawnRuleData::DistanceRange() const
        {
            return Ent::Gen2::FloatRange(getProperty().getObjectField("DistanceRange"));
        }
        inline Ent::Gen2::FloatRange SmallActorSpawnRuleData::PrecipitationRange() const
        {
            return Ent::Gen2::FloatRange(getProperty().getObjectField("PrecipitationRange"));
        }
        inline Ent::Gen2::FloatRange SmallActorSpawnRuleData::RegenRange() const
        {
            return Ent::Gen2::FloatRange(getProperty().getObjectField("RegenRange"));
        }
        inline Ent::Gen2::Float SmallActorSpawnRuleData::SpawnProbability() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpawnProbability"));
        }
        inline Ent::Gen2::String SmallActorSpawnRuleData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SmallActorSpawnPointData
        inline Ent::Gen2::Float SmallActorSpawnPointData::SelectionProbability() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SelectionProbability"));
        }
        inline Array<Ent::Gen2::SmallActorSpawnRuleData> SmallActorSpawnPointData::SpawnRules() const
        {
            return Array<Ent::Gen2::SmallActorSpawnRuleData>(getProperty().getObjectField("SpawnRules"));
        }
        inline Ent::Gen2::String SmallActorSpawnPointData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FadeDuration
        inline Ent::Gen2::String FadeDuration::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool FadeDuration::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float FadeDuration::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // FadeDelay
        inline Ent::Gen2::String FadeDelay::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool FadeDelay::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float FadeDelay::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // FactionSpecieRelationData
        inline Ent::Gen2::String FactionSpecieRelationData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String FactionSpecieRelationData::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        inline Ent::Gen2::String FactionSpecieRelationData::specie() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("specie"));
        }
        // FactionRelationData
        inline Ent::Gen2::String FactionRelationData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String FactionRelationData::faction1() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("faction1"));
        }
        inline Ent::Gen2::String FactionRelationData::faction2() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("faction2"));
        }
        inline Ent::Gen2::String FactionRelationData::relation() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("relation"));
        }
        // FactionData
        inline Ent::Gen2::String FactionData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String FactionData::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        // FactionManager
        inline Array<Ent::Gen2::FactionSpecieRelationData> FactionManager::FactionSpecieRelations() const
        {
            return Array<Ent::Gen2::FactionSpecieRelationData>(getProperty().getObjectField("FactionSpecieRelations"));
        }
        inline Array<Ent::Gen2::FactionData> FactionManager::Factions() const
        {
            return Array<Ent::Gen2::FactionData>(getProperty().getObjectField("Factions"));
        }
        inline Array<Ent::Gen2::FactionRelationData> FactionManager::Relations() const
        {
            return Array<Ent::Gen2::FactionRelationData>(getProperty().getObjectField("Relations"));
        }
        inline Ent::Gen2::Manager FactionManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FactionManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EventMusic
        inline Ent::Gen2::String EventMusic::PlayerDeathBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PlayerDeathBank"));
        }
        inline Ent::Gen2::String EventMusic::PlayerDeathEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PlayerDeathEvent"));
        }
        inline Ent::Gen2::Int EventMusic::PlayerDeathMusicPriority() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("PlayerDeathMusicPriority"));
        }
        inline Ent::Gen2::Float EventMusic::PlayerDeathTimeOnStack() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PlayerDeathTimeOnStack"));
        }
        inline Ent::Gen2::String EventMusic::PlayerVictoryBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PlayerVictoryBank"));
        }
        inline Ent::Gen2::String EventMusic::PlayerVictoryEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PlayerVictoryEvent"));
        }
        inline Ent::Gen2::String EventMusic::ReleaseCreatureBankPrefix() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ReleaseCreatureBankPrefix"));
        }
        inline Ent::Gen2::String EventMusic::ReleaseCreatureEventPrefix() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ReleaseCreatureEventPrefix"));
        }
        inline Ent::Gen2::Int EventMusic::ReleaseCreatureMusicPriority() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ReleaseCreatureMusicPriority"));
        }
        inline Ent::Gen2::Float EventMusic::ReleaseCreatureTimeOnStack() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ReleaseCreatureTimeOnStack"));
        }
        inline Ent::Gen2::String EventMusic::ReleaseSoulBankPrefix() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ReleaseSoulBankPrefix"));
        }
        inline Ent::Gen2::String EventMusic::ReleaseSoulEventPrefix() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ReleaseSoulEventPrefix"));
        }
        inline Ent::Gen2::Int EventMusic::ReleaseSoulMusicPriority() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ReleaseSoulMusicPriority"));
        }
        inline Ent::Gen2::Float EventMusic::ReleaseSoulTimeOnStack() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ReleaseSoulTimeOnStack"));
        }
        inline Ent::Gen2::SyncTempoMode EventMusic::SynchronizationMode() const
        {
            return Ent::Gen2::SyncTempoMode(getProperty().getObjectField("SynchronizationMode"));
        }
        inline Ent::Gen2::String EventMusic::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MusicManager
        inline Array<Ent::Gen2::MusicCategory> MusicManager::Categories() const
        {
            return Array<Ent::Gen2::MusicCategory>(getProperty().getObjectField("Categories"));
        }
        inline Ent::Gen2::EventMusic MusicManager::EventMusicParam() const
        {
            return Ent::Gen2::EventMusic(getProperty().getObjectField("EventMusicParam"));
        }
        inline PrimArray<Ent::Gen2::String> MusicManager::PlayerMusicTypes() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("PlayerMusicTypes"));
        }
        inline Ent::Gen2::String MusicManager::RTPCMixWorldPrefix() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPCMixWorldPrefix"));
        }
        inline Ent::Gen2::String MusicManager::RelationsParamPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RelationsParamPath"));
        }
        inline Ent::Gen2::ShowdownMusic MusicManager::ShowdownMusicParam() const
        {
            return Ent::Gen2::ShowdownMusic(getProperty().getObjectField("ShowdownMusicParam"));
        }
        inline Ent::Gen2::Manager MusicManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::UIMusic MusicManager::UIMusicParam() const
        {
            return Ent::Gen2::UIMusic(getProperty().getObjectField("UIMusicParam"));
        }
        inline PrimArray<Ent::Gen2::String> MusicManager::WorldMusicTypes() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("WorldMusicTypes"));
        }
        inline Ent::Gen2::String MusicManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EventCameraData
        inline Ent::Gen2::Float EventCameraData::BlendCameraTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BlendCameraTime"));
        }
        inline Ent::Gen2::Bool EventCameraData::CameraAimTriggerActor() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CameraAimTriggerActor"));
        }
        inline Array<Ent::Gen2::Vector3> EventCameraData::CameraOffsets() const
        {
            return Array<Ent::Gen2::Vector3>(getProperty().getObjectField("CameraOffsets"));
        }
        inline Ent::Gen2::Float EventCameraData::DOFFarStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFFarStart"));
        }
        inline Ent::Gen2::Float EventCameraData::DOFFarStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFFarStop"));
        }
        inline Ent::Gen2::Float EventCameraData::DOFMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFMultiplier"));
        }
        inline Ent::Gen2::Float EventCameraData::DOFNearStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFNearStart"));
        }
        inline Ent::Gen2::Float EventCameraData::DOFNearStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFNearStop"));
        }
        inline Ent::Gen2::Bool EventCameraData::DOFRelativeTarget() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DOFRelativeTarget"));
        }
        inline Ent::Gen2::Float EventCameraData::EventCameraTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EventCameraTime"));
        }
        inline Ent::Gen2::Float EventCameraData::FOV() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FOV"));
        }
        inline Ent::Gen2::Bool EventCameraData::FixedCam() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("FixedCam"));
        }
        inline Ent::Gen2::Bool EventCameraData::FollowCam() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("FollowCam"));
        }
        inline Ent::Gen2::Bool EventCameraData::FollowTarget() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("FollowTarget"));
        }
        inline Ent::Gen2::Float EventCameraData::OffsetsBlendTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OffsetsBlendTime"));
        }
        inline Ent::Gen2::Bool EventCameraData::PositionsAngularBlend() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("PositionsAngularBlend"));
        }
        inline Ent::Gen2::Float EventCameraData::PositionsBlendTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PositionsBlendTime"));
        }
        inline Array<Ent::Gen2::Vector3> EventCameraData::TargetOffsets() const
        {
            return Array<Ent::Gen2::Vector3>(getProperty().getObjectField("TargetOffsets"));
        }
        inline Ent::Gen2::Bool EventCameraData::UseDOF() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseDOF"));
        }
        inline Ent::Gen2::Bool EventCameraData::UseOffsetsSpline() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseOffsetsSpline"));
        }
        inline Ent::Gen2::Bool EventCameraData::UsePositionsSpline() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UsePositionsSpline"));
        }
        inline Ent::Gen2::Bool EventCameraData::UseTriggerActorPosition() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseTriggerActorPosition"));
        }
        inline Ent::Gen2::Bool EventCameraData::UseTriggerActorSight() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseTriggerActorSight"));
        }
        inline Ent::Gen2::String EventCameraData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStaffOwnedVertebras_Inputs
        inline Ent::Gen2::String EntityStateStaffOwnedVertebras_Inputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int EntityStateStaffOwnedVertebras_Inputs::ownedVertebrasNumber() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ownedVertebrasNumber"));
        }
        // EntityStateSet
        inline Array<Ent::Gen2::ResponsiblePointer_ActorState_> EntityStateSet::EntityStates() const
        {
            return Array<Ent::Gen2::ResponsiblePointer_ActorState_>(getProperty().getObjectField("EntityStates"));
        }
        inline Ent::Gen2::String EntityStateSet::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PlayerState
        inline Ent::Gen2::String PlayerState::ActiveScene() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ActiveScene"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::Map<char const*, Ent::Gen2::EntityStateSet>> PlayerState::DynamicStates() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::Map<char const*, Ent::Gen2::EntityStateSet>>(getProperty().getObjectField("DynamicStates"));
        }
        inline Ent::Gen2::GameInfoDB PlayerState::GameInfoDB() const
        {
            return Ent::Gen2::GameInfoDB(getProperty().getObjectField("GameInfoDB"));
        }
        inline Ent::Gen2::Int PlayerState::Version() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Version"));
        }
        inline Ent::Gen2::String PlayerState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateMotionConstrained_Inputs
        inline Ent::Gen2::Bool EntityStateMotionConstrained_Inputs::ConstrainedLanding() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ConstrainedLanding"));
        }
        inline Ent::Gen2::Bool EntityStateMotionConstrained_Inputs::InputCorrection() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("InputCorrection"));
        }
        inline Ent::Gen2::Bool EntityStateMotionConstrained_Inputs::StayOnCurve() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("StayOnCurve"));
        }
        inline Ent::Gen2::String EntityStateMotionConstrained_Inputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateManageChildEntityPool_Inputs
        inline Ent::Gen2::Float EntityStateManageChildEntityPool_Inputs::DistanceMaxFromCamera() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceMaxFromCamera"));
        }
        inline Ent::Gen2::Float EntityStateManageChildEntityPool_Inputs::DistanceMaxFromSpawner() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceMaxFromSpawner"));
        }
        inline Ent::Gen2::Float EntityStateManageChildEntityPool_Inputs::SafeDistanceAroundPlayer() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SafeDistanceAroundPlayer"));
        }
        inline Ent::Gen2::EntityRef EntityStateManageChildEntityPool_Inputs::SpawnerEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("SpawnerEntityRef"));
        }
        inline Ent::Gen2::Float EntityStateManageChildEntityPool_Inputs::UnspawnDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("UnspawnDelay"));
        }
        inline Ent::Gen2::Float EntityStateManageChildEntityPool_Inputs::UnspawnRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("UnspawnRadius"));
        }
        inline Ent::Gen2::String EntityStateManageChildEntityPool_Inputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateIncapacitated_Inputs
        inline Ent::Gen2::Float EntityStateIncapacitated_Inputs::Time() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Time"));
        }
        inline Ent::Gen2::String EntityStateIncapacitated_Inputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateChargeMode_EntityStateChargeModeInputs
        inline Ent::Gen2::MoveCapacityData_OrientationSpeed EntityStateChargeMode_EntityStateChargeModeInputs::AngularSpeed() const
        {
            return Ent::Gen2::MoveCapacityData_OrientationSpeed(getProperty().getObjectField("AngularSpeed"));
        }
        inline Ent::Gen2::Float EntityStateChargeMode_EntityStateChargeModeInputs::ForceMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ForceMultiplier"));
        }
        inline Ent::Gen2::String EntityStateChargeMode_EntityStateChargeModeInputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityLODData
        inline Ent::Gen2::EntityRef EntityLODData::EntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("EntityRef"));
        }
        inline Ent::Gen2::Float EntityLODData::MaxDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxDist"));
        }
        inline Ent::Gen2::String EntityLODData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityID
        // VegetationPCloudData
        inline PrimArray<Ent::Gen2::EnergyValue> VegetationPCloudData::EnergyValues() const
        {
            return PrimArray<Ent::Gen2::EnergyValue>(getProperty().getObjectField("EnergyValues"));
        }
        inline Ent::Gen2::String VegetationPCloudData::PCloudPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PCloudPath"));
        }
        inline PrimArray<Ent::Gen2::String> VegetationPCloudData::UsedVegetations() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("UsedVegetations"));
        }
        inline Ent::Gen2::String VegetationPCloudData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RegenData
        inline PrimArray<Ent::Gen2::EnergyValue> RegenData::EnergyValues() const
        {
            return PrimArray<Ent::Gen2::EnergyValue>(getProperty().getObjectField("EnergyValues"));
        }
        inline Array<Ent::Gen2::EntityLODData> RegenData::LODData() const
        {
            return Array<Ent::Gen2::EntityLODData>(getProperty().getObjectField("LODData"));
        }
        inline Ent::Gen2::String RegenData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergySideData
        inline Ent::Gen2::EntityRef EnergySideData::EntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("EntityRef"));
        }
        inline Ent::Gen2::String EnergySideData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReviveEnergyComponentInput_EnergySide
        inline Ent::Gen2::String ReviveEnergyComponentInput_EnergySide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ReviveEnergyComponentInput_EnergySide::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::EnergySide ReviveEnergyComponentInput_EnergySide::val() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("val"));
        }
        // EntityStateRevive_Inputs
        inline Ent::Gen2::Float EntityStateRevive_Inputs::Damages() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Damages"));
        }
        inline Ent::Gen2::EnergySide EntityStateRevive_Inputs::EnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::String EntityStateRevive_Inputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCreatureHatching_Inputs
        inline Ent::Gen2::EnergySide EntityStateCreatureHatching_Inputs::EnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::Bool EntityStateCreatureHatching_Inputs::ForceSuccess() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ForceSuccess"));
        }
        inline Ent::Gen2::MinReviveRatio EntityStateCreatureHatching_Inputs::MinReviveRatio() const
        {
            return Ent::Gen2::MinReviveRatio(getProperty().getObjectField("MinReviveRatio"));
        }
        inline Ent::Gen2::String EntityStateCreatureHatching_Inputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergySideEvent
        inline Ent::Gen2::Float EnergySideEvent::ElapsedTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ElapsedTime"));
        }
        inline Ent::Gen2::EnergySide EnergySideEvent::EnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::String EnergySideEvent::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RegenerationManager
        inline Ent::Gen2::EnergyValue RegenerationManager::BackgroundEnergyValue() const
        {
            return Ent::Gen2::EnergyValue(getProperty().getObjectField("BackgroundEnergyValue"));
        }
        inline Ent::Gen2::RegenAreaTransitionSettings RegenerationManager::DefaultTransitionWaveSettings() const
        {
            return Ent::Gen2::RegenAreaTransitionSettings(getProperty().getObjectField("DefaultTransitionWaveSettings"));
        }
        inline Ent::Gen2::Map<EnergyIntensityEnum, Ent::Gen2::RegenerationManager_EnergyAreaSetting> RegenerationManager::EnergyAreaSettingsMap() const
        {
            return Ent::Gen2::Map<EnergyIntensityEnum, Ent::Gen2::RegenerationManager_EnergyAreaSetting>(getProperty().getObjectField("EnergyAreaSettingsMap"));
        }
        inline Ent::Gen2::Float RegenerationManager::EnergyStrongValueThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EnergyStrongValueThreshold"));
        }
        inline Ent::Gen2::Int RegenerationManager::MaxDispatchedRegenQueries() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxDispatchedRegenQueries"));
        }
        inline Ent::Gen2::Int RegenerationManager::MaxDynamicRegenEffectCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxDynamicRegenEffectCount"));
        }
        inline Ent::Gen2::Int RegenerationManager::MaxRegenAreaPerCluster() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxRegenAreaPerCluster"));
        }
        inline Ent::Gen2::Int RegenerationManager::RegenAreaClusterWorldSize() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("RegenAreaClusterWorldSize"));
        }
        inline Ent::Gen2::Bool RegenerationManager::RegenAreaClustering() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("RegenAreaClustering"));
        }
        inline Ent::Gen2::Manager RegenerationManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RegenerationManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergyPoolGD_EnergyArea
        inline Ent::Gen2::EnergyIntensity EnergyPoolGD_EnergyArea::Intensity() const
        {
            return Ent::Gen2::EnergyIntensity(getProperty().getObjectField("Intensity"));
        }
        inline Ent::Gen2::Vector3 EnergyPoolGD_EnergyArea::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::Int EnergyPoolGD_EnergyArea::Priority() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Priority"));
        }
        inline Ent::Gen2::variant_MeshShape_ShapeSphere_ShapeBox_ EnergyPoolGD_EnergyArea::Shape() const
        {
            return Ent::Gen2::variant_MeshShape_ShapeSphere_ShapeBox_(getProperty().getObjectField("Shape"));
        }
        inline Ent::Gen2::String EnergyPoolGD_EnergyArea::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EndPosition
        inline Ent::Gen2::String EndPosition::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool EndPosition::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Position EndPosition::val() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("val"));
        }
        // Enabled
        inline Ent::Gen2::String Enabled::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool Enabled::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool Enabled::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // EDITOR_Mesh
        inline Ent::Gen2::String EDITOR_Mesh::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int EDITOR_Mesh::id() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("id"));
        }
        inline Ent::Gen2::String EDITOR_Mesh::path() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("path"));
        }
        // EDITOR_LODsItem
        inline Ent::Gen2::String EDITOR_LODsItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int EDITOR_LODsItem::lod() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("lod"));
        }
        inline PrimArray<Ent::Gen2::String> EDITOR_LODsItem::wvis() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("wvis"));
        }
        // DisplaceNoiseListItem
        inline Ent::Gen2::Float DisplaceNoiseListItem::DisplaceDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DisplaceDistance"));
        }
        inline Ent::Gen2::Float DisplaceNoiseListItem::LuminanceCenter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LuminanceCenter"));
        }
        inline Ent::Gen2::Int DisplaceNoiseListItem::MapChannel() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MapChannel"));
        }
        inline Ent::Gen2::String DisplaceNoiseListItem::MotifName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MotifName"));
        }
        inline Ent::Gen2::Float DisplaceNoiseListItem::MotifOffsetX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MotifOffsetX"));
        }
        inline Ent::Gen2::Float DisplaceNoiseListItem::MotifOffsetY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MotifOffsetY"));
        }
        inline Ent::Gen2::Float DisplaceNoiseListItem::MotifRotationZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MotifRotationZ"));
        }
        inline Ent::Gen2::Float DisplaceNoiseListItem::MotifSizeX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MotifSizeX"));
        }
        inline Ent::Gen2::Float DisplaceNoiseListItem::MotifSizeY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MotifSizeY"));
        }
        inline Ent::Gen2::String DisplaceNoiseListItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DisableFluid
        inline Ent::Gen2::String DisableFluid::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool DisableFluid::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool DisableFluid::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // DeltaTimeFactor
        inline Ent::Gen2::String DeltaTimeFactor::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool DeltaTimeFactor::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float DeltaTimeFactor::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // DebugManager_PlayerState
        // DebugManager_ComponentID
        inline Ent::Gen2::String DebugManager_ComponentID::ComponentNameID() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ComponentNameID"));
        }
        inline Ent::Gen2::EntityID DebugManager_ComponentID::EntityID() const
        {
            return Ent::Gen2::EntityID(getProperty().getObjectField("EntityID"));
        }
        inline Ent::Gen2::String DebugManager_ComponentID::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DebugDisplayFlags
        inline Ent::Gen2::Bool DebugDisplayFlags::Activate() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Activate"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::ActiveRTPCHunt() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ActiveRTPCHunt"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::ActiveWeatherSystem() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ActiveWeatherSystem"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::AssertOnPestoErrors() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AssertOnPestoErrors"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayActorStateArbiter() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayActorStateArbiter"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAnalytics() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAnalytics"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousClan() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousClan"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousCreatureList() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousCreatureList"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousDecision() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousDecision"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousEntityList() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousEntityList"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousInfo() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousInfo"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousListClan() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousListClan"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousLogMessage() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousLogMessage"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousMaster() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousMaster"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousPhysical() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousPhysical"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousPosition() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousPosition"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousPredator() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousPredator"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousPsychological() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousPsychological"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousSound() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousSound"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayAutonomousUnlocked() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayAutonomousUnlocked"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayBehavior() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayBehavior"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayBlendShapeDebug() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayBlendShapeDebug"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayBrainMonitor() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayBrainMonitor"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCPU() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCPU"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCompass() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCompass"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayComponentCacheDebugger() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayComponentCacheDebugger"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayComponentsDependencies() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayComponentsDependencies"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayConnectionWarning() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayConnectionWarning"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListAggressive() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListAggressive"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListDanger() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListDanger"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListDetection() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListDetection"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListDistance() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListDistance"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListHelp() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListHelp"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListPresence() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListPresence"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListSpecie() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListSpecie"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListState() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListState"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListThreat() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListThreat"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListTrust() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListTrust"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayCreatureListVisibility() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayCreatureListVisibility"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayDecalsDebug() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayDecalsDebug"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayDistanceTool() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayDistanceTool"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayDrawDebugFromLastSteppedFrame() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayDrawDebugFromLastSteppedFrame"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayEnergyPools() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayEnergyPools"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayEntities() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayEntities"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayEntitiesWithErrors() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayEntitiesWithErrors"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayEntityClan() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayEntityClan"));
        }
        inline Ent::Gen2::Float DebugDisplayFlags::DisplayEntityDistanceMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DisplayEntityDistanceMax"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayFPS() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayFPS"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayGameMaster() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayGameMaster"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayGamepadStateViewer() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayGamepadStateViewer"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayGestureMenu() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayGestureMenu"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayGoToPosition() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayGoToPosition"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayHeightProbe() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayHeightProbe"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayHitDebugger() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayHitDebugger"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayHotSpot() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayHotSpot"));
        }
        inline Ent::Gen2::Float DebugDisplayFlags::DisplayHotspotDistanceMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DisplayHotspotDistanceMax"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayManagersInfos() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayManagersInfos"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayMaterialBank() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayMaterialBank"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayMeshRasterizerInfos() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayMeshRasterizerInfos"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayObjectFilterHistory() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayObjectFilterHistory"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayOrder() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayOrder"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPadEmulator() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPadEmulator"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayParticleTool() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayParticleTool"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPathSystem() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPathSystem"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPesto() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPesto"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPestoCPUMarkers() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPestoCPUMarkers"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPhysicsPicker() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPhysicsPicker"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPivot() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPivot"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPlayerInteraction() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPlayerInteraction"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPositionPicker() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPositionPicker"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayProjectileThrower() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayProjectileThrower"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayPseudos() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayPseudos"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayQualityManager() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayQualityManager"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayRPCCalls() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayRPCCalls"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayReloadNotifications() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayReloadNotifications"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplaySelectedPestoEntity() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplaySelectedPestoEntity"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayStringHashTranslator() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayStringHashTranslator"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayTimer() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayTimer"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::DisplayTreesStates() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayTreesStates"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::EditorGuiAllowsComponentsSplitView() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EditorGuiAllowsComponentsSplitView"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::EditorGuiListenGamepad() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EditorGuiListenGamepad"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::EditorGuiListenKeyboard() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EditorGuiListenKeyboard"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::OpenEntityWindows() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("OpenEntityWindows"));
        }
        inline Ent::Gen2::Bool DebugDisplayFlags::UseTransformEditor() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseTransformEditor"));
        }
        inline Ent::Gen2::String DebugDisplayFlags::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DebugManager
        inline PrimArray<Ent::Gen2::String> DebugManager::CheatCodes() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("CheatCodes"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::Bool> DebugManager::DisplayComponentType() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::Bool>(getProperty().getObjectField("DisplayComponentType"));
        }
        inline Ent::Gen2::Bool DebugManager::DisplayManagerWindow() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayManagerWindow"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::Bool> DebugManager::DisplayNodeType() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::Bool>(getProperty().getObjectField("DisplayNodeType"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::Bool> DebugManager::DisplayNodeTypeWithAlwaysAutoResize() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::Bool>(getProperty().getObjectField("DisplayNodeTypeWithAlwaysAutoResize"));
        }
        inline Ent::Gen2::Bool DebugManager::DisplayResourceWindow() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayResourceWindow"));
        }
        inline Ent::Gen2::DebugDisplayFlags DebugManager::Flags() const
        {
            return Ent::Gen2::DebugDisplayFlags(getProperty().getObjectField("Flags"));
        }
        inline Ent::Gen2::Online DebugManager::Online() const
        {
            return Ent::Gen2::Online(getProperty().getObjectField("Online"));
        }
        inline Ent::Gen2::DebugManager_PlayerState DebugManager::PlayerState() const
        {
            return Ent::Gen2::DebugManager_PlayerState(getProperty().getObjectField("PlayerState"));
        }
        inline Ent::Gen2::String DebugManager::StreamPublicationCommand() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("StreamPublicationCommand"));
        }
        inline Ent::Gen2::String DebugManager::StreamingServerIP() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("StreamingServerIP"));
        }
        inline Ent::Gen2::Manager DebugManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Array<Ent::Gen2::TrackedEntitiesItem> DebugManager::TrackedEntities() const
        {
            return Array<Ent::Gen2::TrackedEntitiesItem>(getProperty().getObjectField("TrackedEntities"));
        }
        inline Array<Ent::Gen2::DebugManager_ComponentID> DebugManager::TrackedEntitiesSplitComponents() const
        {
            return Array<Ent::Gen2::DebugManager_ComponentID>(getProperty().getObjectField("TrackedEntitiesSplitComponents"));
        }
        inline Ent::Gen2::Bool DebugManager::WipAnimation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("WipAnimation"));
        }
        inline Ent::Gen2::String DebugManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DamagesInstant
        inline Ent::Gen2::String DamagesInstant::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float DamagesInstant::damage() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("damage"));
        }
        inline Ent::Gen2::Float DamagesInstant::impact() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("impact"));
        }
        // DamageGauge
        inline Ent::Gen2::String DamageGauge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool DamageGauge::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Float DamageGauge::val() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("val"));
        }
        // CreatureTypeData
        inline Ent::Gen2::String CreatureTypeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String CreatureTypeData::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        inline Ent::Gen2::Float CreatureTypeData::value() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("value"));
        }
        // CreatureProfile__CreatureProfileFact
        inline Ent::Gen2::GameTimeInMs CreatureProfile__CreatureProfileFact::TimeOfCreation() const
        {
            return Ent::Gen2::GameTimeInMs(getProperty().getObjectField("TimeOfCreation"));
        }
        inline Ent::Gen2::String CreatureProfile__CreatureProfileFact::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CreatureProfile
        inline Array<Array<Ent::Gen2::CreatureProfile__CreatureProfileFact>> CreatureProfile::Facts() const
        {
            return Array<Array<Ent::Gen2::CreatureProfile__CreatureProfileFact>>(getProperty().getObjectField("Facts"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::Float> CreatureProfile::ValueMap() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::Float>(getProperty().getObjectField("ValueMap"));
        }
        inline Ent::Gen2::String CreatureProfile::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CreatureDangerousness
        inline Ent::Gen2::String CreatureDangerousness::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int CreatureDangerousness::dangerousness() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("dangerousness"));
        }
        // ConstrainedMoveContextInput
        inline Ent::Gen2::Float ConstrainedMoveContextInput::CurvatureNormalizationRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CurvatureNormalizationRadius"));
        }
        inline Ent::Gen2::Int ConstrainedMoveContextInput::PowerMethodIterationMaxCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("PowerMethodIterationMaxCount"));
        }
        inline Ent::Gen2::Float ConstrainedMoveContextInput::PowerMethodIterationThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PowerMethodIterationThreshold"));
        }
        inline Ent::Gen2::Float ConstrainedMoveContextInput::RaycastAngleThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RaycastAngleThreshold"));
        }
        inline Ent::Gen2::Int ConstrainedMoveContextInput::RaycastCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("RaycastCount"));
        }
        inline Ent::Gen2::Float ConstrainedMoveContextInput::RaycastLength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RaycastLength"));
        }
        inline Ent::Gen2::Float ConstrainedMoveContextInput::RaycastStep() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RaycastStep"));
        }
        inline Ent::Gen2::String ConstrainedMoveContextInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ConstrainedInputData
        inline Ent::Gen2::Float ConstrainedInputData::DiagonalSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DiagonalSpeedFactor"));
        }
        inline Ent::Gen2::Float ConstrainedInputData::DirectionHysteresisAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DirectionHysteresisAngle"));
        }
        inline Ent::Gen2::Float ConstrainedInputData::LateralSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LateralSpeedFactor"));
        }
        inline Ent::Gen2::String ConstrainedInputData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ConditionalRigidityAttribute_RigidityParameter
        inline Ent::Gen2::ScaleConverter ConditionalRigidityAttribute_RigidityParameter::Rigidity() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("Rigidity"));
        }
        inline Ent::Gen2::Float ConditionalRigidityAttribute_RigidityParameter::SpeedDown() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedDown"));
        }
        inline Ent::Gen2::Float ConditionalRigidityAttribute_RigidityParameter::SpeedUp() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedUp"));
        }
        inline Ent::Gen2::String ConditionalRigidityAttribute_RigidityParameter::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ConditionalRigidityAttribute_Attributes
        inline Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter ConditionalRigidityAttribute_Attributes::DirectionAngular() const
        {
            return Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter(getProperty().getObjectField("DirectionAngular"));
        }
        inline Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter ConditionalRigidityAttribute_Attributes::DirectionLinear() const
        {
            return Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter(getProperty().getObjectField("DirectionLinear"));
        }
        inline Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter ConditionalRigidityAttribute_Attributes::OscillationAngular() const
        {
            return Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter(getProperty().getObjectField("OscillationAngular"));
        }
        inline Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter ConditionalRigidityAttribute_Attributes::OscillationLinear() const
        {
            return Ent::Gen2::ConditionalRigidityAttribute_RigidityParameter(getProperty().getObjectField("OscillationLinear"));
        }
        inline Ent::Gen2::String ConditionalRigidityAttribute_Attributes::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ComponentInputBase
        // ComponentInputEmpty
        inline Ent::Gen2::ComponentInputBase ComponentInputEmpty::Super() const
        {
            return Ent::Gen2::ComponentInputBase(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ComponentInputEmpty::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ComponentInput
        inline Ent::Gen2::Enabled ComponentInput::Enabled() const
        {
            return Ent::Gen2::Enabled(getProperty().getObjectField("Enabled"));
        }
        inline Ent::Gen2::ComponentInputBase ComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInputBase(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // WallRunComponentInput
        inline Ent::Gen2::ComponentInput WallRunComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String WallRunComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VelocityObstacleComponentInput
        inline Ent::Gen2::ComponentInput VelocityObstacleComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String VelocityObstacleComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // UnifiedPhysicsDataComponentInput
        inline Ent::Gen2::ComponentInput UnifiedPhysicsDataComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String UnifiedPhysicsDataComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SpiritAnimalShrineComponentInput
        inline Ent::Gen2::ComponentInput SpiritAnimalShrineComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SpiritAnimalShrineComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoundEmitterComponentInput
        inline Ent::Gen2::ComponentInput SoundEmitterComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SoundEmitterComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::computePitchAngle SoundEmitterComponentInput::computePitchAngle() const
        {
            return Ent::Gen2::computePitchAngle(getProperty().getObjectField("computePitchAngle"));
        }
        // SoftCollisionComponentInput
        inline Ent::Gen2::ComponentInput SoftCollisionComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SoftCollisionComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SmoothScaleComponentInput
        inline Ent::Gen2::Parameters SmoothScaleComponentInput::Parameters() const
        {
            return Ent::Gen2::Parameters(getProperty().getObjectField("Parameters"));
        }
        inline Ent::Gen2::ScaleFactor SmoothScaleComponentInput::ScaleFactor() const
        {
            return Ent::Gen2::ScaleFactor(getProperty().getObjectField("ScaleFactor"));
        }
        inline Ent::Gen2::ComponentInput SmoothScaleComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SmoothScaleComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ScriptComponentInput
        inline Ent::Gen2::ComponentInput ScriptComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ScriptComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReviveEnergyComponentInput
        inline Ent::Gen2::ReviveEnergyComponentInput_EnergySide ReviveEnergyComponentInput::EnergySide() const
        {
            return Ent::Gen2::ReviveEnergyComponentInput_EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::ComponentInput ReviveEnergyComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ReviveEnergyComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RespawnabilityComponentInput
        inline Ent::Gen2::ComponentInput RespawnabilityComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RespawnabilityComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RagdollComponentInput
        inline Ent::Gen2::ComponentInput RagdollComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RagdollComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsImpactMakerComponentInput
        inline Ent::Gen2::ForceMultiplier PhysicsImpactMakerComponentInput::ForceMultiplier() const
        {
            return Ent::Gen2::ForceMultiplier(getProperty().getObjectField("ForceMultiplier"));
        }
        inline Ent::Gen2::ComponentInput PhysicsImpactMakerComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PhysicsImpactMakerComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsComponentInput
        inline Ent::Gen2::ComponentInput PhysicsComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PhysicsComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PerceiverComponentInput
        inline Ent::Gen2::ComponentInput PerceiverComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PerceiverComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::PerceiverComponentInput_usePerception PerceiverComponentInput::usePerception() const
        {
            return Ent::Gen2::PerceiverComponentInput_usePerception(getProperty().getObjectField("usePerception"));
        }
        // PerceivableComponentInput
        inline Ent::Gen2::ComponentInput PerceivableComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PerceivableComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::isPerceivable PerceivableComponentInput::isPerceivable() const
        {
            return Ent::Gen2::isPerceivable(getProperty().getObjectField("isPerceivable"));
        }
        inline Ent::Gen2::isPerceivableForEnemies PerceivableComponentInput::isPerceivableForEnemies() const
        {
            return Ent::Gen2::isPerceivableForEnemies(getProperty().getObjectField("isPerceivableForEnemies"));
        }
        inline Ent::Gen2::soundEmissionStrength PerceivableComponentInput::soundEmissionStrength() const
        {
            return Ent::Gen2::soundEmissionStrength(getProperty().getObjectField("soundEmissionStrength"));
        }
        // OutfitWearerComponentInput
        inline Ent::Gen2::FadeDelay OutfitWearerComponentInput::FadeDelay() const
        {
            return Ent::Gen2::FadeDelay(getProperty().getObjectField("FadeDelay"));
        }
        inline Ent::Gen2::FadeDuration OutfitWearerComponentInput::FadeDuration() const
        {
            return Ent::Gen2::FadeDuration(getProperty().getObjectField("FadeDuration"));
        }
        inline PrimArray<Ent::Gen2::InventoryTags> OutfitWearerComponentInput::OutfitTags() const
        {
            return PrimArray<Ent::Gen2::InventoryTags>(getProperty().getObjectField("OutfitTags"));
        }
        inline Ent::Gen2::ComponentInput OutfitWearerComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String OutfitWearerComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MountIKControllerComponentInput
        inline Ent::Gen2::ComponentInput MountIKControllerComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String MountIKControllerComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // LifeComponentInput
        inline Ent::Gen2::DamageGauge LifeComponentInput::DamageGauge() const
        {
            return Ent::Gen2::DamageGauge(getProperty().getObjectField("DamageGauge"));
        }
        inline Ent::Gen2::ComponentInput LifeComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String LifeComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InteractorComponentInput
        inline Ent::Gen2::EndPosition InteractorComponentInput::EndPosition() const
        {
            return Ent::Gen2::EndPosition(getProperty().getObjectField("EndPosition"));
        }
        inline Ent::Gen2::IsActive InteractorComponentInput::IsActive() const
        {
            return Ent::Gen2::IsActive(getProperty().getObjectField("IsActive"));
        }
        inline Ent::Gen2::ComponentInput InteractorComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String InteractorComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InteractableGPEComponentInput
        inline Ent::Gen2::Interactor InteractableGPEComponentInput::Interactor() const
        {
            return Ent::Gen2::Interactor(getProperty().getObjectField("Interactor"));
        }
        inline Ent::Gen2::ComponentInput InteractableGPEComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String InteractableGPEComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GrasperComponentInput
        inline Ent::Gen2::ComponentInput GrasperComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GrasperComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::enableSynchronization GrasperComponentInput::enableSynchronization() const
        {
            return Ent::Gen2::enableSynchronization(getProperty().getObjectField("enableSynchronization"));
        }
        inline Ent::Gen2::tryGrasp GrasperComponentInput::tryGrasp() const
        {
            return Ent::Gen2::tryGrasp(getProperty().getObjectField("tryGrasp"));
        }
        // GraspableComponentInput
        inline Ent::Gen2::ComponentInput GraspableComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GraspableComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::allowedTypesItem> GraspableComponentInput::allowedTypes() const
        {
            return Array<Ent::Gen2::allowedTypesItem>(getProperty().getObjectField("allowedTypes"));
        }
        inline Ent::Gen2::retiming GraspableComponentInput::retiming() const
        {
            return Ent::Gen2::retiming(getProperty().getObjectField("retiming"));
        }
        // FluidComponentInput
        inline Ent::Gen2::DisableFluid FluidComponentInput::DisableFluid() const
        {
            return Ent::Gen2::DisableFluid(getProperty().getObjectField("DisableFluid"));
        }
        inline Ent::Gen2::ComponentInput FluidComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FluidComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergySpoutComponentInput
        inline Ent::Gen2::ComponentInput EnergySpoutComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EnergySpoutComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CreatureAIComponentInput
        inline Ent::Gen2::ComponentInput CreatureAIComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CreatureAIComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::resetCreatureRequest CreatureAIComponentInput::resetCreatureRequest() const
        {
            return Ent::Gen2::resetCreatureRequest(getProperty().getObjectField("resetCreatureRequest"));
        }
        inline Ent::Gen2::usePerception CreatureAIComponentInput::usePerception() const
        {
            return Ent::Gen2::usePerception(getProperty().getObjectField("usePerception"));
        }
        // CinematicComponentInput
        inline Ent::Gen2::ComponentInput CinematicComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CinematicComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ChargedJumpComponentInput
        inline Ent::Gen2::ComponentInput ChargedJumpComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ChargedJumpComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::jumpPower ChargedJumpComponentInput::jumpPower() const
        {
            return Ent::Gen2::jumpPower(getProperty().getObjectField("jumpPower"));
        }
        // CharacterControllerComponentInput
        inline Ent::Gen2::JumpHeightMultiplier CharacterControllerComponentInput::JumpHeightMultiplier() const
        {
            return Ent::Gen2::JumpHeightMultiplier(getProperty().getObjectField("JumpHeightMultiplier"));
        }
        inline Ent::Gen2::RigidbodyScaleMultiplier CharacterControllerComponentInput::RigidbodyScaleMultiplier() const
        {
            return Ent::Gen2::RigidbodyScaleMultiplier(getProperty().getObjectField("RigidbodyScaleMultiplier"));
        }
        inline Ent::Gen2::RigidbodyScalingSpeed CharacterControllerComponentInput::RigidbodyScalingSpeed() const
        {
            return Ent::Gen2::RigidbodyScalingSpeed(getProperty().getObjectField("RigidbodyScalingSpeed"));
        }
        inline Ent::Gen2::ComponentInput CharacterControllerComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CharacterControllerComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BreakableComponentInput
        inline Ent::Gen2::ComponentInput BreakableComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BreakableComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BeamTargetComponentInput
        inline Ent::Gen2::ComponentInput BeamTargetComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BeamTargetComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AttackTriggerComponentInput
        inline Ent::Gen2::ComponentInput AttackTriggerComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AttackTriggerComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AttackComponentInput
        inline Ent::Gen2::ComponentInput AttackComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AttackComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationTransformDriverComponentInput
        inline Ent::Gen2::ComponentInput AnimationTransformDriverComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationTransformDriverComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ComponentGD
        // WildObject
        inline Ent::Gen2::String WildObject::GdPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GdPath"));
        }
        inline Ent::Gen2::String WildObject::ObjectType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ObjectType"));
        }
        inline Ent::Gen2::ComponentGD WildObject::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String WildObject::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // WallRunGD
        inline Ent::Gen2::ComponentGD WallRunGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String WallRunGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float WallRunGD::dropAirControlDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("dropAirControlDelay"));
        }
        inline Ent::Gen2::Float WallRunGD::dropCoyoteJumpMaxTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("dropCoyoteJumpMaxTime"));
        }
        inline Ent::Gen2::Float WallRunGD::dropTrajectoryRotationYaw() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("dropTrajectoryRotationYaw"));
        }
        inline Ent::Gen2::Float WallRunGD::dropVisualRotationYawRateFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("dropVisualRotationYawRateFactor"));
        }
        inline Ent::Gen2::Float WallRunGD::jumpRiseMinCoeffToEnter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("jumpRiseMinCoeffToEnter"));
        }
        inline Ent::Gen2::Float WallRunGD::jumpTrajectoryRotationYaw() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("jumpTrajectoryRotationYaw"));
        }
        inline Ent::Gen2::Float WallRunGD::jumpVisualRotationYawRateFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("jumpVisualRotationYawRateFactor"));
        }
        inline Ent::Gen2::Float WallRunGD::probeLengthCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("probeLengthCoeff"));
        }
        inline Ent::Gen2::Float WallRunGD::probeRadiusCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("probeRadiusCoeff"));
        }
        inline Ent::Gen2::Int WallRunGD::probeRayCastCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("probeRayCastCount"));
        }
        inline Ent::Gen2::Float WallRunGD::probeRotationAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("probeRotationAngle"));
        }
        inline Ent::Gen2::Float WallRunGD::runDurationMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runDurationMax"));
        }
        inline Ent::Gen2::Float WallRunGD::runDurationMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runDurationMin"));
        }
        inline Ent::Gen2::Float WallRunGD::runForwardSpeedNormMinToEnter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runForwardSpeedNormMinToEnter"));
        }
        inline Ent::Gen2::Float WallRunGD::runOrientationRateFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runOrientationRateFactor"));
        }
        inline Ent::Gen2::Float WallRunGD::runRequiredDirectionDeltaAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runRequiredDirectionDeltaAngleMax"));
        }
        inline Ent::Gen2::Float WallRunGD::runRequiredDirectionDeltaAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runRequiredDirectionDeltaAngleMin"));
        }
        inline Ent::Gen2::Float WallRunGD::runRequiredSpeedNormMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runRequiredSpeedNormMin"));
        }
        inline Ent::Gen2::Float WallRunGD::runSightDeltaAngleMaxtoEnter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runSightDeltaAngleMaxtoEnter"));
        }
        inline Ent::Gen2::Float WallRunGD::runSlopeAngleHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runSlopeAngleHysteresis"));
        }
        inline Ent::Gen2::Float WallRunGD::runSlopeAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runSlopeAngleMax"));
        }
        inline Ent::Gen2::Float WallRunGD::runSlopeAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runSlopeAngleMin"));
        }
        inline Ent::Gen2::String WallRunGD::runTrajectoryRotationPitchCurveResourcePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("runTrajectoryRotationPitchCurveResourcePath"));
        }
        inline Ent::Gen2::Float WallRunGD::runTrajectoryRotationYaw() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runTrajectoryRotationYaw"));
        }
        inline Ent::Gen2::Float WallRunGD::runVerticalSpeedNormMaxToEnter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runVerticalSpeedNormMaxToEnter"));
        }
        inline Ent::Gen2::Float WallRunGD::runVerticalSpeedNormMinToEnter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("runVerticalSpeedNormMinToEnter"));
        }
        // VoxelSimulationGD
        inline Ent::Gen2::Float VoxelSimulationGD::EDITOR_voxelSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EDITOR_voxelSize"));
        }
        inline Ent::Gen2::ComponentGD VoxelSimulationGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String VoxelSimulationGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VolumeConstraintGD
        inline Array<Ent::Gen2::VolumeConstraintDataGD> VolumeConstraintGD::Constraints() const
        {
            return Array<Ent::Gen2::VolumeConstraintDataGD>(getProperty().getObjectField("Constraints"));
        }
        inline Ent::Gen2::ComponentGD VolumeConstraintGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String VolumeConstraintGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VisualGD
        inline Ent::Gen2::Bool VisualGD::AlwaysStatic() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AlwaysStatic"));
        }
        inline Ent::Gen2::Bool VisualGD::EDITOR_GenerateFur() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_GenerateFur"));
        }
        inline Array<Ent::Gen2::EDITOR_LODsItem> VisualGD::EDITOR_LODs() const
        {
            return Array<Ent::Gen2::EDITOR_LODsItem>(getProperty().getObjectField("EDITOR_LODs"));
        }
        inline Ent::Gen2::String VisualGD::MaterialGroup() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MaterialGroup"));
        }
        inline Ent::Gen2::Float VisualGD::RUNTIME_LODScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RUNTIME_LODScale"));
        }
        inline Array<Ent::Gen2::RUNTIME_LODsItem> VisualGD::RUNTIME_LODs() const
        {
            return Array<Ent::Gen2::RUNTIME_LODsItem>(getProperty().getObjectField("RUNTIME_LODs"));
        }
        inline Ent::Gen2::ComponentGD VisualGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String VisualGD::VisualResourcePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VisualResourcePath"));
        }
        inline Ent::Gen2::String VisualGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VelocityObstacleGD
        inline Ent::Gen2::Float VelocityObstacleGD::AccelerationAfterAvoidance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AccelerationAfterAvoidance"));
        }
        inline Ent::Gen2::Float VelocityObstacleGD::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::ComponentGD VelocityObstacleGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String VelocityObstacleGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // UnifiedPhysicsDataGD
        inline Ent::Gen2::ComponentGD UnifiedPhysicsDataGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String UnifiedPhysicsDataGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TriggerEventCameraGD
        inline Ent::Gen2::EventCameraData TriggerEventCameraGD::EventCameraData() const
        {
            return Ent::Gen2::EventCameraData(getProperty().getObjectField("EventCameraData"));
        }
        inline PrimArray<Ent::Gen2::String> TriggerEventCameraGD::PlayAnimBeforeTrigger() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("PlayAnimBeforeTrigger"));
        }
        inline Array<PrimArray<Ent::Gen2::String>> TriggerEventCameraGD::PlayAnimsWhenTriggered() const
        {
            return Array<PrimArray<Ent::Gen2::String>>(getProperty().getObjectField("PlayAnimsWhenTriggered"));
        }
        inline Ent::Gen2::Float TriggerEventCameraGD::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::ComponentGD TriggerEventCameraGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool TriggerEventCameraGD::UseDuration() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseDuration"));
        }
        inline Ent::Gen2::Bool TriggerEventCameraGD::UsePhysics() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UsePhysics"));
        }
        inline Ent::Gen2::Bool TriggerEventCameraGD::UseRadius() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseRadius"));
        }
        inline Ent::Gen2::String TriggerEventCameraGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TransformGD
        inline Ent::Gen2::Bool TransformGD::EDITOR_InheritScaleFromSubSceneHolder() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_InheritScaleFromSubSceneHolder"));
        }
        inline Ent::Gen2::Bool TransformGD::EDITOR_PropagateScaleToSubScene() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_PropagateScaleToSubScene"));
        }
        inline Ent::Gen2::Matrix33 TransformGD::Matrix() const
        {
            return Ent::Gen2::Matrix33(getProperty().getObjectField("Matrix"));
        }
        inline Ent::Gen2::Quat TransformGD::Orientation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("Orientation"));
        }
        inline Ent::Gen2::Vector3 TransformGD::Position() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Position"));
        }
        inline Ent::Gen2::Vector3 TransformGD::Scale() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Scale"));
        }
        inline Ent::Gen2::ComponentGD TransformGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String TransformGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TestUnion
        inline Ent::Gen2::ComponentGD TestUnion::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ TestUnion::Union() const
        {
            return Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(getProperty().getObjectField("Union"));
        }
        inline Array<Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_> TestUnion::UnionArray() const
        {
            return Array<Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_>(getProperty().getObjectField("UnionArray"));
        }
        inline Array<Ent::Gen2::UnionObjectArrayItem> TestUnion::UnionObjectArray() const
        {
            return Array<Ent::Gen2::UnionObjectArrayItem>(getProperty().getObjectField("UnionObjectArray"));
        }
        inline Ent::Gen2::String TestUnion::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TestTagsList
        inline Ent::Gen2::Float TestTagsList::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::ComponentGD TestTagsList::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::TagsList TestTagsList::Tags() const
        {
            return Ent::Gen2::TagsList(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String TestTagsList::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TestSetOfObject
        inline Ent::Gen2::Map<char const*, Ent::Gen2::MapOfObjectItem_A> TestSetOfObject::MapOfObject() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::MapOfObjectItem_A>(getProperty().getObjectField("MapOfObject"));
        }
        inline Ent::Gen2::ObjectSet<char const*, Ent::Gen2::SetOfObjectItem> TestSetOfObject::SetOfObject() const
        {
            return Ent::Gen2::ObjectSet<char const*, Ent::Gen2::SetOfObjectItem>(getProperty().getObjectField("SetOfObject"));
        }
        inline Ent::Gen2::ComponentGD TestSetOfObject::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String TestSetOfObject::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TestEntityRef
        inline Ent::Gen2::ComponentGD TestEntityRef::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::EntityRef TestEntityRef::TestRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("TestRef"));
        }
        inline Ent::Gen2::String TestEntityRef::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TestDefaultValues
        inline Ent::Gen2::Matrix33 TestDefaultValues::Matrix() const
        {
            return Ent::Gen2::Matrix33(getProperty().getObjectField("Matrix"));
        }
        inline Ent::Gen2::Matrix33 TestDefaultValues::Matrix2() const
        {
            return Ent::Gen2::Matrix33(getProperty().getObjectField("Matrix2"));
        }
        inline Ent::Gen2::ComponentGD TestDefaultValues::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String TestDefaultValues::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::TestPropertyDefaultValues2 TestDefaultValues::propertyWithDefault() const
        {
            return Ent::Gen2::TestPropertyDefaultValues2(getProperty().getObjectField("propertyWithDefault"));
        }
        // TestCreature
        inline Ent::Gen2::EntityRef TestCreature::FullCursed() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("FullCursed"));
        }
        inline Ent::Gen2::EntityRef TestCreature::FullLush() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("FullLush"));
        }
        inline Ent::Gen2::EntityRef TestCreature::SklCursed() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("SklCursed"));
        }
        inline Ent::Gen2::EntityRef TestCreature::SklLush() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("SklLush"));
        }
        inline Ent::Gen2::EntityRef TestCreature::SklNeutral() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("SklNeutral"));
        }
        inline Ent::Gen2::ComponentGD TestCreature::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String TestCreature::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TestArrays
        inline PrimArray<Ent::Gen2::Float> TestArrays::DefaultValue() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("DefaultValue"));
        }
        inline PrimArray<Ent::Gen2::Float> TestArrays::OverridedDefaultValue() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("OverridedDefaultValue"));
        }
        inline PrimArray<Ent::Gen2::Float> TestArrays::OverridedPrefabValue() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("OverridedPrefabValue"));
        }
        inline PrimArray<Ent::Gen2::Float> TestArrays::PrefabValue() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("PrefabValue"));
        }
        inline Ent::Gen2::ComponentGD TestArrays::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_ TestArrays::Variant() const
        {
            return Ent::Gen2::variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(getProperty().getObjectField("Variant"));
        }
        inline Ent::Gen2::String TestArrays::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TerrainSurfaceObject
        inline Ent::Gen2::String TerrainSurfaceObject::EDITOR_tso() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EDITOR_tso"));
        }
        inline Ent::Gen2::ComponentGD TerrainSurfaceObject::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String TerrainSurfaceObject::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TerrainGD
        inline Ent::Gen2::Int TerrainGD::EDITOR_AlbedoType() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EDITOR_AlbedoType"));
        }
        inline Ent::Gen2::Float TerrainGD::EDITOR_CavityAlbedoStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EDITOR_CavityAlbedoStrength"));
        }
        inline Ent::Gen2::Float TerrainGD::EDITOR_CavityStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EDITOR_CavityStrength"));
        }
        inline Ent::Gen2::Float TerrainGD::EDITOR_CollisionDecimateHmm() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EDITOR_CollisionDecimateHmm"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_ComputeSurfaceObjectTerrain() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_ComputeSurfaceObjectTerrain"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_DebugMode() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_DebugMode"));
        }
        inline Ent::Gen2::Int TerrainGD::EDITOR_DetailMapFalloff() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EDITOR_DetailMapFalloff"));
        }
        inline Ent::Gen2::Float TerrainGD::EDITOR_DetailScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EDITOR_DetailScale"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_DisableSeedParams() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_DisableSeedParams"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_DisplayAlbedo() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_DisplayAlbedo"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_DisplayFinal() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_DisplayFinal"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_Distributed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_Distributed"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_Erosion() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_Erosion"));
        }
        inline Ent::Gen2::Int TerrainGD::EDITOR_ErosionType() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EDITOR_ErosionType"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_ExportCollision() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_ExportCollision"));
        }
        inline Ent::Gen2::Int TerrainGD::EDITOR_ExportQuality() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EDITOR_ExportQuality"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_LocalSndbs() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_LocalSndbs"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_MergeTSOPreview() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_MergeTSOPreview"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_MultiLayerHeightmap() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_MultiLayerHeightmap"));
        }
        inline Ent::Gen2::String TerrainGD::EDITOR_Path() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EDITOR_Path"));
        }
        inline Ent::Gen2::Int TerrainGD::EDITOR_PreviewQuality() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EDITOR_PreviewQuality"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_ProcessDetailMap() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_ProcessDetailMap"));
        }
        inline Ent::Gen2::Int TerrainGD::EDITOR_SeedTextureSizeReduce() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EDITOR_SeedTextureSizeReduce"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_SuperimposeSeeds() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_SuperimposeSeeds"));
        }
        inline Ent::Gen2::Float TerrainGD::EDITOR_SurfaceObjectDecimate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EDITOR_SurfaceObjectDecimate"));
        }
        inline Ent::Gen2::Float TerrainGD::EDITOR_SurfaceObjectDecimateHmm() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EDITOR_SurfaceObjectDecimateHmm"));
        }
        inline Ent::Gen2::String TerrainGD::EDITOR_TerrainWildMat() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EDITOR_TerrainWildMat"));
        }
        inline Ent::Gen2::Int TerrainGD::EDITOR_TriPerMeter() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EDITOR_TriPerMeter"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_WMErosionComputeDistant() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_WMErosionComputeDistant"));
        }
        inline Ent::Gen2::Bool TerrainGD::EDITOR_WMErosionPreview() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_WMErosionPreview"));
        }
        inline Ent::Gen2::ComponentGD TerrainGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Terrain_TerrainMeta TerrainGD::TerrainMeta() const
        {
            return Ent::Gen2::Terrain_TerrainMeta(getProperty().getObjectField("TerrainMeta"));
        }
        inline Ent::Gen2::String TerrainGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TeamGD
        inline Ent::Gen2::ComponentGD TeamGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String TeamGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SystemicCreature
        inline PrimArray<Ent::Gen2::String> SystemicCreature::BehaviorModifierTagList() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("BehaviorModifierTagList"));
        }
        inline Ent::Gen2::String SystemicCreature::BehaviorPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BehaviorPath"));
        }
        inline Ent::Gen2::String SystemicCreature::BehaviorState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BehaviorState"));
        }
        inline Ent::Gen2::Bool SystemicCreature::Burried() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Burried"));
        }
        inline Ent::Gen2::Bool SystemicCreature::CameraTarget() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CameraTarget"));
        }
        inline Ent::Gen2::Bool SystemicCreature::CanBeMaster() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CanBeMaster"));
        }
        inline Ent::Gen2::String SystemicCreature::Faction() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Faction"));
        }
        inline Ent::Gen2::String SystemicCreature::Inventory() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Inventory"));
        }
        inline Ent::Gen2::Bool SystemicCreature::Invincible() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Invincible"));
        }
        inline Ent::Gen2::Float SystemicCreature::Life() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Life"));
        }
        inline Ent::Gen2::String SystemicCreature::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Bool SystemicCreature::PlayerSpawn() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("PlayerSpawn"));
        }
        inline PrimArray<Ent::Gen2::String> SystemicCreature::ScriptList() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("ScriptList"));
        }
        inline Ent::Gen2::String SystemicCreature::Spawner() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Spawner"));
        }
        inline Ent::Gen2::ComponentGD SystemicCreature::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SystemicCreature::UniqueID() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("UniqueID"));
        }
        inline Ent::Gen2::Bool SystemicCreature::Warrior() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Warrior"));
        }
        inline Ent::Gen2::String SystemicCreature::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // StreamingLocatorGD
        inline Ent::Gen2::Vector3 StreamingLocatorGD::CenterOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("CenterOffset"));
        }
        inline Ent::Gen2::Float StreamingLocatorGD::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::ComponentGD StreamingLocatorGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String StreamingLocatorGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // StreamableUnitGD
        inline Ent::Gen2::EntityRef StreamableUnitGD::BaseImpostor() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("BaseImpostor"));
        }
        inline Ent::Gen2::Vector3 StreamableUnitGD::BoxSize() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("BoxSize"));
        }
        inline Ent::Gen2::Vector3 StreamableUnitGD::CenterOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("CenterOffset"));
        }
        inline Ent::Gen2::EntityRef StreamableUnitGD::EnergyPool() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("EnergyPool"));
        }
        inline PrimArray<Ent::Gen2::EntityRef> StreamableUnitGD::FullEntities() const
        {
            return PrimArray<Ent::Gen2::EntityRef>(getProperty().getObjectField("FullEntities"));
        }
        inline Ent::Gen2::EntityRef StreamableUnitGD::FullEntitiesHolder() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("FullEntitiesHolder"));
        }
        inline Ent::Gen2::Float StreamableUnitGD::Hysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Hysteresis"));
        }
        inline Ent::Gen2::ComponentGD StreamableUnitGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::EntityRef> StreamableUnitGD::VariantImpostors() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::EntityRef>(getProperty().getObjectField("VariantImpostors"));
        }
        inline Ent::Gen2::String StreamableUnitGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // StickToTerrain
        inline Ent::Gen2::Float StickToTerrain::NormalRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NormalRatio"));
        }
        inline Ent::Gen2::ComponentGD StickToTerrain::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float StickToTerrain::ZOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ZOffset"));
        }
        inline Ent::Gen2::String StickToTerrain::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float StickToTerrain::precisionRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("precisionRadius"));
        }
        inline Ent::Gen2::Bool StickToTerrain::useNormal() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("useNormal"));
        }
        // StaticObjectGD
        inline Ent::Gen2::Bool StaticObjectGD::EDITOR_IsCave() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_IsCave"));
        }
        inline Ent::Gen2::Bool StaticObjectGD::EDITOR_UsedInMultiLayerHeightmap() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_UsedInMultiLayerHeightmap"));
        }
        inline Ent::Gen2::ComponentGD StaticObjectGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool StaticObjectGD::Visual() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Visual"));
        }
        inline Ent::Gen2::String StaticObjectGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // StaffVertebrasGD
        inline Ent::Gen2::Int StaffVertebrasGD::BeginVertebraRefillThreshold() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("BeginVertebraRefillThreshold"));
        }
        inline Ent::Gen2::Int StaffVertebrasGD::EndVertebraRefillThreshold() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EndVertebraRefillThreshold"));
        }
        inline PrimArray<Ent::Gen2::String> StaffVertebrasGD::HotspotNames() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("HotspotNames"));
        }
        inline Ent::Gen2::Int StaffVertebrasGD::MaxVertebraCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxVertebraCount"));
        }
        inline Ent::Gen2::Int StaffVertebrasGD::OwnedVertebraStartCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("OwnedVertebraStartCount"));
        }
        inline Ent::Gen2::Float StaffVertebrasGD::RefillVertebraTimer() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RefillVertebraTimer"));
        }
        inline Ent::Gen2::ComponentGD StaffVertebrasGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String StaffVertebrasGD::VertebraGRCPath1() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VertebraGRCPath1"));
        }
        inline Ent::Gen2::String StaffVertebrasGD::VertebraGRCPath2() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VertebraGRCPath2"));
        }
        inline Ent::Gen2::String StaffVertebrasGD::VertebraGRCPath3() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VertebraGRCPath3"));
        }
        inline Ent::Gen2::String StaffVertebrasGD::VertebraGRCPath4() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VertebraGRCPath4"));
        }
        inline Ent::Gen2::String StaffVertebrasGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SpiritAnimalsHolderGD
        inline PrimArray<Ent::Gen2::EntityRef> SpiritAnimalsHolderGD::EntityRefs() const
        {
            return PrimArray<Ent::Gen2::EntityRef>(getProperty().getObjectField("EntityRefs"));
        }
        inline Ent::Gen2::ComponentGD SpiritAnimalsHolderGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SpiritAnimalsHolderGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SpiritAnimalShrineGD
        inline Ent::Gen2::Float SpiritAnimalShrineGD::InteractionDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InteractionDuration"));
        }
        inline Ent::Gen2::Specie SpiritAnimalShrineGD::Specie() const
        {
            return Ent::Gen2::Specie(getProperty().getObjectField("Specie"));
        }
        inline Ent::Gen2::ComponentGD SpiritAnimalShrineGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float SpiritAnimalShrineGD::TimeHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TimeHysteresis"));
        }
        inline Ent::Gen2::String SpiritAnimalShrineGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SpiritAnimalGD
        inline Ent::Gen2::Float SpiritAnimalGD::DeadDurationBeforeRevive() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DeadDurationBeforeRevive"));
        }
        inline Ent::Gen2::Float SpiritAnimalGD::SoulCooldownFromDeath() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SoulCooldownFromDeath"));
        }
        inline Ent::Gen2::Float SpiritAnimalGD::SoulCooldownFromSpiritAttack() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SoulCooldownFromSpiritAttack"));
        }
        inline Ent::Gen2::Float SpiritAnimalGD::SpiritAttackHoldDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpiritAttackHoldDuration"));
        }
        inline Ent::Gen2::ComponentGD SpiritAnimalGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SpiritAnimalGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoundOpportunityComponentGD
        inline Array<Ent::Gen2::SoundOpportunityRangeDescription> SoundOpportunityComponentGD::RangeDescriptions() const
        {
            return Array<Ent::Gen2::SoundOpportunityRangeDescription>(getProperty().getObjectField("RangeDescriptions"));
        }
        inline Ent::Gen2::ComponentGD SoundOpportunityComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SoundOpportunityComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoundEmitterGD
        inline Ent::Gen2::Float SoundEmitterGD::ActivationDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ActivationDistance"));
        }
        inline PrimArray<Ent::Gen2::String> SoundEmitterGD::ActivationSound() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("ActivationSound"));
        }
        inline Ent::Gen2::SyncTempoMode SoundEmitterGD::ActivationSync() const
        {
            return Ent::Gen2::SyncTempoMode(getProperty().getObjectField("ActivationSync"));
        }
        inline Ent::Gen2::String SoundEmitterGD::AuxSend() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("AuxSend"));
        }
        inline PrimArray<Ent::Gen2::String> SoundEmitterGD::Bank() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("Bank"));
        }
        inline Ent::Gen2::Float SoundEmitterGD::BoidRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BoidRadius"));
        }
        inline Ent::Gen2::Float SoundEmitterGD::BoidRadiusToInnerEdgeRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BoidRadiusToInnerEdgeRatio"));
        }
        inline Ent::Gen2::Float SoundEmitterGD::BoidRadiusToOuterEdgeRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BoidRadiusToOuterEdgeRatio"));
        }
        inline Ent::Gen2::Bool SoundEmitterGD::BoidRealPositionComputation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("BoidRealPositionComputation"));
        }
        inline Ent::Gen2::String SoundEmitterGD::CreatureType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("CreatureType"));
        }
        inline Ent::Gen2::Bool SoundEmitterGD::Echoes() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Echoes"));
        }
        inline Ent::Gen2::Float SoundEmitterGD::EchoesSend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EchoesSend"));
        }
        inline Ent::Gen2::Float SoundEmitterGD::EventDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EventDistance"));
        }
        inline Ent::Gen2::SoundEventMapping SoundEmitterGD::EventMapping() const
        {
            return Ent::Gen2::SoundEventMapping(getProperty().getObjectField("EventMapping"));
        }
        inline PrimArray<Ent::Gen2::String> SoundEmitterGD::InEvents() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("InEvents"));
        }
        inline Ent::Gen2::SoundOcclusionData SoundEmitterGD::OcclusionData() const
        {
            return Ent::Gen2::SoundOcclusionData(getProperty().getObjectField("OcclusionData"));
        }
        inline PrimArray<Ent::Gen2::String> SoundEmitterGD::OutEvents() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("OutEvents"));
        }
        inline Ent::Gen2::ComponentGD SoundEmitterGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline PrimArray<Ent::Gen2::String> SoundEmitterGD::UnactivationSound() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("UnactivationSound"));
        }
        inline Ent::Gen2::SyncTempoMode SoundEmitterGD::UnactivationSync() const
        {
            return Ent::Gen2::SyncTempoMode(getProperty().getObjectField("UnactivationSync"));
        }
        inline Ent::Gen2::Bool SoundEmitterGD::UseLocalAltitudeRTPC() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseLocalAltitudeRTPC"));
        }
        inline Ent::Gen2::Bool SoundEmitterGD::UseOcclusion() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseOcclusion"));
        }
        inline Ent::Gen2::String SoundEmitterGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool SoundEmitterGD::dopplerActivated() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("dopplerActivated"));
        }
        inline Ent::Gen2::Bool SoundEmitterGD::sendSoundAreaEvents() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("sendSoundAreaEvents"));
        }
        inline Ent::Gen2::Float SoundEmitterGD::waterDeepAltitude() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("waterDeepAltitude"));
        }
        inline Ent::Gen2::Float SoundEmitterGD::waterPuddleAltitude() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("waterPuddleAltitude"));
        }
        // SoundAreaGD
        inline Ent::Gen2::String SoundAreaGD::EventEnter() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EventEnter"));
        }
        inline Ent::Gen2::String SoundAreaGD::EventExit() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EventExit"));
        }
        inline Ent::Gen2::ComponentGD SoundAreaGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SoundAreaGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoulRespawnOpportunityGD
        inline Ent::Gen2::EnergySide SoulRespawnOpportunityGD::ForceEnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("ForceEnergySide"));
        }
        inline Ent::Gen2::Int SoulRespawnOpportunityGD::MaxDensityCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxDensityCount"));
        }
        inline Ent::Gen2::Float SoulRespawnOpportunityGD::MaxDensityRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxDensityRadius"));
        }
        inline Ent::Gen2::Vector3 SoulRespawnOpportunityGD::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::Int SoulRespawnOpportunityGD::SlotCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SlotCount"));
        }
        inline Ent::Gen2::Specie SoulRespawnOpportunityGD::Specie() const
        {
            return Ent::Gen2::Specie(getProperty().getObjectField("Specie"));
        }
        inline Ent::Gen2::ComponentGD SoulRespawnOpportunityGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SoulRespawnOpportunityGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoftCollisionGD
        inline Ent::Gen2::Float SoftCollisionGD::PenetrationCoeffSmoothRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PenetrationCoeffSmoothRate"));
        }
        inline Ent::Gen2::ComponentGD SoftCollisionGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::SoftCollisionGD_VegetationDetectionParameters SoftCollisionGD::VegetationDetectionParam() const
        {
            return Ent::Gen2::SoftCollisionGD_VegetationDetectionParameters(getProperty().getObjectField("VegetationDetectionParam"));
        }
        inline Ent::Gen2::String SoftCollisionGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SmoothScaleComponentGD
        inline Ent::Gen2::ComponentGD SmoothScaleComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SmoothScaleComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SideMapGateGD
        inline Ent::Gen2::String SideMapGateGD::SideMapName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SideMapName"));
        }
        inline Ent::Gen2::ComponentGD SideMapGateGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SideMapGateGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShapeshiftStatueGD
        inline Ent::Gen2::EntityRef ShapeshiftStatueGD::AssociatedEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("AssociatedEntityRef"));
        }
        inline Ent::Gen2::ComponentGD ShapeshiftStatueGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ShapeshiftStatueGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShamanVisionGD
        inline Ent::Gen2::ComponentGD ShamanVisionGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ShamanVisionGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShamanItemGD
        inline PrimArray<Ent::Gen2::String> ShamanItemGD::BoneNames() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("BoneNames"));
        }
        inline Ent::Gen2::EntityRef ShamanItemGD::OppositeItemEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("OppositeItemEntityRef"));
        }
        inline Ent::Gen2::Int ShamanItemGD::StartPartCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("StartPartCount"));
        }
        inline Ent::Gen2::ComponentGD ShamanItemGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ShamanItemGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SensorVoxelsGD
        inline Ent::Gen2::ComponentGD SensorVoxelsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Array<Ent::Gen2::TaggedSDF> SensorVoxelsGD::TaggedSDFs() const
        {
            return Array<Ent::Gen2::TaggedSDF>(getProperty().getObjectField("TaggedSDFs"));
        }
        inline Ent::Gen2::String SensorVoxelsGD::VoxelsDataPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VoxelsDataPath"));
        }
        inline Ent::Gen2::String SensorVoxelsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SensorControllerGD
        inline Ent::Gen2::ComponentGD SensorControllerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SensorControllerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SeedPatch
        inline Ent::Gen2::Bool SeedPatch::AddVertexColor() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AddVertexColor"));
        }
        inline Ent::Gen2::Matrix33 SeedPatch::LocalMatrix() const
        {
            return Ent::Gen2::Matrix33(getProperty().getObjectField("LocalMatrix"));
        }
        inline Ent::Gen2::String SeedPatch::MeshFile() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MeshFile"));
        }
        inline Ent::Gen2::String SeedPatch::NoiseName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NoiseName"));
        }
        inline Ent::Gen2::Float SeedPatch::NoiseOffsetX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseOffsetX"));
        }
        inline Ent::Gen2::Float SeedPatch::NoiseOffsetY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseOffsetY"));
        }
        inline Ent::Gen2::Float SeedPatch::NoiseSizeX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseSizeX"));
        }
        inline Ent::Gen2::Float SeedPatch::NoiseSizeY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NoiseSizeY"));
        }
        inline Ent::Gen2::String SeedPatch::SeedName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SeedName"));
        }
        inline Ent::Gen2::Bool SeedPatch::SeedOverride() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("SeedOverride"));
        }
        inline Ent::Gen2::SeedPatchDataList SeedPatch::SeedPatchDataList() const
        {
            return Ent::Gen2::SeedPatchDataList(getProperty().getObjectField("SeedPatchDataList"));
        }
        inline Ent::Gen2::SeedPatchDatas SeedPatch::SeedPatchDatas() const
        {
            return Ent::Gen2::SeedPatchDatas(getProperty().getObjectField("SeedPatchDatas"));
        }
        inline Ent::Gen2::Int SeedPatch::Subdivision() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Subdivision"));
        }
        inline Ent::Gen2::ComponentGD SeedPatch::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SeedPatch::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ScriptComponentGD
        inline Ent::Gen2::Map<char const*, Ent::Gen2::TypedValue> ScriptComponentGD::CommonDataMap() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::TypedValue>(getProperty().getObjectField("CommonDataMap"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::ScriptPathAndDataSet> ScriptComponentGD::ScriptsMap() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::ScriptPathAndDataSet>(getProperty().getObjectField("ScriptsMap"));
        }
        inline Ent::Gen2::ComponentGD ScriptComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ScriptComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ReviveEnergyGD
        inline Ent::Gen2::Float ReviveEnergyGD::HatchingCost() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HatchingCost"));
        }
        inline Ent::Gen2::Float ReviveEnergyGD::HatchingDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HatchingDuration"));
        }
        inline Ent::Gen2::EnergySide ReviveEnergyGD::InitEnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("InitEnergySide"));
        }
        inline Ent::Gen2::ComponentGD ReviveEnergyGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ReviveEnergyGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RespawnabilityGD
        inline Ent::Gen2::Bool RespawnabilityGD::CheckIsInCameraFrustum() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CheckIsInCameraFrustum"));
        }
        inline Ent::Gen2::MinDistanceToRespawnPosition RespawnabilityGD::MinDistanceToRespawnPosition() const
        {
            return Ent::Gen2::MinDistanceToRespawnPosition(getProperty().getObjectField("MinDistanceToRespawnPosition"));
        }
        inline Ent::Gen2::MinRespawnDistance RespawnabilityGD::MinRespawnDistance() const
        {
            return Ent::Gen2::MinRespawnDistance(getProperty().getObjectField("MinRespawnDistance"));
        }
        inline Ent::Gen2::RespawnState RespawnabilityGD::RespawnState() const
        {
            return Ent::Gen2::RespawnState(getProperty().getObjectField("RespawnState"));
        }
        inline Ent::Gen2::ComponentGD RespawnabilityGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RespawnabilityGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RespawnPlaceGD
        inline Ent::Gen2::Bool RespawnPlaceGD::AlwaysAvailable() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AlwaysAvailable"));
        }
        inline Ent::Gen2::ComponentGD RespawnPlaceGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RespawnPlaceGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RegenerableVegetationGD
        inline PrimArray<Ent::Gen2::EnergyValue> RegenerableVegetationGD::EnergyValues() const
        {
            return PrimArray<Ent::Gen2::EnergyValue>(getProperty().getObjectField("EnergyValues"));
        }
        inline Ent::Gen2::String RegenerableVegetationGD::PCloudPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PCloudPath"));
        }
        inline Ent::Gen2::ComponentGD RegenerableVegetationGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline PrimArray<Ent::Gen2::String> RegenerableVegetationGD::UsedVegetations() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("UsedVegetations"));
        }
        inline Array<Ent::Gen2::VegetationPCloudData> RegenerableVegetationGD::VegetationPClouds() const
        {
            return Array<Ent::Gen2::VegetationPCloudData>(getProperty().getObjectField("VegetationPClouds"));
        }
        inline Ent::Gen2::String RegenerableVegetationGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RegenSwitcherGD
        inline Ent::Gen2::Bool RegenSwitcherGD::ParentTransforms() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ParentTransforms"));
        }
        inline Array<Ent::Gen2::RegenData> RegenSwitcherGD::RegenData() const
        {
            return Array<Ent::Gen2::RegenData>(getProperty().getObjectField("RegenData"));
        }
        inline Ent::Gen2::RegenSwitchBehavior RegenSwitcherGD::RegenSwitchBehavior() const
        {
            return Ent::Gen2::RegenSwitchBehavior(getProperty().getObjectField("RegenSwitchBehavior"));
        }
        inline Ent::Gen2::ComponentGD RegenSwitcherGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RegenSwitcherGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RagdollGD
        inline Ent::Gen2::String RagdollGD::RagdollType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RagdollType"));
        }
        inline Ent::Gen2::ComponentGD RagdollGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RagdollGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // QuickCreatureSwitchGD
        inline PrimArray<Ent::Gen2::EntityRef> QuickCreatureSwitchGD::CreatureEntityRefs() const
        {
            return PrimArray<Ent::Gen2::EntityRef>(getProperty().getObjectField("CreatureEntityRefs"));
        }
        inline Ent::Gen2::ComponentGD QuickCreatureSwitchGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String QuickCreatureSwitchGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ProtoComponentGD
        inline Ent::Gen2::ComponentGD ProtoComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ProtoComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ProjectileShooterGD
        inline Ent::Gen2::Map<char const*, Ent::Gen2::ProjectileShooterData> ProjectileShooterGD::ProjectileShooterData() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::ProjectileShooterData>(getProperty().getObjectField("ProjectileShooterData"));
        }
        inline Ent::Gen2::ComponentGD ProjectileShooterGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ProjectileShooterGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PlayerComponentGD
        inline Ent::Gen2::ComponentGD PlayerComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PlayerComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PickableDistributorComponentGD
        inline Ent::Gen2::Float PickableDistributorComponentGD::PickableGrowingTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PickableGrowingTime"));
        }
        inline Ent::Gen2::Float PickableDistributorComponentGD::PickablePickedUpCooldownTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PickablePickedUpCooldownTime"));
        }
        inline Array<Ent::Gen2::PickableDistributorComponentData> PickableDistributorComponentGD::PickablesList() const
        {
            return Array<Ent::Gen2::PickableDistributorComponentData>(getProperty().getObjectField("PickablesList"));
        }
        inline Ent::Gen2::ComponentGD PickableDistributorComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PickableDistributorComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PickableComponentGD
        inline Array<Ent::Gen2::ResponsiblePointer_ActorState_> PickableComponentGD::StatesForPicker() const
        {
            return Array<Ent::Gen2::ResponsiblePointer_ActorState_>(getProperty().getObjectField("StatesForPicker"));
        }
        inline Ent::Gen2::ComponentGD PickableComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PickableComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsTriggerGD
        inline PrimArray<Ent::Gen2::String> PhysicsTriggerGD::RequiredComponents() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("RequiredComponents"));
        }
        inline Ent::Gen2::ComponentGD PhysicsTriggerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PhysicsTriggerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsMeshProviderGD
        inline Ent::Gen2::Bool PhysicsMeshProviderGD::EdgeTransitionConstraintAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EdgeTransitionConstraintAllowed"));
        }
        inline Ent::Gen2::ComponentGD PhysicsMeshProviderGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PhysicsMeshProviderGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsMeshDeformerGD
        inline Ent::Gen2::ComponentGD PhysicsMeshDeformerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PhysicsMeshDeformerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsImpactMakerGD
        inline Ent::Gen2::Float PhysicsImpactMakerGD::AttackAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AttackAngle"));
        }
        inline Ent::Gen2::Bool PhysicsImpactMakerGD::BreakEverything() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("BreakEverything"));
        }
        inline Ent::Gen2::ScaleConverter PhysicsImpactMakerGD::DamageAndImpactBySpeed() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("DamageAndImpactBySpeed"));
        }
        inline Ent::Gen2::String PhysicsImpactMakerGD::DamageTag() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("DamageTag"));
        }
        inline Ent::Gen2::Float PhysicsImpactMakerGD::DirectionInfluence() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DirectionInfluence"));
        }
        inline Ent::Gen2::Float PhysicsImpactMakerGD::DirectionUpdateThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DirectionUpdateThreshold"));
        }
        inline Ent::Gen2::ScaleConverter PhysicsImpactMakerGD::ForceBySpeed() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("ForceBySpeed"));
        }
        inline Ent::Gen2::String PhysicsImpactMakerGD::HitImpactTag() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HitImpactTag"));
        }
        inline Ent::Gen2::Float PhysicsImpactMakerGD::Restitution() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Restitution"));
        }
        inline Ent::Gen2::Float PhysicsImpactMakerGD::SmoothedSpeedControlRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SmoothedSpeedControlRate"));
        }
        inline Ent::Gen2::ComponentGD PhysicsImpactMakerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PhysicsImpactMakerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsGD
        inline Ent::Gen2::Bool PhysicsGD::AffectByHit() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectByHit"));
        }
        inline Ent::Gen2::Float PhysicsGD::AngularDamping() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngularDamping"));
        }
        inline Ent::Gen2::Vector3 PhysicsGD::AxisRestriction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("AxisRestriction"));
        }
        inline Ent::Gen2::Bool PhysicsGD::CameraIgnored() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CameraIgnored"));
        }
        inline Ent::Gen2::Bool PhysicsGD::Ccd() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Ccd"));
        }
        inline PrimArray<Ent::Gen2::String> PhysicsGD::EDITOR_MeshColliders() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("EDITOR_MeshColliders"));
        }
        inline Ent::Gen2::String PhysicsGD::EDITOR_MeshEdges() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EDITOR_MeshEdges"));
        }
        inline Ent::Gen2::String PhysicsGD::EDITOR_NavMeshStamper() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EDITOR_NavMeshStamper"));
        }
        inline Ent::Gen2::Float PhysicsGD::EnergyLoss() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EnergyLoss"));
        }
        inline Ent::Gen2::Float PhysicsGD::Friction() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Friction"));
        }
        inline Ent::Gen2::Bool PhysicsGD::HasGravity() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("HasGravity"));
        }
        inline Ent::Gen2::InertiaTensor PhysicsGD::InertiaTensor() const
        {
            return Ent::Gen2::InertiaTensor(getProperty().getObjectField("InertiaTensor"));
        }
        inline Ent::Gen2::Float PhysicsGD::LinearDamping() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LinearDamping"));
        }
        inline Ent::Gen2::Float PhysicsGD::Mass() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Mass"));
        }
        inline Ent::Gen2::Float PhysicsGD::MaxAngularVelocity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxAngularVelocity"));
        }
        inline Ent::Gen2::Float PhysicsGD::MaxLinearVelocity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxLinearVelocity"));
        }
        inline PrimArray<Ent::Gen2::String> PhysicsGD::MeshColliders() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("MeshColliders"));
        }
        inline Ent::Gen2::String PhysicsGD::MeshEdges() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MeshEdges"));
        }
        inline Ent::Gen2::String PhysicsGD::MotionType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MotionType"));
        }
        inline Ent::Gen2::String PhysicsGD::NavMeshStamper() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NavMeshStamper"));
        }
        inline Ent::Gen2::Vector3 PhysicsGD::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::Vector3 PhysicsGD::OffsetRotation() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("OffsetRotation"));
        }
        inline Ent::Gen2::Bool PhysicsGD::OneWayBodiesDriveTransform() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("OneWayBodiesDriveTransform"));
        }
        inline Ent::Gen2::String PhysicsGD::PhysicsMaterial() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PhysicsMaterial"));
        }
        inline Ent::Gen2::PrimitiveColliderType PhysicsGD::PrimitiveCollider() const
        {
            return Ent::Gen2::PrimitiveColliderType(getProperty().getObjectField("PrimitiveCollider"));
        }
        inline PrimArray<Ent::Gen2::Size> PhysicsGD::PrimitiveColliderSizeLayerMask() const
        {
            return PrimArray<Ent::Gen2::Size>(getProperty().getObjectField("PrimitiveColliderSizeLayerMask"));
        }
        inline Ent::Gen2::Float PhysicsGD::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::Float PhysicsGD::Restitution() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Restitution"));
        }
        inline PrimArray<Ent::Gen2::PhysicsLayer> PhysicsGD::SelfFilter() const
        {
            return PrimArray<Ent::Gen2::PhysicsLayer>(getProperty().getObjectField("SelfFilter"));
        }
        inline Ent::Gen2::Vector3 PhysicsGD::Size() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Size"));
        }
        inline Ent::Gen2::Bool PhysicsGD::Sleep() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Sleep"));
        }
        inline Ent::Gen2::ComponentGD PhysicsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline PrimArray<Ent::Gen2::PhysicsLayer> PhysicsGD::TargetFilter() const
        {
            return PrimArray<Ent::Gen2::PhysicsLayer>(getProperty().getObjectField("TargetFilter"));
        }
        inline Ent::Gen2::Bool PhysicsGD::Walkable() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Walkable"));
        }
        inline Ent::Gen2::String PhysicsGD::WalkableSoundSwitch() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("WalkableSoundSwitch"));
        }
        inline Ent::Gen2::String PhysicsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PhysicsDataGD
        inline Array<Ent::Gen2::EDITOR_Mesh> PhysicsDataGD::EDITOR_Shapes() const
        {
            return Array<Ent::Gen2::EDITOR_Mesh>(getProperty().getObjectField("EDITOR_Shapes"));
        }
        inline Ent::Gen2::Bool PhysicsDataGD::EDITOR_isTrigger() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EDITOR_isTrigger"));
        }
        inline Ent::Gen2::ComponentGD PhysicsDataGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PhysicsDataGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::sPhysicsJointDesc> PhysicsDataGD::joints() const
        {
            return Array<Ent::Gen2::sPhysicsJointDesc>(getProperty().getObjectField("joints"));
        }
        inline Array<Ent::Gen2::sRigidBodyDesc> PhysicsDataGD::rigidBodies() const
        {
            return Array<Ent::Gen2::sRigidBodyDesc>(getProperty().getObjectField("rigidBodies"));
        }
        // PerceiverGD
        inline Ent::Gen2::ComponentGD PerceiverGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PerceiverGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_coneAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_coneAngle"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_farSoundDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_farSoundDistance"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_longRangeDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_longRangeDistance"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_lowRangeDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_lowRangeDistance"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_middleRangeDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_middleRangeDistance"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_middleSoundDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_middleSoundDistance"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_nearSoundDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_nearSoundDistance"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_perceptionHeightMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_perceptionHeightMultiplier"));
        }
        inline Ent::Gen2::Float PerceiverGD::m_perceptionHeightMultiplierHeightMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_perceptionHeightMultiplierHeightMax"));
        }
        inline Ent::Gen2::Bool PerceiverGD::m_rayCastCheck() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("m_rayCastCheck"));
        }
        // PerceivableGD
        inline Ent::Gen2::ComponentGD PerceivableGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PerceivableGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float PerceivableGD::m_perceivedDistanceMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_perceivedDistanceMultiplier"));
        }
        inline Ent::Gen2::SoundEmissionStrength PerceivableGD::m_soundCrouch() const
        {
            return Ent::Gen2::SoundEmissionStrength(getProperty().getObjectField("m_soundCrouch"));
        }
        inline Ent::Gen2::SoundEmissionStrength PerceivableGD::m_soundImmobile() const
        {
            return Ent::Gen2::SoundEmissionStrength(getProperty().getObjectField("m_soundImmobile"));
        }
        inline Ent::Gen2::SoundEmissionStrength PerceivableGD::m_soundRun() const
        {
            return Ent::Gen2::SoundEmissionStrength(getProperty().getObjectField("m_soundRun"));
        }
        inline Ent::Gen2::SoundEmissionStrength PerceivableGD::m_soundWalk() const
        {
            return Ent::Gen2::SoundEmissionStrength(getProperty().getObjectField("m_soundWalk"));
        }
        inline PrimArray<Ent::Gen2::String> PerceivableGD::m_tags() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("m_tags"));
        }
        // OutfitWearerGD
        inline Ent::Gen2::EntityRef OutfitWearerGD::InventoryEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("InventoryEntityRef"));
        }
        inline Ent::Gen2::Float OutfitWearerGD::OutfitFadeDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OutfitFadeDelay"));
        }
        inline Ent::Gen2::Float OutfitWearerGD::OutfitFadeDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OutfitFadeDuration"));
        }
        inline Ent::Gen2::ComponentGD OutfitWearerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String OutfitWearerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // OutfitGD
        inline Array<Ent::Gen2::MountableSnapLine_ControlPoint> OutfitGD::SnapLine() const
        {
            return Array<Ent::Gen2::MountableSnapLine_ControlPoint>(getProperty().getObjectField("SnapLine"));
        }
        inline Ent::Gen2::SoundEventMapping OutfitGD::SoundEventMappingRules() const
        {
            return Ent::Gen2::SoundEventMapping(getProperty().getObjectField("SoundEventMappingRules"));
        }
        inline Ent::Gen2::ComponentGD OutfitGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String OutfitGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::OutfitPiece> OutfitGD::clothes() const
        {
            return Array<Ent::Gen2::OutfitPiece>(getProperty().getObjectField("clothes"));
        }
        inline Ent::Gen2::String OutfitGD::faction() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("faction"));
        }
        inline Ent::Gen2::String OutfitGD::overrideSpeciesAudioCategory() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("overrideSpeciesAudioCategory"));
        }
        inline PrimArray<Ent::Gen2::String> OutfitGD::soundBank() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("soundBank"));
        }
        inline Ent::Gen2::String OutfitGD::soundTag() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("soundTag"));
        }
        inline Ent::Gen2::StyleMode OutfitGD::specialOutfitStyle() const
        {
            return Ent::Gen2::StyleMode(getProperty().getObjectField("specialOutfitStyle"));
        }
        inline Ent::Gen2::Bool OutfitGD::spirit() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("spirit"));
        }
        // NotVisibleInSubscene
        inline Ent::Gen2::ComponentGD NotVisibleInSubscene::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String NotVisibleInSubscene::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // NetworkNode
        inline Ent::Gen2::ComponentGD NetworkNode::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String NetworkNode::Tag() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Tag"));
        }
        inline Ent::Gen2::String NetworkNode::ThumbnailMesh() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ThumbnailMesh"));
        }
        inline Ent::Gen2::String NetworkNode::Type_() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Type"));
        }
        inline Ent::Gen2::String NetworkNode::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // NetworkLink
        inline Ent::Gen2::String NetworkLink::Source() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Source"));
        }
        inline Ent::Gen2::EntityRef NetworkLink::SourceEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("SourceEntityRef"));
        }
        inline Ent::Gen2::ComponentGD NetworkLink::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String NetworkLink::Target() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Target"));
        }
        inline Ent::Gen2::EntityRef NetworkLink::TargetEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("TargetEntityRef"));
        }
        inline Ent::Gen2::String NetworkLink::ThumbnailMesh() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ThumbnailMesh"));
        }
        inline Ent::Gen2::String NetworkLink::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // NetGD
        inline Ent::Gen2::ComponentGD NetGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String NetGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // NavMeshActivatorGD
        inline Ent::Gen2::Float NavMeshActivatorGD::ActivationZoneSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ActivationZoneSize"));
        }
        inline PrimArray<Ent::Gen2::String> NavMeshActivatorGD::SizeLayerMask() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("SizeLayerMask"));
        }
        inline Ent::Gen2::ComponentGD NavMeshActivatorGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String NavMeshActivatorGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MultiThumbnail
        inline Array<Ent::Gen2::ListItem> MultiThumbnail::List() const
        {
            return Array<Ent::Gen2::ListItem>(getProperty().getObjectField("List"));
        }
        inline Ent::Gen2::ComponentGD MultiThumbnail::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String MultiThumbnail::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MounterGD
        inline Ent::Gen2::String MounterGD::HotspotName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HotspotName"));
        }
        inline Ent::Gen2::ComponentGD MounterGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String MounterGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MountableGD
        inline PrimArray<Ent::Gen2::String> MountableGD::HotspotNames() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("HotspotNames"));
        }
        inline Array<Ent::Gen2::MountableSnapLine_ControlPoint> MountableGD::SnapLine() const
        {
            return Array<Ent::Gen2::MountableSnapLine_ControlPoint>(getProperty().getObjectField("SnapLine"));
        }
        inline Ent::Gen2::ComponentGD MountableGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String MountableGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MountIKControllerGD
        inline Ent::Gen2::ComponentGD MountIKControllerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String MountIKControllerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float MountIKControllerGD::horizontalSpineLeanFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("horizontalSpineLeanFactor"));
        }
        // MissionHolderGD
        inline Ent::Gen2::Bool MissionHolderGD::Private() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Private"));
        }
        inline Ent::Gen2::ComponentGD MissionHolderGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String MissionHolderGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MeshNavigationInfosGD
        inline Ent::Gen2::ComponentGD MeshNavigationInfosGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String MeshNavigationInfosGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Mesh
        inline Ent::Gen2::String Mesh::File() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("File"));
        }
        inline Ent::Gen2::ComponentGD Mesh::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String Mesh::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // LifeComponentGD
        inline Ent::Gen2::Float LifeComponentGD::AttackCancelDamagesThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AttackCancelDamagesThreshold"));
        }
        inline Ent::Gen2::Float LifeComponentGD::ClearDamagesWhenNoCombatAfterTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ClearDamagesWhenNoCombatAfterTime"));
        }
        inline Ent::Gen2::Float LifeComponentGD::DamagesRecoverSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DamagesRecoverSpeed"));
        }
        inline Ent::Gen2::Float LifeComponentGD::DamagesShield() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DamagesShield"));
        }
        inline Ent::Gen2::Float LifeComponentGD::DeathThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DeathThreshold"));
        }
        inline Ent::Gen2::Float LifeComponentGD::InjuredDamagesThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InjuredDamagesThreshold"));
        }
        inline Ent::Gen2::Float LifeComponentGD::MinLifeWhenSpending() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinLifeWhenSpending"));
        }
        inline Ent::Gen2::Bool LifeComponentGD::ShouldCrashWhenFlyingInjured() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShouldCrashWhenFlyingInjured"));
        }
        inline Ent::Gen2::ComponentGD LifeComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float LifeComponentGD::VelocityDamagesMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VelocityDamagesMax"));
        }
        inline Ent::Gen2::String LifeComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // LDPrimitive
        inline Ent::Gen2::Bool LDPrimitive::NonDisuptive() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("NonDisuptive"));
        }
        inline Ent::Gen2::PrimitiveData LDPrimitive::PrimitiveData() const
        {
            return Ent::Gen2::PrimitiveData(getProperty().getObjectField("PrimitiveData"));
        }
        inline Ent::Gen2::String LDPrimitive::PrimitiveType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PrimitiveType"));
        }
        inline Ent::Gen2::ComponentGD LDPrimitive::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String LDPrimitive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ItemHolderGD
        inline Ent::Gen2::String ItemHolderGD::HotspotDefault() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HotspotDefault"));
        }
        inline Ent::Gen2::String ItemHolderGD::HotspotHandLeft() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HotspotHandLeft"));
        }
        inline Ent::Gen2::String ItemHolderGD::HotspotHandRight() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HotspotHandRight"));
        }
        inline Ent::Gen2::ComponentGD ItemHolderGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool ItemHolderGD::Visible() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Visible"));
        }
        inline Ent::Gen2::String ItemHolderGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InventoryGD
        inline Ent::Gen2::ComponentGD InventoryGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Array<Ent::Gen2::TaggedEntityRef> InventoryGD::TaggedEntityRefs() const
        {
            return Array<Ent::Gen2::TaggedEntityRef>(getProperty().getObjectField("TaggedEntityRefs"));
        }
        inline Ent::Gen2::String InventoryGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InterestPointGD
        inline Ent::Gen2::Float InterestPointGD::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::ComponentGD InterestPointGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::TagsList InterestPointGD::Tags() const
        {
            return Ent::Gen2::TagsList(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String InterestPointGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InteractableGPEGD
        inline Ent::Gen2::ResponsiblePointer_ActorState_ InteractableGPEGD::GPEActorState() const
        {
            return Ent::Gen2::ResponsiblePointer_ActorState_(getProperty().getObjectField("GPEActorState"));
        }
        inline Ent::Gen2::GPEType InteractableGPEGD::GPEType() const
        {
            return Ent::Gen2::GPEType(getProperty().getObjectField("GPEType"));
        }
        inline Ent::Gen2::String InteractableGPEGD::HotspotName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HotspotName"));
        }
        inline Ent::Gen2::ResponsiblePointer_ActorState_ InteractableGPEGD::InteractionModeActorState() const
        {
            return Ent::Gen2::ResponsiblePointer_ActorState_(getProperty().getObjectField("InteractionModeActorState"));
        }
        inline Ent::Gen2::ComponentGD InteractableGPEGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String InteractableGPEGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InfoboardRegistererGD
        inline Ent::Gen2::String InfoboardRegistererGD::InfoboardName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("InfoboardName"));
        }
        inline Ent::Gen2::ComponentGD InfoboardRegistererGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String InfoboardRegistererGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // IncapacitateComponentGD
        inline PrimArray<Ent::Gen2::HitStyle> IncapacitateComponentGD::HitStyleTriggers() const
        {
            return PrimArray<Ent::Gen2::HitStyle>(getProperty().getObjectField("HitStyleTriggers"));
        }
        inline Ent::Gen2::ScaleConverter IncapacitateComponentGD::ImpactMultiplierCurve() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("ImpactMultiplierCurve"));
        }
        inline Ent::Gen2::ScaleConverter IncapacitateComponentGD::IncapacitateTimeCurve() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("IncapacitateTimeCurve"));
        }
        inline Ent::Gen2::ScaleConverter IncapacitateComponentGD::IncapacitateTimeMultiplierCurve() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("IncapacitateTimeMultiplierCurve"));
        }
        inline Ent::Gen2::ComponentGD IncapacitateComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String IncapacitateComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HotspotsGD
        inline Ent::Gen2::Map<char const*, Ent::Gen2::HotspotData> HotspotsGD::HotspotsMap() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::HotspotData>(getProperty().getObjectField("HotspotsMap"));
        }
        inline Ent::Gen2::ComponentGD HotspotsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String HotspotsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HitTriggerGD
        inline Ent::Gen2::ComponentGD HitTriggerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String HitTriggerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HeightObj
        inline Array<Ent::Gen2::DisplaceNoiseListItem> HeightObj::DisplaceNoiseList() const
        {
            return Array<Ent::Gen2::DisplaceNoiseListItem>(getProperty().getObjectField("DisplaceNoiseList"));
        }
        inline Ent::Gen2::Int HeightObj::EditorSubdivision() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EditorSubdivision"));
        }
        inline Ent::Gen2::Matrix33 HeightObj::LocalMatrix() const
        {
            return Ent::Gen2::Matrix33(getProperty().getObjectField("LocalMatrix"));
        }
        inline Ent::Gen2::String HeightObj::MeshFile() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MeshFile"));
        }
        inline Ent::Gen2::String HeightObj::MeshName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MeshName"));
        }
        inline Ent::Gen2::Int HeightObj::Priority() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Priority"));
        }
        inline Ent::Gen2::Int HeightObj::Subdivision() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Subdivision"));
        }
        inline Ent::Gen2::ComponentGD HeightObj::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String HeightObj::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HeightMapComponentGD
        inline Ent::Gen2::String HeightMapComponentGD::HeightMapArchivePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HeightMapArchivePath"));
        }
        inline PrimArray<Ent::Gen2::String> HeightMapComponentGD::HeightMapPaths() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("HeightMapPaths"));
        }
        inline Ent::Gen2::Float HeightMapComponentGD::HeightScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HeightScale"));
        }
        inline Ent::Gen2::ComponentGD HeightMapComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool HeightMapComponentGD::SwapX() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("SwapX"));
        }
        inline Ent::Gen2::Bool HeightMapComponentGD::SwapY() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("SwapY"));
        }
        inline Ent::Gen2::Vector2 HeightMapComponentGD::WorldSize() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("WorldSize"));
        }
        inline Ent::Gen2::String HeightMapComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HealthAreaGD
        inline Ent::Gen2::Float HealthAreaGD::EnergyRestorationRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EnergyRestorationRate"));
        }
        inline Ent::Gen2::EnergySide HealthAreaGD::FactionSide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("FactionSide"));
        }
        inline Ent::Gen2::Float HealthAreaGD::LifeRestorationRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LifeRestorationRate"));
        }
        inline Ent::Gen2::Float HealthAreaGD::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::Float HealthAreaGD::ReviveRestorationRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ReviveRestorationRate"));
        }
        inline Ent::Gen2::ComponentGD HealthAreaGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String HealthAreaGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HealerGD
        inline Ent::Gen2::ComponentGD HealerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String HealerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HealTriggerGD
        inline Ent::Gen2::ComponentGD HealTriggerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String HealTriggerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // HealPumpGD
        inline Ent::Gen2::Float HealPumpGD::AlliesLifeAgentPerSecond() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AlliesLifeAgentPerSecond"));
        }
        inline Ent::Gen2::Float HealPumpGD::EnemiesLifeAgentPerSecond() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EnemiesLifeAgentPerSecond"));
        }
        inline Ent::Gen2::Float HealPumpGD::LifeAmountRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LifeAmountRatio"));
        }
        inline Ent::Gen2::Float HealPumpGD::Range() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Range"));
        }
        inline Ent::Gen2::ComponentGD HealPumpGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String HealPumpGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GroundTypeSamplerGD
        inline Ent::Gen2::String GroundTypeSamplerGD::GroundTypeMapPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GroundTypeMapPath"));
        }
        inline Ent::Gen2::ComponentGD GroundTypeSamplerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GroundTypeSamplerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GrasperGD
        inline Ent::Gen2::ComponentGD GrasperGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GrasperGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float GrasperGD::bestInteractionDeltaAngleCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("bestInteractionDeltaAngleCoeff"));
        }
        inline Ent::Gen2::Float GrasperGD::bestInteractionDistanceCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("bestInteractionDistanceCoeff"));
        }
        inline Ent::Gen2::Map<GraspTypeEnum, Ent::Gen2::GrasperInteractionData> GrasperGD::interactionDatas() const
        {
            return Ent::Gen2::Map<GraspTypeEnum, Ent::Gen2::GrasperInteractionData>(getProperty().getObjectField("interactionDatas"));
        }
        inline Ent::Gen2::Float GrasperGD::jumpRiseMinCoeffToEnter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("jumpRiseMinCoeffToEnter"));
        }
        inline Ent::Gen2::GraspResistanceData GrasperGD::resistanceData() const
        {
            return Ent::Gen2::GraspResistanceData(getProperty().getObjectField("resistanceData"));
        }
        inline Ent::Gen2::String GrasperGD::sensorHotspotName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("sensorHotspotName"));
        }
        // GraspableGD
        inline Ent::Gen2::ComponentGD GraspableGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GraspableGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Map<GraspTypeEnum, Ent::Gen2::GraspableInteractionData> GraspableGD::interactionDatas() const
        {
            return Ent::Gen2::Map<GraspTypeEnum, Ent::Gen2::GraspableInteractionData>(getProperty().getObjectField("interactionDatas"));
        }
        inline Ent::Gen2::GraspResistanceData GraspableGD::resistanceData() const
        {
            return Ent::Gen2::GraspResistanceData(getProperty().getObjectField("resistanceData"));
        }
        // GameEffectSpawnerGD
        inline Array<Ent::Gen2::sGameEffectTemplate> GameEffectSpawnerGD::StartGameEffects() const
        {
            return Array<Ent::Gen2::sGameEffectTemplate>(getProperty().getObjectField("StartGameEffects"));
        }
        inline Ent::Gen2::ComponentGD GameEffectSpawnerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String GameEffectSpawnerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FurComponentGD
        inline Ent::Gen2::FurProperties FurComponentGD::Properties() const
        {
            return Ent::Gen2::FurProperties(getProperty().getObjectField("Properties"));
        }
        inline Ent::Gen2::ComponentGD FurComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FurComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidVolumeComponentGD
        inline Ent::Gen2::FluidVolumeComponentGD_FluidVolumeData FluidVolumeComponentGD::FluidVolume() const
        {
            return Ent::Gen2::FluidVolumeComponentGD_FluidVolumeData(getProperty().getObjectField("FluidVolume"));
        }
        inline Ent::Gen2::ComponentGD FluidVolumeComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FluidVolumeComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidViewGD
        inline Ent::Gen2::ComponentGD FluidViewGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FluidViewGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidGD
        inline Ent::Gen2::Bool FluidGD::IsWaterPlane() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsWaterPlane"));
        }
        inline Ent::Gen2::ComponentGD FluidGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FluidGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float FluidGD::constrainedPlaneOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("constrainedPlaneOffset"));
        }
        inline Ent::Gen2::Vector3 FluidGD::fluidCurrent() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("fluidCurrent"));
        }
        inline Ent::Gen2::Bool FluidGD::hasDepthLimit() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("hasDepthLimit"));
        }
        inline Ent::Gen2::Bool FluidGD::isWaterfall() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isWaterfall"));
        }
        inline Ent::Gen2::FluidType FluidGD::type() const
        {
            return Ent::Gen2::FluidType(getProperty().getObjectField("type"));
        }
        inline Ent::Gen2::Bool FluidGD::useHalfShape() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("useHalfShape"));
        }
        // FluidFXEntitySpawnerGD
        inline Ent::Gen2::Precision FluidFXEntitySpawnerGD::SamplingPrecision() const
        {
            return Ent::Gen2::Precision(getProperty().getObjectField("SamplingPrecision"));
        }
        inline Array<Ent::Gen2::SpawningParameter> FluidFXEntitySpawnerGD::SpawningParameters() const
        {
            return Array<Ent::Gen2::SpawningParameter>(getProperty().getObjectField("SpawningParameters"));
        }
        inline Ent::Gen2::ComponentGD FluidFXEntitySpawnerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float FluidFXEntitySpawnerGD::UpdatePeriod() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("UpdatePeriod"));
        }
        inline Ent::Gen2::String FluidFXEntitySpawnerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FireSensorGD
        inline Ent::Gen2::ComponentGD FireSensorGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FireSensorGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EventTriggerGD
        inline PrimArray<Ent::Gen2::String> EventTriggerGD::Events() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("Events"));
        }
        inline Ent::Gen2::ComponentGD EventTriggerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EventTriggerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EventHandlerGD
        inline Ent::Gen2::ComponentGD EventHandlerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EventHandlerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnvStampGD
        inline Ent::Gen2::Float EnvStampGD::RegenStateChangeDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RegenStateChangeDuration"));
        }
        inline Ent::Gen2::Map<EnergySideEnum, Array<Ent::Gen2::sEnvStamp>> EnvStampGD::Stamps() const
        {
            return Ent::Gen2::Map<EnergySideEnum, Array<Ent::Gen2::sEnvStamp>>(getProperty().getObjectField("Stamps"));
        }
        inline Ent::Gen2::ComponentGD EnvStampGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EnvStampGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergySpoutGD
        inline Ent::Gen2::Float EnergySpoutGD::EnergySpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EnergySpeed"));
        }
        inline Ent::Gen2::EntityRef EnergySpoutGD::ListenerEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("ListenerEntityRef"));
        }
        inline Ent::Gen2::Float EnergySpoutGD::MinDistanceBetweenRegen() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinDistanceBetweenRegen"));
        }
        inline Ent::Gen2::Float EnergySpoutGD::MinTimeBetweenRegen() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinTimeBetweenRegen"));
        }
        inline Ent::Gen2::Float EnergySpoutGD::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::String EnergySpoutGD::SplineRegenEffectName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SplineRegenEffectName"));
        }
        inline Ent::Gen2::ComponentGD EnergySpoutGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EnergySpoutGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergySideSwitcherGD
        inline Ent::Gen2::Map<EnergySideEnum, Ent::Gen2::EnergySideData> EnergySideSwitcherGD::EnergySideData() const
        {
            return Ent::Gen2::Map<EnergySideEnum, Ent::Gen2::EnergySideData>(getProperty().getObjectField("EnergySideData"));
        }
        inline Ent::Gen2::EntityRef EnergySideSwitcherGD::ReviveEnergyEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("ReviveEnergyEntityRef"));
        }
        inline Ent::Gen2::ComponentGD EnergySideSwitcherGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EnergySideSwitcherGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergyPoolGD
        inline Array<Ent::Gen2::EnergyPoolGD_EnergyArea> EnergyPoolGD::EnergyAreas() const
        {
            return Array<Ent::Gen2::EnergyPoolGD_EnergyArea>(getProperty().getObjectField("EnergyAreas"));
        }
        inline Ent::Gen2::Bool EnergyPoolGD::FactionOverride() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("FactionOverride"));
        }
        inline Ent::Gen2::ComponentGD EnergyPoolGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::TransitionSettings EnergyPoolGD::TransitionSettings() const
        {
            return Ent::Gen2::TransitionSettings(getProperty().getObjectField("TransitionSettings"));
        }
        inline Ent::Gen2::String EnergyPoolGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergyNetworkListenerGD
        inline Ent::Gen2::ComponentGD EnergyNetworkListenerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EnergyNetworkListenerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergyDrainGD
        inline Ent::Gen2::EntityRef EnergyDrainGD::PoolEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("PoolEntityRef"));
        }
        inline Ent::Gen2::ComponentGD EnergyDrainGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EnergyDrainGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EnergyCrookGD
        inline Ent::Gen2::EntityRef EnergyCrookGD::FatherEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("FatherEntityRef"));
        }
        inline Ent::Gen2::Float EnergyCrookGD::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::Float EnergyCrookGD::RegenScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RegenScale"));
        }
        inline Ent::Gen2::ComponentGD EnergyCrookGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EnergyCrookGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DummyComponentGD
        inline Ent::Gen2::ComponentGD DummyComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String DummyComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DiveAttackGD
        inline Ent::Gen2::ComponentGD DiveAttackGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String DiveAttackGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DistanceTriggerGD
        inline PrimArray<Ent::Gen2::Float> DistanceTriggerGD::Distances() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("Distances"));
        }
        inline PrimArray<Ent::Gen2::Float> DistanceTriggerGD::Hystereses() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("Hystereses"));
        }
        inline Ent::Gen2::ComponentGD DistanceTriggerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String DistanceTriggerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FightDistanceTriggerGD
        inline Ent::Gen2::DistanceTriggerGD FightDistanceTriggerGD::Super() const
        {
            return Ent::Gen2::DistanceTriggerGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FightDistanceTriggerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // DebugGridGD
        inline Ent::Gen2::Int DebugGridGD::Height() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Height"));
        }
        inline Ent::Gen2::ComponentGD DebugGridGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Int DebugGridGD::Width() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Width"));
        }
        inline Ent::Gen2::String DebugGridGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CustomThumbnail
        inline Ent::Gen2::ComponentGD CustomThumbnail::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::ThumbPath CustomThumbnail::Thumbnail() const
        {
            return Ent::Gen2::ThumbPath(getProperty().getObjectField("Thumbnail"));
        }
        inline Ent::Gen2::String CustomThumbnail::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CreatureUIGD
        inline Ent::Gen2::Float CreatureUIGD::LifeBarLength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LifeBarLength"));
        }
        inline Ent::Gen2::Float CreatureUIGD::LifeBarWidth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LifeBarWidth"));
        }
        inline Ent::Gen2::Float CreatureUIGD::LifeBarZOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LifeBarZOffset"));
        }
        inline Ent::Gen2::Bool CreatureUIGD::ShowLifeBar() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowLifeBar"));
        }
        inline Ent::Gen2::ComponentGD CreatureUIGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CreatureUIGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ConstrainedMoveGD
        inline Ent::Gen2::ConstrainedMoveContextInput ConstrainedMoveGD::ConstrainedMoveContextInput() const
        {
            return Ent::Gen2::ConstrainedMoveContextInput(getProperty().getObjectField("ConstrainedMoveContextInput"));
        }
        inline Ent::Gen2::ComponentGD ConstrainedMoveGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ConstrainedMoveGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ConnectorGD
        inline Ent::Gen2::ComponentGD ConnectorGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ConnectorGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ComponentWithProtoCodeGD
        inline Ent::Gen2::ComponentGD ComponentWithProtoCodeGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ComponentWithProtoCodeGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ClothAnimationGD
        inline Ent::Gen2::String ClothAnimationGD::ClothSkeletonPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ClothSkeletonPath"));
        }
        inline Ent::Gen2::Float ClothAnimationGD::PhysicsDamping() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PhysicsDamping"));
        }
        inline Ent::Gen2::Bool ClothAnimationGD::PhysicsFixedDt() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("PhysicsFixedDt"));
        }
        inline Ent::Gen2::Vector3 ClothAnimationGD::PhysicsGravity() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("PhysicsGravity"));
        }
        inline Ent::Gen2::Float ClothAnimationGD::PhysicsMass() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PhysicsMass"));
        }
        inline Ent::Gen2::Float ClothAnimationGD::PhysicsSpeedInfluence() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PhysicsSpeedInfluence"));
        }
        inline Ent::Gen2::Bool ClothAnimationGD::PhysicsUseDefaultProperties() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("PhysicsUseDefaultProperties"));
        }
        inline Ent::Gen2::ComponentGD ClothAnimationGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ClothAnimationGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ChildEntityPoolComponentGD
        inline Ent::Gen2::Bool ChildEntityPoolComponentGD::AddStateAtStart() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AddStateAtStart"));
        }
        inline Ent::Gen2::Bool ChildEntityPoolComponentGD::AttachToParent() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AttachToParent"));
        }
        inline PrimArray<Ent::Gen2::EntityRef> ChildEntityPoolComponentGD::EntityRefs() const
        {
            return PrimArray<Ent::Gen2::EntityRef>(getProperty().getObjectField("EntityRefs"));
        }
        inline Ent::Gen2::SpawnState ChildEntityPoolComponentGD::SpawnState() const
        {
            return Ent::Gen2::SpawnState(getProperty().getObjectField("SpawnState"));
        }
        inline Ent::Gen2::ComponentGD ChildEntityPoolComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ChildEntityPoolComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CharacterPlatformGD
        inline Ent::Gen2::ComponentGD CharacterPlatformGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CharacterPlatformGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CameraDataGD
        inline Ent::Gen2::String CameraDataGD::CameraDataResourcePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("CameraDataResourcePath"));
        }
        inline Ent::Gen2::ComponentGD CameraDataGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CameraDataGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BreakableGD
        inline Ent::Gen2::EntityRef BreakableGD::AssemblyEntity() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("AssemblyEntity"));
        }
        inline Ent::Gen2::String BreakableGD::BreakSoundBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BreakSoundBank"));
        }
        inline Ent::Gen2::String BreakableGD::BreakSoundEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BreakSoundEvent"));
        }
        inline Ent::Gen2::EntityRef BreakableGD::ChildEntity() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("ChildEntity"));
        }
        inline Ent::Gen2::Float BreakableGD::FadeoutDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FadeoutDuration"));
        }
        inline Ent::Gen2::String BreakableGD::GameEffectOnBreaking() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GameEffectOnBreaking"));
        }
        inline Ent::Gen2::Float BreakableGD::MaxContactAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxContactAngle"));
        }
        inline Ent::Gen2::ComponentGD BreakableGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float BreakableGD::TimeBeforeFade() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TimeBeforeFade"));
        }
        inline Ent::Gen2::EntityRef BreakableGD::UnbrokenEntity() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("UnbrokenEntity"));
        }
        inline Ent::Gen2::String BreakableGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool BreakableGD::isBreakableWithAttack() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isBreakableWithAttack"));
        }
        // BittenGD
        inline Ent::Gen2::Float BittenGD::MaxAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxAngle"));
        }
        inline Ent::Gen2::ComponentGD BittenGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BittenGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AttackTriggerGD
        inline Ent::Gen2::ComponentGD AttackTriggerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AttackTriggerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AssemblyGD
        inline Ent::Gen2::ComponentGD AssemblyGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AssemblyGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationTransformDriverGD
        inline Ent::Gen2::ComponentGD AnimationTransformDriverGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationTransformDriverGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationPlaylistGD
        inline PrimArray<Ent::Gen2::String> AnimationPlaylistGD::PlayAnim() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("PlayAnim"));
        }
        inline Ent::Gen2::Int AnimationPlaylistGD::PlayAnimInputID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("PlayAnimInputID"));
        }
        inline Ent::Gen2::Bool AnimationPlaylistGD::RandomizeStartTime() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("RandomizeStartTime"));
        }
        inline Ent::Gen2::ComponentGD AnimationPlaylistGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationPlaylistGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationPhysicsChainConstraintsGD
        inline Ent::Gen2::String AnimationPhysicsChainConstraintsGD::BoneNamePrefix() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneNamePrefix"));
        }
        inline Ent::Gen2::ComponentGD AnimationPhysicsChainConstraintsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationPhysicsChainConstraintsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationModelGD
        inline Ent::Gen2::ComponentGD AnimationModelGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationModelGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Map<LocomotionModeEnum, Ent::Gen2::Map<SpeedModeEnum, Ent::Gen2::Float>> AnimationModelGD::additionalSpeedDebug() const
        {
            return Ent::Gen2::Map<LocomotionModeEnum, Ent::Gen2::Map<SpeedModeEnum, Ent::Gen2::Float>>(getProperty().getObjectField("additionalSpeedDebug"));
        }
        inline Ent::Gen2::Bool AnimationModelGD::isLandAnimDriven() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isLandAnimDriven"));
        }
        inline Ent::Gen2::Bool AnimationModelGD::isTurnAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isTurnAllowed"));
        }
        inline Ent::Gen2::Float AnimationModelGD::playRatioFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("playRatioFactor"));
        }
        inline Ent::Gen2::Float AnimationModelGD::scalePlayRatioCoeffInfluence() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("scalePlayRatioCoeffInfluence"));
        }
        inline Ent::Gen2::Float AnimationModelGD::startRunPlayRatioFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("startRunPlayRatioFactor"));
        }
        inline Ent::Gen2::Float AnimationModelGD::turnPlayRatioFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("turnPlayRatioFactor"));
        }
        // AnimationHitsConstraintsGD
        inline Ent::Gen2::ComponentGD AnimationHitsConstraintsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationHitsConstraintsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Component
        inline char const* Component::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::AIContextGD> Component::AIContextGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AIContextGD") != 0?
                    std::optional<Ent::Gen2::AIContextGD>{}:
                    std::optional<Ent::Gen2::AIContextGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AIContextGD Component::setAIContextGD()
        {
            return Ent::Gen2::AIContextGD(getProperty().setUnionType("AIContextGD"));
        }
        inline std::optional<Ent::Gen2::ActorGD> Component::ActorGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ActorGD") != 0?
                    std::optional<Ent::Gen2::ActorGD>{}:
                    std::optional<Ent::Gen2::ActorGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ActorGD Component::setActorGD()
        {
            return Ent::Gen2::ActorGD(getProperty().setUnionType("ActorGD"));
        }
        inline std::optional<Ent::Gen2::AnimationControllerGD> Component::AnimationControllerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationControllerGD") != 0?
                    std::optional<Ent::Gen2::AnimationControllerGD>{}:
                    std::optional<Ent::Gen2::AnimationControllerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationControllerGD Component::setAnimationControllerGD()
        {
            return Ent::Gen2::AnimationControllerGD(getProperty().setUnionType("AnimationControllerGD"));
        }
        inline std::optional<Ent::Gen2::AnimationEventsGeneratorGD> Component::AnimationEventsGeneratorGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationEventsGeneratorGD") != 0?
                    std::optional<Ent::Gen2::AnimationEventsGeneratorGD>{}:
                    std::optional<Ent::Gen2::AnimationEventsGeneratorGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationEventsGeneratorGD Component::setAnimationEventsGeneratorGD()
        {
            return Ent::Gen2::AnimationEventsGeneratorGD(getProperty().setUnionType("AnimationEventsGeneratorGD"));
        }
        inline std::optional<Ent::Gen2::AnimationGenericConstraintsGD> Component::AnimationGenericConstraintsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationGenericConstraintsGD") != 0?
                    std::optional<Ent::Gen2::AnimationGenericConstraintsGD>{}:
                    std::optional<Ent::Gen2::AnimationGenericConstraintsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationGenericConstraintsGD Component::setAnimationGenericConstraintsGD()
        {
            return Ent::Gen2::AnimationGenericConstraintsGD(getProperty().setUnionType("AnimationGenericConstraintsGD"));
        }
        inline std::optional<Ent::Gen2::AnimationHitsConstraintsGD> Component::AnimationHitsConstraintsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationHitsConstraintsGD") != 0?
                    std::optional<Ent::Gen2::AnimationHitsConstraintsGD>{}:
                    std::optional<Ent::Gen2::AnimationHitsConstraintsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationHitsConstraintsGD Component::setAnimationHitsConstraintsGD()
        {
            return Ent::Gen2::AnimationHitsConstraintsGD(getProperty().setUnionType("AnimationHitsConstraintsGD"));
        }
        inline std::optional<Ent::Gen2::AnimationLegsConstraintsGD> Component::AnimationLegsConstraintsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationLegsConstraintsGD") != 0?
                    std::optional<Ent::Gen2::AnimationLegsConstraintsGD>{}:
                    std::optional<Ent::Gen2::AnimationLegsConstraintsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationLegsConstraintsGD Component::setAnimationLegsConstraintsGD()
        {
            return Ent::Gen2::AnimationLegsConstraintsGD(getProperty().setUnionType("AnimationLegsConstraintsGD"));
        }
        inline std::optional<Ent::Gen2::AnimationModelGD> Component::AnimationModelGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationModelGD") != 0?
                    std::optional<Ent::Gen2::AnimationModelGD>{}:
                    std::optional<Ent::Gen2::AnimationModelGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationModelGD Component::setAnimationModelGD()
        {
            return Ent::Gen2::AnimationModelGD(getProperty().setUnionType("AnimationModelGD"));
        }
        inline std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD> Component::AnimationPhysicsChainConstraintsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationPhysicsChainConstraintsGD") != 0?
                    std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD>{}:
                    std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationPhysicsChainConstraintsGD Component::setAnimationPhysicsChainConstraintsGD()
        {
            return Ent::Gen2::AnimationPhysicsChainConstraintsGD(getProperty().setUnionType("AnimationPhysicsChainConstraintsGD"));
        }
        inline std::optional<Ent::Gen2::AnimationPlaylistGD> Component::AnimationPlaylistGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationPlaylistGD") != 0?
                    std::optional<Ent::Gen2::AnimationPlaylistGD>{}:
                    std::optional<Ent::Gen2::AnimationPlaylistGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationPlaylistGD Component::setAnimationPlaylistGD()
        {
            return Ent::Gen2::AnimationPlaylistGD(getProperty().setUnionType("AnimationPlaylistGD"));
        }
        inline std::optional<Ent::Gen2::AnimationTailConstraintsGD> Component::AnimationTailConstraintsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationTailConstraintsGD") != 0?
                    std::optional<Ent::Gen2::AnimationTailConstraintsGD>{}:
                    std::optional<Ent::Gen2::AnimationTailConstraintsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationTailConstraintsGD Component::setAnimationTailConstraintsGD()
        {
            return Ent::Gen2::AnimationTailConstraintsGD(getProperty().setUnionType("AnimationTailConstraintsGD"));
        }
        inline std::optional<Ent::Gen2::AnimationTransformDriverGD> Component::AnimationTransformDriverGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationTransformDriverGD") != 0?
                    std::optional<Ent::Gen2::AnimationTransformDriverGD>{}:
                    std::optional<Ent::Gen2::AnimationTransformDriverGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationTransformDriverGD Component::setAnimationTransformDriverGD()
        {
            return Ent::Gen2::AnimationTransformDriverGD(getProperty().setUnionType("AnimationTransformDriverGD"));
        }
        inline std::optional<Ent::Gen2::AnimationTreeConstraintsGD> Component::AnimationTreeConstraintsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AnimationTreeConstraintsGD") != 0?
                    std::optional<Ent::Gen2::AnimationTreeConstraintsGD>{}:
                    std::optional<Ent::Gen2::AnimationTreeConstraintsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AnimationTreeConstraintsGD Component::setAnimationTreeConstraintsGD()
        {
            return Ent::Gen2::AnimationTreeConstraintsGD(getProperty().setUnionType("AnimationTreeConstraintsGD"));
        }
        inline std::optional<Ent::Gen2::AssemblyGD> Component::AssemblyGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AssemblyGD") != 0?
                    std::optional<Ent::Gen2::AssemblyGD>{}:
                    std::optional<Ent::Gen2::AssemblyGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AssemblyGD Component::setAssemblyGD()
        {
            return Ent::Gen2::AssemblyGD(getProperty().setUnionType("AssemblyGD"));
        }
        inline std::optional<Ent::Gen2::AttackComponentGD> Component::AttackComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AttackComponentGD") != 0?
                    std::optional<Ent::Gen2::AttackComponentGD>{}:
                    std::optional<Ent::Gen2::AttackComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AttackComponentGD Component::setAttackComponentGD()
        {
            return Ent::Gen2::AttackComponentGD(getProperty().setUnionType("AttackComponentGD"));
        }
        inline std::optional<Ent::Gen2::AttackTriggerGD> Component::AttackTriggerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "AttackTriggerGD") != 0?
                    std::optional<Ent::Gen2::AttackTriggerGD>{}:
                    std::optional<Ent::Gen2::AttackTriggerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::AttackTriggerGD Component::setAttackTriggerGD()
        {
            return Ent::Gen2::AttackTriggerGD(getProperty().setUnionType("AttackTriggerGD"));
        }
        inline std::optional<Ent::Gen2::BeamTargetGD> Component::BeamTargetGD()
        {
            return strcmp(
                getProperty().getUnionType(), "BeamTargetGD") != 0?
                    std::optional<Ent::Gen2::BeamTargetGD>{}:
                    std::optional<Ent::Gen2::BeamTargetGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::BeamTargetGD Component::setBeamTargetGD()
        {
            return Ent::Gen2::BeamTargetGD(getProperty().setUnionType("BeamTargetGD"));
        }
        inline std::optional<Ent::Gen2::BittenGD> Component::BittenGD()
        {
            return strcmp(
                getProperty().getUnionType(), "BittenGD") != 0?
                    std::optional<Ent::Gen2::BittenGD>{}:
                    std::optional<Ent::Gen2::BittenGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::BittenGD Component::setBittenGD()
        {
            return Ent::Gen2::BittenGD(getProperty().setUnionType("BittenGD"));
        }
        inline std::optional<Ent::Gen2::BoidsGD> Component::BoidsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "BoidsGD") != 0?
                    std::optional<Ent::Gen2::BoidsGD>{}:
                    std::optional<Ent::Gen2::BoidsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::BoidsGD Component::setBoidsGD()
        {
            return Ent::Gen2::BoidsGD(getProperty().setUnionType("BoidsGD"));
        }
        inline std::optional<Ent::Gen2::BreakableGD> Component::BreakableGD()
        {
            return strcmp(
                getProperty().getUnionType(), "BreakableGD") != 0?
                    std::optional<Ent::Gen2::BreakableGD>{}:
                    std::optional<Ent::Gen2::BreakableGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::BreakableGD Component::setBreakableGD()
        {
            return Ent::Gen2::BreakableGD(getProperty().setUnionType("BreakableGD"));
        }
        inline std::optional<Ent::Gen2::CameraDataGD> Component::CameraDataGD()
        {
            return strcmp(
                getProperty().getUnionType(), "CameraDataGD") != 0?
                    std::optional<Ent::Gen2::CameraDataGD>{}:
                    std::optional<Ent::Gen2::CameraDataGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CameraDataGD Component::setCameraDataGD()
        {
            return Ent::Gen2::CameraDataGD(getProperty().setUnionType("CameraDataGD"));
        }
        inline std::optional<Ent::Gen2::CameraSetterGD> Component::CameraSetterGD()
        {
            return strcmp(
                getProperty().getUnionType(), "CameraSetterGD") != 0?
                    std::optional<Ent::Gen2::CameraSetterGD>{}:
                    std::optional<Ent::Gen2::CameraSetterGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CameraSetterGD Component::setCameraSetterGD()
        {
            return Ent::Gen2::CameraSetterGD(getProperty().setUnionType("CameraSetterGD"));
        }
        inline std::optional<Ent::Gen2::CharacterControllerGD> Component::CharacterControllerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "CharacterControllerGD") != 0?
                    std::optional<Ent::Gen2::CharacterControllerGD>{}:
                    std::optional<Ent::Gen2::CharacterControllerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CharacterControllerGD Component::setCharacterControllerGD()
        {
            return Ent::Gen2::CharacterControllerGD(getProperty().setUnionType("CharacterControllerGD"));
        }
        inline std::optional<Ent::Gen2::CharacterPlatformGD> Component::CharacterPlatformGD()
        {
            return strcmp(
                getProperty().getUnionType(), "CharacterPlatformGD") != 0?
                    std::optional<Ent::Gen2::CharacterPlatformGD>{}:
                    std::optional<Ent::Gen2::CharacterPlatformGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CharacterPlatformGD Component::setCharacterPlatformGD()
        {
            return Ent::Gen2::CharacterPlatformGD(getProperty().setUnionType("CharacterPlatformGD"));
        }
        inline std::optional<Ent::Gen2::ChargedJumpGD> Component::ChargedJumpGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ChargedJumpGD") != 0?
                    std::optional<Ent::Gen2::ChargedJumpGD>{}:
                    std::optional<Ent::Gen2::ChargedJumpGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ChargedJumpGD Component::setChargedJumpGD()
        {
            return Ent::Gen2::ChargedJumpGD(getProperty().setUnionType("ChargedJumpGD"));
        }
        inline std::optional<Ent::Gen2::ChildEntityPoolComponentGD> Component::ChildEntityPoolComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ChildEntityPoolComponentGD") != 0?
                    std::optional<Ent::Gen2::ChildEntityPoolComponentGD>{}:
                    std::optional<Ent::Gen2::ChildEntityPoolComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ChildEntityPoolComponentGD Component::setChildEntityPoolComponentGD()
        {
            return Ent::Gen2::ChildEntityPoolComponentGD(getProperty().setUnionType("ChildEntityPoolComponentGD"));
        }
        inline std::optional<Ent::Gen2::CinematicGD> Component::CinematicGD()
        {
            return strcmp(
                getProperty().getUnionType(), "CinematicGD") != 0?
                    std::optional<Ent::Gen2::CinematicGD>{}:
                    std::optional<Ent::Gen2::CinematicGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CinematicGD Component::setCinematicGD()
        {
            return Ent::Gen2::CinematicGD(getProperty().setUnionType("CinematicGD"));
        }
        inline std::optional<Ent::Gen2::ClothAnimationGD> Component::ClothAnimationGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ClothAnimationGD") != 0?
                    std::optional<Ent::Gen2::ClothAnimationGD>{}:
                    std::optional<Ent::Gen2::ClothAnimationGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ClothAnimationGD Component::setClothAnimationGD()
        {
            return Ent::Gen2::ClothAnimationGD(getProperty().setUnionType("ClothAnimationGD"));
        }
        inline std::optional<Ent::Gen2::ClothGD> Component::ClothGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ClothGD") != 0?
                    std::optional<Ent::Gen2::ClothGD>{}:
                    std::optional<Ent::Gen2::ClothGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ClothGD Component::setClothGD()
        {
            return Ent::Gen2::ClothGD(getProperty().setUnionType("ClothGD"));
        }
        inline std::optional<Ent::Gen2::ComponentWithProtoCodeGD> Component::ComponentWithProtoCodeGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ComponentWithProtoCodeGD") != 0?
                    std::optional<Ent::Gen2::ComponentWithProtoCodeGD>{}:
                    std::optional<Ent::Gen2::ComponentWithProtoCodeGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ComponentWithProtoCodeGD Component::setComponentWithProtoCodeGD()
        {
            return Ent::Gen2::ComponentWithProtoCodeGD(getProperty().setUnionType("ComponentWithProtoCodeGD"));
        }
        inline std::optional<Ent::Gen2::ConnectorGD> Component::ConnectorGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ConnectorGD") != 0?
                    std::optional<Ent::Gen2::ConnectorGD>{}:
                    std::optional<Ent::Gen2::ConnectorGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ConnectorGD Component::setConnectorGD()
        {
            return Ent::Gen2::ConnectorGD(getProperty().setUnionType("ConnectorGD"));
        }
        inline std::optional<Ent::Gen2::ConstrainedMoveGD> Component::ConstrainedMoveGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ConstrainedMoveGD") != 0?
                    std::optional<Ent::Gen2::ConstrainedMoveGD>{}:
                    std::optional<Ent::Gen2::ConstrainedMoveGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ConstrainedMoveGD Component::setConstrainedMoveGD()
        {
            return Ent::Gen2::ConstrainedMoveGD(getProperty().setUnionType("ConstrainedMoveGD"));
        }
        inline std::optional<Ent::Gen2::CreatureAIGD> Component::CreatureAIGD()
        {
            return strcmp(
                getProperty().getUnionType(), "CreatureAIGD") != 0?
                    std::optional<Ent::Gen2::CreatureAIGD>{}:
                    std::optional<Ent::Gen2::CreatureAIGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CreatureAIGD Component::setCreatureAIGD()
        {
            return Ent::Gen2::CreatureAIGD(getProperty().setUnionType("CreatureAIGD"));
        }
        inline std::optional<Ent::Gen2::CreatureGD> Component::CreatureGD()
        {
            return strcmp(
                getProperty().getUnionType(), "CreatureGD") != 0?
                    std::optional<Ent::Gen2::CreatureGD>{}:
                    std::optional<Ent::Gen2::CreatureGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CreatureGD Component::setCreatureGD()
        {
            return Ent::Gen2::CreatureGD(getProperty().setUnionType("CreatureGD"));
        }
        inline std::optional<Ent::Gen2::CreatureUIGD> Component::CreatureUIGD()
        {
            return strcmp(
                getProperty().getUnionType(), "CreatureUIGD") != 0?
                    std::optional<Ent::Gen2::CreatureUIGD>{}:
                    std::optional<Ent::Gen2::CreatureUIGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CreatureUIGD Component::setCreatureUIGD()
        {
            return Ent::Gen2::CreatureUIGD(getProperty().setUnionType("CreatureUIGD"));
        }
        inline std::optional<Ent::Gen2::CustomThumbnail> Component::CustomThumbnail()
        {
            return strcmp(
                getProperty().getUnionType(), "CustomThumbnail") != 0?
                    std::optional<Ent::Gen2::CustomThumbnail>{}:
                    std::optional<Ent::Gen2::CustomThumbnail>(getProperty().getUnionData());
        }
        inline Ent::Gen2::CustomThumbnail Component::setCustomThumbnail()
        {
            return Ent::Gen2::CustomThumbnail(getProperty().setUnionType("CustomThumbnail"));
        }
        inline std::optional<Ent::Gen2::DebugGridGD> Component::DebugGridGD()
        {
            return strcmp(
                getProperty().getUnionType(), "DebugGridGD") != 0?
                    std::optional<Ent::Gen2::DebugGridGD>{}:
                    std::optional<Ent::Gen2::DebugGridGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::DebugGridGD Component::setDebugGridGD()
        {
            return Ent::Gen2::DebugGridGD(getProperty().setUnionType("DebugGridGD"));
        }
        inline std::optional<Ent::Gen2::DistanceTriggerGD> Component::DistanceTriggerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "DistanceTriggerGD") != 0?
                    std::optional<Ent::Gen2::DistanceTriggerGD>{}:
                    std::optional<Ent::Gen2::DistanceTriggerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::DistanceTriggerGD Component::setDistanceTriggerGD()
        {
            return Ent::Gen2::DistanceTriggerGD(getProperty().setUnionType("DistanceTriggerGD"));
        }
        inline std::optional<Ent::Gen2::DiveAttackGD> Component::DiveAttackGD()
        {
            return strcmp(
                getProperty().getUnionType(), "DiveAttackGD") != 0?
                    std::optional<Ent::Gen2::DiveAttackGD>{}:
                    std::optional<Ent::Gen2::DiveAttackGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::DiveAttackGD Component::setDiveAttackGD()
        {
            return Ent::Gen2::DiveAttackGD(getProperty().setUnionType("DiveAttackGD"));
        }
        inline std::optional<Ent::Gen2::DummyComponentGD> Component::DummyComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "DummyComponentGD") != 0?
                    std::optional<Ent::Gen2::DummyComponentGD>{}:
                    std::optional<Ent::Gen2::DummyComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::DummyComponentGD Component::setDummyComponentGD()
        {
            return Ent::Gen2::DummyComponentGD(getProperty().setUnionType("DummyComponentGD"));
        }
        inline std::optional<Ent::Gen2::EnergyCrookGD> Component::EnergyCrookGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EnergyCrookGD") != 0?
                    std::optional<Ent::Gen2::EnergyCrookGD>{}:
                    std::optional<Ent::Gen2::EnergyCrookGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EnergyCrookGD Component::setEnergyCrookGD()
        {
            return Ent::Gen2::EnergyCrookGD(getProperty().setUnionType("EnergyCrookGD"));
        }
        inline std::optional<Ent::Gen2::EnergyDrainGD> Component::EnergyDrainGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EnergyDrainGD") != 0?
                    std::optional<Ent::Gen2::EnergyDrainGD>{}:
                    std::optional<Ent::Gen2::EnergyDrainGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EnergyDrainGD Component::setEnergyDrainGD()
        {
            return Ent::Gen2::EnergyDrainGD(getProperty().setUnionType("EnergyDrainGD"));
        }
        inline std::optional<Ent::Gen2::EnergyNetworkListenerGD> Component::EnergyNetworkListenerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EnergyNetworkListenerGD") != 0?
                    std::optional<Ent::Gen2::EnergyNetworkListenerGD>{}:
                    std::optional<Ent::Gen2::EnergyNetworkListenerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EnergyNetworkListenerGD Component::setEnergyNetworkListenerGD()
        {
            return Ent::Gen2::EnergyNetworkListenerGD(getProperty().setUnionType("EnergyNetworkListenerGD"));
        }
        inline std::optional<Ent::Gen2::EnergyPoolGD> Component::EnergyPoolGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EnergyPoolGD") != 0?
                    std::optional<Ent::Gen2::EnergyPoolGD>{}:
                    std::optional<Ent::Gen2::EnergyPoolGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EnergyPoolGD Component::setEnergyPoolGD()
        {
            return Ent::Gen2::EnergyPoolGD(getProperty().setUnionType("EnergyPoolGD"));
        }
        inline std::optional<Ent::Gen2::EnergySideSwitcherGD> Component::EnergySideSwitcherGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EnergySideSwitcherGD") != 0?
                    std::optional<Ent::Gen2::EnergySideSwitcherGD>{}:
                    std::optional<Ent::Gen2::EnergySideSwitcherGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EnergySideSwitcherGD Component::setEnergySideSwitcherGD()
        {
            return Ent::Gen2::EnergySideSwitcherGD(getProperty().setUnionType("EnergySideSwitcherGD"));
        }
        inline std::optional<Ent::Gen2::EnergySpoutGD> Component::EnergySpoutGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EnergySpoutGD") != 0?
                    std::optional<Ent::Gen2::EnergySpoutGD>{}:
                    std::optional<Ent::Gen2::EnergySpoutGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EnergySpoutGD Component::setEnergySpoutGD()
        {
            return Ent::Gen2::EnergySpoutGD(getProperty().setUnionType("EnergySpoutGD"));
        }
        inline std::optional<Ent::Gen2::EnvStampGD> Component::EnvStampGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EnvStampGD") != 0?
                    std::optional<Ent::Gen2::EnvStampGD>{}:
                    std::optional<Ent::Gen2::EnvStampGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EnvStampGD Component::setEnvStampGD()
        {
            return Ent::Gen2::EnvStampGD(getProperty().setUnionType("EnvStampGD"));
        }
        inline std::optional<Ent::Gen2::EventHandlerGD> Component::EventHandlerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EventHandlerGD") != 0?
                    std::optional<Ent::Gen2::EventHandlerGD>{}:
                    std::optional<Ent::Gen2::EventHandlerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EventHandlerGD Component::setEventHandlerGD()
        {
            return Ent::Gen2::EventHandlerGD(getProperty().setUnionType("EventHandlerGD"));
        }
        inline std::optional<Ent::Gen2::EventTriggerGD> Component::EventTriggerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "EventTriggerGD") != 0?
                    std::optional<Ent::Gen2::EventTriggerGD>{}:
                    std::optional<Ent::Gen2::EventTriggerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::EventTriggerGD Component::setEventTriggerGD()
        {
            return Ent::Gen2::EventTriggerGD(getProperty().setUnionType("EventTriggerGD"));
        }
        inline std::optional<Ent::Gen2::FightDistanceTriggerGD> Component::FightDistanceTriggerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "FightDistanceTriggerGD") != 0?
                    std::optional<Ent::Gen2::FightDistanceTriggerGD>{}:
                    std::optional<Ent::Gen2::FightDistanceTriggerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FightDistanceTriggerGD Component::setFightDistanceTriggerGD()
        {
            return Ent::Gen2::FightDistanceTriggerGD(getProperty().setUnionType("FightDistanceTriggerGD"));
        }
        inline std::optional<Ent::Gen2::FireSensorGD> Component::FireSensorGD()
        {
            return strcmp(
                getProperty().getUnionType(), "FireSensorGD") != 0?
                    std::optional<Ent::Gen2::FireSensorGD>{}:
                    std::optional<Ent::Gen2::FireSensorGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FireSensorGD Component::setFireSensorGD()
        {
            return Ent::Gen2::FireSensorGD(getProperty().setUnionType("FireSensorGD"));
        }
        inline std::optional<Ent::Gen2::FluidFXEntitySpawnerGD> Component::FluidFXEntitySpawnerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "FluidFXEntitySpawnerGD") != 0?
                    std::optional<Ent::Gen2::FluidFXEntitySpawnerGD>{}:
                    std::optional<Ent::Gen2::FluidFXEntitySpawnerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FluidFXEntitySpawnerGD Component::setFluidFXEntitySpawnerGD()
        {
            return Ent::Gen2::FluidFXEntitySpawnerGD(getProperty().setUnionType("FluidFXEntitySpawnerGD"));
        }
        inline std::optional<Ent::Gen2::FluidGD> Component::FluidGD()
        {
            return strcmp(
                getProperty().getUnionType(), "FluidGD") != 0?
                    std::optional<Ent::Gen2::FluidGD>{}:
                    std::optional<Ent::Gen2::FluidGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FluidGD Component::setFluidGD()
        {
            return Ent::Gen2::FluidGD(getProperty().setUnionType("FluidGD"));
        }
        inline std::optional<Ent::Gen2::FluidViewGD> Component::FluidViewGD()
        {
            return strcmp(
                getProperty().getUnionType(), "FluidViewGD") != 0?
                    std::optional<Ent::Gen2::FluidViewGD>{}:
                    std::optional<Ent::Gen2::FluidViewGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FluidViewGD Component::setFluidViewGD()
        {
            return Ent::Gen2::FluidViewGD(getProperty().setUnionType("FluidViewGD"));
        }
        inline std::optional<Ent::Gen2::FluidVolumeComponentGD> Component::FluidVolumeComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "FluidVolumeComponentGD") != 0?
                    std::optional<Ent::Gen2::FluidVolumeComponentGD>{}:
                    std::optional<Ent::Gen2::FluidVolumeComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FluidVolumeComponentGD Component::setFluidVolumeComponentGD()
        {
            return Ent::Gen2::FluidVolumeComponentGD(getProperty().setUnionType("FluidVolumeComponentGD"));
        }
        inline std::optional<Ent::Gen2::FurComponentGD> Component::FurComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "FurComponentGD") != 0?
                    std::optional<Ent::Gen2::FurComponentGD>{}:
                    std::optional<Ent::Gen2::FurComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::FurComponentGD Component::setFurComponentGD()
        {
            return Ent::Gen2::FurComponentGD(getProperty().setUnionType("FurComponentGD"));
        }
        inline std::optional<Ent::Gen2::GameEffectSpawnerGD> Component::GameEffectSpawnerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "GameEffectSpawnerGD") != 0?
                    std::optional<Ent::Gen2::GameEffectSpawnerGD>{}:
                    std::optional<Ent::Gen2::GameEffectSpawnerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::GameEffectSpawnerGD Component::setGameEffectSpawnerGD()
        {
            return Ent::Gen2::GameEffectSpawnerGD(getProperty().setUnionType("GameEffectSpawnerGD"));
        }
        inline std::optional<Ent::Gen2::GraspableGD> Component::GraspableGD()
        {
            return strcmp(
                getProperty().getUnionType(), "GraspableGD") != 0?
                    std::optional<Ent::Gen2::GraspableGD>{}:
                    std::optional<Ent::Gen2::GraspableGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::GraspableGD Component::setGraspableGD()
        {
            return Ent::Gen2::GraspableGD(getProperty().setUnionType("GraspableGD"));
        }
        inline std::optional<Ent::Gen2::GrasperGD> Component::GrasperGD()
        {
            return strcmp(
                getProperty().getUnionType(), "GrasperGD") != 0?
                    std::optional<Ent::Gen2::GrasperGD>{}:
                    std::optional<Ent::Gen2::GrasperGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::GrasperGD Component::setGrasperGD()
        {
            return Ent::Gen2::GrasperGD(getProperty().setUnionType("GrasperGD"));
        }
        inline std::optional<Ent::Gen2::GroundTypeSamplerGD> Component::GroundTypeSamplerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "GroundTypeSamplerGD") != 0?
                    std::optional<Ent::Gen2::GroundTypeSamplerGD>{}:
                    std::optional<Ent::Gen2::GroundTypeSamplerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::GroundTypeSamplerGD Component::setGroundTypeSamplerGD()
        {
            return Ent::Gen2::GroundTypeSamplerGD(getProperty().setUnionType("GroundTypeSamplerGD"));
        }
        inline std::optional<Ent::Gen2::HealPumpGD> Component::HealPumpGD()
        {
            return strcmp(
                getProperty().getUnionType(), "HealPumpGD") != 0?
                    std::optional<Ent::Gen2::HealPumpGD>{}:
                    std::optional<Ent::Gen2::HealPumpGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::HealPumpGD Component::setHealPumpGD()
        {
            return Ent::Gen2::HealPumpGD(getProperty().setUnionType("HealPumpGD"));
        }
        inline std::optional<Ent::Gen2::HealTriggerGD> Component::HealTriggerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "HealTriggerGD") != 0?
                    std::optional<Ent::Gen2::HealTriggerGD>{}:
                    std::optional<Ent::Gen2::HealTriggerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::HealTriggerGD Component::setHealTriggerGD()
        {
            return Ent::Gen2::HealTriggerGD(getProperty().setUnionType("HealTriggerGD"));
        }
        inline std::optional<Ent::Gen2::HealerGD> Component::HealerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "HealerGD") != 0?
                    std::optional<Ent::Gen2::HealerGD>{}:
                    std::optional<Ent::Gen2::HealerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::HealerGD Component::setHealerGD()
        {
            return Ent::Gen2::HealerGD(getProperty().setUnionType("HealerGD"));
        }
        inline std::optional<Ent::Gen2::HealthAreaGD> Component::HealthAreaGD()
        {
            return strcmp(
                getProperty().getUnionType(), "HealthAreaGD") != 0?
                    std::optional<Ent::Gen2::HealthAreaGD>{}:
                    std::optional<Ent::Gen2::HealthAreaGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::HealthAreaGD Component::setHealthAreaGD()
        {
            return Ent::Gen2::HealthAreaGD(getProperty().setUnionType("HealthAreaGD"));
        }
        inline std::optional<Ent::Gen2::HeightMapComponentGD> Component::HeightMapComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "HeightMapComponentGD") != 0?
                    std::optional<Ent::Gen2::HeightMapComponentGD>{}:
                    std::optional<Ent::Gen2::HeightMapComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::HeightMapComponentGD Component::setHeightMapComponentGD()
        {
            return Ent::Gen2::HeightMapComponentGD(getProperty().setUnionType("HeightMapComponentGD"));
        }
        inline std::optional<Ent::Gen2::HeightObj> Component::HeightObj()
        {
            return strcmp(
                getProperty().getUnionType(), "HeightObj") != 0?
                    std::optional<Ent::Gen2::HeightObj>{}:
                    std::optional<Ent::Gen2::HeightObj>(getProperty().getUnionData());
        }
        inline Ent::Gen2::HeightObj Component::setHeightObj()
        {
            return Ent::Gen2::HeightObj(getProperty().setUnionType("HeightObj"));
        }
        inline std::optional<Ent::Gen2::HitTriggerGD> Component::HitTriggerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "HitTriggerGD") != 0?
                    std::optional<Ent::Gen2::HitTriggerGD>{}:
                    std::optional<Ent::Gen2::HitTriggerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::HitTriggerGD Component::setHitTriggerGD()
        {
            return Ent::Gen2::HitTriggerGD(getProperty().setUnionType("HitTriggerGD"));
        }
        inline std::optional<Ent::Gen2::HotspotsGD> Component::HotspotsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "HotspotsGD") != 0?
                    std::optional<Ent::Gen2::HotspotsGD>{}:
                    std::optional<Ent::Gen2::HotspotsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::HotspotsGD Component::setHotspotsGD()
        {
            return Ent::Gen2::HotspotsGD(getProperty().setUnionType("HotspotsGD"));
        }
        inline std::optional<Ent::Gen2::IncapacitateComponentGD> Component::IncapacitateComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "IncapacitateComponentGD") != 0?
                    std::optional<Ent::Gen2::IncapacitateComponentGD>{}:
                    std::optional<Ent::Gen2::IncapacitateComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::IncapacitateComponentGD Component::setIncapacitateComponentGD()
        {
            return Ent::Gen2::IncapacitateComponentGD(getProperty().setUnionType("IncapacitateComponentGD"));
        }
        inline std::optional<Ent::Gen2::InfoboardRegistererGD> Component::InfoboardRegistererGD()
        {
            return strcmp(
                getProperty().getUnionType(), "InfoboardRegistererGD") != 0?
                    std::optional<Ent::Gen2::InfoboardRegistererGD>{}:
                    std::optional<Ent::Gen2::InfoboardRegistererGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::InfoboardRegistererGD Component::setInfoboardRegistererGD()
        {
            return Ent::Gen2::InfoboardRegistererGD(getProperty().setUnionType("InfoboardRegistererGD"));
        }
        inline std::optional<Ent::Gen2::InteractableGPEGD> Component::InteractableGPEGD()
        {
            return strcmp(
                getProperty().getUnionType(), "InteractableGPEGD") != 0?
                    std::optional<Ent::Gen2::InteractableGPEGD>{}:
                    std::optional<Ent::Gen2::InteractableGPEGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::InteractableGPEGD Component::setInteractableGPEGD()
        {
            return Ent::Gen2::InteractableGPEGD(getProperty().setUnionType("InteractableGPEGD"));
        }
        inline std::optional<Ent::Gen2::InteractorGD> Component::InteractorGD()
        {
            return strcmp(
                getProperty().getUnionType(), "InteractorGD") != 0?
                    std::optional<Ent::Gen2::InteractorGD>{}:
                    std::optional<Ent::Gen2::InteractorGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::InteractorGD Component::setInteractorGD()
        {
            return Ent::Gen2::InteractorGD(getProperty().setUnionType("InteractorGD"));
        }
        inline std::optional<Ent::Gen2::InterestPointGD> Component::InterestPointGD()
        {
            return strcmp(
                getProperty().getUnionType(), "InterestPointGD") != 0?
                    std::optional<Ent::Gen2::InterestPointGD>{}:
                    std::optional<Ent::Gen2::InterestPointGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::InterestPointGD Component::setInterestPointGD()
        {
            return Ent::Gen2::InterestPointGD(getProperty().setUnionType("InterestPointGD"));
        }
        inline std::optional<Ent::Gen2::InventoryGD> Component::InventoryGD()
        {
            return strcmp(
                getProperty().getUnionType(), "InventoryGD") != 0?
                    std::optional<Ent::Gen2::InventoryGD>{}:
                    std::optional<Ent::Gen2::InventoryGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::InventoryGD Component::setInventoryGD()
        {
            return Ent::Gen2::InventoryGD(getProperty().setUnionType("InventoryGD"));
        }
        inline std::optional<Ent::Gen2::ItemHolderGD> Component::ItemHolderGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ItemHolderGD") != 0?
                    std::optional<Ent::Gen2::ItemHolderGD>{}:
                    std::optional<Ent::Gen2::ItemHolderGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ItemHolderGD Component::setItemHolderGD()
        {
            return Ent::Gen2::ItemHolderGD(getProperty().setUnionType("ItemHolderGD"));
        }
        inline std::optional<Ent::Gen2::LDPrimitive> Component::LDPrimitive()
        {
            return strcmp(
                getProperty().getUnionType(), "LDPrimitive") != 0?
                    std::optional<Ent::Gen2::LDPrimitive>{}:
                    std::optional<Ent::Gen2::LDPrimitive>(getProperty().getUnionData());
        }
        inline Ent::Gen2::LDPrimitive Component::setLDPrimitive()
        {
            return Ent::Gen2::LDPrimitive(getProperty().setUnionType("LDPrimitive"));
        }
        inline std::optional<Ent::Gen2::LifeComponentGD> Component::LifeComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "LifeComponentGD") != 0?
                    std::optional<Ent::Gen2::LifeComponentGD>{}:
                    std::optional<Ent::Gen2::LifeComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::LifeComponentGD Component::setLifeComponentGD()
        {
            return Ent::Gen2::LifeComponentGD(getProperty().setUnionType("LifeComponentGD"));
        }
        inline std::optional<Ent::Gen2::LightComponentGD> Component::LightComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "LightComponentGD") != 0?
                    std::optional<Ent::Gen2::LightComponentGD>{}:
                    std::optional<Ent::Gen2::LightComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::LightComponentGD Component::setLightComponentGD()
        {
            return Ent::Gen2::LightComponentGD(getProperty().setUnionType("LightComponentGD"));
        }
        inline std::optional<Ent::Gen2::Mesh> Component::Mesh()
        {
            return strcmp(
                getProperty().getUnionType(), "Mesh") != 0?
                    std::optional<Ent::Gen2::Mesh>{}:
                    std::optional<Ent::Gen2::Mesh>(getProperty().getUnionData());
        }
        inline Ent::Gen2::Mesh Component::setMesh()
        {
            return Ent::Gen2::Mesh(getProperty().setUnionType("Mesh"));
        }
        inline std::optional<Ent::Gen2::MeshNavigationInfosGD> Component::MeshNavigationInfosGD()
        {
            return strcmp(
                getProperty().getUnionType(), "MeshNavigationInfosGD") != 0?
                    std::optional<Ent::Gen2::MeshNavigationInfosGD>{}:
                    std::optional<Ent::Gen2::MeshNavigationInfosGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::MeshNavigationInfosGD Component::setMeshNavigationInfosGD()
        {
            return Ent::Gen2::MeshNavigationInfosGD(getProperty().setUnionType("MeshNavigationInfosGD"));
        }
        inline std::optional<Ent::Gen2::MissionHolderGD> Component::MissionHolderGD()
        {
            return strcmp(
                getProperty().getUnionType(), "MissionHolderGD") != 0?
                    std::optional<Ent::Gen2::MissionHolderGD>{}:
                    std::optional<Ent::Gen2::MissionHolderGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::MissionHolderGD Component::setMissionHolderGD()
        {
            return Ent::Gen2::MissionHolderGD(getProperty().setUnionType("MissionHolderGD"));
        }
        inline std::optional<Ent::Gen2::MountIKControllerGD> Component::MountIKControllerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "MountIKControllerGD") != 0?
                    std::optional<Ent::Gen2::MountIKControllerGD>{}:
                    std::optional<Ent::Gen2::MountIKControllerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::MountIKControllerGD Component::setMountIKControllerGD()
        {
            return Ent::Gen2::MountIKControllerGD(getProperty().setUnionType("MountIKControllerGD"));
        }
        inline std::optional<Ent::Gen2::MountableGD> Component::MountableGD()
        {
            return strcmp(
                getProperty().getUnionType(), "MountableGD") != 0?
                    std::optional<Ent::Gen2::MountableGD>{}:
                    std::optional<Ent::Gen2::MountableGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::MountableGD Component::setMountableGD()
        {
            return Ent::Gen2::MountableGD(getProperty().setUnionType("MountableGD"));
        }
        inline std::optional<Ent::Gen2::MounterGD> Component::MounterGD()
        {
            return strcmp(
                getProperty().getUnionType(), "MounterGD") != 0?
                    std::optional<Ent::Gen2::MounterGD>{}:
                    std::optional<Ent::Gen2::MounterGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::MounterGD Component::setMounterGD()
        {
            return Ent::Gen2::MounterGD(getProperty().setUnionType("MounterGD"));
        }
        inline std::optional<Ent::Gen2::MultiThumbnail> Component::MultiThumbnail()
        {
            return strcmp(
                getProperty().getUnionType(), "MultiThumbnail") != 0?
                    std::optional<Ent::Gen2::MultiThumbnail>{}:
                    std::optional<Ent::Gen2::MultiThumbnail>(getProperty().getUnionData());
        }
        inline Ent::Gen2::MultiThumbnail Component::setMultiThumbnail()
        {
            return Ent::Gen2::MultiThumbnail(getProperty().setUnionType("MultiThumbnail"));
        }
        inline std::optional<Ent::Gen2::NavMeshActivatorGD> Component::NavMeshActivatorGD()
        {
            return strcmp(
                getProperty().getUnionType(), "NavMeshActivatorGD") != 0?
                    std::optional<Ent::Gen2::NavMeshActivatorGD>{}:
                    std::optional<Ent::Gen2::NavMeshActivatorGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::NavMeshActivatorGD Component::setNavMeshActivatorGD()
        {
            return Ent::Gen2::NavMeshActivatorGD(getProperty().setUnionType("NavMeshActivatorGD"));
        }
        inline std::optional<Ent::Gen2::NavMeshStamperGD> Component::NavMeshStamperGD()
        {
            return strcmp(
                getProperty().getUnionType(), "NavMeshStamperGD") != 0?
                    std::optional<Ent::Gen2::NavMeshStamperGD>{}:
                    std::optional<Ent::Gen2::NavMeshStamperGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::NavMeshStamperGD Component::setNavMeshStamperGD()
        {
            return Ent::Gen2::NavMeshStamperGD(getProperty().setUnionType("NavMeshStamperGD"));
        }
        inline std::optional<Ent::Gen2::NetGD> Component::NetGD()
        {
            return strcmp(
                getProperty().getUnionType(), "NetGD") != 0?
                    std::optional<Ent::Gen2::NetGD>{}:
                    std::optional<Ent::Gen2::NetGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::NetGD Component::setNetGD()
        {
            return Ent::Gen2::NetGD(getProperty().setUnionType("NetGD"));
        }
        inline std::optional<Ent::Gen2::NetworkLink> Component::NetworkLink()
        {
            return strcmp(
                getProperty().getUnionType(), "NetworkLink") != 0?
                    std::optional<Ent::Gen2::NetworkLink>{}:
                    std::optional<Ent::Gen2::NetworkLink>(getProperty().getUnionData());
        }
        inline Ent::Gen2::NetworkLink Component::setNetworkLink()
        {
            return Ent::Gen2::NetworkLink(getProperty().setUnionType("NetworkLink"));
        }
        inline std::optional<Ent::Gen2::NetworkNode> Component::NetworkNode()
        {
            return strcmp(
                getProperty().getUnionType(), "NetworkNode") != 0?
                    std::optional<Ent::Gen2::NetworkNode>{}:
                    std::optional<Ent::Gen2::NetworkNode>(getProperty().getUnionData());
        }
        inline Ent::Gen2::NetworkNode Component::setNetworkNode()
        {
            return Ent::Gen2::NetworkNode(getProperty().setUnionType("NetworkNode"));
        }
        inline std::optional<Ent::Gen2::NotVisibleInSubscene> Component::NotVisibleInSubscene()
        {
            return strcmp(
                getProperty().getUnionType(), "NotVisibleInSubscene") != 0?
                    std::optional<Ent::Gen2::NotVisibleInSubscene>{}:
                    std::optional<Ent::Gen2::NotVisibleInSubscene>(getProperty().getUnionData());
        }
        inline Ent::Gen2::NotVisibleInSubscene Component::setNotVisibleInSubscene()
        {
            return Ent::Gen2::NotVisibleInSubscene(getProperty().setUnionType("NotVisibleInSubscene"));
        }
        inline std::optional<Ent::Gen2::OutfitGD> Component::OutfitGD()
        {
            return strcmp(
                getProperty().getUnionType(), "OutfitGD") != 0?
                    std::optional<Ent::Gen2::OutfitGD>{}:
                    std::optional<Ent::Gen2::OutfitGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::OutfitGD Component::setOutfitGD()
        {
            return Ent::Gen2::OutfitGD(getProperty().setUnionType("OutfitGD"));
        }
        inline std::optional<Ent::Gen2::OutfitWearerGD> Component::OutfitWearerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "OutfitWearerGD") != 0?
                    std::optional<Ent::Gen2::OutfitWearerGD>{}:
                    std::optional<Ent::Gen2::OutfitWearerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::OutfitWearerGD Component::setOutfitWearerGD()
        {
            return Ent::Gen2::OutfitWearerGD(getProperty().setUnionType("OutfitWearerGD"));
        }
        inline std::optional<Ent::Gen2::PathFinderGD> Component::PathFinderGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PathFinderGD") != 0?
                    std::optional<Ent::Gen2::PathFinderGD>{}:
                    std::optional<Ent::Gen2::PathFinderGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PathFinderGD Component::setPathFinderGD()
        {
            return Ent::Gen2::PathFinderGD(getProperty().setUnionType("PathFinderGD"));
        }
        inline std::optional<Ent::Gen2::PerceivableGD> Component::PerceivableGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PerceivableGD") != 0?
                    std::optional<Ent::Gen2::PerceivableGD>{}:
                    std::optional<Ent::Gen2::PerceivableGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PerceivableGD Component::setPerceivableGD()
        {
            return Ent::Gen2::PerceivableGD(getProperty().setUnionType("PerceivableGD"));
        }
        inline std::optional<Ent::Gen2::PerceiverGD> Component::PerceiverGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PerceiverGD") != 0?
                    std::optional<Ent::Gen2::PerceiverGD>{}:
                    std::optional<Ent::Gen2::PerceiverGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PerceiverGD Component::setPerceiverGD()
        {
            return Ent::Gen2::PerceiverGD(getProperty().setUnionType("PerceiverGD"));
        }
        inline std::optional<Ent::Gen2::PhysicsDataGD> Component::PhysicsDataGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PhysicsDataGD") != 0?
                    std::optional<Ent::Gen2::PhysicsDataGD>{}:
                    std::optional<Ent::Gen2::PhysicsDataGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PhysicsDataGD Component::setPhysicsDataGD()
        {
            return Ent::Gen2::PhysicsDataGD(getProperty().setUnionType("PhysicsDataGD"));
        }
        inline std::optional<Ent::Gen2::PhysicsGD> Component::PhysicsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PhysicsGD") != 0?
                    std::optional<Ent::Gen2::PhysicsGD>{}:
                    std::optional<Ent::Gen2::PhysicsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PhysicsGD Component::setPhysicsGD()
        {
            return Ent::Gen2::PhysicsGD(getProperty().setUnionType("PhysicsGD"));
        }
        inline std::optional<Ent::Gen2::PhysicsImpactMakerGD> Component::PhysicsImpactMakerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PhysicsImpactMakerGD") != 0?
                    std::optional<Ent::Gen2::PhysicsImpactMakerGD>{}:
                    std::optional<Ent::Gen2::PhysicsImpactMakerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PhysicsImpactMakerGD Component::setPhysicsImpactMakerGD()
        {
            return Ent::Gen2::PhysicsImpactMakerGD(getProperty().setUnionType("PhysicsImpactMakerGD"));
        }
        inline std::optional<Ent::Gen2::PhysicsMeshDeformerGD> Component::PhysicsMeshDeformerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PhysicsMeshDeformerGD") != 0?
                    std::optional<Ent::Gen2::PhysicsMeshDeformerGD>{}:
                    std::optional<Ent::Gen2::PhysicsMeshDeformerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PhysicsMeshDeformerGD Component::setPhysicsMeshDeformerGD()
        {
            return Ent::Gen2::PhysicsMeshDeformerGD(getProperty().setUnionType("PhysicsMeshDeformerGD"));
        }
        inline std::optional<Ent::Gen2::PhysicsMeshProviderGD> Component::PhysicsMeshProviderGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PhysicsMeshProviderGD") != 0?
                    std::optional<Ent::Gen2::PhysicsMeshProviderGD>{}:
                    std::optional<Ent::Gen2::PhysicsMeshProviderGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PhysicsMeshProviderGD Component::setPhysicsMeshProviderGD()
        {
            return Ent::Gen2::PhysicsMeshProviderGD(getProperty().setUnionType("PhysicsMeshProviderGD"));
        }
        inline std::optional<Ent::Gen2::PhysicsTriggerGD> Component::PhysicsTriggerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PhysicsTriggerGD") != 0?
                    std::optional<Ent::Gen2::PhysicsTriggerGD>{}:
                    std::optional<Ent::Gen2::PhysicsTriggerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PhysicsTriggerGD Component::setPhysicsTriggerGD()
        {
            return Ent::Gen2::PhysicsTriggerGD(getProperty().setUnionType("PhysicsTriggerGD"));
        }
        inline std::optional<Ent::Gen2::PickableComponentGD> Component::PickableComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PickableComponentGD") != 0?
                    std::optional<Ent::Gen2::PickableComponentGD>{}:
                    std::optional<Ent::Gen2::PickableComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PickableComponentGD Component::setPickableComponentGD()
        {
            return Ent::Gen2::PickableComponentGD(getProperty().setUnionType("PickableComponentGD"));
        }
        inline std::optional<Ent::Gen2::PickableDistributorComponentGD> Component::PickableDistributorComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PickableDistributorComponentGD") != 0?
                    std::optional<Ent::Gen2::PickableDistributorComponentGD>{}:
                    std::optional<Ent::Gen2::PickableDistributorComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PickableDistributorComponentGD Component::setPickableDistributorComponentGD()
        {
            return Ent::Gen2::PickableDistributorComponentGD(getProperty().setUnionType("PickableDistributorComponentGD"));
        }
        inline std::optional<Ent::Gen2::PlayerComponentGD> Component::PlayerComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "PlayerComponentGD") != 0?
                    std::optional<Ent::Gen2::PlayerComponentGD>{}:
                    std::optional<Ent::Gen2::PlayerComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::PlayerComponentGD Component::setPlayerComponentGD()
        {
            return Ent::Gen2::PlayerComponentGD(getProperty().setUnionType("PlayerComponentGD"));
        }
        inline std::optional<Ent::Gen2::ProjectileGD> Component::ProjectileGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ProjectileGD") != 0?
                    std::optional<Ent::Gen2::ProjectileGD>{}:
                    std::optional<Ent::Gen2::ProjectileGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ProjectileGD Component::setProjectileGD()
        {
            return Ent::Gen2::ProjectileGD(getProperty().setUnionType("ProjectileGD"));
        }
        inline std::optional<Ent::Gen2::ProjectileShooterGD> Component::ProjectileShooterGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ProjectileShooterGD") != 0?
                    std::optional<Ent::Gen2::ProjectileShooterGD>{}:
                    std::optional<Ent::Gen2::ProjectileShooterGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ProjectileShooterGD Component::setProjectileShooterGD()
        {
            return Ent::Gen2::ProjectileShooterGD(getProperty().setUnionType("ProjectileShooterGD"));
        }
        inline std::optional<Ent::Gen2::ProtoComponentGD> Component::ProtoComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ProtoComponentGD") != 0?
                    std::optional<Ent::Gen2::ProtoComponentGD>{}:
                    std::optional<Ent::Gen2::ProtoComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ProtoComponentGD Component::setProtoComponentGD()
        {
            return Ent::Gen2::ProtoComponentGD(getProperty().setUnionType("ProtoComponentGD"));
        }
        inline std::optional<Ent::Gen2::QuickCreatureSwitchGD> Component::QuickCreatureSwitchGD()
        {
            return strcmp(
                getProperty().getUnionType(), "QuickCreatureSwitchGD") != 0?
                    std::optional<Ent::Gen2::QuickCreatureSwitchGD>{}:
                    std::optional<Ent::Gen2::QuickCreatureSwitchGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::QuickCreatureSwitchGD Component::setQuickCreatureSwitchGD()
        {
            return Ent::Gen2::QuickCreatureSwitchGD(getProperty().setUnionType("QuickCreatureSwitchGD"));
        }
        inline std::optional<Ent::Gen2::RagdollGD> Component::RagdollGD()
        {
            return strcmp(
                getProperty().getUnionType(), "RagdollGD") != 0?
                    std::optional<Ent::Gen2::RagdollGD>{}:
                    std::optional<Ent::Gen2::RagdollGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::RagdollGD Component::setRagdollGD()
        {
            return Ent::Gen2::RagdollGD(getProperty().setUnionType("RagdollGD"));
        }
        inline std::optional<Ent::Gen2::RegenSwitcherGD> Component::RegenSwitcherGD()
        {
            return strcmp(
                getProperty().getUnionType(), "RegenSwitcherGD") != 0?
                    std::optional<Ent::Gen2::RegenSwitcherGD>{}:
                    std::optional<Ent::Gen2::RegenSwitcherGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::RegenSwitcherGD Component::setRegenSwitcherGD()
        {
            return Ent::Gen2::RegenSwitcherGD(getProperty().setUnionType("RegenSwitcherGD"));
        }
        inline std::optional<Ent::Gen2::RegenerableVegetationGD> Component::RegenerableVegetationGD()
        {
            return strcmp(
                getProperty().getUnionType(), "RegenerableVegetationGD") != 0?
                    std::optional<Ent::Gen2::RegenerableVegetationGD>{}:
                    std::optional<Ent::Gen2::RegenerableVegetationGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::RegenerableVegetationGD Component::setRegenerableVegetationGD()
        {
            return Ent::Gen2::RegenerableVegetationGD(getProperty().setUnionType("RegenerableVegetationGD"));
        }
        inline std::optional<Ent::Gen2::RespawnPlaceGD> Component::RespawnPlaceGD()
        {
            return strcmp(
                getProperty().getUnionType(), "RespawnPlaceGD") != 0?
                    std::optional<Ent::Gen2::RespawnPlaceGD>{}:
                    std::optional<Ent::Gen2::RespawnPlaceGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::RespawnPlaceGD Component::setRespawnPlaceGD()
        {
            return Ent::Gen2::RespawnPlaceGD(getProperty().setUnionType("RespawnPlaceGD"));
        }
        inline std::optional<Ent::Gen2::RespawnabilityGD> Component::RespawnabilityGD()
        {
            return strcmp(
                getProperty().getUnionType(), "RespawnabilityGD") != 0?
                    std::optional<Ent::Gen2::RespawnabilityGD>{}:
                    std::optional<Ent::Gen2::RespawnabilityGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::RespawnabilityGD Component::setRespawnabilityGD()
        {
            return Ent::Gen2::RespawnabilityGD(getProperty().setUnionType("RespawnabilityGD"));
        }
        inline std::optional<Ent::Gen2::ReviveEnergyGD> Component::ReviveEnergyGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ReviveEnergyGD") != 0?
                    std::optional<Ent::Gen2::ReviveEnergyGD>{}:
                    std::optional<Ent::Gen2::ReviveEnergyGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ReviveEnergyGD Component::setReviveEnergyGD()
        {
            return Ent::Gen2::ReviveEnergyGD(getProperty().setUnionType("ReviveEnergyGD"));
        }
        inline std::optional<Ent::Gen2::ScriptComponentGD> Component::ScriptComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ScriptComponentGD") != 0?
                    std::optional<Ent::Gen2::ScriptComponentGD>{}:
                    std::optional<Ent::Gen2::ScriptComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ScriptComponentGD Component::setScriptComponentGD()
        {
            return Ent::Gen2::ScriptComponentGD(getProperty().setUnionType("ScriptComponentGD"));
        }
        inline std::optional<Ent::Gen2::SeedPatch> Component::SeedPatch()
        {
            return strcmp(
                getProperty().getUnionType(), "SeedPatch") != 0?
                    std::optional<Ent::Gen2::SeedPatch>{}:
                    std::optional<Ent::Gen2::SeedPatch>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SeedPatch Component::setSeedPatch()
        {
            return Ent::Gen2::SeedPatch(getProperty().setUnionType("SeedPatch"));
        }
        inline std::optional<Ent::Gen2::SensorControllerGD> Component::SensorControllerGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SensorControllerGD") != 0?
                    std::optional<Ent::Gen2::SensorControllerGD>{}:
                    std::optional<Ent::Gen2::SensorControllerGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SensorControllerGD Component::setSensorControllerGD()
        {
            return Ent::Gen2::SensorControllerGD(getProperty().setUnionType("SensorControllerGD"));
        }
        inline std::optional<Ent::Gen2::SensorVoxelsGD> Component::SensorVoxelsGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SensorVoxelsGD") != 0?
                    std::optional<Ent::Gen2::SensorVoxelsGD>{}:
                    std::optional<Ent::Gen2::SensorVoxelsGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SensorVoxelsGD Component::setSensorVoxelsGD()
        {
            return Ent::Gen2::SensorVoxelsGD(getProperty().setUnionType("SensorVoxelsGD"));
        }
        inline std::optional<Ent::Gen2::ShamanItemGD> Component::ShamanItemGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ShamanItemGD") != 0?
                    std::optional<Ent::Gen2::ShamanItemGD>{}:
                    std::optional<Ent::Gen2::ShamanItemGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ShamanItemGD Component::setShamanItemGD()
        {
            return Ent::Gen2::ShamanItemGD(getProperty().setUnionType("ShamanItemGD"));
        }
        inline std::optional<Ent::Gen2::ShamanVisionGD> Component::ShamanVisionGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ShamanVisionGD") != 0?
                    std::optional<Ent::Gen2::ShamanVisionGD>{}:
                    std::optional<Ent::Gen2::ShamanVisionGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ShamanVisionGD Component::setShamanVisionGD()
        {
            return Ent::Gen2::ShamanVisionGD(getProperty().setUnionType("ShamanVisionGD"));
        }
        inline std::optional<Ent::Gen2::ShapeshiftStatueGD> Component::ShapeshiftStatueGD()
        {
            return strcmp(
                getProperty().getUnionType(), "ShapeshiftStatueGD") != 0?
                    std::optional<Ent::Gen2::ShapeshiftStatueGD>{}:
                    std::optional<Ent::Gen2::ShapeshiftStatueGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::ShapeshiftStatueGD Component::setShapeshiftStatueGD()
        {
            return Ent::Gen2::ShapeshiftStatueGD(getProperty().setUnionType("ShapeshiftStatueGD"));
        }
        inline std::optional<Ent::Gen2::SideMapGateGD> Component::SideMapGateGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SideMapGateGD") != 0?
                    std::optional<Ent::Gen2::SideMapGateGD>{}:
                    std::optional<Ent::Gen2::SideMapGateGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SideMapGateGD Component::setSideMapGateGD()
        {
            return Ent::Gen2::SideMapGateGD(getProperty().setUnionType("SideMapGateGD"));
        }
        inline std::optional<Ent::Gen2::SmoothScaleComponentGD> Component::SmoothScaleComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SmoothScaleComponentGD") != 0?
                    std::optional<Ent::Gen2::SmoothScaleComponentGD>{}:
                    std::optional<Ent::Gen2::SmoothScaleComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SmoothScaleComponentGD Component::setSmoothScaleComponentGD()
        {
            return Ent::Gen2::SmoothScaleComponentGD(getProperty().setUnionType("SmoothScaleComponentGD"));
        }
        inline std::optional<Ent::Gen2::SoftCollisionGD> Component::SoftCollisionGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SoftCollisionGD") != 0?
                    std::optional<Ent::Gen2::SoftCollisionGD>{}:
                    std::optional<Ent::Gen2::SoftCollisionGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SoftCollisionGD Component::setSoftCollisionGD()
        {
            return Ent::Gen2::SoftCollisionGD(getProperty().setUnionType("SoftCollisionGD"));
        }
        inline std::optional<Ent::Gen2::SoulRespawnOpportunityGD> Component::SoulRespawnOpportunityGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SoulRespawnOpportunityGD") != 0?
                    std::optional<Ent::Gen2::SoulRespawnOpportunityGD>{}:
                    std::optional<Ent::Gen2::SoulRespawnOpportunityGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SoulRespawnOpportunityGD Component::setSoulRespawnOpportunityGD()
        {
            return Ent::Gen2::SoulRespawnOpportunityGD(getProperty().setUnionType("SoulRespawnOpportunityGD"));
        }
        inline std::optional<Ent::Gen2::SoundAreaGD> Component::SoundAreaGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SoundAreaGD") != 0?
                    std::optional<Ent::Gen2::SoundAreaGD>{}:
                    std::optional<Ent::Gen2::SoundAreaGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SoundAreaGD Component::setSoundAreaGD()
        {
            return Ent::Gen2::SoundAreaGD(getProperty().setUnionType("SoundAreaGD"));
        }
        inline std::optional<Ent::Gen2::SoundEmitterGD> Component::SoundEmitterGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SoundEmitterGD") != 0?
                    std::optional<Ent::Gen2::SoundEmitterGD>{}:
                    std::optional<Ent::Gen2::SoundEmitterGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SoundEmitterGD Component::setSoundEmitterGD()
        {
            return Ent::Gen2::SoundEmitterGD(getProperty().setUnionType("SoundEmitterGD"));
        }
        inline std::optional<Ent::Gen2::SoundOpportunityComponentGD> Component::SoundOpportunityComponentGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SoundOpportunityComponentGD") != 0?
                    std::optional<Ent::Gen2::SoundOpportunityComponentGD>{}:
                    std::optional<Ent::Gen2::SoundOpportunityComponentGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SoundOpportunityComponentGD Component::setSoundOpportunityComponentGD()
        {
            return Ent::Gen2::SoundOpportunityComponentGD(getProperty().setUnionType("SoundOpportunityComponentGD"));
        }
        inline std::optional<Ent::Gen2::SpiritAnimalGD> Component::SpiritAnimalGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SpiritAnimalGD") != 0?
                    std::optional<Ent::Gen2::SpiritAnimalGD>{}:
                    std::optional<Ent::Gen2::SpiritAnimalGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SpiritAnimalGD Component::setSpiritAnimalGD()
        {
            return Ent::Gen2::SpiritAnimalGD(getProperty().setUnionType("SpiritAnimalGD"));
        }
        inline std::optional<Ent::Gen2::SpiritAnimalShrineGD> Component::SpiritAnimalShrineGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SpiritAnimalShrineGD") != 0?
                    std::optional<Ent::Gen2::SpiritAnimalShrineGD>{}:
                    std::optional<Ent::Gen2::SpiritAnimalShrineGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SpiritAnimalShrineGD Component::setSpiritAnimalShrineGD()
        {
            return Ent::Gen2::SpiritAnimalShrineGD(getProperty().setUnionType("SpiritAnimalShrineGD"));
        }
        inline std::optional<Ent::Gen2::SpiritAnimalsHolderGD> Component::SpiritAnimalsHolderGD()
        {
            return strcmp(
                getProperty().getUnionType(), "SpiritAnimalsHolderGD") != 0?
                    std::optional<Ent::Gen2::SpiritAnimalsHolderGD>{}:
                    std::optional<Ent::Gen2::SpiritAnimalsHolderGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SpiritAnimalsHolderGD Component::setSpiritAnimalsHolderGD()
        {
            return Ent::Gen2::SpiritAnimalsHolderGD(getProperty().setUnionType("SpiritAnimalsHolderGD"));
        }
        inline std::optional<Ent::Gen2::StaffVertebrasGD> Component::StaffVertebrasGD()
        {
            return strcmp(
                getProperty().getUnionType(), "StaffVertebrasGD") != 0?
                    std::optional<Ent::Gen2::StaffVertebrasGD>{}:
                    std::optional<Ent::Gen2::StaffVertebrasGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::StaffVertebrasGD Component::setStaffVertebrasGD()
        {
            return Ent::Gen2::StaffVertebrasGD(getProperty().setUnionType("StaffVertebrasGD"));
        }
        inline std::optional<Ent::Gen2::StaticObjectGD> Component::StaticObjectGD()
        {
            return strcmp(
                getProperty().getUnionType(), "StaticObjectGD") != 0?
                    std::optional<Ent::Gen2::StaticObjectGD>{}:
                    std::optional<Ent::Gen2::StaticObjectGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::StaticObjectGD Component::setStaticObjectGD()
        {
            return Ent::Gen2::StaticObjectGD(getProperty().setUnionType("StaticObjectGD"));
        }
        inline std::optional<Ent::Gen2::StickToTerrain> Component::StickToTerrain()
        {
            return strcmp(
                getProperty().getUnionType(), "StickToTerrain") != 0?
                    std::optional<Ent::Gen2::StickToTerrain>{}:
                    std::optional<Ent::Gen2::StickToTerrain>(getProperty().getUnionData());
        }
        inline Ent::Gen2::StickToTerrain Component::setStickToTerrain()
        {
            return Ent::Gen2::StickToTerrain(getProperty().setUnionType("StickToTerrain"));
        }
        inline std::optional<Ent::Gen2::StreamableUnitGD> Component::StreamableUnitGD()
        {
            return strcmp(
                getProperty().getUnionType(), "StreamableUnitGD") != 0?
                    std::optional<Ent::Gen2::StreamableUnitGD>{}:
                    std::optional<Ent::Gen2::StreamableUnitGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::StreamableUnitGD Component::setStreamableUnitGD()
        {
            return Ent::Gen2::StreamableUnitGD(getProperty().setUnionType("StreamableUnitGD"));
        }
        inline std::optional<Ent::Gen2::StreamingLocatorGD> Component::StreamingLocatorGD()
        {
            return strcmp(
                getProperty().getUnionType(), "StreamingLocatorGD") != 0?
                    std::optional<Ent::Gen2::StreamingLocatorGD>{}:
                    std::optional<Ent::Gen2::StreamingLocatorGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::StreamingLocatorGD Component::setStreamingLocatorGD()
        {
            return Ent::Gen2::StreamingLocatorGD(getProperty().setUnionType("StreamingLocatorGD"));
        }
        inline std::optional<Ent::Gen2::SubScene> Component::SubScene()
        {
            return strcmp(
                getProperty().getUnionType(), "SubScene") != 0?
                    std::optional<Ent::Gen2::SubScene>{}:
                    std::optional<Ent::Gen2::SubScene>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SubScene Component::setSubScene()
        {
            return Ent::Gen2::SubScene(getProperty().setUnionType("SubScene"));
        }
        inline std::optional<Ent::Gen2::SystemicCreature> Component::SystemicCreature()
        {
            return strcmp(
                getProperty().getUnionType(), "SystemicCreature") != 0?
                    std::optional<Ent::Gen2::SystemicCreature>{}:
                    std::optional<Ent::Gen2::SystemicCreature>(getProperty().getUnionData());
        }
        inline Ent::Gen2::SystemicCreature Component::setSystemicCreature()
        {
            return Ent::Gen2::SystemicCreature(getProperty().setUnionType("SystemicCreature"));
        }
        inline std::optional<Ent::Gen2::TeamGD> Component::TeamGD()
        {
            return strcmp(
                getProperty().getUnionType(), "TeamGD") != 0?
                    std::optional<Ent::Gen2::TeamGD>{}:
                    std::optional<Ent::Gen2::TeamGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TeamGD Component::setTeamGD()
        {
            return Ent::Gen2::TeamGD(getProperty().setUnionType("TeamGD"));
        }
        inline std::optional<Ent::Gen2::TerrainGD> Component::TerrainGD()
        {
            return strcmp(
                getProperty().getUnionType(), "TerrainGD") != 0?
                    std::optional<Ent::Gen2::TerrainGD>{}:
                    std::optional<Ent::Gen2::TerrainGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TerrainGD Component::setTerrainGD()
        {
            return Ent::Gen2::TerrainGD(getProperty().setUnionType("TerrainGD"));
        }
        inline std::optional<Ent::Gen2::TerrainSurfaceObject> Component::TerrainSurfaceObject()
        {
            return strcmp(
                getProperty().getUnionType(), "TerrainSurfaceObject") != 0?
                    std::optional<Ent::Gen2::TerrainSurfaceObject>{}:
                    std::optional<Ent::Gen2::TerrainSurfaceObject>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TerrainSurfaceObject Component::setTerrainSurfaceObject()
        {
            return Ent::Gen2::TerrainSurfaceObject(getProperty().setUnionType("TerrainSurfaceObject"));
        }
        inline std::optional<Ent::Gen2::TestArrays> Component::TestArrays()
        {
            return strcmp(
                getProperty().getUnionType(), "TestArrays") != 0?
                    std::optional<Ent::Gen2::TestArrays>{}:
                    std::optional<Ent::Gen2::TestArrays>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TestArrays Component::setTestArrays()
        {
            return Ent::Gen2::TestArrays(getProperty().setUnionType("TestArrays"));
        }
        inline std::optional<Ent::Gen2::TestCreature> Component::TestCreature()
        {
            return strcmp(
                getProperty().getUnionType(), "TestCreature") != 0?
                    std::optional<Ent::Gen2::TestCreature>{}:
                    std::optional<Ent::Gen2::TestCreature>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TestCreature Component::setTestCreature()
        {
            return Ent::Gen2::TestCreature(getProperty().setUnionType("TestCreature"));
        }
        inline std::optional<Ent::Gen2::TestDefaultValues> Component::TestDefaultValues()
        {
            return strcmp(
                getProperty().getUnionType(), "TestDefaultValues") != 0?
                    std::optional<Ent::Gen2::TestDefaultValues>{}:
                    std::optional<Ent::Gen2::TestDefaultValues>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TestDefaultValues Component::setTestDefaultValues()
        {
            return Ent::Gen2::TestDefaultValues(getProperty().setUnionType("TestDefaultValues"));
        }
        inline std::optional<Ent::Gen2::TestEntityRef> Component::TestEntityRef()
        {
            return strcmp(
                getProperty().getUnionType(), "TestEntityRef") != 0?
                    std::optional<Ent::Gen2::TestEntityRef>{}:
                    std::optional<Ent::Gen2::TestEntityRef>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TestEntityRef Component::setTestEntityRef()
        {
            return Ent::Gen2::TestEntityRef(getProperty().setUnionType("TestEntityRef"));
        }
        inline std::optional<Ent::Gen2::TestSetOfObject> Component::TestSetOfObject()
        {
            return strcmp(
                getProperty().getUnionType(), "TestSetOfObject") != 0?
                    std::optional<Ent::Gen2::TestSetOfObject>{}:
                    std::optional<Ent::Gen2::TestSetOfObject>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TestSetOfObject Component::setTestSetOfObject()
        {
            return Ent::Gen2::TestSetOfObject(getProperty().setUnionType("TestSetOfObject"));
        }
        inline std::optional<Ent::Gen2::TestTagsList> Component::TestTagsList()
        {
            return strcmp(
                getProperty().getUnionType(), "TestTagsList") != 0?
                    std::optional<Ent::Gen2::TestTagsList>{}:
                    std::optional<Ent::Gen2::TestTagsList>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TestTagsList Component::setTestTagsList()
        {
            return Ent::Gen2::TestTagsList(getProperty().setUnionType("TestTagsList"));
        }
        inline std::optional<Ent::Gen2::TestUnion> Component::TestUnion()
        {
            return strcmp(
                getProperty().getUnionType(), "TestUnion") != 0?
                    std::optional<Ent::Gen2::TestUnion>{}:
                    std::optional<Ent::Gen2::TestUnion>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TestUnion Component::setTestUnion()
        {
            return Ent::Gen2::TestUnion(getProperty().setUnionType("TestUnion"));
        }
        inline std::optional<Ent::Gen2::TransformGD> Component::TransformGD()
        {
            return strcmp(
                getProperty().getUnionType(), "TransformGD") != 0?
                    std::optional<Ent::Gen2::TransformGD>{}:
                    std::optional<Ent::Gen2::TransformGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TransformGD Component::setTransformGD()
        {
            return Ent::Gen2::TransformGD(getProperty().setUnionType("TransformGD"));
        }
        inline std::optional<Ent::Gen2::TriggerEventCameraGD> Component::TriggerEventCameraGD()
        {
            return strcmp(
                getProperty().getUnionType(), "TriggerEventCameraGD") != 0?
                    std::optional<Ent::Gen2::TriggerEventCameraGD>{}:
                    std::optional<Ent::Gen2::TriggerEventCameraGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::TriggerEventCameraGD Component::setTriggerEventCameraGD()
        {
            return Ent::Gen2::TriggerEventCameraGD(getProperty().setUnionType("TriggerEventCameraGD"));
        }
        inline std::optional<Ent::Gen2::UnifiedPhysicsDataGD> Component::UnifiedPhysicsDataGD()
        {
            return strcmp(
                getProperty().getUnionType(), "UnifiedPhysicsDataGD") != 0?
                    std::optional<Ent::Gen2::UnifiedPhysicsDataGD>{}:
                    std::optional<Ent::Gen2::UnifiedPhysicsDataGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::UnifiedPhysicsDataGD Component::setUnifiedPhysicsDataGD()
        {
            return Ent::Gen2::UnifiedPhysicsDataGD(getProperty().setUnionType("UnifiedPhysicsDataGD"));
        }
        inline std::optional<Ent::Gen2::UnitTestComponent> Component::UnitTestComponent()
        {
            return strcmp(
                getProperty().getUnionType(), "UnitTestComponent") != 0?
                    std::optional<Ent::Gen2::UnitTestComponent>{}:
                    std::optional<Ent::Gen2::UnitTestComponent>(getProperty().getUnionData());
        }
        inline Ent::Gen2::UnitTestComponent Component::setUnitTestComponent()
        {
            return Ent::Gen2::UnitTestComponent(getProperty().setUnionType("UnitTestComponent"));
        }
        inline std::optional<Ent::Gen2::VelocityObstacleGD> Component::VelocityObstacleGD()
        {
            return strcmp(
                getProperty().getUnionType(), "VelocityObstacleGD") != 0?
                    std::optional<Ent::Gen2::VelocityObstacleGD>{}:
                    std::optional<Ent::Gen2::VelocityObstacleGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::VelocityObstacleGD Component::setVelocityObstacleGD()
        {
            return Ent::Gen2::VelocityObstacleGD(getProperty().setUnionType("VelocityObstacleGD"));
        }
        inline std::optional<Ent::Gen2::VisualGD> Component::VisualGD()
        {
            return strcmp(
                getProperty().getUnionType(), "VisualGD") != 0?
                    std::optional<Ent::Gen2::VisualGD>{}:
                    std::optional<Ent::Gen2::VisualGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::VisualGD Component::setVisualGD()
        {
            return Ent::Gen2::VisualGD(getProperty().setUnionType("VisualGD"));
        }
        inline std::optional<Ent::Gen2::VolumeConstraintGD> Component::VolumeConstraintGD()
        {
            return strcmp(
                getProperty().getUnionType(), "VolumeConstraintGD") != 0?
                    std::optional<Ent::Gen2::VolumeConstraintGD>{}:
                    std::optional<Ent::Gen2::VolumeConstraintGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::VolumeConstraintGD Component::setVolumeConstraintGD()
        {
            return Ent::Gen2::VolumeConstraintGD(getProperty().setUnionType("VolumeConstraintGD"));
        }
        inline std::optional<Ent::Gen2::VoxelSimulationGD> Component::VoxelSimulationGD()
        {
            return strcmp(
                getProperty().getUnionType(), "VoxelSimulationGD") != 0?
                    std::optional<Ent::Gen2::VoxelSimulationGD>{}:
                    std::optional<Ent::Gen2::VoxelSimulationGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::VoxelSimulationGD Component::setVoxelSimulationGD()
        {
            return Ent::Gen2::VoxelSimulationGD(getProperty().setUnionType("VoxelSimulationGD"));
        }
        inline std::optional<Ent::Gen2::WallRunGD> Component::WallRunGD()
        {
            return strcmp(
                getProperty().getUnionType(), "WallRunGD") != 0?
                    std::optional<Ent::Gen2::WallRunGD>{}:
                    std::optional<Ent::Gen2::WallRunGD>(getProperty().getUnionData());
        }
        inline Ent::Gen2::WallRunGD Component::setWallRunGD()
        {
            return Ent::Gen2::WallRunGD(getProperty().setUnionType("WallRunGD"));
        }
        inline std::optional<Ent::Gen2::WildObject> Component::WildObject()
        {
            return strcmp(
                getProperty().getUnionType(), "WildObject") != 0?
                    std::optional<Ent::Gen2::WildObject>{}:
                    std::optional<Ent::Gen2::WildObject>(getProperty().getUnionData());
        }
        inline Ent::Gen2::WildObject Component::setWildObject()
        {
            return Ent::Gen2::WildObject(getProperty().setUnionType("WildObject"));
        }
        // Object_Components
        inline char const* Object_Components::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::AIContextGD> Object_Components::AIContextGD()
        {
            return std::optional<Ent::Gen2::AIContextGD>(getSubNode("AIContextGD"));
        }
        inline Ent::Gen2::AIContextGD Object_Components::addAIContextGD()
        {
            return Ent::Gen2::AIContextGD(addSubNode("AIContextGD"));
        }
        inline void Object_Components::removeAIContextGD()
        {
            getProperty().eraseUnionSetItem("AIContextGD");
        }
        inline std::optional<Ent::Gen2::ActorGD> Object_Components::ActorGD()
        {
            return std::optional<Ent::Gen2::ActorGD>(getSubNode("ActorGD"));
        }
        inline Ent::Gen2::ActorGD Object_Components::addActorGD()
        {
            return Ent::Gen2::ActorGD(addSubNode("ActorGD"));
        }
        inline void Object_Components::removeActorGD()
        {
            getProperty().eraseUnionSetItem("ActorGD");
        }
        inline std::optional<Ent::Gen2::AnimationControllerGD> Object_Components::AnimationControllerGD()
        {
            return std::optional<Ent::Gen2::AnimationControllerGD>(getSubNode("AnimationControllerGD"));
        }
        inline Ent::Gen2::AnimationControllerGD Object_Components::addAnimationControllerGD()
        {
            return Ent::Gen2::AnimationControllerGD(addSubNode("AnimationControllerGD"));
        }
        inline void Object_Components::removeAnimationControllerGD()
        {
            getProperty().eraseUnionSetItem("AnimationControllerGD");
        }
        inline std::optional<Ent::Gen2::AnimationEventsGeneratorGD> Object_Components::AnimationEventsGeneratorGD()
        {
            return std::optional<Ent::Gen2::AnimationEventsGeneratorGD>(getSubNode("AnimationEventsGeneratorGD"));
        }
        inline Ent::Gen2::AnimationEventsGeneratorGD Object_Components::addAnimationEventsGeneratorGD()
        {
            return Ent::Gen2::AnimationEventsGeneratorGD(addSubNode("AnimationEventsGeneratorGD"));
        }
        inline void Object_Components::removeAnimationEventsGeneratorGD()
        {
            getProperty().eraseUnionSetItem("AnimationEventsGeneratorGD");
        }
        inline std::optional<Ent::Gen2::AnimationGenericConstraintsGD> Object_Components::AnimationGenericConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationGenericConstraintsGD>(getSubNode("AnimationGenericConstraintsGD"));
        }
        inline Ent::Gen2::AnimationGenericConstraintsGD Object_Components::addAnimationGenericConstraintsGD()
        {
            return Ent::Gen2::AnimationGenericConstraintsGD(addSubNode("AnimationGenericConstraintsGD"));
        }
        inline void Object_Components::removeAnimationGenericConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationGenericConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationHitsConstraintsGD> Object_Components::AnimationHitsConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationHitsConstraintsGD>(getSubNode("AnimationHitsConstraintsGD"));
        }
        inline Ent::Gen2::AnimationHitsConstraintsGD Object_Components::addAnimationHitsConstraintsGD()
        {
            return Ent::Gen2::AnimationHitsConstraintsGD(addSubNode("AnimationHitsConstraintsGD"));
        }
        inline void Object_Components::removeAnimationHitsConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationHitsConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationLegsConstraintsGD> Object_Components::AnimationLegsConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationLegsConstraintsGD>(getSubNode("AnimationLegsConstraintsGD"));
        }
        inline Ent::Gen2::AnimationLegsConstraintsGD Object_Components::addAnimationLegsConstraintsGD()
        {
            return Ent::Gen2::AnimationLegsConstraintsGD(addSubNode("AnimationLegsConstraintsGD"));
        }
        inline void Object_Components::removeAnimationLegsConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationLegsConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationModelGD> Object_Components::AnimationModelGD()
        {
            return std::optional<Ent::Gen2::AnimationModelGD>(getSubNode("AnimationModelGD"));
        }
        inline Ent::Gen2::AnimationModelGD Object_Components::addAnimationModelGD()
        {
            return Ent::Gen2::AnimationModelGD(addSubNode("AnimationModelGD"));
        }
        inline void Object_Components::removeAnimationModelGD()
        {
            getProperty().eraseUnionSetItem("AnimationModelGD");
        }
        inline std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD> Object_Components::AnimationPhysicsChainConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD>(getSubNode("AnimationPhysicsChainConstraintsGD"));
        }
        inline Ent::Gen2::AnimationPhysicsChainConstraintsGD Object_Components::addAnimationPhysicsChainConstraintsGD()
        {
            return Ent::Gen2::AnimationPhysicsChainConstraintsGD(addSubNode("AnimationPhysicsChainConstraintsGD"));
        }
        inline void Object_Components::removeAnimationPhysicsChainConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationPhysicsChainConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationPlaylistGD> Object_Components::AnimationPlaylistGD()
        {
            return std::optional<Ent::Gen2::AnimationPlaylistGD>(getSubNode("AnimationPlaylistGD"));
        }
        inline Ent::Gen2::AnimationPlaylistGD Object_Components::addAnimationPlaylistGD()
        {
            return Ent::Gen2::AnimationPlaylistGD(addSubNode("AnimationPlaylistGD"));
        }
        inline void Object_Components::removeAnimationPlaylistGD()
        {
            getProperty().eraseUnionSetItem("AnimationPlaylistGD");
        }
        inline std::optional<Ent::Gen2::AnimationTailConstraintsGD> Object_Components::AnimationTailConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationTailConstraintsGD>(getSubNode("AnimationTailConstraintsGD"));
        }
        inline Ent::Gen2::AnimationTailConstraintsGD Object_Components::addAnimationTailConstraintsGD()
        {
            return Ent::Gen2::AnimationTailConstraintsGD(addSubNode("AnimationTailConstraintsGD"));
        }
        inline void Object_Components::removeAnimationTailConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationTailConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationTransformDriverGD> Object_Components::AnimationTransformDriverGD()
        {
            return std::optional<Ent::Gen2::AnimationTransformDriverGD>(getSubNode("AnimationTransformDriverGD"));
        }
        inline Ent::Gen2::AnimationTransformDriverGD Object_Components::addAnimationTransformDriverGD()
        {
            return Ent::Gen2::AnimationTransformDriverGD(addSubNode("AnimationTransformDriverGD"));
        }
        inline void Object_Components::removeAnimationTransformDriverGD()
        {
            getProperty().eraseUnionSetItem("AnimationTransformDriverGD");
        }
        inline std::optional<Ent::Gen2::AnimationTreeConstraintsGD> Object_Components::AnimationTreeConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationTreeConstraintsGD>(getSubNode("AnimationTreeConstraintsGD"));
        }
        inline Ent::Gen2::AnimationTreeConstraintsGD Object_Components::addAnimationTreeConstraintsGD()
        {
            return Ent::Gen2::AnimationTreeConstraintsGD(addSubNode("AnimationTreeConstraintsGD"));
        }
        inline void Object_Components::removeAnimationTreeConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationTreeConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AssemblyGD> Object_Components::AssemblyGD()
        {
            return std::optional<Ent::Gen2::AssemblyGD>(getSubNode("AssemblyGD"));
        }
        inline Ent::Gen2::AssemblyGD Object_Components::addAssemblyGD()
        {
            return Ent::Gen2::AssemblyGD(addSubNode("AssemblyGD"));
        }
        inline void Object_Components::removeAssemblyGD()
        {
            getProperty().eraseUnionSetItem("AssemblyGD");
        }
        inline std::optional<Ent::Gen2::AttackComponentGD> Object_Components::AttackComponentGD()
        {
            return std::optional<Ent::Gen2::AttackComponentGD>(getSubNode("AttackComponentGD"));
        }
        inline Ent::Gen2::AttackComponentGD Object_Components::addAttackComponentGD()
        {
            return Ent::Gen2::AttackComponentGD(addSubNode("AttackComponentGD"));
        }
        inline void Object_Components::removeAttackComponentGD()
        {
            getProperty().eraseUnionSetItem("AttackComponentGD");
        }
        inline std::optional<Ent::Gen2::AttackTriggerGD> Object_Components::AttackTriggerGD()
        {
            return std::optional<Ent::Gen2::AttackTriggerGD>(getSubNode("AttackTriggerGD"));
        }
        inline Ent::Gen2::AttackTriggerGD Object_Components::addAttackTriggerGD()
        {
            return Ent::Gen2::AttackTriggerGD(addSubNode("AttackTriggerGD"));
        }
        inline void Object_Components::removeAttackTriggerGD()
        {
            getProperty().eraseUnionSetItem("AttackTriggerGD");
        }
        inline std::optional<Ent::Gen2::BeamTargetGD> Object_Components::BeamTargetGD()
        {
            return std::optional<Ent::Gen2::BeamTargetGD>(getSubNode("BeamTargetGD"));
        }
        inline Ent::Gen2::BeamTargetGD Object_Components::addBeamTargetGD()
        {
            return Ent::Gen2::BeamTargetGD(addSubNode("BeamTargetGD"));
        }
        inline void Object_Components::removeBeamTargetGD()
        {
            getProperty().eraseUnionSetItem("BeamTargetGD");
        }
        inline std::optional<Ent::Gen2::BittenGD> Object_Components::BittenGD()
        {
            return std::optional<Ent::Gen2::BittenGD>(getSubNode("BittenGD"));
        }
        inline Ent::Gen2::BittenGD Object_Components::addBittenGD()
        {
            return Ent::Gen2::BittenGD(addSubNode("BittenGD"));
        }
        inline void Object_Components::removeBittenGD()
        {
            getProperty().eraseUnionSetItem("BittenGD");
        }
        inline std::optional<Ent::Gen2::BoidsGD> Object_Components::BoidsGD()
        {
            return std::optional<Ent::Gen2::BoidsGD>(getSubNode("BoidsGD"));
        }
        inline Ent::Gen2::BoidsGD Object_Components::addBoidsGD()
        {
            return Ent::Gen2::BoidsGD(addSubNode("BoidsGD"));
        }
        inline void Object_Components::removeBoidsGD()
        {
            getProperty().eraseUnionSetItem("BoidsGD");
        }
        inline std::optional<Ent::Gen2::BreakableGD> Object_Components::BreakableGD()
        {
            return std::optional<Ent::Gen2::BreakableGD>(getSubNode("BreakableGD"));
        }
        inline Ent::Gen2::BreakableGD Object_Components::addBreakableGD()
        {
            return Ent::Gen2::BreakableGD(addSubNode("BreakableGD"));
        }
        inline void Object_Components::removeBreakableGD()
        {
            getProperty().eraseUnionSetItem("BreakableGD");
        }
        inline std::optional<Ent::Gen2::CameraDataGD> Object_Components::CameraDataGD()
        {
            return std::optional<Ent::Gen2::CameraDataGD>(getSubNode("CameraDataGD"));
        }
        inline Ent::Gen2::CameraDataGD Object_Components::addCameraDataGD()
        {
            return Ent::Gen2::CameraDataGD(addSubNode("CameraDataGD"));
        }
        inline void Object_Components::removeCameraDataGD()
        {
            getProperty().eraseUnionSetItem("CameraDataGD");
        }
        inline std::optional<Ent::Gen2::CameraSetterGD> Object_Components::CameraSetterGD()
        {
            return std::optional<Ent::Gen2::CameraSetterGD>(getSubNode("CameraSetterGD"));
        }
        inline Ent::Gen2::CameraSetterGD Object_Components::addCameraSetterGD()
        {
            return Ent::Gen2::CameraSetterGD(addSubNode("CameraSetterGD"));
        }
        inline void Object_Components::removeCameraSetterGD()
        {
            getProperty().eraseUnionSetItem("CameraSetterGD");
        }
        inline std::optional<Ent::Gen2::CharacterControllerGD> Object_Components::CharacterControllerGD()
        {
            return std::optional<Ent::Gen2::CharacterControllerGD>(getSubNode("CharacterControllerGD"));
        }
        inline Ent::Gen2::CharacterControllerGD Object_Components::addCharacterControllerGD()
        {
            return Ent::Gen2::CharacterControllerGD(addSubNode("CharacterControllerGD"));
        }
        inline void Object_Components::removeCharacterControllerGD()
        {
            getProperty().eraseUnionSetItem("CharacterControllerGD");
        }
        inline std::optional<Ent::Gen2::CharacterPlatformGD> Object_Components::CharacterPlatformGD()
        {
            return std::optional<Ent::Gen2::CharacterPlatformGD>(getSubNode("CharacterPlatformGD"));
        }
        inline Ent::Gen2::CharacterPlatformGD Object_Components::addCharacterPlatformGD()
        {
            return Ent::Gen2::CharacterPlatformGD(addSubNode("CharacterPlatformGD"));
        }
        inline void Object_Components::removeCharacterPlatformGD()
        {
            getProperty().eraseUnionSetItem("CharacterPlatformGD");
        }
        inline std::optional<Ent::Gen2::ChargedJumpGD> Object_Components::ChargedJumpGD()
        {
            return std::optional<Ent::Gen2::ChargedJumpGD>(getSubNode("ChargedJumpGD"));
        }
        inline Ent::Gen2::ChargedJumpGD Object_Components::addChargedJumpGD()
        {
            return Ent::Gen2::ChargedJumpGD(addSubNode("ChargedJumpGD"));
        }
        inline void Object_Components::removeChargedJumpGD()
        {
            getProperty().eraseUnionSetItem("ChargedJumpGD");
        }
        inline std::optional<Ent::Gen2::ChildEntityPoolComponentGD> Object_Components::ChildEntityPoolComponentGD()
        {
            return std::optional<Ent::Gen2::ChildEntityPoolComponentGD>(getSubNode("ChildEntityPoolComponentGD"));
        }
        inline Ent::Gen2::ChildEntityPoolComponentGD Object_Components::addChildEntityPoolComponentGD()
        {
            return Ent::Gen2::ChildEntityPoolComponentGD(addSubNode("ChildEntityPoolComponentGD"));
        }
        inline void Object_Components::removeChildEntityPoolComponentGD()
        {
            getProperty().eraseUnionSetItem("ChildEntityPoolComponentGD");
        }
        inline std::optional<Ent::Gen2::CinematicGD> Object_Components::CinematicGD()
        {
            return std::optional<Ent::Gen2::CinematicGD>(getSubNode("CinematicGD"));
        }
        inline Ent::Gen2::CinematicGD Object_Components::addCinematicGD()
        {
            return Ent::Gen2::CinematicGD(addSubNode("CinematicGD"));
        }
        inline void Object_Components::removeCinematicGD()
        {
            getProperty().eraseUnionSetItem("CinematicGD");
        }
        inline std::optional<Ent::Gen2::ClothAnimationGD> Object_Components::ClothAnimationGD()
        {
            return std::optional<Ent::Gen2::ClothAnimationGD>(getSubNode("ClothAnimationGD"));
        }
        inline Ent::Gen2::ClothAnimationGD Object_Components::addClothAnimationGD()
        {
            return Ent::Gen2::ClothAnimationGD(addSubNode("ClothAnimationGD"));
        }
        inline void Object_Components::removeClothAnimationGD()
        {
            getProperty().eraseUnionSetItem("ClothAnimationGD");
        }
        inline std::optional<Ent::Gen2::ClothGD> Object_Components::ClothGD()
        {
            return std::optional<Ent::Gen2::ClothGD>(getSubNode("ClothGD"));
        }
        inline Ent::Gen2::ClothGD Object_Components::addClothGD()
        {
            return Ent::Gen2::ClothGD(addSubNode("ClothGD"));
        }
        inline void Object_Components::removeClothGD()
        {
            getProperty().eraseUnionSetItem("ClothGD");
        }
        inline std::optional<Ent::Gen2::ComponentWithProtoCodeGD> Object_Components::ComponentWithProtoCodeGD()
        {
            return std::optional<Ent::Gen2::ComponentWithProtoCodeGD>(getSubNode("ComponentWithProtoCodeGD"));
        }
        inline Ent::Gen2::ComponentWithProtoCodeGD Object_Components::addComponentWithProtoCodeGD()
        {
            return Ent::Gen2::ComponentWithProtoCodeGD(addSubNode("ComponentWithProtoCodeGD"));
        }
        inline void Object_Components::removeComponentWithProtoCodeGD()
        {
            getProperty().eraseUnionSetItem("ComponentWithProtoCodeGD");
        }
        inline std::optional<Ent::Gen2::ConnectorGD> Object_Components::ConnectorGD()
        {
            return std::optional<Ent::Gen2::ConnectorGD>(getSubNode("ConnectorGD"));
        }
        inline Ent::Gen2::ConnectorGD Object_Components::addConnectorGD()
        {
            return Ent::Gen2::ConnectorGD(addSubNode("ConnectorGD"));
        }
        inline void Object_Components::removeConnectorGD()
        {
            getProperty().eraseUnionSetItem("ConnectorGD");
        }
        inline std::optional<Ent::Gen2::ConstrainedMoveGD> Object_Components::ConstrainedMoveGD()
        {
            return std::optional<Ent::Gen2::ConstrainedMoveGD>(getSubNode("ConstrainedMoveGD"));
        }
        inline Ent::Gen2::ConstrainedMoveGD Object_Components::addConstrainedMoveGD()
        {
            return Ent::Gen2::ConstrainedMoveGD(addSubNode("ConstrainedMoveGD"));
        }
        inline void Object_Components::removeConstrainedMoveGD()
        {
            getProperty().eraseUnionSetItem("ConstrainedMoveGD");
        }
        inline std::optional<Ent::Gen2::CreatureAIGD> Object_Components::CreatureAIGD()
        {
            return std::optional<Ent::Gen2::CreatureAIGD>(getSubNode("CreatureAIGD"));
        }
        inline Ent::Gen2::CreatureAIGD Object_Components::addCreatureAIGD()
        {
            return Ent::Gen2::CreatureAIGD(addSubNode("CreatureAIGD"));
        }
        inline void Object_Components::removeCreatureAIGD()
        {
            getProperty().eraseUnionSetItem("CreatureAIGD");
        }
        inline std::optional<Ent::Gen2::CreatureGD> Object_Components::CreatureGD()
        {
            return std::optional<Ent::Gen2::CreatureGD>(getSubNode("CreatureGD"));
        }
        inline Ent::Gen2::CreatureGD Object_Components::addCreatureGD()
        {
            return Ent::Gen2::CreatureGD(addSubNode("CreatureGD"));
        }
        inline void Object_Components::removeCreatureGD()
        {
            getProperty().eraseUnionSetItem("CreatureGD");
        }
        inline std::optional<Ent::Gen2::CreatureUIGD> Object_Components::CreatureUIGD()
        {
            return std::optional<Ent::Gen2::CreatureUIGD>(getSubNode("CreatureUIGD"));
        }
        inline Ent::Gen2::CreatureUIGD Object_Components::addCreatureUIGD()
        {
            return Ent::Gen2::CreatureUIGD(addSubNode("CreatureUIGD"));
        }
        inline void Object_Components::removeCreatureUIGD()
        {
            getProperty().eraseUnionSetItem("CreatureUIGD");
        }
        inline std::optional<Ent::Gen2::CustomThumbnail> Object_Components::CustomThumbnail()
        {
            return std::optional<Ent::Gen2::CustomThumbnail>(getSubNode("CustomThumbnail"));
        }
        inline Ent::Gen2::CustomThumbnail Object_Components::addCustomThumbnail()
        {
            return Ent::Gen2::CustomThumbnail(addSubNode("CustomThumbnail"));
        }
        inline void Object_Components::removeCustomThumbnail()
        {
            getProperty().eraseUnionSetItem("CustomThumbnail");
        }
        inline std::optional<Ent::Gen2::DebugGridGD> Object_Components::DebugGridGD()
        {
            return std::optional<Ent::Gen2::DebugGridGD>(getSubNode("DebugGridGD"));
        }
        inline Ent::Gen2::DebugGridGD Object_Components::addDebugGridGD()
        {
            return Ent::Gen2::DebugGridGD(addSubNode("DebugGridGD"));
        }
        inline void Object_Components::removeDebugGridGD()
        {
            getProperty().eraseUnionSetItem("DebugGridGD");
        }
        inline std::optional<Ent::Gen2::DistanceTriggerGD> Object_Components::DistanceTriggerGD()
        {
            return std::optional<Ent::Gen2::DistanceTriggerGD>(getSubNode("DistanceTriggerGD"));
        }
        inline Ent::Gen2::DistanceTriggerGD Object_Components::addDistanceTriggerGD()
        {
            return Ent::Gen2::DistanceTriggerGD(addSubNode("DistanceTriggerGD"));
        }
        inline void Object_Components::removeDistanceTriggerGD()
        {
            getProperty().eraseUnionSetItem("DistanceTriggerGD");
        }
        inline std::optional<Ent::Gen2::DiveAttackGD> Object_Components::DiveAttackGD()
        {
            return std::optional<Ent::Gen2::DiveAttackGD>(getSubNode("DiveAttackGD"));
        }
        inline Ent::Gen2::DiveAttackGD Object_Components::addDiveAttackGD()
        {
            return Ent::Gen2::DiveAttackGD(addSubNode("DiveAttackGD"));
        }
        inline void Object_Components::removeDiveAttackGD()
        {
            getProperty().eraseUnionSetItem("DiveAttackGD");
        }
        inline std::optional<Ent::Gen2::DummyComponentGD> Object_Components::DummyComponentGD()
        {
            return std::optional<Ent::Gen2::DummyComponentGD>(getSubNode("DummyComponentGD"));
        }
        inline Ent::Gen2::DummyComponentGD Object_Components::addDummyComponentGD()
        {
            return Ent::Gen2::DummyComponentGD(addSubNode("DummyComponentGD"));
        }
        inline void Object_Components::removeDummyComponentGD()
        {
            getProperty().eraseUnionSetItem("DummyComponentGD");
        }
        inline std::optional<Ent::Gen2::EnergyCrookGD> Object_Components::EnergyCrookGD()
        {
            return std::optional<Ent::Gen2::EnergyCrookGD>(getSubNode("EnergyCrookGD"));
        }
        inline Ent::Gen2::EnergyCrookGD Object_Components::addEnergyCrookGD()
        {
            return Ent::Gen2::EnergyCrookGD(addSubNode("EnergyCrookGD"));
        }
        inline void Object_Components::removeEnergyCrookGD()
        {
            getProperty().eraseUnionSetItem("EnergyCrookGD");
        }
        inline std::optional<Ent::Gen2::EnergyDrainGD> Object_Components::EnergyDrainGD()
        {
            return std::optional<Ent::Gen2::EnergyDrainGD>(getSubNode("EnergyDrainGD"));
        }
        inline Ent::Gen2::EnergyDrainGD Object_Components::addEnergyDrainGD()
        {
            return Ent::Gen2::EnergyDrainGD(addSubNode("EnergyDrainGD"));
        }
        inline void Object_Components::removeEnergyDrainGD()
        {
            getProperty().eraseUnionSetItem("EnergyDrainGD");
        }
        inline std::optional<Ent::Gen2::EnergyNetworkListenerGD> Object_Components::EnergyNetworkListenerGD()
        {
            return std::optional<Ent::Gen2::EnergyNetworkListenerGD>(getSubNode("EnergyNetworkListenerGD"));
        }
        inline Ent::Gen2::EnergyNetworkListenerGD Object_Components::addEnergyNetworkListenerGD()
        {
            return Ent::Gen2::EnergyNetworkListenerGD(addSubNode("EnergyNetworkListenerGD"));
        }
        inline void Object_Components::removeEnergyNetworkListenerGD()
        {
            getProperty().eraseUnionSetItem("EnergyNetworkListenerGD");
        }
        inline std::optional<Ent::Gen2::EnergyPoolGD> Object_Components::EnergyPoolGD()
        {
            return std::optional<Ent::Gen2::EnergyPoolGD>(getSubNode("EnergyPoolGD"));
        }
        inline Ent::Gen2::EnergyPoolGD Object_Components::addEnergyPoolGD()
        {
            return Ent::Gen2::EnergyPoolGD(addSubNode("EnergyPoolGD"));
        }
        inline void Object_Components::removeEnergyPoolGD()
        {
            getProperty().eraseUnionSetItem("EnergyPoolGD");
        }
        inline std::optional<Ent::Gen2::EnergySideSwitcherGD> Object_Components::EnergySideSwitcherGD()
        {
            return std::optional<Ent::Gen2::EnergySideSwitcherGD>(getSubNode("EnergySideSwitcherGD"));
        }
        inline Ent::Gen2::EnergySideSwitcherGD Object_Components::addEnergySideSwitcherGD()
        {
            return Ent::Gen2::EnergySideSwitcherGD(addSubNode("EnergySideSwitcherGD"));
        }
        inline void Object_Components::removeEnergySideSwitcherGD()
        {
            getProperty().eraseUnionSetItem("EnergySideSwitcherGD");
        }
        inline std::optional<Ent::Gen2::EnergySpoutGD> Object_Components::EnergySpoutGD()
        {
            return std::optional<Ent::Gen2::EnergySpoutGD>(getSubNode("EnergySpoutGD"));
        }
        inline Ent::Gen2::EnergySpoutGD Object_Components::addEnergySpoutGD()
        {
            return Ent::Gen2::EnergySpoutGD(addSubNode("EnergySpoutGD"));
        }
        inline void Object_Components::removeEnergySpoutGD()
        {
            getProperty().eraseUnionSetItem("EnergySpoutGD");
        }
        inline std::optional<Ent::Gen2::EnvStampGD> Object_Components::EnvStampGD()
        {
            return std::optional<Ent::Gen2::EnvStampGD>(getSubNode("EnvStampGD"));
        }
        inline Ent::Gen2::EnvStampGD Object_Components::addEnvStampGD()
        {
            return Ent::Gen2::EnvStampGD(addSubNode("EnvStampGD"));
        }
        inline void Object_Components::removeEnvStampGD()
        {
            getProperty().eraseUnionSetItem("EnvStampGD");
        }
        inline std::optional<Ent::Gen2::EventHandlerGD> Object_Components::EventHandlerGD()
        {
            return std::optional<Ent::Gen2::EventHandlerGD>(getSubNode("EventHandlerGD"));
        }
        inline Ent::Gen2::EventHandlerGD Object_Components::addEventHandlerGD()
        {
            return Ent::Gen2::EventHandlerGD(addSubNode("EventHandlerGD"));
        }
        inline void Object_Components::removeEventHandlerGD()
        {
            getProperty().eraseUnionSetItem("EventHandlerGD");
        }
        inline std::optional<Ent::Gen2::EventTriggerGD> Object_Components::EventTriggerGD()
        {
            return std::optional<Ent::Gen2::EventTriggerGD>(getSubNode("EventTriggerGD"));
        }
        inline Ent::Gen2::EventTriggerGD Object_Components::addEventTriggerGD()
        {
            return Ent::Gen2::EventTriggerGD(addSubNode("EventTriggerGD"));
        }
        inline void Object_Components::removeEventTriggerGD()
        {
            getProperty().eraseUnionSetItem("EventTriggerGD");
        }
        inline std::optional<Ent::Gen2::FightDistanceTriggerGD> Object_Components::FightDistanceTriggerGD()
        {
            return std::optional<Ent::Gen2::FightDistanceTriggerGD>(getSubNode("FightDistanceTriggerGD"));
        }
        inline Ent::Gen2::FightDistanceTriggerGD Object_Components::addFightDistanceTriggerGD()
        {
            return Ent::Gen2::FightDistanceTriggerGD(addSubNode("FightDistanceTriggerGD"));
        }
        inline void Object_Components::removeFightDistanceTriggerGD()
        {
            getProperty().eraseUnionSetItem("FightDistanceTriggerGD");
        }
        inline std::optional<Ent::Gen2::FireSensorGD> Object_Components::FireSensorGD()
        {
            return std::optional<Ent::Gen2::FireSensorGD>(getSubNode("FireSensorGD"));
        }
        inline Ent::Gen2::FireSensorGD Object_Components::addFireSensorGD()
        {
            return Ent::Gen2::FireSensorGD(addSubNode("FireSensorGD"));
        }
        inline void Object_Components::removeFireSensorGD()
        {
            getProperty().eraseUnionSetItem("FireSensorGD");
        }
        inline std::optional<Ent::Gen2::FluidFXEntitySpawnerGD> Object_Components::FluidFXEntitySpawnerGD()
        {
            return std::optional<Ent::Gen2::FluidFXEntitySpawnerGD>(getSubNode("FluidFXEntitySpawnerGD"));
        }
        inline Ent::Gen2::FluidFXEntitySpawnerGD Object_Components::addFluidFXEntitySpawnerGD()
        {
            return Ent::Gen2::FluidFXEntitySpawnerGD(addSubNode("FluidFXEntitySpawnerGD"));
        }
        inline void Object_Components::removeFluidFXEntitySpawnerGD()
        {
            getProperty().eraseUnionSetItem("FluidFXEntitySpawnerGD");
        }
        inline std::optional<Ent::Gen2::FluidGD> Object_Components::FluidGD()
        {
            return std::optional<Ent::Gen2::FluidGD>(getSubNode("FluidGD"));
        }
        inline Ent::Gen2::FluidGD Object_Components::addFluidGD()
        {
            return Ent::Gen2::FluidGD(addSubNode("FluidGD"));
        }
        inline void Object_Components::removeFluidGD()
        {
            getProperty().eraseUnionSetItem("FluidGD");
        }
        inline std::optional<Ent::Gen2::FluidViewGD> Object_Components::FluidViewGD()
        {
            return std::optional<Ent::Gen2::FluidViewGD>(getSubNode("FluidViewGD"));
        }
        inline Ent::Gen2::FluidViewGD Object_Components::addFluidViewGD()
        {
            return Ent::Gen2::FluidViewGD(addSubNode("FluidViewGD"));
        }
        inline void Object_Components::removeFluidViewGD()
        {
            getProperty().eraseUnionSetItem("FluidViewGD");
        }
        inline std::optional<Ent::Gen2::FluidVolumeComponentGD> Object_Components::FluidVolumeComponentGD()
        {
            return std::optional<Ent::Gen2::FluidVolumeComponentGD>(getSubNode("FluidVolumeComponentGD"));
        }
        inline Ent::Gen2::FluidVolumeComponentGD Object_Components::addFluidVolumeComponentGD()
        {
            return Ent::Gen2::FluidVolumeComponentGD(addSubNode("FluidVolumeComponentGD"));
        }
        inline void Object_Components::removeFluidVolumeComponentGD()
        {
            getProperty().eraseUnionSetItem("FluidVolumeComponentGD");
        }
        inline std::optional<Ent::Gen2::FurComponentGD> Object_Components::FurComponentGD()
        {
            return std::optional<Ent::Gen2::FurComponentGD>(getSubNode("FurComponentGD"));
        }
        inline Ent::Gen2::FurComponentGD Object_Components::addFurComponentGD()
        {
            return Ent::Gen2::FurComponentGD(addSubNode("FurComponentGD"));
        }
        inline void Object_Components::removeFurComponentGD()
        {
            getProperty().eraseUnionSetItem("FurComponentGD");
        }
        inline std::optional<Ent::Gen2::GameEffectSpawnerGD> Object_Components::GameEffectSpawnerGD()
        {
            return std::optional<Ent::Gen2::GameEffectSpawnerGD>(getSubNode("GameEffectSpawnerGD"));
        }
        inline Ent::Gen2::GameEffectSpawnerGD Object_Components::addGameEffectSpawnerGD()
        {
            return Ent::Gen2::GameEffectSpawnerGD(addSubNode("GameEffectSpawnerGD"));
        }
        inline void Object_Components::removeGameEffectSpawnerGD()
        {
            getProperty().eraseUnionSetItem("GameEffectSpawnerGD");
        }
        inline std::optional<Ent::Gen2::GraspableGD> Object_Components::GraspableGD()
        {
            return std::optional<Ent::Gen2::GraspableGD>(getSubNode("GraspableGD"));
        }
        inline Ent::Gen2::GraspableGD Object_Components::addGraspableGD()
        {
            return Ent::Gen2::GraspableGD(addSubNode("GraspableGD"));
        }
        inline void Object_Components::removeGraspableGD()
        {
            getProperty().eraseUnionSetItem("GraspableGD");
        }
        inline std::optional<Ent::Gen2::GrasperGD> Object_Components::GrasperGD()
        {
            return std::optional<Ent::Gen2::GrasperGD>(getSubNode("GrasperGD"));
        }
        inline Ent::Gen2::GrasperGD Object_Components::addGrasperGD()
        {
            return Ent::Gen2::GrasperGD(addSubNode("GrasperGD"));
        }
        inline void Object_Components::removeGrasperGD()
        {
            getProperty().eraseUnionSetItem("GrasperGD");
        }
        inline std::optional<Ent::Gen2::GroundTypeSamplerGD> Object_Components::GroundTypeSamplerGD()
        {
            return std::optional<Ent::Gen2::GroundTypeSamplerGD>(getSubNode("GroundTypeSamplerGD"));
        }
        inline Ent::Gen2::GroundTypeSamplerGD Object_Components::addGroundTypeSamplerGD()
        {
            return Ent::Gen2::GroundTypeSamplerGD(addSubNode("GroundTypeSamplerGD"));
        }
        inline void Object_Components::removeGroundTypeSamplerGD()
        {
            getProperty().eraseUnionSetItem("GroundTypeSamplerGD");
        }
        inline std::optional<Ent::Gen2::HealPumpGD> Object_Components::HealPumpGD()
        {
            return std::optional<Ent::Gen2::HealPumpGD>(getSubNode("HealPumpGD"));
        }
        inline Ent::Gen2::HealPumpGD Object_Components::addHealPumpGD()
        {
            return Ent::Gen2::HealPumpGD(addSubNode("HealPumpGD"));
        }
        inline void Object_Components::removeHealPumpGD()
        {
            getProperty().eraseUnionSetItem("HealPumpGD");
        }
        inline std::optional<Ent::Gen2::HealTriggerGD> Object_Components::HealTriggerGD()
        {
            return std::optional<Ent::Gen2::HealTriggerGD>(getSubNode("HealTriggerGD"));
        }
        inline Ent::Gen2::HealTriggerGD Object_Components::addHealTriggerGD()
        {
            return Ent::Gen2::HealTriggerGD(addSubNode("HealTriggerGD"));
        }
        inline void Object_Components::removeHealTriggerGD()
        {
            getProperty().eraseUnionSetItem("HealTriggerGD");
        }
        inline std::optional<Ent::Gen2::HealerGD> Object_Components::HealerGD()
        {
            return std::optional<Ent::Gen2::HealerGD>(getSubNode("HealerGD"));
        }
        inline Ent::Gen2::HealerGD Object_Components::addHealerGD()
        {
            return Ent::Gen2::HealerGD(addSubNode("HealerGD"));
        }
        inline void Object_Components::removeHealerGD()
        {
            getProperty().eraseUnionSetItem("HealerGD");
        }
        inline std::optional<Ent::Gen2::HealthAreaGD> Object_Components::HealthAreaGD()
        {
            return std::optional<Ent::Gen2::HealthAreaGD>(getSubNode("HealthAreaGD"));
        }
        inline Ent::Gen2::HealthAreaGD Object_Components::addHealthAreaGD()
        {
            return Ent::Gen2::HealthAreaGD(addSubNode("HealthAreaGD"));
        }
        inline void Object_Components::removeHealthAreaGD()
        {
            getProperty().eraseUnionSetItem("HealthAreaGD");
        }
        inline std::optional<Ent::Gen2::HeightMapComponentGD> Object_Components::HeightMapComponentGD()
        {
            return std::optional<Ent::Gen2::HeightMapComponentGD>(getSubNode("HeightMapComponentGD"));
        }
        inline Ent::Gen2::HeightMapComponentGD Object_Components::addHeightMapComponentGD()
        {
            return Ent::Gen2::HeightMapComponentGD(addSubNode("HeightMapComponentGD"));
        }
        inline void Object_Components::removeHeightMapComponentGD()
        {
            getProperty().eraseUnionSetItem("HeightMapComponentGD");
        }
        inline std::optional<Ent::Gen2::HeightObj> Object_Components::HeightObj()
        {
            return std::optional<Ent::Gen2::HeightObj>(getSubNode("HeightObj"));
        }
        inline Ent::Gen2::HeightObj Object_Components::addHeightObj()
        {
            return Ent::Gen2::HeightObj(addSubNode("HeightObj"));
        }
        inline void Object_Components::removeHeightObj()
        {
            getProperty().eraseUnionSetItem("HeightObj");
        }
        inline std::optional<Ent::Gen2::HitTriggerGD> Object_Components::HitTriggerGD()
        {
            return std::optional<Ent::Gen2::HitTriggerGD>(getSubNode("HitTriggerGD"));
        }
        inline Ent::Gen2::HitTriggerGD Object_Components::addHitTriggerGD()
        {
            return Ent::Gen2::HitTriggerGD(addSubNode("HitTriggerGD"));
        }
        inline void Object_Components::removeHitTriggerGD()
        {
            getProperty().eraseUnionSetItem("HitTriggerGD");
        }
        inline std::optional<Ent::Gen2::HotspotsGD> Object_Components::HotspotsGD()
        {
            return std::optional<Ent::Gen2::HotspotsGD>(getSubNode("HotspotsGD"));
        }
        inline Ent::Gen2::HotspotsGD Object_Components::addHotspotsGD()
        {
            return Ent::Gen2::HotspotsGD(addSubNode("HotspotsGD"));
        }
        inline void Object_Components::removeHotspotsGD()
        {
            getProperty().eraseUnionSetItem("HotspotsGD");
        }
        inline std::optional<Ent::Gen2::IncapacitateComponentGD> Object_Components::IncapacitateComponentGD()
        {
            return std::optional<Ent::Gen2::IncapacitateComponentGD>(getSubNode("IncapacitateComponentGD"));
        }
        inline Ent::Gen2::IncapacitateComponentGD Object_Components::addIncapacitateComponentGD()
        {
            return Ent::Gen2::IncapacitateComponentGD(addSubNode("IncapacitateComponentGD"));
        }
        inline void Object_Components::removeIncapacitateComponentGD()
        {
            getProperty().eraseUnionSetItem("IncapacitateComponentGD");
        }
        inline std::optional<Ent::Gen2::InfoboardRegistererGD> Object_Components::InfoboardRegistererGD()
        {
            return std::optional<Ent::Gen2::InfoboardRegistererGD>(getSubNode("InfoboardRegistererGD"));
        }
        inline Ent::Gen2::InfoboardRegistererGD Object_Components::addInfoboardRegistererGD()
        {
            return Ent::Gen2::InfoboardRegistererGD(addSubNode("InfoboardRegistererGD"));
        }
        inline void Object_Components::removeInfoboardRegistererGD()
        {
            getProperty().eraseUnionSetItem("InfoboardRegistererGD");
        }
        inline std::optional<Ent::Gen2::InteractableGPEGD> Object_Components::InteractableGPEGD()
        {
            return std::optional<Ent::Gen2::InteractableGPEGD>(getSubNode("InteractableGPEGD"));
        }
        inline Ent::Gen2::InteractableGPEGD Object_Components::addInteractableGPEGD()
        {
            return Ent::Gen2::InteractableGPEGD(addSubNode("InteractableGPEGD"));
        }
        inline void Object_Components::removeInteractableGPEGD()
        {
            getProperty().eraseUnionSetItem("InteractableGPEGD");
        }
        inline std::optional<Ent::Gen2::InteractorGD> Object_Components::InteractorGD()
        {
            return std::optional<Ent::Gen2::InteractorGD>(getSubNode("InteractorGD"));
        }
        inline Ent::Gen2::InteractorGD Object_Components::addInteractorGD()
        {
            return Ent::Gen2::InteractorGD(addSubNode("InteractorGD"));
        }
        inline void Object_Components::removeInteractorGD()
        {
            getProperty().eraseUnionSetItem("InteractorGD");
        }
        inline std::optional<Ent::Gen2::InterestPointGD> Object_Components::InterestPointGD()
        {
            return std::optional<Ent::Gen2::InterestPointGD>(getSubNode("InterestPointGD"));
        }
        inline Ent::Gen2::InterestPointGD Object_Components::addInterestPointGD()
        {
            return Ent::Gen2::InterestPointGD(addSubNode("InterestPointGD"));
        }
        inline void Object_Components::removeInterestPointGD()
        {
            getProperty().eraseUnionSetItem("InterestPointGD");
        }
        inline std::optional<Ent::Gen2::InventoryGD> Object_Components::InventoryGD()
        {
            return std::optional<Ent::Gen2::InventoryGD>(getSubNode("InventoryGD"));
        }
        inline Ent::Gen2::InventoryGD Object_Components::addInventoryGD()
        {
            return Ent::Gen2::InventoryGD(addSubNode("InventoryGD"));
        }
        inline void Object_Components::removeInventoryGD()
        {
            getProperty().eraseUnionSetItem("InventoryGD");
        }
        inline std::optional<Ent::Gen2::ItemHolderGD> Object_Components::ItemHolderGD()
        {
            return std::optional<Ent::Gen2::ItemHolderGD>(getSubNode("ItemHolderGD"));
        }
        inline Ent::Gen2::ItemHolderGD Object_Components::addItemHolderGD()
        {
            return Ent::Gen2::ItemHolderGD(addSubNode("ItemHolderGD"));
        }
        inline void Object_Components::removeItemHolderGD()
        {
            getProperty().eraseUnionSetItem("ItemHolderGD");
        }
        inline std::optional<Ent::Gen2::LDPrimitive> Object_Components::LDPrimitive()
        {
            return std::optional<Ent::Gen2::LDPrimitive>(getSubNode("LDPrimitive"));
        }
        inline Ent::Gen2::LDPrimitive Object_Components::addLDPrimitive()
        {
            return Ent::Gen2::LDPrimitive(addSubNode("LDPrimitive"));
        }
        inline void Object_Components::removeLDPrimitive()
        {
            getProperty().eraseUnionSetItem("LDPrimitive");
        }
        inline std::optional<Ent::Gen2::LifeComponentGD> Object_Components::LifeComponentGD()
        {
            return std::optional<Ent::Gen2::LifeComponentGD>(getSubNode("LifeComponentGD"));
        }
        inline Ent::Gen2::LifeComponentGD Object_Components::addLifeComponentGD()
        {
            return Ent::Gen2::LifeComponentGD(addSubNode("LifeComponentGD"));
        }
        inline void Object_Components::removeLifeComponentGD()
        {
            getProperty().eraseUnionSetItem("LifeComponentGD");
        }
        inline std::optional<Ent::Gen2::LightComponentGD> Object_Components::LightComponentGD()
        {
            return std::optional<Ent::Gen2::LightComponentGD>(getSubNode("LightComponentGD"));
        }
        inline Ent::Gen2::LightComponentGD Object_Components::addLightComponentGD()
        {
            return Ent::Gen2::LightComponentGD(addSubNode("LightComponentGD"));
        }
        inline void Object_Components::removeLightComponentGD()
        {
            getProperty().eraseUnionSetItem("LightComponentGD");
        }
        inline std::optional<Ent::Gen2::Mesh> Object_Components::Mesh()
        {
            return std::optional<Ent::Gen2::Mesh>(getSubNode("Mesh"));
        }
        inline Ent::Gen2::Mesh Object_Components::addMesh()
        {
            return Ent::Gen2::Mesh(addSubNode("Mesh"));
        }
        inline void Object_Components::removeMesh()
        {
            getProperty().eraseUnionSetItem("Mesh");
        }
        inline std::optional<Ent::Gen2::MeshNavigationInfosGD> Object_Components::MeshNavigationInfosGD()
        {
            return std::optional<Ent::Gen2::MeshNavigationInfosGD>(getSubNode("MeshNavigationInfosGD"));
        }
        inline Ent::Gen2::MeshNavigationInfosGD Object_Components::addMeshNavigationInfosGD()
        {
            return Ent::Gen2::MeshNavigationInfosGD(addSubNode("MeshNavigationInfosGD"));
        }
        inline void Object_Components::removeMeshNavigationInfosGD()
        {
            getProperty().eraseUnionSetItem("MeshNavigationInfosGD");
        }
        inline std::optional<Ent::Gen2::MissionHolderGD> Object_Components::MissionHolderGD()
        {
            return std::optional<Ent::Gen2::MissionHolderGD>(getSubNode("MissionHolderGD"));
        }
        inline Ent::Gen2::MissionHolderGD Object_Components::addMissionHolderGD()
        {
            return Ent::Gen2::MissionHolderGD(addSubNode("MissionHolderGD"));
        }
        inline void Object_Components::removeMissionHolderGD()
        {
            getProperty().eraseUnionSetItem("MissionHolderGD");
        }
        inline std::optional<Ent::Gen2::MountIKControllerGD> Object_Components::MountIKControllerGD()
        {
            return std::optional<Ent::Gen2::MountIKControllerGD>(getSubNode("MountIKControllerGD"));
        }
        inline Ent::Gen2::MountIKControllerGD Object_Components::addMountIKControllerGD()
        {
            return Ent::Gen2::MountIKControllerGD(addSubNode("MountIKControllerGD"));
        }
        inline void Object_Components::removeMountIKControllerGD()
        {
            getProperty().eraseUnionSetItem("MountIKControllerGD");
        }
        inline std::optional<Ent::Gen2::MountableGD> Object_Components::MountableGD()
        {
            return std::optional<Ent::Gen2::MountableGD>(getSubNode("MountableGD"));
        }
        inline Ent::Gen2::MountableGD Object_Components::addMountableGD()
        {
            return Ent::Gen2::MountableGD(addSubNode("MountableGD"));
        }
        inline void Object_Components::removeMountableGD()
        {
            getProperty().eraseUnionSetItem("MountableGD");
        }
        inline std::optional<Ent::Gen2::MounterGD> Object_Components::MounterGD()
        {
            return std::optional<Ent::Gen2::MounterGD>(getSubNode("MounterGD"));
        }
        inline Ent::Gen2::MounterGD Object_Components::addMounterGD()
        {
            return Ent::Gen2::MounterGD(addSubNode("MounterGD"));
        }
        inline void Object_Components::removeMounterGD()
        {
            getProperty().eraseUnionSetItem("MounterGD");
        }
        inline std::optional<Ent::Gen2::MultiThumbnail> Object_Components::MultiThumbnail()
        {
            return std::optional<Ent::Gen2::MultiThumbnail>(getSubNode("MultiThumbnail"));
        }
        inline Ent::Gen2::MultiThumbnail Object_Components::addMultiThumbnail()
        {
            return Ent::Gen2::MultiThumbnail(addSubNode("MultiThumbnail"));
        }
        inline void Object_Components::removeMultiThumbnail()
        {
            getProperty().eraseUnionSetItem("MultiThumbnail");
        }
        inline std::optional<Ent::Gen2::NavMeshActivatorGD> Object_Components::NavMeshActivatorGD()
        {
            return std::optional<Ent::Gen2::NavMeshActivatorGD>(getSubNode("NavMeshActivatorGD"));
        }
        inline Ent::Gen2::NavMeshActivatorGD Object_Components::addNavMeshActivatorGD()
        {
            return Ent::Gen2::NavMeshActivatorGD(addSubNode("NavMeshActivatorGD"));
        }
        inline void Object_Components::removeNavMeshActivatorGD()
        {
            getProperty().eraseUnionSetItem("NavMeshActivatorGD");
        }
        inline std::optional<Ent::Gen2::NavMeshStamperGD> Object_Components::NavMeshStamperGD()
        {
            return std::optional<Ent::Gen2::NavMeshStamperGD>(getSubNode("NavMeshStamperGD"));
        }
        inline Ent::Gen2::NavMeshStamperGD Object_Components::addNavMeshStamperGD()
        {
            return Ent::Gen2::NavMeshStamperGD(addSubNode("NavMeshStamperGD"));
        }
        inline void Object_Components::removeNavMeshStamperGD()
        {
            getProperty().eraseUnionSetItem("NavMeshStamperGD");
        }
        inline std::optional<Ent::Gen2::NetGD> Object_Components::NetGD()
        {
            return std::optional<Ent::Gen2::NetGD>(getSubNode("NetGD"));
        }
        inline Ent::Gen2::NetGD Object_Components::addNetGD()
        {
            return Ent::Gen2::NetGD(addSubNode("NetGD"));
        }
        inline void Object_Components::removeNetGD()
        {
            getProperty().eraseUnionSetItem("NetGD");
        }
        inline std::optional<Ent::Gen2::NetworkLink> Object_Components::NetworkLink()
        {
            return std::optional<Ent::Gen2::NetworkLink>(getSubNode("NetworkLink"));
        }
        inline Ent::Gen2::NetworkLink Object_Components::addNetworkLink()
        {
            return Ent::Gen2::NetworkLink(addSubNode("NetworkLink"));
        }
        inline void Object_Components::removeNetworkLink()
        {
            getProperty().eraseUnionSetItem("NetworkLink");
        }
        inline std::optional<Ent::Gen2::NetworkNode> Object_Components::NetworkNode()
        {
            return std::optional<Ent::Gen2::NetworkNode>(getSubNode("NetworkNode"));
        }
        inline Ent::Gen2::NetworkNode Object_Components::addNetworkNode()
        {
            return Ent::Gen2::NetworkNode(addSubNode("NetworkNode"));
        }
        inline void Object_Components::removeNetworkNode()
        {
            getProperty().eraseUnionSetItem("NetworkNode");
        }
        inline std::optional<Ent::Gen2::NotVisibleInSubscene> Object_Components::NotVisibleInSubscene()
        {
            return std::optional<Ent::Gen2::NotVisibleInSubscene>(getSubNode("NotVisibleInSubscene"));
        }
        inline Ent::Gen2::NotVisibleInSubscene Object_Components::addNotVisibleInSubscene()
        {
            return Ent::Gen2::NotVisibleInSubscene(addSubNode("NotVisibleInSubscene"));
        }
        inline void Object_Components::removeNotVisibleInSubscene()
        {
            getProperty().eraseUnionSetItem("NotVisibleInSubscene");
        }
        inline std::optional<Ent::Gen2::OutfitGD> Object_Components::OutfitGD()
        {
            return std::optional<Ent::Gen2::OutfitGD>(getSubNode("OutfitGD"));
        }
        inline Ent::Gen2::OutfitGD Object_Components::addOutfitGD()
        {
            return Ent::Gen2::OutfitGD(addSubNode("OutfitGD"));
        }
        inline void Object_Components::removeOutfitGD()
        {
            getProperty().eraseUnionSetItem("OutfitGD");
        }
        inline std::optional<Ent::Gen2::OutfitWearerGD> Object_Components::OutfitWearerGD()
        {
            return std::optional<Ent::Gen2::OutfitWearerGD>(getSubNode("OutfitWearerGD"));
        }
        inline Ent::Gen2::OutfitWearerGD Object_Components::addOutfitWearerGD()
        {
            return Ent::Gen2::OutfitWearerGD(addSubNode("OutfitWearerGD"));
        }
        inline void Object_Components::removeOutfitWearerGD()
        {
            getProperty().eraseUnionSetItem("OutfitWearerGD");
        }
        inline std::optional<Ent::Gen2::PathFinderGD> Object_Components::PathFinderGD()
        {
            return std::optional<Ent::Gen2::PathFinderGD>(getSubNode("PathFinderGD"));
        }
        inline Ent::Gen2::PathFinderGD Object_Components::addPathFinderGD()
        {
            return Ent::Gen2::PathFinderGD(addSubNode("PathFinderGD"));
        }
        inline void Object_Components::removePathFinderGD()
        {
            getProperty().eraseUnionSetItem("PathFinderGD");
        }
        inline std::optional<Ent::Gen2::PerceivableGD> Object_Components::PerceivableGD()
        {
            return std::optional<Ent::Gen2::PerceivableGD>(getSubNode("PerceivableGD"));
        }
        inline Ent::Gen2::PerceivableGD Object_Components::addPerceivableGD()
        {
            return Ent::Gen2::PerceivableGD(addSubNode("PerceivableGD"));
        }
        inline void Object_Components::removePerceivableGD()
        {
            getProperty().eraseUnionSetItem("PerceivableGD");
        }
        inline std::optional<Ent::Gen2::PerceiverGD> Object_Components::PerceiverGD()
        {
            return std::optional<Ent::Gen2::PerceiverGD>(getSubNode("PerceiverGD"));
        }
        inline Ent::Gen2::PerceiverGD Object_Components::addPerceiverGD()
        {
            return Ent::Gen2::PerceiverGD(addSubNode("PerceiverGD"));
        }
        inline void Object_Components::removePerceiverGD()
        {
            getProperty().eraseUnionSetItem("PerceiverGD");
        }
        inline std::optional<Ent::Gen2::PhysicsDataGD> Object_Components::PhysicsDataGD()
        {
            return std::optional<Ent::Gen2::PhysicsDataGD>(getSubNode("PhysicsDataGD"));
        }
        inline Ent::Gen2::PhysicsDataGD Object_Components::addPhysicsDataGD()
        {
            return Ent::Gen2::PhysicsDataGD(addSubNode("PhysicsDataGD"));
        }
        inline void Object_Components::removePhysicsDataGD()
        {
            getProperty().eraseUnionSetItem("PhysicsDataGD");
        }
        inline std::optional<Ent::Gen2::PhysicsGD> Object_Components::PhysicsGD()
        {
            return std::optional<Ent::Gen2::PhysicsGD>(getSubNode("PhysicsGD"));
        }
        inline Ent::Gen2::PhysicsGD Object_Components::addPhysicsGD()
        {
            return Ent::Gen2::PhysicsGD(addSubNode("PhysicsGD"));
        }
        inline void Object_Components::removePhysicsGD()
        {
            getProperty().eraseUnionSetItem("PhysicsGD");
        }
        inline std::optional<Ent::Gen2::PhysicsImpactMakerGD> Object_Components::PhysicsImpactMakerGD()
        {
            return std::optional<Ent::Gen2::PhysicsImpactMakerGD>(getSubNode("PhysicsImpactMakerGD"));
        }
        inline Ent::Gen2::PhysicsImpactMakerGD Object_Components::addPhysicsImpactMakerGD()
        {
            return Ent::Gen2::PhysicsImpactMakerGD(addSubNode("PhysicsImpactMakerGD"));
        }
        inline void Object_Components::removePhysicsImpactMakerGD()
        {
            getProperty().eraseUnionSetItem("PhysicsImpactMakerGD");
        }
        inline std::optional<Ent::Gen2::PhysicsMeshDeformerGD> Object_Components::PhysicsMeshDeformerGD()
        {
            return std::optional<Ent::Gen2::PhysicsMeshDeformerGD>(getSubNode("PhysicsMeshDeformerGD"));
        }
        inline Ent::Gen2::PhysicsMeshDeformerGD Object_Components::addPhysicsMeshDeformerGD()
        {
            return Ent::Gen2::PhysicsMeshDeformerGD(addSubNode("PhysicsMeshDeformerGD"));
        }
        inline void Object_Components::removePhysicsMeshDeformerGD()
        {
            getProperty().eraseUnionSetItem("PhysicsMeshDeformerGD");
        }
        inline std::optional<Ent::Gen2::PhysicsMeshProviderGD> Object_Components::PhysicsMeshProviderGD()
        {
            return std::optional<Ent::Gen2::PhysicsMeshProviderGD>(getSubNode("PhysicsMeshProviderGD"));
        }
        inline Ent::Gen2::PhysicsMeshProviderGD Object_Components::addPhysicsMeshProviderGD()
        {
            return Ent::Gen2::PhysicsMeshProviderGD(addSubNode("PhysicsMeshProviderGD"));
        }
        inline void Object_Components::removePhysicsMeshProviderGD()
        {
            getProperty().eraseUnionSetItem("PhysicsMeshProviderGD");
        }
        inline std::optional<Ent::Gen2::PhysicsTriggerGD> Object_Components::PhysicsTriggerGD()
        {
            return std::optional<Ent::Gen2::PhysicsTriggerGD>(getSubNode("PhysicsTriggerGD"));
        }
        inline Ent::Gen2::PhysicsTriggerGD Object_Components::addPhysicsTriggerGD()
        {
            return Ent::Gen2::PhysicsTriggerGD(addSubNode("PhysicsTriggerGD"));
        }
        inline void Object_Components::removePhysicsTriggerGD()
        {
            getProperty().eraseUnionSetItem("PhysicsTriggerGD");
        }
        inline std::optional<Ent::Gen2::PickableComponentGD> Object_Components::PickableComponentGD()
        {
            return std::optional<Ent::Gen2::PickableComponentGD>(getSubNode("PickableComponentGD"));
        }
        inline Ent::Gen2::PickableComponentGD Object_Components::addPickableComponentGD()
        {
            return Ent::Gen2::PickableComponentGD(addSubNode("PickableComponentGD"));
        }
        inline void Object_Components::removePickableComponentGD()
        {
            getProperty().eraseUnionSetItem("PickableComponentGD");
        }
        inline std::optional<Ent::Gen2::PickableDistributorComponentGD> Object_Components::PickableDistributorComponentGD()
        {
            return std::optional<Ent::Gen2::PickableDistributorComponentGD>(getSubNode("PickableDistributorComponentGD"));
        }
        inline Ent::Gen2::PickableDistributorComponentGD Object_Components::addPickableDistributorComponentGD()
        {
            return Ent::Gen2::PickableDistributorComponentGD(addSubNode("PickableDistributorComponentGD"));
        }
        inline void Object_Components::removePickableDistributorComponentGD()
        {
            getProperty().eraseUnionSetItem("PickableDistributorComponentGD");
        }
        inline std::optional<Ent::Gen2::PlayerComponentGD> Object_Components::PlayerComponentGD()
        {
            return std::optional<Ent::Gen2::PlayerComponentGD>(getSubNode("PlayerComponentGD"));
        }
        inline Ent::Gen2::PlayerComponentGD Object_Components::addPlayerComponentGD()
        {
            return Ent::Gen2::PlayerComponentGD(addSubNode("PlayerComponentGD"));
        }
        inline void Object_Components::removePlayerComponentGD()
        {
            getProperty().eraseUnionSetItem("PlayerComponentGD");
        }
        inline std::optional<Ent::Gen2::ProjectileGD> Object_Components::ProjectileGD()
        {
            return std::optional<Ent::Gen2::ProjectileGD>(getSubNode("ProjectileGD"));
        }
        inline Ent::Gen2::ProjectileGD Object_Components::addProjectileGD()
        {
            return Ent::Gen2::ProjectileGD(addSubNode("ProjectileGD"));
        }
        inline void Object_Components::removeProjectileGD()
        {
            getProperty().eraseUnionSetItem("ProjectileGD");
        }
        inline std::optional<Ent::Gen2::ProjectileShooterGD> Object_Components::ProjectileShooterGD()
        {
            return std::optional<Ent::Gen2::ProjectileShooterGD>(getSubNode("ProjectileShooterGD"));
        }
        inline Ent::Gen2::ProjectileShooterGD Object_Components::addProjectileShooterGD()
        {
            return Ent::Gen2::ProjectileShooterGD(addSubNode("ProjectileShooterGD"));
        }
        inline void Object_Components::removeProjectileShooterGD()
        {
            getProperty().eraseUnionSetItem("ProjectileShooterGD");
        }
        inline std::optional<Ent::Gen2::ProtoComponentGD> Object_Components::ProtoComponentGD()
        {
            return std::optional<Ent::Gen2::ProtoComponentGD>(getSubNode("ProtoComponentGD"));
        }
        inline Ent::Gen2::ProtoComponentGD Object_Components::addProtoComponentGD()
        {
            return Ent::Gen2::ProtoComponentGD(addSubNode("ProtoComponentGD"));
        }
        inline void Object_Components::removeProtoComponentGD()
        {
            getProperty().eraseUnionSetItem("ProtoComponentGD");
        }
        inline std::optional<Ent::Gen2::QuickCreatureSwitchGD> Object_Components::QuickCreatureSwitchGD()
        {
            return std::optional<Ent::Gen2::QuickCreatureSwitchGD>(getSubNode("QuickCreatureSwitchGD"));
        }
        inline Ent::Gen2::QuickCreatureSwitchGD Object_Components::addQuickCreatureSwitchGD()
        {
            return Ent::Gen2::QuickCreatureSwitchGD(addSubNode("QuickCreatureSwitchGD"));
        }
        inline void Object_Components::removeQuickCreatureSwitchGD()
        {
            getProperty().eraseUnionSetItem("QuickCreatureSwitchGD");
        }
        inline std::optional<Ent::Gen2::RagdollGD> Object_Components::RagdollGD()
        {
            return std::optional<Ent::Gen2::RagdollGD>(getSubNode("RagdollGD"));
        }
        inline Ent::Gen2::RagdollGD Object_Components::addRagdollGD()
        {
            return Ent::Gen2::RagdollGD(addSubNode("RagdollGD"));
        }
        inline void Object_Components::removeRagdollGD()
        {
            getProperty().eraseUnionSetItem("RagdollGD");
        }
        inline std::optional<Ent::Gen2::RegenSwitcherGD> Object_Components::RegenSwitcherGD()
        {
            return std::optional<Ent::Gen2::RegenSwitcherGD>(getSubNode("RegenSwitcherGD"));
        }
        inline Ent::Gen2::RegenSwitcherGD Object_Components::addRegenSwitcherGD()
        {
            return Ent::Gen2::RegenSwitcherGD(addSubNode("RegenSwitcherGD"));
        }
        inline void Object_Components::removeRegenSwitcherGD()
        {
            getProperty().eraseUnionSetItem("RegenSwitcherGD");
        }
        inline std::optional<Ent::Gen2::RegenerableVegetationGD> Object_Components::RegenerableVegetationGD()
        {
            return std::optional<Ent::Gen2::RegenerableVegetationGD>(getSubNode("RegenerableVegetationGD"));
        }
        inline Ent::Gen2::RegenerableVegetationGD Object_Components::addRegenerableVegetationGD()
        {
            return Ent::Gen2::RegenerableVegetationGD(addSubNode("RegenerableVegetationGD"));
        }
        inline void Object_Components::removeRegenerableVegetationGD()
        {
            getProperty().eraseUnionSetItem("RegenerableVegetationGD");
        }
        inline std::optional<Ent::Gen2::RespawnPlaceGD> Object_Components::RespawnPlaceGD()
        {
            return std::optional<Ent::Gen2::RespawnPlaceGD>(getSubNode("RespawnPlaceGD"));
        }
        inline Ent::Gen2::RespawnPlaceGD Object_Components::addRespawnPlaceGD()
        {
            return Ent::Gen2::RespawnPlaceGD(addSubNode("RespawnPlaceGD"));
        }
        inline void Object_Components::removeRespawnPlaceGD()
        {
            getProperty().eraseUnionSetItem("RespawnPlaceGD");
        }
        inline std::optional<Ent::Gen2::RespawnabilityGD> Object_Components::RespawnabilityGD()
        {
            return std::optional<Ent::Gen2::RespawnabilityGD>(getSubNode("RespawnabilityGD"));
        }
        inline Ent::Gen2::RespawnabilityGD Object_Components::addRespawnabilityGD()
        {
            return Ent::Gen2::RespawnabilityGD(addSubNode("RespawnabilityGD"));
        }
        inline void Object_Components::removeRespawnabilityGD()
        {
            getProperty().eraseUnionSetItem("RespawnabilityGD");
        }
        inline std::optional<Ent::Gen2::ReviveEnergyGD> Object_Components::ReviveEnergyGD()
        {
            return std::optional<Ent::Gen2::ReviveEnergyGD>(getSubNode("ReviveEnergyGD"));
        }
        inline Ent::Gen2::ReviveEnergyGD Object_Components::addReviveEnergyGD()
        {
            return Ent::Gen2::ReviveEnergyGD(addSubNode("ReviveEnergyGD"));
        }
        inline void Object_Components::removeReviveEnergyGD()
        {
            getProperty().eraseUnionSetItem("ReviveEnergyGD");
        }
        inline std::optional<Ent::Gen2::ScriptComponentGD> Object_Components::ScriptComponentGD()
        {
            return std::optional<Ent::Gen2::ScriptComponentGD>(getSubNode("ScriptComponentGD"));
        }
        inline Ent::Gen2::ScriptComponentGD Object_Components::addScriptComponentGD()
        {
            return Ent::Gen2::ScriptComponentGD(addSubNode("ScriptComponentGD"));
        }
        inline void Object_Components::removeScriptComponentGD()
        {
            getProperty().eraseUnionSetItem("ScriptComponentGD");
        }
        inline std::optional<Ent::Gen2::SeedPatch> Object_Components::SeedPatch()
        {
            return std::optional<Ent::Gen2::SeedPatch>(getSubNode("SeedPatch"));
        }
        inline Ent::Gen2::SeedPatch Object_Components::addSeedPatch()
        {
            return Ent::Gen2::SeedPatch(addSubNode("SeedPatch"));
        }
        inline void Object_Components::removeSeedPatch()
        {
            getProperty().eraseUnionSetItem("SeedPatch");
        }
        inline std::optional<Ent::Gen2::SensorControllerGD> Object_Components::SensorControllerGD()
        {
            return std::optional<Ent::Gen2::SensorControllerGD>(getSubNode("SensorControllerGD"));
        }
        inline Ent::Gen2::SensorControllerGD Object_Components::addSensorControllerGD()
        {
            return Ent::Gen2::SensorControllerGD(addSubNode("SensorControllerGD"));
        }
        inline void Object_Components::removeSensorControllerGD()
        {
            getProperty().eraseUnionSetItem("SensorControllerGD");
        }
        inline std::optional<Ent::Gen2::SensorVoxelsGD> Object_Components::SensorVoxelsGD()
        {
            return std::optional<Ent::Gen2::SensorVoxelsGD>(getSubNode("SensorVoxelsGD"));
        }
        inline Ent::Gen2::SensorVoxelsGD Object_Components::addSensorVoxelsGD()
        {
            return Ent::Gen2::SensorVoxelsGD(addSubNode("SensorVoxelsGD"));
        }
        inline void Object_Components::removeSensorVoxelsGD()
        {
            getProperty().eraseUnionSetItem("SensorVoxelsGD");
        }
        inline std::optional<Ent::Gen2::ShamanItemGD> Object_Components::ShamanItemGD()
        {
            return std::optional<Ent::Gen2::ShamanItemGD>(getSubNode("ShamanItemGD"));
        }
        inline Ent::Gen2::ShamanItemGD Object_Components::addShamanItemGD()
        {
            return Ent::Gen2::ShamanItemGD(addSubNode("ShamanItemGD"));
        }
        inline void Object_Components::removeShamanItemGD()
        {
            getProperty().eraseUnionSetItem("ShamanItemGD");
        }
        inline std::optional<Ent::Gen2::ShamanVisionGD> Object_Components::ShamanVisionGD()
        {
            return std::optional<Ent::Gen2::ShamanVisionGD>(getSubNode("ShamanVisionGD"));
        }
        inline Ent::Gen2::ShamanVisionGD Object_Components::addShamanVisionGD()
        {
            return Ent::Gen2::ShamanVisionGD(addSubNode("ShamanVisionGD"));
        }
        inline void Object_Components::removeShamanVisionGD()
        {
            getProperty().eraseUnionSetItem("ShamanVisionGD");
        }
        inline std::optional<Ent::Gen2::ShapeshiftStatueGD> Object_Components::ShapeshiftStatueGD()
        {
            return std::optional<Ent::Gen2::ShapeshiftStatueGD>(getSubNode("ShapeshiftStatueGD"));
        }
        inline Ent::Gen2::ShapeshiftStatueGD Object_Components::addShapeshiftStatueGD()
        {
            return Ent::Gen2::ShapeshiftStatueGD(addSubNode("ShapeshiftStatueGD"));
        }
        inline void Object_Components::removeShapeshiftStatueGD()
        {
            getProperty().eraseUnionSetItem("ShapeshiftStatueGD");
        }
        inline std::optional<Ent::Gen2::SideMapGateGD> Object_Components::SideMapGateGD()
        {
            return std::optional<Ent::Gen2::SideMapGateGD>(getSubNode("SideMapGateGD"));
        }
        inline Ent::Gen2::SideMapGateGD Object_Components::addSideMapGateGD()
        {
            return Ent::Gen2::SideMapGateGD(addSubNode("SideMapGateGD"));
        }
        inline void Object_Components::removeSideMapGateGD()
        {
            getProperty().eraseUnionSetItem("SideMapGateGD");
        }
        inline std::optional<Ent::Gen2::SmoothScaleComponentGD> Object_Components::SmoothScaleComponentGD()
        {
            return std::optional<Ent::Gen2::SmoothScaleComponentGD>(getSubNode("SmoothScaleComponentGD"));
        }
        inline Ent::Gen2::SmoothScaleComponentGD Object_Components::addSmoothScaleComponentGD()
        {
            return Ent::Gen2::SmoothScaleComponentGD(addSubNode("SmoothScaleComponentGD"));
        }
        inline void Object_Components::removeSmoothScaleComponentGD()
        {
            getProperty().eraseUnionSetItem("SmoothScaleComponentGD");
        }
        inline std::optional<Ent::Gen2::SoftCollisionGD> Object_Components::SoftCollisionGD()
        {
            return std::optional<Ent::Gen2::SoftCollisionGD>(getSubNode("SoftCollisionGD"));
        }
        inline Ent::Gen2::SoftCollisionGD Object_Components::addSoftCollisionGD()
        {
            return Ent::Gen2::SoftCollisionGD(addSubNode("SoftCollisionGD"));
        }
        inline void Object_Components::removeSoftCollisionGD()
        {
            getProperty().eraseUnionSetItem("SoftCollisionGD");
        }
        inline std::optional<Ent::Gen2::SoulRespawnOpportunityGD> Object_Components::SoulRespawnOpportunityGD()
        {
            return std::optional<Ent::Gen2::SoulRespawnOpportunityGD>(getSubNode("SoulRespawnOpportunityGD"));
        }
        inline Ent::Gen2::SoulRespawnOpportunityGD Object_Components::addSoulRespawnOpportunityGD()
        {
            return Ent::Gen2::SoulRespawnOpportunityGD(addSubNode("SoulRespawnOpportunityGD"));
        }
        inline void Object_Components::removeSoulRespawnOpportunityGD()
        {
            getProperty().eraseUnionSetItem("SoulRespawnOpportunityGD");
        }
        inline std::optional<Ent::Gen2::SoundAreaGD> Object_Components::SoundAreaGD()
        {
            return std::optional<Ent::Gen2::SoundAreaGD>(getSubNode("SoundAreaGD"));
        }
        inline Ent::Gen2::SoundAreaGD Object_Components::addSoundAreaGD()
        {
            return Ent::Gen2::SoundAreaGD(addSubNode("SoundAreaGD"));
        }
        inline void Object_Components::removeSoundAreaGD()
        {
            getProperty().eraseUnionSetItem("SoundAreaGD");
        }
        inline std::optional<Ent::Gen2::SoundEmitterGD> Object_Components::SoundEmitterGD()
        {
            return std::optional<Ent::Gen2::SoundEmitterGD>(getSubNode("SoundEmitterGD"));
        }
        inline Ent::Gen2::SoundEmitterGD Object_Components::addSoundEmitterGD()
        {
            return Ent::Gen2::SoundEmitterGD(addSubNode("SoundEmitterGD"));
        }
        inline void Object_Components::removeSoundEmitterGD()
        {
            getProperty().eraseUnionSetItem("SoundEmitterGD");
        }
        inline std::optional<Ent::Gen2::SoundOpportunityComponentGD> Object_Components::SoundOpportunityComponentGD()
        {
            return std::optional<Ent::Gen2::SoundOpportunityComponentGD>(getSubNode("SoundOpportunityComponentGD"));
        }
        inline Ent::Gen2::SoundOpportunityComponentGD Object_Components::addSoundOpportunityComponentGD()
        {
            return Ent::Gen2::SoundOpportunityComponentGD(addSubNode("SoundOpportunityComponentGD"));
        }
        inline void Object_Components::removeSoundOpportunityComponentGD()
        {
            getProperty().eraseUnionSetItem("SoundOpportunityComponentGD");
        }
        inline std::optional<Ent::Gen2::SpiritAnimalGD> Object_Components::SpiritAnimalGD()
        {
            return std::optional<Ent::Gen2::SpiritAnimalGD>(getSubNode("SpiritAnimalGD"));
        }
        inline Ent::Gen2::SpiritAnimalGD Object_Components::addSpiritAnimalGD()
        {
            return Ent::Gen2::SpiritAnimalGD(addSubNode("SpiritAnimalGD"));
        }
        inline void Object_Components::removeSpiritAnimalGD()
        {
            getProperty().eraseUnionSetItem("SpiritAnimalGD");
        }
        inline std::optional<Ent::Gen2::SpiritAnimalShrineGD> Object_Components::SpiritAnimalShrineGD()
        {
            return std::optional<Ent::Gen2::SpiritAnimalShrineGD>(getSubNode("SpiritAnimalShrineGD"));
        }
        inline Ent::Gen2::SpiritAnimalShrineGD Object_Components::addSpiritAnimalShrineGD()
        {
            return Ent::Gen2::SpiritAnimalShrineGD(addSubNode("SpiritAnimalShrineGD"));
        }
        inline void Object_Components::removeSpiritAnimalShrineGD()
        {
            getProperty().eraseUnionSetItem("SpiritAnimalShrineGD");
        }
        inline std::optional<Ent::Gen2::SpiritAnimalsHolderGD> Object_Components::SpiritAnimalsHolderGD()
        {
            return std::optional<Ent::Gen2::SpiritAnimalsHolderGD>(getSubNode("SpiritAnimalsHolderGD"));
        }
        inline Ent::Gen2::SpiritAnimalsHolderGD Object_Components::addSpiritAnimalsHolderGD()
        {
            return Ent::Gen2::SpiritAnimalsHolderGD(addSubNode("SpiritAnimalsHolderGD"));
        }
        inline void Object_Components::removeSpiritAnimalsHolderGD()
        {
            getProperty().eraseUnionSetItem("SpiritAnimalsHolderGD");
        }
        inline std::optional<Ent::Gen2::StaffVertebrasGD> Object_Components::StaffVertebrasGD()
        {
            return std::optional<Ent::Gen2::StaffVertebrasGD>(getSubNode("StaffVertebrasGD"));
        }
        inline Ent::Gen2::StaffVertebrasGD Object_Components::addStaffVertebrasGD()
        {
            return Ent::Gen2::StaffVertebrasGD(addSubNode("StaffVertebrasGD"));
        }
        inline void Object_Components::removeStaffVertebrasGD()
        {
            getProperty().eraseUnionSetItem("StaffVertebrasGD");
        }
        inline std::optional<Ent::Gen2::StaticObjectGD> Object_Components::StaticObjectGD()
        {
            return std::optional<Ent::Gen2::StaticObjectGD>(getSubNode("StaticObjectGD"));
        }
        inline Ent::Gen2::StaticObjectGD Object_Components::addStaticObjectGD()
        {
            return Ent::Gen2::StaticObjectGD(addSubNode("StaticObjectGD"));
        }
        inline void Object_Components::removeStaticObjectGD()
        {
            getProperty().eraseUnionSetItem("StaticObjectGD");
        }
        inline std::optional<Ent::Gen2::StickToTerrain> Object_Components::StickToTerrain()
        {
            return std::optional<Ent::Gen2::StickToTerrain>(getSubNode("StickToTerrain"));
        }
        inline Ent::Gen2::StickToTerrain Object_Components::addStickToTerrain()
        {
            return Ent::Gen2::StickToTerrain(addSubNode("StickToTerrain"));
        }
        inline void Object_Components::removeStickToTerrain()
        {
            getProperty().eraseUnionSetItem("StickToTerrain");
        }
        inline std::optional<Ent::Gen2::StreamableUnitGD> Object_Components::StreamableUnitGD()
        {
            return std::optional<Ent::Gen2::StreamableUnitGD>(getSubNode("StreamableUnitGD"));
        }
        inline Ent::Gen2::StreamableUnitGD Object_Components::addStreamableUnitGD()
        {
            return Ent::Gen2::StreamableUnitGD(addSubNode("StreamableUnitGD"));
        }
        inline void Object_Components::removeStreamableUnitGD()
        {
            getProperty().eraseUnionSetItem("StreamableUnitGD");
        }
        inline std::optional<Ent::Gen2::StreamingLocatorGD> Object_Components::StreamingLocatorGD()
        {
            return std::optional<Ent::Gen2::StreamingLocatorGD>(getSubNode("StreamingLocatorGD"));
        }
        inline Ent::Gen2::StreamingLocatorGD Object_Components::addStreamingLocatorGD()
        {
            return Ent::Gen2::StreamingLocatorGD(addSubNode("StreamingLocatorGD"));
        }
        inline void Object_Components::removeStreamingLocatorGD()
        {
            getProperty().eraseUnionSetItem("StreamingLocatorGD");
        }
        inline std::optional<Ent::Gen2::SubScene> Object_Components::SubScene()
        {
            return std::optional<Ent::Gen2::SubScene>(getSubNode("SubScene"));
        }
        inline Ent::Gen2::SubScene Object_Components::addSubScene()
        {
            return Ent::Gen2::SubScene(addSubNode("SubScene"));
        }
        inline void Object_Components::removeSubScene()
        {
            getProperty().eraseUnionSetItem("SubScene");
        }
        inline std::optional<Ent::Gen2::SystemicCreature> Object_Components::SystemicCreature()
        {
            return std::optional<Ent::Gen2::SystemicCreature>(getSubNode("SystemicCreature"));
        }
        inline Ent::Gen2::SystemicCreature Object_Components::addSystemicCreature()
        {
            return Ent::Gen2::SystemicCreature(addSubNode("SystemicCreature"));
        }
        inline void Object_Components::removeSystemicCreature()
        {
            getProperty().eraseUnionSetItem("SystemicCreature");
        }
        inline std::optional<Ent::Gen2::TeamGD> Object_Components::TeamGD()
        {
            return std::optional<Ent::Gen2::TeamGD>(getSubNode("TeamGD"));
        }
        inline Ent::Gen2::TeamGD Object_Components::addTeamGD()
        {
            return Ent::Gen2::TeamGD(addSubNode("TeamGD"));
        }
        inline void Object_Components::removeTeamGD()
        {
            getProperty().eraseUnionSetItem("TeamGD");
        }
        inline std::optional<Ent::Gen2::TerrainGD> Object_Components::TerrainGD()
        {
            return std::optional<Ent::Gen2::TerrainGD>(getSubNode("TerrainGD"));
        }
        inline Ent::Gen2::TerrainGD Object_Components::addTerrainGD()
        {
            return Ent::Gen2::TerrainGD(addSubNode("TerrainGD"));
        }
        inline void Object_Components::removeTerrainGD()
        {
            getProperty().eraseUnionSetItem("TerrainGD");
        }
        inline std::optional<Ent::Gen2::TerrainSurfaceObject> Object_Components::TerrainSurfaceObject()
        {
            return std::optional<Ent::Gen2::TerrainSurfaceObject>(getSubNode("TerrainSurfaceObject"));
        }
        inline Ent::Gen2::TerrainSurfaceObject Object_Components::addTerrainSurfaceObject()
        {
            return Ent::Gen2::TerrainSurfaceObject(addSubNode("TerrainSurfaceObject"));
        }
        inline void Object_Components::removeTerrainSurfaceObject()
        {
            getProperty().eraseUnionSetItem("TerrainSurfaceObject");
        }
        inline std::optional<Ent::Gen2::TestArrays> Object_Components::TestArrays()
        {
            return std::optional<Ent::Gen2::TestArrays>(getSubNode("TestArrays"));
        }
        inline Ent::Gen2::TestArrays Object_Components::addTestArrays()
        {
            return Ent::Gen2::TestArrays(addSubNode("TestArrays"));
        }
        inline void Object_Components::removeTestArrays()
        {
            getProperty().eraseUnionSetItem("TestArrays");
        }
        inline std::optional<Ent::Gen2::TestCreature> Object_Components::TestCreature()
        {
            return std::optional<Ent::Gen2::TestCreature>(getSubNode("TestCreature"));
        }
        inline Ent::Gen2::TestCreature Object_Components::addTestCreature()
        {
            return Ent::Gen2::TestCreature(addSubNode("TestCreature"));
        }
        inline void Object_Components::removeTestCreature()
        {
            getProperty().eraseUnionSetItem("TestCreature");
        }
        inline std::optional<Ent::Gen2::TestDefaultValues> Object_Components::TestDefaultValues()
        {
            return std::optional<Ent::Gen2::TestDefaultValues>(getSubNode("TestDefaultValues"));
        }
        inline Ent::Gen2::TestDefaultValues Object_Components::addTestDefaultValues()
        {
            return Ent::Gen2::TestDefaultValues(addSubNode("TestDefaultValues"));
        }
        inline void Object_Components::removeTestDefaultValues()
        {
            getProperty().eraseUnionSetItem("TestDefaultValues");
        }
        inline std::optional<Ent::Gen2::TestEntityRef> Object_Components::TestEntityRef()
        {
            return std::optional<Ent::Gen2::TestEntityRef>(getSubNode("TestEntityRef"));
        }
        inline Ent::Gen2::TestEntityRef Object_Components::addTestEntityRef()
        {
            return Ent::Gen2::TestEntityRef(addSubNode("TestEntityRef"));
        }
        inline void Object_Components::removeTestEntityRef()
        {
            getProperty().eraseUnionSetItem("TestEntityRef");
        }
        inline std::optional<Ent::Gen2::TestSetOfObject> Object_Components::TestSetOfObject()
        {
            return std::optional<Ent::Gen2::TestSetOfObject>(getSubNode("TestSetOfObject"));
        }
        inline Ent::Gen2::TestSetOfObject Object_Components::addTestSetOfObject()
        {
            return Ent::Gen2::TestSetOfObject(addSubNode("TestSetOfObject"));
        }
        inline void Object_Components::removeTestSetOfObject()
        {
            getProperty().eraseUnionSetItem("TestSetOfObject");
        }
        inline std::optional<Ent::Gen2::TestTagsList> Object_Components::TestTagsList()
        {
            return std::optional<Ent::Gen2::TestTagsList>(getSubNode("TestTagsList"));
        }
        inline Ent::Gen2::TestTagsList Object_Components::addTestTagsList()
        {
            return Ent::Gen2::TestTagsList(addSubNode("TestTagsList"));
        }
        inline void Object_Components::removeTestTagsList()
        {
            getProperty().eraseUnionSetItem("TestTagsList");
        }
        inline std::optional<Ent::Gen2::TestUnion> Object_Components::TestUnion()
        {
            return std::optional<Ent::Gen2::TestUnion>(getSubNode("TestUnion"));
        }
        inline Ent::Gen2::TestUnion Object_Components::addTestUnion()
        {
            return Ent::Gen2::TestUnion(addSubNode("TestUnion"));
        }
        inline void Object_Components::removeTestUnion()
        {
            getProperty().eraseUnionSetItem("TestUnion");
        }
        inline std::optional<Ent::Gen2::TransformGD> Object_Components::TransformGD()
        {
            return std::optional<Ent::Gen2::TransformGD>(getSubNode("TransformGD"));
        }
        inline Ent::Gen2::TransformGD Object_Components::addTransformGD()
        {
            return Ent::Gen2::TransformGD(addSubNode("TransformGD"));
        }
        inline void Object_Components::removeTransformGD()
        {
            getProperty().eraseUnionSetItem("TransformGD");
        }
        inline std::optional<Ent::Gen2::TriggerEventCameraGD> Object_Components::TriggerEventCameraGD()
        {
            return std::optional<Ent::Gen2::TriggerEventCameraGD>(getSubNode("TriggerEventCameraGD"));
        }
        inline Ent::Gen2::TriggerEventCameraGD Object_Components::addTriggerEventCameraGD()
        {
            return Ent::Gen2::TriggerEventCameraGD(addSubNode("TriggerEventCameraGD"));
        }
        inline void Object_Components::removeTriggerEventCameraGD()
        {
            getProperty().eraseUnionSetItem("TriggerEventCameraGD");
        }
        inline std::optional<Ent::Gen2::UnifiedPhysicsDataGD> Object_Components::UnifiedPhysicsDataGD()
        {
            return std::optional<Ent::Gen2::UnifiedPhysicsDataGD>(getSubNode("UnifiedPhysicsDataGD"));
        }
        inline Ent::Gen2::UnifiedPhysicsDataGD Object_Components::addUnifiedPhysicsDataGD()
        {
            return Ent::Gen2::UnifiedPhysicsDataGD(addSubNode("UnifiedPhysicsDataGD"));
        }
        inline void Object_Components::removeUnifiedPhysicsDataGD()
        {
            getProperty().eraseUnionSetItem("UnifiedPhysicsDataGD");
        }
        inline std::optional<Ent::Gen2::UnitTestComponent> Object_Components::UnitTestComponent()
        {
            return std::optional<Ent::Gen2::UnitTestComponent>(getSubNode("UnitTestComponent"));
        }
        inline Ent::Gen2::UnitTestComponent Object_Components::addUnitTestComponent()
        {
            return Ent::Gen2::UnitTestComponent(addSubNode("UnitTestComponent"));
        }
        inline void Object_Components::removeUnitTestComponent()
        {
            getProperty().eraseUnionSetItem("UnitTestComponent");
        }
        inline std::optional<Ent::Gen2::VelocityObstacleGD> Object_Components::VelocityObstacleGD()
        {
            return std::optional<Ent::Gen2::VelocityObstacleGD>(getSubNode("VelocityObstacleGD"));
        }
        inline Ent::Gen2::VelocityObstacleGD Object_Components::addVelocityObstacleGD()
        {
            return Ent::Gen2::VelocityObstacleGD(addSubNode("VelocityObstacleGD"));
        }
        inline void Object_Components::removeVelocityObstacleGD()
        {
            getProperty().eraseUnionSetItem("VelocityObstacleGD");
        }
        inline std::optional<Ent::Gen2::VisualGD> Object_Components::VisualGD()
        {
            return std::optional<Ent::Gen2::VisualGD>(getSubNode("VisualGD"));
        }
        inline Ent::Gen2::VisualGD Object_Components::addVisualGD()
        {
            return Ent::Gen2::VisualGD(addSubNode("VisualGD"));
        }
        inline void Object_Components::removeVisualGD()
        {
            getProperty().eraseUnionSetItem("VisualGD");
        }
        inline std::optional<Ent::Gen2::VolumeConstraintGD> Object_Components::VolumeConstraintGD()
        {
            return std::optional<Ent::Gen2::VolumeConstraintGD>(getSubNode("VolumeConstraintGD"));
        }
        inline Ent::Gen2::VolumeConstraintGD Object_Components::addVolumeConstraintGD()
        {
            return Ent::Gen2::VolumeConstraintGD(addSubNode("VolumeConstraintGD"));
        }
        inline void Object_Components::removeVolumeConstraintGD()
        {
            getProperty().eraseUnionSetItem("VolumeConstraintGD");
        }
        inline std::optional<Ent::Gen2::VoxelSimulationGD> Object_Components::VoxelSimulationGD()
        {
            return std::optional<Ent::Gen2::VoxelSimulationGD>(getSubNode("VoxelSimulationGD"));
        }
        inline Ent::Gen2::VoxelSimulationGD Object_Components::addVoxelSimulationGD()
        {
            return Ent::Gen2::VoxelSimulationGD(addSubNode("VoxelSimulationGD"));
        }
        inline void Object_Components::removeVoxelSimulationGD()
        {
            getProperty().eraseUnionSetItem("VoxelSimulationGD");
        }
        inline std::optional<Ent::Gen2::WallRunGD> Object_Components::WallRunGD()
        {
            return std::optional<Ent::Gen2::WallRunGD>(getSubNode("WallRunGD"));
        }
        inline Ent::Gen2::WallRunGD Object_Components::addWallRunGD()
        {
            return Ent::Gen2::WallRunGD(addSubNode("WallRunGD"));
        }
        inline void Object_Components::removeWallRunGD()
        {
            getProperty().eraseUnionSetItem("WallRunGD");
        }
        inline std::optional<Ent::Gen2::WildObject> Object_Components::WildObject()
        {
            return std::optional<Ent::Gen2::WildObject>(getSubNode("WildObject"));
        }
        inline Ent::Gen2::WildObject Object_Components::addWildObject()
        {
            return Ent::Gen2::WildObject(addSubNode("WildObject"));
        }
        inline void Object_Components::removeWildObject()
        {
            getProperty().eraseUnionSetItem("WildObject");
        }
        // GameEffect
        inline Ent::Gen2::Float GameEffect::Duration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Duration"));
        }
        inline Ent::Gen2::String GameEffect::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Float GameEffect::PerceptionDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PerceptionDistance"));
        }
        inline Ent::Gen2::Float GameEffect::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::RadiusChange GameEffect::RadiusChange() const
        {
            return Ent::Gen2::RadiusChange(getProperty().getObjectField("RadiusChange"));
        }
        inline Ent::Gen2::Float GameEffect::RadiusChangeDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadiusChangeDuration"));
        }
        inline Ent::Gen2::Float GameEffect::RadiusStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadiusStart"));
        }
        inline Ent::Gen2::Float GameEffect::RadiusStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadiusStop"));
        }
        inline Ent::Gen2::Component GameEffect::Super() const
        {
            return Ent::Gen2::Component(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float GameEffect::TimeBeforeStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TimeBeforeStart"));
        }
        inline Ent::Gen2::String GameEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // WindTurbulenceEffect
        inline Ent::Gen2::Float WindTurbulenceEffect::BendStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BendStrength"));
        }
        inline Ent::Gen2::Float WindTurbulenceEffect::GlobalStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GlobalStrength"));
        }
        inline Ent::Gen2::GameEffect WindTurbulenceEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float WindTurbulenceEffect::TurbulenceStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TurbulenceStrength"));
        }
        inline Ent::Gen2::Bool WindTurbulenceEffect::UseGlobalStrength() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseGlobalStrength"));
        }
        inline Ent::Gen2::Float WindTurbulenceEffect::WindShakeStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WindShakeStrength"));
        }
        inline Ent::Gen2::WindTurbulenceType WindTurbulenceEffect::WindTurbulenceType() const
        {
            return Ent::Gen2::WindTurbulenceType(getProperty().getObjectField("WindTurbulenceType"));
        }
        inline Ent::Gen2::String WindTurbulenceEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ShakeEffect
        inline Ent::Gen2::Float ShakeEffect::DistanceAttenuation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceAttenuation"));
        }
        inline Ent::Gen2::Float ShakeEffect::Strength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Strength"));
        }
        inline Ent::Gen2::GameEffect ShakeEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ShakeEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RepulseEffect
        inline Ent::Gen2::Bool RepulseEffect::ApplyOnTrees() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ApplyOnTrees"));
        }
        inline Ent::Gen2::Float RepulseEffect::DistanceAttenuation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceAttenuation"));
        }
        inline Ent::Gen2::Float RepulseEffect::Strength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Strength"));
        }
        inline Ent::Gen2::GameEffect RepulseEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String RepulseEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RegenEffect
        inline Ent::Gen2::EnergyValue RegenEffect::EnergyValue() const
        {
            return Ent::Gen2::EnergyValue(getProperty().getObjectField("EnergyValue"));
        }
        inline Ent::Gen2::RegenField RegenEffect::Field() const
        {
            return Ent::Gen2::RegenField(getProperty().getObjectField("Field"));
        }
        inline Ent::Gen2::Float RegenEffect::InnerMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InnerMultiplier"));
        }
        inline Ent::Gen2::Float RegenEffect::InnerRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InnerRadius"));
        }
        inline Ent::Gen2::Float RegenEffect::Margin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Margin"));
        }
        inline Ent::Gen2::Float RegenEffect::OuterMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("OuterMultiplier"));
        }
        inline Ent::Gen2::EnergySide RegenEffect::State() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("State"));
        }
        inline Ent::Gen2::GameEffect RegenEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool RegenEffect::UseNewRegen() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseNewRegen"));
        }
        inline Ent::Gen2::String RegenEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FollowerCallEffect
        inline Ent::Gen2::String FollowerCallEffect::CallType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("CallType"));
        }
        inline Ent::Gen2::Bool FollowerCallEffect::QuickOrder() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("QuickOrder"));
        }
        inline Ent::Gen2::Specie FollowerCallEffect::Specie() const
        {
            return Ent::Gen2::Specie(getProperty().getObjectField("Specie"));
        }
        inline Ent::Gen2::GameEffect FollowerCallEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String FollowerCallEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // FluidEffect
        inline Ent::Gen2::Bool FluidEffect::DisplayFX() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayFX"));
        }
        inline Ent::Gen2::EnergySide FluidEffect::EnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::GameEffect FluidEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float FluidEffect::VolumePerSecond() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VolumePerSecond"));
        }
        inline Ent::Gen2::String FluidEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CallForHelpEffect
        inline Ent::Gen2::String CallForHelpEffect::CallType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("CallType"));
        }
        inline Ent::Gen2::GameEffect CallForHelpEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CallForHelpEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BeamEffect
        inline Ent::Gen2::Bool BeamEffect::AlwaysActive() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AlwaysActive"));
        }
        inline Ent::Gen2::Bool BeamEffect::AutoChose() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AutoChose"));
        }
        inline Ent::Gen2::Bool BeamEffect::CheckForTrees() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CheckForTrees"));
        }
        inline Ent::Gen2::Bool BeamEffect::EmittedByEnvironment() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EmittedByEnvironment"));
        }
        inline Ent::Gen2::FreezeData BeamEffect::FreezeData() const
        {
            return Ent::Gen2::FreezeData(getProperty().getObjectField("FreezeData"));
        }
        inline Ent::Gen2::Float BeamEffect::Impact() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Impact"));
        }
        inline Ent::Gen2::Bool BeamEffect::OneShot() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("OneShot"));
        }
        inline Ent::Gen2::Float BeamEffect::Power() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Power"));
        }
        inline Ent::Gen2::Float BeamEffect::ProjectileShieldRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ProjectileShieldRadius"));
        }
        inline Ent::Gen2::EnergySide BeamEffect::Side() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("Side"));
        }
        inline Ent::Gen2::GameEffect BeamEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BeamEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BeamDetectionEffect
        inline Ent::Gen2::GameEffect BeamDetectionEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BeamDetectionEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Components
        inline char const* Components::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::AIContextGD> Components::AIContextGD()
        {
            return std::optional<Ent::Gen2::AIContextGD>(getSubNode("AIContextGD"));
        }
        inline Ent::Gen2::AIContextGD Components::addAIContextGD()
        {
            return Ent::Gen2::AIContextGD(addSubNode("AIContextGD"));
        }
        inline void Components::removeAIContextGD()
        {
            getProperty().eraseUnionSetItem("AIContextGD");
        }
        inline std::optional<Ent::Gen2::ActorGD> Components::ActorGD()
        {
            return std::optional<Ent::Gen2::ActorGD>(getSubNode("ActorGD"));
        }
        inline Ent::Gen2::ActorGD Components::addActorGD()
        {
            return Ent::Gen2::ActorGD(addSubNode("ActorGD"));
        }
        inline void Components::removeActorGD()
        {
            getProperty().eraseUnionSetItem("ActorGD");
        }
        inline std::optional<Ent::Gen2::AnimationControllerGD> Components::AnimationControllerGD()
        {
            return std::optional<Ent::Gen2::AnimationControllerGD>(getSubNode("AnimationControllerGD"));
        }
        inline Ent::Gen2::AnimationControllerGD Components::addAnimationControllerGD()
        {
            return Ent::Gen2::AnimationControllerGD(addSubNode("AnimationControllerGD"));
        }
        inline void Components::removeAnimationControllerGD()
        {
            getProperty().eraseUnionSetItem("AnimationControllerGD");
        }
        inline std::optional<Ent::Gen2::AnimationEventsGeneratorGD> Components::AnimationEventsGeneratorGD()
        {
            return std::optional<Ent::Gen2::AnimationEventsGeneratorGD>(getSubNode("AnimationEventsGeneratorGD"));
        }
        inline Ent::Gen2::AnimationEventsGeneratorGD Components::addAnimationEventsGeneratorGD()
        {
            return Ent::Gen2::AnimationEventsGeneratorGD(addSubNode("AnimationEventsGeneratorGD"));
        }
        inline void Components::removeAnimationEventsGeneratorGD()
        {
            getProperty().eraseUnionSetItem("AnimationEventsGeneratorGD");
        }
        inline std::optional<Ent::Gen2::AnimationGenericConstraintsGD> Components::AnimationGenericConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationGenericConstraintsGD>(getSubNode("AnimationGenericConstraintsGD"));
        }
        inline Ent::Gen2::AnimationGenericConstraintsGD Components::addAnimationGenericConstraintsGD()
        {
            return Ent::Gen2::AnimationGenericConstraintsGD(addSubNode("AnimationGenericConstraintsGD"));
        }
        inline void Components::removeAnimationGenericConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationGenericConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationHitsConstraintsGD> Components::AnimationHitsConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationHitsConstraintsGD>(getSubNode("AnimationHitsConstraintsGD"));
        }
        inline Ent::Gen2::AnimationHitsConstraintsGD Components::addAnimationHitsConstraintsGD()
        {
            return Ent::Gen2::AnimationHitsConstraintsGD(addSubNode("AnimationHitsConstraintsGD"));
        }
        inline void Components::removeAnimationHitsConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationHitsConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationLegsConstraintsGD> Components::AnimationLegsConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationLegsConstraintsGD>(getSubNode("AnimationLegsConstraintsGD"));
        }
        inline Ent::Gen2::AnimationLegsConstraintsGD Components::addAnimationLegsConstraintsGD()
        {
            return Ent::Gen2::AnimationLegsConstraintsGD(addSubNode("AnimationLegsConstraintsGD"));
        }
        inline void Components::removeAnimationLegsConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationLegsConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationModelGD> Components::AnimationModelGD()
        {
            return std::optional<Ent::Gen2::AnimationModelGD>(getSubNode("AnimationModelGD"));
        }
        inline Ent::Gen2::AnimationModelGD Components::addAnimationModelGD()
        {
            return Ent::Gen2::AnimationModelGD(addSubNode("AnimationModelGD"));
        }
        inline void Components::removeAnimationModelGD()
        {
            getProperty().eraseUnionSetItem("AnimationModelGD");
        }
        inline std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD> Components::AnimationPhysicsChainConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationPhysicsChainConstraintsGD>(getSubNode("AnimationPhysicsChainConstraintsGD"));
        }
        inline Ent::Gen2::AnimationPhysicsChainConstraintsGD Components::addAnimationPhysicsChainConstraintsGD()
        {
            return Ent::Gen2::AnimationPhysicsChainConstraintsGD(addSubNode("AnimationPhysicsChainConstraintsGD"));
        }
        inline void Components::removeAnimationPhysicsChainConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationPhysicsChainConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationPlaylistGD> Components::AnimationPlaylistGD()
        {
            return std::optional<Ent::Gen2::AnimationPlaylistGD>(getSubNode("AnimationPlaylistGD"));
        }
        inline Ent::Gen2::AnimationPlaylistGD Components::addAnimationPlaylistGD()
        {
            return Ent::Gen2::AnimationPlaylistGD(addSubNode("AnimationPlaylistGD"));
        }
        inline void Components::removeAnimationPlaylistGD()
        {
            getProperty().eraseUnionSetItem("AnimationPlaylistGD");
        }
        inline std::optional<Ent::Gen2::AnimationTailConstraintsGD> Components::AnimationTailConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationTailConstraintsGD>(getSubNode("AnimationTailConstraintsGD"));
        }
        inline Ent::Gen2::AnimationTailConstraintsGD Components::addAnimationTailConstraintsGD()
        {
            return Ent::Gen2::AnimationTailConstraintsGD(addSubNode("AnimationTailConstraintsGD"));
        }
        inline void Components::removeAnimationTailConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationTailConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AnimationTransformDriverGD> Components::AnimationTransformDriverGD()
        {
            return std::optional<Ent::Gen2::AnimationTransformDriverGD>(getSubNode("AnimationTransformDriverGD"));
        }
        inline Ent::Gen2::AnimationTransformDriverGD Components::addAnimationTransformDriverGD()
        {
            return Ent::Gen2::AnimationTransformDriverGD(addSubNode("AnimationTransformDriverGD"));
        }
        inline void Components::removeAnimationTransformDriverGD()
        {
            getProperty().eraseUnionSetItem("AnimationTransformDriverGD");
        }
        inline std::optional<Ent::Gen2::AnimationTreeConstraintsGD> Components::AnimationTreeConstraintsGD()
        {
            return std::optional<Ent::Gen2::AnimationTreeConstraintsGD>(getSubNode("AnimationTreeConstraintsGD"));
        }
        inline Ent::Gen2::AnimationTreeConstraintsGD Components::addAnimationTreeConstraintsGD()
        {
            return Ent::Gen2::AnimationTreeConstraintsGD(addSubNode("AnimationTreeConstraintsGD"));
        }
        inline void Components::removeAnimationTreeConstraintsGD()
        {
            getProperty().eraseUnionSetItem("AnimationTreeConstraintsGD");
        }
        inline std::optional<Ent::Gen2::AssemblyGD> Components::AssemblyGD()
        {
            return std::optional<Ent::Gen2::AssemblyGD>(getSubNode("AssemblyGD"));
        }
        inline Ent::Gen2::AssemblyGD Components::addAssemblyGD()
        {
            return Ent::Gen2::AssemblyGD(addSubNode("AssemblyGD"));
        }
        inline void Components::removeAssemblyGD()
        {
            getProperty().eraseUnionSetItem("AssemblyGD");
        }
        inline std::optional<Ent::Gen2::AttackComponentGD> Components::AttackComponentGD()
        {
            return std::optional<Ent::Gen2::AttackComponentGD>(getSubNode("AttackComponentGD"));
        }
        inline Ent::Gen2::AttackComponentGD Components::addAttackComponentGD()
        {
            return Ent::Gen2::AttackComponentGD(addSubNode("AttackComponentGD"));
        }
        inline void Components::removeAttackComponentGD()
        {
            getProperty().eraseUnionSetItem("AttackComponentGD");
        }
        inline std::optional<Ent::Gen2::AttackTriggerGD> Components::AttackTriggerGD()
        {
            return std::optional<Ent::Gen2::AttackTriggerGD>(getSubNode("AttackTriggerGD"));
        }
        inline Ent::Gen2::AttackTriggerGD Components::addAttackTriggerGD()
        {
            return Ent::Gen2::AttackTriggerGD(addSubNode("AttackTriggerGD"));
        }
        inline void Components::removeAttackTriggerGD()
        {
            getProperty().eraseUnionSetItem("AttackTriggerGD");
        }
        inline std::optional<Ent::Gen2::BeamTargetGD> Components::BeamTargetGD()
        {
            return std::optional<Ent::Gen2::BeamTargetGD>(getSubNode("BeamTargetGD"));
        }
        inline Ent::Gen2::BeamTargetGD Components::addBeamTargetGD()
        {
            return Ent::Gen2::BeamTargetGD(addSubNode("BeamTargetGD"));
        }
        inline void Components::removeBeamTargetGD()
        {
            getProperty().eraseUnionSetItem("BeamTargetGD");
        }
        inline std::optional<Ent::Gen2::BittenGD> Components::BittenGD()
        {
            return std::optional<Ent::Gen2::BittenGD>(getSubNode("BittenGD"));
        }
        inline Ent::Gen2::BittenGD Components::addBittenGD()
        {
            return Ent::Gen2::BittenGD(addSubNode("BittenGD"));
        }
        inline void Components::removeBittenGD()
        {
            getProperty().eraseUnionSetItem("BittenGD");
        }
        inline std::optional<Ent::Gen2::BoidsGD> Components::BoidsGD()
        {
            return std::optional<Ent::Gen2::BoidsGD>(getSubNode("BoidsGD"));
        }
        inline Ent::Gen2::BoidsGD Components::addBoidsGD()
        {
            return Ent::Gen2::BoidsGD(addSubNode("BoidsGD"));
        }
        inline void Components::removeBoidsGD()
        {
            getProperty().eraseUnionSetItem("BoidsGD");
        }
        inline std::optional<Ent::Gen2::BreakableGD> Components::BreakableGD()
        {
            return std::optional<Ent::Gen2::BreakableGD>(getSubNode("BreakableGD"));
        }
        inline Ent::Gen2::BreakableGD Components::addBreakableGD()
        {
            return Ent::Gen2::BreakableGD(addSubNode("BreakableGD"));
        }
        inline void Components::removeBreakableGD()
        {
            getProperty().eraseUnionSetItem("BreakableGD");
        }
        inline std::optional<Ent::Gen2::CameraDataGD> Components::CameraDataGD()
        {
            return std::optional<Ent::Gen2::CameraDataGD>(getSubNode("CameraDataGD"));
        }
        inline Ent::Gen2::CameraDataGD Components::addCameraDataGD()
        {
            return Ent::Gen2::CameraDataGD(addSubNode("CameraDataGD"));
        }
        inline void Components::removeCameraDataGD()
        {
            getProperty().eraseUnionSetItem("CameraDataGD");
        }
        inline std::optional<Ent::Gen2::CameraSetterGD> Components::CameraSetterGD()
        {
            return std::optional<Ent::Gen2::CameraSetterGD>(getSubNode("CameraSetterGD"));
        }
        inline Ent::Gen2::CameraSetterGD Components::addCameraSetterGD()
        {
            return Ent::Gen2::CameraSetterGD(addSubNode("CameraSetterGD"));
        }
        inline void Components::removeCameraSetterGD()
        {
            getProperty().eraseUnionSetItem("CameraSetterGD");
        }
        inline std::optional<Ent::Gen2::CharacterControllerGD> Components::CharacterControllerGD()
        {
            return std::optional<Ent::Gen2::CharacterControllerGD>(getSubNode("CharacterControllerGD"));
        }
        inline Ent::Gen2::CharacterControllerGD Components::addCharacterControllerGD()
        {
            return Ent::Gen2::CharacterControllerGD(addSubNode("CharacterControllerGD"));
        }
        inline void Components::removeCharacterControllerGD()
        {
            getProperty().eraseUnionSetItem("CharacterControllerGD");
        }
        inline std::optional<Ent::Gen2::CharacterPlatformGD> Components::CharacterPlatformGD()
        {
            return std::optional<Ent::Gen2::CharacterPlatformGD>(getSubNode("CharacterPlatformGD"));
        }
        inline Ent::Gen2::CharacterPlatformGD Components::addCharacterPlatformGD()
        {
            return Ent::Gen2::CharacterPlatformGD(addSubNode("CharacterPlatformGD"));
        }
        inline void Components::removeCharacterPlatformGD()
        {
            getProperty().eraseUnionSetItem("CharacterPlatformGD");
        }
        inline std::optional<Ent::Gen2::ChargedJumpGD> Components::ChargedJumpGD()
        {
            return std::optional<Ent::Gen2::ChargedJumpGD>(getSubNode("ChargedJumpGD"));
        }
        inline Ent::Gen2::ChargedJumpGD Components::addChargedJumpGD()
        {
            return Ent::Gen2::ChargedJumpGD(addSubNode("ChargedJumpGD"));
        }
        inline void Components::removeChargedJumpGD()
        {
            getProperty().eraseUnionSetItem("ChargedJumpGD");
        }
        inline std::optional<Ent::Gen2::ChildEntityPoolComponentGD> Components::ChildEntityPoolComponentGD()
        {
            return std::optional<Ent::Gen2::ChildEntityPoolComponentGD>(getSubNode("ChildEntityPoolComponentGD"));
        }
        inline Ent::Gen2::ChildEntityPoolComponentGD Components::addChildEntityPoolComponentGD()
        {
            return Ent::Gen2::ChildEntityPoolComponentGD(addSubNode("ChildEntityPoolComponentGD"));
        }
        inline void Components::removeChildEntityPoolComponentGD()
        {
            getProperty().eraseUnionSetItem("ChildEntityPoolComponentGD");
        }
        inline std::optional<Ent::Gen2::CinematicGD> Components::CinematicGD()
        {
            return std::optional<Ent::Gen2::CinematicGD>(getSubNode("CinematicGD"));
        }
        inline Ent::Gen2::CinematicGD Components::addCinematicGD()
        {
            return Ent::Gen2::CinematicGD(addSubNode("CinematicGD"));
        }
        inline void Components::removeCinematicGD()
        {
            getProperty().eraseUnionSetItem("CinematicGD");
        }
        inline std::optional<Ent::Gen2::ClothAnimationGD> Components::ClothAnimationGD()
        {
            return std::optional<Ent::Gen2::ClothAnimationGD>(getSubNode("ClothAnimationGD"));
        }
        inline Ent::Gen2::ClothAnimationGD Components::addClothAnimationGD()
        {
            return Ent::Gen2::ClothAnimationGD(addSubNode("ClothAnimationGD"));
        }
        inline void Components::removeClothAnimationGD()
        {
            getProperty().eraseUnionSetItem("ClothAnimationGD");
        }
        inline std::optional<Ent::Gen2::ClothGD> Components::ClothGD()
        {
            return std::optional<Ent::Gen2::ClothGD>(getSubNode("ClothGD"));
        }
        inline Ent::Gen2::ClothGD Components::addClothGD()
        {
            return Ent::Gen2::ClothGD(addSubNode("ClothGD"));
        }
        inline void Components::removeClothGD()
        {
            getProperty().eraseUnionSetItem("ClothGD");
        }
        inline std::optional<Ent::Gen2::ComponentWithProtoCodeGD> Components::ComponentWithProtoCodeGD()
        {
            return std::optional<Ent::Gen2::ComponentWithProtoCodeGD>(getSubNode("ComponentWithProtoCodeGD"));
        }
        inline Ent::Gen2::ComponentWithProtoCodeGD Components::addComponentWithProtoCodeGD()
        {
            return Ent::Gen2::ComponentWithProtoCodeGD(addSubNode("ComponentWithProtoCodeGD"));
        }
        inline void Components::removeComponentWithProtoCodeGD()
        {
            getProperty().eraseUnionSetItem("ComponentWithProtoCodeGD");
        }
        inline std::optional<Ent::Gen2::ConnectorGD> Components::ConnectorGD()
        {
            return std::optional<Ent::Gen2::ConnectorGD>(getSubNode("ConnectorGD"));
        }
        inline Ent::Gen2::ConnectorGD Components::addConnectorGD()
        {
            return Ent::Gen2::ConnectorGD(addSubNode("ConnectorGD"));
        }
        inline void Components::removeConnectorGD()
        {
            getProperty().eraseUnionSetItem("ConnectorGD");
        }
        inline std::optional<Ent::Gen2::ConstrainedMoveGD> Components::ConstrainedMoveGD()
        {
            return std::optional<Ent::Gen2::ConstrainedMoveGD>(getSubNode("ConstrainedMoveGD"));
        }
        inline Ent::Gen2::ConstrainedMoveGD Components::addConstrainedMoveGD()
        {
            return Ent::Gen2::ConstrainedMoveGD(addSubNode("ConstrainedMoveGD"));
        }
        inline void Components::removeConstrainedMoveGD()
        {
            getProperty().eraseUnionSetItem("ConstrainedMoveGD");
        }
        inline std::optional<Ent::Gen2::CreatureAIGD> Components::CreatureAIGD()
        {
            return std::optional<Ent::Gen2::CreatureAIGD>(getSubNode("CreatureAIGD"));
        }
        inline Ent::Gen2::CreatureAIGD Components::addCreatureAIGD()
        {
            return Ent::Gen2::CreatureAIGD(addSubNode("CreatureAIGD"));
        }
        inline void Components::removeCreatureAIGD()
        {
            getProperty().eraseUnionSetItem("CreatureAIGD");
        }
        inline std::optional<Ent::Gen2::CreatureGD> Components::CreatureGD()
        {
            return std::optional<Ent::Gen2::CreatureGD>(getSubNode("CreatureGD"));
        }
        inline Ent::Gen2::CreatureGD Components::addCreatureGD()
        {
            return Ent::Gen2::CreatureGD(addSubNode("CreatureGD"));
        }
        inline void Components::removeCreatureGD()
        {
            getProperty().eraseUnionSetItem("CreatureGD");
        }
        inline std::optional<Ent::Gen2::CreatureUIGD> Components::CreatureUIGD()
        {
            return std::optional<Ent::Gen2::CreatureUIGD>(getSubNode("CreatureUIGD"));
        }
        inline Ent::Gen2::CreatureUIGD Components::addCreatureUIGD()
        {
            return Ent::Gen2::CreatureUIGD(addSubNode("CreatureUIGD"));
        }
        inline void Components::removeCreatureUIGD()
        {
            getProperty().eraseUnionSetItem("CreatureUIGD");
        }
        inline std::optional<Ent::Gen2::CustomThumbnail> Components::CustomThumbnail()
        {
            return std::optional<Ent::Gen2::CustomThumbnail>(getSubNode("CustomThumbnail"));
        }
        inline Ent::Gen2::CustomThumbnail Components::addCustomThumbnail()
        {
            return Ent::Gen2::CustomThumbnail(addSubNode("CustomThumbnail"));
        }
        inline void Components::removeCustomThumbnail()
        {
            getProperty().eraseUnionSetItem("CustomThumbnail");
        }
        inline std::optional<Ent::Gen2::DebugGridGD> Components::DebugGridGD()
        {
            return std::optional<Ent::Gen2::DebugGridGD>(getSubNode("DebugGridGD"));
        }
        inline Ent::Gen2::DebugGridGD Components::addDebugGridGD()
        {
            return Ent::Gen2::DebugGridGD(addSubNode("DebugGridGD"));
        }
        inline void Components::removeDebugGridGD()
        {
            getProperty().eraseUnionSetItem("DebugGridGD");
        }
        inline std::optional<Ent::Gen2::DistanceTriggerGD> Components::DistanceTriggerGD()
        {
            return std::optional<Ent::Gen2::DistanceTriggerGD>(getSubNode("DistanceTriggerGD"));
        }
        inline Ent::Gen2::DistanceTriggerGD Components::addDistanceTriggerGD()
        {
            return Ent::Gen2::DistanceTriggerGD(addSubNode("DistanceTriggerGD"));
        }
        inline void Components::removeDistanceTriggerGD()
        {
            getProperty().eraseUnionSetItem("DistanceTriggerGD");
        }
        inline std::optional<Ent::Gen2::DiveAttackGD> Components::DiveAttackGD()
        {
            return std::optional<Ent::Gen2::DiveAttackGD>(getSubNode("DiveAttackGD"));
        }
        inline Ent::Gen2::DiveAttackGD Components::addDiveAttackGD()
        {
            return Ent::Gen2::DiveAttackGD(addSubNode("DiveAttackGD"));
        }
        inline void Components::removeDiveAttackGD()
        {
            getProperty().eraseUnionSetItem("DiveAttackGD");
        }
        inline std::optional<Ent::Gen2::DummyComponentGD> Components::DummyComponentGD()
        {
            return std::optional<Ent::Gen2::DummyComponentGD>(getSubNode("DummyComponentGD"));
        }
        inline Ent::Gen2::DummyComponentGD Components::addDummyComponentGD()
        {
            return Ent::Gen2::DummyComponentGD(addSubNode("DummyComponentGD"));
        }
        inline void Components::removeDummyComponentGD()
        {
            getProperty().eraseUnionSetItem("DummyComponentGD");
        }
        inline std::optional<Ent::Gen2::EnergyCrookGD> Components::EnergyCrookGD()
        {
            return std::optional<Ent::Gen2::EnergyCrookGD>(getSubNode("EnergyCrookGD"));
        }
        inline Ent::Gen2::EnergyCrookGD Components::addEnergyCrookGD()
        {
            return Ent::Gen2::EnergyCrookGD(addSubNode("EnergyCrookGD"));
        }
        inline void Components::removeEnergyCrookGD()
        {
            getProperty().eraseUnionSetItem("EnergyCrookGD");
        }
        inline std::optional<Ent::Gen2::EnergyDrainGD> Components::EnergyDrainGD()
        {
            return std::optional<Ent::Gen2::EnergyDrainGD>(getSubNode("EnergyDrainGD"));
        }
        inline Ent::Gen2::EnergyDrainGD Components::addEnergyDrainGD()
        {
            return Ent::Gen2::EnergyDrainGD(addSubNode("EnergyDrainGD"));
        }
        inline void Components::removeEnergyDrainGD()
        {
            getProperty().eraseUnionSetItem("EnergyDrainGD");
        }
        inline std::optional<Ent::Gen2::EnergyNetworkListenerGD> Components::EnergyNetworkListenerGD()
        {
            return std::optional<Ent::Gen2::EnergyNetworkListenerGD>(getSubNode("EnergyNetworkListenerGD"));
        }
        inline Ent::Gen2::EnergyNetworkListenerGD Components::addEnergyNetworkListenerGD()
        {
            return Ent::Gen2::EnergyNetworkListenerGD(addSubNode("EnergyNetworkListenerGD"));
        }
        inline void Components::removeEnergyNetworkListenerGD()
        {
            getProperty().eraseUnionSetItem("EnergyNetworkListenerGD");
        }
        inline std::optional<Ent::Gen2::EnergyPoolGD> Components::EnergyPoolGD()
        {
            return std::optional<Ent::Gen2::EnergyPoolGD>(getSubNode("EnergyPoolGD"));
        }
        inline Ent::Gen2::EnergyPoolGD Components::addEnergyPoolGD()
        {
            return Ent::Gen2::EnergyPoolGD(addSubNode("EnergyPoolGD"));
        }
        inline void Components::removeEnergyPoolGD()
        {
            getProperty().eraseUnionSetItem("EnergyPoolGD");
        }
        inline std::optional<Ent::Gen2::EnergySideSwitcherGD> Components::EnergySideSwitcherGD()
        {
            return std::optional<Ent::Gen2::EnergySideSwitcherGD>(getSubNode("EnergySideSwitcherGD"));
        }
        inline Ent::Gen2::EnergySideSwitcherGD Components::addEnergySideSwitcherGD()
        {
            return Ent::Gen2::EnergySideSwitcherGD(addSubNode("EnergySideSwitcherGD"));
        }
        inline void Components::removeEnergySideSwitcherGD()
        {
            getProperty().eraseUnionSetItem("EnergySideSwitcherGD");
        }
        inline std::optional<Ent::Gen2::EnergySpoutGD> Components::EnergySpoutGD()
        {
            return std::optional<Ent::Gen2::EnergySpoutGD>(getSubNode("EnergySpoutGD"));
        }
        inline Ent::Gen2::EnergySpoutGD Components::addEnergySpoutGD()
        {
            return Ent::Gen2::EnergySpoutGD(addSubNode("EnergySpoutGD"));
        }
        inline void Components::removeEnergySpoutGD()
        {
            getProperty().eraseUnionSetItem("EnergySpoutGD");
        }
        inline std::optional<Ent::Gen2::EnvStampGD> Components::EnvStampGD()
        {
            return std::optional<Ent::Gen2::EnvStampGD>(getSubNode("EnvStampGD"));
        }
        inline Ent::Gen2::EnvStampGD Components::addEnvStampGD()
        {
            return Ent::Gen2::EnvStampGD(addSubNode("EnvStampGD"));
        }
        inline void Components::removeEnvStampGD()
        {
            getProperty().eraseUnionSetItem("EnvStampGD");
        }
        inline std::optional<Ent::Gen2::EventHandlerGD> Components::EventHandlerGD()
        {
            return std::optional<Ent::Gen2::EventHandlerGD>(getSubNode("EventHandlerGD"));
        }
        inline Ent::Gen2::EventHandlerGD Components::addEventHandlerGD()
        {
            return Ent::Gen2::EventHandlerGD(addSubNode("EventHandlerGD"));
        }
        inline void Components::removeEventHandlerGD()
        {
            getProperty().eraseUnionSetItem("EventHandlerGD");
        }
        inline std::optional<Ent::Gen2::EventTriggerGD> Components::EventTriggerGD()
        {
            return std::optional<Ent::Gen2::EventTriggerGD>(getSubNode("EventTriggerGD"));
        }
        inline Ent::Gen2::EventTriggerGD Components::addEventTriggerGD()
        {
            return Ent::Gen2::EventTriggerGD(addSubNode("EventTriggerGD"));
        }
        inline void Components::removeEventTriggerGD()
        {
            getProperty().eraseUnionSetItem("EventTriggerGD");
        }
        inline std::optional<Ent::Gen2::FightDistanceTriggerGD> Components::FightDistanceTriggerGD()
        {
            return std::optional<Ent::Gen2::FightDistanceTriggerGD>(getSubNode("FightDistanceTriggerGD"));
        }
        inline Ent::Gen2::FightDistanceTriggerGD Components::addFightDistanceTriggerGD()
        {
            return Ent::Gen2::FightDistanceTriggerGD(addSubNode("FightDistanceTriggerGD"));
        }
        inline void Components::removeFightDistanceTriggerGD()
        {
            getProperty().eraseUnionSetItem("FightDistanceTriggerGD");
        }
        inline std::optional<Ent::Gen2::FireSensorGD> Components::FireSensorGD()
        {
            return std::optional<Ent::Gen2::FireSensorGD>(getSubNode("FireSensorGD"));
        }
        inline Ent::Gen2::FireSensorGD Components::addFireSensorGD()
        {
            return Ent::Gen2::FireSensorGD(addSubNode("FireSensorGD"));
        }
        inline void Components::removeFireSensorGD()
        {
            getProperty().eraseUnionSetItem("FireSensorGD");
        }
        inline std::optional<Ent::Gen2::FluidFXEntitySpawnerGD> Components::FluidFXEntitySpawnerGD()
        {
            return std::optional<Ent::Gen2::FluidFXEntitySpawnerGD>(getSubNode("FluidFXEntitySpawnerGD"));
        }
        inline Ent::Gen2::FluidFXEntitySpawnerGD Components::addFluidFXEntitySpawnerGD()
        {
            return Ent::Gen2::FluidFXEntitySpawnerGD(addSubNode("FluidFXEntitySpawnerGD"));
        }
        inline void Components::removeFluidFXEntitySpawnerGD()
        {
            getProperty().eraseUnionSetItem("FluidFXEntitySpawnerGD");
        }
        inline std::optional<Ent::Gen2::FluidGD> Components::FluidGD()
        {
            return std::optional<Ent::Gen2::FluidGD>(getSubNode("FluidGD"));
        }
        inline Ent::Gen2::FluidGD Components::addFluidGD()
        {
            return Ent::Gen2::FluidGD(addSubNode("FluidGD"));
        }
        inline void Components::removeFluidGD()
        {
            getProperty().eraseUnionSetItem("FluidGD");
        }
        inline std::optional<Ent::Gen2::FluidViewGD> Components::FluidViewGD()
        {
            return std::optional<Ent::Gen2::FluidViewGD>(getSubNode("FluidViewGD"));
        }
        inline Ent::Gen2::FluidViewGD Components::addFluidViewGD()
        {
            return Ent::Gen2::FluidViewGD(addSubNode("FluidViewGD"));
        }
        inline void Components::removeFluidViewGD()
        {
            getProperty().eraseUnionSetItem("FluidViewGD");
        }
        inline std::optional<Ent::Gen2::FluidVolumeComponentGD> Components::FluidVolumeComponentGD()
        {
            return std::optional<Ent::Gen2::FluidVolumeComponentGD>(getSubNode("FluidVolumeComponentGD"));
        }
        inline Ent::Gen2::FluidVolumeComponentGD Components::addFluidVolumeComponentGD()
        {
            return Ent::Gen2::FluidVolumeComponentGD(addSubNode("FluidVolumeComponentGD"));
        }
        inline void Components::removeFluidVolumeComponentGD()
        {
            getProperty().eraseUnionSetItem("FluidVolumeComponentGD");
        }
        inline std::optional<Ent::Gen2::FurComponentGD> Components::FurComponentGD()
        {
            return std::optional<Ent::Gen2::FurComponentGD>(getSubNode("FurComponentGD"));
        }
        inline Ent::Gen2::FurComponentGD Components::addFurComponentGD()
        {
            return Ent::Gen2::FurComponentGD(addSubNode("FurComponentGD"));
        }
        inline void Components::removeFurComponentGD()
        {
            getProperty().eraseUnionSetItem("FurComponentGD");
        }
        inline std::optional<Ent::Gen2::GameEffectSpawnerGD> Components::GameEffectSpawnerGD()
        {
            return std::optional<Ent::Gen2::GameEffectSpawnerGD>(getSubNode("GameEffectSpawnerGD"));
        }
        inline Ent::Gen2::GameEffectSpawnerGD Components::addGameEffectSpawnerGD()
        {
            return Ent::Gen2::GameEffectSpawnerGD(addSubNode("GameEffectSpawnerGD"));
        }
        inline void Components::removeGameEffectSpawnerGD()
        {
            getProperty().eraseUnionSetItem("GameEffectSpawnerGD");
        }
        inline std::optional<Ent::Gen2::GraspableGD> Components::GraspableGD()
        {
            return std::optional<Ent::Gen2::GraspableGD>(getSubNode("GraspableGD"));
        }
        inline Ent::Gen2::GraspableGD Components::addGraspableGD()
        {
            return Ent::Gen2::GraspableGD(addSubNode("GraspableGD"));
        }
        inline void Components::removeGraspableGD()
        {
            getProperty().eraseUnionSetItem("GraspableGD");
        }
        inline std::optional<Ent::Gen2::GrasperGD> Components::GrasperGD()
        {
            return std::optional<Ent::Gen2::GrasperGD>(getSubNode("GrasperGD"));
        }
        inline Ent::Gen2::GrasperGD Components::addGrasperGD()
        {
            return Ent::Gen2::GrasperGD(addSubNode("GrasperGD"));
        }
        inline void Components::removeGrasperGD()
        {
            getProperty().eraseUnionSetItem("GrasperGD");
        }
        inline std::optional<Ent::Gen2::GroundTypeSamplerGD> Components::GroundTypeSamplerGD()
        {
            return std::optional<Ent::Gen2::GroundTypeSamplerGD>(getSubNode("GroundTypeSamplerGD"));
        }
        inline Ent::Gen2::GroundTypeSamplerGD Components::addGroundTypeSamplerGD()
        {
            return Ent::Gen2::GroundTypeSamplerGD(addSubNode("GroundTypeSamplerGD"));
        }
        inline void Components::removeGroundTypeSamplerGD()
        {
            getProperty().eraseUnionSetItem("GroundTypeSamplerGD");
        }
        inline std::optional<Ent::Gen2::HealPumpGD> Components::HealPumpGD()
        {
            return std::optional<Ent::Gen2::HealPumpGD>(getSubNode("HealPumpGD"));
        }
        inline Ent::Gen2::HealPumpGD Components::addHealPumpGD()
        {
            return Ent::Gen2::HealPumpGD(addSubNode("HealPumpGD"));
        }
        inline void Components::removeHealPumpGD()
        {
            getProperty().eraseUnionSetItem("HealPumpGD");
        }
        inline std::optional<Ent::Gen2::HealTriggerGD> Components::HealTriggerGD()
        {
            return std::optional<Ent::Gen2::HealTriggerGD>(getSubNode("HealTriggerGD"));
        }
        inline Ent::Gen2::HealTriggerGD Components::addHealTriggerGD()
        {
            return Ent::Gen2::HealTriggerGD(addSubNode("HealTriggerGD"));
        }
        inline void Components::removeHealTriggerGD()
        {
            getProperty().eraseUnionSetItem("HealTriggerGD");
        }
        inline std::optional<Ent::Gen2::HealerGD> Components::HealerGD()
        {
            return std::optional<Ent::Gen2::HealerGD>(getSubNode("HealerGD"));
        }
        inline Ent::Gen2::HealerGD Components::addHealerGD()
        {
            return Ent::Gen2::HealerGD(addSubNode("HealerGD"));
        }
        inline void Components::removeHealerGD()
        {
            getProperty().eraseUnionSetItem("HealerGD");
        }
        inline std::optional<Ent::Gen2::HealthAreaGD> Components::HealthAreaGD()
        {
            return std::optional<Ent::Gen2::HealthAreaGD>(getSubNode("HealthAreaGD"));
        }
        inline Ent::Gen2::HealthAreaGD Components::addHealthAreaGD()
        {
            return Ent::Gen2::HealthAreaGD(addSubNode("HealthAreaGD"));
        }
        inline void Components::removeHealthAreaGD()
        {
            getProperty().eraseUnionSetItem("HealthAreaGD");
        }
        inline std::optional<Ent::Gen2::HeightMapComponentGD> Components::HeightMapComponentGD()
        {
            return std::optional<Ent::Gen2::HeightMapComponentGD>(getSubNode("HeightMapComponentGD"));
        }
        inline Ent::Gen2::HeightMapComponentGD Components::addHeightMapComponentGD()
        {
            return Ent::Gen2::HeightMapComponentGD(addSubNode("HeightMapComponentGD"));
        }
        inline void Components::removeHeightMapComponentGD()
        {
            getProperty().eraseUnionSetItem("HeightMapComponentGD");
        }
        inline std::optional<Ent::Gen2::HeightObj> Components::HeightObj()
        {
            return std::optional<Ent::Gen2::HeightObj>(getSubNode("HeightObj"));
        }
        inline Ent::Gen2::HeightObj Components::addHeightObj()
        {
            return Ent::Gen2::HeightObj(addSubNode("HeightObj"));
        }
        inline void Components::removeHeightObj()
        {
            getProperty().eraseUnionSetItem("HeightObj");
        }
        inline std::optional<Ent::Gen2::HitTriggerGD> Components::HitTriggerGD()
        {
            return std::optional<Ent::Gen2::HitTriggerGD>(getSubNode("HitTriggerGD"));
        }
        inline Ent::Gen2::HitTriggerGD Components::addHitTriggerGD()
        {
            return Ent::Gen2::HitTriggerGD(addSubNode("HitTriggerGD"));
        }
        inline void Components::removeHitTriggerGD()
        {
            getProperty().eraseUnionSetItem("HitTriggerGD");
        }
        inline std::optional<Ent::Gen2::HotspotsGD> Components::HotspotsGD()
        {
            return std::optional<Ent::Gen2::HotspotsGD>(getSubNode("HotspotsGD"));
        }
        inline Ent::Gen2::HotspotsGD Components::addHotspotsGD()
        {
            return Ent::Gen2::HotspotsGD(addSubNode("HotspotsGD"));
        }
        inline void Components::removeHotspotsGD()
        {
            getProperty().eraseUnionSetItem("HotspotsGD");
        }
        inline std::optional<Ent::Gen2::IncapacitateComponentGD> Components::IncapacitateComponentGD()
        {
            return std::optional<Ent::Gen2::IncapacitateComponentGD>(getSubNode("IncapacitateComponentGD"));
        }
        inline Ent::Gen2::IncapacitateComponentGD Components::addIncapacitateComponentGD()
        {
            return Ent::Gen2::IncapacitateComponentGD(addSubNode("IncapacitateComponentGD"));
        }
        inline void Components::removeIncapacitateComponentGD()
        {
            getProperty().eraseUnionSetItem("IncapacitateComponentGD");
        }
        inline std::optional<Ent::Gen2::InfoboardRegistererGD> Components::InfoboardRegistererGD()
        {
            return std::optional<Ent::Gen2::InfoboardRegistererGD>(getSubNode("InfoboardRegistererGD"));
        }
        inline Ent::Gen2::InfoboardRegistererGD Components::addInfoboardRegistererGD()
        {
            return Ent::Gen2::InfoboardRegistererGD(addSubNode("InfoboardRegistererGD"));
        }
        inline void Components::removeInfoboardRegistererGD()
        {
            getProperty().eraseUnionSetItem("InfoboardRegistererGD");
        }
        inline std::optional<Ent::Gen2::InteractableGPEGD> Components::InteractableGPEGD()
        {
            return std::optional<Ent::Gen2::InteractableGPEGD>(getSubNode("InteractableGPEGD"));
        }
        inline Ent::Gen2::InteractableGPEGD Components::addInteractableGPEGD()
        {
            return Ent::Gen2::InteractableGPEGD(addSubNode("InteractableGPEGD"));
        }
        inline void Components::removeInteractableGPEGD()
        {
            getProperty().eraseUnionSetItem("InteractableGPEGD");
        }
        inline std::optional<Ent::Gen2::InteractorGD> Components::InteractorGD()
        {
            return std::optional<Ent::Gen2::InteractorGD>(getSubNode("InteractorGD"));
        }
        inline Ent::Gen2::InteractorGD Components::addInteractorGD()
        {
            return Ent::Gen2::InteractorGD(addSubNode("InteractorGD"));
        }
        inline void Components::removeInteractorGD()
        {
            getProperty().eraseUnionSetItem("InteractorGD");
        }
        inline std::optional<Ent::Gen2::InterestPointGD> Components::InterestPointGD()
        {
            return std::optional<Ent::Gen2::InterestPointGD>(getSubNode("InterestPointGD"));
        }
        inline Ent::Gen2::InterestPointGD Components::addInterestPointGD()
        {
            return Ent::Gen2::InterestPointGD(addSubNode("InterestPointGD"));
        }
        inline void Components::removeInterestPointGD()
        {
            getProperty().eraseUnionSetItem("InterestPointGD");
        }
        inline std::optional<Ent::Gen2::InventoryGD> Components::InventoryGD()
        {
            return std::optional<Ent::Gen2::InventoryGD>(getSubNode("InventoryGD"));
        }
        inline Ent::Gen2::InventoryGD Components::addInventoryGD()
        {
            return Ent::Gen2::InventoryGD(addSubNode("InventoryGD"));
        }
        inline void Components::removeInventoryGD()
        {
            getProperty().eraseUnionSetItem("InventoryGD");
        }
        inline std::optional<Ent::Gen2::ItemHolderGD> Components::ItemHolderGD()
        {
            return std::optional<Ent::Gen2::ItemHolderGD>(getSubNode("ItemHolderGD"));
        }
        inline Ent::Gen2::ItemHolderGD Components::addItemHolderGD()
        {
            return Ent::Gen2::ItemHolderGD(addSubNode("ItemHolderGD"));
        }
        inline void Components::removeItemHolderGD()
        {
            getProperty().eraseUnionSetItem("ItemHolderGD");
        }
        inline std::optional<Ent::Gen2::LDPrimitive> Components::LDPrimitive()
        {
            return std::optional<Ent::Gen2::LDPrimitive>(getSubNode("LDPrimitive"));
        }
        inline Ent::Gen2::LDPrimitive Components::addLDPrimitive()
        {
            return Ent::Gen2::LDPrimitive(addSubNode("LDPrimitive"));
        }
        inline void Components::removeLDPrimitive()
        {
            getProperty().eraseUnionSetItem("LDPrimitive");
        }
        inline std::optional<Ent::Gen2::LifeComponentGD> Components::LifeComponentGD()
        {
            return std::optional<Ent::Gen2::LifeComponentGD>(getSubNode("LifeComponentGD"));
        }
        inline Ent::Gen2::LifeComponentGD Components::addLifeComponentGD()
        {
            return Ent::Gen2::LifeComponentGD(addSubNode("LifeComponentGD"));
        }
        inline void Components::removeLifeComponentGD()
        {
            getProperty().eraseUnionSetItem("LifeComponentGD");
        }
        inline std::optional<Ent::Gen2::LightComponentGD> Components::LightComponentGD()
        {
            return std::optional<Ent::Gen2::LightComponentGD>(getSubNode("LightComponentGD"));
        }
        inline Ent::Gen2::LightComponentGD Components::addLightComponentGD()
        {
            return Ent::Gen2::LightComponentGD(addSubNode("LightComponentGD"));
        }
        inline void Components::removeLightComponentGD()
        {
            getProperty().eraseUnionSetItem("LightComponentGD");
        }
        inline std::optional<Ent::Gen2::Mesh> Components::Mesh()
        {
            return std::optional<Ent::Gen2::Mesh>(getSubNode("Mesh"));
        }
        inline Ent::Gen2::Mesh Components::addMesh()
        {
            return Ent::Gen2::Mesh(addSubNode("Mesh"));
        }
        inline void Components::removeMesh()
        {
            getProperty().eraseUnionSetItem("Mesh");
        }
        inline std::optional<Ent::Gen2::MeshNavigationInfosGD> Components::MeshNavigationInfosGD()
        {
            return std::optional<Ent::Gen2::MeshNavigationInfosGD>(getSubNode("MeshNavigationInfosGD"));
        }
        inline Ent::Gen2::MeshNavigationInfosGD Components::addMeshNavigationInfosGD()
        {
            return Ent::Gen2::MeshNavigationInfosGD(addSubNode("MeshNavigationInfosGD"));
        }
        inline void Components::removeMeshNavigationInfosGD()
        {
            getProperty().eraseUnionSetItem("MeshNavigationInfosGD");
        }
        inline std::optional<Ent::Gen2::MissionHolderGD> Components::MissionHolderGD()
        {
            return std::optional<Ent::Gen2::MissionHolderGD>(getSubNode("MissionHolderGD"));
        }
        inline Ent::Gen2::MissionHolderGD Components::addMissionHolderGD()
        {
            return Ent::Gen2::MissionHolderGD(addSubNode("MissionHolderGD"));
        }
        inline void Components::removeMissionHolderGD()
        {
            getProperty().eraseUnionSetItem("MissionHolderGD");
        }
        inline std::optional<Ent::Gen2::MountIKControllerGD> Components::MountIKControllerGD()
        {
            return std::optional<Ent::Gen2::MountIKControllerGD>(getSubNode("MountIKControllerGD"));
        }
        inline Ent::Gen2::MountIKControllerGD Components::addMountIKControllerGD()
        {
            return Ent::Gen2::MountIKControllerGD(addSubNode("MountIKControllerGD"));
        }
        inline void Components::removeMountIKControllerGD()
        {
            getProperty().eraseUnionSetItem("MountIKControllerGD");
        }
        inline std::optional<Ent::Gen2::MountableGD> Components::MountableGD()
        {
            return std::optional<Ent::Gen2::MountableGD>(getSubNode("MountableGD"));
        }
        inline Ent::Gen2::MountableGD Components::addMountableGD()
        {
            return Ent::Gen2::MountableGD(addSubNode("MountableGD"));
        }
        inline void Components::removeMountableGD()
        {
            getProperty().eraseUnionSetItem("MountableGD");
        }
        inline std::optional<Ent::Gen2::MounterGD> Components::MounterGD()
        {
            return std::optional<Ent::Gen2::MounterGD>(getSubNode("MounterGD"));
        }
        inline Ent::Gen2::MounterGD Components::addMounterGD()
        {
            return Ent::Gen2::MounterGD(addSubNode("MounterGD"));
        }
        inline void Components::removeMounterGD()
        {
            getProperty().eraseUnionSetItem("MounterGD");
        }
        inline std::optional<Ent::Gen2::MultiThumbnail> Components::MultiThumbnail()
        {
            return std::optional<Ent::Gen2::MultiThumbnail>(getSubNode("MultiThumbnail"));
        }
        inline Ent::Gen2::MultiThumbnail Components::addMultiThumbnail()
        {
            return Ent::Gen2::MultiThumbnail(addSubNode("MultiThumbnail"));
        }
        inline void Components::removeMultiThumbnail()
        {
            getProperty().eraseUnionSetItem("MultiThumbnail");
        }
        inline std::optional<Ent::Gen2::NavMeshActivatorGD> Components::NavMeshActivatorGD()
        {
            return std::optional<Ent::Gen2::NavMeshActivatorGD>(getSubNode("NavMeshActivatorGD"));
        }
        inline Ent::Gen2::NavMeshActivatorGD Components::addNavMeshActivatorGD()
        {
            return Ent::Gen2::NavMeshActivatorGD(addSubNode("NavMeshActivatorGD"));
        }
        inline void Components::removeNavMeshActivatorGD()
        {
            getProperty().eraseUnionSetItem("NavMeshActivatorGD");
        }
        inline std::optional<Ent::Gen2::NavMeshStamperGD> Components::NavMeshStamperGD()
        {
            return std::optional<Ent::Gen2::NavMeshStamperGD>(getSubNode("NavMeshStamperGD"));
        }
        inline Ent::Gen2::NavMeshStamperGD Components::addNavMeshStamperGD()
        {
            return Ent::Gen2::NavMeshStamperGD(addSubNode("NavMeshStamperGD"));
        }
        inline void Components::removeNavMeshStamperGD()
        {
            getProperty().eraseUnionSetItem("NavMeshStamperGD");
        }
        inline std::optional<Ent::Gen2::NetGD> Components::NetGD()
        {
            return std::optional<Ent::Gen2::NetGD>(getSubNode("NetGD"));
        }
        inline Ent::Gen2::NetGD Components::addNetGD()
        {
            return Ent::Gen2::NetGD(addSubNode("NetGD"));
        }
        inline void Components::removeNetGD()
        {
            getProperty().eraseUnionSetItem("NetGD");
        }
        inline std::optional<Ent::Gen2::NetworkLink> Components::NetworkLink()
        {
            return std::optional<Ent::Gen2::NetworkLink>(getSubNode("NetworkLink"));
        }
        inline Ent::Gen2::NetworkLink Components::addNetworkLink()
        {
            return Ent::Gen2::NetworkLink(addSubNode("NetworkLink"));
        }
        inline void Components::removeNetworkLink()
        {
            getProperty().eraseUnionSetItem("NetworkLink");
        }
        inline std::optional<Ent::Gen2::NetworkNode> Components::NetworkNode()
        {
            return std::optional<Ent::Gen2::NetworkNode>(getSubNode("NetworkNode"));
        }
        inline Ent::Gen2::NetworkNode Components::addNetworkNode()
        {
            return Ent::Gen2::NetworkNode(addSubNode("NetworkNode"));
        }
        inline void Components::removeNetworkNode()
        {
            getProperty().eraseUnionSetItem("NetworkNode");
        }
        inline std::optional<Ent::Gen2::NotVisibleInSubscene> Components::NotVisibleInSubscene()
        {
            return std::optional<Ent::Gen2::NotVisibleInSubscene>(getSubNode("NotVisibleInSubscene"));
        }
        inline Ent::Gen2::NotVisibleInSubscene Components::addNotVisibleInSubscene()
        {
            return Ent::Gen2::NotVisibleInSubscene(addSubNode("NotVisibleInSubscene"));
        }
        inline void Components::removeNotVisibleInSubscene()
        {
            getProperty().eraseUnionSetItem("NotVisibleInSubscene");
        }
        inline std::optional<Ent::Gen2::OutfitGD> Components::OutfitGD()
        {
            return std::optional<Ent::Gen2::OutfitGD>(getSubNode("OutfitGD"));
        }
        inline Ent::Gen2::OutfitGD Components::addOutfitGD()
        {
            return Ent::Gen2::OutfitGD(addSubNode("OutfitGD"));
        }
        inline void Components::removeOutfitGD()
        {
            getProperty().eraseUnionSetItem("OutfitGD");
        }
        inline std::optional<Ent::Gen2::OutfitWearerGD> Components::OutfitWearerGD()
        {
            return std::optional<Ent::Gen2::OutfitWearerGD>(getSubNode("OutfitWearerGD"));
        }
        inline Ent::Gen2::OutfitWearerGD Components::addOutfitWearerGD()
        {
            return Ent::Gen2::OutfitWearerGD(addSubNode("OutfitWearerGD"));
        }
        inline void Components::removeOutfitWearerGD()
        {
            getProperty().eraseUnionSetItem("OutfitWearerGD");
        }
        inline std::optional<Ent::Gen2::PathFinderGD> Components::PathFinderGD()
        {
            return std::optional<Ent::Gen2::PathFinderGD>(getSubNode("PathFinderGD"));
        }
        inline Ent::Gen2::PathFinderGD Components::addPathFinderGD()
        {
            return Ent::Gen2::PathFinderGD(addSubNode("PathFinderGD"));
        }
        inline void Components::removePathFinderGD()
        {
            getProperty().eraseUnionSetItem("PathFinderGD");
        }
        inline std::optional<Ent::Gen2::PerceivableGD> Components::PerceivableGD()
        {
            return std::optional<Ent::Gen2::PerceivableGD>(getSubNode("PerceivableGD"));
        }
        inline Ent::Gen2::PerceivableGD Components::addPerceivableGD()
        {
            return Ent::Gen2::PerceivableGD(addSubNode("PerceivableGD"));
        }
        inline void Components::removePerceivableGD()
        {
            getProperty().eraseUnionSetItem("PerceivableGD");
        }
        inline std::optional<Ent::Gen2::PerceiverGD> Components::PerceiverGD()
        {
            return std::optional<Ent::Gen2::PerceiverGD>(getSubNode("PerceiverGD"));
        }
        inline Ent::Gen2::PerceiverGD Components::addPerceiverGD()
        {
            return Ent::Gen2::PerceiverGD(addSubNode("PerceiverGD"));
        }
        inline void Components::removePerceiverGD()
        {
            getProperty().eraseUnionSetItem("PerceiverGD");
        }
        inline std::optional<Ent::Gen2::PhysicsDataGD> Components::PhysicsDataGD()
        {
            return std::optional<Ent::Gen2::PhysicsDataGD>(getSubNode("PhysicsDataGD"));
        }
        inline Ent::Gen2::PhysicsDataGD Components::addPhysicsDataGD()
        {
            return Ent::Gen2::PhysicsDataGD(addSubNode("PhysicsDataGD"));
        }
        inline void Components::removePhysicsDataGD()
        {
            getProperty().eraseUnionSetItem("PhysicsDataGD");
        }
        inline std::optional<Ent::Gen2::PhysicsGD> Components::PhysicsGD()
        {
            return std::optional<Ent::Gen2::PhysicsGD>(getSubNode("PhysicsGD"));
        }
        inline Ent::Gen2::PhysicsGD Components::addPhysicsGD()
        {
            return Ent::Gen2::PhysicsGD(addSubNode("PhysicsGD"));
        }
        inline void Components::removePhysicsGD()
        {
            getProperty().eraseUnionSetItem("PhysicsGD");
        }
        inline std::optional<Ent::Gen2::PhysicsImpactMakerGD> Components::PhysicsImpactMakerGD()
        {
            return std::optional<Ent::Gen2::PhysicsImpactMakerGD>(getSubNode("PhysicsImpactMakerGD"));
        }
        inline Ent::Gen2::PhysicsImpactMakerGD Components::addPhysicsImpactMakerGD()
        {
            return Ent::Gen2::PhysicsImpactMakerGD(addSubNode("PhysicsImpactMakerGD"));
        }
        inline void Components::removePhysicsImpactMakerGD()
        {
            getProperty().eraseUnionSetItem("PhysicsImpactMakerGD");
        }
        inline std::optional<Ent::Gen2::PhysicsMeshDeformerGD> Components::PhysicsMeshDeformerGD()
        {
            return std::optional<Ent::Gen2::PhysicsMeshDeformerGD>(getSubNode("PhysicsMeshDeformerGD"));
        }
        inline Ent::Gen2::PhysicsMeshDeformerGD Components::addPhysicsMeshDeformerGD()
        {
            return Ent::Gen2::PhysicsMeshDeformerGD(addSubNode("PhysicsMeshDeformerGD"));
        }
        inline void Components::removePhysicsMeshDeformerGD()
        {
            getProperty().eraseUnionSetItem("PhysicsMeshDeformerGD");
        }
        inline std::optional<Ent::Gen2::PhysicsMeshProviderGD> Components::PhysicsMeshProviderGD()
        {
            return std::optional<Ent::Gen2::PhysicsMeshProviderGD>(getSubNode("PhysicsMeshProviderGD"));
        }
        inline Ent::Gen2::PhysicsMeshProviderGD Components::addPhysicsMeshProviderGD()
        {
            return Ent::Gen2::PhysicsMeshProviderGD(addSubNode("PhysicsMeshProviderGD"));
        }
        inline void Components::removePhysicsMeshProviderGD()
        {
            getProperty().eraseUnionSetItem("PhysicsMeshProviderGD");
        }
        inline std::optional<Ent::Gen2::PhysicsTriggerGD> Components::PhysicsTriggerGD()
        {
            return std::optional<Ent::Gen2::PhysicsTriggerGD>(getSubNode("PhysicsTriggerGD"));
        }
        inline Ent::Gen2::PhysicsTriggerGD Components::addPhysicsTriggerGD()
        {
            return Ent::Gen2::PhysicsTriggerGD(addSubNode("PhysicsTriggerGD"));
        }
        inline void Components::removePhysicsTriggerGD()
        {
            getProperty().eraseUnionSetItem("PhysicsTriggerGD");
        }
        inline std::optional<Ent::Gen2::PickableComponentGD> Components::PickableComponentGD()
        {
            return std::optional<Ent::Gen2::PickableComponentGD>(getSubNode("PickableComponentGD"));
        }
        inline Ent::Gen2::PickableComponentGD Components::addPickableComponentGD()
        {
            return Ent::Gen2::PickableComponentGD(addSubNode("PickableComponentGD"));
        }
        inline void Components::removePickableComponentGD()
        {
            getProperty().eraseUnionSetItem("PickableComponentGD");
        }
        inline std::optional<Ent::Gen2::PickableDistributorComponentGD> Components::PickableDistributorComponentGD()
        {
            return std::optional<Ent::Gen2::PickableDistributorComponentGD>(getSubNode("PickableDistributorComponentGD"));
        }
        inline Ent::Gen2::PickableDistributorComponentGD Components::addPickableDistributorComponentGD()
        {
            return Ent::Gen2::PickableDistributorComponentGD(addSubNode("PickableDistributorComponentGD"));
        }
        inline void Components::removePickableDistributorComponentGD()
        {
            getProperty().eraseUnionSetItem("PickableDistributorComponentGD");
        }
        inline std::optional<Ent::Gen2::PlayerComponentGD> Components::PlayerComponentGD()
        {
            return std::optional<Ent::Gen2::PlayerComponentGD>(getSubNode("PlayerComponentGD"));
        }
        inline Ent::Gen2::PlayerComponentGD Components::addPlayerComponentGD()
        {
            return Ent::Gen2::PlayerComponentGD(addSubNode("PlayerComponentGD"));
        }
        inline void Components::removePlayerComponentGD()
        {
            getProperty().eraseUnionSetItem("PlayerComponentGD");
        }
        inline std::optional<Ent::Gen2::ProjectileGD> Components::ProjectileGD()
        {
            return std::optional<Ent::Gen2::ProjectileGD>(getSubNode("ProjectileGD"));
        }
        inline Ent::Gen2::ProjectileGD Components::addProjectileGD()
        {
            return Ent::Gen2::ProjectileGD(addSubNode("ProjectileGD"));
        }
        inline void Components::removeProjectileGD()
        {
            getProperty().eraseUnionSetItem("ProjectileGD");
        }
        inline std::optional<Ent::Gen2::ProjectileShooterGD> Components::ProjectileShooterGD()
        {
            return std::optional<Ent::Gen2::ProjectileShooterGD>(getSubNode("ProjectileShooterGD"));
        }
        inline Ent::Gen2::ProjectileShooterGD Components::addProjectileShooterGD()
        {
            return Ent::Gen2::ProjectileShooterGD(addSubNode("ProjectileShooterGD"));
        }
        inline void Components::removeProjectileShooterGD()
        {
            getProperty().eraseUnionSetItem("ProjectileShooterGD");
        }
        inline std::optional<Ent::Gen2::ProtoComponentGD> Components::ProtoComponentGD()
        {
            return std::optional<Ent::Gen2::ProtoComponentGD>(getSubNode("ProtoComponentGD"));
        }
        inline Ent::Gen2::ProtoComponentGD Components::addProtoComponentGD()
        {
            return Ent::Gen2::ProtoComponentGD(addSubNode("ProtoComponentGD"));
        }
        inline void Components::removeProtoComponentGD()
        {
            getProperty().eraseUnionSetItem("ProtoComponentGD");
        }
        inline std::optional<Ent::Gen2::QuickCreatureSwitchGD> Components::QuickCreatureSwitchGD()
        {
            return std::optional<Ent::Gen2::QuickCreatureSwitchGD>(getSubNode("QuickCreatureSwitchGD"));
        }
        inline Ent::Gen2::QuickCreatureSwitchGD Components::addQuickCreatureSwitchGD()
        {
            return Ent::Gen2::QuickCreatureSwitchGD(addSubNode("QuickCreatureSwitchGD"));
        }
        inline void Components::removeQuickCreatureSwitchGD()
        {
            getProperty().eraseUnionSetItem("QuickCreatureSwitchGD");
        }
        inline std::optional<Ent::Gen2::RagdollGD> Components::RagdollGD()
        {
            return std::optional<Ent::Gen2::RagdollGD>(getSubNode("RagdollGD"));
        }
        inline Ent::Gen2::RagdollGD Components::addRagdollGD()
        {
            return Ent::Gen2::RagdollGD(addSubNode("RagdollGD"));
        }
        inline void Components::removeRagdollGD()
        {
            getProperty().eraseUnionSetItem("RagdollGD");
        }
        inline std::optional<Ent::Gen2::RegenSwitcherGD> Components::RegenSwitcherGD()
        {
            return std::optional<Ent::Gen2::RegenSwitcherGD>(getSubNode("RegenSwitcherGD"));
        }
        inline Ent::Gen2::RegenSwitcherGD Components::addRegenSwitcherGD()
        {
            return Ent::Gen2::RegenSwitcherGD(addSubNode("RegenSwitcherGD"));
        }
        inline void Components::removeRegenSwitcherGD()
        {
            getProperty().eraseUnionSetItem("RegenSwitcherGD");
        }
        inline std::optional<Ent::Gen2::RegenerableVegetationGD> Components::RegenerableVegetationGD()
        {
            return std::optional<Ent::Gen2::RegenerableVegetationGD>(getSubNode("RegenerableVegetationGD"));
        }
        inline Ent::Gen2::RegenerableVegetationGD Components::addRegenerableVegetationGD()
        {
            return Ent::Gen2::RegenerableVegetationGD(addSubNode("RegenerableVegetationGD"));
        }
        inline void Components::removeRegenerableVegetationGD()
        {
            getProperty().eraseUnionSetItem("RegenerableVegetationGD");
        }
        inline std::optional<Ent::Gen2::RespawnPlaceGD> Components::RespawnPlaceGD()
        {
            return std::optional<Ent::Gen2::RespawnPlaceGD>(getSubNode("RespawnPlaceGD"));
        }
        inline Ent::Gen2::RespawnPlaceGD Components::addRespawnPlaceGD()
        {
            return Ent::Gen2::RespawnPlaceGD(addSubNode("RespawnPlaceGD"));
        }
        inline void Components::removeRespawnPlaceGD()
        {
            getProperty().eraseUnionSetItem("RespawnPlaceGD");
        }
        inline std::optional<Ent::Gen2::RespawnabilityGD> Components::RespawnabilityGD()
        {
            return std::optional<Ent::Gen2::RespawnabilityGD>(getSubNode("RespawnabilityGD"));
        }
        inline Ent::Gen2::RespawnabilityGD Components::addRespawnabilityGD()
        {
            return Ent::Gen2::RespawnabilityGD(addSubNode("RespawnabilityGD"));
        }
        inline void Components::removeRespawnabilityGD()
        {
            getProperty().eraseUnionSetItem("RespawnabilityGD");
        }
        inline std::optional<Ent::Gen2::ReviveEnergyGD> Components::ReviveEnergyGD()
        {
            return std::optional<Ent::Gen2::ReviveEnergyGD>(getSubNode("ReviveEnergyGD"));
        }
        inline Ent::Gen2::ReviveEnergyGD Components::addReviveEnergyGD()
        {
            return Ent::Gen2::ReviveEnergyGD(addSubNode("ReviveEnergyGD"));
        }
        inline void Components::removeReviveEnergyGD()
        {
            getProperty().eraseUnionSetItem("ReviveEnergyGD");
        }
        inline std::optional<Ent::Gen2::ScriptComponentGD> Components::ScriptComponentGD()
        {
            return std::optional<Ent::Gen2::ScriptComponentGD>(getSubNode("ScriptComponentGD"));
        }
        inline Ent::Gen2::ScriptComponentGD Components::addScriptComponentGD()
        {
            return Ent::Gen2::ScriptComponentGD(addSubNode("ScriptComponentGD"));
        }
        inline void Components::removeScriptComponentGD()
        {
            getProperty().eraseUnionSetItem("ScriptComponentGD");
        }
        inline std::optional<Ent::Gen2::SeedPatch> Components::SeedPatch()
        {
            return std::optional<Ent::Gen2::SeedPatch>(getSubNode("SeedPatch"));
        }
        inline Ent::Gen2::SeedPatch Components::addSeedPatch()
        {
            return Ent::Gen2::SeedPatch(addSubNode("SeedPatch"));
        }
        inline void Components::removeSeedPatch()
        {
            getProperty().eraseUnionSetItem("SeedPatch");
        }
        inline std::optional<Ent::Gen2::SensorControllerGD> Components::SensorControllerGD()
        {
            return std::optional<Ent::Gen2::SensorControllerGD>(getSubNode("SensorControllerGD"));
        }
        inline Ent::Gen2::SensorControllerGD Components::addSensorControllerGD()
        {
            return Ent::Gen2::SensorControllerGD(addSubNode("SensorControllerGD"));
        }
        inline void Components::removeSensorControllerGD()
        {
            getProperty().eraseUnionSetItem("SensorControllerGD");
        }
        inline std::optional<Ent::Gen2::SensorVoxelsGD> Components::SensorVoxelsGD()
        {
            return std::optional<Ent::Gen2::SensorVoxelsGD>(getSubNode("SensorVoxelsGD"));
        }
        inline Ent::Gen2::SensorVoxelsGD Components::addSensorVoxelsGD()
        {
            return Ent::Gen2::SensorVoxelsGD(addSubNode("SensorVoxelsGD"));
        }
        inline void Components::removeSensorVoxelsGD()
        {
            getProperty().eraseUnionSetItem("SensorVoxelsGD");
        }
        inline std::optional<Ent::Gen2::ShamanItemGD> Components::ShamanItemGD()
        {
            return std::optional<Ent::Gen2::ShamanItemGD>(getSubNode("ShamanItemGD"));
        }
        inline Ent::Gen2::ShamanItemGD Components::addShamanItemGD()
        {
            return Ent::Gen2::ShamanItemGD(addSubNode("ShamanItemGD"));
        }
        inline void Components::removeShamanItemGD()
        {
            getProperty().eraseUnionSetItem("ShamanItemGD");
        }
        inline std::optional<Ent::Gen2::ShamanVisionGD> Components::ShamanVisionGD()
        {
            return std::optional<Ent::Gen2::ShamanVisionGD>(getSubNode("ShamanVisionGD"));
        }
        inline Ent::Gen2::ShamanVisionGD Components::addShamanVisionGD()
        {
            return Ent::Gen2::ShamanVisionGD(addSubNode("ShamanVisionGD"));
        }
        inline void Components::removeShamanVisionGD()
        {
            getProperty().eraseUnionSetItem("ShamanVisionGD");
        }
        inline std::optional<Ent::Gen2::ShapeshiftStatueGD> Components::ShapeshiftStatueGD()
        {
            return std::optional<Ent::Gen2::ShapeshiftStatueGD>(getSubNode("ShapeshiftStatueGD"));
        }
        inline Ent::Gen2::ShapeshiftStatueGD Components::addShapeshiftStatueGD()
        {
            return Ent::Gen2::ShapeshiftStatueGD(addSubNode("ShapeshiftStatueGD"));
        }
        inline void Components::removeShapeshiftStatueGD()
        {
            getProperty().eraseUnionSetItem("ShapeshiftStatueGD");
        }
        inline std::optional<Ent::Gen2::SideMapGateGD> Components::SideMapGateGD()
        {
            return std::optional<Ent::Gen2::SideMapGateGD>(getSubNode("SideMapGateGD"));
        }
        inline Ent::Gen2::SideMapGateGD Components::addSideMapGateGD()
        {
            return Ent::Gen2::SideMapGateGD(addSubNode("SideMapGateGD"));
        }
        inline void Components::removeSideMapGateGD()
        {
            getProperty().eraseUnionSetItem("SideMapGateGD");
        }
        inline std::optional<Ent::Gen2::SmoothScaleComponentGD> Components::SmoothScaleComponentGD()
        {
            return std::optional<Ent::Gen2::SmoothScaleComponentGD>(getSubNode("SmoothScaleComponentGD"));
        }
        inline Ent::Gen2::SmoothScaleComponentGD Components::addSmoothScaleComponentGD()
        {
            return Ent::Gen2::SmoothScaleComponentGD(addSubNode("SmoothScaleComponentGD"));
        }
        inline void Components::removeSmoothScaleComponentGD()
        {
            getProperty().eraseUnionSetItem("SmoothScaleComponentGD");
        }
        inline std::optional<Ent::Gen2::SoftCollisionGD> Components::SoftCollisionGD()
        {
            return std::optional<Ent::Gen2::SoftCollisionGD>(getSubNode("SoftCollisionGD"));
        }
        inline Ent::Gen2::SoftCollisionGD Components::addSoftCollisionGD()
        {
            return Ent::Gen2::SoftCollisionGD(addSubNode("SoftCollisionGD"));
        }
        inline void Components::removeSoftCollisionGD()
        {
            getProperty().eraseUnionSetItem("SoftCollisionGD");
        }
        inline std::optional<Ent::Gen2::SoulRespawnOpportunityGD> Components::SoulRespawnOpportunityGD()
        {
            return std::optional<Ent::Gen2::SoulRespawnOpportunityGD>(getSubNode("SoulRespawnOpportunityGD"));
        }
        inline Ent::Gen2::SoulRespawnOpportunityGD Components::addSoulRespawnOpportunityGD()
        {
            return Ent::Gen2::SoulRespawnOpportunityGD(addSubNode("SoulRespawnOpportunityGD"));
        }
        inline void Components::removeSoulRespawnOpportunityGD()
        {
            getProperty().eraseUnionSetItem("SoulRespawnOpportunityGD");
        }
        inline std::optional<Ent::Gen2::SoundAreaGD> Components::SoundAreaGD()
        {
            return std::optional<Ent::Gen2::SoundAreaGD>(getSubNode("SoundAreaGD"));
        }
        inline Ent::Gen2::SoundAreaGD Components::addSoundAreaGD()
        {
            return Ent::Gen2::SoundAreaGD(addSubNode("SoundAreaGD"));
        }
        inline void Components::removeSoundAreaGD()
        {
            getProperty().eraseUnionSetItem("SoundAreaGD");
        }
        inline std::optional<Ent::Gen2::SoundEmitterGD> Components::SoundEmitterGD()
        {
            return std::optional<Ent::Gen2::SoundEmitterGD>(getSubNode("SoundEmitterGD"));
        }
        inline Ent::Gen2::SoundEmitterGD Components::addSoundEmitterGD()
        {
            return Ent::Gen2::SoundEmitterGD(addSubNode("SoundEmitterGD"));
        }
        inline void Components::removeSoundEmitterGD()
        {
            getProperty().eraseUnionSetItem("SoundEmitterGD");
        }
        inline std::optional<Ent::Gen2::SoundOpportunityComponentGD> Components::SoundOpportunityComponentGD()
        {
            return std::optional<Ent::Gen2::SoundOpportunityComponentGD>(getSubNode("SoundOpportunityComponentGD"));
        }
        inline Ent::Gen2::SoundOpportunityComponentGD Components::addSoundOpportunityComponentGD()
        {
            return Ent::Gen2::SoundOpportunityComponentGD(addSubNode("SoundOpportunityComponentGD"));
        }
        inline void Components::removeSoundOpportunityComponentGD()
        {
            getProperty().eraseUnionSetItem("SoundOpportunityComponentGD");
        }
        inline std::optional<Ent::Gen2::SpiritAnimalGD> Components::SpiritAnimalGD()
        {
            return std::optional<Ent::Gen2::SpiritAnimalGD>(getSubNode("SpiritAnimalGD"));
        }
        inline Ent::Gen2::SpiritAnimalGD Components::addSpiritAnimalGD()
        {
            return Ent::Gen2::SpiritAnimalGD(addSubNode("SpiritAnimalGD"));
        }
        inline void Components::removeSpiritAnimalGD()
        {
            getProperty().eraseUnionSetItem("SpiritAnimalGD");
        }
        inline std::optional<Ent::Gen2::SpiritAnimalShrineGD> Components::SpiritAnimalShrineGD()
        {
            return std::optional<Ent::Gen2::SpiritAnimalShrineGD>(getSubNode("SpiritAnimalShrineGD"));
        }
        inline Ent::Gen2::SpiritAnimalShrineGD Components::addSpiritAnimalShrineGD()
        {
            return Ent::Gen2::SpiritAnimalShrineGD(addSubNode("SpiritAnimalShrineGD"));
        }
        inline void Components::removeSpiritAnimalShrineGD()
        {
            getProperty().eraseUnionSetItem("SpiritAnimalShrineGD");
        }
        inline std::optional<Ent::Gen2::SpiritAnimalsHolderGD> Components::SpiritAnimalsHolderGD()
        {
            return std::optional<Ent::Gen2::SpiritAnimalsHolderGD>(getSubNode("SpiritAnimalsHolderGD"));
        }
        inline Ent::Gen2::SpiritAnimalsHolderGD Components::addSpiritAnimalsHolderGD()
        {
            return Ent::Gen2::SpiritAnimalsHolderGD(addSubNode("SpiritAnimalsHolderGD"));
        }
        inline void Components::removeSpiritAnimalsHolderGD()
        {
            getProperty().eraseUnionSetItem("SpiritAnimalsHolderGD");
        }
        inline std::optional<Ent::Gen2::StaffVertebrasGD> Components::StaffVertebrasGD()
        {
            return std::optional<Ent::Gen2::StaffVertebrasGD>(getSubNode("StaffVertebrasGD"));
        }
        inline Ent::Gen2::StaffVertebrasGD Components::addStaffVertebrasGD()
        {
            return Ent::Gen2::StaffVertebrasGD(addSubNode("StaffVertebrasGD"));
        }
        inline void Components::removeStaffVertebrasGD()
        {
            getProperty().eraseUnionSetItem("StaffVertebrasGD");
        }
        inline std::optional<Ent::Gen2::StaticObjectGD> Components::StaticObjectGD()
        {
            return std::optional<Ent::Gen2::StaticObjectGD>(getSubNode("StaticObjectGD"));
        }
        inline Ent::Gen2::StaticObjectGD Components::addStaticObjectGD()
        {
            return Ent::Gen2::StaticObjectGD(addSubNode("StaticObjectGD"));
        }
        inline void Components::removeStaticObjectGD()
        {
            getProperty().eraseUnionSetItem("StaticObjectGD");
        }
        inline std::optional<Ent::Gen2::StickToTerrain> Components::StickToTerrain()
        {
            return std::optional<Ent::Gen2::StickToTerrain>(getSubNode("StickToTerrain"));
        }
        inline Ent::Gen2::StickToTerrain Components::addStickToTerrain()
        {
            return Ent::Gen2::StickToTerrain(addSubNode("StickToTerrain"));
        }
        inline void Components::removeStickToTerrain()
        {
            getProperty().eraseUnionSetItem("StickToTerrain");
        }
        inline std::optional<Ent::Gen2::StreamableUnitGD> Components::StreamableUnitGD()
        {
            return std::optional<Ent::Gen2::StreamableUnitGD>(getSubNode("StreamableUnitGD"));
        }
        inline Ent::Gen2::StreamableUnitGD Components::addStreamableUnitGD()
        {
            return Ent::Gen2::StreamableUnitGD(addSubNode("StreamableUnitGD"));
        }
        inline void Components::removeStreamableUnitGD()
        {
            getProperty().eraseUnionSetItem("StreamableUnitGD");
        }
        inline std::optional<Ent::Gen2::StreamingLocatorGD> Components::StreamingLocatorGD()
        {
            return std::optional<Ent::Gen2::StreamingLocatorGD>(getSubNode("StreamingLocatorGD"));
        }
        inline Ent::Gen2::StreamingLocatorGD Components::addStreamingLocatorGD()
        {
            return Ent::Gen2::StreamingLocatorGD(addSubNode("StreamingLocatorGD"));
        }
        inline void Components::removeStreamingLocatorGD()
        {
            getProperty().eraseUnionSetItem("StreamingLocatorGD");
        }
        inline std::optional<Ent::Gen2::SubScene> Components::SubScene()
        {
            return std::optional<Ent::Gen2::SubScene>(getSubNode("SubScene"));
        }
        inline Ent::Gen2::SubScene Components::addSubScene()
        {
            return Ent::Gen2::SubScene(addSubNode("SubScene"));
        }
        inline void Components::removeSubScene()
        {
            getProperty().eraseUnionSetItem("SubScene");
        }
        inline std::optional<Ent::Gen2::SystemicCreature> Components::SystemicCreature()
        {
            return std::optional<Ent::Gen2::SystemicCreature>(getSubNode("SystemicCreature"));
        }
        inline Ent::Gen2::SystemicCreature Components::addSystemicCreature()
        {
            return Ent::Gen2::SystemicCreature(addSubNode("SystemicCreature"));
        }
        inline void Components::removeSystemicCreature()
        {
            getProperty().eraseUnionSetItem("SystemicCreature");
        }
        inline std::optional<Ent::Gen2::TeamGD> Components::TeamGD()
        {
            return std::optional<Ent::Gen2::TeamGD>(getSubNode("TeamGD"));
        }
        inline Ent::Gen2::TeamGD Components::addTeamGD()
        {
            return Ent::Gen2::TeamGD(addSubNode("TeamGD"));
        }
        inline void Components::removeTeamGD()
        {
            getProperty().eraseUnionSetItem("TeamGD");
        }
        inline std::optional<Ent::Gen2::TerrainGD> Components::TerrainGD()
        {
            return std::optional<Ent::Gen2::TerrainGD>(getSubNode("TerrainGD"));
        }
        inline Ent::Gen2::TerrainGD Components::addTerrainGD()
        {
            return Ent::Gen2::TerrainGD(addSubNode("TerrainGD"));
        }
        inline void Components::removeTerrainGD()
        {
            getProperty().eraseUnionSetItem("TerrainGD");
        }
        inline std::optional<Ent::Gen2::TerrainSurfaceObject> Components::TerrainSurfaceObject()
        {
            return std::optional<Ent::Gen2::TerrainSurfaceObject>(getSubNode("TerrainSurfaceObject"));
        }
        inline Ent::Gen2::TerrainSurfaceObject Components::addTerrainSurfaceObject()
        {
            return Ent::Gen2::TerrainSurfaceObject(addSubNode("TerrainSurfaceObject"));
        }
        inline void Components::removeTerrainSurfaceObject()
        {
            getProperty().eraseUnionSetItem("TerrainSurfaceObject");
        }
        inline std::optional<Ent::Gen2::TestArrays> Components::TestArrays()
        {
            return std::optional<Ent::Gen2::TestArrays>(getSubNode("TestArrays"));
        }
        inline Ent::Gen2::TestArrays Components::addTestArrays()
        {
            return Ent::Gen2::TestArrays(addSubNode("TestArrays"));
        }
        inline void Components::removeTestArrays()
        {
            getProperty().eraseUnionSetItem("TestArrays");
        }
        inline std::optional<Ent::Gen2::TestCreature> Components::TestCreature()
        {
            return std::optional<Ent::Gen2::TestCreature>(getSubNode("TestCreature"));
        }
        inline Ent::Gen2::TestCreature Components::addTestCreature()
        {
            return Ent::Gen2::TestCreature(addSubNode("TestCreature"));
        }
        inline void Components::removeTestCreature()
        {
            getProperty().eraseUnionSetItem("TestCreature");
        }
        inline std::optional<Ent::Gen2::TestDefaultValues> Components::TestDefaultValues()
        {
            return std::optional<Ent::Gen2::TestDefaultValues>(getSubNode("TestDefaultValues"));
        }
        inline Ent::Gen2::TestDefaultValues Components::addTestDefaultValues()
        {
            return Ent::Gen2::TestDefaultValues(addSubNode("TestDefaultValues"));
        }
        inline void Components::removeTestDefaultValues()
        {
            getProperty().eraseUnionSetItem("TestDefaultValues");
        }
        inline std::optional<Ent::Gen2::TestEntityRef> Components::TestEntityRef()
        {
            return std::optional<Ent::Gen2::TestEntityRef>(getSubNode("TestEntityRef"));
        }
        inline Ent::Gen2::TestEntityRef Components::addTestEntityRef()
        {
            return Ent::Gen2::TestEntityRef(addSubNode("TestEntityRef"));
        }
        inline void Components::removeTestEntityRef()
        {
            getProperty().eraseUnionSetItem("TestEntityRef");
        }
        inline std::optional<Ent::Gen2::TestSetOfObject> Components::TestSetOfObject()
        {
            return std::optional<Ent::Gen2::TestSetOfObject>(getSubNode("TestSetOfObject"));
        }
        inline Ent::Gen2::TestSetOfObject Components::addTestSetOfObject()
        {
            return Ent::Gen2::TestSetOfObject(addSubNode("TestSetOfObject"));
        }
        inline void Components::removeTestSetOfObject()
        {
            getProperty().eraseUnionSetItem("TestSetOfObject");
        }
        inline std::optional<Ent::Gen2::TestTagsList> Components::TestTagsList()
        {
            return std::optional<Ent::Gen2::TestTagsList>(getSubNode("TestTagsList"));
        }
        inline Ent::Gen2::TestTagsList Components::addTestTagsList()
        {
            return Ent::Gen2::TestTagsList(addSubNode("TestTagsList"));
        }
        inline void Components::removeTestTagsList()
        {
            getProperty().eraseUnionSetItem("TestTagsList");
        }
        inline std::optional<Ent::Gen2::TestUnion> Components::TestUnion()
        {
            return std::optional<Ent::Gen2::TestUnion>(getSubNode("TestUnion"));
        }
        inline Ent::Gen2::TestUnion Components::addTestUnion()
        {
            return Ent::Gen2::TestUnion(addSubNode("TestUnion"));
        }
        inline void Components::removeTestUnion()
        {
            getProperty().eraseUnionSetItem("TestUnion");
        }
        inline std::optional<Ent::Gen2::TransformGD> Components::TransformGD()
        {
            return std::optional<Ent::Gen2::TransformGD>(getSubNode("TransformGD"));
        }
        inline Ent::Gen2::TransformGD Components::addTransformGD()
        {
            return Ent::Gen2::TransformGD(addSubNode("TransformGD"));
        }
        inline void Components::removeTransformGD()
        {
            getProperty().eraseUnionSetItem("TransformGD");
        }
        inline std::optional<Ent::Gen2::TriggerEventCameraGD> Components::TriggerEventCameraGD()
        {
            return std::optional<Ent::Gen2::TriggerEventCameraGD>(getSubNode("TriggerEventCameraGD"));
        }
        inline Ent::Gen2::TriggerEventCameraGD Components::addTriggerEventCameraGD()
        {
            return Ent::Gen2::TriggerEventCameraGD(addSubNode("TriggerEventCameraGD"));
        }
        inline void Components::removeTriggerEventCameraGD()
        {
            getProperty().eraseUnionSetItem("TriggerEventCameraGD");
        }
        inline std::optional<Ent::Gen2::UnifiedPhysicsDataGD> Components::UnifiedPhysicsDataGD()
        {
            return std::optional<Ent::Gen2::UnifiedPhysicsDataGD>(getSubNode("UnifiedPhysicsDataGD"));
        }
        inline Ent::Gen2::UnifiedPhysicsDataGD Components::addUnifiedPhysicsDataGD()
        {
            return Ent::Gen2::UnifiedPhysicsDataGD(addSubNode("UnifiedPhysicsDataGD"));
        }
        inline void Components::removeUnifiedPhysicsDataGD()
        {
            getProperty().eraseUnionSetItem("UnifiedPhysicsDataGD");
        }
        inline std::optional<Ent::Gen2::UnitTestComponent> Components::UnitTestComponent()
        {
            return std::optional<Ent::Gen2::UnitTestComponent>(getSubNode("UnitTestComponent"));
        }
        inline Ent::Gen2::UnitTestComponent Components::addUnitTestComponent()
        {
            return Ent::Gen2::UnitTestComponent(addSubNode("UnitTestComponent"));
        }
        inline void Components::removeUnitTestComponent()
        {
            getProperty().eraseUnionSetItem("UnitTestComponent");
        }
        inline std::optional<Ent::Gen2::VelocityObstacleGD> Components::VelocityObstacleGD()
        {
            return std::optional<Ent::Gen2::VelocityObstacleGD>(getSubNode("VelocityObstacleGD"));
        }
        inline Ent::Gen2::VelocityObstacleGD Components::addVelocityObstacleGD()
        {
            return Ent::Gen2::VelocityObstacleGD(addSubNode("VelocityObstacleGD"));
        }
        inline void Components::removeVelocityObstacleGD()
        {
            getProperty().eraseUnionSetItem("VelocityObstacleGD");
        }
        inline std::optional<Ent::Gen2::VisualGD> Components::VisualGD()
        {
            return std::optional<Ent::Gen2::VisualGD>(getSubNode("VisualGD"));
        }
        inline Ent::Gen2::VisualGD Components::addVisualGD()
        {
            return Ent::Gen2::VisualGD(addSubNode("VisualGD"));
        }
        inline void Components::removeVisualGD()
        {
            getProperty().eraseUnionSetItem("VisualGD");
        }
        inline std::optional<Ent::Gen2::VolumeConstraintGD> Components::VolumeConstraintGD()
        {
            return std::optional<Ent::Gen2::VolumeConstraintGD>(getSubNode("VolumeConstraintGD"));
        }
        inline Ent::Gen2::VolumeConstraintGD Components::addVolumeConstraintGD()
        {
            return Ent::Gen2::VolumeConstraintGD(addSubNode("VolumeConstraintGD"));
        }
        inline void Components::removeVolumeConstraintGD()
        {
            getProperty().eraseUnionSetItem("VolumeConstraintGD");
        }
        inline std::optional<Ent::Gen2::VoxelSimulationGD> Components::VoxelSimulationGD()
        {
            return std::optional<Ent::Gen2::VoxelSimulationGD>(getSubNode("VoxelSimulationGD"));
        }
        inline Ent::Gen2::VoxelSimulationGD Components::addVoxelSimulationGD()
        {
            return Ent::Gen2::VoxelSimulationGD(addSubNode("VoxelSimulationGD"));
        }
        inline void Components::removeVoxelSimulationGD()
        {
            getProperty().eraseUnionSetItem("VoxelSimulationGD");
        }
        inline std::optional<Ent::Gen2::WallRunGD> Components::WallRunGD()
        {
            return std::optional<Ent::Gen2::WallRunGD>(getSubNode("WallRunGD"));
        }
        inline Ent::Gen2::WallRunGD Components::addWallRunGD()
        {
            return Ent::Gen2::WallRunGD(addSubNode("WallRunGD"));
        }
        inline void Components::removeWallRunGD()
        {
            getProperty().eraseUnionSetItem("WallRunGD");
        }
        inline std::optional<Ent::Gen2::WildObject> Components::WildObject()
        {
            return std::optional<Ent::Gen2::WildObject>(getSubNode("WildObject"));
        }
        inline Ent::Gen2::WildObject Components::addWildObject()
        {
            return Ent::Gen2::WildObject(addSubNode("WildObject"));
        }
        inline void Components::removeWildObject()
        {
            getProperty().eraseUnionSetItem("WildObject");
        }
        // UIMessage
        inline Ent::Gen2::Color UIMessage::Color() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("Color"));
        }
        inline Ent::Gen2::Float UIMessage::Duration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Duration"));
        }
        inline Ent::Gen2::String UIMessage::Icon() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Icon"));
        }
        inline Ent::Gen2::Vector2 UIMessage::ScreenPosition() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("ScreenPosition"));
        }
        inline Ent::Gen2::String UIMessage::Text() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Text"));
        }
        inline Ent::Gen2::Float UIMessage::TextScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TextScale"));
        }
        inline Ent::Gen2::String UIMessage::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // UIManager
        inline Ent::Gen2::Float UIManager::BarAlpha() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BarAlpha"));
        }
        inline Ent::Gen2::Float UIManager::BarHeight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BarHeight"));
        }
        inline Ent::Gen2::Float UIManager::BarWidth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BarWidth"));
        }
        inline Ent::Gen2::String UIManager::BlankMaterialPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BlankMaterialPath"));
        }
        inline Ent::Gen2::Bool UIManager::EnableReticle() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EnableReticle"));
        }
        inline Ent::Gen2::Bool UIManager::EnableReticleLock() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EnableReticleLock"));
        }
        inline Ent::Gen2::String UIManager::Font() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Font"));
        }
        inline Ent::Gen2::String UIManager::HaloBigGRC() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HaloBigGRC"));
        }
        inline Ent::Gen2::String UIManager::HaloSmallGRC() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HaloSmallGRC"));
        }
        inline Array<Ent::Gen2::UIMessage> UIManager::LaunchedMessages() const
        {
            return Array<Ent::Gen2::UIMessage>(getProperty().getObjectField("LaunchedMessages"));
        }
        inline Ent::Gen2::UIMessage UIManager::LaunchedSceneMessage() const
        {
            return Ent::Gen2::UIMessage(getProperty().getObjectField("LaunchedSceneMessage"));
        }
        inline Ent::Gen2::Bool UIManager::ShowFoodBar() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowFoodBar"));
        }
        inline Ent::Gen2::Bool UIManager::ShowLifeBar() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowLifeBar"));
        }
        inline Ent::Gen2::Bool UIManager::ShowOxygenBar() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowOxygenBar"));
        }
        inline Ent::Gen2::Bool UIManager::ShowTempBar() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowTempBar"));
        }
        inline Ent::Gen2::Bool UIManager::ShowThirstBar() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowThirstBar"));
        }
        inline Ent::Gen2::Bool UIManager::ShowTiredBar() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShowTiredBar"));
        }
        inline Ent::Gen2::Manager UIManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String UIManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SoundManager
        inline Ent::Gen2::Float SoundManager::AmbienceProbeLayerAttenuation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AmbienceProbeLayerAttenuation"));
        }
        inline Ent::Gen2::Int SoundManager::AmbienceProbeLayerCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("AmbienceProbeLayerCount"));
        }
        inline Ent::Gen2::Float SoundManager::AmbienceProbeLayerSpacing() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AmbienceProbeLayerSpacing"));
        }
        inline Ent::Gen2::Int SoundManager::AmbienceProbePerLayerCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("AmbienceProbePerLayerCount"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::String> SoundManager::AmbienceTagMapping() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::String>(getProperty().getObjectField("AmbienceTagMapping"));
        }
        inline Ent::Gen2::SoundManager_BiomeSoundBank SoundManager::BiomeSoundBank() const
        {
            return Ent::Gen2::SoundManager_BiomeSoundBank(getProperty().getObjectField("BiomeSoundBank"));
        }
        inline Ent::Gen2::Float SoundManager::CallAnswerDelayMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CallAnswerDelayMax"));
        }
        inline Ent::Gen2::Float SoundManager::CallAnswerDelayMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CallAnswerDelayMin"));
        }
        inline Ent::Gen2::Float SoundManager::CallDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CallDistance"));
        }
        inline Ent::Gen2::Map<StyleModeEnum, Ent::Gen2::String> SoundManager::ClassStyleToHitActive() const
        {
            return Ent::Gen2::Map<StyleModeEnum, Ent::Gen2::String>(getProperty().getObjectField("ClassStyleToHitActive"));
        }
        inline Array<Ent::Gen2::CreatureTypeData> SoundManager::CreatureType() const
        {
            return Array<Ent::Gen2::CreatureTypeData>(getProperty().getObjectField("CreatureType"));
        }
        inline Ent::Gen2::Bool SoundManager::DisplayListener() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayListener"));
        }
        inline PrimArray<Ent::Gen2::String> SoundManager::EchoEntityNames() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("EchoEntityNames"));
        }
        inline Ent::Gen2::Bool SoundManager::Enabled() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Enabled"));
        }
        inline PrimArray<Ent::Gen2::String> SoundManager::GroundSFX() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("GroundSFX"));
        }
        inline Ent::Gen2::String SoundManager::GroundTypeWater() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GroundTypeWater"));
        }
        inline Ent::Gen2::String SoundManager::GroundTypeWaterDeep() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GroundTypeWaterDeep"));
        }
        inline Ent::Gen2::String SoundManager::GroundTypeWaterPuddle() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GroundTypeWaterPuddle"));
        }
        inline Array<Ent::Gen2::GroundTypeData> SoundManager::GroundTypes() const
        {
            return Array<Ent::Gen2::GroundTypeData>(getProperty().getObjectField("GroundTypes"));
        }
        inline Ent::Gen2::Float SoundManager::HitIntensityHigh() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HitIntensityHigh"));
        }
        inline Ent::Gen2::Float SoundManager::HitIntensityLow() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HitIntensityLow"));
        }
        inline Ent::Gen2::String SoundManager::InWaterEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("InWaterEvent"));
        }
        inline Ent::Gen2::Float SoundManager::ListenerDistanceFromPlayer() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ListenerDistanceFromPlayer"));
        }
        inline Ent::Gen2::Bool SoundManager::ListenerOnFreeCam() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ListenerOnFreeCam"));
        }
        inline Ent::Gen2::ScaleConverter SoundManager::OcclusionPlayerSpeedInfluenceSettings() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("OcclusionPlayerSpeedInfluenceSettings"));
        }
        inline Ent::Gen2::String SoundManager::OutWaterEvent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("OutWaterEvent"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_3DFrontBack() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_3DFrontBack"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_3DLeftRight() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_3DLeftRight"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_AbsoluteHeight() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_AbsoluteHeight"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_AmbSDFDistance() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_AmbSDFDistance"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_AmbientRegenLevel() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_AmbientRegenLevel"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_AngleToListener() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_AngleToListener"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_BoidLeavesCount() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_BoidLeavesCount"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_CreatureType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_CreatureType"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_DayHour() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_DayHour"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_Distance() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_Distance"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_DreamFireDistance() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_DreamFireDistance"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityAttackVolume() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityAttackVolume"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityDoppler() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityDoppler"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityHitIntensity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityHitIntensity"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityHitVolume() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityHitVolume"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityNodeRegen() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityNodeRegen"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityPitch() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityPitch"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityRunDuration() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityRunDuration"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityScale() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityScale"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntityShamanVisiblity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntityShamanVisiblity"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_EntitySpeed() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_EntitySpeed"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_FernProximity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_FernProximity"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_FlowersProximity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_FlowersProximity"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_Fx_Speed() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_Fx_Speed"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_HunterDistance() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_HunterDistance"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_LocateClosestEntity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_LocateClosestEntity"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_LocateEntityPan() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_LocateEntityPan"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_OuterToInnerProximityEdges() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_OuterToInnerProximityEdges"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_PCEnergy() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PCEnergy"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_PCLife() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PCLife"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_PCScale() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PCScale"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_PCSpeed() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PCSpeed"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_PcNPC() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PcNPC"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_PlayerAbsoluteHeight() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PlayerAbsoluteHeight"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_PlayerAcceleration() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PlayerAcceleration"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_PlayerRelativeHeight() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_PlayerRelativeHeight"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_Progress() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_Progress"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_RainIntensity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_RainIntensity"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_RelativeHeight() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_RelativeHeight"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_StormDistance() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_StormDistance"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_StormIntensity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_StormIntensity"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_SwampProximity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_SwampProximity"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_UnderwaterCameraActivator() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_UnderwaterCameraActivator"));
        }
        inline Ent::Gen2::String SoundManager::RTPC_UnderwaterDepth() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RTPC_UnderwaterDepth"));
        }
        inline Ent::Gen2::Float SoundManager::RainLevelStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RainLevelStart"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::SmallActorSpawnPointData> SoundManager::SmallActorSpawnRules() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::SmallActorSpawnPointData>(getProperty().getObjectField("SmallActorSpawnRules"));
        }
        inline Ent::Gen2::String SoundManager::SoundTagDataFile() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SoundTagDataFile"));
        }
        inline Ent::Gen2::String SoundManager::Sound_GameEntity_Stop_All() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_GameEntity_Stop_All"));
        }
        inline Ent::Gen2::String SoundManager::Sound_GameObject_Dial_Stop() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_GameObject_Dial_Stop"));
        }
        inline Ent::Gen2::String SoundManager::Sound_Game_Pause_All() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_Game_Pause_All"));
        }
        inline Ent::Gen2::String SoundManager::Sound_Game_Resume_All() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_Game_Resume_All"));
        }
        inline Ent::Gen2::String SoundManager::SoundbankEventDataFile() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SoundbankEventDataFile"));
        }
        inline Ent::Gen2::Map<SpecieEnum, Ent::Gen2::String> SoundManager::SpeciesToHitActive() const
        {
            return Ent::Gen2::Map<SpecieEnum, Ent::Gen2::String>(getProperty().getObjectField("SpeciesToHitActive"));
        }
        inline Ent::Gen2::String SoundManager::StateId_MainBiomeType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("StateId_MainBiomeType"));
        }
        inline Ent::Gen2::String SoundManager::StateId_RainLevel() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("StateId_RainLevel"));
        }
        inline Ent::Gen2::String SoundManager::State_NoRain() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("State_NoRain"));
        }
        inline Ent::Gen2::String SoundManager::State_Rain() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("State_Rain"));
        }
        inline Ent::Gen2::Manager SoundManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_Appeau() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_Appeau"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_EntityState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_EntityState"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_GiveOrder_Tone() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_GiveOrder_Tone"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_GiveOrder_Type() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_GiveOrder_Type"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_GroundType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_GroundType"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_Hit_Active() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_Hit_Active"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_Hit_Intensity() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_Hit_Intensity"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_Hit_Style() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_Hit_Style"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_Level() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_Level"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_OutfitInteraction() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_OutfitInteraction"));
        }
        inline Ent::Gen2::String SoundManager::SwitchId_VegetType() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchId_VegetType"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Attack() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Attack"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Cold() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Cold"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Defend() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Defend"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Examine() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Examine"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Flee() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Flee"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Follow() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Follow"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Hungry() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Hungry"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Hunt() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Hunt"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Idle() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Idle"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Protect() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Protect"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Sleep() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Sleep"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Thirst() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Thirst"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Threat() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Threat"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_EntityState_Wait() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_EntityState_Wait"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_GiveOrder_Follow() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_GiveOrder_Follow"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_GiveOrder_Insistent() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_GiveOrder_Insistent"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_GiveOrder_Normal() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_GiveOrder_Normal"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_GiveOrder_Wait() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_GiveOrder_Wait"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_Level_High() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_Level_High"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_Level_Low() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_Level_Low"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_Level_Medium() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_Level_Medium"));
        }
        inline Ent::Gen2::String SoundManager::SwitchState_Level_VeryHigh() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SwitchState_Level_VeryHigh"));
        }
        inline Ent::Gen2::String SoundManager::Switch_Ground_Prefix() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Switch_Ground_Prefix"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::Color> SoundManager::TagColors() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::Color>(getProperty().getObjectField("TagColors"));
        }
        inline Ent::Gen2::String SoundManager::UnderWaterBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("UnderWaterBank"));
        }
        inline Ent::Gen2::Bool SoundManager::UnderWaterOnPlayer() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UnderWaterOnPlayer"));
        }
        inline Ent::Gen2::Float SoundManager::UnderwaterOutZone() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("UnderwaterOutZone"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::String> SoundManager::VegetationTagMapping() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::String>(getProperty().getObjectField("VegetationTagMapping"));
        }
        inline Ent::Gen2::Float SoundManager::VerticalUnderWaterOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VerticalUnderWaterOffset"));
        }
        inline Ent::Gen2::Float SoundManager::VolumeRTPCScaleFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VolumeRTPCScaleFactor"));
        }
        inline Ent::Gen2::String SoundManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // OnlineDebugger_BandwidthWindow_BandwithLimit
        inline Ent::Gen2::String OnlineDebugger_BandwidthWindow_BandwithLimit::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Color OnlineDebugger_BandwidthWindow_BandwithLimit::color() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("color"));
        }
        inline Ent::Gen2::Float OnlineDebugger_BandwidthWindow_BandwithLimit::limit() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("limit"));
        }
        // OnlineDebugger_BandwidthWindow
        inline Array<Ent::Gen2::OnlineDebugger_BandwidthWindow_BandwithLimit> OnlineDebugger_BandwidthWindow::DownColor() const
        {
            return Array<Ent::Gen2::OnlineDebugger_BandwidthWindow_BandwithLimit>(getProperty().getObjectField("DownColor"));
        }
        inline Ent::Gen2::Bool OnlineDebugger_BandwidthWindow::Enabled() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Enabled"));
        }
        inline Array<Ent::Gen2::OnlineDebugger_BandwidthWindow_BandwithLimit> OnlineDebugger_BandwidthWindow::UpColor() const
        {
            return Array<Ent::Gen2::OnlineDebugger_BandwidthWindow_BandwithLimit>(getProperty().getObjectField("UpColor"));
        }
        inline Ent::Gen2::String OnlineDebugger_BandwidthWindow::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // LightComponentGD
        inline Ent::Gen2::Vector3 LightComponentGD::AngleOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("AngleOffset"));
        }
        inline Ent::Gen2::Float LightComponentGD::Brightness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Brightness"));
        }
        inline Ent::Gen2::Bool LightComponentGD::CastShadow() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CastShadow"));
        }
        inline Ent::Gen2::Color LightComponentGD::Color() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("Color"));
        }
        inline Ent::Gen2::Vector3 LightComponentGD::Direction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Direction"));
        }
        inline Ent::Gen2::Float LightComponentGD::LinearAttenuationStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LinearAttenuationStart"));
        }
        inline Ent::Gen2::Float LightComponentGD::LinearAttenuationStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LinearAttenuationStop"));
        }
        inline Ent::Gen2::Vector3 LightComponentGD::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::Float LightComponentGD::RadialAttenuationStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadialAttenuationStart"));
        }
        inline Ent::Gen2::Float LightComponentGD::RadialAttenuationStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadialAttenuationStop"));
        }
        inline Ent::Gen2::ComponentGD LightComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::LightType LightComponentGD::Type_() const
        {
            return Ent::Gen2::LightType(getProperty().getObjectField("Type"));
        }
        inline Ent::Gen2::Bool LightComponentGD::VolumetricFog() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("VolumetricFog"));
        }
        inline Ent::Gen2::String LightComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GradientColor
        inline Ent::Gen2::String GradientColor::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Color GradientColor::color() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("color"));
        }
        inline Ent::Gen2::Float GradientColor::percent() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("percent"));
        }
        // EditorManager
        inline Ent::Gen2::Bool EditorManager::ActivateMouseControl() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ActivateMouseControl"));
        }
        inline Ent::Gen2::Bool EditorManager::DisableDisplayDebugEntityInfo() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisableDisplayDebugEntityInfo"));
        }
        inline Ent::Gen2::Bool EditorManager::GameBlockedWhenActive() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("GameBlockedWhenActive"));
        }
        inline Ent::Gen2::Float EditorManager::MoveZ_Blend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveZ_Blend"));
        }
        inline Ent::Gen2::Float EditorManager::MoveZ_BlendJoy() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveZ_BlendJoy"));
        }
        inline Ent::Gen2::Float EditorManager::MoveZ_SpeedAtScreenWidthMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveZ_SpeedAtScreenWidthMax"));
        }
        inline Ent::Gen2::Float EditorManager::MoveZ_SpeedAtScreenWidthMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveZ_SpeedAtScreenWidthMin"));
        }
        inline Ent::Gen2::Float EditorManager::Rotate_AccelerationTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Rotate_AccelerationTime"));
        }
        inline Ent::Gen2::Float EditorManager::Rotate_Blend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Rotate_Blend"));
        }
        inline Ent::Gen2::Float EditorManager::Rotate_Speed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Rotate_Speed"));
        }
        inline Ent::Gen2::Float EditorManager::Scale_AccelerationTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Scale_AccelerationTime"));
        }
        inline Ent::Gen2::Float EditorManager::Scale_Blend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Scale_Blend"));
        }
        inline Ent::Gen2::Float EditorManager::Scale_Speed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Scale_Speed"));
        }
        inline Ent::Gen2::Float EditorManager::Selection_DistanceMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Selection_DistanceMax"));
        }
        inline Ent::Gen2::Manager EditorManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Color EditorManager::Text_BackgroundColor() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("Text_BackgroundColor"));
        }
        inline Ent::Gen2::Color EditorManager::Text_DefaultColor() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("Text_DefaultColor"));
        }
        inline Ent::Gen2::Float EditorManager::Text_Scale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Text_Scale"));
        }
        inline Ent::Gen2::Color EditorManager::Text_SelectedColor() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("Text_SelectedColor"));
        }
        inline Ent::Gen2::String EditorManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BoidsGD
        inline Ent::Gen2::Bool BoidsGD::AffectedByFluid() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AffectedByFluid"));
        }
        inline Ent::Gen2::Bool BoidsGD::AllowMerge() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AllowMerge"));
        }
        inline Ent::Gen2::Bool BoidsGD::AutoMoveRoot() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AutoMoveRoot"));
        }
        inline Ent::Gen2::EntityRef BoidsGD::BudEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("BudEntityRef"));
        }
        inline Ent::Gen2::Float BoidsGD::BudVisualScaleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BudVisualScaleMax"));
        }
        inline Ent::Gen2::Float BoidsGD::BudVisualScaleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BudVisualScaleMin"));
        }
        inline Ent::Gen2::Bool BoidsGD::DisplayMaster() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisplayMaster"));
        }
        inline Ent::Gen2::Float BoidsGD::FlockingAttackDamages() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FlockingAttackDamages"));
        }
        inline Ent::Gen2::Float BoidsGD::FluidSurfaceHeightOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FluidSurfaceHeightOffset"));
        }
        inline Ent::Gen2::Bool BoidsGD::ForceOutsideWater() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ForceOutsideWater"));
        }
        inline Ent::Gen2::EntityRef BoidsGD::FullEntityPoolRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("FullEntityPoolRef"));
        }
        inline Ent::Gen2::Float BoidsGD::GetBackToFlockingDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GetBackToFlockingDuration"));
        }
        inline Ent::Gen2::Float BoidsGD::GhostDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GhostDuration"));
        }
        inline Ent::Gen2::Bool BoidsGD::HackCanCreateHitRigidbody() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("HackCanCreateHitRigidbody"));
        }
        inline Ent::Gen2::Float BoidsGD::HierarchyDistanceMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HierarchyDistanceMultiplier"));
        }
        inline Ent::Gen2::Float BoidsGD::InitialRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InitialRadius"));
        }
        inline Ent::Gen2::Float BoidsGD::LightBrightness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LightBrightness"));
        }
        inline Ent::Gen2::Color BoidsGD::LightColor() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("LightColor"));
        }
        inline Ent::Gen2::Float BoidsGD::MainTargetHeight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MainTargetHeight"));
        }
        inline Ent::Gen2::Float BoidsGD::MainTargetRotateDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MainTargetRotateDistance"));
        }
        inline Ent::Gen2::Float BoidsGD::MainTargetSpeedMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MainTargetSpeedMultiplier"));
        }
        inline Ent::Gen2::Float BoidsGD::MinRegenToWakeUp() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinRegenToWakeUp"));
        }
        inline Ent::Gen2::Int BoidsGD::NbAgents() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbAgents"));
        }
        inline Ent::Gen2::Int BoidsGD::NbAgentsPerZone() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbAgentsPerZone"));
        }
        inline Ent::Gen2::String BoidsGD::ParamBlock() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ParamBlock"));
        }
        inline Ent::Gen2::String BoidsGD::ParamBudAppear() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ParamBudAppear"));
        }
        inline Ent::Gen2::String BoidsGD::ParamBudOpen() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ParamBudOpen"));
        }
        inline Ent::Gen2::String BoidsGD::ParamHome() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ParamHome"));
        }
        inline Ent::Gen2::String BoidsGD::ParamMove() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ParamMove"));
        }
        inline Ent::Gen2::String BoidsGD::ParamSwim() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ParamSwim"));
        }
        inline Ent::Gen2::String BoidsGD::ParamWakeUp() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ParamWakeUp"));
        }
        inline Ent::Gen2::Float BoidsGD::PointCloudSearchRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PointCloudSearchRadius"));
        }
        inline Ent::Gen2::String BoidsGD::PointCloudTag() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PointCloudTag"));
        }
        inline Ent::Gen2::String BoidsGD::PresetName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PresetName"));
        }
        inline Ent::Gen2::String BoidsGD::PresetNameBud() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("PresetNameBud"));
        }
        inline Ent::Gen2::Float BoidsGD::RegenMaxThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RegenMaxThreshold"));
        }
        inline Ent::Gen2::ComponentGD BoidsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float BoidsGD::VisualScaleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VisualScaleMax"));
        }
        inline Ent::Gen2::Float BoidsGD::VisualScaleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VisualScaleMin"));
        }
        inline Ent::Gen2::Float BoidsGD::WakeUpDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WakeUpDuration"));
        }
        inline Ent::Gen2::String BoidsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Collider
        inline Ent::Gen2::String Collider::BoneName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneName"));
        }
        inline Ent::Gen2::Float Collider::RadiusFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadiusFactor"));
        }
        inline Ent::Gen2::String Collider::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Codec
        // Zlib
        inline Ent::Gen2::Codec Zlib::Super() const
        {
            return Ent::Gen2::Codec(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String Zlib::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Lz4Fast
        inline Ent::Gen2::Codec Lz4Fast::Super() const
        {
            return Ent::Gen2::Codec(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String Lz4Fast::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ClimbEdgeData_LedgeData
        inline Ent::Gen2::String ClimbEdgeData_LedgeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float ClimbEdgeData_LedgeData::ledgeApproachSpeedMaxZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ledgeApproachSpeedMaxZ"));
        }
        inline Ent::Gen2::Float ClimbEdgeData_LedgeData::ledgeDepthRadiusCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ledgeDepthRadiusCoeff"));
        }
        inline Ent::Gen2::Vector3 ClimbEdgeData_LedgeData::ledgeDetectionOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("ledgeDetectionOffset"));
        }
        inline Ent::Gen2::Float ClimbEdgeData_LedgeData::ledgeDetectionRadiusMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ledgeDetectionRadiusMultiplier"));
        }
        inline Ent::Gen2::Float ClimbEdgeData_LedgeData::ledgeMaxDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ledgeMaxDistance"));
        }
        inline Ent::Gen2::Float ClimbEdgeData_LedgeData::ledgeMaxHeightEpsilon() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ledgeMaxHeightEpsilon"));
        }
        inline Ent::Gen2::Float ClimbEdgeData_LedgeData::ledgeMinDepthEpsilon() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ledgeMinDepthEpsilon"));
        }
        inline Ent::Gen2::Float ClimbEdgeData_LedgeData::ledgeMinWidthEpsilon() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ledgeMinWidthEpsilon"));
        }
        // ClimbEdgeData
        inline Ent::Gen2::String ClimbEdgeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::ScaleConverter ClimbEdgeData::edgeDetectionAnticipation() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("edgeDetectionAnticipation"));
        }
        inline Ent::Gen2::Float ClimbEdgeData::edgeDetectionMaxFlotation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("edgeDetectionMaxFlotation"));
        }
        inline Ent::Gen2::ClimbEdgeData_LedgeData ClimbEdgeData::ledgeData() const
        {
            return Ent::Gen2::ClimbEdgeData_LedgeData(getProperty().getObjectField("ledgeData"));
        }
        inline Ent::Gen2::ClimbEdgeData_LedgeData ClimbEdgeData::ledgeDataImmersed() const
        {
            return Ent::Gen2::ClimbEdgeData_LedgeData(getProperty().getObjectField("ledgeDataImmersed"));
        }
        // ClassMemberRef
        inline Ent::Gen2::String ClassMemberRef::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String ClassMemberRef::class_() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("class"));
        }
        inline Ent::Gen2::String ClassMemberRef::member() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("member"));
        }
        // ComponentSignalRef
        inline Ent::Gen2::ClassMemberRef ComponentSignalRef::Signal() const
        {
            return Ent::Gen2::ClassMemberRef(getProperty().getObjectField("Signal"));
        }
        inline Ent::Gen2::String ComponentSignalRef::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ComponentMethodRef
        inline Ent::Gen2::ClassMemberRef ComponentMethodRef::Method() const
        {
            return Ent::Gen2::ClassMemberRef(getProperty().getObjectField("Method"));
        }
        inline Ent::Gen2::String ComponentMethodRef::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Connection
        inline Ent::Gen2::String Connection::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::ComponentMethodRef Connection::receiver() const
        {
            return Ent::Gen2::ComponentMethodRef(getProperty().getObjectField("receiver"));
        }
        inline Ent::Gen2::ComponentSignalRef Connection::sender() const
        {
            return Ent::Gen2::ComponentSignalRef(getProperty().getObjectField("sender"));
        }
        // CinematicSlot
        inline Ent::Gen2::String CinematicSlot::Anim() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Anim"));
        }
        inline Ent::Gen2::Bool CinematicSlot::CameraHolder() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CameraHolder"));
        }
        inline Ent::Gen2::Bool CinematicSlot::CanBeInstanciated() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CanBeInstanciated"));
        }
        inline Ent::Gen2::Bool CinematicSlot::DestroyAfter() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DestroyAfter"));
        }
        inline Ent::Gen2::EntityRef CinematicSlot::EntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("EntityRef"));
        }
        inline Ent::Gen2::Bool CinematicSlot::EventCameraHolder() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EventCameraHolder"));
        }
        inline Ent::Gen2::Float CinematicSlot::FOV() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FOV"));
        }
        inline Ent::Gen2::Float CinematicSlot::FadeInDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FadeInDelay"));
        }
        inline Ent::Gen2::Float CinematicSlot::FadeOutDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FadeOutDelay"));
        }
        inline Ent::Gen2::Transform3D CinematicSlot::InitTransform() const
        {
            return Ent::Gen2::Transform3D(getProperty().getObjectField("InitTransform"));
        }
        inline Ent::Gen2::Bool CinematicSlot::MainRole() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("MainRole"));
        }
        inline Ent::Gen2::Bool CinematicSlot::Mandatory() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Mandatory"));
        }
        inline Ent::Gen2::String CinematicSlot::Role() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Role"));
        }
        inline Ent::Gen2::String CinematicSlot::RoleInNextSequence() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RoleInNextSequence"));
        }
        inline Ent::Gen2::Bool CinematicSlot::Visible() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Visible"));
        }
        inline Ent::Gen2::String CinematicSlot::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Sequence
        inline Ent::Gen2::Float Sequence::ActivationDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ActivationDelay"));
        }
        inline Ent::Gen2::Bool Sequence::AutoSwitchToNextSequence() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AutoSwitchToNextSequence"));
        }
        inline Ent::Gen2::String Sequence::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::CinematicSlot> Sequence::actors() const
        {
            return Array<Ent::Gen2::CinematicSlot>(getProperty().getObjectField("actors"));
        }
        inline Ent::Gen2::Bool Sequence::loop() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("loop"));
        }
        inline Ent::Gen2::String Sequence::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        // CinematicGD
        inline Ent::Gen2::Float CinematicGD::ActivationDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ActivationDistance"));
        }
        inline Array<Ent::Gen2::ResponsiblePointer_CineEvent_> CinematicGD::ScriptEvents() const
        {
            return Array<Ent::Gen2::ResponsiblePointer_CineEvent_>(getProperty().getObjectField("ScriptEvents"));
        }
        inline Array<Ent::Gen2::Sequence> CinematicGD::Sequences() const
        {
            return Array<Ent::Gen2::Sequence>(getProperty().getObjectField("Sequences"));
        }
        inline Ent::Gen2::Bool CinematicGD::Skippable() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Skippable"));
        }
        inline Ent::Gen2::ComponentGD CinematicGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::CinematicUpdateType CinematicGD::UpdateType() const
        {
            return Ent::Gen2::CinematicUpdateType(getProperty().getObjectField("UpdateType"));
        }
        inline Ent::Gen2::String CinematicGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEvent
        inline Ent::Gen2::Bool CineEvent::Active() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Active"));
        }
        inline Ent::Gen2::String CineEvent::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTrigger
        inline Ent::Gen2::CineEvent CineEventTrigger::Super() const
        {
            return Ent::Gen2::CineEvent(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTrigger::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTriggerPlaySound
        inline Ent::Gen2::String CineEventTriggerPlaySound::SoundEventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SoundEventName"));
        }
        inline Ent::Gen2::CineEventTrigger CineEventTriggerPlaySound::Super() const
        {
            return Ent::Gen2::CineEventTrigger(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTriggerPlaySound::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTriggerPlaySequence
        inline Ent::Gen2::Int CineEventTriggerPlaySequence::SequenceID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SequenceID"));
        }
        inline Ent::Gen2::CineEventTrigger CineEventTriggerPlaySequence::Super() const
        {
            return Ent::Gen2::CineEventTrigger(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTriggerPlaySequence::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTriggerGameStateChange
        inline Ent::Gen2::String CineEventTriggerGameStateChange::GameStateName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GameStateName"));
        }
        inline Ent::Gen2::CineEventTrigger CineEventTriggerGameStateChange::Super() const
        {
            return Ent::Gen2::CineEventTrigger(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTriggerGameStateChange::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTriggerEventHandlerPost
        inline Ent::Gen2::String CineEventTriggerEventHandlerPost::EventCategory() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EventCategory"));
        }
        inline Ent::Gen2::String CineEventTriggerEventHandlerPost::EventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EventName"));
        }
        inline Ent::Gen2::CineEventTrigger CineEventTriggerEventHandlerPost::Super() const
        {
            return Ent::Gen2::CineEventTrigger(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTriggerEventHandlerPost::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTriggerDisplayUIMessage
        inline Ent::Gen2::CineEventTrigger CineEventTriggerDisplayUIMessage::Super() const
        {
            return Ent::Gen2::CineEventTrigger(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::UIMessage CineEventTriggerDisplayUIMessage::UIMessage() const
        {
            return Ent::Gen2::UIMessage(getProperty().getObjectField("UIMessage"));
        }
        inline Ent::Gen2::String CineEventTriggerDisplayUIMessage::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTest
        inline Ent::Gen2::Bool CineEventTest::InvertTest() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("InvertTest"));
        }
        inline Ent::Gen2::CineEvent CineEventTest::Super() const
        {
            return Ent::Gen2::CineEvent(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTest::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTestIsCanceled
        inline Ent::Gen2::CineEventTest CineEventTestIsCanceled::Super() const
        {
            return Ent::Gen2::CineEventTest(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTestIsCanceled::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTestInput
        inline Ent::Gen2::Bool CineEventTestInput::AnyButtonInput() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AnyButtonInput"));
        }
        inline Ent::Gen2::Bool CineEventTestInput::AnyJoyInput() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AnyJoyInput"));
        }
        inline Ent::Gen2::CineEventTest CineEventTestInput::Super() const
        {
            return Ent::Gen2::CineEventTest(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool CineEventTestInput::TriangleButtonInput() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("TriangleButtonInput"));
        }
        inline Ent::Gen2::String CineEventTestInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTestEndCurrentSequence
        inline Ent::Gen2::CineEventTest CineEventTestEndCurrentSequence::Super() const
        {
            return Ent::Gen2::CineEventTest(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTestEndCurrentSequence::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CineEventTestCurrentGameState
        inline Ent::Gen2::String CineEventTestCurrentGameState::GameStateName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GameStateName"));
        }
        inline Ent::Gen2::CineEventTest CineEventTestCurrentGameState::Super() const
        {
            return Ent::Gen2::CineEventTest(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CineEventTestCurrentGameState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CharacterControllerSlideData
        inline Ent::Gen2::String CharacterControllerSlideData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::ScaleConverter CharacterControllerSlideData::adherenceRecoverSpeedDependingOnTheSlope() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("adherenceRecoverSpeedDependingOnTheSlope"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::adherenceThresholdHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("adherenceThresholdHysteresis"));
        }
        inline Ent::Gen2::ScaleConverter CharacterControllerSlideData::adherenceThresholdRequiredToKeepControl() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("adherenceThresholdRequiredToKeepControl"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::adherenceUsingDownwardSlopeDirection() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("adherenceUsingDownwardSlopeDirection"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::adherenceUsingSideSlopeDirection() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("adherenceUsingSideSlopeDirection"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::adherenceUsingUpwardSlopeDirection() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("adherenceUsingUpwardSlopeDirection"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::animblendInTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("animblendInTime"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::friction() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("friction"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::maxSlopeAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxSlopeAngle"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::speedMediumCoeffHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("speedMediumCoeffHysteresis"));
        }
        inline Ent::Gen2::ScaleConverter CharacterControllerSlideData::speedMediumCoeffIn() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("speedMediumCoeffIn"));
        }
        inline Ent::Gen2::Float CharacterControllerSlideData::speedMediumCoeffMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("speedMediumCoeffMin"));
        }
        // CharacterControllerGroundNormalData
        inline Ent::Gen2::Bool CharacterControllerGroundNormalData::AllowOtherCreatureCast() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AllowOtherCreatureCast"));
        }
        inline Ent::Gen2::Float CharacterControllerGroundNormalData::PercentageEdgeTolerance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PercentageEdgeTolerance"));
        }
        inline Ent::Gen2::Float CharacterControllerGroundNormalData::PercentageExtirpate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PercentageExtirpate"));
        }
        inline Ent::Gen2::Float CharacterControllerGroundNormalData::WallAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WallAngle"));
        }
        inline Ent::Gen2::ScaleConverter CharacterControllerGroundNormalData::WallCosAngleSpeedXYFactor() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("WallCosAngleSpeedXYFactor"));
        }
        inline Ent::Gen2::String CharacterControllerGroundNormalData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CharacterControllerFallData
        inline Ent::Gen2::Float CharacterControllerFallData::AirControlBrake() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AirControlBrake"));
        }
        inline Ent::Gen2::Float CharacterControllerFallData::AirControlSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AirControlSmooth"));
        }
        inline Ent::Gen2::Float CharacterControllerFallData::AirControlSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AirControlSpeed"));
        }
        inline Ent::Gen2::ScaleConverter CharacterControllerFallData::DamagesPerHeightFall() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("DamagesPerHeightFall"));
        }
        inline Ent::Gen2::Float CharacterControllerFallData::MinHeightForDamageFall() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinHeightForDamageFall"));
        }
        inline Ent::Gen2::Float CharacterControllerFallData::MinHeightForDeathFall() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinHeightForDeathFall"));
        }
        inline Ent::Gen2::Float CharacterControllerFallData::MinHeightForRecoveryFall() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinHeightForRecoveryFall"));
        }
        inline Ent::Gen2::String CharacterControllerFallData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CharacterControllerClamberData
        inline Ent::Gen2::Float CharacterControllerClamberData::DropOffAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DropOffAngle"));
        }
        inline Ent::Gen2::Float CharacterControllerClamberData::EnterAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EnterAngle"));
        }
        inline Ent::Gen2::Float CharacterControllerClamberData::ExitAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ExitAngle"));
        }
        inline Ent::Gen2::Bool CharacterControllerClamberData::IsAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsAllowed"));
        }
        inline Ent::Gen2::ScaleConverter CharacterControllerClamberData::VerticalOrientationRatio() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("VerticalOrientationRatio"));
        }
        inline Ent::Gen2::String CharacterControllerClamberData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CapabilitiesAndTags
        inline Ent::Gen2::PrimitiveSet<NavMeshCapabilityEnum> CapabilitiesAndTags::Capabilities() const
        {
            return Ent::Gen2::PrimitiveSet<NavMeshCapabilityEnum>(getProperty().getObjectField("Capabilities"));
        }
        inline Ent::Gen2::PrimitiveSet<NavMeshTagEnum> CapabilitiesAndTags::Tags() const
        {
            return Ent::Gen2::PrimitiveSet<NavMeshTagEnum>(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String CapabilitiesAndTags::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ZoneStamper
        inline Ent::Gen2::CapabilitiesAndTags ZoneStamper::CapabilitiesAndTags() const
        {
            return Ent::Gen2::CapabilitiesAndTags(getProperty().getObjectField("CapabilitiesAndTags"));
        }
        inline Ent::Gen2::Float ZoneStamper::DownwardOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DownwardOffset"));
        }
        inline Ent::Gen2::variant_EntityRef_NavMeshArea_ ZoneStamper::NavMeshArea() const
        {
            return Ent::Gen2::variant_EntityRef_NavMeshArea_(getProperty().getObjectField("NavMeshArea"));
        }
        inline Ent::Gen2::Int ZoneStamper::Priority() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Priority"));
        }
        inline Ent::Gen2::variant_ZoneCylinderShape_ZoneMeshShape_ ZoneStamper::Shape() const
        {
            return Ent::Gen2::variant_ZoneCylinderShape_ZoneMeshShape_(getProperty().getObjectField("Shape"));
        }
        inline Ent::Gen2::GeometryStamper ZoneStamper::Super() const
        {
            return Ent::Gen2::GeometryStamper(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float ZoneStamper::UpwardOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("UpwardOffset"));
        }
        inline Ent::Gen2::String ZoneStamper::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // OffMeshLink
        inline Ent::Gen2::String OffMeshLink::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool OffMeshLink::bidirectional() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("bidirectional"));
        }
        inline Ent::Gen2::CapabilitiesAndTags OffMeshLink::capabilitiesAndTags() const
        {
            return Ent::Gen2::CapabilitiesAndTags(getProperty().getObjectField("capabilitiesAndTags"));
        }
        inline Ent::Gen2::EntityRef OffMeshLink::destination() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("destination"));
        }
        inline Ent::Gen2::Float OffMeshLink::radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("radius"));
        }
        // NavMeshStamperGD
        inline Ent::Gen2::Bool NavMeshStamperGD::IsActive() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsActive"));
        }
        inline Array<Ent::Gen2::MeshStamper> NavMeshStamperGD::MeshStampers() const
        {
            return Array<Ent::Gen2::MeshStamper>(getProperty().getObjectField("MeshStampers"));
        }
        inline Array<Ent::Gen2::OffMeshLink> NavMeshStamperGD::OffMeshLinks() const
        {
            return Array<Ent::Gen2::OffMeshLink>(getProperty().getObjectField("OffMeshLinks"));
        }
        inline Array<Ent::Gen2::SkinnedPhysMeshStamper> NavMeshStamperGD::SkinnedMeshStampers() const
        {
            return Array<Ent::Gen2::SkinnedPhysMeshStamper>(getProperty().getObjectField("SkinnedMeshStampers"));
        }
        inline Ent::Gen2::ComponentGD NavMeshStamperGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Array<Ent::Gen2::ZoneStamper> NavMeshStamperGD::ZoneStampers() const
        {
            return Array<Ent::Gen2::ZoneStamper>(getProperty().getObjectField("ZoneStampers"));
        }
        inline Ent::Gen2::String NavMeshStamperGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CanTakeHit
        inline Ent::Gen2::String CanTakeHit::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool CanTakeHit::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::Bool CanTakeHit::val() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("val"));
        }
        // CreatureComponentInput
        inline Ent::Gen2::CanTakeHit CreatureComponentInput::CanTakeHit() const
        {
            return Ent::Gen2::CanTakeHit(getProperty().getObjectField("CanTakeHit"));
        }
        inline Ent::Gen2::DeltaTimeFactor CreatureComponentInput::DeltaTimeFactor() const
        {
            return Ent::Gen2::DeltaTimeFactor(getProperty().getObjectField("DeltaTimeFactor"));
        }
        inline Ent::Gen2::Invincible CreatureComponentInput::Invincible() const
        {
            return Ent::Gen2::Invincible(getProperty().getObjectField("Invincible"));
        }
        inline Ent::Gen2::ComponentInput CreatureComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CreatureComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CameraSetterGD
        inline Ent::Gen2::Bool CameraSetterGD::SetPositionToHotspot() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("SetPositionToHotspot"));
        }
        inline Ent::Gen2::ComponentGD CameraSetterGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool CameraSetterGD::SwitchToType() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("SwitchToType"));
        }
        inline Ent::Gen2::CameraType CameraSetterGD::Type_() const
        {
            return Ent::Gen2::CameraType(getProperty().getObjectField("Type"));
        }
        inline Ent::Gen2::String CameraSetterGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CameraSoundEvent
        inline Ent::Gen2::String CameraSoundEvent::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String CameraSoundEvent::eventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("eventName"));
        }
        inline Ent::Gen2::String CameraSoundEvent::from_() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("from"));
        }
        inline Ent::Gen2::String CameraSoundEvent::to() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("to"));
        }
        // CameraShakeData
        inline Ent::Gen2::String CameraShakeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float CameraShakeData::shakeDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("shakeDuration"));
        }
        inline Ent::Gen2::Float CameraShakeData::shakeFrequency() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("shakeFrequency"));
        }
        inline Ent::Gen2::Float CameraShakeData::shakeIntensity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("shakeIntensity"));
        }
        inline Ent::Gen2::Vector3 CameraShakeData::shakeRotation() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("shakeRotation"));
        }
        // ExplosionEffect
        inline Ent::Gen2::Float ExplosionEffect::ControllerVibrationCoef() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ControllerVibrationCoef"));
        }
        inline Ent::Gen2::Float ExplosionEffect::DistanceReductionStep() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceReductionStep"));
        }
        inline Ent::Gen2::Float ExplosionEffect::Force() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Force"));
        }
        inline Ent::Gen2::Float ExplosionEffect::ForceReductionByStep() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ForceReductionByStep"));
        }
        inline Ent::Gen2::Float ExplosionEffect::ShakeAttenuationRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ShakeAttenuationRadius"));
        }
        inline Ent::Gen2::CameraShakeData ExplosionEffect::ShakeData() const
        {
            return Ent::Gen2::CameraShakeData(getProperty().getObjectField("ShakeData"));
        }
        inline Ent::Gen2::Float ExplosionEffect::ShakeRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ShakeRadius"));
        }
        inline Ent::Gen2::GameEffect ExplosionEffect::Super() const
        {
            return Ent::Gen2::GameEffect(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ExplosionEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CameraFreeData
        inline Ent::Gen2::Float CameraFreeData::Acceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Acceleration"));
        }
        inline Ent::Gen2::Float CameraFreeData::Deceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Deceleration"));
        }
        inline Ent::Gen2::Float CameraFreeData::JoyThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoyThreshold"));
        }
        inline Ent::Gen2::Float CameraFreeData::MoveBlend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveBlend"));
        }
        inline Ent::Gen2::Float CameraFreeData::MoveSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveSpeed"));
        }
        inline Ent::Gen2::Float CameraFreeData::MoveSpeedZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveSpeedZ"));
        }
        inline Ent::Gen2::Float CameraFreeData::RotateBlendX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateBlendX"));
        }
        inline Ent::Gen2::Float CameraFreeData::RotateBlendY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateBlendY"));
        }
        inline Ent::Gen2::Float CameraFreeData::RotateSpeedX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateSpeedX"));
        }
        inline Ent::Gen2::Float CameraFreeData::RotateSpeedY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateSpeedY"));
        }
        inline Ent::Gen2::Float CameraFreeData::SpeedMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedMax"));
        }
        inline Ent::Gen2::String CameraFreeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CameraEditorData
        inline Ent::Gen2::Float CameraEditorData::DistanceMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceMax"));
        }
        inline Ent::Gen2::Float CameraEditorData::DistanceMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceMin"));
        }
        inline Ent::Gen2::Float CameraEditorData::MoveBlend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveBlend"));
        }
        inline Ent::Gen2::Float CameraEditorData::MoveSpeedAtScreenWidthMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveSpeedAtScreenWidthMax"));
        }
        inline Ent::Gen2::Float CameraEditorData::MoveSpeedAtScreenWidthMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveSpeedAtScreenWidthMin"));
        }
        inline Ent::Gen2::Float CameraEditorData::RotateBlendX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateBlendX"));
        }
        inline Ent::Gen2::Float CameraEditorData::RotateBlendY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateBlendY"));
        }
        inline Ent::Gen2::Float CameraEditorData::RotateSpeedX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateSpeedX"));
        }
        inline Ent::Gen2::Float CameraEditorData::RotateSpeedY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateSpeedY"));
        }
        inline Ent::Gen2::Float CameraEditorData::ScreenWidthMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ScreenWidthMax"));
        }
        inline Ent::Gen2::Float CameraEditorData::ScreenWidthMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ScreenWidthMin"));
        }
        inline Ent::Gen2::Float CameraEditorData::ZoomBlend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ZoomBlend"));
        }
        inline Ent::Gen2::Float CameraEditorData::ZoomSpeedAtScreenWidthMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ZoomSpeedAtScreenWidthMax"));
        }
        inline Ent::Gen2::Float CameraEditorData::ZoomSpeedAtScreenWidthMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ZoomSpeedAtScreenWidthMin"));
        }
        inline Ent::Gen2::String CameraEditorData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CameraManager
        inline Ent::Gen2::Bool CameraManager::ActivateDoF() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ActivateDoF"));
        }
        inline Ent::Gen2::Vector2 CameraManager::AnglesLevels() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("AnglesLevels"));
        }
        inline Ent::Gen2::Bool CameraManager::CameraControlAxisInvertX() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CameraControlAxisInvertX"));
        }
        inline Ent::Gen2::Bool CameraManager::CameraControlAxisInvertY() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CameraControlAxisInvertY"));
        }
        inline Ent::Gen2::Vector2 CameraManager::DistanceFromTopPosition() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("DistanceFromTopPosition"));
        }
        inline Ent::Gen2::CameraEditorData CameraManager::Editor() const
        {
            return Ent::Gen2::CameraEditorData(getProperty().getObjectField("Editor"));
        }
        inline Ent::Gen2::CameraFreeData CameraManager::Free() const
        {
            return Ent::Gen2::CameraFreeData(getProperty().getObjectField("Free"));
        }
        inline Ent::Gen2::Vector2 CameraManager::HeightLevel() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("HeightLevel"));
        }
        inline Ent::Gen2::Float CameraManager::RotatePitchIn() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotatePitchIn"));
        }
        inline Ent::Gen2::Float CameraManager::RotatePitchOut() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotatePitchOut"));
        }
        inline Ent::Gen2::Float CameraManager::RotateYawIn() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateYawIn"));
        }
        inline Ent::Gen2::Float CameraManager::RotateYawOut() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateYawOut"));
        }
        inline Ent::Gen2::Float CameraManager::SpeedHorizontal() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedHorizontal"));
        }
        inline Ent::Gen2::Float CameraManager::SpeedVertical() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedVertical"));
        }
        inline Ent::Gen2::Manager CameraManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CameraManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BoneStartPoint
        inline Ent::Gen2::String BoneStartPoint::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool BoneStartPoint::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::String BoneStartPoint::val() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("val"));
        }
        // InteractorGD
        inline PrimArray<Ent::Gen2::String> InteractorGD::BeamEffectsNames() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("BeamEffectsNames"));
        }
        inline Ent::Gen2::BoneStartPoint InteractorGD::BoneStartPoint() const
        {
            return Ent::Gen2::BoneStartPoint(getProperty().getObjectField("BoneStartPoint"));
        }
        inline Ent::Gen2::Float InteractorGD::MaxBeamRange() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxBeamRange"));
        }
        inline Ent::Gen2::Float InteractorGD::RandomSphereCastsAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RandomSphereCastsAngle"));
        }
        inline Ent::Gen2::Int InteractorGD::RandomSphereCastsNb() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("RandomSphereCastsNb"));
        }
        inline Ent::Gen2::Float InteractorGD::RememberTargetMaxTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RememberTargetMaxTime"));
        }
        inline Ent::Gen2::Float InteractorGD::SphereCastRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SphereCastRadius"));
        }
        inline Ent::Gen2::ComponentGD InteractorGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String InteractorGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BoneAnimation
        inline Ent::Gen2::String BoneAnimation::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Array<Ent::Gen2::Vector4> BoneAnimation::Rotations() const
        {
            return Array<Ent::Gen2::Vector4>(getProperty().getObjectField("Rotations"));
        }
        inline Array<Ent::Gen2::Vector3> BoneAnimation::Scales() const
        {
            return Array<Ent::Gen2::Vector3>(getProperty().getObjectField("Scales"));
        }
        inline Array<Ent::Gen2::Vector4> BoneAnimation::Translations() const
        {
            return Array<Ent::Gen2::Vector4>(getProperty().getObjectField("Translations"));
        }
        inline Ent::Gen2::String BoneAnimation::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BoidSpeedMaxData
        inline Ent::Gen2::Float BoidSpeedMaxData::Duration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Duration"));
        }
        inline Ent::Gen2::Float BoidSpeedMaxData::SpeedMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedMax"));
        }
        inline Ent::Gen2::String BoidSpeedMaxData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BlendShapeAnimation
        inline Ent::Gen2::String BlendShapeAnimation::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline PrimArray<Ent::Gen2::Float> BlendShapeAnimation::Weights() const
        {
            return PrimArray<Ent::Gen2::Float>(getProperty().getObjectField("Weights"));
        }
        inline Ent::Gen2::String BlendShapeAnimation::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationIntermediateFormat
        inline Array<Ent::Gen2::BlendShapeAnimation> AnimationIntermediateFormat::BlendShapeAnimations() const
        {
            return Array<Ent::Gen2::BlendShapeAnimation>(getProperty().getObjectField("BlendShapeAnimations"));
        }
        inline Array<Ent::Gen2::BoneAnimation> AnimationIntermediateFormat::BoneAnimations() const
        {
            return Array<Ent::Gen2::BoneAnimation>(getProperty().getObjectField("BoneAnimations"));
        }
        inline Ent::Gen2::Int AnimationIntermediateFormat::EndFrame() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EndFrame"));
        }
        inline Ent::Gen2::Float AnimationIntermediateFormat::EndTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EndTime"));
        }
        inline Ent::Gen2::Int AnimationIntermediateFormat::NumFrames() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NumFrames"));
        }
        inline Ent::Gen2::Float AnimationIntermediateFormat::Period() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Period"));
        }
        inline Ent::Gen2::Int AnimationIntermediateFormat::StartFrame() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("StartFrame"));
        }
        inline Ent::Gen2::Float AnimationIntermediateFormat::StartTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("StartTime"));
        }
        inline Ent::Gen2::String AnimationIntermediateFormat::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BiteData
        inline Ent::Gen2::Bool BiteData::CanBiteBiped() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CanBiteBiped"));
        }
        inline Ent::Gen2::Bool BiteData::CanBiteFriends() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CanBiteFriends"));
        }
        inline Ent::Gen2::Bool BiteData::CheckHotspotOrientation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CheckHotspotOrientation"));
        }
        inline Ent::Gen2::String BiteData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool BiteData::bezierMove() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("bezierMove"));
        }
        inline Ent::Gen2::Float BiteData::biteDamagePerSec() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("biteDamagePerSec"));
        }
        inline Ent::Gen2::Float BiteData::biteDefenseDamages() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("biteDefenseDamages"));
        }
        inline Ent::Gen2::Float BiteData::biteDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("biteDuration"));
        }
        inline Ent::Gen2::Float BiteData::biteMaxRange() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("biteMaxRange"));
        }
        // BiomeSoundBank_sBiomeEnv
        inline Ent::Gen2::String BiomeSoundBank_sBiomeEnv::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Float BiomeSoundBank_sBiomeEnv::Spread() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Spread"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeEnv::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BiomeSoundBank_sBiomeSound
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSound::AuxSend() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("AuxSend"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSound::Bank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Bank"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSound::Event() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Event"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSound::Event_Stop() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Event_Stop"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSound::MainState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MainState"));
        }
        inline Ent::Gen2::BiomeSoundBank_sBiomeEnv BiomeSoundBank_sBiomeSound::Super() const
        {
            return Ent::Gen2::BiomeSoundBank_sBiomeEnv(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSound::Tag() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Tag"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSound::Volume() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Volume"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSound::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BiomeSoundBank_sBiomeSFX
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSFX::Rtpc() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Rtpc"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSFX::SFX() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SFX"));
        }
        inline Ent::Gen2::BiomeSoundBank_sBiomeEnv BiomeSoundBank_sBiomeSFX::Super() const
        {
            return Ent::Gen2::BiomeSoundBank_sBiomeEnv(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BiomeSoundBank_sBiomeSFX::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BiomeSoundBank
        inline Array<Ent::Gen2::BiomeSoundBank_sBiomeSFX> BiomeSoundBank::BiomeSFX() const
        {
            return Array<Ent::Gen2::BiomeSoundBank_sBiomeSFX>(getProperty().getObjectField("BiomeSFX"));
        }
        inline Array<Ent::Gen2::BiomeSoundBank_sBiomeSound> BiomeSoundBank::BiomeSounds() const
        {
            return Array<Ent::Gen2::BiomeSoundBank_sBiomeSound>(getProperty().getObjectField("BiomeSounds"));
        }
        inline Ent::Gen2::String BiomeSoundBank::DefaultBiomeName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("DefaultBiomeName"));
        }
        inline Ent::Gen2::String BiomeSoundBank::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BillboardRendererProperties
        inline Ent::Gen2::BillboardRenderingAttribute BillboardRendererProperties::Attribute() const
        {
            return Ent::Gen2::BillboardRenderingAttribute(getProperty().getObjectField("Attribute"));
        }
        inline Ent::Gen2::BillboardCameraFacingQuadType BillboardRendererProperties::BillboardType() const
        {
            return Ent::Gen2::BillboardCameraFacingQuadType(getProperty().getObjectField("BillboardType"));
        }
        inline PrimArray<Ent::Gen2::String> BillboardRendererProperties::ExtraMaterialPathArray() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("ExtraMaterialPathArray"));
        }
        inline Ent::Gen2::String BillboardRendererProperties::MaterialPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MaterialPath"));
        }
        inline Ent::Gen2::Int BillboardRendererProperties::NbMeshInstances() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbMeshInstances"));
        }
        inline Ent::Gen2::Int BillboardRendererProperties::NbQuads() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbQuads"));
        }
        inline Ent::Gen2::Vector3 BillboardRendererProperties::Offset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Offset"));
        }
        inline Ent::Gen2::BillboardRenderingSides BillboardRendererProperties::Sides() const
        {
            return Ent::Gen2::BillboardRenderingSides(getProperty().getObjectField("Sides"));
        }
        inline Ent::Gen2::String BillboardRendererProperties::VisualPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VisualPath"));
        }
        inline Ent::Gen2::String BillboardRendererProperties::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BillboardProperties
        inline Ent::Gen2::Float BillboardProperties::Duration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Duration"));
        }
        inline Ent::Gen2::Bool BillboardProperties::Looping() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Looping"));
        }
        inline Ent::Gen2::Float BillboardProperties::Luminosity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Luminosity"));
        }
        inline Ent::Gen2::String BillboardProperties::LuminosityCurvePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("LuminosityCurvePath"));
        }
        inline Ent::Gen2::Float BillboardProperties::LuminosityVariability() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LuminosityVariability"));
        }
        inline Array<Ent::Gen2::BillboardRendererProperties> BillboardProperties::RenderingProperties() const
        {
            return Array<Ent::Gen2::BillboardRendererProperties>(getProperty().getObjectField("RenderingProperties"));
        }
        inline Ent::Gen2::BillboardRenderingType BillboardProperties::RenderingType() const
        {
            return Ent::Gen2::BillboardRenderingType(getProperty().getObjectField("RenderingType"));
        }
        inline Ent::Gen2::Vector3 BillboardProperties::Size() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Size"));
        }
        inline Ent::Gen2::String BillboardProperties::SizeCurvePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SizeCurvePath"));
        }
        inline Ent::Gen2::Vector3 BillboardProperties::SizeVariability() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("SizeVariability"));
        }
        inline Ent::Gen2::String BillboardProperties::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BehaviorTypedValue
        inline Ent::Gen2::variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_ BehaviorTypedValue::Value() const
        {
            return Ent::Gen2::variant_string_bool_s32_float_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_Vector2Vec_Vector3Vec_PositionVec_(getProperty().getObjectField("Value"));
        }
        inline Ent::Gen2::String BehaviorTypedValue::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BehaviorScriptData
        inline Ent::Gen2::Map<char const*, Ent::Gen2::BehaviorTypedValue> BehaviorScriptData::DataMap() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::BehaviorTypedValue>(getProperty().getObjectField("DataMap"));
        }
        inline Ent::Gen2::String BehaviorScriptData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Int BehaviorScriptData::attackAggressivityDecrease() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("attackAggressivityDecrease"));
        }
        inline Ent::Gen2::Int BehaviorScriptData::hardFeelingsFriendlyHitCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("hardFeelingsFriendlyHitCount"));
        }
        inline Ent::Gen2::Int BehaviorScriptData::hardFeelingsNotFriendlyHitCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("hardFeelingsNotFriendlyHitCount"));
        }
        inline Ent::Gen2::Int BehaviorScriptData::panicAggressivityDecrease() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("panicAggressivityDecrease"));
        }
        inline Array<Ent::Gen2::ShootSequenceData> BehaviorScriptData::shootSequence() const
        {
            return Array<Ent::Gen2::ShootSequenceData>(getProperty().getObjectField("shootSequence"));
        }
        // CreatureAIGD
        inline PrimArray<Ent::Gen2::String> CreatureAIGD::BehaviorModifiersTags() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("BehaviorModifiersTags"));
        }
        inline Ent::Gen2::String CreatureAIGD::BehaviorPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BehaviorPath"));
        }
        inline Ent::Gen2::String CreatureAIGD::BehaviorState() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BehaviorState"));
        }
        inline Ent::Gen2::Bool CreatureAIGD::CanBeMaster() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CanBeMaster"));
        }
        inline Ent::Gen2::ComponentGD CreatureAIGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CreatureAIGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::BehaviorScriptData CreatureAIGD::behaviorScriptData() const
        {
            return Ent::Gen2::BehaviorScriptData(getProperty().getObjectField("behaviorScriptData"));
        }
        inline Ent::Gen2::Float CreatureAIGD::m_oblivionTimerAfterSuspicious() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_oblivionTimerAfterSuspicious"));
        }
        inline Ent::Gen2::Float CreatureAIGD::m_oblivionTimerBeforeSuspicious() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_oblivionTimerBeforeSuspicious"));
        }
        inline Ent::Gen2::Float CreatureAIGD::m_timerBeforeCertain() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_timerBeforeCertain"));
        }
        inline Ent::Gen2::Float CreatureAIGD::m_timerBeforeSuspicious() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_timerBeforeSuspicious"));
        }
        // BeamTargetGD
        inline Ent::Gen2::String BeamTargetGD::EventTriggered() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EventTriggered"));
        }
        inline Ent::Gen2::HotSpotType BeamTargetGD::HotspotType() const
        {
            return Ent::Gen2::HotSpotType(getProperty().getObjectField("HotspotType"));
        }
        inline Ent::Gen2::Float BeamTargetGD::InteractMaxDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InteractMaxDistance"));
        }
        inline Ent::Gen2::Float BeamTargetGD::InteractionRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InteractionRadius"));
        }
        inline Ent::Gen2::BeamStaffMode BeamTargetGD::Mode() const
        {
            return Ent::Gen2::BeamStaffMode(getProperty().getObjectField("Mode"));
        }
        inline Ent::Gen2::ComponentGD BeamTargetGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String BeamTargetGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BaseParameters
        inline Ent::Gen2::String BaseParameters::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float BaseParameters::additionalSpeedRequired() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("additionalSpeedRequired"));
        }
        inline Ent::Gen2::Vector3 BaseParameters::direction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("direction"));
        }
        inline Ent::Gen2::Int BaseParameters::flags() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("flags"));
        }
        inline Ent::Gen2::Float BaseParameters::force() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("force"));
        }
        inline Ent::Gen2::Position BaseParameters::position() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("position"));
        }
        inline Ent::Gen2::Bool BaseParameters::shouldIgnoreSourceContactsDuringHit() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("shouldIgnoreSourceContactsDuringHit"));
        }
        inline Ent::Gen2::Size BaseParameters::size() const
        {
            return Ent::Gen2::Size(getProperty().getObjectField("size"));
        }
        inline Ent::Gen2::HitStyle BaseParameters::style() const
        {
            return Ent::Gen2::HitStyle(getProperty().getObjectField("style"));
        }
        inline Ent::Gen2::HitType BaseParameters::type() const
        {
            return Ent::Gen2::HitType(getProperty().getObjectField("type"));
        }
        // Hit
        inline Ent::Gen2::BaseParameters Hit::BaseParameters() const
        {
            return Ent::Gen2::BaseParameters(getProperty().getObjectField("BaseParameters"));
        }
        inline Ent::Gen2::DamagesInstant Hit::DamageInstantParameters() const
        {
            return Ent::Gen2::DamagesInstant(getProperty().getObjectField("DamageInstantParameters"));
        }
        inline Ent::Gen2::TargetCollision Hit::TargetCollision() const
        {
            return Ent::Gen2::TargetCollision(getProperty().getObjectField("TargetCollision"));
        }
        inline Ent::Gen2::String Hit::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AttackPositionRetimingData_SpecieRetimingCoeff
        inline Ent::Gen2::String AttackPositionRetimingData_SpecieRetimingCoeff::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float AttackPositionRetimingData_SpecieRetimingCoeff::defaultCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("defaultCoeff"));
        }
        inline Ent::Gen2::Float AttackPositionRetimingData_SpecieRetimingCoeff::masterCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("masterCoeff"));
        }
        // AttackPositionRetimingData
        inline Ent::Gen2::String AttackPositionRetimingData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float AttackPositionRetimingData::animTranslationCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("animTranslationCoeff"));
        }
        inline Ent::Gen2::Map<SpecieEnum, Ent::Gen2::AttackPositionRetimingData_SpecieRetimingCoeff> AttackPositionRetimingData::backwardRetimingCoeffBySpecie() const
        {
            return Ent::Gen2::Map<SpecieEnum, Ent::Gen2::AttackPositionRetimingData_SpecieRetimingCoeff>(getProperty().getObjectField("backwardRetimingCoeffBySpecie"));
        }
        inline Ent::Gen2::Float AttackPositionRetimingData::lengthMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("lengthMax"));
        }
        inline Ent::Gen2::Float AttackPositionRetimingData::lengthMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("lengthMin"));
        }
        inline Ent::Gen2::Float AttackPositionRetimingData::spherecastRadiusCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("spherecastRadiusCoeff"));
        }
        // AttackPhysicsForceData
        inline Ent::Gen2::String AttackPhysicsForceData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float AttackPhysicsForceData::amount() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("amount"));
        }
        // AttackImpactData
        inline Ent::Gen2::String AttackImpactData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float AttackImpactData::amount() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("amount"));
        }
        // AttackData
        inline Ent::Gen2::AttackType AttackData::DefaultAttackType() const
        {
            return Ent::Gen2::AttackType(getProperty().getObjectField("DefaultAttackType"));
        }
        inline Ent::Gen2::String AttackData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AttackDamageData
        inline Ent::Gen2::String AttackDamageData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float AttackDamageData::amount() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("amount"));
        }
        // GameAttackData
        inline Ent::Gen2::Float GameAttackData::AggressiveDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AggressiveDuration"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::CameraShakeData> GameAttackData::AttackCameraShakeData() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::CameraShakeData>(getProperty().getObjectField("AttackCameraShakeData"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::AttackDamageData> GameAttackData::AttackDamageData() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::AttackDamageData>(getProperty().getObjectField("AttackDamageData"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::AttackImpactData> GameAttackData::AttackImpactData() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::AttackImpactData>(getProperty().getObjectField("AttackImpactData"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::AttackPhysicsForceData> GameAttackData::AttackPhysicsForceData() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::AttackPhysicsForceData>(getProperty().getObjectField("AttackPhysicsForceData"));
        }
        inline Ent::Gen2::ScaleConverter GameAttackData::DashTargetImpulse() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("DashTargetImpulse"));
        }
        inline Ent::Gen2::Float GameAttackData::ShapeAfterGlowTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ShapeAfterGlowTime"));
        }
        inline Ent::Gen2::Float GameAttackData::ShapeAnticipationTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ShapeAnticipationTime"));
        }
        inline Ent::Gen2::Float GameAttackData::ShapePassivedAnticipationTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ShapePassivedAnticipationTime"));
        }
        inline Ent::Gen2::Float GameAttackData::ShapeRadiusScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ShapeRadiusScale"));
        }
        inline Ent::Gen2::Float GameAttackData::SpeedLockedDelayAfterDodge() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedLockedDelayAfterDodge"));
        }
        inline Ent::Gen2::Bool GameAttackData::UseMountAttack() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseMountAttack"));
        }
        inline Ent::Gen2::String GameAttackData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // GameManager
        inline Ent::Gen2::Float GameManager::ActionAttackValidityTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ActionAttackValidityTime"));
        }
        inline Ent::Gen2::GameAttackData GameManager::AttackData() const
        {
            return Ent::Gen2::GameAttackData(getProperty().getObjectField("AttackData"));
        }
        inline Ent::Gen2::FreezeData GameManager::BeamFreezeData() const
        {
            return Ent::Gen2::FreezeData(getProperty().getObjectField("BeamFreezeData"));
        }
        inline Ent::Gen2::GameBeamSnapData GameManager::BeamSnapData() const
        {
            return Ent::Gen2::GameBeamSnapData(getProperty().getObjectField("BeamSnapData"));
        }
        inline Ent::Gen2::GameBiteData GameManager::BiteData() const
        {
            return Ent::Gen2::GameBiteData(getProperty().getObjectField("BiteData"));
        }
        inline Ent::Gen2::Map<char const*, Ent::Gen2::Float> GameManager::CameraParamsSmoothData() const
        {
            return Ent::Gen2::Map<char const*, Ent::Gen2::Float>(getProperty().getObjectField("CameraParamsSmoothData"));
        }
        inline Ent::Gen2::ConstrainedInputData GameManager::ConstrainedInputData() const
        {
            return Ent::Gen2::ConstrainedInputData(getProperty().getObjectField("ConstrainedInputData"));
        }
        inline Ent::Gen2::GameDeathData GameManager::DeathData() const
        {
            return Ent::Gen2::GameDeathData(getProperty().getObjectField("DeathData"));
        }
        inline Ent::Gen2::Float GameManager::DefaultCameraParamsSmoothValue() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DefaultCameraParamsSmoothValue"));
        }
        inline Ent::Gen2::Int GameManager::DefaultGamePadID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("DefaultGamePadID"));
        }
        inline Ent::Gen2::GameEdgeData GameManager::EdgeData() const
        {
            return Ent::Gen2::GameEdgeData(getProperty().getObjectField("EdgeData"));
        }
        inline Ent::Gen2::Bool GameManager::EnableSplashScreen() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EnableSplashScreen"));
        }
        inline Ent::Gen2::GameFallData GameManager::FallData() const
        {
            return Ent::Gen2::GameFallData(getProperty().getObjectField("FallData"));
        }
        inline Ent::Gen2::GameFeetCatchUpData GameManager::FeetCatchUpData() const
        {
            return Ent::Gen2::GameFeetCatchUpData(getProperty().getObjectField("FeetCatchUpData"));
        }
        inline Ent::Gen2::GameFluidData GameManager::FluidData() const
        {
            return Ent::Gen2::GameFluidData(getProperty().getObjectField("FluidData"));
        }
        inline Ent::Gen2::GameFlyData GameManager::FlyData() const
        {
            return Ent::Gen2::GameFlyData(getProperty().getObjectField("FlyData"));
        }
        inline Ent::Gen2::Float GameManager::GamePadAimHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GamePadAimHysteresis"));
        }
        inline Ent::Gen2::Float GameManager::GamePadAimThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GamePadAimThreshold"));
        }
        inline Ent::Gen2::GamePadNavigationData GameManager::GamePadNavigationData() const
        {
            return Ent::Gen2::GamePadNavigationData(getProperty().getObjectField("GamePadNavigationData"));
        }
        inline Ent::Gen2::Float GameManager::GamePadRumbleScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GamePadRumbleScale"));
        }
        inline Ent::Gen2::GamePadSpeedBehaviorData GameManager::GamePadSpeedBehaviorData() const
        {
            return Ent::Gen2::GamePadSpeedBehaviorData(getProperty().getObjectField("GamePadSpeedBehaviorData"));
        }
        inline Ent::Gen2::Float GameManager::GameSpawnFadeInDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GameSpawnFadeInDelay"));
        }
        inline Ent::Gen2::Float GameManager::GameSpawnFadeInDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GameSpawnFadeInDuration"));
        }
        inline Ent::Gen2::CameraShakeData GameManager::HitShakeData() const
        {
            return Ent::Gen2::CameraShakeData(getProperty().getObjectField("HitShakeData"));
        }
        inline Array<Ent::Gen2::GameImmersionData> GameManager::ImmersionData() const
        {
            return Array<Ent::Gen2::GameImmersionData>(getProperty().getObjectField("ImmersionData"));
        }
        inline Ent::Gen2::ScaleConverter GameManager::InputCollisionAnticipationLength() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("InputCollisionAnticipationLength"));
        }
        inline Ent::Gen2::Float GameManager::InteractionDisplayHysteresis() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InteractionDisplayHysteresis"));
        }
        inline Ent::Gen2::Float GameManager::InteractionPressDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InteractionPressDuration"));
        }
        inline Ent::Gen2::Float GameManager::InteractionScreenViewDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InteractionScreenViewDistance"));
        }
        inline Ent::Gen2::String GameManager::IntroVideo() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("IntroVideo"));
        }
        inline Ent::Gen2::GameLODData GameManager::LODData() const
        {
            return Ent::Gen2::GameLODData(getProperty().getObjectField("LODData"));
        }
        inline Ent::Gen2::GameImmersionData GameManager::LavaImmersionData() const
        {
            return Ent::Gen2::GameImmersionData(getProperty().getObjectField("LavaImmersionData"));
        }
        inline Ent::Gen2::Float GameManager::LockTargetMaxDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockTargetMaxDistance"));
        }
        inline Ent::Gen2::Float GameManager::LockTargetScreenViewDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockTargetScreenViewDistance"));
        }
        inline Ent::Gen2::Float GameManager::Long_Press_Duration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Long Press Duration"));
        }
        inline Ent::Gen2::Bool GameManager::MountOnlyOnFollower() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("MountOnlyOnFollower"));
        }
        inline Ent::Gen2::String GameManager::NewGameVideo() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NewGameVideo"));
        }
        inline Ent::Gen2::String GameManager::NewGameVideoMusicStart() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NewGameVideoMusicStart"));
        }
        inline Ent::Gen2::String GameManager::NewGameVideoMusicStop() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("NewGameVideoMusicStop"));
        }
        inline Ent::Gen2::GameParryData GameManager::ParryData() const
        {
            return Ent::Gen2::GameParryData(getProperty().getObjectField("ParryData"));
        }
        inline Ent::Gen2::GamePropelData GameManager::PropelData() const
        {
            return Ent::Gen2::GamePropelData(getProperty().getObjectField("PropelData"));
        }
        inline Ent::Gen2::GameRespawnData GameManager::RespawnData() const
        {
            return Ent::Gen2::GameRespawnData(getProperty().getObjectField("RespawnData"));
        }
        inline Ent::Gen2::GameReviveData GameManager::ReviveData() const
        {
            return Ent::Gen2::GameReviveData(getProperty().getObjectField("ReviveData"));
        }
        inline Ent::Gen2::GameShamanVisionData GameManager::ShamanVisionData() const
        {
            return Ent::Gen2::GameShamanVisionData(getProperty().getObjectField("ShamanVisionData"));
        }
        inline Ent::Gen2::GameSlopeData GameManager::SlopeData() const
        {
            return Ent::Gen2::GameSlopeData(getProperty().getObjectField("SlopeData"));
        }
        inline Ent::Gen2::GameSnapData GameManager::SnapData() const
        {
            return Ent::Gen2::GameSnapData(getProperty().getObjectField("SnapData"));
        }
        inline Ent::Gen2::GameSoftCollisionData GameManager::SoftCollisionData() const
        {
            return Ent::Gen2::GameSoftCollisionData(getProperty().getObjectField("SoftCollisionData"));
        }
        inline Ent::Gen2::String GameManager::Sound_TopView_Start() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_TopView_Start"));
        }
        inline Ent::Gen2::String GameManager::Sound_TopView_Stop() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Sound_TopView_Stop"));
        }
        inline Ent::Gen2::Map<SizeEnum, Ent::Gen2::Float> GameManager::SpeedMaxInUndergroundCavity() const
        {
            return Ent::Gen2::Map<SizeEnum, Ent::Gen2::Float>(getProperty().getObjectField("SpeedMaxInUndergroundCavity"));
        }
        inline Ent::Gen2::String GameManager::SplashScreenSoundStart() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SplashScreenSoundStart"));
        }
        inline Ent::Gen2::String GameManager::SplashScreenSoundStop() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SplashScreenSoundStop"));
        }
        inline Ent::Gen2::Manager GameManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::GameImmersionData GameManager::WaterImmersionData() const
        {
            return Ent::Gen2::GameImmersionData(getProperty().getObjectField("WaterImmersionData"));
        }
        inline Ent::Gen2::String GameManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AreaNavigation
        inline Ent::Gen2::CapabilitiesAndTags AreaNavigation::CapabilitiesAndTags() const
        {
            return Ent::Gen2::CapabilitiesAndTags(getProperty().getObjectField("CapabilitiesAndTags"));
        }
        inline Ent::Gen2::Float AreaNavigation::GroundAreaCost() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GroundAreaCost"));
        }
        inline Ent::Gen2::Float AreaNavigation::WaterAreaCost() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WaterAreaCost"));
        }
        inline Ent::Gen2::String AreaNavigation::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PathFinderGD
        inline Ent::Gen2::AreaNavigation PathFinderGD::NavigationCapacities() const
        {
            return Ent::Gen2::AreaNavigation(getProperty().getObjectField("NavigationCapacities"));
        }
        inline Ent::Gen2::ComponentGD PathFinderGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String PathFinderGD::UsedNavMeshName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("UsedNavMeshName"));
        }
        inline Ent::Gen2::String PathFinderGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationTreeConstraintsGD_GrowData
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_GrowData::DegrowShakeForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DegrowShakeForce"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_GrowData::GrowShakeForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GrowShakeForce"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_GrowData::GrowSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GrowSpeed"));
        }
        inline Ent::Gen2::GrowingState AnimationTreeConstraintsGD_GrowData::GrowingState() const
        {
            return Ent::Gen2::GrowingState(getProperty().getObjectField("GrowingState"));
        }
        inline Ent::Gen2::ProgressSoundEventData AnimationTreeConstraintsGD_GrowData::ProgressSoundEventData() const
        {
            return Ent::Gen2::ProgressSoundEventData(getProperty().getObjectField("ProgressSoundEventData"));
        }
        inline Ent::Gen2::String AnimationTreeConstraintsGD_GrowData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationTreeConstraintsGD_ForceData
        inline Ent::Gen2::Bool AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluence() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AutoSetupForceInfluence"));
        }
        inline Ent::Gen2::Int AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceLevelStart() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("AutoSetupForceInfluenceLevelStart"));
        }
        inline Ent::Gen2::Int AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceLevelStop() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("AutoSetupForceInfluenceLevelStop"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceValueAfterStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoSetupForceInfluenceValueAfterStop"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceValueBeforeStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoSetupForceInfluenceValueBeforeStart"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceValueStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoSetupForceInfluenceValueStart"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_ForceData::AutoSetupForceInfluenceValueStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoSetupForceInfluenceValueStop"));
        }
        inline Ent::Gen2::String AnimationTreeConstraintsGD_ForceData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationTreeConstraintsGD_BendData
        inline Ent::Gen2::Bool AnimationTreeConstraintsGD_BendData::AcceptDrag() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AcceptDrag"));
        }
        inline Ent::Gen2::Bool AnimationTreeConstraintsGD_BendData::AcceptDragOnBaseBone() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AcceptDragOnBaseBone"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_BendData::AttractDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AttractDuration"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_BendData::DragOnBaseBoneAttractionStartFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DragOnBaseBoneAttractionStartFactor"));
        }
        inline Ent::Gen2::Int AnimationTreeConstraintsGD_BendData::MaxBendAngleFirstBone() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxBendAngleFirstBone"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_BendData::MaxBendAngleValueAtFirstBone() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxBendAngleValueAtFirstBone"));
        }
        inline Ent::Gen2::Float AnimationTreeConstraintsGD_BendData::MaxBendAngleValueAtLastBone() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxBendAngleValueAtLastBone"));
        }
        inline Ent::Gen2::String AnimationTreeConstraintsGD_BendData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationTreeConstraintsGD
        inline Ent::Gen2::AnimationTreeConstraintsGD_BendData AnimationTreeConstraintsGD::BendData() const
        {
            return Ent::Gen2::AnimationTreeConstraintsGD_BendData(getProperty().getObjectField("BendData"));
        }
        inline Ent::Gen2::AnimationTreeConstraintsGD_ForceData AnimationTreeConstraintsGD::ForceData() const
        {
            return Ent::Gen2::AnimationTreeConstraintsGD_ForceData(getProperty().getObjectField("ForceData"));
        }
        inline Ent::Gen2::AnimationTreeConstraintsGD_GrowData AnimationTreeConstraintsGD::GrowData() const
        {
            return Ent::Gen2::AnimationTreeConstraintsGD_GrowData(getProperty().getObjectField("GrowData"));
        }
        inline Ent::Gen2::ComponentGD AnimationTreeConstraintsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationTreeConstraintsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationModelComponentInput_StyleMode
        inline Ent::Gen2::String AnimationModelComponentInput_StyleMode::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AnimationModelComponentInput_StyleMode::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::StyleMode AnimationModelComponentInput_StyleMode::val() const
        {
            return Ent::Gen2::StyleMode(getProperty().getObjectField("val"));
        }
        // AnimationModelComponentInput_SpeedMode
        inline Ent::Gen2::String AnimationModelComponentInput_SpeedMode::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AnimationModelComponentInput_SpeedMode::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::SpeedMode AnimationModelComponentInput_SpeedMode::val() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("val"));
        }
        // AnimationModelComponentInput_LocomotionMode
        inline Ent::Gen2::String AnimationModelComponentInput_LocomotionMode::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AnimationModelComponentInput_LocomotionMode::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::LocomotionMode AnimationModelComponentInput_LocomotionMode::val() const
        {
            return Ent::Gen2::LocomotionMode(getProperty().getObjectField("val"));
        }
        // AnimationModelComponentInput_CarryMode
        inline Ent::Gen2::String AnimationModelComponentInput_CarryMode::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AnimationModelComponentInput_CarryMode::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::CarryMode AnimationModelComponentInput_CarryMode::val() const
        {
            return Ent::Gen2::CarryMode(getProperty().getObjectField("val"));
        }
        // AnimationModelComponentInput_AttitudeMode
        inline Ent::Gen2::String AnimationModelComponentInput_AttitudeMode::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AnimationModelComponentInput_AttitudeMode::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::AttitudeMode AnimationModelComponentInput_AttitudeMode::val() const
        {
            return Ent::Gen2::AttitudeMode(getProperty().getObjectField("val"));
        }
        // AnimationGenericConstraintsGD
        inline Ent::Gen2::AnimationMode AnimationGenericConstraintsGD::AnimationMode() const
        {
            return Ent::Gen2::AnimationMode(getProperty().getObjectField("AnimationMode"));
        }
        inline Ent::Gen2::Int AnimationGenericConstraintsGD::AnimationPass() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("AnimationPass"));
        }
        inline Ent::Gen2::AnimationSpace AnimationGenericConstraintsGD::AnimationSpace() const
        {
            return Ent::Gen2::AnimationSpace(getProperty().getObjectField("AnimationSpace"));
        }
        inline Ent::Gen2::Float AnimationGenericConstraintsGD::ControlRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ControlRate"));
        }
        inline Ent::Gen2::ComponentGD AnimationGenericConstraintsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationGenericConstraintsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationLegsConstraints_SlopeOffsetInfo
        inline Ent::Gen2::Float AnimationLegsConstraints_SlopeOffsetInfo::MaxSlopeAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxSlopeAngle"));
        }
        inline Ent::Gen2::Vector3 AnimationLegsConstraints_SlopeOffsetInfo::RotationOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("RotationOffset"));
        }
        inline Ent::Gen2::Vector3 AnimationLegsConstraints_SlopeOffsetInfo::TranslationOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("TranslationOffset"));
        }
        inline Ent::Gen2::String AnimationLegsConstraints_SlopeOffsetInfo::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationLegsConstraintsGD
        inline Ent::Gen2::Bool AnimationLegsConstraintsGD::AllowHeightMapCastFallback() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AllowHeightMapCastFallback"));
        }
        inline Ent::Gen2::AnimationLegsConstraints_SlopeOffsetInfo AnimationLegsConstraintsGD::AscendingSlopeOffsetInfo() const
        {
            return Ent::Gen2::AnimationLegsConstraints_SlopeOffsetInfo(getProperty().getObjectField("AscendingSlopeOffsetInfo"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::BackLegsCompensateExtensionThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BackLegsCompensateExtensionThreshold"));
        }
        inline Ent::Gen2::Vector2 AnimationLegsConstraintsGD::BackLegsHeightRangeForIKInfluence() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("BackLegsHeightRangeForIKInfluence"));
        }
        inline Ent::Gen2::Bool AnimationLegsConstraintsGD::BoneBending() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("BoneBending"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::BoneBendingAnticipation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BoneBendingAnticipation"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::BoneBendingAnticipationBackward() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BoneBendingAnticipationBackward"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::BoneBendingLocomotionInfluenceSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("BoneBendingLocomotionInfluenceSpeed"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::CastDeltaDistToTriggerSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CastDeltaDistToTriggerSmooth"));
        }
        inline Ent::Gen2::AnimationLegsConstraints_SlopeOffsetInfo AnimationLegsConstraintsGD::DescendingSlopeOffsetInfo() const
        {
            return Ent::Gen2::AnimationLegsConstraints_SlopeOffsetInfo(getProperty().getObjectField("DescendingSlopeOffsetInfo"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::FeetInfluence() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FeetInfluence"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::FrontLegsCompensateExtensionThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FrontLegsCompensateExtensionThreshold"));
        }
        inline Ent::Gen2::Vector2 AnimationLegsConstraintsGD::FrontLegsHeightRangeForIKInfluence() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("FrontLegsHeightRangeForIKInfluence"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::GlobalInfluence() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GlobalInfluence"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::LegInfluence() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LegInfluence"));
        }
        inline Ent::Gen2::Bool AnimationLegsConstraintsGD::LegLock() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("LegLock"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::MaxHeightForFootInfluence() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxHeightForFootInfluence"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::ObstructionCastHitPosMarginOffsetFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ObstructionCastHitPosMarginOffsetFactor"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::ObstructionCastOffsetFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ObstructionCastOffsetFactor"));
        }
        inline Ent::Gen2::Float AnimationLegsConstraintsGD::ObstructionCastSafeRadiusFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ObstructionCastSafeRadiusFactor"));
        }
        inline Ent::Gen2::ScaleConverter AnimationLegsConstraintsGD::SpeedFactorFromLockedRootDistance() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("SpeedFactorFromLockedRootDistance"));
        }
        inline Ent::Gen2::ComponentGD AnimationLegsConstraintsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool AnimationLegsConstraintsGD::UseObstructionCast() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseObstructionCast"));
        }
        inline Ent::Gen2::String AnimationLegsConstraintsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationEventsGeneratorGD_TrackedBone
        inline Ent::Gen2::String AnimationEventsGeneratorGD_TrackedBone::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Int AnimationEventsGeneratorGD_TrackedBone::OffsetFrameCountStart() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("OffsetFrameCountStart"));
        }
        inline Ent::Gen2::Int AnimationEventsGeneratorGD_TrackedBone::OffsetFrameCountStop() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("OffsetFrameCountStop"));
        }
        inline Ent::Gen2::String AnimationEventsGeneratorGD_TrackedBone::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationEventsGeneratorGD
        inline Ent::Gen2::ComponentGD AnimationEventsGeneratorGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Array<Ent::Gen2::AnimationEventsGeneratorGD_TrackedBone> AnimationEventsGeneratorGD::TrackedBones() const
        {
            return Array<Ent::Gen2::AnimationEventsGeneratorGD_TrackedBone>(getProperty().getObjectField("TrackedBones"));
        }
        inline Ent::Gen2::String AnimationEventsGeneratorGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // MoveCapacityData_AnimTagTransitionGroup
        inline Ent::Gen2::String MoveCapacityData_AnimTagTransitionGroup::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline PrimArray<Ent::Gen2::AnimTag> MoveCapacityData_AnimTagTransitionGroup::animTags() const
        {
            return PrimArray<Ent::Gen2::AnimTag>(getProperty().getObjectField("animTags"));
        }
        inline Ent::Gen2::Float MoveCapacityData_AnimTagTransitionGroup::blendIn() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("blendIn"));
        }
        // MoveCapacityData_AnimTagTimelineTransitionItem
        inline Ent::Gen2::String MoveCapacityData_AnimTagTimelineTransitionItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::AnimTag MoveCapacityData_AnimTagTimelineTransitionItem::to() const
        {
            return Ent::Gen2::AnimTag(getProperty().getObjectField("to"));
        }
        inline Ent::Gen2::AnimTagTimelineTransition MoveCapacityData_AnimTagTimelineTransitionItem::type() const
        {
            return Ent::Gen2::AnimTagTimelineTransition(getProperty().getObjectField("type"));
        }
        // MoveCapacityData_AnimTagTimelineTransitionTable
        inline Ent::Gen2::String MoveCapacityData_AnimTagTimelineTransitionTable::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::AnimTag MoveCapacityData_AnimTagTimelineTransitionTable::from_() const
        {
            return Ent::Gen2::AnimTag(getProperty().getObjectField("from"));
        }
        inline Array<Ent::Gen2::MoveCapacityData_AnimTagTimelineTransitionItem> MoveCapacityData_AnimTagTimelineTransitionTable::transitions() const
        {
            return Array<Ent::Gen2::MoveCapacityData_AnimTagTimelineTransitionItem>(getProperty().getObjectField("transitions"));
        }
        // MoveCapacityData
        inline Ent::Gen2::String MoveCapacityData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float MoveCapacityData::airControlFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("airControlFactor"));
        }
        inline Ent::Gen2::Bool MoveCapacityData::allowClampSpeedBiggerThanLocomotionDuringBlend() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("allowClampSpeedBiggerThanLocomotionDuringBlend"));
        }
        inline Ent::Gen2::Bool MoveCapacityData::allowKeepAnimationPlayRatioUnclamped() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("allowKeepAnimationPlayRatioUnclamped"));
        }
        inline Ent::Gen2::Float MoveCapacityData::angularSpeedMaxFlyDumpFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("angularSpeedMaxFlyDumpFactor"));
        }
        inline Ent::Gen2::Float MoveCapacityData::angularSpeedMaxGroundDumpFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("angularSpeedMaxGroundDumpFactor"));
        }
        inline Ent::Gen2::Float MoveCapacityData::angularSpeedMaxRiderDumpFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("angularSpeedMaxRiderDumpFactor"));
        }
        inline Ent::Gen2::Float MoveCapacityData::angularSpeedMaxWaterDumpFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("angularSpeedMaxWaterDumpFactor"));
        }
        inline Ent::Gen2::MoveCapacityData_AnimTagTimelineTransitionTable MoveCapacityData::animTagTimelineTransitionTable() const
        {
            return Ent::Gen2::MoveCapacityData_AnimTagTimelineTransitionTable(getProperty().getObjectField("animTagTimelineTransitionTable"));
        }
        inline Ent::Gen2::Float MoveCapacityData::brakeDeceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("brakeDeceleration"));
        }
        inline Ent::Gen2::Bool MoveCapacityData::canSpiritAttack() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("canSpiritAttack"));
        }
        inline Ent::Gen2::Bool MoveCapacityData::canUseCliffGrip() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("canUseCliffGrip"));
        }
        inline Ent::Gen2::Float MoveCapacityData::capsuleBigRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("capsuleBigRadius"));
        }
        inline Ent::Gen2::Float MoveCapacityData::capsuleEnormousRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("capsuleEnormousRadius"));
        }
        inline Ent::Gen2::Float MoveCapacityData::capsuleMediumRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("capsuleMediumRadius"));
        }
        inline Ent::Gen2::Float MoveCapacityData::capsuleSmallRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("capsuleSmallRadius"));
        }
        inline Ent::Gen2::Float MoveCapacityData::capsuleTinyRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("capsuleTinyRadius"));
        }
        inline Ent::Gen2::ScaleConverter MoveCapacityData::constraintDetectionAnticipation() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("constraintDetectionAnticipation"));
        }
        inline Ent::Gen2::Vector3 MoveCapacityData::constraintDetectionOffset() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("constraintDetectionOffset"));
        }
        inline Ent::Gen2::Float MoveCapacityData::constraintDetectionRadiusMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("constraintDetectionRadiusMultiplier"));
        }
        inline Ent::Gen2::Float MoveCapacityData::coyoteJumpMaxTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("coyoteJumpMaxTime"));
        }
        inline Ent::Gen2::Float MoveCapacityData::crashPreventionSafeguardFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("crashPreventionSafeguardFactor"));
        }
        inline Ent::Gen2::Float MoveCapacityData::defaultWorldUpSpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("defaultWorldUpSpeedFactor"));
        }
        inline Ent::Gen2::Float MoveCapacityData::dodgeCooldownTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("dodgeCooldownTime"));
        }
        inline Ent::Gen2::Bool MoveCapacityData::doubleJump() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("doubleJump"));
        }
        inline Ent::Gen2::ScaleConverter MoveCapacityData::dropPlaneLegLenFactor() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("dropPlaneLegLenFactor"));
        }
        inline Ent::Gen2::Bool MoveCapacityData::dropSyncTrajectoryAndVisual() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("dropSyncTrajectoryAndVisual"));
        }
        inline Ent::Gen2::Float MoveCapacityData::ellipseCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ellipseCoeff"));
        }
        inline Ent::Gen2::ScaleConverter MoveCapacityData::extirpateObstacleAcceleration() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("extirpateObstacleAcceleration"));
        }
        inline Ent::Gen2::Float MoveCapacityData::extirpateObstacleDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("extirpateObstacleDuration"));
        }
        inline Ent::Gen2::ScaleConverter MoveCapacityData::flyCentrifugalCoeff() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("flyCentrifugalCoeff"));
        }
        inline Ent::Gen2::Float MoveCapacityData::flyCentrifugalRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("flyCentrifugalRate"));
        }
        inline Ent::Gen2::Float MoveCapacityData::jumpAnalogScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("jumpAnalogScale"));
        }
        inline Ent::Gen2::Bool MoveCapacityData::jumpOntoPosition() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("jumpOntoPosition"));
        }
        inline Ent::Gen2::Float MoveCapacityData::legLength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("legLength"));
        }
        inline Ent::Gen2::Float MoveCapacityData::mass() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("mass"));
        }
        inline Ent::Gen2::Float MoveCapacityData::maxAverageSpeedDuringJumpOnto() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxAverageSpeedDuringJumpOnto"));
        }
        inline Ent::Gen2::Float MoveCapacityData::maxFlapTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxFlapTime"));
        }
        inline Ent::Gen2::Float MoveCapacityData::maxTimeBetweenFlaps() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxTimeBetweenFlaps"));
        }
        inline Ent::Gen2::Float MoveCapacityData::maxUnmountRetimingDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("maxUnmountRetimingDist"));
        }
        inline Ent::Gen2::Float MoveCapacityData::minFlapTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("minFlapTime"));
        }
        inline Ent::Gen2::Float MoveCapacityData::minSpeedToSteerPitch() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("minSpeedToSteerPitch"));
        }
        inline Ent::Gen2::Float MoveCapacityData::minTimeBetweenFlaps() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("minTimeBetweenFlaps"));
        }
        inline Ent::Gen2::Float MoveCapacityData::minimumDropTimeBeforeAClimbEdge() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("minimumDropTimeBeforeAClimbEdge"));
        }
        inline Ent::Gen2::Int MoveCapacityData::nbAttackJump() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("nbAttackJump"));
        }
        inline Ent::Gen2::MoveCapacityData_OrientationSpeed MoveCapacityData::orientationSpeedFly() const
        {
            return Ent::Gen2::MoveCapacityData_OrientationSpeed(getProperty().getObjectField("orientationSpeedFly"));
        }
        inline Ent::Gen2::MoveCapacityData_OrientationSpeed MoveCapacityData::orientationSpeedGround() const
        {
            return Ent::Gen2::MoveCapacityData_OrientationSpeed(getProperty().getObjectField("orientationSpeedGround"));
        }
        inline Ent::Gen2::MoveCapacityData_OrientationSpeed MoveCapacityData::orientationSpeedWater() const
        {
            return Ent::Gen2::MoveCapacityData_OrientationSpeed(getProperty().getObjectField("orientationSpeedWater"));
        }
        inline Ent::Gen2::Float MoveCapacityData::patinateSpeedMinEnter() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("patinateSpeedMinEnter"));
        }
        inline Ent::Gen2::Float MoveCapacityData::patinateSpeedMinExit() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("patinateSpeedMinExit"));
        }
        inline Ent::Gen2::Float MoveCapacityData::reachSpeedAcceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("reachSpeedAcceleration"));
        }
        inline Array<Ent::Gen2::MoveCapacityData_ReachSpeed> MoveCapacityData::reachSpeedByLocomotion() const
        {
            return Array<Ent::Gen2::MoveCapacityData_ReachSpeed>(getProperty().getObjectField("reachSpeedByLocomotion"));
        }
        inline Ent::Gen2::Float MoveCapacityData::reachSpeedDeceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("reachSpeedDeceleration"));
        }
        inline Ent::Gen2::Bool MoveCapacityData::reactToOtherCharacterBodyCollision() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("reactToOtherCharacterBodyCollision"));
        }
        inline Ent::Gen2::Float MoveCapacityData::rigidbodyScalingSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("rigidbodyScalingSpeed"));
        }
        inline Ent::Gen2::Float MoveCapacityData::sphereCastRadiusRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("sphereCastRadiusRatio"));
        }
        inline Ent::Gen2::Float MoveCapacityData::sphereOverrideRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("sphereOverrideRadius"));
        }
        inline Ent::Gen2::Float MoveCapacityData::strafeBlendIn() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("strafeBlendIn"));
        }
        inline Ent::Gen2::Float MoveCapacityData::strafeBlendWeightMinToChangeAnim() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("strafeBlendWeightMinToChangeAnim"));
        }
        inline Ent::Gen2::Float MoveCapacityData::strafeOrientationRateFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("strafeOrientationRateFactor"));
        }
        inline Ent::Gen2::SpeedMode MoveCapacityData::strafeSpeedModeMax() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("strafeSpeedModeMax"));
        }
        inline Ent::Gen2::Float MoveCapacityData::strafeStopOrientationRateFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("strafeStopOrientationRateFactor"));
        }
        inline Ent::Gen2::Float MoveCapacityData::strafeTurnAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("strafeTurnAngleMin"));
        }
        inline Ent::Gen2::Float MoveCapacityData::trajectoryRateFactorDuringLateralLand() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("trajectoryRateFactorDuringLateralLand"));
        }
        inline Ent::Gen2::Float MoveCapacityData::turnAroundInputDirectionAngleDeltaMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("turnAroundInputDirectionAngleDeltaMin"));
        }
        inline Ent::Gen2::Float MoveCapacityData::turnRotationMinRatioForNewTurn() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("turnRotationMinRatioForNewTurn"));
        }
        inline Ent::Gen2::Float MoveCapacityData::turnRotationMinRatioToFinish() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("turnRotationMinRatioToFinish"));
        }
        // CharacterControllerGD
        inline Ent::Gen2::Bool CharacterControllerGD::AllowHeightMapFallback() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AllowHeightMapFallback"));
        }
        inline Ent::Gen2::CharacterControllerClamberData CharacterControllerGD::ClamberData() const
        {
            return Ent::Gen2::CharacterControllerClamberData(getProperty().getObjectField("ClamberData"));
        }
        inline Ent::Gen2::CharacterControllerFallData CharacterControllerGD::FallData() const
        {
            return Ent::Gen2::CharacterControllerFallData(getProperty().getObjectField("FallData"));
        }
        inline Ent::Gen2::CharacterControllerGroundNormalData CharacterControllerGD::GroundNormalData() const
        {
            return Ent::Gen2::CharacterControllerGroundNormalData(getProperty().getObjectField("GroundNormalData"));
        }
        inline Ent::Gen2::HeadCollisionBehaviorData CharacterControllerGD::HeadCollisionData() const
        {
            return Ent::Gen2::HeadCollisionBehaviorData(getProperty().getObjectField("HeadCollisionData"));
        }
        inline Ent::Gen2::HitWallData CharacterControllerGD::HitWallData() const
        {
            return Ent::Gen2::HitWallData(getProperty().getObjectField("HitWallData"));
        }
        inline Ent::Gen2::ImmersedBehaviorData CharacterControllerGD::ImmersedData() const
        {
            return Ent::Gen2::ImmersedBehaviorData(getProperty().getObjectField("ImmersedData"));
        }
        inline Ent::Gen2::InputCollisionBehaviorData CharacterControllerGD::InputCollisionData() const
        {
            return Ent::Gen2::InputCollisionBehaviorData(getProperty().getObjectField("InputCollisionData"));
        }
        inline Ent::Gen2::MeshNavigationBehaviorData CharacterControllerGD::MeshNavigationData() const
        {
            return Ent::Gen2::MeshNavigationBehaviorData(getProperty().getObjectField("MeshNavigationData"));
        }
        inline Ent::Gen2::PredictionBehaviorData CharacterControllerGD::PredictionData() const
        {
            return Ent::Gen2::PredictionBehaviorData(getProperty().getObjectField("PredictionData"));
        }
        inline Ent::Gen2::Vector3 CharacterControllerGD::RotationSmooth() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("RotationSmooth"));
        }
        inline Ent::Gen2::CharacterControllerSlideData CharacterControllerGD::SlideData() const
        {
            return Ent::Gen2::CharacterControllerSlideData(getProperty().getObjectField("SlideData"));
        }
        inline Ent::Gen2::ComponentGD CharacterControllerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CharacterControllerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::ClimbEdgeData CharacterControllerGD::climbEdgeData() const
        {
            return Ent::Gen2::ClimbEdgeData(getProperty().getObjectField("climbEdgeData"));
        }
        inline Ent::Gen2::MoveCapacityData CharacterControllerGD::moveCapacityData() const
        {
            return Ent::Gen2::MoveCapacityData(getProperty().getObjectField("moveCapacityData"));
        }
        // DirectionSync
        inline Ent::Gen2::String DirectionSync::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool DirectionSync::isOpposite() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("isOpposite"));
        }
        inline Ent::Gen2::Bool DirectionSync::mirrorKey() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("mirrorKey"));
        }
        inline Ent::Gen2::Float DirectionSync::syncCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("syncCoeff"));
        }
        inline Ent::Gen2::AnimTag DirectionSync::tag1() const
        {
            return Ent::Gen2::AnimTag(getProperty().getObjectField("tag1"));
        }
        inline Ent::Gen2::AnimTag DirectionSync::tag2() const
        {
            return Ent::Gen2::AnimTag(getProperty().getObjectField("tag2"));
        }
        // DirectionSyncData
        inline Ent::Gen2::String DirectionSyncData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::DirectionSync> DirectionSyncData::datas() const
        {
            return Array<Ent::Gen2::DirectionSync>(getProperty().getObjectField("datas"));
        }
        inline Ent::Gen2::String DirectionSyncData::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        // AnimationManager
        inline Ent::Gen2::Float AnimationManager::AnimationVariantDelayMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnimationVariantDelayMax"));
        }
        inline Ent::Gen2::Float AnimationManager::AnimationVariantDelayMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnimationVariantDelayMin"));
        }
        inline Ent::Gen2::Float AnimationManager::LookAtSlopeCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LookAtSlopeCoeff"));
        }
        inline Ent::Gen2::Float AnimationManager::PlayRatioMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PlayRatioMax"));
        }
        inline Ent::Gen2::Float AnimationManager::PlayRatioMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PlayRatioMin"));
        }
        inline PrimArray<Ent::Gen2::String> AnimationManager::RejectedMetadataStatus() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("RejectedMetadataStatus"));
        }
        inline Ent::Gen2::Manager AnimationManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Array<Ent::Gen2::DirectionSyncData> AnimationManager::SyncDatas() const
        {
            return Array<Ent::Gen2::DirectionSyncData>(getProperty().getObjectField("SyncDatas"));
        }
        inline Ent::Gen2::String AnimationManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline PrimArray<Ent::Gen2::String> AnimationManager::canDetachFromGroundAction() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("canDetachFromGroundAction"));
        }
        // AnimationModelComponentInput_AnimTag
        inline Ent::Gen2::String AnimationModelComponentInput_AnimTag::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AnimationModelComponentInput_AnimTag::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::AnimTag AnimationModelComponentInput_AnimTag::val() const
        {
            return Ent::Gen2::AnimTag(getProperty().getObjectField("val"));
        }
        // AnimMirroringSpecData
        inline Ent::Gen2::String AnimMirroringSpecData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String AnimMirroringSpecData::name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name"));
        }
        inline Ent::Gen2::String AnimMirroringSpecData::name2() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("name2"));
        }
        inline Ent::Gen2::String AnimMirroringSpecData::spec() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("spec"));
        }
        // AnimMirroringData
        inline Ent::Gen2::String AnimMirroringData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Array<Ent::Gen2::AnimMirroringSpecData> AnimMirroringData::specs() const
        {
            return Array<Ent::Gen2::AnimMirroringSpecData>(getProperty().getObjectField("specs"));
        }
        // AnimationControllerGD
        inline Ent::Gen2::String AnimationControllerGD::EDITOR_skeleton() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("EDITOR_skeleton"));
        }
        inline Ent::Gen2::ComponentGD AnimationControllerGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationControllerGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String AnimationControllerGD::animDatabase() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("animDatabase"));
        }
        inline Ent::Gen2::AnimMirroringData AnimationControllerGD::mirroringData() const
        {
            return Ent::Gen2::AnimMirroringData(getProperty().getObjectField("mirroringData"));
        }
        inline Ent::Gen2::Float AnimationControllerGD::romLookAtInfluence() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("romLookAtInfluence"));
        }
        inline Ent::Gen2::String AnimationControllerGD::skeleton() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("skeleton"));
        }
        inline Ent::Gen2::String AnimationControllerGD::syncDataName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("syncDataName"));
        }
        // AttackChargedData
        inline Ent::Gen2::AnimAdditionalTag AttackChargedData::AnimationTag() const
        {
            return Ent::Gen2::AnimAdditionalTag(getProperty().getObjectField("AnimationTag"));
        }
        inline Ent::Gen2::FloatRange AttackChargedData::ChargeRatio() const
        {
            return Ent::Gen2::FloatRange(getProperty().getObjectField("ChargeRatio"));
        }
        inline Ent::Gen2::String AttackChargedData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // StrongAttackData
        inline Ent::Gen2::ResponsiblePointer_ActorState_ StrongAttackData::StrongAttackState() const
        {
            return Ent::Gen2::ResponsiblePointer_ActorState_(getProperty().getObjectField("StrongAttackState"));
        }
        inline Ent::Gen2::String StrongAttackData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float StrongAttackData::attackOrientationRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("attackOrientationRate"));
        }
        inline Array<Ent::Gen2::AttackChargedData> StrongAttackData::chargedDatas() const
        {
            return Array<Ent::Gen2::AttackChargedData>(getProperty().getObjectField("chargedDatas"));
        }
        inline Ent::Gen2::Float StrongAttackData::chargedMaxDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("chargedMaxDuration"));
        }
        inline Ent::Gen2::Float StrongAttackData::chargingDeceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("chargingDeceleration"));
        }
        inline Ent::Gen2::Float StrongAttackData::chargingOrientationRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("chargingOrientationRate"));
        }
        // strongAttackData
        inline Ent::Gen2::String strongAttackData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool strongAttackData::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::StrongAttackData strongAttackData::val() const
        {
            return Ent::Gen2::StrongAttackData(getProperty().getObjectField("val"));
        }
        // AnalyticsManager_MongoDBConnection
        inline Ent::Gen2::String AnalyticsManager_MongoDBConnection::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String AnalyticsManager_MongoDBConnection::collection() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("collection"));
        }
        inline Ent::Gen2::String AnalyticsManager_MongoDBConnection::database() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("database"));
        }
        inline Ent::Gen2::String AnalyticsManager_MongoDBConnection::uri() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("uri"));
        }
        // AnalyticsManager
        inline Ent::Gen2::Bool AnalyticsManager::EnableAnalyticsTeleportation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EnableAnalyticsTeleportation"));
        }
        inline Ent::Gen2::Bool AnalyticsManager::EnableEventLogger() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EnableEventLogger"));
        }
        inline Ent::Gen2::AnalyticsManager_MongoDBConnection AnalyticsManager::MongoDBConnection() const
        {
            return Ent::Gen2::AnalyticsManager_MongoDBConnection(getProperty().getObjectField("MongoDBConnection"));
        }
        inline Array<Ent::Gen2::ResponsiblePointer_AnalyticsObserverInterface_> AnalyticsManager::Plugins() const
        {
            return Array<Ent::Gen2::ResponsiblePointer_AnalyticsObserverInterface_>(getProperty().getObjectField("Plugins"));
        }
        inline Ent::Gen2::Bool AnalyticsManager::StartPaused() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("StartPaused"));
        }
        inline Ent::Gen2::Manager AnalyticsManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnalyticsManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AerialAttackData
        inline Ent::Gen2::ResponsiblePointer_ActorState_ AerialAttackData::AerialAttackState() const
        {
            return Ent::Gen2::ResponsiblePointer_ActorState_(getProperty().getObjectField("AerialAttackState"));
        }
        inline Ent::Gen2::String AerialAttackData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float AerialAttackData::attackOrientationRate() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("attackOrientationRate"));
        }
        // AttackComponentGD_AerialAttackData
        inline Ent::Gen2::String AttackComponentGD_AerialAttackData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AttackComponentGD_AerialAttackData::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::AerialAttackData AttackComponentGD_AerialAttackData::val() const
        {
            return Ent::Gen2::AerialAttackData(getProperty().getObjectField("val"));
        }
        // AttackComponentGD
        inline Ent::Gen2::AttackComponentGD_AerialAttackData AttackComponentGD::AerialAttackData() const
        {
            return Ent::Gen2::AttackComponentGD_AerialAttackData(getProperty().getObjectField("AerialAttackData"));
        }
        inline Ent::Gen2::ComponentGD AttackComponentGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AttackComponentGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::AttackPositionRetimingData AttackComponentGD::attackPositionRetimingData() const
        {
            return Ent::Gen2::AttackPositionRetimingData(getProperty().getObjectField("attackPositionRetimingData"));
        }
        inline Ent::Gen2::lightAttackData AttackComponentGD::lightAttackData() const
        {
            return Ent::Gen2::lightAttackData(getProperty().getObjectField("lightAttackData"));
        }
        inline Ent::Gen2::strongAttackData AttackComponentGD::strongAttackData() const
        {
            return Ent::Gen2::strongAttackData(getProperty().getObjectField("strongAttackData"));
        }
        // AdditionnalTag
        inline Ent::Gen2::String AdditionnalTag::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AdditionnalTag::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::AnimAdditionalTag AdditionnalTag::val() const
        {
            return Ent::Gen2::AnimAdditionalTag(getProperty().getObjectField("val"));
        }
        // ActorStates
        inline char const* ActorStates::getType() const
        {
            return getProperty().getUnionType();
        }
        inline std::optional<Ent::Gen2::ActionAimProjectile> ActorStates::ActionAimProjectile()
        {
            return std::optional<Ent::Gen2::ActionAimProjectile>(getSubNode("ActionAimProjectile"));
        }
        inline Ent::Gen2::ActionAimProjectile ActorStates::addActionAimProjectile()
        {
            return Ent::Gen2::ActionAimProjectile(addSubNode("ActionAimProjectile"));
        }
        inline void ActorStates::removeActionAimProjectile()
        {
            getProperty().eraseUnionSetItem("ActionAimProjectile");
        }
        inline std::optional<Ent::Gen2::ActionAttack> ActorStates::ActionAttack()
        {
            return std::optional<Ent::Gen2::ActionAttack>(getSubNode("ActionAttack"));
        }
        inline Ent::Gen2::ActionAttack ActorStates::addActionAttack()
        {
            return Ent::Gen2::ActionAttack(addSubNode("ActionAttack"));
        }
        inline void ActorStates::removeActionAttack()
        {
            getProperty().eraseUnionSetItem("ActionAttack");
        }
        inline std::optional<Ent::Gen2::ActionAttackJumpOnto> ActorStates::ActionAttackJumpOnto()
        {
            return std::optional<Ent::Gen2::ActionAttackJumpOnto>(getSubNode("ActionAttackJumpOnto"));
        }
        inline Ent::Gen2::ActionAttackJumpOnto ActorStates::addActionAttackJumpOnto()
        {
            return Ent::Gen2::ActionAttackJumpOnto(addSubNode("ActionAttackJumpOnto"));
        }
        inline void ActorStates::removeActionAttackJumpOnto()
        {
            getProperty().eraseUnionSetItem("ActionAttackJumpOnto");
        }
        inline std::optional<Ent::Gen2::ActionAttackStomp> ActorStates::ActionAttackStomp()
        {
            return std::optional<Ent::Gen2::ActionAttackStomp>(getSubNode("ActionAttackStomp"));
        }
        inline Ent::Gen2::ActionAttackStomp ActorStates::addActionAttackStomp()
        {
            return Ent::Gen2::ActionAttackStomp(addSubNode("ActionAttackStomp"));
        }
        inline void ActorStates::removeActionAttackStomp()
        {
            getProperty().eraseUnionSetItem("ActionAttackStomp");
        }
        inline std::optional<Ent::Gen2::ActionBite> ActorStates::ActionBite()
        {
            return std::optional<Ent::Gen2::ActionBite>(getSubNode("ActionBite"));
        }
        inline Ent::Gen2::ActionBite ActorStates::addActionBite()
        {
            return Ent::Gen2::ActionBite(addSubNode("ActionBite"));
        }
        inline void ActorStates::removeActionBite()
        {
            getProperty().eraseUnionSetItem("ActionBite");
        }
        inline std::optional<Ent::Gen2::ActionBiteIn> ActorStates::ActionBiteIn()
        {
            return std::optional<Ent::Gen2::ActionBiteIn>(getSubNode("ActionBiteIn"));
        }
        inline Ent::Gen2::ActionBiteIn ActorStates::addActionBiteIn()
        {
            return Ent::Gen2::ActionBiteIn(addSubNode("ActionBiteIn"));
        }
        inline void ActorStates::removeActionBiteIn()
        {
            getProperty().eraseUnionSetItem("ActionBiteIn");
        }
        inline std::optional<Ent::Gen2::ActionBiteOut> ActorStates::ActionBiteOut()
        {
            return std::optional<Ent::Gen2::ActionBiteOut>(getSubNode("ActionBiteOut"));
        }
        inline Ent::Gen2::ActionBiteOut ActorStates::addActionBiteOut()
        {
            return Ent::Gen2::ActionBiteOut(addSubNode("ActionBiteOut"));
        }
        inline void ActorStates::removeActionBiteOut()
        {
            getProperty().eraseUnionSetItem("ActionBiteOut");
        }
        inline std::optional<Ent::Gen2::ActionBittenState> ActorStates::ActionBittenState()
        {
            return std::optional<Ent::Gen2::ActionBittenState>(getSubNode("ActionBittenState"));
        }
        inline Ent::Gen2::ActionBittenState ActorStates::addActionBittenState()
        {
            return Ent::Gen2::ActionBittenState(addSubNode("ActionBittenState"));
        }
        inline void ActorStates::removeActionBittenState()
        {
            getProperty().eraseUnionSetItem("ActionBittenState");
        }
        inline std::optional<Ent::Gen2::ActionBrake> ActorStates::ActionBrake()
        {
            return std::optional<Ent::Gen2::ActionBrake>(getSubNode("ActionBrake"));
        }
        inline Ent::Gen2::ActionBrake ActorStates::addActionBrake()
        {
            return Ent::Gen2::ActionBrake(addSubNode("ActionBrake"));
        }
        inline void ActorStates::removeActionBrake()
        {
            getProperty().eraseUnionSetItem("ActionBrake");
        }
        inline std::optional<Ent::Gen2::ActionCallForHelp> ActorStates::ActionCallForHelp()
        {
            return std::optional<Ent::Gen2::ActionCallForHelp>(getSubNode("ActionCallForHelp"));
        }
        inline Ent::Gen2::ActionCallForHelp ActorStates::addActionCallForHelp()
        {
            return Ent::Gen2::ActionCallForHelp(addSubNode("ActionCallForHelp"));
        }
        inline void ActorStates::removeActionCallForHelp()
        {
            getProperty().eraseUnionSetItem("ActionCallForHelp");
        }
        inline std::optional<Ent::Gen2::ActionCentrifugal> ActorStates::ActionCentrifugal()
        {
            return std::optional<Ent::Gen2::ActionCentrifugal>(getSubNode("ActionCentrifugal"));
        }
        inline Ent::Gen2::ActionCentrifugal ActorStates::addActionCentrifugal()
        {
            return Ent::Gen2::ActionCentrifugal(addSubNode("ActionCentrifugal"));
        }
        inline void ActorStates::removeActionCentrifugal()
        {
            getProperty().eraseUnionSetItem("ActionCentrifugal");
        }
        inline std::optional<Ent::Gen2::ActionChangeMount> ActorStates::ActionChangeMount()
        {
            return std::optional<Ent::Gen2::ActionChangeMount>(getSubNode("ActionChangeMount"));
        }
        inline Ent::Gen2::ActionChangeMount ActorStates::addActionChangeMount()
        {
            return Ent::Gen2::ActionChangeMount(addSubNode("ActionChangeMount"));
        }
        inline void ActorStates::removeActionChangeMount()
        {
            getProperty().eraseUnionSetItem("ActionChangeMount");
        }
        inline std::optional<Ent::Gen2::ActionChangeRidingSpot> ActorStates::ActionChangeRidingSpot()
        {
            return std::optional<Ent::Gen2::ActionChangeRidingSpot>(getSubNode("ActionChangeRidingSpot"));
        }
        inline Ent::Gen2::ActionChangeRidingSpot ActorStates::addActionChangeRidingSpot()
        {
            return Ent::Gen2::ActionChangeRidingSpot(addSubNode("ActionChangeRidingSpot"));
        }
        inline void ActorStates::removeActionChangeRidingSpot()
        {
            getProperty().eraseUnionSetItem("ActionChangeRidingSpot");
        }
        inline std::optional<Ent::Gen2::ActionChosen> ActorStates::ActionChosen()
        {
            return std::optional<Ent::Gen2::ActionChosen>(getSubNode("ActionChosen"));
        }
        inline Ent::Gen2::ActionChosen ActorStates::addActionChosen()
        {
            return Ent::Gen2::ActionChosen(addSubNode("ActionChosen"));
        }
        inline void ActorStates::removeActionChosen()
        {
            getProperty().eraseUnionSetItem("ActionChosen");
        }
        inline std::optional<Ent::Gen2::ActionCinematic> ActorStates::ActionCinematic()
        {
            return std::optional<Ent::Gen2::ActionCinematic>(getSubNode("ActionCinematic"));
        }
        inline Ent::Gen2::ActionCinematic ActorStates::addActionCinematic()
        {
            return Ent::Gen2::ActionCinematic(addSubNode("ActionCinematic"));
        }
        inline void ActorStates::removeActionCinematic()
        {
            getProperty().eraseUnionSetItem("ActionCinematic");
        }
        inline std::optional<Ent::Gen2::ActionClamberDropOff> ActorStates::ActionClamberDropOff()
        {
            return std::optional<Ent::Gen2::ActionClamberDropOff>(getSubNode("ActionClamberDropOff"));
        }
        inline Ent::Gen2::ActionClamberDropOff ActorStates::addActionClamberDropOff()
        {
            return Ent::Gen2::ActionClamberDropOff(addSubNode("ActionClamberDropOff"));
        }
        inline void ActorStates::removeActionClamberDropOff()
        {
            getProperty().eraseUnionSetItem("ActionClamberDropOff");
        }
        inline std::optional<Ent::Gen2::ActionClamberJump> ActorStates::ActionClamberJump()
        {
            return std::optional<Ent::Gen2::ActionClamberJump>(getSubNode("ActionClamberJump"));
        }
        inline Ent::Gen2::ActionClamberJump ActorStates::addActionClamberJump()
        {
            return Ent::Gen2::ActionClamberJump(addSubNode("ActionClamberJump"));
        }
        inline void ActorStates::removeActionClamberJump()
        {
            getProperty().eraseUnionSetItem("ActionClamberJump");
        }
        inline std::optional<Ent::Gen2::ActionClamberJumpOff> ActorStates::ActionClamberJumpOff()
        {
            return std::optional<Ent::Gen2::ActionClamberJumpOff>(getSubNode("ActionClamberJumpOff"));
        }
        inline Ent::Gen2::ActionClamberJumpOff ActorStates::addActionClamberJumpOff()
        {
            return Ent::Gen2::ActionClamberJumpOff(addSubNode("ActionClamberJumpOff"));
        }
        inline void ActorStates::removeActionClamberJumpOff()
        {
            getProperty().eraseUnionSetItem("ActionClamberJumpOff");
        }
        inline std::optional<Ent::Gen2::ActionClamberLand> ActorStates::ActionClamberLand()
        {
            return std::optional<Ent::Gen2::ActionClamberLand>(getSubNode("ActionClamberLand"));
        }
        inline Ent::Gen2::ActionClamberLand ActorStates::addActionClamberLand()
        {
            return Ent::Gen2::ActionClamberLand(addSubNode("ActionClamberLand"));
        }
        inline void ActorStates::removeActionClamberLand()
        {
            getProperty().eraseUnionSetItem("ActionClamberLand");
        }
        inline std::optional<Ent::Gen2::ActionClamberMove> ActorStates::ActionClamberMove()
        {
            return std::optional<Ent::Gen2::ActionClamberMove>(getSubNode("ActionClamberMove"));
        }
        inline Ent::Gen2::ActionClamberMove ActorStates::addActionClamberMove()
        {
            return Ent::Gen2::ActionClamberMove(addSubNode("ActionClamberMove"));
        }
        inline void ActorStates::removeActionClamberMove()
        {
            getProperty().eraseUnionSetItem("ActionClamberMove");
        }
        inline std::optional<Ent::Gen2::ActionClamberRise> ActorStates::ActionClamberRise()
        {
            return std::optional<Ent::Gen2::ActionClamberRise>(getSubNode("ActionClamberRise"));
        }
        inline Ent::Gen2::ActionClamberRise ActorStates::addActionClamberRise()
        {
            return Ent::Gen2::ActionClamberRise(addSubNode("ActionClamberRise"));
        }
        inline void ActorStates::removeActionClamberRise()
        {
            getProperty().eraseUnionSetItem("ActionClamberRise");
        }
        inline std::optional<Ent::Gen2::ActionClimbEdge> ActorStates::ActionClimbEdge()
        {
            return std::optional<Ent::Gen2::ActionClimbEdge>(getSubNode("ActionClimbEdge"));
        }
        inline Ent::Gen2::ActionClimbEdge ActorStates::addActionClimbEdge()
        {
            return Ent::Gen2::ActionClimbEdge(addSubNode("ActionClimbEdge"));
        }
        inline void ActorStates::removeActionClimbEdge()
        {
            getProperty().eraseUnionSetItem("ActionClimbEdge");
        }
        inline std::optional<Ent::Gen2::ActionCollapse> ActorStates::ActionCollapse()
        {
            return std::optional<Ent::Gen2::ActionCollapse>(getSubNode("ActionCollapse"));
        }
        inline Ent::Gen2::ActionCollapse ActorStates::addActionCollapse()
        {
            return Ent::Gen2::ActionCollapse(addSubNode("ActionCollapse"));
        }
        inline void ActorStates::removeActionCollapse()
        {
            getProperty().eraseUnionSetItem("ActionCollapse");
        }
        inline std::optional<Ent::Gen2::ActionDecelerate> ActorStates::ActionDecelerate()
        {
            return std::optional<Ent::Gen2::ActionDecelerate>(getSubNode("ActionDecelerate"));
        }
        inline Ent::Gen2::ActionDecelerate ActorStates::addActionDecelerate()
        {
            return Ent::Gen2::ActionDecelerate(addSubNode("ActionDecelerate"));
        }
        inline void ActorStates::removeActionDecelerate()
        {
            getProperty().eraseUnionSetItem("ActionDecelerate");
        }
        inline std::optional<Ent::Gen2::ActionDigUpTreasure> ActorStates::ActionDigUpTreasure()
        {
            return std::optional<Ent::Gen2::ActionDigUpTreasure>(getSubNode("ActionDigUpTreasure"));
        }
        inline Ent::Gen2::ActionDigUpTreasure ActorStates::addActionDigUpTreasure()
        {
            return Ent::Gen2::ActionDigUpTreasure(addSubNode("ActionDigUpTreasure"));
        }
        inline void ActorStates::removeActionDigUpTreasure()
        {
            getProperty().eraseUnionSetItem("ActionDigUpTreasure");
        }
        inline std::optional<Ent::Gen2::ActionDisableAndFollow> ActorStates::ActionDisableAndFollow()
        {
            return std::optional<Ent::Gen2::ActionDisableAndFollow>(getSubNode("ActionDisableAndFollow"));
        }
        inline Ent::Gen2::ActionDisableAndFollow ActorStates::addActionDisableAndFollow()
        {
            return Ent::Gen2::ActionDisableAndFollow(addSubNode("ActionDisableAndFollow"));
        }
        inline void ActorStates::removeActionDisableAndFollow()
        {
            getProperty().eraseUnionSetItem("ActionDisableAndFollow");
        }
        inline std::optional<Ent::Gen2::ActionDodge> ActorStates::ActionDodge()
        {
            return std::optional<Ent::Gen2::ActionDodge>(getSubNode("ActionDodge"));
        }
        inline Ent::Gen2::ActionDodge ActorStates::addActionDodge()
        {
            return Ent::Gen2::ActionDodge(addSubNode("ActionDodge"));
        }
        inline void ActorStates::removeActionDodge()
        {
            getProperty().eraseUnionSetItem("ActionDodge");
        }
        inline std::optional<Ent::Gen2::ActionDrawAttention> ActorStates::ActionDrawAttention()
        {
            return std::optional<Ent::Gen2::ActionDrawAttention>(getSubNode("ActionDrawAttention"));
        }
        inline Ent::Gen2::ActionDrawAttention ActorStates::addActionDrawAttention()
        {
            return Ent::Gen2::ActionDrawAttention(addSubNode("ActionDrawAttention"));
        }
        inline void ActorStates::removeActionDrawAttention()
        {
            getProperty().eraseUnionSetItem("ActionDrawAttention");
        }
        inline std::optional<Ent::Gen2::ActionDrawWeapon> ActorStates::ActionDrawWeapon()
        {
            return std::optional<Ent::Gen2::ActionDrawWeapon>(getSubNode("ActionDrawWeapon"));
        }
        inline Ent::Gen2::ActionDrawWeapon ActorStates::addActionDrawWeapon()
        {
            return Ent::Gen2::ActionDrawWeapon(addSubNode("ActionDrawWeapon"));
        }
        inline void ActorStates::removeActionDrawWeapon()
        {
            getProperty().eraseUnionSetItem("ActionDrawWeapon");
        }
        inline std::optional<Ent::Gen2::ActionDrawWeaponState> ActorStates::ActionDrawWeaponState()
        {
            return std::optional<Ent::Gen2::ActionDrawWeaponState>(getSubNode("ActionDrawWeaponState"));
        }
        inline Ent::Gen2::ActionDrawWeaponState ActorStates::addActionDrawWeaponState()
        {
            return Ent::Gen2::ActionDrawWeaponState(addSubNode("ActionDrawWeaponState"));
        }
        inline void ActorStates::removeActionDrawWeaponState()
        {
            getProperty().eraseUnionSetItem("ActionDrawWeaponState");
        }
        inline std::optional<Ent::Gen2::ActionDrift> ActorStates::ActionDrift()
        {
            return std::optional<Ent::Gen2::ActionDrift>(getSubNode("ActionDrift"));
        }
        inline Ent::Gen2::ActionDrift ActorStates::addActionDrift()
        {
            return Ent::Gen2::ActionDrift(addSubNode("ActionDrift"));
        }
        inline void ActorStates::removeActionDrift()
        {
            getProperty().eraseUnionSetItem("ActionDrift");
        }
        inline std::optional<Ent::Gen2::ActionDrop> ActorStates::ActionDrop()
        {
            return std::optional<Ent::Gen2::ActionDrop>(getSubNode("ActionDrop"));
        }
        inline Ent::Gen2::ActionDrop ActorStates::addActionDrop()
        {
            return Ent::Gen2::ActionDrop(addSubNode("ActionDrop"));
        }
        inline void ActorStates::removeActionDrop()
        {
            getProperty().eraseUnionSetItem("ActionDrop");
        }
        inline std::optional<Ent::Gen2::ActionEmote> ActorStates::ActionEmote()
        {
            return std::optional<Ent::Gen2::ActionEmote>(getSubNode("ActionEmote"));
        }
        inline Ent::Gen2::ActionEmote ActorStates::addActionEmote()
        {
            return Ent::Gen2::ActionEmote(addSubNode("ActionEmote"));
        }
        inline void ActorStates::removeActionEmote()
        {
            getProperty().eraseUnionSetItem("ActionEmote");
        }
        inline std::optional<Ent::Gen2::ActionFlyCrash> ActorStates::ActionFlyCrash()
        {
            return std::optional<Ent::Gen2::ActionFlyCrash>(getSubNode("ActionFlyCrash"));
        }
        inline Ent::Gen2::ActionFlyCrash ActorStates::addActionFlyCrash()
        {
            return Ent::Gen2::ActionFlyCrash(addSubNode("ActionFlyCrash"));
        }
        inline void ActorStates::removeActionFlyCrash()
        {
            getProperty().eraseUnionSetItem("ActionFlyCrash");
        }
        inline std::optional<Ent::Gen2::ActionFlyDive> ActorStates::ActionFlyDive()
        {
            return std::optional<Ent::Gen2::ActionFlyDive>(getSubNode("ActionFlyDive"));
        }
        inline Ent::Gen2::ActionFlyDive ActorStates::addActionFlyDive()
        {
            return Ent::Gen2::ActionFlyDive(addSubNode("ActionFlyDive"));
        }
        inline void ActorStates::removeActionFlyDive()
        {
            getProperty().eraseUnionSetItem("ActionFlyDive");
        }
        inline std::optional<Ent::Gen2::ActionFlyDown> ActorStates::ActionFlyDown()
        {
            return std::optional<Ent::Gen2::ActionFlyDown>(getSubNode("ActionFlyDown"));
        }
        inline Ent::Gen2::ActionFlyDown ActorStates::addActionFlyDown()
        {
            return Ent::Gen2::ActionFlyDown(addSubNode("ActionFlyDown"));
        }
        inline void ActorStates::removeActionFlyDown()
        {
            getProperty().eraseUnionSetItem("ActionFlyDown");
        }
        inline std::optional<Ent::Gen2::ActionFlyFlap> ActorStates::ActionFlyFlap()
        {
            return std::optional<Ent::Gen2::ActionFlyFlap>(getSubNode("ActionFlyFlap"));
        }
        inline Ent::Gen2::ActionFlyFlap ActorStates::addActionFlyFlap()
        {
            return Ent::Gen2::ActionFlyFlap(addSubNode("ActionFlyFlap"));
        }
        inline void ActorStates::removeActionFlyFlap()
        {
            getProperty().eraseUnionSetItem("ActionFlyFlap");
        }
        inline std::optional<Ent::Gen2::ActionFlyUp> ActorStates::ActionFlyUp()
        {
            return std::optional<Ent::Gen2::ActionFlyUp>(getSubNode("ActionFlyUp"));
        }
        inline Ent::Gen2::ActionFlyUp ActorStates::addActionFlyUp()
        {
            return Ent::Gen2::ActionFlyUp(addSubNode("ActionFlyUp"));
        }
        inline void ActorStates::removeActionFlyUp()
        {
            getProperty().eraseUnionSetItem("ActionFlyUp");
        }
        inline std::optional<Ent::Gen2::ActionHit> ActorStates::ActionHit()
        {
            return std::optional<Ent::Gen2::ActionHit>(getSubNode("ActionHit"));
        }
        inline Ent::Gen2::ActionHit ActorStates::addActionHit()
        {
            return Ent::Gen2::ActionHit(addSubNode("ActionHit"));
        }
        inline void ActorStates::removeActionHit()
        {
            getProperty().eraseUnionSetItem("ActionHit");
        }
        inline std::optional<Ent::Gen2::ActionIdle> ActorStates::ActionIdle()
        {
            return std::optional<Ent::Gen2::ActionIdle>(getSubNode("ActionIdle"));
        }
        inline Ent::Gen2::ActionIdle ActorStates::addActionIdle()
        {
            return Ent::Gen2::ActionIdle(addSubNode("ActionIdle"));
        }
        inline void ActorStates::removeActionIdle()
        {
            getProperty().eraseUnionSetItem("ActionIdle");
        }
        inline std::optional<Ent::Gen2::ActionIncarnate> ActorStates::ActionIncarnate()
        {
            return std::optional<Ent::Gen2::ActionIncarnate>(getSubNode("ActionIncarnate"));
        }
        inline Ent::Gen2::ActionIncarnate ActorStates::addActionIncarnate()
        {
            return Ent::Gen2::ActionIncarnate(addSubNode("ActionIncarnate"));
        }
        inline void ActorStates::removeActionIncarnate()
        {
            getProperty().eraseUnionSetItem("ActionIncarnate");
        }
        inline std::optional<Ent::Gen2::ActionIncarnated> ActorStates::ActionIncarnated()
        {
            return std::optional<Ent::Gen2::ActionIncarnated>(getSubNode("ActionIncarnated"));
        }
        inline Ent::Gen2::ActionIncarnated ActorStates::addActionIncarnated()
        {
            return Ent::Gen2::ActionIncarnated(addSubNode("ActionIncarnated"));
        }
        inline void ActorStates::removeActionIncarnated()
        {
            getProperty().eraseUnionSetItem("ActionIncarnated");
        }
        inline std::optional<Ent::Gen2::ActionJump> ActorStates::ActionJump()
        {
            return std::optional<Ent::Gen2::ActionJump>(getSubNode("ActionJump"));
        }
        inline Ent::Gen2::ActionJump ActorStates::addActionJump()
        {
            return Ent::Gen2::ActionJump(addSubNode("ActionJump"));
        }
        inline void ActorStates::removeActionJump()
        {
            getProperty().eraseUnionSetItem("ActionJump");
        }
        inline std::optional<Ent::Gen2::ActionJumpOnto> ActorStates::ActionJumpOnto()
        {
            return std::optional<Ent::Gen2::ActionJumpOnto>(getSubNode("ActionJumpOnto"));
        }
        inline Ent::Gen2::ActionJumpOnto ActorStates::addActionJumpOnto()
        {
            return Ent::Gen2::ActionJumpOnto(addSubNode("ActionJumpOnto"));
        }
        inline void ActorStates::removeActionJumpOnto()
        {
            getProperty().eraseUnionSetItem("ActionJumpOnto");
        }
        inline std::optional<Ent::Gen2::ActionLand> ActorStates::ActionLand()
        {
            return std::optional<Ent::Gen2::ActionLand>(getSubNode("ActionLand"));
        }
        inline Ent::Gen2::ActionLand ActorStates::addActionLand()
        {
            return Ent::Gen2::ActionLand(addSubNode("ActionLand"));
        }
        inline void ActorStates::removeActionLand()
        {
            getProperty().eraseUnionSetItem("ActionLand");
        }
        inline std::optional<Ent::Gen2::ActionLandingMount> ActorStates::ActionLandingMount()
        {
            return std::optional<Ent::Gen2::ActionLandingMount>(getSubNode("ActionLandingMount"));
        }
        inline Ent::Gen2::ActionLandingMount ActorStates::addActionLandingMount()
        {
            return Ent::Gen2::ActionLandingMount(addSubNode("ActionLandingMount"));
        }
        inline void ActorStates::removeActionLandingMount()
        {
            getProperty().eraseUnionSetItem("ActionLandingMount");
        }
        inline std::optional<Ent::Gen2::ActionLookAt> ActorStates::ActionLookAt()
        {
            return std::optional<Ent::Gen2::ActionLookAt>(getSubNode("ActionLookAt"));
        }
        inline Ent::Gen2::ActionLookAt ActorStates::addActionLookAt()
        {
            return Ent::Gen2::ActionLookAt(addSubNode("ActionLookAt"));
        }
        inline void ActorStates::removeActionLookAt()
        {
            getProperty().eraseUnionSetItem("ActionLookAt");
        }
        inline std::optional<Ent::Gen2::ActionMountReception> ActorStates::ActionMountReception()
        {
            return std::optional<Ent::Gen2::ActionMountReception>(getSubNode("ActionMountReception"));
        }
        inline Ent::Gen2::ActionMountReception ActorStates::addActionMountReception()
        {
            return Ent::Gen2::ActionMountReception(addSubNode("ActionMountReception"));
        }
        inline void ActorStates::removeActionMountReception()
        {
            getProperty().eraseUnionSetItem("ActionMountReception");
        }
        inline std::optional<Ent::Gen2::ActionMove> ActorStates::ActionMove()
        {
            return std::optional<Ent::Gen2::ActionMove>(getSubNode("ActionMove"));
        }
        inline Ent::Gen2::ActionMove ActorStates::addActionMove()
        {
            return Ent::Gen2::ActionMove(addSubNode("ActionMove"));
        }
        inline void ActorStates::removeActionMove()
        {
            getProperty().eraseUnionSetItem("ActionMove");
        }
        inline std::optional<Ent::Gen2::ActionMoveProjectile> ActorStates::ActionMoveProjectile()
        {
            return std::optional<Ent::Gen2::ActionMoveProjectile>(getSubNode("ActionMoveProjectile"));
        }
        inline Ent::Gen2::ActionMoveProjectile ActorStates::addActionMoveProjectile()
        {
            return Ent::Gen2::ActionMoveProjectile(addSubNode("ActionMoveProjectile"));
        }
        inline void ActorStates::removeActionMoveProjectile()
        {
            getProperty().eraseUnionSetItem("ActionMoveProjectile");
        }
        inline std::optional<Ent::Gen2::ActionMoveTo> ActorStates::ActionMoveTo()
        {
            return std::optional<Ent::Gen2::ActionMoveTo>(getSubNode("ActionMoveTo"));
        }
        inline Ent::Gen2::ActionMoveTo ActorStates::addActionMoveTo()
        {
            return Ent::Gen2::ActionMoveTo(addSubNode("ActionMoveTo"));
        }
        inline void ActorStates::removeActionMoveTo()
        {
            getProperty().eraseUnionSetItem("ActionMoveTo");
        }
        inline std::optional<Ent::Gen2::ActionOrientMount> ActorStates::ActionOrientMount()
        {
            return std::optional<Ent::Gen2::ActionOrientMount>(getSubNode("ActionOrientMount"));
        }
        inline Ent::Gen2::ActionOrientMount ActorStates::addActionOrientMount()
        {
            return Ent::Gen2::ActionOrientMount(addSubNode("ActionOrientMount"));
        }
        inline void ActorStates::removeActionOrientMount()
        {
            getProperty().eraseUnionSetItem("ActionOrientMount");
        }
        inline std::optional<Ent::Gen2::ActionOutfitSpecialState> ActorStates::ActionOutfitSpecialState()
        {
            return std::optional<Ent::Gen2::ActionOutfitSpecialState>(getSubNode("ActionOutfitSpecialState"));
        }
        inline Ent::Gen2::ActionOutfitSpecialState ActorStates::addActionOutfitSpecialState()
        {
            return Ent::Gen2::ActionOutfitSpecialState(addSubNode("ActionOutfitSpecialState"));
        }
        inline void ActorStates::removeActionOutfitSpecialState()
        {
            getProperty().eraseUnionSetItem("ActionOutfitSpecialState");
        }
        inline std::optional<Ent::Gen2::ActionPathfindAndMove> ActorStates::ActionPathfindAndMove()
        {
            return std::optional<Ent::Gen2::ActionPathfindAndMove>(getSubNode("ActionPathfindAndMove"));
        }
        inline Ent::Gen2::ActionPathfindAndMove ActorStates::addActionPathfindAndMove()
        {
            return Ent::Gen2::ActionPathfindAndMove(addSubNode("ActionPathfindAndMove"));
        }
        inline void ActorStates::removeActionPathfindAndMove()
        {
            getProperty().eraseUnionSetItem("ActionPathfindAndMove");
        }
        inline std::optional<Ent::Gen2::ActionPatinate> ActorStates::ActionPatinate()
        {
            return std::optional<Ent::Gen2::ActionPatinate>(getSubNode("ActionPatinate"));
        }
        inline Ent::Gen2::ActionPatinate ActorStates::addActionPatinate()
        {
            return Ent::Gen2::ActionPatinate(addSubNode("ActionPatinate"));
        }
        inline void ActorStates::removeActionPatinate()
        {
            getProperty().eraseUnionSetItem("ActionPatinate");
        }
        inline std::optional<Ent::Gen2::ActionPlayAnim> ActorStates::ActionPlayAnim()
        {
            return std::optional<Ent::Gen2::ActionPlayAnim>(getSubNode("ActionPlayAnim"));
        }
        inline Ent::Gen2::ActionPlayAnim ActorStates::addActionPlayAnim()
        {
            return Ent::Gen2::ActionPlayAnim(addSubNode("ActionPlayAnim"));
        }
        inline void ActorStates::removeActionPlayAnim()
        {
            getProperty().eraseUnionSetItem("ActionPlayAnim");
        }
        inline std::optional<Ent::Gen2::ActionPropelled> ActorStates::ActionPropelled()
        {
            return std::optional<Ent::Gen2::ActionPropelled>(getSubNode("ActionPropelled"));
        }
        inline Ent::Gen2::ActionPropelled ActorStates::addActionPropelled()
        {
            return Ent::Gen2::ActionPropelled(addSubNode("ActionPropelled"));
        }
        inline void ActorStates::removeActionPropelled()
        {
            getProperty().eraseUnionSetItem("ActionPropelled");
        }
        inline std::optional<Ent::Gen2::ActionPushed> ActorStates::ActionPushed()
        {
            return std::optional<Ent::Gen2::ActionPushed>(getSubNode("ActionPushed"));
        }
        inline Ent::Gen2::ActionPushed ActorStates::addActionPushed()
        {
            return Ent::Gen2::ActionPushed(addSubNode("ActionPushed"));
        }
        inline void ActorStates::removeActionPushed()
        {
            getProperty().eraseUnionSetItem("ActionPushed");
        }
        inline std::optional<Ent::Gen2::ActionQuadStandUpState> ActorStates::ActionQuadStandUpState()
        {
            return std::optional<Ent::Gen2::ActionQuadStandUpState>(getSubNode("ActionQuadStandUpState"));
        }
        inline Ent::Gen2::ActionQuadStandUpState ActorStates::addActionQuadStandUpState()
        {
            return Ent::Gen2::ActionQuadStandUpState(addSubNode("ActionQuadStandUpState"));
        }
        inline void ActorStates::removeActionQuadStandUpState()
        {
            getProperty().eraseUnionSetItem("ActionQuadStandUpState");
        }
        inline std::optional<Ent::Gen2::ActionQuadStandUpStateIn> ActorStates::ActionQuadStandUpStateIn()
        {
            return std::optional<Ent::Gen2::ActionQuadStandUpStateIn>(getSubNode("ActionQuadStandUpStateIn"));
        }
        inline Ent::Gen2::ActionQuadStandUpStateIn ActorStates::addActionQuadStandUpStateIn()
        {
            return Ent::Gen2::ActionQuadStandUpStateIn(addSubNode("ActionQuadStandUpStateIn"));
        }
        inline void ActorStates::removeActionQuadStandUpStateIn()
        {
            getProperty().eraseUnionSetItem("ActionQuadStandUpStateIn");
        }
        inline std::optional<Ent::Gen2::ActionQuadStandUpStateOut> ActorStates::ActionQuadStandUpStateOut()
        {
            return std::optional<Ent::Gen2::ActionQuadStandUpStateOut>(getSubNode("ActionQuadStandUpStateOut"));
        }
        inline Ent::Gen2::ActionQuadStandUpStateOut ActorStates::addActionQuadStandUpStateOut()
        {
            return Ent::Gen2::ActionQuadStandUpStateOut(addSubNode("ActionQuadStandUpStateOut"));
        }
        inline void ActorStates::removeActionQuadStandUpStateOut()
        {
            getProperty().eraseUnionSetItem("ActionQuadStandUpStateOut");
        }
        inline std::optional<Ent::Gen2::ActionRagdoll> ActorStates::ActionRagdoll()
        {
            return std::optional<Ent::Gen2::ActionRagdoll>(getSubNode("ActionRagdoll"));
        }
        inline Ent::Gen2::ActionRagdoll ActorStates::addActionRagdoll()
        {
            return Ent::Gen2::ActionRagdoll(addSubNode("ActionRagdoll"));
        }
        inline void ActorStates::removeActionRagdoll()
        {
            getProperty().eraseUnionSetItem("ActionRagdoll");
        }
        inline std::optional<Ent::Gen2::ActionReviveMaskEffect> ActorStates::ActionReviveMaskEffect()
        {
            return std::optional<Ent::Gen2::ActionReviveMaskEffect>(getSubNode("ActionReviveMaskEffect"));
        }
        inline Ent::Gen2::ActionReviveMaskEffect ActorStates::addActionReviveMaskEffect()
        {
            return Ent::Gen2::ActionReviveMaskEffect(addSubNode("ActionReviveMaskEffect"));
        }
        inline void ActorStates::removeActionReviveMaskEffect()
        {
            getProperty().eraseUnionSetItem("ActionReviveMaskEffect");
        }
        inline std::optional<Ent::Gen2::ActionRiderStance> ActorStates::ActionRiderStance()
        {
            return std::optional<Ent::Gen2::ActionRiderStance>(getSubNode("ActionRiderStance"));
        }
        inline Ent::Gen2::ActionRiderStance ActorStates::addActionRiderStance()
        {
            return Ent::Gen2::ActionRiderStance(addSubNode("ActionRiderStance"));
        }
        inline void ActorStates::removeActionRiderStance()
        {
            getProperty().eraseUnionSetItem("ActionRiderStance");
        }
        inline std::optional<Ent::Gen2::ActionRise> ActorStates::ActionRise()
        {
            return std::optional<Ent::Gen2::ActionRise>(getSubNode("ActionRise"));
        }
        inline Ent::Gen2::ActionRise ActorStates::addActionRise()
        {
            return Ent::Gen2::ActionRise(addSubNode("ActionRise"));
        }
        inline void ActorStates::removeActionRise()
        {
            getProperty().eraseUnionSetItem("ActionRise");
        }
        inline std::optional<Ent::Gen2::ActionScaleRider> ActorStates::ActionScaleRider()
        {
            return std::optional<Ent::Gen2::ActionScaleRider>(getSubNode("ActionScaleRider"));
        }
        inline Ent::Gen2::ActionScaleRider ActorStates::addActionScaleRider()
        {
            return Ent::Gen2::ActionScaleRider(addSubNode("ActionScaleRider"));
        }
        inline void ActorStates::removeActionScaleRider()
        {
            getProperty().eraseUnionSetItem("ActionScaleRider");
        }
        inline std::optional<Ent::Gen2::ActionShakeOff> ActorStates::ActionShakeOff()
        {
            return std::optional<Ent::Gen2::ActionShakeOff>(getSubNode("ActionShakeOff"));
        }
        inline Ent::Gen2::ActionShakeOff ActorStates::addActionShakeOff()
        {
            return Ent::Gen2::ActionShakeOff(addSubNode("ActionShakeOff"));
        }
        inline void ActorStates::removeActionShakeOff()
        {
            getProperty().eraseUnionSetItem("ActionShakeOff");
        }
        inline std::optional<Ent::Gen2::ActionShamanVision> ActorStates::ActionShamanVision()
        {
            return std::optional<Ent::Gen2::ActionShamanVision>(getSubNode("ActionShamanVision"));
        }
        inline Ent::Gen2::ActionShamanVision ActorStates::addActionShamanVision()
        {
            return Ent::Gen2::ActionShamanVision(addSubNode("ActionShamanVision"));
        }
        inline void ActorStates::removeActionShamanVision()
        {
            getProperty().eraseUnionSetItem("ActionShamanVision");
        }
        inline std::optional<Ent::Gen2::ActionShootBeam> ActorStates::ActionShootBeam()
        {
            return std::optional<Ent::Gen2::ActionShootBeam>(getSubNode("ActionShootBeam"));
        }
        inline Ent::Gen2::ActionShootBeam ActorStates::addActionShootBeam()
        {
            return Ent::Gen2::ActionShootBeam(addSubNode("ActionShootBeam"));
        }
        inline void ActorStates::removeActionShootBeam()
        {
            getProperty().eraseUnionSetItem("ActionShootBeam");
        }
        inline std::optional<Ent::Gen2::ActionSlide> ActorStates::ActionSlide()
        {
            return std::optional<Ent::Gen2::ActionSlide>(getSubNode("ActionSlide"));
        }
        inline Ent::Gen2::ActionSlide ActorStates::addActionSlide()
        {
            return Ent::Gen2::ActionSlide(addSubNode("ActionSlide"));
        }
        inline void ActorStates::removeActionSlide()
        {
            getProperty().eraseUnionSetItem("ActionSlide");
        }
        inline std::optional<Ent::Gen2::ActionStartRun> ActorStates::ActionStartRun()
        {
            return std::optional<Ent::Gen2::ActionStartRun>(getSubNode("ActionStartRun"));
        }
        inline Ent::Gen2::ActionStartRun ActorStates::addActionStartRun()
        {
            return Ent::Gen2::ActionStartRun(addSubNode("ActionStartRun"));
        }
        inline void ActorStates::removeActionStartRun()
        {
            getProperty().eraseUnionSetItem("ActionStartRun");
        }
        inline std::optional<Ent::Gen2::ActionStop> ActorStates::ActionStop()
        {
            return std::optional<Ent::Gen2::ActionStop>(getSubNode("ActionStop"));
        }
        inline Ent::Gen2::ActionStop ActorStates::addActionStop()
        {
            return Ent::Gen2::ActionStop(addSubNode("ActionStop"));
        }
        inline void ActorStates::removeActionStop()
        {
            getProperty().eraseUnionSetItem("ActionStop");
        }
        inline std::optional<Ent::Gen2::ActionStrafe> ActorStates::ActionStrafe()
        {
            return std::optional<Ent::Gen2::ActionStrafe>(getSubNode("ActionStrafe"));
        }
        inline Ent::Gen2::ActionStrafe ActorStates::addActionStrafe()
        {
            return Ent::Gen2::ActionStrafe(addSubNode("ActionStrafe"));
        }
        inline void ActorStates::removeActionStrafe()
        {
            getProperty().eraseUnionSetItem("ActionStrafe");
        }
        inline std::optional<Ent::Gen2::ActionStrafeTurn> ActorStates::ActionStrafeTurn()
        {
            return std::optional<Ent::Gen2::ActionStrafeTurn>(getSubNode("ActionStrafeTurn"));
        }
        inline Ent::Gen2::ActionStrafeTurn ActorStates::addActionStrafeTurn()
        {
            return Ent::Gen2::ActionStrafeTurn(addSubNode("ActionStrafeTurn"));
        }
        inline void ActorStates::removeActionStrafeTurn()
        {
            getProperty().eraseUnionSetItem("ActionStrafeTurn");
        }
        inline std::optional<Ent::Gen2::ActionTakeOff> ActorStates::ActionTakeOff()
        {
            return std::optional<Ent::Gen2::ActionTakeOff>(getSubNode("ActionTakeOff"));
        }
        inline Ent::Gen2::ActionTakeOff ActorStates::addActionTakeOff()
        {
            return Ent::Gen2::ActionTakeOff(addSubNode("ActionTakeOff"));
        }
        inline void ActorStates::removeActionTakeOff()
        {
            getProperty().eraseUnionSetItem("ActionTakeOff");
        }
        inline std::optional<Ent::Gen2::ActionTalk> ActorStates::ActionTalk()
        {
            return std::optional<Ent::Gen2::ActionTalk>(getSubNode("ActionTalk"));
        }
        inline Ent::Gen2::ActionTalk ActorStates::addActionTalk()
        {
            return Ent::Gen2::ActionTalk(addSubNode("ActionTalk"));
        }
        inline void ActorStates::removeActionTalk()
        {
            getProperty().eraseUnionSetItem("ActionTalk");
        }
        inline std::optional<Ent::Gen2::ActionTopView> ActorStates::ActionTopView()
        {
            return std::optional<Ent::Gen2::ActionTopView>(getSubNode("ActionTopView"));
        }
        inline Ent::Gen2::ActionTopView ActorStates::addActionTopView()
        {
            return Ent::Gen2::ActionTopView(addSubNode("ActionTopView"));
        }
        inline void ActorStates::removeActionTopView()
        {
            getProperty().eraseUnionSetItem("ActionTopView");
        }
        inline std::optional<Ent::Gen2::ActionTriggerCrouch> ActorStates::ActionTriggerCrouch()
        {
            return std::optional<Ent::Gen2::ActionTriggerCrouch>(getSubNode("ActionTriggerCrouch"));
        }
        inline Ent::Gen2::ActionTriggerCrouch ActorStates::addActionTriggerCrouch()
        {
            return Ent::Gen2::ActionTriggerCrouch(addSubNode("ActionTriggerCrouch"));
        }
        inline void ActorStates::removeActionTriggerCrouch()
        {
            getProperty().eraseUnionSetItem("ActionTriggerCrouch");
        }
        inline std::optional<Ent::Gen2::ActionTriggerShamanVisionExit> ActorStates::ActionTriggerShamanVisionExit()
        {
            return std::optional<Ent::Gen2::ActionTriggerShamanVisionExit>(getSubNode("ActionTriggerShamanVisionExit"));
        }
        inline Ent::Gen2::ActionTriggerShamanVisionExit ActorStates::addActionTriggerShamanVisionExit()
        {
            return Ent::Gen2::ActionTriggerShamanVisionExit(addSubNode("ActionTriggerShamanVisionExit"));
        }
        inline void ActorStates::removeActionTriggerShamanVisionExit()
        {
            getProperty().eraseUnionSetItem("ActionTriggerShamanVisionExit");
        }
        inline std::optional<Ent::Gen2::ActionTriggerStandUp> ActorStates::ActionTriggerStandUp()
        {
            return std::optional<Ent::Gen2::ActionTriggerStandUp>(getSubNode("ActionTriggerStandUp"));
        }
        inline Ent::Gen2::ActionTriggerStandUp ActorStates::addActionTriggerStandUp()
        {
            return Ent::Gen2::ActionTriggerStandUp(addSubNode("ActionTriggerStandUp"));
        }
        inline void ActorStates::removeActionTriggerStandUp()
        {
            getProperty().eraseUnionSetItem("ActionTriggerStandUp");
        }
        inline std::optional<Ent::Gen2::ActionTurn> ActorStates::ActionTurn()
        {
            return std::optional<Ent::Gen2::ActionTurn>(getSubNode("ActionTurn"));
        }
        inline Ent::Gen2::ActionTurn ActorStates::addActionTurn()
        {
            return Ent::Gen2::ActionTurn(addSubNode("ActionTurn"));
        }
        inline void ActorStates::removeActionTurn()
        {
            getProperty().eraseUnionSetItem("ActionTurn");
        }
        inline std::optional<Ent::Gen2::ActionUnmount> ActorStates::ActionUnmount()
        {
            return std::optional<Ent::Gen2::ActionUnmount>(getSubNode("ActionUnmount"));
        }
        inline Ent::Gen2::ActionUnmount ActorStates::addActionUnmount()
        {
            return Ent::Gen2::ActionUnmount(addSubNode("ActionUnmount"));
        }
        inline void ActorStates::removeActionUnmount()
        {
            getProperty().eraseUnionSetItem("ActionUnmount");
        }
        inline std::optional<Ent::Gen2::ActionWait> ActorStates::ActionWait()
        {
            return std::optional<Ent::Gen2::ActionWait>(getSubNode("ActionWait"));
        }
        inline Ent::Gen2::ActionWait ActorStates::addActionWait()
        {
            return Ent::Gen2::ActionWait(addSubNode("ActionWait"));
        }
        inline void ActorStates::removeActionWait()
        {
            getProperty().eraseUnionSetItem("ActionWait");
        }
        inline std::optional<Ent::Gen2::ActorStateAimCharge> ActorStates::ActorStateAimCharge()
        {
            return std::optional<Ent::Gen2::ActorStateAimCharge>(getSubNode("ActorStateAimCharge"));
        }
        inline Ent::Gen2::ActorStateAimCharge ActorStates::addActorStateAimCharge()
        {
            return Ent::Gen2::ActorStateAimCharge(addSubNode("ActorStateAimCharge"));
        }
        inline void ActorStates::removeActorStateAimCharge()
        {
            getProperty().eraseUnionSetItem("ActorStateAimCharge");
        }
        inline std::optional<Ent::Gen2::ActorStateAlive> ActorStates::ActorStateAlive()
        {
            return std::optional<Ent::Gen2::ActorStateAlive>(getSubNode("ActorStateAlive"));
        }
        inline Ent::Gen2::ActorStateAlive ActorStates::addActorStateAlive()
        {
            return Ent::Gen2::ActorStateAlive(addSubNode("ActorStateAlive"));
        }
        inline void ActorStates::removeActorStateAlive()
        {
            getProperty().eraseUnionSetItem("ActorStateAlive");
        }
        inline std::optional<Ent::Gen2::ActorStateAnsweringCall> ActorStates::ActorStateAnsweringCall()
        {
            return std::optional<Ent::Gen2::ActorStateAnsweringCall>(getSubNode("ActorStateAnsweringCall"));
        }
        inline Ent::Gen2::ActorStateAnsweringCall ActorStates::addActorStateAnsweringCall()
        {
            return Ent::Gen2::ActorStateAnsweringCall(addSubNode("ActorStateAnsweringCall"));
        }
        inline void ActorStates::removeActorStateAnsweringCall()
        {
            getProperty().eraseUnionSetItem("ActorStateAnsweringCall");
        }
        inline std::optional<Ent::Gen2::ActorStateApplyHit> ActorStates::ActorStateApplyHit()
        {
            return std::optional<Ent::Gen2::ActorStateApplyHit>(getSubNode("ActorStateApplyHit"));
        }
        inline Ent::Gen2::ActorStateApplyHit ActorStates::addActorStateApplyHit()
        {
            return Ent::Gen2::ActorStateApplyHit(addSubNode("ActorStateApplyHit"));
        }
        inline void ActorStates::removeActorStateApplyHit()
        {
            getProperty().eraseUnionSetItem("ActorStateApplyHit");
        }
        inline std::optional<Ent::Gen2::ActorStateAttitudeAggressive> ActorStates::ActorStateAttitudeAggressive()
        {
            return std::optional<Ent::Gen2::ActorStateAttitudeAggressive>(getSubNode("ActorStateAttitudeAggressive"));
        }
        inline Ent::Gen2::ActorStateAttitudeAggressive ActorStates::addActorStateAttitudeAggressive()
        {
            return Ent::Gen2::ActorStateAttitudeAggressive(addSubNode("ActorStateAttitudeAggressive"));
        }
        inline void ActorStates::removeActorStateAttitudeAggressive()
        {
            getProperty().eraseUnionSetItem("ActorStateAttitudeAggressive");
        }
        inline std::optional<Ent::Gen2::ActorStateBehaviorState> ActorStates::ActorStateBehaviorState()
        {
            return std::optional<Ent::Gen2::ActorStateBehaviorState>(getSubNode("ActorStateBehaviorState"));
        }
        inline Ent::Gen2::ActorStateBehaviorState ActorStates::addActorStateBehaviorState()
        {
            return Ent::Gen2::ActorStateBehaviorState(addSubNode("ActorStateBehaviorState"));
        }
        inline void ActorStates::removeActorStateBehaviorState()
        {
            getProperty().eraseUnionSetItem("ActorStateBehaviorState");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingImmersed> ActorStates::ActorStateBeingImmersed()
        {
            return std::optional<Ent::Gen2::ActorStateBeingImmersed>(getSubNode("ActorStateBeingImmersed"));
        }
        inline Ent::Gen2::ActorStateBeingImmersed ActorStates::addActorStateBeingImmersed()
        {
            return Ent::Gen2::ActorStateBeingImmersed(addSubNode("ActorStateBeingImmersed"));
        }
        inline void ActorStates::removeActorStateBeingImmersed()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingImmersed");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingImmersedFromInAir> ActorStates::ActorStateBeingImmersedFromInAir()
        {
            return std::optional<Ent::Gen2::ActorStateBeingImmersedFromInAir>(getSubNode("ActorStateBeingImmersedFromInAir"));
        }
        inline Ent::Gen2::ActorStateBeingImmersedFromInAir ActorStates::addActorStateBeingImmersedFromInAir()
        {
            return Ent::Gen2::ActorStateBeingImmersedFromInAir(addSubNode("ActorStateBeingImmersedFromInAir"));
        }
        inline void ActorStates::removeActorStateBeingImmersedFromInAir()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingImmersedFromInAir");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingImmersedFromOnGround> ActorStates::ActorStateBeingImmersedFromOnGround()
        {
            return std::optional<Ent::Gen2::ActorStateBeingImmersedFromOnGround>(getSubNode("ActorStateBeingImmersedFromOnGround"));
        }
        inline Ent::Gen2::ActorStateBeingImmersedFromOnGround ActorStates::addActorStateBeingImmersedFromOnGround()
        {
            return Ent::Gen2::ActorStateBeingImmersedFromOnGround(addSubNode("ActorStateBeingImmersedFromOnGround"));
        }
        inline void ActorStates::removeActorStateBeingImmersedFromOnGround()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingImmersedFromOnGround");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingInAir> ActorStates::ActorStateBeingInAir()
        {
            return std::optional<Ent::Gen2::ActorStateBeingInAir>(getSubNode("ActorStateBeingInAir"));
        }
        inline Ent::Gen2::ActorStateBeingInAir ActorStates::addActorStateBeingInAir()
        {
            return Ent::Gen2::ActorStateBeingInAir(addSubNode("ActorStateBeingInAir"));
        }
        inline void ActorStates::removeActorStateBeingInAir()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingInAir");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingOnGround> ActorStates::ActorStateBeingOnGround()
        {
            return std::optional<Ent::Gen2::ActorStateBeingOnGround>(getSubNode("ActorStateBeingOnGround"));
        }
        inline Ent::Gen2::ActorStateBeingOnGround ActorStates::addActorStateBeingOnGround()
        {
            return Ent::Gen2::ActorStateBeingOnGround(addSubNode("ActorStateBeingOnGround"));
        }
        inline void ActorStates::removeActorStateBeingOnGround()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingOnGround");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingOnGroundFromImmersed> ActorStates::ActorStateBeingOnGroundFromImmersed()
        {
            return std::optional<Ent::Gen2::ActorStateBeingOnGroundFromImmersed>(getSubNode("ActorStateBeingOnGroundFromImmersed"));
        }
        inline Ent::Gen2::ActorStateBeingOnGroundFromImmersed ActorStates::addActorStateBeingOnGroundFromImmersed()
        {
            return Ent::Gen2::ActorStateBeingOnGroundFromImmersed(addSubNode("ActorStateBeingOnGroundFromImmersed"));
        }
        inline void ActorStates::removeActorStateBeingOnGroundFromImmersed()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingOnGroundFromImmersed");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingOnMount> ActorStates::ActorStateBeingOnMount()
        {
            return std::optional<Ent::Gen2::ActorStateBeingOnMount>(getSubNode("ActorStateBeingOnMount"));
        }
        inline Ent::Gen2::ActorStateBeingOnMount ActorStates::addActorStateBeingOnMount()
        {
            return Ent::Gen2::ActorStateBeingOnMount(addSubNode("ActorStateBeingOnMount"));
        }
        inline void ActorStates::removeActorStateBeingOnMount()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingOnMount");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingOnPossessedGPE> ActorStates::ActorStateBeingOnPossessedGPE()
        {
            return std::optional<Ent::Gen2::ActorStateBeingOnPossessedGPE>(getSubNode("ActorStateBeingOnPossessedGPE"));
        }
        inline Ent::Gen2::ActorStateBeingOnPossessedGPE ActorStates::addActorStateBeingOnPossessedGPE()
        {
            return Ent::Gen2::ActorStateBeingOnPossessedGPE(addSubNode("ActorStateBeingOnPossessedGPE"));
        }
        inline void ActorStates::removeActorStateBeingOnPossessedGPE()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingOnPossessedGPE");
        }
        inline std::optional<Ent::Gen2::ActorStateBeingRided> ActorStates::ActorStateBeingRided()
        {
            return std::optional<Ent::Gen2::ActorStateBeingRided>(getSubNode("ActorStateBeingRided"));
        }
        inline Ent::Gen2::ActorStateBeingRided ActorStates::addActorStateBeingRided()
        {
            return Ent::Gen2::ActorStateBeingRided(addSubNode("ActorStateBeingRided"));
        }
        inline void ActorStates::removeActorStateBeingRided()
        {
            getProperty().eraseUnionSetItem("ActorStateBeingRided");
        }
        inline std::optional<Ent::Gen2::ActorStateBendingConstraint> ActorStates::ActorStateBendingConstraint()
        {
            return std::optional<Ent::Gen2::ActorStateBendingConstraint>(getSubNode("ActorStateBendingConstraint"));
        }
        inline Ent::Gen2::ActorStateBendingConstraint ActorStates::addActorStateBendingConstraint()
        {
            return Ent::Gen2::ActorStateBendingConstraint(addSubNode("ActorStateBendingConstraint"));
        }
        inline void ActorStates::removeActorStateBendingConstraint()
        {
            getProperty().eraseUnionSetItem("ActorStateBendingConstraint");
        }
        inline std::optional<Ent::Gen2::ActorStateBendingTree> ActorStates::ActorStateBendingTree()
        {
            return std::optional<Ent::Gen2::ActorStateBendingTree>(getSubNode("ActorStateBendingTree"));
        }
        inline Ent::Gen2::ActorStateBendingTree ActorStates::addActorStateBendingTree()
        {
            return Ent::Gen2::ActorStateBendingTree(addSubNode("ActorStateBendingTree"));
        }
        inline void ActorStates::removeActorStateBendingTree()
        {
            getProperty().eraseUnionSetItem("ActorStateBendingTree");
        }
        inline std::optional<Ent::Gen2::ActorStateBiteEntityLiving> ActorStates::ActorStateBiteEntityLiving()
        {
            return std::optional<Ent::Gen2::ActorStateBiteEntityLiving>(getSubNode("ActorStateBiteEntityLiving"));
        }
        inline Ent::Gen2::ActorStateBiteEntityLiving ActorStates::addActorStateBiteEntityLiving()
        {
            return Ent::Gen2::ActorStateBiteEntityLiving(addSubNode("ActorStateBiteEntityLiving"));
        }
        inline void ActorStates::removeActorStateBiteEntityLiving()
        {
            getProperty().eraseUnionSetItem("ActorStateBiteEntityLiving");
        }
        inline std::optional<Ent::Gen2::ActorStateBiteJumpOut> ActorStates::ActorStateBiteJumpOut()
        {
            return std::optional<Ent::Gen2::ActorStateBiteJumpOut>(getSubNode("ActorStateBiteJumpOut"));
        }
        inline Ent::Gen2::ActorStateBiteJumpOut ActorStates::addActorStateBiteJumpOut()
        {
            return Ent::Gen2::ActorStateBiteJumpOut(addSubNode("ActorStateBiteJumpOut"));
        }
        inline void ActorStates::removeActorStateBiteJumpOut()
        {
            getProperty().eraseUnionSetItem("ActorStateBiteJumpOut");
        }
        inline std::optional<Ent::Gen2::ActorStateBittenRegenerated> ActorStates::ActorStateBittenRegenerated()
        {
            return std::optional<Ent::Gen2::ActorStateBittenRegenerated>(getSubNode("ActorStateBittenRegenerated"));
        }
        inline Ent::Gen2::ActorStateBittenRegenerated ActorStates::addActorStateBittenRegenerated()
        {
            return Ent::Gen2::ActorStateBittenRegenerated(addSubNode("ActorStateBittenRegenerated"));
        }
        inline void ActorStates::removeActorStateBittenRegenerated()
        {
            getProperty().eraseUnionSetItem("ActorStateBittenRegenerated");
        }
        inline std::optional<Ent::Gen2::ActorStateBittenShaked> ActorStates::ActorStateBittenShaked()
        {
            return std::optional<Ent::Gen2::ActorStateBittenShaked>(getSubNode("ActorStateBittenShaked"));
        }
        inline Ent::Gen2::ActorStateBittenShaked ActorStates::addActorStateBittenShaked()
        {
            return Ent::Gen2::ActorStateBittenShaked(addSubNode("ActorStateBittenShaked"));
        }
        inline void ActorStates::removeActorStateBittenShaked()
        {
            getProperty().eraseUnionSetItem("ActorStateBittenShaked");
        }
        inline std::optional<Ent::Gen2::ActorStateBuried> ActorStates::ActorStateBuried()
        {
            return std::optional<Ent::Gen2::ActorStateBuried>(getSubNode("ActorStateBuried"));
        }
        inline Ent::Gen2::ActorStateBuried ActorStates::addActorStateBuried()
        {
            return Ent::Gen2::ActorStateBuried(addSubNode("ActorStateBuried"));
        }
        inline void ActorStates::removeActorStateBuried()
        {
            getProperty().eraseUnionSetItem("ActorStateBuried");
        }
        inline std::optional<Ent::Gen2::ActorStateCallingFollower> ActorStates::ActorStateCallingFollower()
        {
            return std::optional<Ent::Gen2::ActorStateCallingFollower>(getSubNode("ActorStateCallingFollower"));
        }
        inline Ent::Gen2::ActorStateCallingFollower ActorStates::addActorStateCallingFollower()
        {
            return Ent::Gen2::ActorStateCallingFollower(addSubNode("ActorStateCallingFollower"));
        }
        inline void ActorStates::removeActorStateCallingFollower()
        {
            getProperty().eraseUnionSetItem("ActorStateCallingFollower");
        }
        inline std::optional<Ent::Gen2::ActorStateCatapulted> ActorStates::ActorStateCatapulted()
        {
            return std::optional<Ent::Gen2::ActorStateCatapulted>(getSubNode("ActorStateCatapulted"));
        }
        inline Ent::Gen2::ActorStateCatapulted ActorStates::addActorStateCatapulted()
        {
            return Ent::Gen2::ActorStateCatapulted(addSubNode("ActorStateCatapulted"));
        }
        inline void ActorStates::removeActorStateCatapulted()
        {
            getProperty().eraseUnionSetItem("ActorStateCatapulted");
        }
        inline std::optional<Ent::Gen2::ActorStateCatapultedLand> ActorStates::ActorStateCatapultedLand()
        {
            return std::optional<Ent::Gen2::ActorStateCatapultedLand>(getSubNode("ActorStateCatapultedLand"));
        }
        inline Ent::Gen2::ActorStateCatapultedLand ActorStates::addActorStateCatapultedLand()
        {
            return Ent::Gen2::ActorStateCatapultedLand(addSubNode("ActorStateCatapultedLand"));
        }
        inline void ActorStates::removeActorStateCatapultedLand()
        {
            getProperty().eraseUnionSetItem("ActorStateCatapultedLand");
        }
        inline std::optional<Ent::Gen2::ActorStateChangeEnergySide> ActorStates::ActorStateChangeEnergySide()
        {
            return std::optional<Ent::Gen2::ActorStateChangeEnergySide>(getSubNode("ActorStateChangeEnergySide"));
        }
        inline Ent::Gen2::ActorStateChangeEnergySide ActorStates::addActorStateChangeEnergySide()
        {
            return Ent::Gen2::ActorStateChangeEnergySide(addSubNode("ActorStateChangeEnergySide"));
        }
        inline void ActorStates::removeActorStateChangeEnergySide()
        {
            getProperty().eraseUnionSetItem("ActorStateChangeEnergySide");
        }
        inline std::optional<Ent::Gen2::ActorStateChargeSpendLife> ActorStates::ActorStateChargeSpendLife()
        {
            return std::optional<Ent::Gen2::ActorStateChargeSpendLife>(getSubNode("ActorStateChargeSpendLife"));
        }
        inline Ent::Gen2::ActorStateChargeSpendLife ActorStates::addActorStateChargeSpendLife()
        {
            return Ent::Gen2::ActorStateChargeSpendLife(addSubNode("ActorStateChargeSpendLife"));
        }
        inline void ActorStates::removeActorStateChargeSpendLife()
        {
            getProperty().eraseUnionSetItem("ActorStateChargeSpendLife");
        }
        inline std::optional<Ent::Gen2::ActorStateConvertWithFlow> ActorStates::ActorStateConvertWithFlow()
        {
            return std::optional<Ent::Gen2::ActorStateConvertWithFlow>(getSubNode("ActorStateConvertWithFlow"));
        }
        inline Ent::Gen2::ActorStateConvertWithFlow ActorStates::addActorStateConvertWithFlow()
        {
            return Ent::Gen2::ActorStateConvertWithFlow(addSubNode("ActorStateConvertWithFlow"));
        }
        inline void ActorStates::removeActorStateConvertWithFlow()
        {
            getProperty().eraseUnionSetItem("ActorStateConvertWithFlow");
        }
        inline std::optional<Ent::Gen2::ActorStateCreature> ActorStates::ActorStateCreature()
        {
            return std::optional<Ent::Gen2::ActorStateCreature>(getSubNode("ActorStateCreature"));
        }
        inline Ent::Gen2::ActorStateCreature ActorStates::addActorStateCreature()
        {
            return Ent::Gen2::ActorStateCreature(addSubNode("ActorStateCreature"));
        }
        inline void ActorStates::removeActorStateCreature()
        {
            getProperty().eraseUnionSetItem("ActorStateCreature");
        }
        inline std::optional<Ent::Gen2::ActorStateDead> ActorStates::ActorStateDead()
        {
            return std::optional<Ent::Gen2::ActorStateDead>(getSubNode("ActorStateDead"));
        }
        inline Ent::Gen2::ActorStateDead ActorStates::addActorStateDead()
        {
            return Ent::Gen2::ActorStateDead(addSubNode("ActorStateDead"));
        }
        inline void ActorStates::removeActorStateDead()
        {
            getProperty().eraseUnionSetItem("ActorStateDead");
        }
        inline std::optional<Ent::Gen2::ActorStateDisabled> ActorStates::ActorStateDisabled()
        {
            return std::optional<Ent::Gen2::ActorStateDisabled>(getSubNode("ActorStateDisabled"));
        }
        inline Ent::Gen2::ActorStateDisabled ActorStates::addActorStateDisabled()
        {
            return Ent::Gen2::ActorStateDisabled(addSubNode("ActorStateDisabled"));
        }
        inline void ActorStates::removeActorStateDisabled()
        {
            getProperty().eraseUnionSetItem("ActorStateDisabled");
        }
        inline std::optional<Ent::Gen2::ActorStateDisabledIn> ActorStates::ActorStateDisabledIn()
        {
            return std::optional<Ent::Gen2::ActorStateDisabledIn>(getSubNode("ActorStateDisabledIn"));
        }
        inline Ent::Gen2::ActorStateDisabledIn ActorStates::addActorStateDisabledIn()
        {
            return Ent::Gen2::ActorStateDisabledIn(addSubNode("ActorStateDisabledIn"));
        }
        inline void ActorStates::removeActorStateDisabledIn()
        {
            getProperty().eraseUnionSetItem("ActorStateDisabledIn");
        }
        inline std::optional<Ent::Gen2::ActorStateDisabledOut> ActorStates::ActorStateDisabledOut()
        {
            return std::optional<Ent::Gen2::ActorStateDisabledOut>(getSubNode("ActorStateDisabledOut"));
        }
        inline Ent::Gen2::ActorStateDisabledOut ActorStates::addActorStateDisabledOut()
        {
            return Ent::Gen2::ActorStateDisabledOut(addSubNode("ActorStateDisabledOut"));
        }
        inline void ActorStates::removeActorStateDisabledOut()
        {
            getProperty().eraseUnionSetItem("ActorStateDisabledOut");
        }
        inline std::optional<Ent::Gen2::ActorStateDodge3D> ActorStates::ActorStateDodge3D()
        {
            return std::optional<Ent::Gen2::ActorStateDodge3D>(getSubNode("ActorStateDodge3D"));
        }
        inline Ent::Gen2::ActorStateDodge3D ActorStates::addActorStateDodge3D()
        {
            return Ent::Gen2::ActorStateDodge3D(addSubNode("ActorStateDodge3D"));
        }
        inline void ActorStates::removeActorStateDodge3D()
        {
            getProperty().eraseUnionSetItem("ActorStateDodge3D");
        }
        inline std::optional<Ent::Gen2::ActorStateDucking> ActorStates::ActorStateDucking()
        {
            return std::optional<Ent::Gen2::ActorStateDucking>(getSubNode("ActorStateDucking"));
        }
        inline Ent::Gen2::ActorStateDucking ActorStates::addActorStateDucking()
        {
            return Ent::Gen2::ActorStateDucking(addSubNode("ActorStateDucking"));
        }
        inline void ActorStates::removeActorStateDucking()
        {
            getProperty().eraseUnionSetItem("ActorStateDucking");
        }
        inline std::optional<Ent::Gen2::ActorStateEnergyShooting> ActorStates::ActorStateEnergyShooting()
        {
            return std::optional<Ent::Gen2::ActorStateEnergyShooting>(getSubNode("ActorStateEnergyShooting"));
        }
        inline Ent::Gen2::ActorStateEnergyShooting ActorStates::addActorStateEnergyShooting()
        {
            return Ent::Gen2::ActorStateEnergyShooting(addSubNode("ActorStateEnergyShooting"));
        }
        inline void ActorStates::removeActorStateEnergyShooting()
        {
            getProperty().eraseUnionSetItem("ActorStateEnergyShooting");
        }
        inline std::optional<Ent::Gen2::ActorStateExitingFly> ActorStates::ActorStateExitingFly()
        {
            return std::optional<Ent::Gen2::ActorStateExitingFly>(getSubNode("ActorStateExitingFly"));
        }
        inline Ent::Gen2::ActorStateExitingFly ActorStates::addActorStateExitingFly()
        {
            return Ent::Gen2::ActorStateExitingFly(addSubNode("ActorStateExitingFly"));
        }
        inline void ActorStates::removeActorStateExitingFly()
        {
            getProperty().eraseUnionSetItem("ActorStateExitingFly");
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingAttackFlocking> ActorStates::ActorStateFlockingAttackFlocking()
        {
            return std::optional<Ent::Gen2::ActorStateFlockingAttackFlocking>(getSubNode("ActorStateFlockingAttackFlocking"));
        }
        inline Ent::Gen2::ActorStateFlockingAttackFlocking ActorStates::addActorStateFlockingAttackFlocking()
        {
            return Ent::Gen2::ActorStateFlockingAttackFlocking(addSubNode("ActorStateFlockingAttackFlocking"));
        }
        inline void ActorStates::removeActorStateFlockingAttackFlocking()
        {
            getProperty().eraseUnionSetItem("ActorStateFlockingAttackFlocking");
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingChangingParams> ActorStates::ActorStateFlockingChangingParams()
        {
            return std::optional<Ent::Gen2::ActorStateFlockingChangingParams>(getSubNode("ActorStateFlockingChangingParams"));
        }
        inline Ent::Gen2::ActorStateFlockingChangingParams ActorStates::addActorStateFlockingChangingParams()
        {
            return Ent::Gen2::ActorStateFlockingChangingParams(addSubNode("ActorStateFlockingChangingParams"));
        }
        inline void ActorStates::removeActorStateFlockingChangingParams()
        {
            getProperty().eraseUnionSetItem("ActorStateFlockingChangingParams");
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingIndividualSpawning> ActorStates::ActorStateFlockingIndividualSpawning()
        {
            return std::optional<Ent::Gen2::ActorStateFlockingIndividualSpawning>(getSubNode("ActorStateFlockingIndividualSpawning"));
        }
        inline Ent::Gen2::ActorStateFlockingIndividualSpawning ActorStates::addActorStateFlockingIndividualSpawning()
        {
            return Ent::Gen2::ActorStateFlockingIndividualSpawning(addSubNode("ActorStateFlockingIndividualSpawning"));
        }
        inline void ActorStates::removeActorStateFlockingIndividualSpawning()
        {
            getProperty().eraseUnionSetItem("ActorStateFlockingIndividualSpawning");
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingLiving> ActorStates::ActorStateFlockingLiving()
        {
            return std::optional<Ent::Gen2::ActorStateFlockingLiving>(getSubNode("ActorStateFlockingLiving"));
        }
        inline Ent::Gen2::ActorStateFlockingLiving ActorStates::addActorStateFlockingLiving()
        {
            return Ent::Gen2::ActorStateFlockingLiving(addSubNode("ActorStateFlockingLiving"));
        }
        inline void ActorStates::removeActorStateFlockingLiving()
        {
            getProperty().eraseUnionSetItem("ActorStateFlockingLiving");
        }
        inline std::optional<Ent::Gen2::ActorStateFlockingRigidbodyBeingActive> ActorStates::ActorStateFlockingRigidbodyBeingActive()
        {
            return std::optional<Ent::Gen2::ActorStateFlockingRigidbodyBeingActive>(getSubNode("ActorStateFlockingRigidbodyBeingActive"));
        }
        inline Ent::Gen2::ActorStateFlockingRigidbodyBeingActive ActorStates::addActorStateFlockingRigidbodyBeingActive()
        {
            return Ent::Gen2::ActorStateFlockingRigidbodyBeingActive(addSubNode("ActorStateFlockingRigidbodyBeingActive"));
        }
        inline void ActorStates::removeActorStateFlockingRigidbodyBeingActive()
        {
            getProperty().eraseUnionSetItem("ActorStateFlockingRigidbodyBeingActive");
        }
        inline std::optional<Ent::Gen2::ActorStateFluidSlowDown> ActorStates::ActorStateFluidSlowDown()
        {
            return std::optional<Ent::Gen2::ActorStateFluidSlowDown>(getSubNode("ActorStateFluidSlowDown"));
        }
        inline Ent::Gen2::ActorStateFluidSlowDown ActorStates::addActorStateFluidSlowDown()
        {
            return Ent::Gen2::ActorStateFluidSlowDown(addSubNode("ActorStateFluidSlowDown"));
        }
        inline void ActorStates::removeActorStateFluidSlowDown()
        {
            getProperty().eraseUnionSetItem("ActorStateFluidSlowDown");
        }
        inline std::optional<Ent::Gen2::ActorStateForceAgainstSlope> ActorStates::ActorStateForceAgainstSlope()
        {
            return std::optional<Ent::Gen2::ActorStateForceAgainstSlope>(getSubNode("ActorStateForceAgainstSlope"));
        }
        inline Ent::Gen2::ActorStateForceAgainstSlope ActorStates::addActorStateForceAgainstSlope()
        {
            return Ent::Gen2::ActorStateForceAgainstSlope(addSubNode("ActorStateForceAgainstSlope"));
        }
        inline void ActorStates::removeActorStateForceAgainstSlope()
        {
            getProperty().eraseUnionSetItem("ActorStateForceAgainstSlope");
        }
        inline std::optional<Ent::Gen2::ActorStateHasNoBody> ActorStates::ActorStateHasNoBody()
        {
            return std::optional<Ent::Gen2::ActorStateHasNoBody>(getSubNode("ActorStateHasNoBody"));
        }
        inline Ent::Gen2::ActorStateHasNoBody ActorStates::addActorStateHasNoBody()
        {
            return Ent::Gen2::ActorStateHasNoBody(addSubNode("ActorStateHasNoBody"));
        }
        inline void ActorStates::removeActorStateHasNoBody()
        {
            getProperty().eraseUnionSetItem("ActorStateHasNoBody");
        }
        inline std::optional<Ent::Gen2::ActorStateHeld> ActorStates::ActorStateHeld()
        {
            return std::optional<Ent::Gen2::ActorStateHeld>(getSubNode("ActorStateHeld"));
        }
        inline Ent::Gen2::ActorStateHeld ActorStates::addActorStateHeld()
        {
            return Ent::Gen2::ActorStateHeld(addSubNode("ActorStateHeld"));
        }
        inline void ActorStates::removeActorStateHeld()
        {
            getProperty().eraseUnionSetItem("ActorStateHeld");
        }
        inline std::optional<Ent::Gen2::ActorStateHitEnergyWall> ActorStates::ActorStateHitEnergyWall()
        {
            return std::optional<Ent::Gen2::ActorStateHitEnergyWall>(getSubNode("ActorStateHitEnergyWall"));
        }
        inline Ent::Gen2::ActorStateHitEnergyWall ActorStates::addActorStateHitEnergyWall()
        {
            return Ent::Gen2::ActorStateHitEnergyWall(addSubNode("ActorStateHitEnergyWall"));
        }
        inline void ActorStates::removeActorStateHitEnergyWall()
        {
            getProperty().eraseUnionSetItem("ActorStateHitEnergyWall");
        }
        inline std::optional<Ent::Gen2::ActorStateHoldingItem> ActorStates::ActorStateHoldingItem()
        {
            return std::optional<Ent::Gen2::ActorStateHoldingItem>(getSubNode("ActorStateHoldingItem"));
        }
        inline Ent::Gen2::ActorStateHoldingItem ActorStates::addActorStateHoldingItem()
        {
            return Ent::Gen2::ActorStateHoldingItem(addSubNode("ActorStateHoldingItem"));
        }
        inline void ActorStates::removeActorStateHoldingItem()
        {
            getProperty().eraseUnionSetItem("ActorStateHoldingItem");
        }
        inline std::optional<Ent::Gen2::ActorStateIKConstraint> ActorStates::ActorStateIKConstraint()
        {
            return std::optional<Ent::Gen2::ActorStateIKConstraint>(getSubNode("ActorStateIKConstraint"));
        }
        inline Ent::Gen2::ActorStateIKConstraint ActorStates::addActorStateIKConstraint()
        {
            return Ent::Gen2::ActorStateIKConstraint(addSubNode("ActorStateIKConstraint"));
        }
        inline void ActorStates::removeActorStateIKConstraint()
        {
            getProperty().eraseUnionSetItem("ActorStateIKConstraint");
        }
        inline std::optional<Ent::Gen2::ActorStateInvincible> ActorStates::ActorStateInvincible()
        {
            return std::optional<Ent::Gen2::ActorStateInvincible>(getSubNode("ActorStateInvincible"));
        }
        inline Ent::Gen2::ActorStateInvincible ActorStates::addActorStateInvincible()
        {
            return Ent::Gen2::ActorStateInvincible(addSubNode("ActorStateInvincible"));
        }
        inline void ActorStates::removeActorStateInvincible()
        {
            getProperty().eraseUnionSetItem("ActorStateInvincible");
        }
        inline std::optional<Ent::Gen2::ActorStateLeavingLava> ActorStates::ActorStateLeavingLava()
        {
            return std::optional<Ent::Gen2::ActorStateLeavingLava>(getSubNode("ActorStateLeavingLava"));
        }
        inline Ent::Gen2::ActorStateLeavingLava ActorStates::addActorStateLeavingLava()
        {
            return Ent::Gen2::ActorStateLeavingLava(addSubNode("ActorStateLeavingLava"));
        }
        inline void ActorStates::removeActorStateLeavingLava()
        {
            getProperty().eraseUnionSetItem("ActorStateLeavingLava");
        }
        inline std::optional<Ent::Gen2::ActorStateLosingOxygen> ActorStates::ActorStateLosingOxygen()
        {
            return std::optional<Ent::Gen2::ActorStateLosingOxygen>(getSubNode("ActorStateLosingOxygen"));
        }
        inline Ent::Gen2::ActorStateLosingOxygen ActorStates::addActorStateLosingOxygen()
        {
            return Ent::Gen2::ActorStateLosingOxygen(addSubNode("ActorStateLosingOxygen"));
        }
        inline void ActorStates::removeActorStateLosingOxygen()
        {
            getProperty().eraseUnionSetItem("ActorStateLosingOxygen");
        }
        inline std::optional<Ent::Gen2::ActorStateMeetingLava> ActorStates::ActorStateMeetingLava()
        {
            return std::optional<Ent::Gen2::ActorStateMeetingLava>(getSubNode("ActorStateMeetingLava"));
        }
        inline Ent::Gen2::ActorStateMeetingLava ActorStates::addActorStateMeetingLava()
        {
            return Ent::Gen2::ActorStateMeetingLava(addSubNode("ActorStateMeetingLava"));
        }
        inline void ActorStates::removeActorStateMeetingLava()
        {
            getProperty().eraseUnionSetItem("ActorStateMeetingLava");
        }
        inline std::optional<Ent::Gen2::ActorStateMoveAlongBezier> ActorStates::ActorStateMoveAlongBezier()
        {
            return std::optional<Ent::Gen2::ActorStateMoveAlongBezier>(getSubNode("ActorStateMoveAlongBezier"));
        }
        inline Ent::Gen2::ActorStateMoveAlongBezier ActorStates::addActorStateMoveAlongBezier()
        {
            return Ent::Gen2::ActorStateMoveAlongBezier(addSubNode("ActorStateMoveAlongBezier"));
        }
        inline void ActorStates::removeActorStateMoveAlongBezier()
        {
            getProperty().eraseUnionSetItem("ActorStateMoveAlongBezier");
        }
        inline std::optional<Ent::Gen2::ActorStateMovingClamber> ActorStates::ActorStateMovingClamber()
        {
            return std::optional<Ent::Gen2::ActorStateMovingClamber>(getSubNode("ActorStateMovingClamber"));
        }
        inline Ent::Gen2::ActorStateMovingClamber ActorStates::addActorStateMovingClamber()
        {
            return Ent::Gen2::ActorStateMovingClamber(addSubNode("ActorStateMovingClamber"));
        }
        inline void ActorStates::removeActorStateMovingClamber()
        {
            getProperty().eraseUnionSetItem("ActorStateMovingClamber");
        }
        inline std::optional<Ent::Gen2::ActorStateMovingDive> ActorStates::ActorStateMovingDive()
        {
            return std::optional<Ent::Gen2::ActorStateMovingDive>(getSubNode("ActorStateMovingDive"));
        }
        inline Ent::Gen2::ActorStateMovingDive ActorStates::addActorStateMovingDive()
        {
            return Ent::Gen2::ActorStateMovingDive(addSubNode("ActorStateMovingDive"));
        }
        inline void ActorStates::removeActorStateMovingDive()
        {
            getProperty().eraseUnionSetItem("ActorStateMovingDive");
        }
        inline std::optional<Ent::Gen2::ActorStateMovingFall> ActorStates::ActorStateMovingFall()
        {
            return std::optional<Ent::Gen2::ActorStateMovingFall>(getSubNode("ActorStateMovingFall"));
        }
        inline Ent::Gen2::ActorStateMovingFall ActorStates::addActorStateMovingFall()
        {
            return Ent::Gen2::ActorStateMovingFall(addSubNode("ActorStateMovingFall"));
        }
        inline void ActorStates::removeActorStateMovingFall()
        {
            getProperty().eraseUnionSetItem("ActorStateMovingFall");
        }
        inline std::optional<Ent::Gen2::ActorStateMovingFly> ActorStates::ActorStateMovingFly()
        {
            return std::optional<Ent::Gen2::ActorStateMovingFly>(getSubNode("ActorStateMovingFly"));
        }
        inline Ent::Gen2::ActorStateMovingFly ActorStates::addActorStateMovingFly()
        {
            return Ent::Gen2::ActorStateMovingFly(addSubNode("ActorStateMovingFly"));
        }
        inline void ActorStates::removeActorStateMovingFly()
        {
            getProperty().eraseUnionSetItem("ActorStateMovingFly");
        }
        inline std::optional<Ent::Gen2::ActorStateMovingProne> ActorStates::ActorStateMovingProne()
        {
            return std::optional<Ent::Gen2::ActorStateMovingProne>(getSubNode("ActorStateMovingProne"));
        }
        inline Ent::Gen2::ActorStateMovingProne ActorStates::addActorStateMovingProne()
        {
            return Ent::Gen2::ActorStateMovingProne(addSubNode("ActorStateMovingProne"));
        }
        inline void ActorStates::removeActorStateMovingProne()
        {
            getProperty().eraseUnionSetItem("ActorStateMovingProne");
        }
        inline std::optional<Ent::Gen2::ActorStateMovingRide> ActorStates::ActorStateMovingRide()
        {
            return std::optional<Ent::Gen2::ActorStateMovingRide>(getSubNode("ActorStateMovingRide"));
        }
        inline Ent::Gen2::ActorStateMovingRide ActorStates::addActorStateMovingRide()
        {
            return Ent::Gen2::ActorStateMovingRide(addSubNode("ActorStateMovingRide"));
        }
        inline void ActorStates::removeActorStateMovingRide()
        {
            getProperty().eraseUnionSetItem("ActorStateMovingRide");
        }
        inline std::optional<Ent::Gen2::ActorStateMovingStandUp> ActorStates::ActorStateMovingStandUp()
        {
            return std::optional<Ent::Gen2::ActorStateMovingStandUp>(getSubNode("ActorStateMovingStandUp"));
        }
        inline Ent::Gen2::ActorStateMovingStandUp ActorStates::addActorStateMovingStandUp()
        {
            return Ent::Gen2::ActorStateMovingStandUp(addSubNode("ActorStateMovingStandUp"));
        }
        inline void ActorStates::removeActorStateMovingStandUp()
        {
            getProperty().eraseUnionSetItem("ActorStateMovingStandUp");
        }
        inline std::optional<Ent::Gen2::ActorStateMovingSwim> ActorStates::ActorStateMovingSwim()
        {
            return std::optional<Ent::Gen2::ActorStateMovingSwim>(getSubNode("ActorStateMovingSwim"));
        }
        inline Ent::Gen2::ActorStateMovingSwim ActorStates::addActorStateMovingSwim()
        {
            return Ent::Gen2::ActorStateMovingSwim(addSubNode("ActorStateMovingSwim"));
        }
        inline void ActorStates::removeActorStateMovingSwim()
        {
            getProperty().eraseUnionSetItem("ActorStateMovingSwim");
        }
        inline std::optional<Ent::Gen2::ActorStateNavigationMesh> ActorStates::ActorStateNavigationMesh()
        {
            return std::optional<Ent::Gen2::ActorStateNavigationMesh>(getSubNode("ActorStateNavigationMesh"));
        }
        inline Ent::Gen2::ActorStateNavigationMesh ActorStates::addActorStateNavigationMesh()
        {
            return Ent::Gen2::ActorStateNavigationMesh(addSubNode("ActorStateNavigationMesh"));
        }
        inline void ActorStates::removeActorStateNavigationMesh()
        {
            getProperty().eraseUnionSetItem("ActorStateNavigationMesh");
        }
        inline std::optional<Ent::Gen2::ActorStatePossessFlocking> ActorStates::ActorStatePossessFlocking()
        {
            return std::optional<Ent::Gen2::ActorStatePossessFlocking>(getSubNode("ActorStatePossessFlocking"));
        }
        inline Ent::Gen2::ActorStatePossessFlocking ActorStates::addActorStatePossessFlocking()
        {
            return Ent::Gen2::ActorStatePossessFlocking(addSubNode("ActorStatePossessFlocking"));
        }
        inline void ActorStates::removeActorStatePossessFlocking()
        {
            getProperty().eraseUnionSetItem("ActorStatePossessFlocking");
        }
        inline std::optional<Ent::Gen2::ActorStatePossessGPE> ActorStates::ActorStatePossessGPE()
        {
            return std::optional<Ent::Gen2::ActorStatePossessGPE>(getSubNode("ActorStatePossessGPE"));
        }
        inline Ent::Gen2::ActorStatePossessGPE ActorStates::addActorStatePossessGPE()
        {
            return Ent::Gen2::ActorStatePossessGPE(addSubNode("ActorStatePossessGPE"));
        }
        inline void ActorStates::removeActorStatePossessGPE()
        {
            getProperty().eraseUnionSetItem("ActorStatePossessGPE");
        }
        inline std::optional<Ent::Gen2::ActorStateReactingLava> ActorStates::ActorStateReactingLava()
        {
            return std::optional<Ent::Gen2::ActorStateReactingLava>(getSubNode("ActorStateReactingLava"));
        }
        inline Ent::Gen2::ActorStateReactingLava ActorStates::addActorStateReactingLava()
        {
            return Ent::Gen2::ActorStateReactingLava(addSubNode("ActorStateReactingLava"));
        }
        inline void ActorStates::removeActorStateReactingLava()
        {
            getProperty().eraseUnionSetItem("ActorStateReactingLava");
        }
        inline std::optional<Ent::Gen2::ActorStateRecover> ActorStates::ActorStateRecover()
        {
            return std::optional<Ent::Gen2::ActorStateRecover>(getSubNode("ActorStateRecover"));
        }
        inline Ent::Gen2::ActorStateRecover ActorStates::addActorStateRecover()
        {
            return Ent::Gen2::ActorStateRecover(addSubNode("ActorStateRecover"));
        }
        inline void ActorStates::removeActorStateRecover()
        {
            getProperty().eraseUnionSetItem("ActorStateRecover");
        }
        inline std::optional<Ent::Gen2::ActorStateRequestingHealing> ActorStates::ActorStateRequestingHealing()
        {
            return std::optional<Ent::Gen2::ActorStateRequestingHealing>(getSubNode("ActorStateRequestingHealing"));
        }
        inline Ent::Gen2::ActorStateRequestingHealing ActorStates::addActorStateRequestingHealing()
        {
            return Ent::Gen2::ActorStateRequestingHealing(addSubNode("ActorStateRequestingHealing"));
        }
        inline void ActorStates::removeActorStateRequestingHealing()
        {
            getProperty().eraseUnionSetItem("ActorStateRequestingHealing");
        }
        inline std::optional<Ent::Gen2::ActorStateRequestingWaiting> ActorStates::ActorStateRequestingWaiting()
        {
            return std::optional<Ent::Gen2::ActorStateRequestingWaiting>(getSubNode("ActorStateRequestingWaiting"));
        }
        inline Ent::Gen2::ActorStateRequestingWaiting ActorStates::addActorStateRequestingWaiting()
        {
            return Ent::Gen2::ActorStateRequestingWaiting(addSubNode("ActorStateRequestingWaiting"));
        }
        inline void ActorStates::removeActorStateRequestingWaiting()
        {
            getProperty().eraseUnionSetItem("ActorStateRequestingWaiting");
        }
        inline std::optional<Ent::Gen2::ActorStateScreaming> ActorStates::ActorStateScreaming()
        {
            return std::optional<Ent::Gen2::ActorStateScreaming>(getSubNode("ActorStateScreaming"));
        }
        inline Ent::Gen2::ActorStateScreaming ActorStates::addActorStateScreaming()
        {
            return Ent::Gen2::ActorStateScreaming(addSubNode("ActorStateScreaming"));
        }
        inline void ActorStates::removeActorStateScreaming()
        {
            getProperty().eraseUnionSetItem("ActorStateScreaming");
        }
        inline std::optional<Ent::Gen2::ActorStateSendMission> ActorStates::ActorStateSendMission()
        {
            return std::optional<Ent::Gen2::ActorStateSendMission>(getSubNode("ActorStateSendMission"));
        }
        inline Ent::Gen2::ActorStateSendMission ActorStates::addActorStateSendMission()
        {
            return Ent::Gen2::ActorStateSendMission(addSubNode("ActorStateSendMission"));
        }
        inline void ActorStates::removeActorStateSendMission()
        {
            getProperty().eraseUnionSetItem("ActorStateSendMission");
        }
        inline std::optional<Ent::Gen2::ActorStateShamanItemLiving> ActorStates::ActorStateShamanItemLiving()
        {
            return std::optional<Ent::Gen2::ActorStateShamanItemLiving>(getSubNode("ActorStateShamanItemLiving"));
        }
        inline Ent::Gen2::ActorStateShamanItemLiving ActorStates::addActorStateShamanItemLiving()
        {
            return Ent::Gen2::ActorStateShamanItemLiving(addSubNode("ActorStateShamanItemLiving"));
        }
        inline void ActorStates::removeActorStateShamanItemLiving()
        {
            getProperty().eraseUnionSetItem("ActorStateShamanItemLiving");
        }
        inline std::optional<Ent::Gen2::ActorStateShamanItemPartState> ActorStates::ActorStateShamanItemPartState()
        {
            return std::optional<Ent::Gen2::ActorStateShamanItemPartState>(getSubNode("ActorStateShamanItemPartState"));
        }
        inline Ent::Gen2::ActorStateShamanItemPartState ActorStates::addActorStateShamanItemPartState()
        {
            return Ent::Gen2::ActorStateShamanItemPartState(addSubNode("ActorStateShamanItemPartState"));
        }
        inline void ActorStates::removeActorStateShamanItemPartState()
        {
            getProperty().eraseUnionSetItem("ActorStateShamanItemPartState");
        }
        inline std::optional<Ent::Gen2::ActorStateShapeshift> ActorStates::ActorStateShapeshift()
        {
            return std::optional<Ent::Gen2::ActorStateShapeshift>(getSubNode("ActorStateShapeshift"));
        }
        inline Ent::Gen2::ActorStateShapeshift ActorStates::addActorStateShapeshift()
        {
            return Ent::Gen2::ActorStateShapeshift(addSubNode("ActorStateShapeshift"));
        }
        inline void ActorStates::removeActorStateShapeshift()
        {
            getProperty().eraseUnionSetItem("ActorStateShapeshift");
        }
        inline std::optional<Ent::Gen2::ActorStateShootingFlow> ActorStates::ActorStateShootingFlow()
        {
            return std::optional<Ent::Gen2::ActorStateShootingFlow>(getSubNode("ActorStateShootingFlow"));
        }
        inline Ent::Gen2::ActorStateShootingFlow ActorStates::addActorStateShootingFlow()
        {
            return Ent::Gen2::ActorStateShootingFlow(addSubNode("ActorStateShootingFlow"));
        }
        inline void ActorStates::removeActorStateShootingFlow()
        {
            getProperty().eraseUnionSetItem("ActorStateShootingFlow");
        }
        inline std::optional<Ent::Gen2::ActorStateSink> ActorStates::ActorStateSink()
        {
            return std::optional<Ent::Gen2::ActorStateSink>(getSubNode("ActorStateSink"));
        }
        inline Ent::Gen2::ActorStateSink ActorStates::addActorStateSink()
        {
            return Ent::Gen2::ActorStateSink(addSubNode("ActorStateSink"));
        }
        inline void ActorStates::removeActorStateSink()
        {
            getProperty().eraseUnionSetItem("ActorStateSink");
        }
        inline std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpRequest> ActorStates::ActorStateSkeletonPartPickUpRequest()
        {
            return std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpRequest>(getSubNode("ActorStateSkeletonPartPickUpRequest"));
        }
        inline Ent::Gen2::ActorStateSkeletonPartPickUpRequest ActorStates::addActorStateSkeletonPartPickUpRequest()
        {
            return Ent::Gen2::ActorStateSkeletonPartPickUpRequest(addSubNode("ActorStateSkeletonPartPickUpRequest"));
        }
        inline void ActorStates::removeActorStateSkeletonPartPickUpRequest()
        {
            getProperty().eraseUnionSetItem("ActorStateSkeletonPartPickUpRequest");
        }
        inline std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpState> ActorStates::ActorStateSkeletonPartPickUpState()
        {
            return std::optional<Ent::Gen2::ActorStateSkeletonPartPickUpState>(getSubNode("ActorStateSkeletonPartPickUpState"));
        }
        inline Ent::Gen2::ActorStateSkeletonPartPickUpState ActorStates::addActorStateSkeletonPartPickUpState()
        {
            return Ent::Gen2::ActorStateSkeletonPartPickUpState(addSubNode("ActorStateSkeletonPartPickUpState"));
        }
        inline void ActorStates::removeActorStateSkeletonPartPickUpState()
        {
            getProperty().eraseUnionSetItem("ActorStateSkeletonPartPickUpState");
        }
        inline std::optional<Ent::Gen2::ActorStateSleeping> ActorStates::ActorStateSleeping()
        {
            return std::optional<Ent::Gen2::ActorStateSleeping>(getSubNode("ActorStateSleeping"));
        }
        inline Ent::Gen2::ActorStateSleeping ActorStates::addActorStateSleeping()
        {
            return Ent::Gen2::ActorStateSleeping(addSubNode("ActorStateSleeping"));
        }
        inline void ActorStates::removeActorStateSleeping()
        {
            getProperty().eraseUnionSetItem("ActorStateSleeping");
        }
        inline std::optional<Ent::Gen2::ActorStateSlope> ActorStates::ActorStateSlope()
        {
            return std::optional<Ent::Gen2::ActorStateSlope>(getSubNode("ActorStateSlope"));
        }
        inline Ent::Gen2::ActorStateSlope ActorStates::addActorStateSlope()
        {
            return Ent::Gen2::ActorStateSlope(addSubNode("ActorStateSlope"));
        }
        inline void ActorStates::removeActorStateSlope()
        {
            getProperty().eraseUnionSetItem("ActorStateSlope");
        }
        inline std::optional<Ent::Gen2::ActorStateSoulRespawn> ActorStates::ActorStateSoulRespawn()
        {
            return std::optional<Ent::Gen2::ActorStateSoulRespawn>(getSubNode("ActorStateSoulRespawn"));
        }
        inline Ent::Gen2::ActorStateSoulRespawn ActorStates::addActorStateSoulRespawn()
        {
            return Ent::Gen2::ActorStateSoulRespawn(addSubNode("ActorStateSoulRespawn"));
        }
        inline void ActorStates::removeActorStateSoulRespawn()
        {
            getProperty().eraseUnionSetItem("ActorStateSoulRespawn");
        }
        inline std::optional<Ent::Gen2::ActorStateSoulWaitingToRespawn> ActorStates::ActorStateSoulWaitingToRespawn()
        {
            return std::optional<Ent::Gen2::ActorStateSoulWaitingToRespawn>(getSubNode("ActorStateSoulWaitingToRespawn"));
        }
        inline Ent::Gen2::ActorStateSoulWaitingToRespawn ActorStates::addActorStateSoulWaitingToRespawn()
        {
            return Ent::Gen2::ActorStateSoulWaitingToRespawn(addSubNode("ActorStateSoulWaitingToRespawn"));
        }
        inline void ActorStates::removeActorStateSoulWaitingToRespawn()
        {
            getProperty().eraseUnionSetItem("ActorStateSoulWaitingToRespawn");
        }
        inline std::optional<Ent::Gen2::ActorStateSpeedMultiplier> ActorStates::ActorStateSpeedMultiplier()
        {
            return std::optional<Ent::Gen2::ActorStateSpeedMultiplier>(getSubNode("ActorStateSpeedMultiplier"));
        }
        inline Ent::Gen2::ActorStateSpeedMultiplier ActorStates::addActorStateSpeedMultiplier()
        {
            return Ent::Gen2::ActorStateSpeedMultiplier(addSubNode("ActorStateSpeedMultiplier"));
        }
        inline void ActorStates::removeActorStateSpeedMultiplier()
        {
            getProperty().eraseUnionSetItem("ActorStateSpeedMultiplier");
        }
        inline std::optional<Ent::Gen2::ActorStateStopAttitudeAggressive> ActorStates::ActorStateStopAttitudeAggressive()
        {
            return std::optional<Ent::Gen2::ActorStateStopAttitudeAggressive>(getSubNode("ActorStateStopAttitudeAggressive"));
        }
        inline Ent::Gen2::ActorStateStopAttitudeAggressive ActorStates::addActorStateStopAttitudeAggressive()
        {
            return Ent::Gen2::ActorStateStopAttitudeAggressive(addSubNode("ActorStateStopAttitudeAggressive"));
        }
        inline void ActorStates::removeActorStateStopAttitudeAggressive()
        {
            getProperty().eraseUnionSetItem("ActorStateStopAttitudeAggressive");
        }
        inline std::optional<Ent::Gen2::ActorStateTaunting> ActorStates::ActorStateTaunting()
        {
            return std::optional<Ent::Gen2::ActorStateTaunting>(getSubNode("ActorStateTaunting"));
        }
        inline Ent::Gen2::ActorStateTaunting ActorStates::addActorStateTaunting()
        {
            return Ent::Gen2::ActorStateTaunting(addSubNode("ActorStateTaunting"));
        }
        inline void ActorStates::removeActorStateTaunting()
        {
            getProperty().eraseUnionSetItem("ActorStateTaunting");
        }
        inline std::optional<Ent::Gen2::ActorStateTeleport> ActorStates::ActorStateTeleport()
        {
            return std::optional<Ent::Gen2::ActorStateTeleport>(getSubNode("ActorStateTeleport"));
        }
        inline Ent::Gen2::ActorStateTeleport ActorStates::addActorStateTeleport()
        {
            return Ent::Gen2::ActorStateTeleport(addSubNode("ActorStateTeleport"));
        }
        inline void ActorStates::removeActorStateTeleport()
        {
            getProperty().eraseUnionSetItem("ActorStateTeleport");
        }
        inline std::optional<Ent::Gen2::ActorStateTeleportToTarget> ActorStates::ActorStateTeleportToTarget()
        {
            return std::optional<Ent::Gen2::ActorStateTeleportToTarget>(getSubNode("ActorStateTeleportToTarget"));
        }
        inline Ent::Gen2::ActorStateTeleportToTarget ActorStates::addActorStateTeleportToTarget()
        {
            return Ent::Gen2::ActorStateTeleportToTarget(addSubNode("ActorStateTeleportToTarget"));
        }
        inline void ActorStates::removeActorStateTeleportToTarget()
        {
            getProperty().eraseUnionSetItem("ActorStateTeleportToTarget");
        }
        inline std::optional<Ent::Gen2::ActorStateTeleportWhileMoving> ActorStates::ActorStateTeleportWhileMoving()
        {
            return std::optional<Ent::Gen2::ActorStateTeleportWhileMoving>(getSubNode("ActorStateTeleportWhileMoving"));
        }
        inline Ent::Gen2::ActorStateTeleportWhileMoving ActorStates::addActorStateTeleportWhileMoving()
        {
            return Ent::Gen2::ActorStateTeleportWhileMoving(addSubNode("ActorStateTeleportWhileMoving"));
        }
        inline void ActorStates::removeActorStateTeleportWhileMoving()
        {
            getProperty().eraseUnionSetItem("ActorStateTeleportWhileMoving");
        }
        inline std::optional<Ent::Gen2::ActorStateTryEquipShamanStaff> ActorStates::ActorStateTryEquipShamanStaff()
        {
            return std::optional<Ent::Gen2::ActorStateTryEquipShamanStaff>(getSubNode("ActorStateTryEquipShamanStaff"));
        }
        inline Ent::Gen2::ActorStateTryEquipShamanStaff ActorStates::addActorStateTryEquipShamanStaff()
        {
            return Ent::Gen2::ActorStateTryEquipShamanStaff(addSubNode("ActorStateTryEquipShamanStaff"));
        }
        inline void ActorStates::removeActorStateTryEquipShamanStaff()
        {
            getProperty().eraseUnionSetItem("ActorStateTryEquipShamanStaff");
        }
        inline std::optional<Ent::Gen2::ActorStateTryUpgradeShamanStaff> ActorStates::ActorStateTryUpgradeShamanStaff()
        {
            return std::optional<Ent::Gen2::ActorStateTryUpgradeShamanStaff>(getSubNode("ActorStateTryUpgradeShamanStaff"));
        }
        inline Ent::Gen2::ActorStateTryUpgradeShamanStaff ActorStates::addActorStateTryUpgradeShamanStaff()
        {
            return Ent::Gen2::ActorStateTryUpgradeShamanStaff(addSubNode("ActorStateTryUpgradeShamanStaff"));
        }
        inline void ActorStates::removeActorStateTryUpgradeShamanStaff()
        {
            getProperty().eraseUnionSetItem("ActorStateTryUpgradeShamanStaff");
        }
        inline std::optional<Ent::Gen2::EntityStateAboutToBeHatched> ActorStates::EntityStateAboutToBeHatched()
        {
            return std::optional<Ent::Gen2::EntityStateAboutToBeHatched>(getSubNode("EntityStateAboutToBeHatched"));
        }
        inline Ent::Gen2::EntityStateAboutToBeHatched ActorStates::addEntityStateAboutToBeHatched()
        {
            return Ent::Gen2::EntityStateAboutToBeHatched(addSubNode("EntityStateAboutToBeHatched"));
        }
        inline void ActorStates::removeEntityStateAboutToBeHatched()
        {
            getProperty().eraseUnionSetItem("EntityStateAboutToBeHatched");
        }
        inline std::optional<Ent::Gen2::EntityStateAerialJump> ActorStates::EntityStateAerialJump()
        {
            return std::optional<Ent::Gen2::EntityStateAerialJump>(getSubNode("EntityStateAerialJump"));
        }
        inline Ent::Gen2::EntityStateAerialJump ActorStates::addEntityStateAerialJump()
        {
            return Ent::Gen2::EntityStateAerialJump(addSubNode("EntityStateAerialJump"));
        }
        inline void ActorStates::removeEntityStateAerialJump()
        {
            getProperty().eraseUnionSetItem("EntityStateAerialJump");
        }
        inline std::optional<Ent::Gen2::EntityStateAimAt> ActorStates::EntityStateAimAt()
        {
            return std::optional<Ent::Gen2::EntityStateAimAt>(getSubNode("EntityStateAimAt"));
        }
        inline Ent::Gen2::EntityStateAimAt ActorStates::addEntityStateAimAt()
        {
            return Ent::Gen2::EntityStateAimAt(addSubNode("EntityStateAimAt"));
        }
        inline void ActorStates::removeEntityStateAimAt()
        {
            getProperty().eraseUnionSetItem("EntityStateAimAt");
        }
        inline std::optional<Ent::Gen2::EntityStateAirControl> ActorStates::EntityStateAirControl()
        {
            return std::optional<Ent::Gen2::EntityStateAirControl>(getSubNode("EntityStateAirControl"));
        }
        inline Ent::Gen2::EntityStateAirControl ActorStates::addEntityStateAirControl()
        {
            return Ent::Gen2::EntityStateAirControl(addSubNode("EntityStateAirControl"));
        }
        inline void ActorStates::removeEntityStateAirControl()
        {
            getProperty().eraseUnionSetItem("EntityStateAirControl");
        }
        inline std::optional<Ent::Gen2::EntityStateApplyExtraLife> ActorStates::EntityStateApplyExtraLife()
        {
            return std::optional<Ent::Gen2::EntityStateApplyExtraLife>(getSubNode("EntityStateApplyExtraLife"));
        }
        inline Ent::Gen2::EntityStateApplyExtraLife ActorStates::addEntityStateApplyExtraLife()
        {
            return Ent::Gen2::EntityStateApplyExtraLife(addSubNode("EntityStateApplyExtraLife"));
        }
        inline void ActorStates::removeEntityStateApplyExtraLife()
        {
            getProperty().eraseUnionSetItem("EntityStateApplyExtraLife");
        }
        inline std::optional<Ent::Gen2::EntityStateAskStaffGuide> ActorStates::EntityStateAskStaffGuide()
        {
            return std::optional<Ent::Gen2::EntityStateAskStaffGuide>(getSubNode("EntityStateAskStaffGuide"));
        }
        inline Ent::Gen2::EntityStateAskStaffGuide ActorStates::addEntityStateAskStaffGuide()
        {
            return Ent::Gen2::EntityStateAskStaffGuide(addSubNode("EntityStateAskStaffGuide"));
        }
        inline void ActorStates::removeEntityStateAskStaffGuide()
        {
            getProperty().eraseUnionSetItem("EntityStateAskStaffGuide");
        }
        inline std::optional<Ent::Gen2::EntityStateAttackDive> ActorStates::EntityStateAttackDive()
        {
            return std::optional<Ent::Gen2::EntityStateAttackDive>(getSubNode("EntityStateAttackDive"));
        }
        inline Ent::Gen2::EntityStateAttackDive ActorStates::addEntityStateAttackDive()
        {
            return Ent::Gen2::EntityStateAttackDive(addSubNode("EntityStateAttackDive"));
        }
        inline void ActorStates::removeEntityStateAttackDive()
        {
            getProperty().eraseUnionSetItem("EntityStateAttackDive");
        }
        inline std::optional<Ent::Gen2::EntityStateAttitudeGroggy> ActorStates::EntityStateAttitudeGroggy()
        {
            return std::optional<Ent::Gen2::EntityStateAttitudeGroggy>(getSubNode("EntityStateAttitudeGroggy"));
        }
        inline Ent::Gen2::EntityStateAttitudeGroggy ActorStates::addEntityStateAttitudeGroggy()
        {
            return Ent::Gen2::EntityStateAttitudeGroggy(addSubNode("EntityStateAttitudeGroggy"));
        }
        inline void ActorStates::removeEntityStateAttitudeGroggy()
        {
            getProperty().eraseUnionSetItem("EntityStateAttitudeGroggy");
        }
        inline std::optional<Ent::Gen2::EntityStateBackwardDodge> ActorStates::EntityStateBackwardDodge()
        {
            return std::optional<Ent::Gen2::EntityStateBackwardDodge>(getSubNode("EntityStateBackwardDodge"));
        }
        inline Ent::Gen2::EntityStateBackwardDodge ActorStates::addEntityStateBackwardDodge()
        {
            return Ent::Gen2::EntityStateBackwardDodge(addSubNode("EntityStateBackwardDodge"));
        }
        inline void ActorStates::removeEntityStateBackwardDodge()
        {
            getProperty().eraseUnionSetItem("EntityStateBackwardDodge");
        }
        inline std::optional<Ent::Gen2::EntityStateBackwardLand> ActorStates::EntityStateBackwardLand()
        {
            return std::optional<Ent::Gen2::EntityStateBackwardLand>(getSubNode("EntityStateBackwardLand"));
        }
        inline Ent::Gen2::EntityStateBackwardLand ActorStates::addEntityStateBackwardLand()
        {
            return Ent::Gen2::EntityStateBackwardLand(addSubNode("EntityStateBackwardLand"));
        }
        inline void ActorStates::removeEntityStateBackwardLand()
        {
            getProperty().eraseUnionSetItem("EntityStateBackwardLand");
        }
        inline std::optional<Ent::Gen2::EntityStateBeingBlockedByVine> ActorStates::EntityStateBeingBlockedByVine()
        {
            return std::optional<Ent::Gen2::EntityStateBeingBlockedByVine>(getSubNode("EntityStateBeingBlockedByVine"));
        }
        inline Ent::Gen2::EntityStateBeingBlockedByVine ActorStates::addEntityStateBeingBlockedByVine()
        {
            return Ent::Gen2::EntityStateBeingBlockedByVine(addSubNode("EntityStateBeingBlockedByVine"));
        }
        inline void ActorStates::removeEntityStateBeingBlockedByVine()
        {
            getProperty().eraseUnionSetItem("EntityStateBeingBlockedByVine");
        }
        inline std::optional<Ent::Gen2::EntityStateBeingInReeds> ActorStates::EntityStateBeingInReeds()
        {
            return std::optional<Ent::Gen2::EntityStateBeingInReeds>(getSubNode("EntityStateBeingInReeds"));
        }
        inline Ent::Gen2::EntityStateBeingInReeds ActorStates::addEntityStateBeingInReeds()
        {
            return Ent::Gen2::EntityStateBeingInReeds(addSubNode("EntityStateBeingInReeds"));
        }
        inline void ActorStates::removeEntityStateBeingInReeds()
        {
            getProperty().eraseUnionSetItem("EntityStateBeingInReeds");
        }
        inline std::optional<Ent::Gen2::EntityStateBeingLinked> ActorStates::EntityStateBeingLinked()
        {
            return std::optional<Ent::Gen2::EntityStateBeingLinked>(getSubNode("EntityStateBeingLinked"));
        }
        inline Ent::Gen2::EntityStateBeingLinked ActorStates::addEntityStateBeingLinked()
        {
            return Ent::Gen2::EntityStateBeingLinked(addSubNode("EntityStateBeingLinked"));
        }
        inline void ActorStates::removeEntityStateBeingLinked()
        {
            getProperty().eraseUnionSetItem("EntityStateBeingLinked");
        }
        inline std::optional<Ent::Gen2::EntityStateBeingOnSlope> ActorStates::EntityStateBeingOnSlope()
        {
            return std::optional<Ent::Gen2::EntityStateBeingOnSlope>(getSubNode("EntityStateBeingOnSlope"));
        }
        inline Ent::Gen2::EntityStateBeingOnSlope ActorStates::addEntityStateBeingOnSlope()
        {
            return Ent::Gen2::EntityStateBeingOnSlope(addSubNode("EntityStateBeingOnSlope"));
        }
        inline void ActorStates::removeEntityStateBeingOnSlope()
        {
            getProperty().eraseUnionSetItem("EntityStateBeingOnSlope");
        }
        inline std::optional<Ent::Gen2::EntityStateBeingOnSpike> ActorStates::EntityStateBeingOnSpike()
        {
            return std::optional<Ent::Gen2::EntityStateBeingOnSpike>(getSubNode("EntityStateBeingOnSpike"));
        }
        inline Ent::Gen2::EntityStateBeingOnSpike ActorStates::addEntityStateBeingOnSpike()
        {
            return Ent::Gen2::EntityStateBeingOnSpike(addSubNode("EntityStateBeingOnSpike"));
        }
        inline void ActorStates::removeEntityStateBeingOnSpike()
        {
            getProperty().eraseUnionSetItem("EntityStateBeingOnSpike");
        }
        inline std::optional<Ent::Gen2::EntityStateBite> ActorStates::EntityStateBite()
        {
            return std::optional<Ent::Gen2::EntityStateBite>(getSubNode("EntityStateBite"));
        }
        inline Ent::Gen2::EntityStateBite ActorStates::addEntityStateBite()
        {
            return Ent::Gen2::EntityStateBite(addSubNode("EntityStateBite"));
        }
        inline void ActorStates::removeEntityStateBite()
        {
            getProperty().eraseUnionSetItem("EntityStateBite");
        }
        inline std::optional<Ent::Gen2::EntityStateBiteAttack> ActorStates::EntityStateBiteAttack()
        {
            return std::optional<Ent::Gen2::EntityStateBiteAttack>(getSubNode("EntityStateBiteAttack"));
        }
        inline Ent::Gen2::EntityStateBiteAttack ActorStates::addEntityStateBiteAttack()
        {
            return Ent::Gen2::EntityStateBiteAttack(addSubNode("EntityStateBiteAttack"));
        }
        inline void ActorStates::removeEntityStateBiteAttack()
        {
            getProperty().eraseUnionSetItem("EntityStateBiteAttack");
        }
        inline std::optional<Ent::Gen2::EntityStateBiteIn> ActorStates::EntityStateBiteIn()
        {
            return std::optional<Ent::Gen2::EntityStateBiteIn>(getSubNode("EntityStateBiteIn"));
        }
        inline Ent::Gen2::EntityStateBiteIn ActorStates::addEntityStateBiteIn()
        {
            return Ent::Gen2::EntityStateBiteIn(addSubNode("EntityStateBiteIn"));
        }
        inline void ActorStates::removeEntityStateBiteIn()
        {
            getProperty().eraseUnionSetItem("EntityStateBiteIn");
        }
        inline std::optional<Ent::Gen2::EntityStateBiteOut> ActorStates::EntityStateBiteOut()
        {
            return std::optional<Ent::Gen2::EntityStateBiteOut>(getSubNode("EntityStateBiteOut"));
        }
        inline Ent::Gen2::EntityStateBiteOut ActorStates::addEntityStateBiteOut()
        {
            return Ent::Gen2::EntityStateBiteOut(addSubNode("EntityStateBiteOut"));
        }
        inline void ActorStates::removeEntityStateBiteOut()
        {
            getProperty().eraseUnionSetItem("EntityStateBiteOut");
        }
        inline std::optional<Ent::Gen2::EntityStateBitten> ActorStates::EntityStateBitten()
        {
            return std::optional<Ent::Gen2::EntityStateBitten>(getSubNode("EntityStateBitten"));
        }
        inline Ent::Gen2::EntityStateBitten ActorStates::addEntityStateBitten()
        {
            return Ent::Gen2::EntityStateBitten(addSubNode("EntityStateBitten"));
        }
        inline void ActorStates::removeEntityStateBitten()
        {
            getProperty().eraseUnionSetItem("EntityStateBitten");
        }
        inline std::optional<Ent::Gen2::EntityStateBittenDefense> ActorStates::EntityStateBittenDefense()
        {
            return std::optional<Ent::Gen2::EntityStateBittenDefense>(getSubNode("EntityStateBittenDefense"));
        }
        inline Ent::Gen2::EntityStateBittenDefense ActorStates::addEntityStateBittenDefense()
        {
            return Ent::Gen2::EntityStateBittenDefense(addSubNode("EntityStateBittenDefense"));
        }
        inline void ActorStates::removeEntityStateBittenDefense()
        {
            getProperty().eraseUnionSetItem("EntityStateBittenDefense");
        }
        inline std::optional<Ent::Gen2::EntityStateBoidsHomePos> ActorStates::EntityStateBoidsHomePos()
        {
            return std::optional<Ent::Gen2::EntityStateBoidsHomePos>(getSubNode("EntityStateBoidsHomePos"));
        }
        inline Ent::Gen2::EntityStateBoidsHomePos ActorStates::addEntityStateBoidsHomePos()
        {
            return Ent::Gen2::EntityStateBoidsHomePos(addSubNode("EntityStateBoidsHomePos"));
        }
        inline void ActorStates::removeEntityStateBoidsHomePos()
        {
            getProperty().eraseUnionSetItem("EntityStateBoidsHomePos");
        }
        inline std::optional<Ent::Gen2::EntityStateBounce> ActorStates::EntityStateBounce()
        {
            return std::optional<Ent::Gen2::EntityStateBounce>(getSubNode("EntityStateBounce"));
        }
        inline Ent::Gen2::EntityStateBounce ActorStates::addEntityStateBounce()
        {
            return Ent::Gen2::EntityStateBounce(addSubNode("EntityStateBounce"));
        }
        inline void ActorStates::removeEntityStateBounce()
        {
            getProperty().eraseUnionSetItem("EntityStateBounce");
        }
        inline std::optional<Ent::Gen2::EntityStateBounceLand> ActorStates::EntityStateBounceLand()
        {
            return std::optional<Ent::Gen2::EntityStateBounceLand>(getSubNode("EntityStateBounceLand"));
        }
        inline Ent::Gen2::EntityStateBounceLand ActorStates::addEntityStateBounceLand()
        {
            return Ent::Gen2::EntityStateBounceLand(addSubNode("EntityStateBounceLand"));
        }
        inline void ActorStates::removeEntityStateBounceLand()
        {
            getProperty().eraseUnionSetItem("EntityStateBounceLand");
        }
        inline std::optional<Ent::Gen2::EntityStateBreakableBreaking> ActorStates::EntityStateBreakableBreaking()
        {
            return std::optional<Ent::Gen2::EntityStateBreakableBreaking>(getSubNode("EntityStateBreakableBreaking"));
        }
        inline Ent::Gen2::EntityStateBreakableBreaking ActorStates::addEntityStateBreakableBreaking()
        {
            return Ent::Gen2::EntityStateBreakableBreaking(addSubNode("EntityStateBreakableBreaking"));
        }
        inline void ActorStates::removeEntityStateBreakableBreaking()
        {
            getProperty().eraseUnionSetItem("EntityStateBreakableBreaking");
        }
        inline std::optional<Ent::Gen2::EntityStateBreakableBroken> ActorStates::EntityStateBreakableBroken()
        {
            return std::optional<Ent::Gen2::EntityStateBreakableBroken>(getSubNode("EntityStateBreakableBroken"));
        }
        inline Ent::Gen2::EntityStateBreakableBroken ActorStates::addEntityStateBreakableBroken()
        {
            return Ent::Gen2::EntityStateBreakableBroken(addSubNode("EntityStateBreakableBroken"));
        }
        inline void ActorStates::removeEntityStateBreakableBroken()
        {
            getProperty().eraseUnionSetItem("EntityStateBreakableBroken");
        }
        inline std::optional<Ent::Gen2::EntityStateBreakableEntire> ActorStates::EntityStateBreakableEntire()
        {
            return std::optional<Ent::Gen2::EntityStateBreakableEntire>(getSubNode("EntityStateBreakableEntire"));
        }
        inline Ent::Gen2::EntityStateBreakableEntire ActorStates::addEntityStateBreakableEntire()
        {
            return Ent::Gen2::EntityStateBreakableEntire(addSubNode("EntityStateBreakableEntire"));
        }
        inline void ActorStates::removeEntityStateBreakableEntire()
        {
            getProperty().eraseUnionSetItem("EntityStateBreakableEntire");
        }
        inline std::optional<Ent::Gen2::EntityStateBridgeAttached> ActorStates::EntityStateBridgeAttached()
        {
            return std::optional<Ent::Gen2::EntityStateBridgeAttached>(getSubNode("EntityStateBridgeAttached"));
        }
        inline Ent::Gen2::EntityStateBridgeAttached ActorStates::addEntityStateBridgeAttached()
        {
            return Ent::Gen2::EntityStateBridgeAttached(addSubNode("EntityStateBridgeAttached"));
        }
        inline void ActorStates::removeEntityStateBridgeAttached()
        {
            getProperty().eraseUnionSetItem("EntityStateBridgeAttached");
        }
        inline std::optional<Ent::Gen2::EntityStateBridgeAttracted> ActorStates::EntityStateBridgeAttracted()
        {
            return std::optional<Ent::Gen2::EntityStateBridgeAttracted>(getSubNode("EntityStateBridgeAttracted"));
        }
        inline Ent::Gen2::EntityStateBridgeAttracted ActorStates::addEntityStateBridgeAttracted()
        {
            return Ent::Gen2::EntityStateBridgeAttracted(addSubNode("EntityStateBridgeAttracted"));
        }
        inline void ActorStates::removeEntityStateBridgeAttracted()
        {
            getProperty().eraseUnionSetItem("EntityStateBridgeAttracted");
        }
        inline std::optional<Ent::Gen2::EntityStateBridgeBeingControlled> ActorStates::EntityStateBridgeBeingControlled()
        {
            return std::optional<Ent::Gen2::EntityStateBridgeBeingControlled>(getSubNode("EntityStateBridgeBeingControlled"));
        }
        inline Ent::Gen2::EntityStateBridgeBeingControlled ActorStates::addEntityStateBridgeBeingControlled()
        {
            return Ent::Gen2::EntityStateBridgeBeingControlled(addSubNode("EntityStateBridgeBeingControlled"));
        }
        inline void ActorStates::removeEntityStateBridgeBeingControlled()
        {
            getProperty().eraseUnionSetItem("EntityStateBridgeBeingControlled");
        }
        inline std::optional<Ent::Gen2::EntityStateCallAndMountSpiritAnimal> ActorStates::EntityStateCallAndMountSpiritAnimal()
        {
            return std::optional<Ent::Gen2::EntityStateCallAndMountSpiritAnimal>(getSubNode("EntityStateCallAndMountSpiritAnimal"));
        }
        inline Ent::Gen2::EntityStateCallAndMountSpiritAnimal ActorStates::addEntityStateCallAndMountSpiritAnimal()
        {
            return Ent::Gen2::EntityStateCallAndMountSpiritAnimal(addSubNode("EntityStateCallAndMountSpiritAnimal"));
        }
        inline void ActorStates::removeEntityStateCallAndMountSpiritAnimal()
        {
            getProperty().eraseUnionSetItem("EntityStateCallAndMountSpiritAnimal");
        }
        inline std::optional<Ent::Gen2::EntityStateCanNotBePerceived> ActorStates::EntityStateCanNotBePerceived()
        {
            return std::optional<Ent::Gen2::EntityStateCanNotBePerceived>(getSubNode("EntityStateCanNotBePerceived"));
        }
        inline Ent::Gen2::EntityStateCanNotBePerceived ActorStates::addEntityStateCanNotBePerceived()
        {
            return Ent::Gen2::EntityStateCanNotBePerceived(addSubNode("EntityStateCanNotBePerceived"));
        }
        inline void ActorStates::removeEntityStateCanNotBePerceived()
        {
            getProperty().eraseUnionSetItem("EntityStateCanNotBePerceived");
        }
        inline std::optional<Ent::Gen2::EntityStateChargeMode> ActorStates::EntityStateChargeMode()
        {
            return std::optional<Ent::Gen2::EntityStateChargeMode>(getSubNode("EntityStateChargeMode"));
        }
        inline Ent::Gen2::EntityStateChargeMode ActorStates::addEntityStateChargeMode()
        {
            return Ent::Gen2::EntityStateChargeMode(addSubNode("EntityStateChargeMode"));
        }
        inline void ActorStates::removeEntityStateChargeMode()
        {
            getProperty().eraseUnionSetItem("EntityStateChargeMode");
        }
        inline std::optional<Ent::Gen2::EntityStateChargedJump> ActorStates::EntityStateChargedJump()
        {
            return std::optional<Ent::Gen2::EntityStateChargedJump>(getSubNode("EntityStateChargedJump"));
        }
        inline Ent::Gen2::EntityStateChargedJump ActorStates::addEntityStateChargedJump()
        {
            return Ent::Gen2::EntityStateChargedJump(addSubNode("EntityStateChargedJump"));
        }
        inline void ActorStates::removeEntityStateChargedJump()
        {
            getProperty().eraseUnionSetItem("EntityStateChargedJump");
        }
        inline std::optional<Ent::Gen2::EntityStateChargingJump> ActorStates::EntityStateChargingJump()
        {
            return std::optional<Ent::Gen2::EntityStateChargingJump>(getSubNode("EntityStateChargingJump"));
        }
        inline Ent::Gen2::EntityStateChargingJump ActorStates::addEntityStateChargingJump()
        {
            return Ent::Gen2::EntityStateChargingJump(addSubNode("EntityStateChargingJump"));
        }
        inline void ActorStates::removeEntityStateChargingJump()
        {
            getProperty().eraseUnionSetItem("EntityStateChargingJump");
        }
        inline std::optional<Ent::Gen2::EntityStateCinematicCompleted> ActorStates::EntityStateCinematicCompleted()
        {
            return std::optional<Ent::Gen2::EntityStateCinematicCompleted>(getSubNode("EntityStateCinematicCompleted"));
        }
        inline Ent::Gen2::EntityStateCinematicCompleted ActorStates::addEntityStateCinematicCompleted()
        {
            return Ent::Gen2::EntityStateCinematicCompleted(addSubNode("EntityStateCinematicCompleted"));
        }
        inline void ActorStates::removeEntityStateCinematicCompleted()
        {
            getProperty().eraseUnionSetItem("EntityStateCinematicCompleted");
        }
        inline std::optional<Ent::Gen2::EntityStateCinematicReady> ActorStates::EntityStateCinematicReady()
        {
            return std::optional<Ent::Gen2::EntityStateCinematicReady>(getSubNode("EntityStateCinematicReady"));
        }
        inline Ent::Gen2::EntityStateCinematicReady ActorStates::addEntityStateCinematicReady()
        {
            return Ent::Gen2::EntityStateCinematicReady(addSubNode("EntityStateCinematicReady"));
        }
        inline void ActorStates::removeEntityStateCinematicReady()
        {
            getProperty().eraseUnionSetItem("EntityStateCinematicReady");
        }
        inline std::optional<Ent::Gen2::EntityStateClassicDodge> ActorStates::EntityStateClassicDodge()
        {
            return std::optional<Ent::Gen2::EntityStateClassicDodge>(getSubNode("EntityStateClassicDodge"));
        }
        inline Ent::Gen2::EntityStateClassicDodge ActorStates::addEntityStateClassicDodge()
        {
            return Ent::Gen2::EntityStateClassicDodge(addSubNode("EntityStateClassicDodge"));
        }
        inline void ActorStates::removeEntityStateClassicDodge()
        {
            getProperty().eraseUnionSetItem("EntityStateClassicDodge");
        }
        inline std::optional<Ent::Gen2::EntityStateClassicLand> ActorStates::EntityStateClassicLand()
        {
            return std::optional<Ent::Gen2::EntityStateClassicLand>(getSubNode("EntityStateClassicLand"));
        }
        inline Ent::Gen2::EntityStateClassicLand ActorStates::addEntityStateClassicLand()
        {
            return Ent::Gen2::EntityStateClassicLand(addSubNode("EntityStateClassicLand"));
        }
        inline void ActorStates::removeEntityStateClassicLand()
        {
            getProperty().eraseUnionSetItem("EntityStateClassicLand");
        }
        inline std::optional<Ent::Gen2::EntityStateClimbWaterfall> ActorStates::EntityStateClimbWaterfall()
        {
            return std::optional<Ent::Gen2::EntityStateClimbWaterfall>(getSubNode("EntityStateClimbWaterfall"));
        }
        inline Ent::Gen2::EntityStateClimbWaterfall ActorStates::addEntityStateClimbWaterfall()
        {
            return Ent::Gen2::EntityStateClimbWaterfall(addSubNode("EntityStateClimbWaterfall"));
        }
        inline void ActorStates::removeEntityStateClimbWaterfall()
        {
            getProperty().eraseUnionSetItem("EntityStateClimbWaterfall");
        }
        inline std::optional<Ent::Gen2::EntityStateClimbWaterfallImpulse> ActorStates::EntityStateClimbWaterfallImpulse()
        {
            return std::optional<Ent::Gen2::EntityStateClimbWaterfallImpulse>(getSubNode("EntityStateClimbWaterfallImpulse"));
        }
        inline Ent::Gen2::EntityStateClimbWaterfallImpulse ActorStates::addEntityStateClimbWaterfallImpulse()
        {
            return Ent::Gen2::EntityStateClimbWaterfallImpulse(addSubNode("EntityStateClimbWaterfallImpulse"));
        }
        inline void ActorStates::removeEntityStateClimbWaterfallImpulse()
        {
            getProperty().eraseUnionSetItem("EntityStateClimbWaterfallImpulse");
        }
        inline std::optional<Ent::Gen2::EntityStateCollectVertebrae> ActorStates::EntityStateCollectVertebrae()
        {
            return std::optional<Ent::Gen2::EntityStateCollectVertebrae>(getSubNode("EntityStateCollectVertebrae"));
        }
        inline Ent::Gen2::EntityStateCollectVertebrae ActorStates::addEntityStateCollectVertebrae()
        {
            return Ent::Gen2::EntityStateCollectVertebrae(addSubNode("EntityStateCollectVertebrae"));
        }
        inline void ActorStates::removeEntityStateCollectVertebrae()
        {
            getProperty().eraseUnionSetItem("EntityStateCollectVertebrae");
        }
        inline std::optional<Ent::Gen2::EntityStateCombat> ActorStates::EntityStateCombat()
        {
            return std::optional<Ent::Gen2::EntityStateCombat>(getSubNode("EntityStateCombat"));
        }
        inline Ent::Gen2::EntityStateCombat ActorStates::addEntityStateCombat()
        {
            return Ent::Gen2::EntityStateCombat(addSubNode("EntityStateCombat"));
        }
        inline void ActorStates::removeEntityStateCombat()
        {
            getProperty().eraseUnionSetItem("EntityStateCombat");
        }
        inline std::optional<Ent::Gen2::EntityStateConstrainedInput> ActorStates::EntityStateConstrainedInput()
        {
            return std::optional<Ent::Gen2::EntityStateConstrainedInput>(getSubNode("EntityStateConstrainedInput"));
        }
        inline Ent::Gen2::EntityStateConstrainedInput ActorStates::addEntityStateConstrainedInput()
        {
            return Ent::Gen2::EntityStateConstrainedInput(addSubNode("EntityStateConstrainedInput"));
        }
        inline void ActorStates::removeEntityStateConstrainedInput()
        {
            getProperty().eraseUnionSetItem("EntityStateConstrainedInput");
        }
        inline std::optional<Ent::Gen2::EntityStateConstrainedMove> ActorStates::EntityStateConstrainedMove()
        {
            return std::optional<Ent::Gen2::EntityStateConstrainedMove>(getSubNode("EntityStateConstrainedMove"));
        }
        inline Ent::Gen2::EntityStateConstrainedMove ActorStates::addEntityStateConstrainedMove()
        {
            return Ent::Gen2::EntityStateConstrainedMove(addSubNode("EntityStateConstrainedMove"));
        }
        inline void ActorStates::removeEntityStateConstrainedMove()
        {
            getProperty().eraseUnionSetItem("EntityStateConstrainedMove");
        }
        inline std::optional<Ent::Gen2::EntityStateControlGPE> ActorStates::EntityStateControlGPE()
        {
            return std::optional<Ent::Gen2::EntityStateControlGPE>(getSubNode("EntityStateControlGPE"));
        }
        inline Ent::Gen2::EntityStateControlGPE ActorStates::addEntityStateControlGPE()
        {
            return Ent::Gen2::EntityStateControlGPE(addSubNode("EntityStateControlGPE"));
        }
        inline void ActorStates::removeEntityStateControlGPE()
        {
            getProperty().eraseUnionSetItem("EntityStateControlGPE");
        }
        inline std::optional<Ent::Gen2::EntityStateCreatureHatching> ActorStates::EntityStateCreatureHatching()
        {
            return std::optional<Ent::Gen2::EntityStateCreatureHatching>(getSubNode("EntityStateCreatureHatching"));
        }
        inline Ent::Gen2::EntityStateCreatureHatching ActorStates::addEntityStateCreatureHatching()
        {
            return Ent::Gen2::EntityStateCreatureHatching(addSubNode("EntityStateCreatureHatching"));
        }
        inline void ActorStates::removeEntityStateCreatureHatching()
        {
            getProperty().eraseUnionSetItem("EntityStateCreatureHatching");
        }
        inline std::optional<Ent::Gen2::EntityStateCreatureProfile> ActorStates::EntityStateCreatureProfile()
        {
            return std::optional<Ent::Gen2::EntityStateCreatureProfile>(getSubNode("EntityStateCreatureProfile"));
        }
        inline Ent::Gen2::EntityStateCreatureProfile ActorStates::addEntityStateCreatureProfile()
        {
            return Ent::Gen2::EntityStateCreatureProfile(addSubNode("EntityStateCreatureProfile"));
        }
        inline void ActorStates::removeEntityStateCreatureProfile()
        {
            getProperty().eraseUnionSetItem("EntityStateCreatureProfile");
        }
        inline std::optional<Ent::Gen2::EntityStateDamageLand> ActorStates::EntityStateDamageLand()
        {
            return std::optional<Ent::Gen2::EntityStateDamageLand>(getSubNode("EntityStateDamageLand"));
        }
        inline Ent::Gen2::EntityStateDamageLand ActorStates::addEntityStateDamageLand()
        {
            return Ent::Gen2::EntityStateDamageLand(addSubNode("EntityStateDamageLand"));
        }
        inline void ActorStates::removeEntityStateDamageLand()
        {
            getProperty().eraseUnionSetItem("EntityStateDamageLand");
        }
        inline std::optional<Ent::Gen2::EntityStateDeathLand> ActorStates::EntityStateDeathLand()
        {
            return std::optional<Ent::Gen2::EntityStateDeathLand>(getSubNode("EntityStateDeathLand"));
        }
        inline Ent::Gen2::EntityStateDeathLand ActorStates::addEntityStateDeathLand()
        {
            return Ent::Gen2::EntityStateDeathLand(addSubNode("EntityStateDeathLand"));
        }
        inline void ActorStates::removeEntityStateDeathLand()
        {
            getProperty().eraseUnionSetItem("EntityStateDeathLand");
        }
        inline std::optional<Ent::Gen2::EntityStateDisablePerceptionRequest> ActorStates::EntityStateDisablePerceptionRequest()
        {
            return std::optional<Ent::Gen2::EntityStateDisablePerceptionRequest>(getSubNode("EntityStateDisablePerceptionRequest"));
        }
        inline Ent::Gen2::EntityStateDisablePerceptionRequest ActorStates::addEntityStateDisablePerceptionRequest()
        {
            return Ent::Gen2::EntityStateDisablePerceptionRequest(addSubNode("EntityStateDisablePerceptionRequest"));
        }
        inline void ActorStates::removeEntityStateDisablePerceptionRequest()
        {
            getProperty().eraseUnionSetItem("EntityStateDisablePerceptionRequest");
        }
        inline std::optional<Ent::Gen2::EntityStateDisabledVertebrae> ActorStates::EntityStateDisabledVertebrae()
        {
            return std::optional<Ent::Gen2::EntityStateDisabledVertebrae>(getSubNode("EntityStateDisabledVertebrae"));
        }
        inline Ent::Gen2::EntityStateDisabledVertebrae ActorStates::addEntityStateDisabledVertebrae()
        {
            return Ent::Gen2::EntityStateDisabledVertebrae(addSubNode("EntityStateDisabledVertebrae"));
        }
        inline void ActorStates::removeEntityStateDisabledVertebrae()
        {
            getProperty().eraseUnionSetItem("EntityStateDisabledVertebrae");
        }
        inline std::optional<Ent::Gen2::EntityStateDisguise> ActorStates::EntityStateDisguise()
        {
            return std::optional<Ent::Gen2::EntityStateDisguise>(getSubNode("EntityStateDisguise"));
        }
        inline Ent::Gen2::EntityStateDisguise ActorStates::addEntityStateDisguise()
        {
            return Ent::Gen2::EntityStateDisguise(addSubNode("EntityStateDisguise"));
        }
        inline void ActorStates::removeEntityStateDisguise()
        {
            getProperty().eraseUnionSetItem("EntityStateDisguise");
        }
        inline std::optional<Ent::Gen2::EntityStateDisplayHatchingCost> ActorStates::EntityStateDisplayHatchingCost()
        {
            return std::optional<Ent::Gen2::EntityStateDisplayHatchingCost>(getSubNode("EntityStateDisplayHatchingCost"));
        }
        inline Ent::Gen2::EntityStateDisplayHatchingCost ActorStates::addEntityStateDisplayHatchingCost()
        {
            return Ent::Gen2::EntityStateDisplayHatchingCost(addSubNode("EntityStateDisplayHatchingCost"));
        }
        inline void ActorStates::removeEntityStateDisplayHatchingCost()
        {
            getProperty().eraseUnionSetItem("EntityStateDisplayHatchingCost");
        }
        inline std::optional<Ent::Gen2::EntityStateDodgeCooldown> ActorStates::EntityStateDodgeCooldown()
        {
            return std::optional<Ent::Gen2::EntityStateDodgeCooldown>(getSubNode("EntityStateDodgeCooldown"));
        }
        inline Ent::Gen2::EntityStateDodgeCooldown ActorStates::addEntityStateDodgeCooldown()
        {
            return Ent::Gen2::EntityStateDodgeCooldown(addSubNode("EntityStateDodgeCooldown"));
        }
        inline void ActorStates::removeEntityStateDodgeCooldown()
        {
            getProperty().eraseUnionSetItem("EntityStateDodgeCooldown");
        }
        inline std::optional<Ent::Gen2::EntityStateEjectedLand> ActorStates::EntityStateEjectedLand()
        {
            return std::optional<Ent::Gen2::EntityStateEjectedLand>(getSubNode("EntityStateEjectedLand"));
        }
        inline Ent::Gen2::EntityStateEjectedLand ActorStates::addEntityStateEjectedLand()
        {
            return Ent::Gen2::EntityStateEjectedLand(addSubNode("EntityStateEjectedLand"));
        }
        inline void ActorStates::removeEntityStateEjectedLand()
        {
            getProperty().eraseUnionSetItem("EntityStateEjectedLand");
        }
        inline std::optional<Ent::Gen2::EntityStateEnergyRootAbortHatching> ActorStates::EntityStateEnergyRootAbortHatching()
        {
            return std::optional<Ent::Gen2::EntityStateEnergyRootAbortHatching>(getSubNode("EntityStateEnergyRootAbortHatching"));
        }
        inline Ent::Gen2::EntityStateEnergyRootAbortHatching ActorStates::addEntityStateEnergyRootAbortHatching()
        {
            return Ent::Gen2::EntityStateEnergyRootAbortHatching(addSubNode("EntityStateEnergyRootAbortHatching"));
        }
        inline void ActorStates::removeEntityStateEnergyRootAbortHatching()
        {
            getProperty().eraseUnionSetItem("EntityStateEnergyRootAbortHatching");
        }
        inline std::optional<Ent::Gen2::EntityStateEnergyRootHatching> ActorStates::EntityStateEnergyRootHatching()
        {
            return std::optional<Ent::Gen2::EntityStateEnergyRootHatching>(getSubNode("EntityStateEnergyRootHatching"));
        }
        inline Ent::Gen2::EntityStateEnergyRootHatching ActorStates::addEntityStateEnergyRootHatching()
        {
            return Ent::Gen2::EntityStateEnergyRootHatching(addSubNode("EntityStateEnergyRootHatching"));
        }
        inline void ActorStates::removeEntityStateEnergyRootHatching()
        {
            getProperty().eraseUnionSetItem("EntityStateEnergyRootHatching");
        }
        inline std::optional<Ent::Gen2::EntityStateEnergySide> ActorStates::EntityStateEnergySide()
        {
            return std::optional<Ent::Gen2::EntityStateEnergySide>(getSubNode("EntityStateEnergySide"));
        }
        inline Ent::Gen2::EntityStateEnergySide ActorStates::addEntityStateEnergySide()
        {
            return Ent::Gen2::EntityStateEnergySide(addSubNode("EntityStateEnergySide"));
        }
        inline void ActorStates::removeEntityStateEnergySide()
        {
            getProperty().eraseUnionSetItem("EntityStateEnergySide");
        }
        inline std::optional<Ent::Gen2::EntityStateEnergySpoutState> ActorStates::EntityStateEnergySpoutState()
        {
            return std::optional<Ent::Gen2::EntityStateEnergySpoutState>(getSubNode("EntityStateEnergySpoutState"));
        }
        inline Ent::Gen2::EntityStateEnergySpoutState ActorStates::addEntityStateEnergySpoutState()
        {
            return Ent::Gen2::EntityStateEnergySpoutState(addSubNode("EntityStateEnergySpoutState"));
        }
        inline void ActorStates::removeEntityStateEnergySpoutState()
        {
            getProperty().eraseUnionSetItem("EntityStateEnergySpoutState");
        }
        inline std::optional<Ent::Gen2::EntityStateExtraLife> ActorStates::EntityStateExtraLife()
        {
            return std::optional<Ent::Gen2::EntityStateExtraLife>(getSubNode("EntityStateExtraLife"));
        }
        inline Ent::Gen2::EntityStateExtraLife ActorStates::addEntityStateExtraLife()
        {
            return Ent::Gen2::EntityStateExtraLife(addSubNode("EntityStateExtraLife"));
        }
        inline void ActorStates::removeEntityStateExtraLife()
        {
            getProperty().eraseUnionSetItem("EntityStateExtraLife");
        }
        inline std::optional<Ent::Gen2::EntityStateFailingOrder> ActorStates::EntityStateFailingOrder()
        {
            return std::optional<Ent::Gen2::EntityStateFailingOrder>(getSubNode("EntityStateFailingOrder"));
        }
        inline Ent::Gen2::EntityStateFailingOrder ActorStates::addEntityStateFailingOrder()
        {
            return Ent::Gen2::EntityStateFailingOrder(addSubNode("EntityStateFailingOrder"));
        }
        inline void ActorStates::removeEntityStateFailingOrder()
        {
            getProperty().eraseUnionSetItem("EntityStateFailingOrder");
        }
        inline std::optional<Ent::Gen2::EntityStateFall> ActorStates::EntityStateFall()
        {
            return std::optional<Ent::Gen2::EntityStateFall>(getSubNode("EntityStateFall"));
        }
        inline Ent::Gen2::EntityStateFall ActorStates::addEntityStateFall()
        {
            return Ent::Gen2::EntityStateFall(addSubNode("EntityStateFall"));
        }
        inline void ActorStates::removeEntityStateFall()
        {
            getProperty().eraseUnionSetItem("EntityStateFall");
        }
        inline std::optional<Ent::Gen2::EntityStateFallDying> ActorStates::EntityStateFallDying()
        {
            return std::optional<Ent::Gen2::EntityStateFallDying>(getSubNode("EntityStateFallDying"));
        }
        inline Ent::Gen2::EntityStateFallDying ActorStates::addEntityStateFallDying()
        {
            return Ent::Gen2::EntityStateFallDying(addSubNode("EntityStateFallDying"));
        }
        inline void ActorStates::removeEntityStateFallDying()
        {
            getProperty().eraseUnionSetItem("EntityStateFallDying");
        }
        inline std::optional<Ent::Gen2::EntityStateFallInjured> ActorStates::EntityStateFallInjured()
        {
            return std::optional<Ent::Gen2::EntityStateFallInjured>(getSubNode("EntityStateFallInjured"));
        }
        inline Ent::Gen2::EntityStateFallInjured ActorStates::addEntityStateFallInjured()
        {
            return Ent::Gen2::EntityStateFallInjured(addSubNode("EntityStateFallInjured"));
        }
        inline void ActorStates::removeEntityStateFallInjured()
        {
            getProperty().eraseUnionSetItem("EntityStateFallInjured");
        }
        inline std::optional<Ent::Gen2::EntityStateFallSafe> ActorStates::EntityStateFallSafe()
        {
            return std::optional<Ent::Gen2::EntityStateFallSafe>(getSubNode("EntityStateFallSafe"));
        }
        inline Ent::Gen2::EntityStateFallSafe ActorStates::addEntityStateFallSafe()
        {
            return Ent::Gen2::EntityStateFallSafe(addSubNode("EntityStateFallSafe"));
        }
        inline void ActorStates::removeEntityStateFallSafe()
        {
            getProperty().eraseUnionSetItem("EntityStateFallSafe");
        }
        inline std::optional<Ent::Gen2::EntityStateFastRun> ActorStates::EntityStateFastRun()
        {
            return std::optional<Ent::Gen2::EntityStateFastRun>(getSubNode("EntityStateFastRun"));
        }
        inline Ent::Gen2::EntityStateFastRun ActorStates::addEntityStateFastRun()
        {
            return Ent::Gen2::EntityStateFastRun(addSubNode("EntityStateFastRun"));
        }
        inline void ActorStates::removeEntityStateFastRun()
        {
            getProperty().eraseUnionSetItem("EntityStateFastRun");
        }
        inline std::optional<Ent::Gen2::EntityStateForceCanBeTargeted> ActorStates::EntityStateForceCanBeTargeted()
        {
            return std::optional<Ent::Gen2::EntityStateForceCanBeTargeted>(getSubNode("EntityStateForceCanBeTargeted"));
        }
        inline Ent::Gen2::EntityStateForceCanBeTargeted ActorStates::addEntityStateForceCanBeTargeted()
        {
            return Ent::Gen2::EntityStateForceCanBeTargeted(addSubNode("EntityStateForceCanBeTargeted"));
        }
        inline void ActorStates::removeEntityStateForceCanBeTargeted()
        {
            getProperty().eraseUnionSetItem("EntityStateForceCanBeTargeted");
        }
        inline std::optional<Ent::Gen2::EntityStateGrab> ActorStates::EntityStateGrab()
        {
            return std::optional<Ent::Gen2::EntityStateGrab>(getSubNode("EntityStateGrab"));
        }
        inline Ent::Gen2::EntityStateGrab ActorStates::addEntityStateGrab()
        {
            return Ent::Gen2::EntityStateGrab(addSubNode("EntityStateGrab"));
        }
        inline void ActorStates::removeEntityStateGrab()
        {
            getProperty().eraseUnionSetItem("EntityStateGrab");
        }
        inline std::optional<Ent::Gen2::EntityStateGrabAttack> ActorStates::EntityStateGrabAttack()
        {
            return std::optional<Ent::Gen2::EntityStateGrabAttack>(getSubNode("EntityStateGrabAttack"));
        }
        inline Ent::Gen2::EntityStateGrabAttack ActorStates::addEntityStateGrabAttack()
        {
            return Ent::Gen2::EntityStateGrabAttack(addSubNode("EntityStateGrabAttack"));
        }
        inline void ActorStates::removeEntityStateGrabAttack()
        {
            getProperty().eraseUnionSetItem("EntityStateGrabAttack");
        }
        inline std::optional<Ent::Gen2::EntityStateGrabIn> ActorStates::EntityStateGrabIn()
        {
            return std::optional<Ent::Gen2::EntityStateGrabIn>(getSubNode("EntityStateGrabIn"));
        }
        inline Ent::Gen2::EntityStateGrabIn ActorStates::addEntityStateGrabIn()
        {
            return Ent::Gen2::EntityStateGrabIn(addSubNode("EntityStateGrabIn"));
        }
        inline void ActorStates::removeEntityStateGrabIn()
        {
            getProperty().eraseUnionSetItem("EntityStateGrabIn");
        }
        inline std::optional<Ent::Gen2::EntityStateGrabOut> ActorStates::EntityStateGrabOut()
        {
            return std::optional<Ent::Gen2::EntityStateGrabOut>(getSubNode("EntityStateGrabOut"));
        }
        inline Ent::Gen2::EntityStateGrabOut ActorStates::addEntityStateGrabOut()
        {
            return Ent::Gen2::EntityStateGrabOut(addSubNode("EntityStateGrabOut"));
        }
        inline void ActorStates::removeEntityStateGrabOut()
        {
            getProperty().eraseUnionSetItem("EntityStateGrabOut");
        }
        inline std::optional<Ent::Gen2::EntityStateGrabbed> ActorStates::EntityStateGrabbed()
        {
            return std::optional<Ent::Gen2::EntityStateGrabbed>(getSubNode("EntityStateGrabbed"));
        }
        inline Ent::Gen2::EntityStateGrabbed ActorStates::addEntityStateGrabbed()
        {
            return Ent::Gen2::EntityStateGrabbed(addSubNode("EntityStateGrabbed"));
        }
        inline void ActorStates::removeEntityStateGrabbed()
        {
            getProperty().eraseUnionSetItem("EntityStateGrabbed");
        }
        inline std::optional<Ent::Gen2::EntityStateGrabbedIn> ActorStates::EntityStateGrabbedIn()
        {
            return std::optional<Ent::Gen2::EntityStateGrabbedIn>(getSubNode("EntityStateGrabbedIn"));
        }
        inline Ent::Gen2::EntityStateGrabbedIn ActorStates::addEntityStateGrabbedIn()
        {
            return Ent::Gen2::EntityStateGrabbedIn(addSubNode("EntityStateGrabbedIn"));
        }
        inline void ActorStates::removeEntityStateGrabbedIn()
        {
            getProperty().eraseUnionSetItem("EntityStateGrabbedIn");
        }
        inline std::optional<Ent::Gen2::EntityStateGrabbedOut> ActorStates::EntityStateGrabbedOut()
        {
            return std::optional<Ent::Gen2::EntityStateGrabbedOut>(getSubNode("EntityStateGrabbedOut"));
        }
        inline Ent::Gen2::EntityStateGrabbedOut ActorStates::addEntityStateGrabbedOut()
        {
            return Ent::Gen2::EntityStateGrabbedOut(addSubNode("EntityStateGrabbedOut"));
        }
        inline void ActorStates::removeEntityStateGrabbedOut()
        {
            getProperty().eraseUnionSetItem("EntityStateGrabbedOut");
        }
        inline std::optional<Ent::Gen2::EntityStateGrasp> ActorStates::EntityStateGrasp()
        {
            return std::optional<Ent::Gen2::EntityStateGrasp>(getSubNode("EntityStateGrasp"));
        }
        inline Ent::Gen2::EntityStateGrasp ActorStates::addEntityStateGrasp()
        {
            return Ent::Gen2::EntityStateGrasp(addSubNode("EntityStateGrasp"));
        }
        inline void ActorStates::removeEntityStateGrasp()
        {
            getProperty().eraseUnionSetItem("EntityStateGrasp");
        }
        inline std::optional<Ent::Gen2::EntityStateGroundedJump> ActorStates::EntityStateGroundedJump()
        {
            return std::optional<Ent::Gen2::EntityStateGroundedJump>(getSubNode("EntityStateGroundedJump"));
        }
        inline Ent::Gen2::EntityStateGroundedJump ActorStates::addEntityStateGroundedJump()
        {
            return Ent::Gen2::EntityStateGroundedJump(addSubNode("EntityStateGroundedJump"));
        }
        inline void ActorStates::removeEntityStateGroundedJump()
        {
            getProperty().eraseUnionSetItem("EntityStateGroundedJump");
        }
        inline std::optional<Ent::Gen2::EntityStateHide> ActorStates::EntityStateHide()
        {
            return std::optional<Ent::Gen2::EntityStateHide>(getSubNode("EntityStateHide"));
        }
        inline Ent::Gen2::EntityStateHide ActorStates::addEntityStateHide()
        {
            return Ent::Gen2::EntityStateHide(addSubNode("EntityStateHide"));
        }
        inline void ActorStates::removeEntityStateHide()
        {
            getProperty().eraseUnionSetItem("EntityStateHide");
        }
        inline std::optional<Ent::Gen2::EntityStateHideIn> ActorStates::EntityStateHideIn()
        {
            return std::optional<Ent::Gen2::EntityStateHideIn>(getSubNode("EntityStateHideIn"));
        }
        inline Ent::Gen2::EntityStateHideIn ActorStates::addEntityStateHideIn()
        {
            return Ent::Gen2::EntityStateHideIn(addSubNode("EntityStateHideIn"));
        }
        inline void ActorStates::removeEntityStateHideIn()
        {
            getProperty().eraseUnionSetItem("EntityStateHideIn");
        }
        inline std::optional<Ent::Gen2::EntityStateHideOut> ActorStates::EntityStateHideOut()
        {
            return std::optional<Ent::Gen2::EntityStateHideOut>(getSubNode("EntityStateHideOut"));
        }
        inline Ent::Gen2::EntityStateHideOut ActorStates::addEntityStateHideOut()
        {
            return Ent::Gen2::EntityStateHideOut(addSubNode("EntityStateHideOut"));
        }
        inline void ActorStates::removeEntityStateHideOut()
        {
            getProperty().eraseUnionSetItem("EntityStateHideOut");
        }
        inline std::optional<Ent::Gen2::EntityStateHintFull> ActorStates::EntityStateHintFull()
        {
            return std::optional<Ent::Gen2::EntityStateHintFull>(getSubNode("EntityStateHintFull"));
        }
        inline Ent::Gen2::EntityStateHintFull ActorStates::addEntityStateHintFull()
        {
            return Ent::Gen2::EntityStateHintFull(addSubNode("EntityStateHintFull"));
        }
        inline void ActorStates::removeEntityStateHintFull()
        {
            getProperty().eraseUnionSetItem("EntityStateHintFull");
        }
        inline std::optional<Ent::Gen2::EntityStateHintLight> ActorStates::EntityStateHintLight()
        {
            return std::optional<Ent::Gen2::EntityStateHintLight>(getSubNode("EntityStateHintLight"));
        }
        inline Ent::Gen2::EntityStateHintLight ActorStates::addEntityStateHintLight()
        {
            return Ent::Gen2::EntityStateHintLight(addSubNode("EntityStateHintLight"));
        }
        inline void ActorStates::removeEntityStateHintLight()
        {
            getProperty().eraseUnionSetItem("EntityStateHintLight");
        }
        inline std::optional<Ent::Gen2::EntityStateHintNone> ActorStates::EntityStateHintNone()
        {
            return std::optional<Ent::Gen2::EntityStateHintNone>(getSubNode("EntityStateHintNone"));
        }
        inline Ent::Gen2::EntityStateHintNone ActorStates::addEntityStateHintNone()
        {
            return Ent::Gen2::EntityStateHintNone(addSubNode("EntityStateHintNone"));
        }
        inline void ActorStates::removeEntityStateHintNone()
        {
            getProperty().eraseUnionSetItem("EntityStateHintNone");
        }
        inline std::optional<Ent::Gen2::EntityStateHitWall> ActorStates::EntityStateHitWall()
        {
            return std::optional<Ent::Gen2::EntityStateHitWall>(getSubNode("EntityStateHitWall"));
        }
        inline Ent::Gen2::EntityStateHitWall ActorStates::addEntityStateHitWall()
        {
            return Ent::Gen2::EntityStateHitWall(addSubNode("EntityStateHitWall"));
        }
        inline void ActorStates::removeEntityStateHitWall()
        {
            getProperty().eraseUnionSetItem("EntityStateHitWall");
        }
        inline std::optional<Ent::Gen2::EntityStateHoldingStaffVertebras> ActorStates::EntityStateHoldingStaffVertebras()
        {
            return std::optional<Ent::Gen2::EntityStateHoldingStaffVertebras>(getSubNode("EntityStateHoldingStaffVertebras"));
        }
        inline Ent::Gen2::EntityStateHoldingStaffVertebras ActorStates::addEntityStateHoldingStaffVertebras()
        {
            return Ent::Gen2::EntityStateHoldingStaffVertebras(addSubNode("EntityStateHoldingStaffVertebras"));
        }
        inline void ActorStates::removeEntityStateHoldingStaffVertebras()
        {
            getProperty().eraseUnionSetItem("EntityStateHoldingStaffVertebras");
        }
        inline std::optional<Ent::Gen2::EntityStateImmersedJump> ActorStates::EntityStateImmersedJump()
        {
            return std::optional<Ent::Gen2::EntityStateImmersedJump>(getSubNode("EntityStateImmersedJump"));
        }
        inline Ent::Gen2::EntityStateImmersedJump ActorStates::addEntityStateImmersedJump()
        {
            return Ent::Gen2::EntityStateImmersedJump(addSubNode("EntityStateImmersedJump"));
        }
        inline void ActorStates::removeEntityStateImmersedJump()
        {
            getProperty().eraseUnionSetItem("EntityStateImmersedJump");
        }
        inline std::optional<Ent::Gen2::EntityStateInVertebraeArea> ActorStates::EntityStateInVertebraeArea()
        {
            return std::optional<Ent::Gen2::EntityStateInVertebraeArea>(getSubNode("EntityStateInVertebraeArea"));
        }
        inline Ent::Gen2::EntityStateInVertebraeArea ActorStates::addEntityStateInVertebraeArea()
        {
            return Ent::Gen2::EntityStateInVertebraeArea(addSubNode("EntityStateInVertebraeArea"));
        }
        inline void ActorStates::removeEntityStateInVertebraeArea()
        {
            getProperty().eraseUnionSetItem("EntityStateInVertebraeArea");
        }
        inline std::optional<Ent::Gen2::EntityStateIncapacitated> ActorStates::EntityStateIncapacitated()
        {
            return std::optional<Ent::Gen2::EntityStateIncapacitated>(getSubNode("EntityStateIncapacitated"));
        }
        inline Ent::Gen2::EntityStateIncapacitated ActorStates::addEntityStateIncapacitated()
        {
            return Ent::Gen2::EntityStateIncapacitated(addSubNode("EntityStateIncapacitated"));
        }
        inline void ActorStates::removeEntityStateIncapacitated()
        {
            getProperty().eraseUnionSetItem("EntityStateIncapacitated");
        }
        inline std::optional<Ent::Gen2::EntityStateInconvertible> ActorStates::EntityStateInconvertible()
        {
            return std::optional<Ent::Gen2::EntityStateInconvertible>(getSubNode("EntityStateInconvertible"));
        }
        inline Ent::Gen2::EntityStateInconvertible ActorStates::addEntityStateInconvertible()
        {
            return Ent::Gen2::EntityStateInconvertible(addSubNode("EntityStateInconvertible"));
        }
        inline void ActorStates::removeEntityStateInconvertible()
        {
            getProperty().eraseUnionSetItem("EntityStateInconvertible");
        }
        inline std::optional<Ent::Gen2::EntityStateInjured> ActorStates::EntityStateInjured()
        {
            return std::optional<Ent::Gen2::EntityStateInjured>(getSubNode("EntityStateInjured"));
        }
        inline Ent::Gen2::EntityStateInjured ActorStates::addEntityStateInjured()
        {
            return Ent::Gen2::EntityStateInjured(addSubNode("EntityStateInjured"));
        }
        inline void ActorStates::removeEntityStateInjured()
        {
            getProperty().eraseUnionSetItem("EntityStateInjured");
        }
        inline std::optional<Ent::Gen2::EntityStateInteractedGPE> ActorStates::EntityStateInteractedGPE()
        {
            return std::optional<Ent::Gen2::EntityStateInteractedGPE>(getSubNode("EntityStateInteractedGPE"));
        }
        inline Ent::Gen2::EntityStateInteractedGPE ActorStates::addEntityStateInteractedGPE()
        {
            return Ent::Gen2::EntityStateInteractedGPE(addSubNode("EntityStateInteractedGPE"));
        }
        inline void ActorStates::removeEntityStateInteractedGPE()
        {
            getProperty().eraseUnionSetItem("EntityStateInteractedGPE");
        }
        inline std::optional<Ent::Gen2::EntityStateJumpHeightMultiplier> ActorStates::EntityStateJumpHeightMultiplier()
        {
            return std::optional<Ent::Gen2::EntityStateJumpHeightMultiplier>(getSubNode("EntityStateJumpHeightMultiplier"));
        }
        inline Ent::Gen2::EntityStateJumpHeightMultiplier ActorStates::addEntityStateJumpHeightMultiplier()
        {
            return Ent::Gen2::EntityStateJumpHeightMultiplier(addSubNode("EntityStateJumpHeightMultiplier"));
        }
        inline void ActorStates::removeEntityStateJumpHeightMultiplier()
        {
            getProperty().eraseUnionSetItem("EntityStateJumpHeightMultiplier");
        }
        inline std::optional<Ent::Gen2::EntityStateJustStarted> ActorStates::EntityStateJustStarted()
        {
            return std::optional<Ent::Gen2::EntityStateJustStarted>(getSubNode("EntityStateJustStarted"));
        }
        inline Ent::Gen2::EntityStateJustStarted ActorStates::addEntityStateJustStarted()
        {
            return Ent::Gen2::EntityStateJustStarted(addSubNode("EntityStateJustStarted"));
        }
        inline void ActorStates::removeEntityStateJustStarted()
        {
            getProperty().eraseUnionSetItem("EntityStateJustStarted");
        }
        inline std::optional<Ent::Gen2::EntityStateLateralDodge> ActorStates::EntityStateLateralDodge()
        {
            return std::optional<Ent::Gen2::EntityStateLateralDodge>(getSubNode("EntityStateLateralDodge"));
        }
        inline Ent::Gen2::EntityStateLateralDodge ActorStates::addEntityStateLateralDodge()
        {
            return Ent::Gen2::EntityStateLateralDodge(addSubNode("EntityStateLateralDodge"));
        }
        inline void ActorStates::removeEntityStateLateralDodge()
        {
            getProperty().eraseUnionSetItem("EntityStateLateralDodge");
        }
        inline std::optional<Ent::Gen2::EntityStateLateralLand> ActorStates::EntityStateLateralLand()
        {
            return std::optional<Ent::Gen2::EntityStateLateralLand>(getSubNode("EntityStateLateralLand"));
        }
        inline Ent::Gen2::EntityStateLateralLand ActorStates::addEntityStateLateralLand()
        {
            return Ent::Gen2::EntityStateLateralLand(addSubNode("EntityStateLateralLand"));
        }
        inline void ActorStates::removeEntityStateLateralLand()
        {
            getProperty().eraseUnionSetItem("EntityStateLateralLand");
        }
        inline std::optional<Ent::Gen2::EntityStateManageChildEntityPool> ActorStates::EntityStateManageChildEntityPool()
        {
            return std::optional<Ent::Gen2::EntityStateManageChildEntityPool>(getSubNode("EntityStateManageChildEntityPool"));
        }
        inline Ent::Gen2::EntityStateManageChildEntityPool ActorStates::addEntityStateManageChildEntityPool()
        {
            return Ent::Gen2::EntityStateManageChildEntityPool(addSubNode("EntityStateManageChildEntityPool"));
        }
        inline void ActorStates::removeEntityStateManageChildEntityPool()
        {
            getProperty().eraseUnionSetItem("EntityStateManageChildEntityPool");
        }
        inline std::optional<Ent::Gen2::EntityStateMask> ActorStates::EntityStateMask()
        {
            return std::optional<Ent::Gen2::EntityStateMask>(getSubNode("EntityStateMask"));
        }
        inline Ent::Gen2::EntityStateMask ActorStates::addEntityStateMask()
        {
            return Ent::Gen2::EntityStateMask(addSubNode("EntityStateMask"));
        }
        inline void ActorStates::removeEntityStateMask()
        {
            getProperty().eraseUnionSetItem("EntityStateMask");
        }
        inline std::optional<Ent::Gen2::EntityStateMeditateToInteract> ActorStates::EntityStateMeditateToInteract()
        {
            return std::optional<Ent::Gen2::EntityStateMeditateToInteract>(getSubNode("EntityStateMeditateToInteract"));
        }
        inline Ent::Gen2::EntityStateMeditateToInteract ActorStates::addEntityStateMeditateToInteract()
        {
            return Ent::Gen2::EntityStateMeditateToInteract(addSubNode("EntityStateMeditateToInteract"));
        }
        inline void ActorStates::removeEntityStateMeditateToInteract()
        {
            getProperty().eraseUnionSetItem("EntityStateMeditateToInteract");
        }
        inline std::optional<Ent::Gen2::EntityStateMineRespawning> ActorStates::EntityStateMineRespawning()
        {
            return std::optional<Ent::Gen2::EntityStateMineRespawning>(getSubNode("EntityStateMineRespawning"));
        }
        inline Ent::Gen2::EntityStateMineRespawning ActorStates::addEntityStateMineRespawning()
        {
            return Ent::Gen2::EntityStateMineRespawning(addSubNode("EntityStateMineRespawning"));
        }
        inline void ActorStates::removeEntityStateMineRespawning()
        {
            getProperty().eraseUnionSetItem("EntityStateMineRespawning");
        }
        inline std::optional<Ent::Gen2::EntityStateMineScaling> ActorStates::EntityStateMineScaling()
        {
            return std::optional<Ent::Gen2::EntityStateMineScaling>(getSubNode("EntityStateMineScaling"));
        }
        inline Ent::Gen2::EntityStateMineScaling ActorStates::addEntityStateMineScaling()
        {
            return Ent::Gen2::EntityStateMineScaling(addSubNode("EntityStateMineScaling"));
        }
        inline void ActorStates::removeEntityStateMineScaling()
        {
            getProperty().eraseUnionSetItem("EntityStateMineScaling");
        }
        inline std::optional<Ent::Gen2::EntityStateMotionConstrained> ActorStates::EntityStateMotionConstrained()
        {
            return std::optional<Ent::Gen2::EntityStateMotionConstrained>(getSubNode("EntityStateMotionConstrained"));
        }
        inline Ent::Gen2::EntityStateMotionConstrained ActorStates::addEntityStateMotionConstrained()
        {
            return Ent::Gen2::EntityStateMotionConstrained(addSubNode("EntityStateMotionConstrained"));
        }
        inline void ActorStates::removeEntityStateMotionConstrained()
        {
            getProperty().eraseUnionSetItem("EntityStateMotionConstrained");
        }
        inline std::optional<Ent::Gen2::EntityStateMotionConstrainedLand> ActorStates::EntityStateMotionConstrainedLand()
        {
            return std::optional<Ent::Gen2::EntityStateMotionConstrainedLand>(getSubNode("EntityStateMotionConstrainedLand"));
        }
        inline Ent::Gen2::EntityStateMotionConstrainedLand ActorStates::addEntityStateMotionConstrainedLand()
        {
            return Ent::Gen2::EntityStateMotionConstrainedLand(addSubNode("EntityStateMotionConstrainedLand"));
        }
        inline void ActorStates::removeEntityStateMotionConstrainedLand()
        {
            getProperty().eraseUnionSetItem("EntityStateMotionConstrainedLand");
        }
        inline std::optional<Ent::Gen2::EntityStateMoveOnOffMeshLink> ActorStates::EntityStateMoveOnOffMeshLink()
        {
            return std::optional<Ent::Gen2::EntityStateMoveOnOffMeshLink>(getSubNode("EntityStateMoveOnOffMeshLink"));
        }
        inline Ent::Gen2::EntityStateMoveOnOffMeshLink ActorStates::addEntityStateMoveOnOffMeshLink()
        {
            return Ent::Gen2::EntityStateMoveOnOffMeshLink(addSubNode("EntityStateMoveOnOffMeshLink"));
        }
        inline void ActorStates::removeEntityStateMoveOnOffMeshLink()
        {
            getProperty().eraseUnionSetItem("EntityStateMoveOnOffMeshLink");
        }
        inline std::optional<Ent::Gen2::EntityStateOrderingAttack> ActorStates::EntityStateOrderingAttack()
        {
            return std::optional<Ent::Gen2::EntityStateOrderingAttack>(getSubNode("EntityStateOrderingAttack"));
        }
        inline Ent::Gen2::EntityStateOrderingAttack ActorStates::addEntityStateOrderingAttack()
        {
            return Ent::Gen2::EntityStateOrderingAttack(addSubNode("EntityStateOrderingAttack"));
        }
        inline void ActorStates::removeEntityStateOrderingAttack()
        {
            getProperty().eraseUnionSetItem("EntityStateOrderingAttack");
        }
        inline std::optional<Ent::Gen2::EntityStateOrientedDrift> ActorStates::EntityStateOrientedDrift()
        {
            return std::optional<Ent::Gen2::EntityStateOrientedDrift>(getSubNode("EntityStateOrientedDrift"));
        }
        inline Ent::Gen2::EntityStateOrientedDrift ActorStates::addEntityStateOrientedDrift()
        {
            return Ent::Gen2::EntityStateOrientedDrift(addSubNode("EntityStateOrientedDrift"));
        }
        inline void ActorStates::removeEntityStateOrientedDrift()
        {
            getProperty().eraseUnionSetItem("EntityStateOrientedDrift");
        }
        inline std::optional<Ent::Gen2::EntityStateParried> ActorStates::EntityStateParried()
        {
            return std::optional<Ent::Gen2::EntityStateParried>(getSubNode("EntityStateParried"));
        }
        inline Ent::Gen2::EntityStateParried ActorStates::addEntityStateParried()
        {
            return Ent::Gen2::EntityStateParried(addSubNode("EntityStateParried"));
        }
        inline void ActorStates::removeEntityStateParried()
        {
            getProperty().eraseUnionSetItem("EntityStateParried");
        }
        inline std::optional<Ent::Gen2::EntityStateParry> ActorStates::EntityStateParry()
        {
            return std::optional<Ent::Gen2::EntityStateParry>(getSubNode("EntityStateParry"));
        }
        inline Ent::Gen2::EntityStateParry ActorStates::addEntityStateParry()
        {
            return Ent::Gen2::EntityStateParry(addSubNode("EntityStateParry"));
        }
        inline void ActorStates::removeEntityStateParry()
        {
            getProperty().eraseUnionSetItem("EntityStateParry");
        }
        inline std::optional<Ent::Gen2::EntityStateParryCooldown> ActorStates::EntityStateParryCooldown()
        {
            return std::optional<Ent::Gen2::EntityStateParryCooldown>(getSubNode("EntityStateParryCooldown"));
        }
        inline Ent::Gen2::EntityStateParryCooldown ActorStates::addEntityStateParryCooldown()
        {
            return Ent::Gen2::EntityStateParryCooldown(addSubNode("EntityStateParryCooldown"));
        }
        inline void ActorStates::removeEntityStateParryCooldown()
        {
            getProperty().eraseUnionSetItem("EntityStateParryCooldown");
        }
        inline std::optional<Ent::Gen2::EntityStatePhysicsIdle> ActorStates::EntityStatePhysicsIdle()
        {
            return std::optional<Ent::Gen2::EntityStatePhysicsIdle>(getSubNode("EntityStatePhysicsIdle"));
        }
        inline Ent::Gen2::EntityStatePhysicsIdle ActorStates::addEntityStatePhysicsIdle()
        {
            return Ent::Gen2::EntityStatePhysicsIdle(addSubNode("EntityStatePhysicsIdle"));
        }
        inline void ActorStates::removeEntityStatePhysicsIdle()
        {
            getProperty().eraseUnionSetItem("EntityStatePhysicsIdle");
        }
        inline std::optional<Ent::Gen2::EntityStatePhysicsMove> ActorStates::EntityStatePhysicsMove()
        {
            return std::optional<Ent::Gen2::EntityStatePhysicsMove>(getSubNode("EntityStatePhysicsMove"));
        }
        inline Ent::Gen2::EntityStatePhysicsMove ActorStates::addEntityStatePhysicsMove()
        {
            return Ent::Gen2::EntityStatePhysicsMove(addSubNode("EntityStatePhysicsMove"));
        }
        inline void ActorStates::removeEntityStatePhysicsMove()
        {
            getProperty().eraseUnionSetItem("EntityStatePhysicsMove");
        }
        inline std::optional<Ent::Gen2::EntityStatePickableDistributor> ActorStates::EntityStatePickableDistributor()
        {
            return std::optional<Ent::Gen2::EntityStatePickableDistributor>(getSubNode("EntityStatePickableDistributor"));
        }
        inline Ent::Gen2::EntityStatePickableDistributor ActorStates::addEntityStatePickableDistributor()
        {
            return Ent::Gen2::EntityStatePickableDistributor(addSubNode("EntityStatePickableDistributor"));
        }
        inline void ActorStates::removeEntityStatePickableDistributor()
        {
            getProperty().eraseUnionSetItem("EntityStatePickableDistributor");
        }
        inline std::optional<Ent::Gen2::EntityStatePlayer> ActorStates::EntityStatePlayer()
        {
            return std::optional<Ent::Gen2::EntityStatePlayer>(getSubNode("EntityStatePlayer"));
        }
        inline Ent::Gen2::EntityStatePlayer ActorStates::addEntityStatePlayer()
        {
            return Ent::Gen2::EntityStatePlayer(addSubNode("EntityStatePlayer"));
        }
        inline void ActorStates::removeEntityStatePlayer()
        {
            getProperty().eraseUnionSetItem("EntityStatePlayer");
        }
        inline std::optional<Ent::Gen2::EntityStatePlungeLand> ActorStates::EntityStatePlungeLand()
        {
            return std::optional<Ent::Gen2::EntityStatePlungeLand>(getSubNode("EntityStatePlungeLand"));
        }
        inline Ent::Gen2::EntityStatePlungeLand ActorStates::addEntityStatePlungeLand()
        {
            return Ent::Gen2::EntityStatePlungeLand(addSubNode("EntityStatePlungeLand"));
        }
        inline void ActorStates::removeEntityStatePlungeLand()
        {
            getProperty().eraseUnionSetItem("EntityStatePlungeLand");
        }
        inline std::optional<Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh> ActorStates::EntityStatePrepareToHoldingOnToNavigationMesh()
        {
            return std::optional<Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh>(getSubNode("EntityStatePrepareToHoldingOnToNavigationMesh"));
        }
        inline Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh ActorStates::addEntityStatePrepareToHoldingOnToNavigationMesh()
        {
            return Ent::Gen2::EntityStatePrepareToHoldingOnToNavigationMesh(addSubNode("EntityStatePrepareToHoldingOnToNavigationMesh"));
        }
        inline void ActorStates::removeEntityStatePrepareToHoldingOnToNavigationMesh()
        {
            getProperty().eraseUnionSetItem("EntityStatePrepareToHoldingOnToNavigationMesh");
        }
        inline std::optional<Ent::Gen2::EntityStateRaise> ActorStates::EntityStateRaise()
        {
            return std::optional<Ent::Gen2::EntityStateRaise>(getSubNode("EntityStateRaise"));
        }
        inline Ent::Gen2::EntityStateRaise ActorStates::addEntityStateRaise()
        {
            return Ent::Gen2::EntityStateRaise(addSubNode("EntityStateRaise"));
        }
        inline void ActorStates::removeEntityStateRaise()
        {
            getProperty().eraseUnionSetItem("EntityStateRaise");
        }
        inline std::optional<Ent::Gen2::EntityStateReadyToGiveOrder> ActorStates::EntityStateReadyToGiveOrder()
        {
            return std::optional<Ent::Gen2::EntityStateReadyToGiveOrder>(getSubNode("EntityStateReadyToGiveOrder"));
        }
        inline Ent::Gen2::EntityStateReadyToGiveOrder ActorStates::addEntityStateReadyToGiveOrder()
        {
            return Ent::Gen2::EntityStateReadyToGiveOrder(addSubNode("EntityStateReadyToGiveOrder"));
        }
        inline void ActorStates::removeEntityStateReadyToGiveOrder()
        {
            getProperty().eraseUnionSetItem("EntityStateReadyToGiveOrder");
        }
        inline std::optional<Ent::Gen2::EntityStateRecoverLand> ActorStates::EntityStateRecoverLand()
        {
            return std::optional<Ent::Gen2::EntityStateRecoverLand>(getSubNode("EntityStateRecoverLand"));
        }
        inline Ent::Gen2::EntityStateRecoverLand ActorStates::addEntityStateRecoverLand()
        {
            return Ent::Gen2::EntityStateRecoverLand(addSubNode("EntityStateRecoverLand"));
        }
        inline void ActorStates::removeEntityStateRecoverLand()
        {
            getProperty().eraseUnionSetItem("EntityStateRecoverLand");
        }
        inline std::optional<Ent::Gen2::EntityStateRegainCapacity> ActorStates::EntityStateRegainCapacity()
        {
            return std::optional<Ent::Gen2::EntityStateRegainCapacity>(getSubNode("EntityStateRegainCapacity"));
        }
        inline Ent::Gen2::EntityStateRegainCapacity ActorStates::addEntityStateRegainCapacity()
        {
            return Ent::Gen2::EntityStateRegainCapacity(addSubNode("EntityStateRegainCapacity"));
        }
        inline void ActorStates::removeEntityStateRegainCapacity()
        {
            getProperty().eraseUnionSetItem("EntityStateRegainCapacity");
        }
        inline std::optional<Ent::Gen2::EntityStateReserveMountSlots> ActorStates::EntityStateReserveMountSlots()
        {
            return std::optional<Ent::Gen2::EntityStateReserveMountSlots>(getSubNode("EntityStateReserveMountSlots"));
        }
        inline Ent::Gen2::EntityStateReserveMountSlots ActorStates::addEntityStateReserveMountSlots()
        {
            return Ent::Gen2::EntityStateReserveMountSlots(addSubNode("EntityStateReserveMountSlots"));
        }
        inline void ActorStates::removeEntityStateReserveMountSlots()
        {
            getProperty().eraseUnionSetItem("EntityStateReserveMountSlots");
        }
        inline std::optional<Ent::Gen2::EntityStateRespawn> ActorStates::EntityStateRespawn()
        {
            return std::optional<Ent::Gen2::EntityStateRespawn>(getSubNode("EntityStateRespawn"));
        }
        inline Ent::Gen2::EntityStateRespawn ActorStates::addEntityStateRespawn()
        {
            return Ent::Gen2::EntityStateRespawn(addSubNode("EntityStateRespawn"));
        }
        inline void ActorStates::removeEntityStateRespawn()
        {
            getProperty().eraseUnionSetItem("EntityStateRespawn");
        }
        inline std::optional<Ent::Gen2::EntityStateRespawnability> ActorStates::EntityStateRespawnability()
        {
            return std::optional<Ent::Gen2::EntityStateRespawnability>(getSubNode("EntityStateRespawnability"));
        }
        inline Ent::Gen2::EntityStateRespawnability ActorStates::addEntityStateRespawnability()
        {
            return Ent::Gen2::EntityStateRespawnability(addSubNode("EntityStateRespawnability"));
        }
        inline void ActorStates::removeEntityStateRespawnability()
        {
            getProperty().eraseUnionSetItem("EntityStateRespawnability");
        }
        inline std::optional<Ent::Gen2::EntityStateRevive> ActorStates::EntityStateRevive()
        {
            return std::optional<Ent::Gen2::EntityStateRevive>(getSubNode("EntityStateRevive"));
        }
        inline Ent::Gen2::EntityStateRevive ActorStates::addEntityStateRevive()
        {
            return Ent::Gen2::EntityStateRevive(addSubNode("EntityStateRevive"));
        }
        inline void ActorStates::removeEntityStateRevive()
        {
            getProperty().eraseUnionSetItem("EntityStateRevive");
        }
        inline std::optional<Ent::Gen2::EntityStateSavePointActivated> ActorStates::EntityStateSavePointActivated()
        {
            return std::optional<Ent::Gen2::EntityStateSavePointActivated>(getSubNode("EntityStateSavePointActivated"));
        }
        inline Ent::Gen2::EntityStateSavePointActivated ActorStates::addEntityStateSavePointActivated()
        {
            return Ent::Gen2::EntityStateSavePointActivated(addSubNode("EntityStateSavePointActivated"));
        }
        inline void ActorStates::removeEntityStateSavePointActivated()
        {
            getProperty().eraseUnionSetItem("EntityStateSavePointActivated");
        }
        inline std::optional<Ent::Gen2::EntityStateSetSavePoint> ActorStates::EntityStateSetSavePoint()
        {
            return std::optional<Ent::Gen2::EntityStateSetSavePoint>(getSubNode("EntityStateSetSavePoint"));
        }
        inline Ent::Gen2::EntityStateSetSavePoint ActorStates::addEntityStateSetSavePoint()
        {
            return Ent::Gen2::EntityStateSetSavePoint(addSubNode("EntityStateSetSavePoint"));
        }
        inline void ActorStates::removeEntityStateSetSavePoint()
        {
            getProperty().eraseUnionSetItem("EntityStateSetSavePoint");
        }
        inline std::optional<Ent::Gen2::EntityStateShootHatchingEnergy> ActorStates::EntityStateShootHatchingEnergy()
        {
            return std::optional<Ent::Gen2::EntityStateShootHatchingEnergy>(getSubNode("EntityStateShootHatchingEnergy"));
        }
        inline Ent::Gen2::EntityStateShootHatchingEnergy ActorStates::addEntityStateShootHatchingEnergy()
        {
            return Ent::Gen2::EntityStateShootHatchingEnergy(addSubNode("EntityStateShootHatchingEnergy"));
        }
        inline void ActorStates::removeEntityStateShootHatchingEnergy()
        {
            getProperty().eraseUnionSetItem("EntityStateShootHatchingEnergy");
        }
        inline std::optional<Ent::Gen2::EntityStateSlowMotion> ActorStates::EntityStateSlowMotion()
        {
            return std::optional<Ent::Gen2::EntityStateSlowMotion>(getSubNode("EntityStateSlowMotion"));
        }
        inline Ent::Gen2::EntityStateSlowMotion ActorStates::addEntityStateSlowMotion()
        {
            return Ent::Gen2::EntityStateSlowMotion(addSubNode("EntityStateSlowMotion"));
        }
        inline void ActorStates::removeEntityStateSlowMotion()
        {
            getProperty().eraseUnionSetItem("EntityStateSlowMotion");
        }
        inline std::optional<Ent::Gen2::EntityStateSnappedToHatchingTarget> ActorStates::EntityStateSnappedToHatchingTarget()
        {
            return std::optional<Ent::Gen2::EntityStateSnappedToHatchingTarget>(getSubNode("EntityStateSnappedToHatchingTarget"));
        }
        inline Ent::Gen2::EntityStateSnappedToHatchingTarget ActorStates::addEntityStateSnappedToHatchingTarget()
        {
            return Ent::Gen2::EntityStateSnappedToHatchingTarget(addSubNode("EntityStateSnappedToHatchingTarget"));
        }
        inline void ActorStates::removeEntityStateSnappedToHatchingTarget()
        {
            getProperty().eraseUnionSetItem("EntityStateSnappedToHatchingTarget");
        }
        inline std::optional<Ent::Gen2::EntityStateSoftCollide> ActorStates::EntityStateSoftCollide()
        {
            return std::optional<Ent::Gen2::EntityStateSoftCollide>(getSubNode("EntityStateSoftCollide"));
        }
        inline Ent::Gen2::EntityStateSoftCollide ActorStates::addEntityStateSoftCollide()
        {
            return Ent::Gen2::EntityStateSoftCollide(addSubNode("EntityStateSoftCollide"));
        }
        inline void ActorStates::removeEntityStateSoftCollide()
        {
            getProperty().eraseUnionSetItem("EntityStateSoftCollide");
        }
        inline std::optional<Ent::Gen2::EntityStateSpeedLimiter> ActorStates::EntityStateSpeedLimiter()
        {
            return std::optional<Ent::Gen2::EntityStateSpeedLimiter>(getSubNode("EntityStateSpeedLimiter"));
        }
        inline Ent::Gen2::EntityStateSpeedLimiter ActorStates::addEntityStateSpeedLimiter()
        {
            return Ent::Gen2::EntityStateSpeedLimiter(addSubNode("EntityStateSpeedLimiter"));
        }
        inline void ActorStates::removeEntityStateSpeedLimiter()
        {
            getProperty().eraseUnionSetItem("EntityStateSpeedLimiter");
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAnimalBeingCalled> ActorStates::EntityStateSpiritAnimalBeingCalled()
        {
            return std::optional<Ent::Gen2::EntityStateSpiritAnimalBeingCalled>(getSubNode("EntityStateSpiritAnimalBeingCalled"));
        }
        inline Ent::Gen2::EntityStateSpiritAnimalBeingCalled ActorStates::addEntityStateSpiritAnimalBeingCalled()
        {
            return Ent::Gen2::EntityStateSpiritAnimalBeingCalled(addSubNode("EntityStateSpiritAnimalBeingCalled"));
        }
        inline void ActorStates::removeEntityStateSpiritAnimalBeingCalled()
        {
            getProperty().eraseUnionSetItem("EntityStateSpiritAnimalBeingCalled");
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAnimalFleshForm> ActorStates::EntityStateSpiritAnimalFleshForm()
        {
            return std::optional<Ent::Gen2::EntityStateSpiritAnimalFleshForm>(getSubNode("EntityStateSpiritAnimalFleshForm"));
        }
        inline Ent::Gen2::EntityStateSpiritAnimalFleshForm ActorStates::addEntityStateSpiritAnimalFleshForm()
        {
            return Ent::Gen2::EntityStateSpiritAnimalFleshForm(addSubNode("EntityStateSpiritAnimalFleshForm"));
        }
        inline void ActorStates::removeEntityStateSpiritAnimalFleshForm()
        {
            getProperty().eraseUnionSetItem("EntityStateSpiritAnimalFleshForm");
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAnimalSoulForm> ActorStates::EntityStateSpiritAnimalSoulForm()
        {
            return std::optional<Ent::Gen2::EntityStateSpiritAnimalSoulForm>(getSubNode("EntityStateSpiritAnimalSoulForm"));
        }
        inline Ent::Gen2::EntityStateSpiritAnimalSoulForm ActorStates::addEntityStateSpiritAnimalSoulForm()
        {
            return Ent::Gen2::EntityStateSpiritAnimalSoulForm(addSubNode("EntityStateSpiritAnimalSoulForm"));
        }
        inline void ActorStates::removeEntityStateSpiritAnimalSoulForm()
        {
            getProperty().eraseUnionSetItem("EntityStateSpiritAnimalSoulForm");
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAttack> ActorStates::EntityStateSpiritAttack()
        {
            return std::optional<Ent::Gen2::EntityStateSpiritAttack>(getSubNode("EntityStateSpiritAttack"));
        }
        inline Ent::Gen2::EntityStateSpiritAttack ActorStates::addEntityStateSpiritAttack()
        {
            return Ent::Gen2::EntityStateSpiritAttack(addSubNode("EntityStateSpiritAttack"));
        }
        inline void ActorStates::removeEntityStateSpiritAttack()
        {
            getProperty().eraseUnionSetItem("EntityStateSpiritAttack");
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritAttacked> ActorStates::EntityStateSpiritAttacked()
        {
            return std::optional<Ent::Gen2::EntityStateSpiritAttacked>(getSubNode("EntityStateSpiritAttacked"));
        }
        inline Ent::Gen2::EntityStateSpiritAttacked ActorStates::addEntityStateSpiritAttacked()
        {
            return Ent::Gen2::EntityStateSpiritAttacked(addSubNode("EntityStateSpiritAttacked"));
        }
        inline void ActorStates::removeEntityStateSpiritAttacked()
        {
            getProperty().eraseUnionSetItem("EntityStateSpiritAttacked");
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritShrineDisabled> ActorStates::EntityStateSpiritShrineDisabled()
        {
            return std::optional<Ent::Gen2::EntityStateSpiritShrineDisabled>(getSubNode("EntityStateSpiritShrineDisabled"));
        }
        inline Ent::Gen2::EntityStateSpiritShrineDisabled ActorStates::addEntityStateSpiritShrineDisabled()
        {
            return Ent::Gen2::EntityStateSpiritShrineDisabled(addSubNode("EntityStateSpiritShrineDisabled"));
        }
        inline void ActorStates::removeEntityStateSpiritShrineDisabled()
        {
            getProperty().eraseUnionSetItem("EntityStateSpiritShrineDisabled");
        }
        inline std::optional<Ent::Gen2::EntityStateSpiritShrineEnabled> ActorStates::EntityStateSpiritShrineEnabled()
        {
            return std::optional<Ent::Gen2::EntityStateSpiritShrineEnabled>(getSubNode("EntityStateSpiritShrineEnabled"));
        }
        inline Ent::Gen2::EntityStateSpiritShrineEnabled ActorStates::addEntityStateSpiritShrineEnabled()
        {
            return Ent::Gen2::EntityStateSpiritShrineEnabled(addSubNode("EntityStateSpiritShrineEnabled"));
        }
        inline void ActorStates::removeEntityStateSpiritShrineEnabled()
        {
            getProperty().eraseUnionSetItem("EntityStateSpiritShrineEnabled");
        }
        inline std::optional<Ent::Gen2::EntityStateStaffOwnedVertebras> ActorStates::EntityStateStaffOwnedVertebras()
        {
            return std::optional<Ent::Gen2::EntityStateStaffOwnedVertebras>(getSubNode("EntityStateStaffOwnedVertebras"));
        }
        inline Ent::Gen2::EntityStateStaffOwnedVertebras ActorStates::addEntityStateStaffOwnedVertebras()
        {
            return Ent::Gen2::EntityStateStaffOwnedVertebras(addSubNode("EntityStateStaffOwnedVertebras"));
        }
        inline void ActorStates::removeEntityStateStaffOwnedVertebras()
        {
            getProperty().eraseUnionSetItem("EntityStateStaffOwnedVertebras");
        }
        inline std::optional<Ent::Gen2::EntityStateStaffVertebrasAutoRefill> ActorStates::EntityStateStaffVertebrasAutoRefill()
        {
            return std::optional<Ent::Gen2::EntityStateStaffVertebrasAutoRefill>(getSubNode("EntityStateStaffVertebrasAutoRefill"));
        }
        inline Ent::Gen2::EntityStateStaffVertebrasAutoRefill ActorStates::addEntityStateStaffVertebrasAutoRefill()
        {
            return Ent::Gen2::EntityStateStaffVertebrasAutoRefill(addSubNode("EntityStateStaffVertebrasAutoRefill"));
        }
        inline void ActorStates::removeEntityStateStaffVertebrasAutoRefill()
        {
            getProperty().eraseUnionSetItem("EntityStateStaffVertebrasAutoRefill");
        }
        inline std::optional<Ent::Gen2::EntityStateStalactiteFallen> ActorStates::EntityStateStalactiteFallen()
        {
            return std::optional<Ent::Gen2::EntityStateStalactiteFallen>(getSubNode("EntityStateStalactiteFallen"));
        }
        inline Ent::Gen2::EntityStateStalactiteFallen ActorStates::addEntityStateStalactiteFallen()
        {
            return Ent::Gen2::EntityStateStalactiteFallen(addSubNode("EntityStateStalactiteFallen"));
        }
        inline void ActorStates::removeEntityStateStalactiteFallen()
        {
            getProperty().eraseUnionSetItem("EntityStateStalactiteFallen");
        }
        inline std::optional<Ent::Gen2::EntityStateStalactiteReadyToFall> ActorStates::EntityStateStalactiteReadyToFall()
        {
            return std::optional<Ent::Gen2::EntityStateStalactiteReadyToFall>(getSubNode("EntityStateStalactiteReadyToFall"));
        }
        inline Ent::Gen2::EntityStateStalactiteReadyToFall ActorStates::addEntityStateStalactiteReadyToFall()
        {
            return Ent::Gen2::EntityStateStalactiteReadyToFall(addSubNode("EntityStateStalactiteReadyToFall"));
        }
        inline void ActorStates::removeEntityStateStalactiteReadyToFall()
        {
            getProperty().eraseUnionSetItem("EntityStateStalactiteReadyToFall");
        }
        inline std::optional<Ent::Gen2::EntityStateStickedLand> ActorStates::EntityStateStickedLand()
        {
            return std::optional<Ent::Gen2::EntityStateStickedLand>(getSubNode("EntityStateStickedLand"));
        }
        inline Ent::Gen2::EntityStateStickedLand ActorStates::addEntityStateStickedLand()
        {
            return Ent::Gen2::EntityStateStickedLand(addSubNode("EntityStateStickedLand"));
        }
        inline void ActorStates::removeEntityStateStickedLand()
        {
            getProperty().eraseUnionSetItem("EntityStateStickedLand");
        }
        inline std::optional<Ent::Gen2::EntityStateStrafeDodge> ActorStates::EntityStateStrafeDodge()
        {
            return std::optional<Ent::Gen2::EntityStateStrafeDodge>(getSubNode("EntityStateStrafeDodge"));
        }
        inline Ent::Gen2::EntityStateStrafeDodge ActorStates::addEntityStateStrafeDodge()
        {
            return Ent::Gen2::EntityStateStrafeDodge(addSubNode("EntityStateStrafeDodge"));
        }
        inline void ActorStates::removeEntityStateStrafeDodge()
        {
            getProperty().eraseUnionSetItem("EntityStateStrafeDodge");
        }
        inline std::optional<Ent::Gen2::EntityStateStrongAttack> ActorStates::EntityStateStrongAttack()
        {
            return std::optional<Ent::Gen2::EntityStateStrongAttack>(getSubNode("EntityStateStrongAttack"));
        }
        inline Ent::Gen2::EntityStateStrongAttack ActorStates::addEntityStateStrongAttack()
        {
            return Ent::Gen2::EntityStateStrongAttack(addSubNode("EntityStateStrongAttack"));
        }
        inline void ActorStates::removeEntityStateStrongAttack()
        {
            getProperty().eraseUnionSetItem("EntityStateStrongAttack");
        }
        inline std::optional<Ent::Gen2::EntityStateStrongAttackCharged> ActorStates::EntityStateStrongAttackCharged()
        {
            return std::optional<Ent::Gen2::EntityStateStrongAttackCharged>(getSubNode("EntityStateStrongAttackCharged"));
        }
        inline Ent::Gen2::EntityStateStrongAttackCharged ActorStates::addEntityStateStrongAttackCharged()
        {
            return Ent::Gen2::EntityStateStrongAttackCharged(addSubNode("EntityStateStrongAttackCharged"));
        }
        inline void ActorStates::removeEntityStateStrongAttackCharged()
        {
            getProperty().eraseUnionSetItem("EntityStateStrongAttackCharged");
        }
        inline std::optional<Ent::Gen2::EntityStateStrongAttackCharging> ActorStates::EntityStateStrongAttackCharging()
        {
            return std::optional<Ent::Gen2::EntityStateStrongAttackCharging>(getSubNode("EntityStateStrongAttackCharging"));
        }
        inline Ent::Gen2::EntityStateStrongAttackCharging ActorStates::addEntityStateStrongAttackCharging()
        {
            return Ent::Gen2::EntityStateStrongAttackCharging(addSubNode("EntityStateStrongAttackCharging"));
        }
        inline void ActorStates::removeEntityStateStrongAttackCharging()
        {
            getProperty().eraseUnionSetItem("EntityStateStrongAttackCharging");
        }
        inline std::optional<Ent::Gen2::EntityStateStrongAttackJumped> ActorStates::EntityStateStrongAttackJumped()
        {
            return std::optional<Ent::Gen2::EntityStateStrongAttackJumped>(getSubNode("EntityStateStrongAttackJumped"));
        }
        inline Ent::Gen2::EntityStateStrongAttackJumped ActorStates::addEntityStateStrongAttackJumped()
        {
            return Ent::Gen2::EntityStateStrongAttackJumped(addSubNode("EntityStateStrongAttackJumped"));
        }
        inline void ActorStates::removeEntityStateStrongAttackJumped()
        {
            getProperty().eraseUnionSetItem("EntityStateStrongAttackJumped");
        }
        inline std::optional<Ent::Gen2::EntityStateTakeDamageOnMount> ActorStates::EntityStateTakeDamageOnMount()
        {
            return std::optional<Ent::Gen2::EntityStateTakeDamageOnMount>(getSubNode("EntityStateTakeDamageOnMount"));
        }
        inline Ent::Gen2::EntityStateTakeDamageOnMount ActorStates::addEntityStateTakeDamageOnMount()
        {
            return Ent::Gen2::EntityStateTakeDamageOnMount(addSubNode("EntityStateTakeDamageOnMount"));
        }
        inline void ActorStates::removeEntityStateTakeDamageOnMount()
        {
            getProperty().eraseUnionSetItem("EntityStateTakeDamageOnMount");
        }
        inline std::optional<Ent::Gen2::EntityStateTooDeep> ActorStates::EntityStateTooDeep()
        {
            return std::optional<Ent::Gen2::EntityStateTooDeep>(getSubNode("EntityStateTooDeep"));
        }
        inline Ent::Gen2::EntityStateTooDeep ActorStates::addEntityStateTooDeep()
        {
            return Ent::Gen2::EntityStateTooDeep(addSubNode("EntityStateTooDeep"));
        }
        inline void ActorStates::removeEntityStateTooDeep()
        {
            getProperty().eraseUnionSetItem("EntityStateTooDeep");
        }
        inline std::optional<Ent::Gen2::EntityStateTreeMetamorphosis> ActorStates::EntityStateTreeMetamorphosis()
        {
            return std::optional<Ent::Gen2::EntityStateTreeMetamorphosis>(getSubNode("EntityStateTreeMetamorphosis"));
        }
        inline Ent::Gen2::EntityStateTreeMetamorphosis ActorStates::addEntityStateTreeMetamorphosis()
        {
            return Ent::Gen2::EntityStateTreeMetamorphosis(addSubNode("EntityStateTreeMetamorphosis"));
        }
        inline void ActorStates::removeEntityStateTreeMetamorphosis()
        {
            getProperty().eraseUnionSetItem("EntityStateTreeMetamorphosis");
        }
        inline std::optional<Ent::Gen2::EntityStateTreeMetamorphosisUsingScale> ActorStates::EntityStateTreeMetamorphosisUsingScale()
        {
            return std::optional<Ent::Gen2::EntityStateTreeMetamorphosisUsingScale>(getSubNode("EntityStateTreeMetamorphosisUsingScale"));
        }
        inline Ent::Gen2::EntityStateTreeMetamorphosisUsingScale ActorStates::addEntityStateTreeMetamorphosisUsingScale()
        {
            return Ent::Gen2::EntityStateTreeMetamorphosisUsingScale(addSubNode("EntityStateTreeMetamorphosisUsingScale"));
        }
        inline void ActorStates::removeEntityStateTreeMetamorphosisUsingScale()
        {
            getProperty().eraseUnionSetItem("EntityStateTreeMetamorphosisUsingScale");
        }
        inline std::optional<Ent::Gen2::EntityStateTreeSwitchTransition> ActorStates::EntityStateTreeSwitchTransition()
        {
            return std::optional<Ent::Gen2::EntityStateTreeSwitchTransition>(getSubNode("EntityStateTreeSwitchTransition"));
        }
        inline Ent::Gen2::EntityStateTreeSwitchTransition ActorStates::addEntityStateTreeSwitchTransition()
        {
            return Ent::Gen2::EntityStateTreeSwitchTransition(addSubNode("EntityStateTreeSwitchTransition"));
        }
        inline void ActorStates::removeEntityStateTreeSwitchTransition()
        {
            getProperty().eraseUnionSetItem("EntityStateTreeSwitchTransition");
        }
        inline std::optional<Ent::Gen2::EntityStateTreeTurretTargeting> ActorStates::EntityStateTreeTurretTargeting()
        {
            return std::optional<Ent::Gen2::EntityStateTreeTurretTargeting>(getSubNode("EntityStateTreeTurretTargeting"));
        }
        inline Ent::Gen2::EntityStateTreeTurretTargeting ActorStates::addEntityStateTreeTurretTargeting()
        {
            return Ent::Gen2::EntityStateTreeTurretTargeting(addSubNode("EntityStateTreeTurretTargeting"));
        }
        inline void ActorStates::removeEntityStateTreeTurretTargeting()
        {
            getProperty().eraseUnionSetItem("EntityStateTreeTurretTargeting");
        }
        inline std::optional<Ent::Gen2::EntityStateTriggerBeamTargetEvent> ActorStates::EntityStateTriggerBeamTargetEvent()
        {
            return std::optional<Ent::Gen2::EntityStateTriggerBeamTargetEvent>(getSubNode("EntityStateTriggerBeamTargetEvent"));
        }
        inline Ent::Gen2::EntityStateTriggerBeamTargetEvent ActorStates::addEntityStateTriggerBeamTargetEvent()
        {
            return Ent::Gen2::EntityStateTriggerBeamTargetEvent(addSubNode("EntityStateTriggerBeamTargetEvent"));
        }
        inline void ActorStates::removeEntityStateTriggerBeamTargetEvent()
        {
            getProperty().eraseUnionSetItem("EntityStateTriggerBeamTargetEvent");
        }
        inline std::optional<Ent::Gen2::EntityStateTryUnmount> ActorStates::EntityStateTryUnmount()
        {
            return std::optional<Ent::Gen2::EntityStateTryUnmount>(getSubNode("EntityStateTryUnmount"));
        }
        inline Ent::Gen2::EntityStateTryUnmount ActorStates::addEntityStateTryUnmount()
        {
            return Ent::Gen2::EntityStateTryUnmount(addSubNode("EntityStateTryUnmount"));
        }
        inline void ActorStates::removeEntityStateTryUnmount()
        {
            getProperty().eraseUnionSetItem("EntityStateTryUnmount");
        }
        inline std::optional<Ent::Gen2::EntityStateUndergroundCavity> ActorStates::EntityStateUndergroundCavity()
        {
            return std::optional<Ent::Gen2::EntityStateUndergroundCavity>(getSubNode("EntityStateUndergroundCavity"));
        }
        inline Ent::Gen2::EntityStateUndergroundCavity ActorStates::addEntityStateUndergroundCavity()
        {
            return Ent::Gen2::EntityStateUndergroundCavity(addSubNode("EntityStateUndergroundCavity"));
        }
        inline void ActorStates::removeEntityStateUndergroundCavity()
        {
            getProperty().eraseUnionSetItem("EntityStateUndergroundCavity");
        }
        inline std::optional<Ent::Gen2::EntityStateUseAsActiveCheckpoint> ActorStates::EntityStateUseAsActiveCheckpoint()
        {
            return std::optional<Ent::Gen2::EntityStateUseAsActiveCheckpoint>(getSubNode("EntityStateUseAsActiveCheckpoint"));
        }
        inline Ent::Gen2::EntityStateUseAsActiveCheckpoint ActorStates::addEntityStateUseAsActiveCheckpoint()
        {
            return Ent::Gen2::EntityStateUseAsActiveCheckpoint(addSubNode("EntityStateUseAsActiveCheckpoint"));
        }
        inline void ActorStates::removeEntityStateUseAsActiveCheckpoint()
        {
            getProperty().eraseUnionSetItem("EntityStateUseAsActiveCheckpoint");
        }
        inline std::optional<Ent::Gen2::EntityStateWaitToJumpAgain> ActorStates::EntityStateWaitToJumpAgain()
        {
            return std::optional<Ent::Gen2::EntityStateWaitToJumpAgain>(getSubNode("EntityStateWaitToJumpAgain"));
        }
        inline Ent::Gen2::EntityStateWaitToJumpAgain ActorStates::addEntityStateWaitToJumpAgain()
        {
            return Ent::Gen2::EntityStateWaitToJumpAgain(addSubNode("EntityStateWaitToJumpAgain"));
        }
        inline void ActorStates::removeEntityStateWaitToJumpAgain()
        {
            getProperty().eraseUnionSetItem("EntityStateWaitToJumpAgain");
        }
        inline std::optional<Ent::Gen2::EntityStateWallRun> ActorStates::EntityStateWallRun()
        {
            return std::optional<Ent::Gen2::EntityStateWallRun>(getSubNode("EntityStateWallRun"));
        }
        inline Ent::Gen2::EntityStateWallRun ActorStates::addEntityStateWallRun()
        {
            return Ent::Gen2::EntityStateWallRun(addSubNode("EntityStateWallRun"));
        }
        inline void ActorStates::removeEntityStateWallRun()
        {
            getProperty().eraseUnionSetItem("EntityStateWallRun");
        }
        inline std::optional<Ent::Gen2::EntityStateWallRunDrop> ActorStates::EntityStateWallRunDrop()
        {
            return std::optional<Ent::Gen2::EntityStateWallRunDrop>(getSubNode("EntityStateWallRunDrop"));
        }
        inline Ent::Gen2::EntityStateWallRunDrop ActorStates::addEntityStateWallRunDrop()
        {
            return Ent::Gen2::EntityStateWallRunDrop(addSubNode("EntityStateWallRunDrop"));
        }
        inline void ActorStates::removeEntityStateWallRunDrop()
        {
            getProperty().eraseUnionSetItem("EntityStateWallRunDrop");
        }
        inline std::optional<Ent::Gen2::EntityStateWallRunJump> ActorStates::EntityStateWallRunJump()
        {
            return std::optional<Ent::Gen2::EntityStateWallRunJump>(getSubNode("EntityStateWallRunJump"));
        }
        inline Ent::Gen2::EntityStateWallRunJump ActorStates::addEntityStateWallRunJump()
        {
            return Ent::Gen2::EntityStateWallRunJump(addSubNode("EntityStateWallRunJump"));
        }
        inline void ActorStates::removeEntityStateWallRunJump()
        {
            getProperty().eraseUnionSetItem("EntityStateWallRunJump");
        }
        inline std::optional<Ent::Gen2::EntityStateWaterfallEndJump> ActorStates::EntityStateWaterfallEndJump()
        {
            return std::optional<Ent::Gen2::EntityStateWaterfallEndJump>(getSubNode("EntityStateWaterfallEndJump"));
        }
        inline Ent::Gen2::EntityStateWaterfallEndJump ActorStates::addEntityStateWaterfallEndJump()
        {
            return Ent::Gen2::EntityStateWaterfallEndJump(addSubNode("EntityStateWaterfallEndJump"));
        }
        inline void ActorStates::removeEntityStateWaterfallEndJump()
        {
            getProperty().eraseUnionSetItem("EntityStateWaterfallEndJump");
        }
        // Object
        inline Ent::Gen2::ActorStates Object::ActorStates() const
        {
            return Ent::Gen2::ActorStates(getProperty().getObjectField("ActorStates"));
        }
        inline Ent::Gen2::Color Object::Color() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("Color"));
        }
        inline Ent::Gen2::Object_Components Object::Components() const
        {
            return Ent::Gen2::Object_Components(getProperty().getObjectField("Components"));
        }
        inline Ent::Gen2::Object_MaxActivationLevel Object::MaxActivationLevel() const
        {
            return Ent::Gen2::Object_MaxActivationLevel(getProperty().getObjectField("MaxActivationLevel"));
        }
        inline Ent::Gen2::String Object::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String Object::Thumbnail() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Thumbnail"));
        }
        inline Ent::Gen2::Bool Object::__removed__() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("__removed__"));
        }
        inline Ent::Gen2::String Object::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // UnitTestComponent
        inline Ent::Gen2::Object UnitTestComponent::Entity() const
        {
            return Ent::Gen2::Object(getProperty().getObjectField("Entity"));
        }
        inline Ent::Gen2::PrimitiveSet<ReviveSideEnum> UnitTestComponent::EnumSet() const
        {
            return Ent::Gen2::PrimitiveSet<ReviveSideEnum>(getProperty().getObjectField("EnumSet"));
        }
        inline Ent::Gen2::Position UnitTestComponent::Position() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("Position"));
        }
        inline Ent::Gen2::ComponentGD UnitTestComponent::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String UnitTestComponent::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Entity
        inline Ent::Gen2::ActorStates Entity::ActorStates() const
        {
            return Ent::Gen2::ActorStates(getProperty().getObjectField("ActorStates"));
        }
        inline Ent::Gen2::Color Entity::Color() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("Color"));
        }
        inline Ent::Gen2::Components Entity::Components() const
        {
            return Ent::Gen2::Components(getProperty().getObjectField("Components"));
        }
        inline Ent::Gen2::MaxActivationLevel Entity::MaxActivationLevel() const
        {
            return Ent::Gen2::MaxActivationLevel(getProperty().getObjectField("MaxActivationLevel"));
        }
        inline Ent::Gen2::String Entity::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String Entity::Thumbnail() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Thumbnail"));
        }
        inline Ent::Gen2::String Entity::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // SubScene
        inline Ent::Gen2::ObjectSet<char const*, Ent::Gen2::Entity> SubScene::Embedded() const
        {
            return Ent::Gen2::ObjectSet<char const*, Ent::Gen2::Entity>(getProperty().getObjectField("Embedded"));
        }
        inline Ent::Gen2::RuntimeMode SubScene::RuntimeMode() const
        {
            return Ent::Gen2::RuntimeMode(getProperty().getObjectField("RuntimeMode"));
        }
        inline Ent::Gen2::ComponentGD SubScene::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String SubScene::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Scene
        inline Ent::Gen2::ObjectSet<char const*, Ent::Gen2::Entity> Scene::Objects() const
        {
            return Ent::Gen2::ObjectSet<char const*, Ent::Gen2::Entity>(getProperty().getObjectField("Objects"));
        }
        inline Ent::Gen2::Int Scene::Version() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Version"));
        }
        inline Ent::Gen2::String Scene::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateTeleport_Inputs
        inline Ent::Gen2::Orientation ActorStateTeleport_Inputs::Orientation() const
        {
            return Ent::Gen2::Orientation(getProperty().getObjectField("Orientation"));
        }
        inline Ent::Gen2::Position ActorStateTeleport_Inputs::Position() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("Position"));
        }
        inline Ent::Gen2::Bool ActorStateTeleport_Inputs::ResetCamera() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ResetCamera"));
        }
        inline Ent::Gen2::Bool ActorStateTeleport_Inputs::TouchGround() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("TouchGround"));
        }
        inline Ent::Gen2::String ActorStateTeleport_Inputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateTeleportWhileMovingInputs
        inline Ent::Gen2::String ActorStateTeleportWhileMovingInputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ActorStateTeleportWhileMovingInputs::aerialMount() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("aerialMount"));
        }
        inline Ent::Gen2::Vector3 ActorStateTeleportWhileMovingInputs::direction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("direction"));
        }
        inline Ent::Gen2::Quat ActorStateTeleportWhileMovingInputs::orientation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("orientation"));
        }
        inline Ent::Gen2::Position ActorStateTeleportWhileMovingInputs::position() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("position"));
        }
        inline Ent::Gen2::Float ActorStateTeleportWhileMovingInputs::speedRequired() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("speedRequired"));
        }
        // ActorStateFlockingChangingParams_Params
        inline Ent::Gen2::Bool ActorStateFlockingChangingParams_Params::ApplyAfterCurrent() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ApplyAfterCurrent"));
        }
        inline Ent::Gen2::Bool ActorStateFlockingChangingParams_Params::ApplyOnBud() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ApplyOnBud"));
        }
        inline Ent::Gen2::Float ActorStateFlockingChangingParams_Params::DelayRandom() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DelayRandom"));
        }
        inline Ent::Gen2::Float ActorStateFlockingChangingParams_Params::DelayStatic() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DelayStatic"));
        }
        inline Ent::Gen2::String ActorStateFlockingChangingParams_Params::Hash() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Hash"));
        }
        inline Ent::Gen2::Int ActorStateFlockingChangingParams_Params::Layer() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Layer"));
        }
        inline Ent::Gen2::String ActorStateFlockingChangingParams_Params::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorState
        // EntityStateWaterfallEndJump
        inline Ent::Gen2::ActorState EntityStateWaterfallEndJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateWaterfallEndJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateWallRunJump
        inline Ent::Gen2::ActorState EntityStateWallRunJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateWallRunJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateWallRunDrop
        inline Ent::Gen2::ActorState EntityStateWallRunDrop::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateWallRunDrop::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateWallRun
        inline Ent::Gen2::ActorState EntityStateWallRun::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateWallRun::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateWaitToJumpAgain
        inline Ent::Gen2::ActorState EntityStateWaitToJumpAgain::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateWaitToJumpAgain::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateUseAsActiveCheckpoint
        inline Ent::Gen2::ActorState EntityStateUseAsActiveCheckpoint::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateUseAsActiveCheckpoint::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateUndergroundCavity
        inline Ent::Gen2::ActorState EntityStateUndergroundCavity::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateUndergroundCavity::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateTryUnmount
        inline Ent::Gen2::ActorState EntityStateTryUnmount::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateTryUnmount::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateTriggerBeamTargetEvent
        inline Ent::Gen2::ActorState EntityStateTriggerBeamTargetEvent::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateTriggerBeamTargetEvent::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateTreeTurretTargeting
        inline Ent::Gen2::ActorState EntityStateTreeTurretTargeting::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateTreeTurretTargeting::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateTreeSwitchTransition
        inline Ent::Gen2::ActorState EntityStateTreeSwitchTransition::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateTreeSwitchTransition::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateTreeMetamorphosisUsingScale
        inline Ent::Gen2::ActorState EntityStateTreeMetamorphosisUsingScale::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateTreeMetamorphosisUsingScale::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateTreeMetamorphosis
        inline Ent::Gen2::ActorState EntityStateTreeMetamorphosis::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateTreeMetamorphosis::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateTooDeep
        inline Ent::Gen2::ActorState EntityStateTooDeep::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateTooDeep::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateTakeDamageOnMount
        inline Ent::Gen2::ActorState EntityStateTakeDamageOnMount::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateTakeDamageOnMount::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStrongAttackJumped
        inline Ent::Gen2::ActorState EntityStateStrongAttackJumped::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStrongAttackJumped::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStrongAttackCharging
        inline Ent::Gen2::ActorState EntityStateStrongAttackCharging::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStrongAttackCharging::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStrongAttackCharged
        inline Ent::Gen2::ActorState EntityStateStrongAttackCharged::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStrongAttackCharged::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStrongAttack
        inline Ent::Gen2::ActorState EntityStateStrongAttack::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStrongAttack::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStrafeDodge
        inline Ent::Gen2::ActorState EntityStateStrafeDodge::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStrafeDodge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStickedLand
        inline Ent::Gen2::ActorState EntityStateStickedLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStickedLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStalactiteReadyToFall
        inline Ent::Gen2::ActorState EntityStateStalactiteReadyToFall::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStalactiteReadyToFall::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStalactiteFallen
        inline Ent::Gen2::ActorState EntityStateStalactiteFallen::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStalactiteFallen::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStaffVertebrasAutoRefill
        inline Ent::Gen2::ActorState EntityStateStaffVertebrasAutoRefill::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStaffVertebrasAutoRefill::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateStaffOwnedVertebras
        inline Ent::Gen2::EntityStateStaffOwnedVertebras_Inputs EntityStateStaffOwnedVertebras::Inputs() const
        {
            return Ent::Gen2::EntityStateStaffOwnedVertebras_Inputs(getProperty().getObjectField("Inputs"));
        }
        inline Ent::Gen2::ActorState EntityStateStaffOwnedVertebras::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateStaffOwnedVertebras::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSpiritShrineEnabled
        inline Ent::Gen2::ActorState EntityStateSpiritShrineEnabled::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSpiritShrineEnabled::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSpiritShrineDisabled
        inline Ent::Gen2::ActorState EntityStateSpiritShrineDisabled::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSpiritShrineDisabled::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSpiritAttacked
        inline Ent::Gen2::ActorState EntityStateSpiritAttacked::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSpiritAttacked::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSpiritAttack
        inline Ent::Gen2::ActorState EntityStateSpiritAttack::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSpiritAttack::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSpiritAnimalSoulForm
        inline Ent::Gen2::ActorState EntityStateSpiritAnimalSoulForm::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSpiritAnimalSoulForm::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSpiritAnimalFleshForm
        inline Ent::Gen2::ActorState EntityStateSpiritAnimalFleshForm::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSpiritAnimalFleshForm::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSpiritAnimalBeingCalled
        inline Ent::Gen2::ActorState EntityStateSpiritAnimalBeingCalled::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSpiritAnimalBeingCalled::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSpeedLimiter
        inline Ent::Gen2::Float EntityStateSpeedLimiter::SpeedMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedMax"));
        }
        inline Ent::Gen2::ActorState EntityStateSpeedLimiter::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSpeedLimiter::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSoftCollide
        inline Ent::Gen2::ActorState EntityStateSoftCollide::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSoftCollide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSnappedToHatchingTarget
        inline Ent::Gen2::ActorState EntityStateSnappedToHatchingTarget::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSnappedToHatchingTarget::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSlowMotion
        inline Ent::Gen2::ActorState EntityStateSlowMotion::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSlowMotion::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateShootHatchingEnergy
        inline Ent::Gen2::ActorState EntityStateShootHatchingEnergy::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateShootHatchingEnergy::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSetSavePoint
        inline Ent::Gen2::ActorState EntityStateSetSavePoint::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSetSavePoint::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateSavePointActivated
        inline Ent::Gen2::ActorState EntityStateSavePointActivated::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateSavePointActivated::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateRevive
        inline Ent::Gen2::EntityStateRevive_Inputs EntityStateRevive::Inputs() const
        {
            return Ent::Gen2::EntityStateRevive_Inputs(getProperty().getObjectField("Inputs"));
        }
        inline Ent::Gen2::ActorState EntityStateRevive::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateRevive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateRespawnability
        inline Ent::Gen2::EntityRef EntityStateRespawnability::RespawnPlaceEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("RespawnPlaceEntityRef"));
        }
        inline Ent::Gen2::ActorState EntityStateRespawnability::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateRespawnability::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateRespawn
        inline Ent::Gen2::ActorState EntityStateRespawn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateRespawn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateReserveMountSlots
        inline Ent::Gen2::MountableData EntityStateReserveMountSlots::MountableDataTo() const
        {
            return Ent::Gen2::MountableData(getProperty().getObjectField("MountableDataTo"));
        }
        inline Ent::Gen2::ActorState EntityStateReserveMountSlots::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateReserveMountSlots::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateRegainCapacity
        inline Ent::Gen2::ActorState EntityStateRegainCapacity::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateRegainCapacity::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateRecoverLand
        inline Ent::Gen2::ActorState EntityStateRecoverLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateRecoverLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateReadyToGiveOrder
        inline Ent::Gen2::ActorState EntityStateReadyToGiveOrder::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateReadyToGiveOrder::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateRaise
        inline Ent::Gen2::Float EntityStateRaise::Damages() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Damages"));
        }
        inline Ent::Gen2::EnergySide EntityStateRaise::EnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::ActorState EntityStateRaise::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateRaise::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStatePrepareToHoldingOnToNavigationMesh
        inline Ent::Gen2::ActorState EntityStatePrepareToHoldingOnToNavigationMesh::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStatePrepareToHoldingOnToNavigationMesh::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStatePlungeLand
        inline Ent::Gen2::ActorState EntityStatePlungeLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStatePlungeLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStatePlayer
        inline Ent::Gen2::ActorState EntityStatePlayer::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStatePlayer::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStatePickableDistributor
        inline Ent::Gen2::ActorState EntityStatePickableDistributor::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStatePickableDistributor::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStatePhysicsMove
        inline Ent::Gen2::Float EntityStatePhysicsMove::AngularVelocityMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngularVelocityMultiplier"));
        }
        inline Ent::Gen2::Float EntityStatePhysicsMove::CustomGravity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CustomGravity"));
        }
        inline Ent::Gen2::Float EntityStatePhysicsMove::ForceMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ForceMultiplier"));
        }
        inline Ent::Gen2::ActorState EntityStatePhysicsMove::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStatePhysicsMove::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStatePhysicsIdle
        inline Ent::Gen2::ActorState EntityStatePhysicsIdle::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStatePhysicsIdle::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateParryCooldown
        inline Ent::Gen2::ActorState EntityStateParryCooldown::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateParryCooldown::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateParry
        inline Ent::Gen2::ActorState EntityStateParry::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateParry::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateParried
        inline Ent::Gen2::ActorState EntityStateParried::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateParried::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateOrientedDrift
        inline Ent::Gen2::ActorState EntityStateOrientedDrift::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateOrientedDrift::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateOrderingAttack
        inline Ent::Gen2::ActorState EntityStateOrderingAttack::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateOrderingAttack::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateMoveOnOffMeshLink
        inline Ent::Gen2::ActorState EntityStateMoveOnOffMeshLink::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateMoveOnOffMeshLink::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateMotionConstrainedLand
        inline Ent::Gen2::ActorState EntityStateMotionConstrainedLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateMotionConstrainedLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateMotionConstrained
        inline Ent::Gen2::EntityStateMotionConstrained_Inputs EntityStateMotionConstrained::Inputs() const
        {
            return Ent::Gen2::EntityStateMotionConstrained_Inputs(getProperty().getObjectField("Inputs"));
        }
        inline Ent::Gen2::ActorState EntityStateMotionConstrained::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateMotionConstrained::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateMineScaling
        inline Ent::Gen2::ActorState EntityStateMineScaling::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateMineScaling::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateMineRespawning
        inline Ent::Gen2::ActorState EntityStateMineRespawning::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateMineRespawning::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateMeditateToInteract
        inline Ent::Gen2::ActorState EntityStateMeditateToInteract::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateMeditateToInteract::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateMask
        inline Ent::Gen2::String EntityStateMask::MaskMeshPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MaskMeshPath"));
        }
        inline Ent::Gen2::ActorState EntityStateMask::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateMask::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateManageChildEntityPool
        inline Ent::Gen2::EntityStateManageChildEntityPool_Inputs EntityStateManageChildEntityPool::Inputs() const
        {
            return Ent::Gen2::EntityStateManageChildEntityPool_Inputs(getProperty().getObjectField("Inputs"));
        }
        inline Ent::Gen2::ActorState EntityStateManageChildEntityPool::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateManageChildEntityPool::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateLateralLand
        inline Ent::Gen2::ActorState EntityStateLateralLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateLateralLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateLateralDodge
        inline Ent::Gen2::ActorState EntityStateLateralDodge::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateLateralDodge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateJustStarted
        inline Ent::Gen2::ActorState EntityStateJustStarted::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateJustStarted::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateJumpHeightMultiplier
        inline Ent::Gen2::Float EntityStateJumpHeightMultiplier::JumpHeightMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JumpHeightMultiplier"));
        }
        inline Ent::Gen2::ActorState EntityStateJumpHeightMultiplier::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateJumpHeightMultiplier::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateInteractedGPE
        inline Ent::Gen2::ActorState EntityStateInteractedGPE::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateInteractedGPE::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateInjured
        inline Ent::Gen2::ActorState EntityStateInjured::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateInjured::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateInconvertible
        inline Ent::Gen2::ActorState EntityStateInconvertible::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateInconvertible::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateIncapacitated
        inline Ent::Gen2::EntityStateIncapacitated_Inputs EntityStateIncapacitated::Inputs() const
        {
            return Ent::Gen2::EntityStateIncapacitated_Inputs(getProperty().getObjectField("Inputs"));
        }
        inline Ent::Gen2::ActorState EntityStateIncapacitated::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateIncapacitated::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateInVertebraeArea
        inline Ent::Gen2::ActorState EntityStateInVertebraeArea::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateInVertebraeArea::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateImmersedJump
        inline Ent::Gen2::ActorState EntityStateImmersedJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateImmersedJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateHoldingStaffVertebras
        inline Ent::Gen2::ActorState EntityStateHoldingStaffVertebras::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateHoldingStaffVertebras::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateHitWall
        inline Ent::Gen2::ActorState EntityStateHitWall::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateHitWall::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateHintNone
        inline Ent::Gen2::ActorState EntityStateHintNone::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateHintNone::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateHintLight
        inline Ent::Gen2::ActorState EntityStateHintLight::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateHintLight::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateHintFull
        inline Ent::Gen2::ActorState EntityStateHintFull::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateHintFull::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateHideOut
        inline Ent::Gen2::ActorState EntityStateHideOut::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateHideOut::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateHideIn
        inline Ent::Gen2::ActorState EntityStateHideIn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateHideIn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateHide
        inline Ent::Gen2::Bool EntityStateHide::ExitRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ExitRequired"));
        }
        inline Ent::Gen2::ActorState EntityStateHide::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateHide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGroundedJump
        inline Ent::Gen2::ActorState EntityStateGroundedJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGroundedJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGrasp
        inline Ent::Gen2::ActorState EntityStateGrasp::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGrasp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGrabbedOut
        inline Ent::Gen2::ActorState EntityStateGrabbedOut::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGrabbedOut::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGrabbedIn
        inline Ent::Gen2::ActorState EntityStateGrabbedIn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGrabbedIn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGrabbed
        inline Ent::Gen2::ActorState EntityStateGrabbed::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGrabbed::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGrabOut
        inline Ent::Gen2::ActorState EntityStateGrabOut::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGrabOut::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGrabIn
        inline Ent::Gen2::ActorState EntityStateGrabIn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGrabIn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGrabAttack
        inline Ent::Gen2::ActorState EntityStateGrabAttack::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGrabAttack::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateGrab
        inline Ent::Gen2::ActorState EntityStateGrab::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateGrab::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateForceCanBeTargeted
        inline Ent::Gen2::Bool EntityStateForceCanBeTargeted::CanBeTargeted() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CanBeTargeted"));
        }
        inline Ent::Gen2::ActorState EntityStateForceCanBeTargeted::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateForceCanBeTargeted::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateFastRun
        inline Ent::Gen2::ActorState EntityStateFastRun::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateFastRun::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateFallSafe
        inline Ent::Gen2::ActorState EntityStateFallSafe::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateFallSafe::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateFallInjured
        inline Ent::Gen2::ActorState EntityStateFallInjured::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateFallInjured::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateFallDying
        inline Ent::Gen2::ActorState EntityStateFallDying::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateFallDying::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateFall
        inline Ent::Gen2::ActorState EntityStateFall::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateFall::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateFailingOrder
        inline Ent::Gen2::ActorState EntityStateFailingOrder::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateFailingOrder::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateExtraLife
        inline Ent::Gen2::ActorState EntityStateExtraLife::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateExtraLife::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateEnergySpoutState
        inline Array<Ent::Gen2::EnergySideEvent> EntityStateEnergySpoutState::EnergySideEvents() const
        {
            return Array<Ent::Gen2::EnergySideEvent>(getProperty().getObjectField("EnergySideEvents"));
        }
        inline Ent::Gen2::ActorState EntityStateEnergySpoutState::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateEnergySpoutState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateEnergySide
        inline Ent::Gen2::EnergySide EntityStateEnergySide::EnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::ActorState EntityStateEnergySide::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateEnergySide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateEnergyRootHatching
        inline Ent::Gen2::ActorState EntityStateEnergyRootHatching::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateEnergyRootHatching::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateEnergyRootAbortHatching
        inline Ent::Gen2::ActorState EntityStateEnergyRootAbortHatching::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateEnergyRootAbortHatching::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateEjectedLand
        inline Ent::Gen2::ActorState EntityStateEjectedLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateEjectedLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateDodgeCooldown
        inline Ent::Gen2::ActorState EntityStateDodgeCooldown::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateDodgeCooldown::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateDisplayHatchingCost
        inline Ent::Gen2::ActorState EntityStateDisplayHatchingCost::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateDisplayHatchingCost::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateDisguise
        inline Ent::Gen2::Bool EntityStateDisguise::ExitRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ExitRequired"));
        }
        inline Ent::Gen2::ActorState EntityStateDisguise::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateDisguise::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateDisabledVertebrae
        inline Ent::Gen2::ActorState EntityStateDisabledVertebrae::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateDisabledVertebrae::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateDisablePerceptionRequest
        inline Ent::Gen2::ActorState EntityStateDisablePerceptionRequest::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateDisablePerceptionRequest::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateDeathLand
        inline Ent::Gen2::ActorState EntityStateDeathLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateDeathLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateDamageLand
        inline Ent::Gen2::ActorState EntityStateDamageLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateDamageLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCreatureProfile
        inline Ent::Gen2::CreatureProfile EntityStateCreatureProfile::Profile() const
        {
            return Ent::Gen2::CreatureProfile(getProperty().getObjectField("Profile"));
        }
        inline Ent::Gen2::ActorState EntityStateCreatureProfile::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateCreatureProfile::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCreatureHatching
        inline Ent::Gen2::EntityStateCreatureHatching_Inputs EntityStateCreatureHatching::Inputs() const
        {
            return Ent::Gen2::EntityStateCreatureHatching_Inputs(getProperty().getObjectField("Inputs"));
        }
        inline Ent::Gen2::ActorState EntityStateCreatureHatching::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateCreatureHatching::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateControlGPE
        inline Ent::Gen2::ActorState EntityStateControlGPE::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateControlGPE::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateConstrainedMove
        inline Ent::Gen2::ActorState EntityStateConstrainedMove::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateConstrainedMove::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateConstrainedInput
        inline Ent::Gen2::ActorState EntityStateConstrainedInput::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateConstrainedInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCombat
        inline Ent::Gen2::ActorState EntityStateCombat::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateCombat::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCollectVertebrae
        inline Ent::Gen2::ActorState EntityStateCollectVertebrae::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateCollectVertebrae::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float EntityStateCollectVertebrae::meditationDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("meditationDuration"));
        }
        // EntityStateClimbWaterfallImpulse
        inline Ent::Gen2::ActorState EntityStateClimbWaterfallImpulse::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateClimbWaterfallImpulse::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateClimbWaterfall
        inline Ent::Gen2::ActorState EntityStateClimbWaterfall::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateClimbWaterfall::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateClassicLand
        inline Ent::Gen2::ActorState EntityStateClassicLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateClassicLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateClassicDodge
        inline Ent::Gen2::ActorState EntityStateClassicDodge::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateClassicDodge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCinematicReady
        inline Ent::Gen2::ActorState EntityStateCinematicReady::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateCinematicReady::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCinematicCompleted
        inline Ent::Gen2::ActorState EntityStateCinematicCompleted::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateCinematicCompleted::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateChargingJump
        inline Ent::Gen2::ActorState EntityStateChargingJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateChargingJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateChargedJump
        inline Ent::Gen2::ActorState EntityStateChargedJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateChargedJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateChargeMode
        inline Ent::Gen2::EntityStateChargeMode_EntityStateChargeModeInputs EntityStateChargeMode::ChargeModeInputs() const
        {
            return Ent::Gen2::EntityStateChargeMode_EntityStateChargeModeInputs(getProperty().getObjectField("ChargeModeInputs"));
        }
        inline Ent::Gen2::ActorState EntityStateChargeMode::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateChargeMode::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCanNotBePerceived
        inline Ent::Gen2::ActorState EntityStateCanNotBePerceived::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateCanNotBePerceived::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateCallAndMountSpiritAnimal
        inline Ent::Gen2::ActorState EntityStateCallAndMountSpiritAnimal::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateCallAndMountSpiritAnimal::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBridgeBeingControlled
        inline Ent::Gen2::Float EntityStateBridgeBeingControlled::CollisionRaycastLength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CollisionRaycastLength"));
        }
        inline Ent::Gen2::Float EntityStateBridgeBeingControlled::HorizontalSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HorizontalSpeed"));
        }
        inline Ent::Gen2::ActorState EntityStateBridgeBeingControlled::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Float EntityStateBridgeBeingControlled::VerticalSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VerticalSpeed"));
        }
        inline Ent::Gen2::String EntityStateBridgeBeingControlled::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBridgeAttracted
        inline PrimArray<Ent::Gen2::EntityRef> EntityStateBridgeAttracted::AttachPointsRef() const
        {
            return PrimArray<Ent::Gen2::EntityRef>(getProperty().getObjectField("AttachPointsRef"));
        }
        inline Ent::Gen2::Float EntityStateBridgeAttracted::AttachTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AttachTime"));
        }
        inline Ent::Gen2::Position EntityStateBridgeAttracted::AttractionTarget() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("AttractionTarget"));
        }
        inline Ent::Gen2::EntityRef EntityStateBridgeAttracted::BridgeLinkRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("BridgeLinkRef"));
        }
        inline Ent::Gen2::Float EntityStateBridgeAttracted::GroundAttachRaycastLength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GroundAttachRaycastLength"));
        }
        inline Ent::Gen2::String EntityStateBridgeAttracted::HotspotName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("HotspotName"));
        }
        inline Ent::Gen2::Float EntityStateBridgeAttracted::MaximalAttachDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaximalAttachDistance"));
        }
        inline Ent::Gen2::ActorState EntityStateBridgeAttracted::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBridgeAttracted::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBridgeAttached
        inline Ent::Gen2::ActorState EntityStateBridgeAttached::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBridgeAttached::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBreakableEntire
        inline Ent::Gen2::ActorState EntityStateBreakableEntire::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBreakableEntire::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBreakableBroken
        inline Ent::Gen2::ActorState EntityStateBreakableBroken::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBreakableBroken::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBreakableBreaking
        inline Ent::Gen2::ActorState EntityStateBreakableBreaking::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBreakableBreaking::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBounceLand
        inline Ent::Gen2::ActorState EntityStateBounceLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBounceLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBounce
        inline Ent::Gen2::ActorState EntityStateBounce::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBounce::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBoidsHomePos
        inline Ent::Gen2::Position EntityStateBoidsHomePos::HomePosition() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("HomePosition"));
        }
        inline Ent::Gen2::ActorState EntityStateBoidsHomePos::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBoidsHomePos::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBittenDefense
        inline Ent::Gen2::ActorState EntityStateBittenDefense::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBittenDefense::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBitten
        inline Ent::Gen2::ActorState EntityStateBitten::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBitten::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBiteOut
        inline Ent::Gen2::ActorState EntityStateBiteOut::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBiteOut::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBiteIn
        inline Ent::Gen2::ActorState EntityStateBiteIn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBiteIn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBiteAttack
        inline Ent::Gen2::ActorState EntityStateBiteAttack::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBiteAttack::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBite
        inline Ent::Gen2::ActorState EntityStateBite::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBite::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBeingOnSpike
        inline Ent::Gen2::Float EntityStateBeingOnSpike::SpikeCooldown() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpikeCooldown"));
        }
        inline Ent::Gen2::Float EntityStateBeingOnSpike::SpikeDamage() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpikeDamage"));
        }
        inline Ent::Gen2::Int EntityStateBeingOnSpike::SpikeDeadlyHitCount() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SpikeDeadlyHitCount"));
        }
        inline Ent::Gen2::Bool EntityStateBeingOnSpike::SpikeEject() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("SpikeEject"));
        }
        inline Ent::Gen2::Float EntityStateBeingOnSpike::SpikeImpact() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpikeImpact"));
        }
        inline Ent::Gen2::ActorState EntityStateBeingOnSpike::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBeingOnSpike::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBeingOnSlope
        inline Ent::Gen2::ActorState EntityStateBeingOnSlope::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBeingOnSlope::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBeingLinked
        inline Ent::Gen2::ActorState EntityStateBeingLinked::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBeingLinked::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBeingInReeds
        inline Ent::Gen2::ActorState EntityStateBeingInReeds::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBeingInReeds::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBeingBlockedByVine
        inline Ent::Gen2::EntityRef EntityStateBeingBlockedByVine::Blocker() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("Blocker"));
        }
        inline Ent::Gen2::ActorState EntityStateBeingBlockedByVine::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBeingBlockedByVine::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBackwardLand
        inline Ent::Gen2::ActorState EntityStateBackwardLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBackwardLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateBackwardDodge
        inline Ent::Gen2::ActorState EntityStateBackwardDodge::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateBackwardDodge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateAttitudeGroggy
        inline Ent::Gen2::ActorState EntityStateAttitudeGroggy::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateAttitudeGroggy::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateAttackDive
        inline Ent::Gen2::ActorState EntityStateAttackDive::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateAttackDive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateAskStaffGuide
        inline Ent::Gen2::ActorState EntityStateAskStaffGuide::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateAskStaffGuide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateApplyExtraLife
        inline Ent::Gen2::ActorState EntityStateApplyExtraLife::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateApplyExtraLife::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateAirControl
        inline Ent::Gen2::ActorState EntityStateAirControl::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateAirControl::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateAimAt
        inline Ent::Gen2::ActorState EntityStateAimAt::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateAimAt::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateAerialJump
        inline Ent::Gen2::ActorState EntityStateAerialJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateAerialJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityStateAboutToBeHatched
        inline Ent::Gen2::ActorState EntityStateAboutToBeHatched::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String EntityStateAboutToBeHatched::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateTryUpgradeShamanStaff
        inline Ent::Gen2::ActorState ActorStateTryUpgradeShamanStaff::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateTryUpgradeShamanStaff::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateTryEquipShamanStaff
        inline Ent::Gen2::ActorState ActorStateTryEquipShamanStaff::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateTryEquipShamanStaff::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateTeleportWhileMoving
        inline Ent::Gen2::ActorState ActorStateTeleportWhileMoving::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateTeleportWhileMoving::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::ActorStateTeleportWhileMovingInputs ActorStateTeleportWhileMoving::input() const
        {
            return Ent::Gen2::ActorStateTeleportWhileMovingInputs(getProperty().getObjectField("input"));
        }
        // ActorStateTeleportToTarget
        inline Ent::Gen2::ActorState ActorStateTeleportToTarget::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateTeleportToTarget::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateTeleport
        inline Ent::Gen2::ActorStateTeleport_Inputs ActorStateTeleport::Inputs() const
        {
            return Ent::Gen2::ActorStateTeleport_Inputs(getProperty().getObjectField("Inputs"));
        }
        inline Ent::Gen2::ActorState ActorStateTeleport::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateTeleport::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateTaunting
        inline Ent::Gen2::ActorState ActorStateTaunting::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateTaunting::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateStopAttitudeAggressive
        inline Ent::Gen2::ActorState ActorStateStopAttitudeAggressive::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateStopAttitudeAggressive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSpeedMultiplier
        inline Ent::Gen2::Float ActorStateSpeedMultiplier::SpeedMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedMultiplier"));
        }
        inline Ent::Gen2::ActorState ActorStateSpeedMultiplier::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSpeedMultiplier::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSoulWaitingToRespawn
        inline Ent::Gen2::EnergySide ActorStateSoulWaitingToRespawn::EnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::ActorState ActorStateSoulWaitingToRespawn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSoulWaitingToRespawn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSoulRespawn
        inline Ent::Gen2::ActorState ActorStateSoulRespawn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSoulRespawn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSlope
        inline Ent::Gen2::ActorState ActorStateSlope::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSlope::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSleeping
        inline Ent::Gen2::ActorState ActorStateSleeping::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSleeping::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSkeletonPartPickUpState
        inline Ent::Gen2::ActorState ActorStateSkeletonPartPickUpState::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSkeletonPartPickUpState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSkeletonPartPickUpRequest
        inline Ent::Gen2::ActorState ActorStateSkeletonPartPickUpRequest::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSkeletonPartPickUpRequest::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSink
        inline Ent::Gen2::ActorState ActorStateSink::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSink::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateShootingFlow
        inline Ent::Gen2::ActorState ActorStateShootingFlow::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateShootingFlow::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateShapeshift
        inline Ent::Gen2::ActorState ActorStateShapeshift::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateShapeshift::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateShamanItemPartState
        inline Ent::Gen2::ActorState ActorStateShamanItemPartState::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateShamanItemPartState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateShamanItemLiving
        inline Ent::Gen2::Bool ActorStateShamanItemLiving::End() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("End"));
        }
        inline Ent::Gen2::ActorState ActorStateShamanItemLiving::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateShamanItemLiving::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateSendMission
        inline Ent::Gen2::ActorState ActorStateSendMission::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateSendMission::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateScreaming
        inline Ent::Gen2::ActorState ActorStateScreaming::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateScreaming::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateRequestingWaiting
        inline Ent::Gen2::ActorState ActorStateRequestingWaiting::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateRequestingWaiting::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateRequestingHealing
        inline Ent::Gen2::ActorState ActorStateRequestingHealing::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateRequestingHealing::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateRecover
        inline Ent::Gen2::ActorState ActorStateRecover::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateRecover::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateReactingLava
        inline Ent::Gen2::ActorState ActorStateReactingLava::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateReactingLava::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStatePossessGPE
        inline Ent::Gen2::ActorState ActorStatePossessGPE::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStatePossessGPE::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStatePossessFlocking
        inline Ent::Gen2::ActorState ActorStatePossessFlocking::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStatePossessFlocking::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateNavigationMesh
        inline Ent::Gen2::ActorState ActorStateNavigationMesh::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateNavigationMesh::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMovingSwim
        inline Ent::Gen2::ActorState ActorStateMovingSwim::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMovingSwim::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMovingStandUp
        inline Ent::Gen2::ActorState ActorStateMovingStandUp::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMovingStandUp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMovingRide
        inline Ent::Gen2::ActorState ActorStateMovingRide::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMovingRide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMovingProne
        inline Ent::Gen2::ActorState ActorStateMovingProne::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMovingProne::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMovingFly
        inline Ent::Gen2::ActorState ActorStateMovingFly::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMovingFly::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMovingFall
        inline Ent::Gen2::ActorState ActorStateMovingFall::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMovingFall::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMovingDive
        inline Ent::Gen2::ActorState ActorStateMovingDive::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMovingDive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMovingClamber
        inline Ent::Gen2::ActorState ActorStateMovingClamber::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMovingClamber::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMoveAlongBezier
        inline Ent::Gen2::ActorState ActorStateMoveAlongBezier::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMoveAlongBezier::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateMeetingLava
        inline Ent::Gen2::ActorState ActorStateMeetingLava::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateMeetingLava::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateLosingOxygen
        inline Ent::Gen2::ActorState ActorStateLosingOxygen::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateLosingOxygen::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateLeavingLava
        inline Ent::Gen2::ActorState ActorStateLeavingLava::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateLeavingLava::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateInvincible
        inline Ent::Gen2::ActorState ActorStateInvincible::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateInvincible::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateIKConstraint
        inline Ent::Gen2::ActorState ActorStateIKConstraint::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateIKConstraint::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateHoldingItem
        inline Ent::Gen2::EntityRef ActorStateHoldingItem::InventoryEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("InventoryEntityRef"));
        }
        inline Ent::Gen2::EntityRef ActorStateHoldingItem::ItemEntityRef() const
        {
            return Ent::Gen2::EntityRef(getProperty().getObjectField("ItemEntityRef"));
        }
        inline Ent::Gen2::ActorState ActorStateHoldingItem::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateHoldingItem::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateHitEnergyWall
        inline Ent::Gen2::ActorState ActorStateHitEnergyWall::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateHitEnergyWall::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateHeld
        inline Ent::Gen2::ActorState ActorStateHeld::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateHeld::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateHasNoBody
        inline Ent::Gen2::ActorState ActorStateHasNoBody::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateHasNoBody::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateForceAgainstSlope
        inline Ent::Gen2::ActorState ActorStateForceAgainstSlope::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateForceAgainstSlope::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateFluidSlowDown
        inline Ent::Gen2::ActorState ActorStateFluidSlowDown::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateFluidSlowDown::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateFlockingRigidbodyBeingActive
        inline Ent::Gen2::ActorState ActorStateFlockingRigidbodyBeingActive::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateFlockingRigidbodyBeingActive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateFlockingLiving
        inline Ent::Gen2::Bool ActorStateFlockingLiving::CanCreateHitRigidBodies() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("CanCreateHitRigidBodies"));
        }
        inline Ent::Gen2::Bool ActorStateFlockingLiving::Killed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Killed"));
        }
        inline Ent::Gen2::Bool ActorStateFlockingLiving::Regenerated() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Regenerated"));
        }
        inline Ent::Gen2::ActorState ActorStateFlockingLiving::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateFlockingLiving::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateFlockingIndividualSpawning
        inline Ent::Gen2::ActorState ActorStateFlockingIndividualSpawning::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateFlockingIndividualSpawning::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateFlockingChangingParams
        inline Ent::Gen2::ActorStateFlockingChangingParams_Params ActorStateFlockingChangingParams::Params() const
        {
            return Ent::Gen2::ActorStateFlockingChangingParams_Params(getProperty().getObjectField("Params"));
        }
        inline Ent::Gen2::ActorStateFlockingChangingParams_Params ActorStateFlockingChangingParams::ParamsBud() const
        {
            return Ent::Gen2::ActorStateFlockingChangingParams_Params(getProperty().getObjectField("ParamsBud"));
        }
        inline Ent::Gen2::Bool ActorStateFlockingChangingParams::ShouldApplyBudParam() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShouldApplyBudParam"));
        }
        inline Ent::Gen2::Bool ActorStateFlockingChangingParams::ShouldApplyParam() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ShouldApplyParam"));
        }
        inline Ent::Gen2::ActorState ActorStateFlockingChangingParams::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateFlockingChangingParams::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateFlockingAttackFlocking
        inline Ent::Gen2::ActorState ActorStateFlockingAttackFlocking::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateFlockingAttackFlocking::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateExitingFly
        inline Ent::Gen2::ActorState ActorStateExitingFly::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateExitingFly::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateEnergyShooting
        inline Ent::Gen2::ActorState ActorStateEnergyShooting::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateEnergyShooting::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateDucking
        inline Ent::Gen2::Bool ActorStateDucking::ExitRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ExitRequired"));
        }
        inline Ent::Gen2::ActorState ActorStateDucking::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateDucking::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateDodge3D
        inline Ent::Gen2::ActorState ActorStateDodge3D::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateDodge3D::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateDisabledOut
        inline Ent::Gen2::ActorState ActorStateDisabledOut::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateDisabledOut::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateDisabledIn
        inline Ent::Gen2::ActorState ActorStateDisabledIn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateDisabledIn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateDisabled
        inline Ent::Gen2::ActorState ActorStateDisabled::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateDisabled::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateDead
        inline Ent::Gen2::ActorState ActorStateDead::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateDead::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateCreature
        inline Ent::Gen2::Position ActorStateCreature::Position() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("Position"));
        }
        inline Ent::Gen2::Quat ActorStateCreature::Rotation() const
        {
            return Ent::Gen2::Quat(getProperty().getObjectField("Rotation"));
        }
        inline Ent::Gen2::ActorState ActorStateCreature::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateCreature::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateConvertWithFlow
        inline Ent::Gen2::ActorState ActorStateConvertWithFlow::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateConvertWithFlow::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateChargeSpendLife
        inline Ent::Gen2::ActorState ActorStateChargeSpendLife::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateChargeSpendLife::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateChangeEnergySide
        inline Ent::Gen2::EnergySide ActorStateChangeEnergySide::EnergySide() const
        {
            return Ent::Gen2::EnergySide(getProperty().getObjectField("EnergySide"));
        }
        inline Ent::Gen2::ActorState ActorStateChangeEnergySide::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateChangeEnergySide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateCatapultedLand
        inline Ent::Gen2::ActorState ActorStateCatapultedLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateCatapultedLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateCatapulted
        inline Ent::Gen2::Float ActorStateCatapulted::AirControlMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AirControlMultiplier"));
        }
        inline Ent::Gen2::Float ActorStateCatapulted::FallHeightProtection() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FallHeightProtection"));
        }
        inline Ent::Gen2::ActorState ActorStateCatapulted::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateCatapulted::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateCallingFollower
        inline Ent::Gen2::ActorState ActorStateCallingFollower::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateCallingFollower::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBuried
        inline Ent::Gen2::ActorState ActorStateBuried::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBuried::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBittenShaked
        inline Ent::Gen2::ActorState ActorStateBittenShaked::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBittenShaked::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBittenRegenerated
        inline Ent::Gen2::ActorState ActorStateBittenRegenerated::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBittenRegenerated::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBiteJumpOut
        inline Ent::Gen2::ActorState ActorStateBiteJumpOut::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBiteJumpOut::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBiteEntityLiving
        inline Ent::Gen2::Int ActorStateBiteEntityLiving::State() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("State"));
        }
        inline Ent::Gen2::ActorState ActorStateBiteEntityLiving::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBiteEntityLiving::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBendingTree
        inline Ent::Gen2::Bool ActorStateBendingTree::AttackInput() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AttackInput"));
        }
        inline Ent::Gen2::ActorState ActorStateBendingTree::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBendingTree::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBendingConstraint
        inline Ent::Gen2::ActorState ActorStateBendingConstraint::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBendingConstraint::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingRided
        inline Ent::Gen2::ActorState ActorStateBeingRided::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingRided::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingOnPossessedGPE
        inline Ent::Gen2::ActorState ActorStateBeingOnPossessedGPE::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingOnPossessedGPE::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingOnMount
        inline Ent::Gen2::MountableData ActorStateBeingOnMount::MountableData() const
        {
            return Ent::Gen2::MountableData(getProperty().getObjectField("MountableData"));
        }
        inline Ent::Gen2::ActorState ActorStateBeingOnMount::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingOnMount::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingOnGroundFromImmersed
        inline Ent::Gen2::ActorState ActorStateBeingOnGroundFromImmersed::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingOnGroundFromImmersed::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingOnGround
        inline Ent::Gen2::ActorState ActorStateBeingOnGround::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingOnGround::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingInAir
        inline Ent::Gen2::ActorState ActorStateBeingInAir::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingInAir::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingImmersedFromOnGround
        inline Ent::Gen2::ActorState ActorStateBeingImmersedFromOnGround::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingImmersedFromOnGround::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingImmersedFromInAir
        inline Ent::Gen2::ActorState ActorStateBeingImmersedFromInAir::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingImmersedFromInAir::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBeingImmersed
        inline Ent::Gen2::ActorState ActorStateBeingImmersed::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBeingImmersed::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateBehaviorState
        inline Ent::Gen2::Int ActorStateBehaviorState::State() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("State"));
        }
        inline Ent::Gen2::ActorState ActorStateBehaviorState::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateBehaviorState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateAttitudeAggressive
        inline Ent::Gen2::ActorState ActorStateAttitudeAggressive::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateAttitudeAggressive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateApplyHit
        inline Ent::Gen2::ActorState ActorStateApplyHit::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateApplyHit::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateAnsweringCall
        inline Ent::Gen2::ActorState ActorStateAnsweringCall::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateAnsweringCall::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateAlive
        inline Ent::Gen2::Float ActorStateAlive::Damages() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Damages"));
        }
        inline Ent::Gen2::ActorState ActorStateAlive::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateAlive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateAimCharge
        inline Ent::Gen2::ActorState ActorStateAimCharge::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActorStateAimCharge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionWait
        inline Ent::Gen2::Bool ActionWait::ExitRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ExitRequired"));
        }
        inline Ent::Gen2::ActorState ActionWait::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionWait::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionUnmount
        inline Ent::Gen2::MountableData ActionUnmount::MountableData() const
        {
            return Ent::Gen2::MountableData(getProperty().getObjectField("MountableData"));
        }
        inline Ent::Gen2::ActorState ActionUnmount::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionUnmount::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 ActionUnmount::acrobaticDirection() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("acrobaticDirection"));
        }
        inline Ent::Gen2::Bool ActionUnmount::acrobaticUnmount() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("acrobaticUnmount"));
        }
        inline Ent::Gen2::SpeedMode ActionUnmount::speedMode() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("speedMode"));
        }
        // ActionTriggerStandUp
        inline Ent::Gen2::ActorState ActionTriggerStandUp::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionTriggerStandUp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionTriggerShamanVisionExit
        inline Ent::Gen2::ActorState ActionTriggerShamanVisionExit::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionTriggerShamanVisionExit::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionTriggerCrouch
        inline Ent::Gen2::ActorState ActionTriggerCrouch::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionTriggerCrouch::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionTopView
        inline Ent::Gen2::ActorState ActionTopView::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionTopView::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionTalk
        inline Ent::Gen2::ActorState ActionTalk::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionTalk::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionTakeOff
        inline Ent::Gen2::ActorState ActionTakeOff::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionTakeOff::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStrafeTurn
        inline Ent::Gen2::ActorState ActionStrafeTurn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionStrafeTurn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStrafe
        inline Ent::Gen2::ActorState ActionStrafe::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionStrafe::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ActionStrafe::changeAnimationAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("changeAnimationAllowed"));
        }
        inline Ent::Gen2::Float ActionStrafe::speedrequired() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("speedrequired"));
        }
        inline Ent::Gen2::Vector3 ActionStrafe::trajectoryDir() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("trajectoryDir"));
        }
        inline Ent::Gen2::Vector3 ActionStrafe::visualDir() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("visualDir"));
        }
        // ActionStop
        inline Ent::Gen2::ActorState ActionStop::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionStop::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStartRun
        inline Ent::Gen2::ActorState ActionStartRun::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionStartRun::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionSlide
        inline Ent::Gen2::ActorState ActionSlide::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionSlide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionShootBeam
        inline Ent::Gen2::ActorState ActionShootBeam::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionShootBeam::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionShamanVision
        inline Ent::Gen2::ActorState ActionShamanVision::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionShamanVision::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionScaleRider
        inline Ent::Gen2::ActorState ActionScaleRider::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionScaleRider::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionRise
        inline Ent::Gen2::ActorState ActionRise::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionRise::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionRiderStance
        inline Ent::Gen2::ActorState ActionRiderStance::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionRiderStance::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionReviveMaskEffect
        inline Ent::Gen2::ActorState ActionReviveMaskEffect::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionReviveMaskEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionRagdoll
        inline Ent::Gen2::Int ActionRagdoll::State() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("State"));
        }
        inline Ent::Gen2::ActorState ActionRagdoll::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionRagdoll::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionQuadStandUpStateOut
        inline Ent::Gen2::ActorState ActionQuadStandUpStateOut::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionQuadStandUpStateOut::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionQuadStandUpStateIn
        inline Ent::Gen2::ActorState ActionQuadStandUpStateIn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionQuadStandUpStateIn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionQuadStandUpState
        inline Ent::Gen2::Bool ActionQuadStandUpState::ExitRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ExitRequired"));
        }
        inline Ent::Gen2::ActorState ActionQuadStandUpState::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionQuadStandUpState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionPushed
        inline Ent::Gen2::ActorState ActionPushed::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionPushed::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionPropelled
        inline Ent::Gen2::Float ActionPropelled::AirControlMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AirControlMultiplier"));
        }
        inline Ent::Gen2::Float ActionPropelled::FallHeightProtection() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FallHeightProtection"));
        }
        inline Ent::Gen2::Bool ActionPropelled::InstantVisualOrientation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("InstantVisualOrientation"));
        }
        inline Ent::Gen2::Vector3 ActionPropelled::PropelForce() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("PropelForce"));
        }
        inline Ent::Gen2::ActorState ActionPropelled::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionPropelled::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionPlayAnim
        inline Ent::Gen2::Float ActionPlayAnim::MaxTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxTime"));
        }
        inline Ent::Gen2::ActorState ActionPlayAnim::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionPlayAnim::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ActionPlayAnim::exitRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("exitRequired"));
        }
        // ActionPatinate
        inline Ent::Gen2::ActorState ActionPatinate::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionPatinate::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionPathfindAndMove
        inline Ent::Gen2::ActorState ActionPathfindAndMove::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionPathfindAndMove::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionOutfitSpecialState
        inline Ent::Gen2::ActorState ActionOutfitSpecialState::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionOutfitSpecialState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionOrientMount
        inline Ent::Gen2::ActorState ActionOrientMount::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionOrientMount::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 ActionOrientMount::m_direction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("m_direction"));
        }
        // ActionMoveTo
        inline Ent::Gen2::ActorState ActionMoveTo::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionMoveTo::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionMoveProjectile
        inline Ent::Gen2::ActorState ActionMoveProjectile::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::ProjectileTrajectory ActionMoveProjectile::Trajectory() const
        {
            return Ent::Gen2::ProjectileTrajectory(getProperty().getObjectField("Trajectory"));
        }
        inline Ent::Gen2::String ActionMoveProjectile::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionMove
        inline Ent::Gen2::Vector3 ActionMove::CurrentDirection() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("CurrentDirection"));
        }
        inline Ent::Gen2::Bool ActionMove::InstantReachSpeedRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("InstantReachSpeedRequired"));
        }
        inline Ent::Gen2::Float ActionMove::Speed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Speed"));
        }
        inline Ent::Gen2::SpeedMode ActionMove::SpeedModeDest() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("SpeedModeDest"));
        }
        inline Ent::Gen2::ActorState ActionMove::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionMove::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionMountReception
        inline Ent::Gen2::ActorState ActionMountReception::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionMountReception::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionLookAt
        inline Ent::Gen2::ActorState ActionLookAt::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionLookAt::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionLandingMount
        inline Ent::Gen2::ActorState ActionLandingMount::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionLandingMount::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionLand
        inline Ent::Gen2::ActorState ActionLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionJumpOnto
        inline Ent::Gen2::ActorState ActionJumpOnto::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionJumpOnto::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionJump
        inline Ent::Gen2::ActorState ActionJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ActionJump::jumpAnalog() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("jumpAnalog"));
        }
        // ActionIncarnated
        inline Ent::Gen2::ActorState ActionIncarnated::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionIncarnated::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionIncarnate
        inline Ent::Gen2::Bool ActionIncarnate::ExitRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ExitRequired"));
        }
        inline Ent::Gen2::String ActionIncarnate::GameEffectHash() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GameEffectHash"));
        }
        inline Ent::Gen2::ActorState ActionIncarnate::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionIncarnate::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionIdle
        inline Ent::Gen2::ActorState ActionIdle::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionIdle::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionHit
        inline Ent::Gen2::Hit ActionHit::Hit() const
        {
            return Ent::Gen2::Hit(getProperty().getObjectField("Hit"));
        }
        inline Ent::Gen2::Bool ActionHit::NoAnimNeeded() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("NoAnimNeeded"));
        }
        inline Ent::Gen2::ActorState ActionHit::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool ActionHit::TransferAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("TransferAllowed"));
        }
        inline Ent::Gen2::String ActionHit::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionFlyUp
        inline Ent::Gen2::ActorState ActionFlyUp::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionFlyUp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionFlyFlap
        inline Ent::Gen2::ActorState ActionFlyFlap::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionFlyFlap::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionFlyDown
        inline Ent::Gen2::ActorState ActionFlyDown::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionFlyDown::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionFlyDive
        inline Ent::Gen2::ActorState ActionFlyDive::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionFlyDive::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionFlyCrash
        inline Ent::Gen2::ActorState ActionFlyCrash::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionFlyCrash::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionDrop
        inline Ent::Gen2::ActorState ActionDrop::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDrop::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionDrift
        inline Ent::Gen2::ActorState ActionDrift::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDrift::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionDrawWeaponState
        inline Ent::Gen2::ActorState ActionDrawWeaponState::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDrawWeaponState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ActionDrawWeaponState::m_longRangeWeapon() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("m_longRangeWeapon"));
        }
        inline Ent::Gen2::Bool ActionDrawWeaponState::m_noDrawAnimation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("m_noDrawAnimation"));
        }
        inline Ent::Gen2::Bool ActionDrawWeaponState::m_offHandWeapon() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("m_offHandWeapon"));
        }
        inline Ent::Gen2::Float ActionDrawWeaponState::m_sheatheDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_sheatheDuration"));
        }
        inline Ent::Gen2::Bool ActionDrawWeaponState::m_shortDrawAnimation() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("m_shortDrawAnimation"));
        }
        inline Ent::Gen2::Float ActionDrawWeaponState::m_timer() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_timer"));
        }
        // ActionDrawWeapon
        inline Ent::Gen2::ActorState ActionDrawWeapon::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDrawWeapon::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionDrawAttention
        inline Ent::Gen2::ActorState ActionDrawAttention::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDrawAttention::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionDodge
        inline Ent::Gen2::ActorState ActionDodge::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDodge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionDisableAndFollow
        inline Ent::Gen2::ActorState ActionDisableAndFollow::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDisableAndFollow::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionDigUpTreasure
        inline Ent::Gen2::ActorState ActionDigUpTreasure::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDigUpTreasure::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionDecelerate
        inline Ent::Gen2::ActorState ActionDecelerate::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionDecelerate::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionCollapse
        inline Ent::Gen2::ActorState ActionCollapse::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionCollapse::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionClimbEdge
        inline Ent::Gen2::ActorState ActionClimbEdge::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionClimbEdge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::LedgePositionInfo ActionClimbEdge::ledgePosInfo() const
        {
            return Ent::Gen2::LedgePositionInfo(getProperty().getObjectField("ledgePosInfo"));
        }
        // ActionClamberRise
        inline Ent::Gen2::ActorState ActionClamberRise::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionClamberRise::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionClamberMove
        inline Ent::Gen2::ActorState ActionClamberMove::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionClamberMove::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionClamberLand
        inline Ent::Gen2::ActorState ActionClamberLand::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionClamberLand::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionClamberJumpOff
        inline Ent::Gen2::ActorState ActionClamberJumpOff::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionClamberJumpOff::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionClamberJump
        inline Ent::Gen2::ActorState ActionClamberJump::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionClamberJump::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionClamberDropOff
        inline Ent::Gen2::ActorState ActionClamberDropOff::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionClamberDropOff::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionCinematic
        inline Ent::Gen2::ActorState ActionCinematic::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionCinematic::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionChosen
        inline Ent::Gen2::Bool ActionChosen::ExitRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ExitRequired"));
        }
        inline Ent::Gen2::ActorState ActionChosen::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionChosen::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionChangeRidingSpot
        inline Ent::Gen2::ActorState ActionChangeRidingSpot::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Int ActionChangeRidingSpot::TargetHotspotDestID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("TargetHotspotDestID"));
        }
        inline Ent::Gen2::String ActionChangeRidingSpot::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionChangeMount
        inline Ent::Gen2::ActorState ActionChangeMount::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionChangeMount::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionCentrifugal
        inline Ent::Gen2::ActorState ActionCentrifugal::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionCentrifugal::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionCallForHelp
        inline Ent::Gen2::ActorState ActionCallForHelp::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionCallForHelp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionBrake
        inline Ent::Gen2::ActorState ActionBrake::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionBrake::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionBittenState
        inline Ent::Gen2::ActorState ActionBittenState::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionBittenState::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionBiteOut
        inline Ent::Gen2::ActorState ActionBiteOut::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionBiteOut::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionBiteIn
        inline Ent::Gen2::ActorState ActionBiteIn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionBiteIn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionBite
        inline Ent::Gen2::Float ActionBite::RadiusMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadiusMultiplier"));
        }
        inline Ent::Gen2::ActorState ActionBite::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionBite::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionAttackStomp
        inline Ent::Gen2::ActorState ActionAttackStomp::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionAttackStomp::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionAttackJumpOnto
        inline Ent::Gen2::Float ActionAttackJumpOnto::RadiusMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RadiusMultiplier"));
        }
        inline Ent::Gen2::ActorState ActionAttackJumpOnto::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionAttackJumpOnto::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ConditionalRigidityAttribute_Conditions
        inline PrimArray<Ent::Gen2::ActorCategory> ConditionalRigidityAttribute_Conditions::ActorCategories() const
        {
            return PrimArray<Ent::Gen2::ActorCategory>(getProperty().getObjectField("ActorCategories"));
        }
        inline PrimArray<Ent::Gen2::String> ConditionalRigidityAttribute_Conditions::ActorStates() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("ActorStates"));
        }
        inline Ent::Gen2::Vector2 ConditionalRigidityAttribute_Conditions::AngularVelocityFactorRange() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("AngularVelocityFactorRange"));
        }
        inline Ent::Gen2::Vector2 ConditionalRigidityAttribute_Conditions::DirectionDotRange() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("DirectionDotRange"));
        }
        inline Ent::Gen2::Vector2 ConditionalRigidityAttribute_Conditions::LinearVelocityFactorRange() const
        {
            return Ent::Gen2::Vector2(getProperty().getObjectField("LinearVelocityFactorRange"));
        }
        inline Ent::Gen2::String ConditionalRigidityAttribute_Conditions::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ConditionalRigidityAttribute
        inline Ent::Gen2::ConditionalRigidityAttribute_Attributes ConditionalRigidityAttribute::Attributes() const
        {
            return Ent::Gen2::ConditionalRigidityAttribute_Attributes(getProperty().getObjectField("Attributes"));
        }
        inline Ent::Gen2::ConditionalRigidityAttribute_Conditions ConditionalRigidityAttribute::Conditions() const
        {
            return Ent::Gen2::ConditionalRigidityAttribute_Conditions(getProperty().getObjectField("Conditions"));
        }
        inline Ent::Gen2::Bool ConditionalRigidityAttribute::Default() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Default"));
        }
        inline Ent::Gen2::String ConditionalRigidityAttribute::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String ConditionalRigidityAttribute::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimationTailConstraintsGD
        inline Ent::Gen2::Float AnimationTailConstraintsGD::AngularSpeedMaxForSpeedModeFurious() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngularSpeedMaxForSpeedModeFurious"));
        }
        inline Ent::Gen2::Float AnimationTailConstraintsGD::AngularSpeedMaxForSpeedModeNone() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngularSpeedMaxForSpeedModeNone"));
        }
        inline Ent::Gen2::Bool AnimationTailConstraintsGD::BoneInjectDirectionFromUseAmplitudeFactor() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("BoneInjectDirectionFromUseAmplitudeFactor"));
        }
        inline Ent::Gen2::String AnimationTailConstraintsGD::BoneNameEnd() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneNameEnd"));
        }
        inline Ent::Gen2::String AnimationTailConstraintsGD::BoneNameInjectDirectionFrom() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneNameInjectDirectionFrom"));
        }
        inline Ent::Gen2::String AnimationTailConstraintsGD::BoneNameStart() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BoneNameStart"));
        }
        inline Array<Ent::Gen2::Collider> AnimationTailConstraintsGD::Colliders() const
        {
            return Array<Ent::Gen2::Collider>(getProperty().getObjectField("Colliders"));
        }
        inline Ent::Gen2::Float AnimationTailConstraintsGD::CollidersRadiusFactorGrounded() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CollidersRadiusFactorGrounded"));
        }
        inline Ent::Gen2::Float AnimationTailConstraintsGD::CompensateSegmentStretchFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CompensateSegmentStretchFactor"));
        }
        inline Array<Ent::Gen2::ConditionalRigidityAttribute> AnimationTailConstraintsGD::ConditionalRigidityAttributes() const
        {
            return Array<Ent::Gen2::ConditionalRigidityAttribute>(getProperty().getObjectField("ConditionalRigidityAttributes"));
        }
        inline Array<Ent::Gen2::StickToGround> AnimationTailConstraintsGD::StickToGrounds() const
        {
            return Array<Ent::Gen2::StickToGround>(getProperty().getObjectField("StickToGrounds"));
        }
        inline Ent::Gen2::Float AnimationTailConstraintsGD::StickToGroundsGravity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("StickToGroundsGravity"));
        }
        inline Ent::Gen2::Float AnimationTailConstraintsGD::StickToGroundsGravityUnderwater() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("StickToGroundsGravityUnderwater"));
        }
        inline Ent::Gen2::Float AnimationTailConstraintsGD::StickToGroundsRadiusFactorDead() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("StickToGroundsRadiusFactorDead"));
        }
        inline Ent::Gen2::ComponentGD AnimationTailConstraintsGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AnimationTailConstraintsGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionTurn_Inputs
        inline Ent::Gen2::String ActionTurn_Inputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool ActionTurn_Inputs::checkDir() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("checkDir"));
        }
        inline Ent::Gen2::Vector3 ActionTurn_Inputs::directionREQUIRED() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("directionREQUIRED"));
        }
        inline Ent::Gen2::Bool ActionTurn_Inputs::speedModeUpdateAllowed() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("speedModeUpdateAllowed"));
        }
        inline Ent::Gen2::Bool ActionTurn_Inputs::useRequest() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("useRequest"));
        }
        // ActionTurn
        inline Ent::Gen2::ActorState ActionTurn::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionTurn::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Vector3 ActionTurn::direction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("direction"));
        }
        inline Ent::Gen2::ActionTurn_Inputs ActionTurn::inputs() const
        {
            return Ent::Gen2::ActionTurn_Inputs(getProperty().getObjectField("inputs"));
        }
        inline Ent::Gen2::Float ActionTurn::speedAtStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("speedAtStart"));
        }
        inline Ent::Gen2::SpeedMode ActionTurn::speedModeRequired() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("speedModeRequired"));
        }
        inline Ent::Gen2::SpeedMode ActionTurn::speedModeStart() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("speedModeStart"));
        }
        // ActionStateArbiter_StateStateDecision
        inline Ent::Gen2::String ActionStateArbiter_StateStateDecision::Current() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Current"));
        }
        inline Ent::Gen2::ActorStateArbiterDecision ActionStateArbiter_StateStateDecision::Decision() const
        {
            return Ent::Gen2::ActorStateArbiterDecision(getProperty().getObjectField("Decision"));
        }
        inline Ent::Gen2::String ActionStateArbiter_StateStateDecision::New() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("New"));
        }
        inline Ent::Gen2::String ActionStateArbiter_StateStateDecision::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_StateStateDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_StateStateDecision> ActionStateArbiter_StateStateDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_StateStateDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_StateStateDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_StateOrderPass
        inline Array<Ent::Gen2::Tuple<Ent::Gen2::String, Ent::Gen2::String>> ActionStateArbiter_StateOrderPass::Dependencies() const
        {
            return Array<Ent::Gen2::Tuple<Ent::Gen2::String, Ent::Gen2::String>>(getProperty().getObjectField("Dependencies"));
        }
        inline Ent::Gen2::String ActionStateArbiter_StateOrderPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_StateCategoryDecision
        inline Ent::Gen2::String ActionStateArbiter_StateCategoryDecision::Current() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Current"));
        }
        inline Ent::Gen2::ActorStateArbiterDecision ActionStateArbiter_StateCategoryDecision::Decision() const
        {
            return Ent::Gen2::ActorStateArbiterDecision(getProperty().getObjectField("Decision"));
        }
        inline Ent::Gen2::String ActionStateArbiter_StateCategoryDecision::New() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("New"));
        }
        inline Ent::Gen2::String ActionStateArbiter_StateCategoryDecision::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_StateCategoryDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_StateCategoryDecision> ActionStateArbiter_StateCategoryDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_StateCategoryDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_StateCategoryDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_StateAllDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_StateCategoryDecision> ActionStateArbiter_StateAllDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_StateCategoryDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_StateAllDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_CategoryStateDecision
        inline Ent::Gen2::String ActionStateArbiter_CategoryStateDecision::Current() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Current"));
        }
        inline Ent::Gen2::ActorStateArbiterDecision ActionStateArbiter_CategoryStateDecision::Decision() const
        {
            return Ent::Gen2::ActorStateArbiterDecision(getProperty().getObjectField("Decision"));
        }
        inline Ent::Gen2::String ActionStateArbiter_CategoryStateDecision::New() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("New"));
        }
        inline Ent::Gen2::String ActionStateArbiter_CategoryStateDecision::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_CategoryStateDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_CategoryStateDecision> ActionStateArbiter_CategoryStateDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_CategoryStateDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_CategoryStateDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_CategoryOrderPass
        inline PrimArray<Ent::Gen2::String> ActionStateArbiter_CategoryOrderPass::Order() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("Order"));
        }
        inline Ent::Gen2::String ActionStateArbiter_CategoryOrderPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_CategoryCategoryDecision
        inline Ent::Gen2::String ActionStateArbiter_CategoryCategoryDecision::Current() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Current"));
        }
        inline Ent::Gen2::ActorStateArbiterDecision ActionStateArbiter_CategoryCategoryDecision::Decision() const
        {
            return Ent::Gen2::ActorStateArbiterDecision(getProperty().getObjectField("Decision"));
        }
        inline Ent::Gen2::String ActionStateArbiter_CategoryCategoryDecision::New() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("New"));
        }
        inline Ent::Gen2::String ActionStateArbiter_CategoryCategoryDecision::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_PairDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_PairDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_PairDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_CategoryCategoryDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_CategoryCategoryDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_CategoryCategoryDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_CategoryAllDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_CategoryAllDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_CategoryAllDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_AllStateDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_CategoryStateDecision> ActionStateArbiter_AllStateDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_CategoryStateDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_AllStateDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_AllCategoryDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_AllCategoryDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_AllCategoryDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter_AllAllDecisionPass
        inline Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision> ActionStateArbiter_AllAllDecisionPass::Decisions() const
        {
            return Array<Ent::Gen2::ActionStateArbiter_CategoryCategoryDecision>(getProperty().getObjectField("Decisions"));
        }
        inline Ent::Gen2::String ActionStateArbiter_AllAllDecisionPass::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStateArbiter
        inline Ent::Gen2::ActionStateArbiter_AllAllDecisionPass ActionStateArbiter::AllAll() const
        {
            return Ent::Gen2::ActionStateArbiter_AllAllDecisionPass(getProperty().getObjectField("AllAll"));
        }
        inline Ent::Gen2::ActionStateArbiter_AllCategoryDecisionPass ActionStateArbiter::AllCategory() const
        {
            return Ent::Gen2::ActionStateArbiter_AllCategoryDecisionPass(getProperty().getObjectField("AllCategory"));
        }
        inline Ent::Gen2::ActionStateArbiter_AllStateDecisionPass ActionStateArbiter::AllState() const
        {
            return Ent::Gen2::ActionStateArbiter_AllStateDecisionPass(getProperty().getObjectField("AllState"));
        }
        inline Ent::Gen2::ActionStateArbiter_CategoryAllDecisionPass ActionStateArbiter::CategoryAll() const
        {
            return Ent::Gen2::ActionStateArbiter_CategoryAllDecisionPass(getProperty().getObjectField("CategoryAll"));
        }
        inline Ent::Gen2::ActionStateArbiter_CategoryCategoryDecisionPass ActionStateArbiter::CategoryCategory() const
        {
            return Ent::Gen2::ActionStateArbiter_CategoryCategoryDecisionPass(getProperty().getObjectField("CategoryCategory"));
        }
        inline PrimArray<Ent::Gen2::ActorCategory> ActionStateArbiter::CategoryNeedingRelay() const
        {
            return PrimArray<Ent::Gen2::ActorCategory>(getProperty().getObjectField("CategoryNeedingRelay"));
        }
        inline Ent::Gen2::ActionStateArbiter_CategoryOrderPass ActionStateArbiter::CategoryOrder() const
        {
            return Ent::Gen2::ActionStateArbiter_CategoryOrderPass(getProperty().getObjectField("CategoryOrder"));
        }
        inline Ent::Gen2::ActionStateArbiter_CategoryStateDecisionPass ActionStateArbiter::CategoryState() const
        {
            return Ent::Gen2::ActionStateArbiter_CategoryStateDecisionPass(getProperty().getObjectField("CategoryState"));
        }
        inline Ent::Gen2::ActionStateArbiter_PairDecisionPass ActionStateArbiter::Pair() const
        {
            return Ent::Gen2::ActionStateArbiter_PairDecisionPass(getProperty().getObjectField("Pair"));
        }
        inline Ent::Gen2::ActionStateArbiter_StateAllDecisionPass ActionStateArbiter::StateAll() const
        {
            return Ent::Gen2::ActionStateArbiter_StateAllDecisionPass(getProperty().getObjectField("StateAll"));
        }
        inline Ent::Gen2::ActionStateArbiter_StateCategoryDecisionPass ActionStateArbiter::StateCategory() const
        {
            return Ent::Gen2::ActionStateArbiter_StateCategoryDecisionPass(getProperty().getObjectField("StateCategory"));
        }
        inline Ent::Gen2::ActionStateArbiter_StateOrderPass ActionStateArbiter::StateOrder() const
        {
            return Ent::Gen2::ActionStateArbiter_StateOrderPass(getProperty().getObjectField("StateOrder"));
        }
        inline Ent::Gen2::ActionStateArbiter_StateStateDecisionPass ActionStateArbiter::StateState() const
        {
            return Ent::Gen2::ActionStateArbiter_StateStateDecisionPass(getProperty().getObjectField("StateState"));
        }
        inline Ent::Gen2::String ActionStateArbiter::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionStackFilter
        // ActionStackFilterRide
        inline Ent::Gen2::ActionStackFilter ActionStackFilterRide::Super() const
        {
            return Ent::Gen2::ActionStackFilter(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionStackFilterRide::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionShakeOffInputs
        inline Ent::Gen2::Bool ActionShakeOffInputs::TryEjectAllBiters() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("TryEjectAllBiters"));
        }
        inline Ent::Gen2::Bool ActionShakeOffInputs::UseRandomDirection() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseRandomDirection"));
        }
        inline Ent::Gen2::String ActionShakeOffInputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionShakeOff
        inline Ent::Gen2::ActionShakeOffInputs ActionShakeOff::Inputs() const
        {
            return Ent::Gen2::ActionShakeOffInputs(getProperty().getObjectField("Inputs"));
        }
        inline Ent::Gen2::ActorState ActionShakeOff::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionShakeOff::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // InGameCameraParams
        inline Ent::Gen2::Float InGameCameraParams::ActivationDelay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ActivationDelay"));
        }
        inline Ent::Gen2::ActionMode InGameCameraParams::AnimAction() const
        {
            return Ent::Gen2::ActionMode(getProperty().getObjectField("AnimAction"));
        }
        inline Ent::Gen2::AnimTag InGameCameraParams::AnimTag() const
        {
            return Ent::Gen2::AnimTag(getProperty().getObjectField("AnimTag"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationCameraSightTime() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationCameraSightTime"));
        }
        inline Ent::Gen2::Bool InGameCameraParams::AnticipationForceReset() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AnticipationForceReset"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationMaxPitch() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationMaxPitch"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationMaxYaw() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationMaxYaw"));
        }
        inline Ent::Gen2::Bool InGameCameraParams::AnticipationNoMoveLock() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AnticipationNoMoveLock"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationPitchAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationPitchAngleMax"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationPitchAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationPitchAngleMin"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationYawAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationYawAngleMax"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationYawAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationYawAngleMin"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AnticipationZSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AnticipationZSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AntipationYawSpeedForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AntipationYawSpeedForce"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AntipationYawSpeedForceSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AntipationYawSpeedForceSmooth"));
        }
        inline Ent::Gen2::AutoRotationType InGameCameraParams::AutoRotate() const
        {
            return Ent::Gen2::AutoRotationType(getProperty().getObjectField("AutoRotate"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotateIdealPitch() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotateIdealPitch"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotatePitchMaxSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotatePitchMaxSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotatePitchMinAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotatePitchMinAngle"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotatePitchSpeedSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotatePitchSpeedSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotateRollFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotateRollFactor"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotateUnlockPitchDelta() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotateUnlockPitchDelta"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotateUnlockYawDelta() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotateUnlockYawDelta"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotateYawMaxSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotateYawMaxSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotateYawMinAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotateYawMinAngle"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotateYawMinSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotateYawMinSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::AutoRotateYawSpeedSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AutoRotateYawSpeedSmooth"));
        }
        inline Ent::Gen2::CameraType InGameCameraParams::CameraType() const
        {
            return Ent::Gen2::CameraType(getProperty().getObjectField("CameraType"));
        }
        inline Ent::Gen2::Float InGameCameraParams::CollisionBackToPosSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CollisionBackToPosSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::CollisionCorrectionSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CollisionCorrectionSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::CollisionWantedNearPlane() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CollisionWantedNearPlane"));
        }
        inline Ent::Gen2::Float InGameCameraParams::CollisionZOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CollisionZOffset"));
        }
        inline Ent::Gen2::Float InGameCameraParams::CollisionZOffsetMaxRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CollisionZOffsetMaxRadius"));
        }
        inline Ent::Gen2::Float InGameCameraParams::CollisionZOffsetSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CollisionZOffsetSmooth"));
        }
        inline Ent::Gen2::Bool InGameCameraParams::DOFEnabled() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DOFEnabled"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DOFFarStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFFarStart"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DOFFarStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFFarStop"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DOFMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFMultiplier"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DOFNearStart() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFNearStart"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DOFNearStop() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DOFNearStop"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DecenteringPositionX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DecenteringPositionX"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DecenteringPositionY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DecenteringPositionY"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DecenteringPositionZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DecenteringPositionZ"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DistanceModifierRamp() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceModifierRamp"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DodgeLatenessSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DodgeLatenessSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::DodgeLatenessSmoothThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DodgeLatenessSmoothThreshold"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FOV() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FOV"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FOVRamp() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FOVRamp"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FightDistanceOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FightDistanceOffset"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FightDistanceOffsetSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FightDistanceOffsetSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FightRotationDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FightRotationDuration"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FightRotationInDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FightRotationInDuration"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FightRotationOutDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FightRotationOutDuration"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FightRotationSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FightRotationSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::FightSpeedRationImpactCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FightSpeedRationImpactCoeff"));
        }
        inline Ent::Gen2::Position InGameCameraParams::InterestPointPosition() const
        {
            return Ent::Gen2::Position(getProperty().getObjectField("InterestPointPosition"));
        }
        inline Ent::Gen2::Vector3 InGameCameraParams::InterestPointSight() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("InterestPointSight"));
        }
        inline Ent::Gen2::Float InGameCameraParams::InterestPointSightAngleSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InterestPointSightAngleSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::InterestPointTimeToReachMaxWeight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InterestPointTimeToReachMaxWeight"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoyAccelerationBoostChangingSideH() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoyAccelerationBoostChangingSideH"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoyAccelerationBoostChangingSideV() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoyAccelerationBoostChangingSideV"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoyAccelerationH() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoyAccelerationH"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoyAccelerationV() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoyAccelerationV"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoyDecelerationH() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoyDecelerationH"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoyDecelerationV() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoyDecelerationV"));
        }
        inline Ent::Gen2::ScaleConverter InGameCameraParams::JoyRotationScaleConverterH() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("JoyRotationScaleConverterH"));
        }
        inline Ent::Gen2::ScaleConverter InGameCameraParams::JoyRotationScaleConverterV() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("JoyRotationScaleConverterV"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoySpeedFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoySpeedFactor"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoySpeedMaxH() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoySpeedMaxH"));
        }
        inline Ent::Gen2::Float InGameCameraParams::JoySpeedMaxV() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("JoySpeedMaxV"));
        }
        inline Ent::Gen2::Bool InGameCameraParams::JumpEnable() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("JumpEnable"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockDecenteringDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockDecenteringDuration"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockDistSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockDistSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockEndTransitionThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockEndTransitionThreshold"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockLowSpeedDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockLowSpeedDist"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockMaxDecentering() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockMaxDecentering"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockMaxDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockMaxDist"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockMinCameraDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockMinCameraDist"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockOffsetTransitionSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockOffsetTransitionSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockPitchSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockPitchSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockPitchSpeedClose() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockPitchSpeedClose"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockSizeRatioThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockSizeRatioThreshold"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockTransitionSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockTransitionSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockTriggerDist() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockTriggerDist"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockYawSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockYawSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LockYawSpeedClose() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LockYawSpeedClose"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LookAtOffsetPitch() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LookAtOffsetPitch"));
        }
        inline Ent::Gen2::Float InGameCameraParams::LookAtOffsetYaw() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LookAtOffsetYaw"));
        }
        inline Ent::Gen2::Float InGameCameraParams::NearPlane() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("NearPlane"));
        }
        inline Ent::Gen2::Float InGameCameraParams::PitchConstraintAnticipation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PitchConstraintAnticipation"));
        }
        inline Ent::Gen2::Float InGameCameraParams::PitchConstraintMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PitchConstraintMax"));
        }
        inline Ent::Gen2::Float InGameCameraParams::PitchConstraintMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PitchConstraintMin"));
        }
        inline Ent::Gen2::Float InGameCameraParams::PitchToFOV() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PitchToFOV"));
        }
        inline Ent::Gen2::Float InGameCameraParams::SpacePitchOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpacePitchOffset"));
        }
        inline Ent::Gen2::ScaleConverter InGameCameraParams::SpeedToDistanceModifier() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("SpeedToDistanceModifier"));
        }
        inline Ent::Gen2::ScaleConverter InGameCameraParams::SpeedToFOV() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("SpeedToFOV"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetBrutalStopSmoothThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetBrutalStopSmoothThreshold"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetDeadZoneRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetDeadZoneRadius"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetDistance"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetJumpSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetJumpSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetMaxSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetMaxSpeed"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetMinSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetMinSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetOffsetX() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetOffsetX"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetOffsetY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetOffsetY"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetOffsetZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetOffsetZ"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetSmoothMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetSmoothMultiplier"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetSmoothMultiplierZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetSmoothMultiplierZ"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetXOffsetFromYawForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetXOffsetFromYawForce"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetXOffsetFromYawSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetXOffsetFromYawSmooth"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetZOffsetFromPitchForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetZOffsetFromPitchForce"));
        }
        inline Ent::Gen2::Float InGameCameraParams::TargetZOffsetFromPitchSmooth() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TargetZOffsetFromPitchSmooth"));
        }
        inline Ent::Gen2::Bool InGameCameraParams::UseSpeedToFOV() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseSpeedToFOV"));
        }
        inline Ent::Gen2::Float InGameCameraParams::WorldZOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("WorldZOffset"));
        }
        inline Ent::Gen2::String InGameCameraParams::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool InGameCameraParams::defaultParamsRequired() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("defaultParamsRequired"));
        }
        // InGameCameraObservationParams
        inline Ent::Gen2::String InGameCameraObservationParams::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::aim() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("aim"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::fps() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("fps"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::lock() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("lock"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::motionconstraint() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("motionconstraint"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::shoulder() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("shoulder"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::sightconstraint() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("sightconstraint"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::strongattack() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("strongattack"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::thirdperson() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("thirdperson"));
        }
        inline Ent::Gen2::InGameCameraParams InGameCameraObservationParams::zoom() const
        {
            return Ent::Gen2::InGameCameraParams(getProperty().getObjectField("zoom"));
        }
        // InGameCameraData
        inline Ent::Gen2::String InGameCameraData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::cinematic() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("cinematic"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::clamber() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("clamber"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::crouch() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("crouch"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::dive() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("dive"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::fall() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("fall"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::fight() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("fight"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::fly() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("fly"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::prone() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("prone"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::ridden() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("ridden"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::riddenfly() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("riddenfly"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::ride() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("ride"));
        }
        inline Array<Ent::Gen2::CameraSoundEvent> InGameCameraData::soundEvents() const
        {
            return Array<Ent::Gen2::CameraSoundEvent>(getProperty().getObjectField("soundEvents"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::standup() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("standup"));
        }
        inline Ent::Gen2::InGameCameraObservationParams InGameCameraData::swim() const
        {
            return Ent::Gen2::InGameCameraObservationParams(getProperty().getObjectField("swim"));
        }
        // ChargedJumpAnimation
        inline Ent::Gen2::String ChargedJumpAnimation::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::ActionMode ChargedJumpAnimation::animActionMode() const
        {
            return Ent::Gen2::ActionMode(getProperty().getObjectField("animActionMode"));
        }
        inline Ent::Gen2::Float ChargedJumpAnimation::lerpFactorScaleXY() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("lerpFactorScaleXY"));
        }
        inline Ent::Gen2::Float ChargedJumpAnimation::lerpFactorScaleZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("lerpFactorScaleZ"));
        }
        inline Ent::Gen2::ScaleConverter ChargedJumpAnimation::scaleByPower() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("scaleByPower"));
        }
        // ChargedJumpGD
        inline Ent::Gen2::ComponentGD ChargedJumpGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ChargedJumpGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float ChargedJumpGD::bounceJumpTimeWindow() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("bounceJumpTimeWindow"));
        }
        inline Array<Ent::Gen2::ChargedJumpAnimation> ChargedJumpGD::chargedJumpAnimations() const
        {
            return Array<Ent::Gen2::ChargedJumpAnimation>(getProperty().getObjectField("chargedJumpAnimations"));
        }
        inline Ent::Gen2::Float ChargedJumpGD::chargingDecelerationFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("chargingDecelerationFactor"));
        }
        inline Ent::Gen2::ScaleConverter ChargedJumpGD::nextJumpPowerByFallHeight() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("nextJumpPowerByFallHeight"));
        }
        // BoidParams
        inline Ent::Gen2::Float BoidParams::Acceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Acceleration"));
        }
        inline Ent::Gen2::ActionMode BoidParams::Action() const
        {
            return Ent::Gen2::ActionMode(getProperty().getObjectField("Action"));
        }
        inline Ent::Gen2::ActionMode BoidParams::ActionSecondary() const
        {
            return Ent::Gen2::ActionMode(getProperty().getObjectField("ActionSecondary"));
        }
        inline Ent::Gen2::Float BoidParams::AlignmentDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AlignmentDistance"));
        }
        inline Ent::Gen2::Float BoidParams::AlignmentStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AlignmentStrength"));
        }
        inline Ent::Gen2::Bool BoidParams::AllowMerge() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AllowMerge"));
        }
        inline Ent::Gen2::Float BoidParams::AngularSlerpCoeff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngularSlerpCoeff"));
        }
        inline Ent::Gen2::Float BoidParams::AngularSpeedMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AngularSpeedMax"));
        }
        inline Ent::Gen2::Bool BoidParams::AnimFromStart() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("AnimFromStart"));
        }
        inline Ent::Gen2::Bool BoidParams::BlockProcess() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("BlockProcess"));
        }
        inline Ent::Gen2::Bool BoidParams::ClampVerticalAngle() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("ClampVerticalAngle"));
        }
        inline Ent::Gen2::Float BoidParams::CohesionStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CohesionStrength"));
        }
        inline Ent::Gen2::Float BoidParams::DragForce() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DragForce"));
        }
        inline Ent::Gen2::Float BoidParams::EntityDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("EntityDistance"));
        }
        inline Ent::Gen2::Bool BoidParams::FlapBehavior() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("FlapBehavior"));
        }
        inline Ent::Gen2::Float BoidParams::FlattenZFactorLeaves() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FlattenZFactorLeaves"));
        }
        inline Ent::Gen2::Float BoidParams::FlattenZFactorRoots() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FlattenZFactorRoots"));
        }
        inline Ent::Gen2::Float BoidParams::FollowEmitterStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FollowEmitterStrength"));
        }
        inline Ent::Gen2::BoidGoalMode BoidParams::GoalMode() const
        {
            return Ent::Gen2::BoidGoalMode(getProperty().getObjectField("GoalMode"));
        }
        inline Ent::Gen2::Bool BoidParams::GroundRepulse() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("GroundRepulse"));
        }
        inline Ent::Gen2::Float BoidParams::GroundRepulseHeight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GroundRepulseHeight"));
        }
        inline Ent::Gen2::Float BoidParams::GroundRepulseStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GroundRepulseStrength"));
        }
        inline Ent::Gen2::Float BoidParams::InitialInertiaFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InitialInertiaFactor"));
        }
        inline Ent::Gen2::Float BoidParams::InitialInertiaVerticalFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("InitialInertiaVerticalFactor"));
        }
        inline Ent::Gen2::Float BoidParams::LightBrightness() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LightBrightness"));
        }
        inline Ent::Gen2::Color BoidParams::LightColor() const
        {
            return Ent::Gen2::Color(getProperty().getObjectField("LightColor"));
        }
        inline Ent::Gen2::LocomotionMode BoidParams::Locomotion() const
        {
            return Ent::Gen2::LocomotionMode(getProperty().getObjectField("Locomotion"));
        }
        inline Ent::Gen2::Float BoidParams::MaxVerticalAngle() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxVerticalAngle"));
        }
        inline Ent::Gen2::Float BoidParams::MaxVerticalAngleVariation() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MaxVerticalAngleVariation"));
        }
        inline Ent::Gen2::Int BoidParams::NbMaxNewChildren() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("NbMaxNewChildren"));
        }
        inline Ent::Gen2::Bool BoidParams::OnGround() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("OnGround"));
        }
        inline Ent::Gen2::Float BoidParams::RepulsionStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RepulsionStrength"));
        }
        inline Ent::Gen2::Float BoidParams::RotateBendFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("RotateBendFactor"));
        }
        inline Ent::Gen2::Bool BoidParams::SightZ() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("SightZ"));
        }
        inline Array<Ent::Gen2::BoidSpeedMaxData> BoidParams::SpeedMaxData() const
        {
            return Array<Ent::Gen2::BoidSpeedMaxData>(getProperty().getObjectField("SpeedMaxData"));
        }
        inline Ent::Gen2::SpeedMode BoidParams::SpeedMode() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("SpeedMode"));
        }
        inline Ent::Gen2::Float BoidParams::SpeedRandomMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SpeedRandomMultiplier"));
        }
        inline Ent::Gen2::StyleMode BoidParams::StyleMode() const
        {
            return Ent::Gen2::StyleMode(getProperty().getObjectField("StyleMode"));
        }
        inline Ent::Gen2::Float BoidParams::UpdateForceFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("UpdateForceFactor"));
        }
        inline Ent::Gen2::Float BoidParams::UpdateInertiaFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("UpdateInertiaFactor"));
        }
        inline Ent::Gen2::Float BoidParams::VerticalMasterPositionOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VerticalMasterPositionOffset"));
        }
        inline Ent::Gen2::Int BoidParams::VisibilityStateFrameDelay() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("VisibilityStateFrameDelay"));
        }
        inline Ent::Gen2::Bool BoidParams::Visible() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Visible"));
        }
        inline Ent::Gen2::Float BoidParams::VisualScaleMultiplierAtStartup() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VisualScaleMultiplierAtStartup"));
        }
        inline Ent::Gen2::String BoidParams::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String BoidParams::_name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_name"));
        }
        // AnimationModelComponentInput_ActionMode
        inline Ent::Gen2::String AnimationModelComponentInput_ActionMode::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool AnimationModelComponentInput_ActionMode::engaged() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("engaged"));
        }
        inline Ent::Gen2::ActionMode AnimationModelComponentInput_ActionMode::val() const
        {
            return Ent::Gen2::ActionMode(getProperty().getObjectField("val"));
        }
        // AnimationModelComponentInput
        inline Ent::Gen2::AnimationModelComponentInput_ActionMode AnimationModelComponentInput::ActionMode() const
        {
            return Ent::Gen2::AnimationModelComponentInput_ActionMode(getProperty().getObjectField("ActionMode"));
        }
        inline Ent::Gen2::AdditionnalTag AnimationModelComponentInput::AdditionnalTag() const
        {
            return Ent::Gen2::AdditionnalTag(getProperty().getObjectField("AdditionnalTag"));
        }
        inline Ent::Gen2::AnimationModelComponentInput_AnimTag AnimationModelComponentInput::AnimTag() const
        {
            return Ent::Gen2::AnimationModelComponentInput_AnimTag(getProperty().getObjectField("AnimTag"));
        }
        inline Ent::Gen2::AnimationModelComponentInput_AttitudeMode AnimationModelComponentInput::AttitudeMode() const
        {
            return Ent::Gen2::AnimationModelComponentInput_AttitudeMode(getProperty().getObjectField("AttitudeMode"));
        }
        inline Ent::Gen2::AnimationModelComponentInput_CarryMode AnimationModelComponentInput::CarryMode() const
        {
            return Ent::Gen2::AnimationModelComponentInput_CarryMode(getProperty().getObjectField("CarryMode"));
        }
        inline Ent::Gen2::ForceBlendIn AnimationModelComponentInput::ForceBlendIn() const
        {
            return Ent::Gen2::ForceBlendIn(getProperty().getObjectField("ForceBlendIn"));
        }
        inline Ent::Gen2::ForceBlendInReachRequired AnimationModelComponentInput::ForceBlendInReachRequired() const
        {
            return Ent::Gen2::ForceBlendInReachRequired(getProperty().getObjectField("ForceBlendInReachRequired"));
        }
        inline Ent::Gen2::AnimationModelComponentInput_LocomotionMode AnimationModelComponentInput::LocomotionMode() const
        {
            return Ent::Gen2::AnimationModelComponentInput_LocomotionMode(getProperty().getObjectField("LocomotionMode"));
        }
        inline Ent::Gen2::PlayRatio AnimationModelComponentInput::PlayRatio() const
        {
            return Ent::Gen2::PlayRatio(getProperty().getObjectField("PlayRatio"));
        }
        inline Ent::Gen2::AnimationModelComponentInput_SpeedMode AnimationModelComponentInput::SpeedMode() const
        {
            return Ent::Gen2::AnimationModelComponentInput_SpeedMode(getProperty().getObjectField("SpeedMode"));
        }
        inline Ent::Gen2::SpeedModeMax AnimationModelComponentInput::SpeedModeMax() const
        {
            return Ent::Gen2::SpeedModeMax(getProperty().getObjectField("SpeedModeMax"));
        }
        inline Ent::Gen2::SpeedScaleXY AnimationModelComponentInput::SpeedScaleXY() const
        {
            return Ent::Gen2::SpeedScaleXY(getProperty().getObjectField("SpeedScaleXY"));
        }
        inline Ent::Gen2::AnimationModelComponentInput_StyleMode AnimationModelComponentInput::StyleMode() const
        {
            return Ent::Gen2::AnimationModelComponentInput_StyleMode(getProperty().getObjectField("StyleMode"));
        }
        inline Ent::Gen2::ComponentInput AnimationModelComponentInput::Super() const
        {
            return Ent::Gen2::ComponentInput(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::VariantAllowed AnimationModelComponentInput::VariantAllowed() const
        {
            return Ent::Gen2::VariantAllowed(getProperty().getObjectField("VariantAllowed"));
        }
        inline Ent::Gen2::String AnimationModelComponentInput::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnimTags
        inline Ent::Gen2::ActionMode AnimTags::ActionMode() const
        {
            return Ent::Gen2::ActionMode(getProperty().getObjectField("ActionMode"));
        }
        inline Ent::Gen2::AnimAdditionalTag AnimTags::AnimAdditionalTag() const
        {
            return Ent::Gen2::AnimAdditionalTag(getProperty().getObjectField("AnimAdditionalTag"));
        }
        inline Ent::Gen2::AnimTag AnimTags::AnimTag() const
        {
            return Ent::Gen2::AnimTag(getProperty().getObjectField("AnimTag"));
        }
        inline Ent::Gen2::AttitudeMode AnimTags::AttitudeMode() const
        {
            return Ent::Gen2::AttitudeMode(getProperty().getObjectField("AttitudeMode"));
        }
        inline Ent::Gen2::CarryMode AnimTags::CarryMode() const
        {
            return Ent::Gen2::CarryMode(getProperty().getObjectField("CarryMode"));
        }
        inline Ent::Gen2::LocomotionMode AnimTags::LocomotionMode() const
        {
            return Ent::Gen2::LocomotionMode(getProperty().getObjectField("LocomotionMode"));
        }
        inline Ent::Gen2::Float AnimTags::PlayRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("PlayRatio"));
        }
        inline Ent::Gen2::SpeedMode AnimTags::SpeedMode() const
        {
            return Ent::Gen2::SpeedMode(getProperty().getObjectField("SpeedMode"));
        }
        inline Ent::Gen2::StyleMode AnimTags::StyleMode() const
        {
            return Ent::Gen2::StyleMode(getProperty().getObjectField("StyleMode"));
        }
        inline Ent::Gen2::String AnimTags::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionEmote
        inline Ent::Gen2::ActionMode ActionEmote::AnimAction() const
        {
            return Ent::Gen2::ActionMode(getProperty().getObjectField("AnimAction"));
        }
        inline Ent::Gen2::ActorState ActionEmote::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionEmote::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionAimProjectile
        inline Ent::Gen2::ActorState ActionAimProjectile::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionAimProjectile::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::ActionMode ActionAimProjectile::actionMode() const
        {
            return Ent::Gen2::ActionMode(getProperty().getObjectField("actionMode"));
        }
        // ActionAttack_AttackOutputs
        inline Ent::Gen2::AnimTags ActionAttack_AttackOutputs::AnimTags() const
        {
            return Ent::Gen2::AnimTags(getProperty().getObjectField("AnimTags"));
        }
        inline Ent::Gen2::Vector3 ActionAttack_AttackOutputs::Direction() const
        {
            return Ent::Gen2::Vector3(getProperty().getObjectField("Direction"));
        }
        inline Ent::Gen2::String ActionAttack_AttackOutputs::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActionAttack
        inline Ent::Gen2::ActionAttack_AttackOutputs ActionAttack::Outputs() const
        {
            return Ent::Gen2::ActionAttack_AttackOutputs(getProperty().getObjectField("Outputs"));
        }
        inline Ent::Gen2::ActorState ActionAttack::Super() const
        {
            return Ent::Gen2::ActorState(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ActionAttack::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AbilityData
        inline Ent::Gen2::String AbilityData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline PrimArray<Ent::Gen2::ActorAbility> AbilityData::abilities() const
        {
            return PrimArray<Ent::Gen2::ActorAbility>(getProperty().getObjectField("abilities"));
        }
        // ActorGD
        inline Ent::Gen2::Archetype ActorGD::Archetype() const
        {
            return Ent::Gen2::Archetype(getProperty().getObjectField("Archetype"));
        }
        inline Ent::Gen2::StyleMode ActorGD::ClassStyleTag() const
        {
            return Ent::Gen2::StyleMode(getProperty().getObjectField("ClassStyleTag"));
        }
        inline Ent::Gen2::String ActorGD::FactionName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("FactionName"));
        }
        inline Ent::Gen2::String ActorGD::Icon() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Icon"));
        }
        inline Ent::Gen2::Bool ActorGD::InSpiritWorld() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("InSpiritWorld"));
        }
        inline Ent::Gen2::Specie ActorGD::Specie() const
        {
            return Ent::Gen2::Specie(getProperty().getObjectField("Specie"));
        }
        inline Ent::Gen2::ComponentGD ActorGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Bool ActorGD::Weapon() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Weapon"));
        }
        inline Ent::Gen2::String ActorGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::AbilityData ActorGD::abilityData() const
        {
            return Ent::Gen2::AbilityData(getProperty().getObjectField("abilityData"));
        }
        inline Ent::Gen2::AttackData ActorGD::attackData() const
        {
            return Ent::Gen2::AttackData(getProperty().getObjectField("attackData"));
        }
        inline Ent::Gen2::ImpactAndSolidityData ActorGD::impactAndSolidityData() const
        {
            return Ent::Gen2::ImpactAndSolidityData(getProperty().getObjectField("impactAndSolidityData"));
        }
        inline Ent::Gen2::ProjectileData ActorGD::projectileData() const
        {
            return Ent::Gen2::ProjectileData(getProperty().getObjectField("projectileData"));
        }
        inline Ent::Gen2::Float ActorGD::radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("radius"));
        }
        inline Ent::Gen2::ShootData ActorGD::shootData() const
        {
            return Ent::Gen2::ShootData(getProperty().getObjectField("shootData"));
        }
        inline Ent::Gen2::StunData ActorGD::stunData() const
        {
            return Ent::Gen2::StunData(getProperty().getObjectField("stunData"));
        }
        inline Ent::Gen2::Float ActorGD::volume() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("volume"));
        }
        // ProjectileGD
        inline Ent::Gen2::ActorGD ProjectileGD::Super() const
        {
            return Ent::Gen2::ActorGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ProjectileGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // CreatureGD
        inline Ent::Gen2::Bool CreatureGD::DisableLookAt() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisableLookAt"));
        }
        inline Ent::Gen2::Float CreatureGD::FlyPitchAngleMax() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FlyPitchAngleMax"));
        }
        inline Ent::Gen2::Float CreatureGD::FlyPitchAngleMin() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FlyPitchAngleMin"));
        }
        inline Ent::Gen2::Bool CreatureGD::IsBig() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsBig"));
        }
        inline Ent::Gen2::Bool CreatureGD::IsDivinity() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsDivinity"));
        }
        inline Ent::Gen2::Bool CreatureGD::IsGuardian() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsGuardian"));
        }
        inline Ent::Gen2::Bool CreatureGD::IsStaff() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsStaff"));
        }
        inline Ent::Gen2::Bool CreatureGD::SpawnSoulIfNoEnemy() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("SpawnSoulIfNoEnemy"));
        }
        inline Ent::Gen2::SpeedFastMinDuration CreatureGD::SpeedFastMinDuration() const
        {
            return Ent::Gen2::SpeedFastMinDuration(getProperty().getObjectField("SpeedFastMinDuration"));
        }
        inline Ent::Gen2::ActorGD CreatureGD::Super() const
        {
            return Ent::Gen2::ActorGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String CreatureGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::BiteData CreatureGD::biteData() const
        {
            return Ent::Gen2::BiteData(getProperty().getObjectField("biteData"));
        }
        inline Ent::Gen2::CreatureDangerousness CreatureGD::dangerousnessData() const
        {
            return Ent::Gen2::CreatureDangerousness(getProperty().getObjectField("dangerousnessData"));
        }
        inline Ent::Gen2::RevivedData CreatureGD::revivedData() const
        {
            return Ent::Gen2::RevivedData(getProperty().getObjectField("revivedData"));
        }
        // ClothGD
        inline Ent::Gen2::String ClothGD::BodyEventsPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BodyEventsPath"));
        }
        inline Ent::Gen2::String ClothGD::BodyNamePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BodyNamePath"));
        }
        inline PrimArray<Ent::Gen2::String> ClothGD::SoundBanks() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("SoundBanks"));
        }
        inline Ent::Gen2::SoundEventMapping ClothGD::SoundEventMappingRules() const
        {
            return Ent::Gen2::SoundEventMapping(getProperty().getObjectField("SoundEventMappingRules"));
        }
        inline Ent::Gen2::ActorGD ClothGD::Super() const
        {
            return Ent::Gen2::ActorGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String ClothGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RenderManager_RenderConfig
        inline Ent::Gen2::AaMode RenderManager_RenderConfig::AaMode() const
        {
            return Ent::Gen2::AaMode(getProperty().getObjectField("AaMode"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::ClusteredLighting() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ClusteredLighting"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::DisplacementMapSize() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("DisplacementMapSize"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableAsyncPipelineCreation() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableAsyncPipelineCreation"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableColorCorrection() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableColorCorrection"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableComputeForDeferredLighting() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableComputeForDeferredLighting"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableComputeForUnderWater() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableComputeForUnderWater"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableDepthOfField() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableDepthOfField"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableFurTranslucency() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableFurTranslucency"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableLensFlare() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableLensFlare"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableMTR() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableMTR"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableMotionBlur() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableMotionBlur"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableNonBlockingDrawUpdates() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableNonBlockingDrawUpdates"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableSSAO() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableSSAO"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableSSCS() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableSSCS"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableSSR() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableSSR"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableSSSS() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableSSSS"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableTonemapping() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableTonemapping"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableUnderwaterPostEffect() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableUnderwaterPostEffect"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::EnableVegetationDrawDatabase() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("EnableVegetationDrawDatabase"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::FurFocusShadowMapResolution() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("FurFocusShadowMapResolution"));
        }
        inline Ent::Gen2::Float RenderManager_RenderConfig::GlobalLODBias() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GlobalLODBias"));
        }
        inline Ent::Gen2::Float RenderManager_RenderConfig::GlobalLODScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("GlobalLODScale"));
        }
        inline Ent::Gen2::Float RenderManager_RenderConfig::LODDecimationFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LODDecimationFactor"));
        }
        inline Ent::Gen2::String RenderManager_RenderConfig::MaterialBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("MaterialBank"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::MaxActiveShadowLights() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxActiveShadowLights"));
        }
        inline Ent::Gen2::Float RenderManager_RenderConfig::MinTriangleSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MinTriangleSize"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::ParticleLigthingAtlasSize() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ParticleLigthingAtlasSize"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::PlanarReflectionsDownsample() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("PlanarReflectionsDownsample"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::Quality() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Quality"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::QualityDepthOfField() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("QualityDepthOfField"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::RemoveTemporalNaNs() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("RemoveTemporalNaNs"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::RippleMapSize() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("RippleMapSize"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::SamplesSSAO() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SamplesSSAO"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::SamplesSSSS() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("SamplesSSSS"));
        }
        inline Ent::Gen2::Float RenderManager_RenderConfig::ShadowLODScale() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ShadowLODScale"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::ShadowMapSize() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ShadowMapSize"));
        }
        inline Ent::Gen2::Float RenderManager_RenderConfig::TerrainAlbedoMapBlendAreaRatio() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TerrainAlbedoMapBlendAreaRatio"));
        }
        inline Ent::Gen2::Float RenderManager_RenderConfig::TerrainAlbedoMapExtent() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TerrainAlbedoMapExtent"));
        }
        inline Ent::Gen2::Int RenderManager_RenderConfig::UseHiZBufferForClusteredLighting() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("UseHiZBufferForClusteredLighting"));
        }
        inline Ent::Gen2::String RenderManager_RenderConfig::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // RenderManager
        inline Ent::Gen2::String RenderManager::DecalMeshPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("DecalMeshPath"));
        }
        inline Ent::Gen2::RenderManager_DepthOfFieldConfig RenderManager::DepthOfField() const
        {
            return Ent::Gen2::RenderManager_DepthOfFieldConfig(getProperty().getObjectField("DepthOfField"));
        }
        inline Ent::Gen2::Bool RenderManager::DisableMoveDrawOrigin() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DisableMoveDrawOrigin"));
        }
        inline Ent::Gen2::Bool RenderManager::DoubleSizeIn4K() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("DoubleSizeIn4K"));
        }
        inline Ent::Gen2::Bool RenderManager::EnableFade() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EnableFade"));
        }
        inline Ent::Gen2::Bool RenderManager::EnableLODTransitions() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("EnableLODTransitions"));
        }
        inline Ent::Gen2::Float RenderManager::FloatPrecisionThreshold() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("FloatPrecisionThreshold"));
        }
        inline Ent::Gen2::Bool RenderManager::Fullscreen() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Fullscreen"));
        }
        inline Ent::Gen2::RenderManager_RenderConfig RenderManager::Global() const
        {
            return Ent::Gen2::RenderManager_RenderConfig(getProperty().getObjectField("Global"));
        }
        inline Ent::Gen2::Int RenderManager::ImGuiFontScale() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ImGuiFontScale"));
        }
        inline Ent::Gen2::Float RenderManager::LODTransitionDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LODTransitionDuration"));
        }
        inline Ent::Gen2::ScaleConverter RenderManager::MotionBlurHeightFactorFromSpeed() const
        {
            return Ent::Gen2::ScaleConverter(getProperty().getObjectField("MotionBlurHeightFactorFromSpeed"));
        }
        inline Ent::Gen2::RenderManager_RenderConfig RenderManager::PC() const
        {
            return Ent::Gen2::RenderManager_RenderConfig(getProperty().getObjectField("PC"));
        }
        inline Ent::Gen2::RenderManager_RenderConfig RenderManager::PS4() const
        {
            return Ent::Gen2::RenderManager_RenderConfig(getProperty().getObjectField("PS4"));
        }
        inline Ent::Gen2::RenderManager_RenderConfig RenderManager::PS4Neo() const
        {
            return Ent::Gen2::RenderManager_RenderConfig(getProperty().getObjectField("PS4Neo"));
        }
        inline Ent::Gen2::RenderManager_RenderConfig RenderManager::PS5() const
        {
            return Ent::Gen2::RenderManager_RenderConfig(getProperty().getObjectField("PS5"));
        }
        inline Ent::Gen2::Bool RenderManager::RenderToWindow() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("RenderToWindow"));
        }
        inline Ent::Gen2::Int RenderManager::ResolutionX() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ResolutionX"));
        }
        inline Ent::Gen2::Int RenderManager::ResolutionY() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ResolutionY"));
        }
        inline Ent::Gen2::Manager RenderManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::Int RenderManager::VSync() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("VSync"));
        }
        inline Ent::Gen2::Int RenderManager::WindowPositionX() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("WindowPositionX"));
        }
        inline Ent::Gen2::Int RenderManager::WindowPositionY() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("WindowPositionY"));
        }
        inline Ent::Gen2::Int RenderManager::WindowSizeX() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("WindowSizeX"));
        }
        inline Ent::Gen2::Int RenderManager::WindowSizeY() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("WindowSizeY"));
        }
        inline Ent::Gen2::String RenderManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AIContextSlot
        inline Ent::Gen2::Int AIContextSlot::Count() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Count"));
        }
        inline Ent::Gen2::String AIContextSlot::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String AIContextSlot::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AIContextGD
        inline Ent::Gen2::ComponentGD AIContextGD::Super() const
        {
            return Ent::Gen2::ComponentGD(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AIContextGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float AIContextGD::attackCircleRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("attackCircleRadius"));
        }
        inline Ent::Gen2::Float AIContextGD::distanceBetweenCreatures() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("distanceBetweenCreatures"));
        }
        inline Ent::Gen2::Float AIContextGD::distantReachCircleRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("distantReachCircleRadius"));
        }
        inline Ent::Gen2::Float AIContextGD::followCircleRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("followCircleRadius"));
        }
        inline Ent::Gen2::Float AIContextGD::lockTargetCircleRadius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("lockTargetCircleRadius"));
        }
        inline Array<Ent::Gen2::AIContextSlot> AIContextGD::slots() const
        {
            return Array<Ent::Gen2::AIContextSlot>(getProperty().getObjectField("slots"));
        }
        // AIAggroInitAndDecValue
        inline Ent::Gen2::Int AIAggroInitAndDecValue::DecrementValue() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("DecrementValue"));
        }
        inline Ent::Gen2::Int AIAggroInitAndDecValue::InitValue() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("InitValue"));
        }
        inline Ent::Gen2::Int AIAggroInitAndDecValue::MaxValue() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("MaxValue"));
        }
        inline Ent::Gen2::String AIAggroInitAndDecValue::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AIKnowledgeManager
        inline Array<Ent::Gen2::AIAggroInitAndDecValue> AIKnowledgeManager::AggroValues() const
        {
            return Array<Ent::Gen2::AIAggroInitAndDecValue>(getProperty().getObjectField("AggroValues"));
        }
        inline Ent::Gen2::Map<AIOrderTypeEnum, Ent::Gen2::Int> AIKnowledgeManager::OrderPriorities() const
        {
            return Ent::Gen2::Map<AIOrderTypeEnum, Ent::Gen2::Int>(getProperty().getObjectField("OrderPriorities"));
        }
        inline Ent::Gen2::Manager AIKnowledgeManager::Super() const
        {
            return Ent::Gen2::Manager(getProperty().getObjectField("Super"));
        }
        inline Ent::Gen2::String AIKnowledgeManager::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ActorStateStack
        // AnalyticsFPS
        inline Ent::Gen2::Float AnalyticsFPS::TeleportationDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TeleportationDistance"));
        }
        inline Ent::Gen2::Float AnalyticsFPS::TeleportationInterval() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TeleportationInterval"));
        }
        inline Ent::Gen2::String AnalyticsFPS::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AnalyticsInGameViewer
        // AnalyticsObserverInterface
        // AnimationGDData
        inline Ent::Gen2::String AnimationGDData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String AnimationGDData::animationDatabasePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("animationDatabasePath"));
        }
        inline Ent::Gen2::String AnimationGDData::skeletonPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("skeletonPath"));
        }
        // AnimationTreeConstraintsGD_BendSoundEventData
        inline Ent::Gen2::String AnimationTreeConstraintsGD_BendSoundEventData::BendStartEventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("BendStartEventName"));
        }
        inline Ent::Gen2::String AnimationTreeConstraintsGD_BendSoundEventData::CatapultStartEventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("CatapultStartEventName"));
        }
        inline Ent::Gen2::String AnimationTreeConstraintsGD_BendSoundEventData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // AudioEventData
        inline Ent::Gen2::Int AudioEventData::ID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ID"));
        }
        inline Ent::Gen2::String AudioEventData::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Float AudioEventData::Range() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Range"));
        }
        inline Ent::Gen2::String AudioEventData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // BehaviorPesto
        // CheatCodeReplication
        // ClassRef
        // CloudsGenerator
        inline Ent::Gen2::Float CloudsGenerator::ApearanceDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ApearanceDuration"));
        }
        inline Ent::Gen2::Float CloudsGenerator::ApearanceDurationRandom() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("ApearanceDurationRandom"));
        }
        inline Ent::Gen2::Float CloudsGenerator::CloudSize() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CloudSize"));
        }
        inline Ent::Gen2::Float CloudsGenerator::CloudSizeRandom() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CloudSizeRandom"));
        }
        inline Ent::Gen2::Float CloudsGenerator::CloudSpeedMultiplier() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CloudSpeedMultiplier"));
        }
        inline Ent::Gen2::Float CloudsGenerator::CloudStrength() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CloudStrength"));
        }
        inline Ent::Gen2::Float CloudsGenerator::CloudsCoverageDensity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("CloudsCoverageDensity"));
        }
        inline Ent::Gen2::Float CloudsGenerator::DisapearanceDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DisapearanceDuration"));
        }
        inline Ent::Gen2::Float CloudsGenerator::DisapearanceDurationRandom() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DisapearanceDurationRandom"));
        }
        inline Ent::Gen2::Float CloudsGenerator::LifeDuration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LifeDuration"));
        }
        inline Ent::Gen2::Float CloudsGenerator::LifeDurationRandom() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("LifeDurationRandom"));
        }
        inline Ent::Gen2::String CloudsGenerator::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ConditionalRigidityAttribute_ActorStateName
        inline Ent::Gen2::String ConditionalRigidityAttribute_ActorStateName::ActionName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ActionName"));
        }
        inline Ent::Gen2::String ConditionalRigidityAttribute_ActorStateName::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ContactActor
        // Edge
        // EntityArchive_MetaData
        inline Ent::Gen2::String EntityArchive_MetaData::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::String EntityArchive_MetaData::RawDataPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("RawDataPath"));
        }
        inline Ent::Gen2::Int EntityArchive_MetaData::Version() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("Version"));
        }
        inline Ent::Gen2::String EntityArchive_MetaData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // EntityGD
        inline Ent::Gen2::String EntityGD::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline PrimArray<Ent::Gen2::String> EntityGD::components() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("components"));
        }
        // EntityGDRef
        inline Ent::Gen2::String EntityGDRef::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::String EntityGDRef::hash() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("hash"));
        }
        // FadeEffect
        inline Ent::Gen2::String FadeEffect::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Bool FadeEffect::affectVisibilityProperty() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("affectVisibilityProperty"));
        }
        inline Ent::Gen2::Float FadeEffect::delay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("delay"));
        }
        inline Ent::Gen2::Float FadeEffect::destinationAlpha() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("destinationAlpha"));
        }
        inline Ent::Gen2::Float FadeEffect::duration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("duration"));
        }
        inline Ent::Gen2::Bool FadeEffect::infiniteDuration() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("infiniteDuration"));
        }
        inline Ent::Gen2::Float FadeEffect::sourceAlpha() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("sourceAlpha"));
        }
        // GRC
        // GVoxelVolumeCollection
        // IMatchMakerApi
        // IOnlineApi
        // InputController
        // MeshNavigationBehavior
        // MeshShape
        inline Ent::Gen2::String MeshShape::Path() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Path"));
        }
        inline Ent::Gen2::String MeshShape::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // NetRoot
        // OutfitFadeParameter
        inline Ent::Gen2::Float OutfitFadeParameter::Delay() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Delay"));
        }
        inline Ent::Gen2::Bool OutfitFadeParameter::Emissive() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Emissive"));
        }
        inline Ent::Gen2::Bool OutfitFadeParameter::Enabled() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("Enabled"));
        }
        inline Ent::Gen2::Bool OutfitFadeParameter::FadeBodyPiece() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("FadeBodyPiece"));
        }
        inline Ent::Gen2::Float OutfitFadeParameter::Time() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Time"));
        }
        inline Ent::Gen2::String OutfitFadeParameter::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // OwnershipModule
        // PhysicsNetworker
        // PlayerManagerDebugger
        inline Ent::Gen2::String PlayerManagerDebugger::SaveServerURL() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("SaveServerURL"));
        }
        inline Ent::Gen2::Float PlayerManagerDebugger::SelectionSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("SelectionSpeed"));
        }
        inline Ent::Gen2::String PlayerManagerDebugger::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // PointCloud
        // RagdollSetupData
        inline Ent::Gen2::String RagdollSetupData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float RagdollSetupData::blend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("blend"));
        }
        inline Ent::Gen2::Float RagdollSetupData::inertiaFactor() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("inertiaFactor"));
        }
        inline Ent::Gen2::Float RagdollSetupData::jointsRigidity() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("jointsRigidity"));
        }
        // ReplicaReplay
        // SceneNode
        // SceneNodeGraph
        // Sensor
        // SmallActorSpawnRuleExchangeData
        inline Ent::Gen2::String SmallActorSpawnRuleExchangeData::AudioEventName() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("AudioEventName"));
        }
        inline Ent::Gen2::String SmallActorSpawnRuleExchangeData::AudioEventSoundBank() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("AudioEventSoundBank"));
        }
        inline Ent::Gen2::Bool SmallActorSpawnRuleExchangeData::IsValid() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("IsValid"));
        }
        inline Ent::Gen2::Int SmallActorSpawnRuleExchangeData::RuleIndex() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("RuleIndex"));
        }
        inline Ent::Gen2::String SmallActorSpawnRuleExchangeData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // StateGauge
        inline Ent::Gen2::String StateGauge::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        inline Ent::Gen2::Float StateGauge::m_amount() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_amount"));
        }
        inline Ent::Gen2::Float StateGauge::m_maxAmount() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_maxAmount"));
        }
        inline Ent::Gen2::Float StateGauge::m_pendingDiff() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("m_pendingDiff"));
        }
        // TagInfo
        inline Ent::Gen2::Int TagInfo::AudioWeight() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("AudioWeight"));
        }
        inline Ent::Gen2::String TagInfo::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // Team_PlayerData
        inline Ent::Gen2::Int Team_PlayerData::PlayerID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("PlayerID"));
        }
        inline Ent::Gen2::String Team_PlayerData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // TextureGroundTypeMap
        // TextureHeightMap
        // Timer
        // TravelParams
        inline Ent::Gen2::Float TravelParams::Acceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Acceleration"));
        }
        inline Ent::Gen2::Float TravelParams::AccelerationZ() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("AccelerationZ"));
        }
        inline Ent::Gen2::Float TravelParams::Deceleration() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Deceleration"));
        }
        inline Ent::Gen2::Float TravelParams::HeightOffset() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("HeightOffset"));
        }
        inline Ent::Gen2::Float TravelParams::MoveBlend() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("MoveBlend"));
        }
        inline Ent::Gen2::Float TravelParams::TravelSpeed() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("TravelSpeed"));
        }
        inline Ent::Gen2::Bool TravelParams::UseFlyingNavMesh() const
        {
            return Ent::Gen2::Bool(getProperty().getObjectField("UseFlyingNavMesh"));
        }
        inline Ent::Gen2::String TravelParams::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VegetationResourceData
        inline Ent::Gen2::String VegetationResourceData::GRCPath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("GRCPath"));
        }
        inline Ent::Gen2::String VegetationResourceData::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::PrimitiveSet<char const*> VegetationResourceData::Tags() const
        {
            return Ent::Gen2::PrimitiveSet<char const*>(getProperty().getObjectField("Tags"));
        }
        inline Ent::Gen2::String VegetationResourceData::VisibilityDistanceCategory() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("VisibilityDistanceCategory"));
        }
        inline Ent::Gen2::String VegetationResourceData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VegetationVisibilityDistanceCategory
        inline Ent::Gen2::String VegetationVisibilityDistanceCategory::Name() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("Name"));
        }
        inline Ent::Gen2::Float VegetationVisibilityDistanceCategory::VisibilityDistance() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("VisibilityDistance"));
        }
        inline Ent::Gen2::String VegetationVisibilityDistanceCategory::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // VisualResourceBuildData
        inline PrimArray<Ent::Gen2::String> VisualResourceBuildData::GRCs() const
        {
            return PrimArray<Ent::Gen2::String>(getProperty().getObjectField("GRCs"));
        }
        inline PrimArray<Ent::Gen2::Int> VisualResourceBuildData::LODs() const
        {
            return PrimArray<Ent::Gen2::Int>(getProperty().getObjectField("LODs"));
        }
        inline Ent::Gen2::String VisualResourceBuildData::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ZoneCylinderShape
        inline Ent::Gen2::Float ZoneCylinderShape::DistanceBetweenPoints() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("DistanceBetweenPoints"));
        }
        inline Ent::Gen2::Float ZoneCylinderShape::Radius() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Radius"));
        }
        inline Ent::Gen2::String ZoneCylinderShape::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // ZoneMeshShape
        inline Ent::Gen2::String ZoneMeshShape::ConvexZoneFilePath() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("ConvexZoneFilePath"));
        }
        inline Ent::Gen2::String ZoneMeshShape::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // sBiomeSFXResult
        inline Ent::Gen2::Int sBiomeSFXResult::ID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ID"));
        }
        inline Ent::Gen2::Float sBiomeSFXResult::Weight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Weight"));
        }
        inline Ent::Gen2::String sBiomeSFXResult::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // sBiomeSoundResult
        inline Ent::Gen2::Int sBiomeSoundResult::ID() const
        {
            return Ent::Gen2::Int(getProperty().getObjectField("ID"));
        }
        inline Ent::Gen2::Float sBiomeSoundResult::Weight() const
        {
            return Ent::Gen2::Float(getProperty().getObjectField("Weight"));
        }
        inline Ent::Gen2::String sBiomeSoundResult::_comment() const
        {
            return Ent::Gen2::String(getProperty().getObjectField("_comment"));
        }
        // sJointMotorDesc
    } // Gen2
} // Ent
