
### /!\ This code is GENERATED! Do not modify it.

from entgen_helpers import *
import EntityLibPy
from enum import Enum



from entgen_helpers import *

class Bool(Primitive[bool]):
    def __init__(self, node):
        super(Bool, self).__init__(bool, node)

    def set(self, val):  # type: (bool) -> None
        return self._node.set_bool(val)


import EntityLibPy
from entgen_helpers import *

class EntityRef(Primitive[EntityLibPy.EntityRef]):
    def __init__(self, node):
        super(EntityRef, self).__init__(EntityLibPy.EntityRef, node)

    def set(self, val):  # type: (EntityLibPy.EntityRef) -> None
        return self._node.set_entityref(val)



from entgen_helpers import *

class Float(Primitive[float]):
    def __init__(self, node):
        super(Float, self).__init__(float, node)

    def set(self, val):  # type: (float) -> None
        return self._node.set_float(val)



from entgen_helpers import *


class Int(Primitive[int]):
    def __init__(self, node):
        super(Int, self).__init__(int, node)

    def set(self, val):  # type: (int) -> None
        return self._node.set_int(val)



from entgen_helpers import *

class String(Primitive[str]):
    def __init__(self, node):
        super(String, self).__init__(str, node)

    def set(self, val):  # type: (str) -> None
        return self._node.set_string(val)

    def __str__(self):
        return self._node.value

    def __len__(self):
        return len(self._node.value)


from EntityLibPy import Node
class variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_(Union):
    pass


from EntityLibPy import Node
class variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(Union):
    pass


from EntityLibPy import Node
class variant_Pasta_Easing_Curve_string_(Union):
    pass


from EntityLibPy import Node

class usePerception(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class sPhysicsShapeSphere(HelperObject):
    schema_name = "sPhysicsShapeSphere"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sPhysicsShapeSphere
        return sPhysicsShapeSphere(entlib.load_node_file(sourcefile, entlib.get_schema(sPhysicsShapeSphere.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sPhysicsShapeSphere
        return sPhysicsShapeSphere(entlib.make_node(sPhysicsShapeSphere.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def radius(self):  # type: ()->Float
        return Float(self._node.at("radius"))
    @radius.setter
    def radius(self, val): self.radius.set(val)
    pass


from EntityLibPy import Node

class sPhysicsShapeMesh(HelperObject):
    schema_name = "sPhysicsShapeMesh"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sPhysicsShapeMesh
        return sPhysicsShapeMesh(entlib.load_node_file(sourcefile, entlib.get_schema(sPhysicsShapeMesh.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sPhysicsShapeMesh
        return sPhysicsShapeMesh(entlib.make_node(sPhysicsShapeMesh.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def path(self):  # type: ()->String
        return String(self._node.at("path"))
    @path.setter
    def path(self, val): self.path.set(val)
    pass


from EntityLibPy import Node

class sPhysicsShapeCylinder(HelperObject):
    schema_name = "sPhysicsShapeCylinder"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sPhysicsShapeCylinder
        return sPhysicsShapeCylinder(entlib.load_node_file(sourcefile, entlib.get_schema(sPhysicsShapeCylinder.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sPhysicsShapeCylinder
        return sPhysicsShapeCylinder(entlib.make_node(sPhysicsShapeCylinder.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def length(self):  # type: ()->Float
        return Float(self._node.at("length"))
    @length.setter
    def length(self, val): self.length.set(val)
    @property
    def radius(self):  # type: ()->Float
        return Float(self._node.at("radius"))
    @radius.setter
    def radius(self, val): self.radius.set(val)
    pass


from EntityLibPy import Node

class sPhysicsShapeCapsule(HelperObject):
    schema_name = "sPhysicsShapeCapsule"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sPhysicsShapeCapsule
        return sPhysicsShapeCapsule(entlib.load_node_file(sourcefile, entlib.get_schema(sPhysicsShapeCapsule.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sPhysicsShapeCapsule
        return sPhysicsShapeCapsule(entlib.make_node(sPhysicsShapeCapsule.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def length(self):  # type: ()->Float
        return Float(self._node.at("length"))
    @length.setter
    def length(self, val): self.length.set(val)
    @property
    def radius(self):  # type: ()->Float
        return Float(self._node.at("radius"))
    @radius.setter
    def radius(self, val): self.radius.set(val)
    pass


from EntityLibPy import Node

class sJointFixedDesc(HelperObject):
    schema_name = "sJointFixedDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sJointFixedDesc
        return sJointFixedDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sJointFixedDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sJointFixedDesc
        return sJointFixedDesc(entlib.make_node(sJointFixedDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class sJointBallDesc(HelperObject):
    schema_name = "sJointBallDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sJointBallDesc
        return sJointBallDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sJointBallDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sJointBallDesc
        return sJointBallDesc(entlib.make_node(sJointBallDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class sGameEffectTemplate(HelperObject):
    schema_name = "sGameEffectTemplate"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sGameEffectTemplate
        return sGameEffectTemplate(entlib.load_node_file(sourcefile, entlib.get_schema(sGameEffectTemplate.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sGameEffectTemplate
        return sGameEffectTemplate(entlib.make_node(sGameEffectTemplate.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoneID(self):  # type: ()->Int
        return Int(self._node.at("BoneID"))
    @BoneID.setter
    def BoneID(self, val): self.BoneID.set(val)
    @property
    def BoneName(self):  # type: ()->String
        return String(self._node.at("BoneName"))
    @BoneName.setter
    def BoneName(self, val): self.BoneName.set(val)
    @property
    def EffectName(self):  # type: ()->String
        return String(self._node.at("EffectName"))
    @EffectName.setter
    def EffectName(self, val): self.EffectName.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class sBoneInfluenceDataTemplate(HelperObject):
    schema_name = "sBoneInfluenceDataTemplate"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sBoneInfluenceDataTemplate
        return sBoneInfluenceDataTemplate(entlib.load_node_file(sourcefile, entlib.get_schema(sBoneInfluenceDataTemplate.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sBoneInfluenceDataTemplate
        return sBoneInfluenceDataTemplate(entlib.make_node(sBoneInfluenceDataTemplate.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoneName(self):  # type: ()->String
        return String(self._node.at("BoneName"))
    @BoneName.setter
    def BoneName(self, val): self.BoneName.set(val)
    @property
    def Influence(self):  # type: ()->Float
        return Float(self._node.at("Influence"))
    @Influence.setter
    def Influence(self, val): self.Influence.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class sNodeBoneInfluenceDataTemplate(HelperObject):
    schema_name = "sNodeBoneInfluenceDataTemplate"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sNodeBoneInfluenceDataTemplate
        return sNodeBoneInfluenceDataTemplate(entlib.load_node_file(sourcefile, entlib.get_schema(sNodeBoneInfluenceDataTemplate.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sNodeBoneInfluenceDataTemplate
        return sNodeBoneInfluenceDataTemplate(entlib.make_node(sNodeBoneInfluenceDataTemplate.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Data(self):  # type: ()->Array[sBoneInfluenceDataTemplate]
        return (lambda n: Array(sBoneInfluenceDataTemplate, n))(self._node.at("Data"))
    @property
    def NodeName(self):  # type: ()->String
        return String(self._node.at("NodeName"))
    @NodeName.setter
    def NodeName(self, val): self.NodeName.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class isPerceivableForEnemies(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class isPerceivable(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class eventStringHash(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->String
        return String(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class computePitchAngle(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node
class WaveRenderingTypeEnum(Enum):
    Mesh = "Mesh"
    WaveRenderingType_COUNT = "WaveRenderingType_COUNT"


class WaveRenderingType(Primitive[WaveRenderingTypeEnum]):  # Enum
    def __init__(self, node):
        super(WaveRenderingType, self).__init__(WaveRenderingTypeEnum, node)
    schema_name = "WaveRenderingType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> WaveRenderingType
        return WaveRenderingType(node)
    def set(self, val):  # type: (WaveRenderingTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
Vector4 = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node
Vector3 = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class sPhysicsShapeBox(HelperObject):
    schema_name = "sPhysicsShapeBox"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sPhysicsShapeBox
        return sPhysicsShapeBox(entlib.load_node_file(sourcefile, entlib.get_schema(sPhysicsShapeBox.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sPhysicsShapeBox
        return sPhysicsShapeBox(entlib.make_node(sPhysicsShapeBox.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def size(self):  # type: ()->Vector3
        return Vector3(self._node.at("size"))
    @size.setter
    def size(self, val): self.size.set(val)
    pass


from EntityLibPy import Node

class sEnvStamp(HelperObject):
    schema_name = "sEnvStamp"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sEnvStamp
        return sEnvStamp(entlib.load_node_file(sourcefile, entlib.get_schema(sEnvStamp.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sEnvStamp
        return sEnvStamp(entlib.make_node(sEnvStamp.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AffectCoverage(self):  # type: ()->Bool
        return Bool(self._node.at("AffectCoverage"))
    @AffectCoverage.setter
    def AffectCoverage(self, val): self.AffectCoverage.set(val)
    @property
    def AffectFogColor(self):  # type: ()->Bool
        return Bool(self._node.at("AffectFogColor"))
    @AffectFogColor.setter
    def AffectFogColor(self, val): self.AffectFogColor.set(val)
    @property
    def AffectFogDensity(self):  # type: ()->Bool
        return Bool(self._node.at("AffectFogDensity"))
    @AffectFogDensity.setter
    def AffectFogDensity(self, val): self.AffectFogDensity.set(val)
    @property
    def AffectFogFalloff(self):  # type: ()->Bool
        return Bool(self._node.at("AffectFogFalloff"))
    @AffectFogFalloff.setter
    def AffectFogFalloff(self, val): self.AffectFogFalloff.set(val)
    @property
    def AffectFogHeight(self):  # type: ()->Bool
        return Bool(self._node.at("AffectFogHeight"))
    @AffectFogHeight.setter
    def AffectFogHeight(self, val): self.AffectFogHeight.set(val)
    @property
    def AffectPull(self):  # type: ()->Bool
        return Bool(self._node.at("AffectPull"))
    @AffectPull.setter
    def AffectPull(self, val): self.AffectPull.set(val)
    @property
    def AffectType(self):  # type: ()->Bool
        return Bool(self._node.at("AffectType"))
    @AffectType.setter
    def AffectType(self, val): self.AffectType.set(val)
    @property
    def AffectWetness(self):  # type: ()->Bool
        return Bool(self._node.at("AffectWetness"))
    @AffectWetness.setter
    def AffectWetness(self, val): self.AffectWetness.set(val)
    @property
    def AtlasID(self):  # type: ()->Int
        return Int(self._node.at("AtlasID"))
    @AtlasID.setter
    def AtlasID(self, val): self.AtlasID.set(val)
    @property
    def FogColor(self):  # type: ()->Vector3
        return Vector3(self._node.at("FogColor"))
    @FogColor.setter
    def FogColor(self, val): self.FogColor.set(val)
    @property
    def IsCloud(self):  # type: ()->Bool
        return Bool(self._node.at("IsCloud"))
    @IsCloud.setter
    def IsCloud(self, val): self.IsCloud.set(val)
    @property
    def PositionOffset(self):  # type: ()->Vector3
        return Vector3(self._node.at("PositionOffset"))
    @PositionOffset.setter
    def PositionOffset(self, val): self.PositionOffset.set(val)
    @property
    def Rotation(self):  # type: ()->Float
        return Float(self._node.at("Rotation"))
    @Rotation.setter
    def Rotation(self, val): self.Rotation.set(val)
    @property
    def Size(self):  # type: ()->Float
        return Float(self._node.at("Size"))
    @Size.setter
    def Size(self, val): self.Size.set(val)
    @property
    def Strength(self):  # type: ()->Float
        return Float(self._node.at("Strength"))
    @Strength.setter
    def Strength(self, val): self.Strength.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class WaveRendererProperties(HelperObject):
    schema_name = "WaveRendererProperties"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->WaveRendererProperties
        return WaveRendererProperties(entlib.load_node_file(sourcefile, entlib.get_schema(WaveRendererProperties.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->WaveRendererProperties
        return WaveRendererProperties(entlib.make_node(WaveRendererProperties.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BonesGridHeight(self):  # type: ()->Int
        return Int(self._node.at("BonesGridHeight"))
    @BonesGridHeight.setter
    def BonesGridHeight(self, val): self.BonesGridHeight.set(val)
    @property
    def BonesGridWidth(self):  # type: ()->Int
        return Int(self._node.at("BonesGridWidth"))
    @BonesGridWidth.setter
    def BonesGridWidth(self, val): self.BonesGridWidth.set(val)
    @property
    def BonesIgnoreOffset(self):  # type: ()->Int
        return Int(self._node.at("BonesIgnoreOffset"))
    @BonesIgnoreOffset.setter
    def BonesIgnoreOffset(self, val): self.BonesIgnoreOffset.set(val)
    @property
    def MaterialPath(self):  # type: ()->String
        return String(self._node.at("MaterialPath"))
    @MaterialPath.setter
    def MaterialPath(self, val): self.MaterialPath.set(val)
    @property
    def MeshPath(self):  # type: ()->String
        return String(self._node.at("MeshPath"))
    @MeshPath.setter
    def MeshPath(self, val): self.MeshPath.set(val)
    @property
    def NbMeshInstances(self):  # type: ()->Int
        return Int(self._node.at("NbMeshInstances"))
    @NbMeshInstances.setter
    def NbMeshInstances(self, val): self.NbMeshInstances.set(val)
    @property
    def NbQuads(self):  # type: ()->Int
        return Int(self._node.at("NbQuads"))
    @NbQuads.setter
    def NbQuads(self, val): self.NbQuads.set(val)
    @property
    def Offset(self):  # type: ()->Vector3
        return Vector3(self._node.at("Offset"))
    @Offset.setter
    def Offset(self, val): self.Offset.set(val)
    @property
    def Scale(self):  # type: ()->Vector3
        return Vector3(self._node.at("Scale"))
    @Scale.setter
    def Scale(self, val): self.Scale.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class WaveProperties(HelperObject):
    schema_name = "WaveProperties"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->WaveProperties
        return WaveProperties(entlib.load_node_file(sourcefile, entlib.get_schema(WaveProperties.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->WaveProperties
        return WaveProperties(entlib.make_node(WaveProperties.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Duration(self):  # type: ()->Float
        return Float(self._node.at("Duration"))
    @Duration.setter
    def Duration(self, val): self.Duration.set(val)
    @property
    def IntervalBetweenWaveFronts(self):  # type: ()->Float
        return Float(self._node.at("IntervalBetweenWaveFronts"))
    @IntervalBetweenWaveFronts.setter
    def IntervalBetweenWaveFronts(self, val): self.IntervalBetweenWaveFronts.set(val)
    @property
    def Looping(self):  # type: ()->Bool
        return Bool(self._node.at("Looping"))
    @Looping.setter
    def Looping(self, val): self.Looping.set(val)
    @property
    def Luminosity(self):  # type: ()->Float
        return Float(self._node.at("Luminosity"))
    @Luminosity.setter
    def Luminosity(self, val): self.Luminosity.set(val)
    @property
    def LuminosityCurvePath(self):  # type: ()->String
        return String(self._node.at("LuminosityCurvePath"))
    @LuminosityCurvePath.setter
    def LuminosityCurvePath(self, val): self.LuminosityCurvePath.set(val)
    @property
    def LuminosityVariability(self):  # type: ()->Float
        return Float(self._node.at("LuminosityVariability"))
    @LuminosityVariability.setter
    def LuminosityVariability(self, val): self.LuminosityVariability.set(val)
    @property
    def RenderingProperties(self):  # type: ()->Array[WaveRendererProperties]
        return (lambda n: Array(WaveRendererProperties, n))(self._node.at("RenderingProperties"))
    @property
    def RenderingType(self):  # type: ()->WaveRenderingType
        return WaveRenderingType(self._node.at("RenderingType"))
    @RenderingType.setter
    def RenderingType(self, val): self.RenderingType.set(val)
    @property
    def Width(self):  # type: ()->Int
        return Int(self._node.at("Width"))
    @Width.setter
    def Width(self, val): self.Width.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
Vector2 = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class sJointUniversalDesc(HelperObject):
    schema_name = "sJointUniversalDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sJointUniversalDesc
        return sJointUniversalDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sJointUniversalDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sJointUniversalDesc
        return sJointUniversalDesc(entlib.make_node(sJointUniversalDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def angleSwing1(self):  # type: ()->Vector2
        return Vector2(self._node.at("angleSwing1"))
    @angleSwing1.setter
    def angleSwing1(self, val): self.angleSwing1.set(val)
    @property
    def angleSwing2(self):  # type: ()->Vector2
        return Vector2(self._node.at("angleSwing2"))
    @angleSwing2.setter
    def angleSwing2(self, val): self.angleSwing2.set(val)
    pass


from EntityLibPy import Node

class sJointSwingTwistDesc(HelperObject):
    schema_name = "sJointSwingTwistDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sJointSwingTwistDesc
        return sJointSwingTwistDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sJointSwingTwistDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sJointSwingTwistDesc
        return sJointSwingTwistDesc(entlib.make_node(sJointSwingTwistDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def swingAngle(self):  # type: ()->Vector2
        return Vector2(self._node.at("swingAngle"))
    @swingAngle.setter
    def swingAngle(self, val): self.swingAngle.set(val)
    @property
    def twistAngle(self):  # type: ()->Vector2
        return Vector2(self._node.at("twistAngle"))
    @twistAngle.setter
    def twistAngle(self, val): self.twistAngle.set(val)
    pass


from EntityLibPy import Node

class sJointSliderDesc(HelperObject):
    schema_name = "sJointSliderDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sJointSliderDesc
        return sJointSliderDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sJointSliderDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sJointSliderDesc
        return sJointSliderDesc(entlib.make_node(sJointSliderDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def direction(self):  # type: ()->Vector3
        return Vector3(self._node.at("direction"))
    @direction.setter
    def direction(self, val): self.direction.set(val)
    @property
    def distance(self):  # type: ()->Vector2
        return Vector2(self._node.at("distance"))
    @distance.setter
    def distance(self, val): self.distance.set(val)
    pass


from EntityLibPy import Node

class sJointHingeDesc(HelperObject):
    schema_name = "sJointHingeDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sJointHingeDesc
        return sJointHingeDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sJointHingeDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sJointHingeDesc
        return sJointHingeDesc(entlib.make_node(sJointHingeDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def angle(self):  # type: ()->Vector2
        return Vector2(self._node.at("angle"))
    @angle.setter
    def angle(self, val): self.angle.set(val)
    @property
    def axis(self):  # type: ()->Vector3
        return Vector3(self._node.at("axis"))
    @axis.setter
    def axis(self, val): self.axis.set(val)
    pass


from EntityLibPy import Node

class VomitData(HelperObject):
    schema_name = "VomitData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VomitData
        return VomitData(entlib.load_node_file(sourcefile, entlib.get_schema(VomitData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VomitData
        return VomitData(entlib.make_node(VomitData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AngleRangeHysteresis(self):  # type: ()->Vector2
        return Vector2(self._node.at("AngleRangeHysteresis"))
    @AngleRangeHysteresis.setter
    def AngleRangeHysteresis(self, val): self.AngleRangeHysteresis.set(val)
    @property
    def AngleRangeMax(self):  # type: ()->Vector2
        return Vector2(self._node.at("AngleRangeMax"))
    @AngleRangeMax.setter
    def AngleRangeMax(self, val): self.AngleRangeMax.set(val)
    @property
    def CanVomit(self):  # type: ()->Bool
        return Bool(self._node.at("CanVomit"))
    @CanVomit.setter
    def CanVomit(self, val): self.CanVomit.set(val)
    @property
    def ProjectileName(self):  # type: ()->String
        return String(self._node.at("ProjectileName"))
    @ProjectileName.setter
    def ProjectileName(self, val): self.ProjectileName.set(val)
    @property
    def VomitCost(self):  # type: ()->Float
        return Float(self._node.at("VomitCost"))
    @VomitCost.setter
    def VomitCost(self, val): self.VomitCost.set(val)
    @property
    def VomitMinTimer(self):  # type: ()->Float
        return Float(self._node.at("VomitMinTimer"))
    @VomitMinTimer.setter
    def VomitMinTimer(self, val): self.VomitMinTimer.set(val)
    @property
    def VomitRate(self):  # type: ()->Float
        return Float(self._node.at("VomitRate"))
    @VomitRate.setter
    def VomitRate(self, val): self.VomitRate.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ConditionalRigidityAttribute_Range(HelperObject):
    schema_name = "ConditionalRigidityAttribute::Range"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ConditionalRigidityAttribute_Range
        return ConditionalRigidityAttribute_Range(entlib.load_node_file(sourcefile, entlib.get_schema(ConditionalRigidityAttribute_Range.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ConditionalRigidityAttribute_Range
        return ConditionalRigidityAttribute_Range(entlib.make_node(ConditionalRigidityAttribute_Range.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Range(self):  # type: ()->Vector2
        return Vector2(self._node.at("Range"))
    @Range.setter
    def Range(self, val): self.Range.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VariantAllowed(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class UnionObjectArrayItem(HelperObject):

    @property
    def Union(self):  # type: ()->variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_
        return variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(self._node.at("Union"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TypedValue(HelperObject):
    schema_name = "TypedValue"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TypedValue
        return TypedValue(entlib.load_node_file(sourcefile, entlib.get_schema(TypedValue.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TypedValue
        return TypedValue(entlib.make_node(TypedValue.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Alias(self):  # type: ()->String
        return String(self._node.at("Alias"))
    @Alias.setter
    def Alias(self, val): self.Alias.set(val)
    @property
    def Reference(self):  # type: ()->String
        return String(self._node.at("Reference"))
    @Reference.setter
    def Reference(self, val): self.Reference.set(val)
    @property
    def Value(self):  # type: ()->variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_
        return variant_string_bool_s32_float_EntityRef_Vector2_Vector3_Position_stringVec_boolVec_s32Vec_floatVec_EntityRefVec_Vector2Vec_Vector3Vec_PositionVec_(self._node.at("Value"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TravelParams(HelperObject):
    schema_name = "TravelParams"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TravelParams
        return TravelParams(entlib.load_node_file(sourcefile, entlib.get_schema(TravelParams.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TravelParams
        return TravelParams(entlib.make_node(TravelParams.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Acceleration(self):  # type: ()->Float
        return Float(self._node.at("Acceleration"))
    @Acceleration.setter
    def Acceleration(self, val): self.Acceleration.set(val)
    @property
    def AccelerationZ(self):  # type: ()->Float
        return Float(self._node.at("AccelerationZ"))
    @AccelerationZ.setter
    def AccelerationZ(self, val): self.AccelerationZ.set(val)
    @property
    def Deceleration(self):  # type: ()->Float
        return Float(self._node.at("Deceleration"))
    @Deceleration.setter
    def Deceleration(self, val): self.Deceleration.set(val)
    @property
    def HeightOffset(self):  # type: ()->Float
        return Float(self._node.at("HeightOffset"))
    @HeightOffset.setter
    def HeightOffset(self, val): self.HeightOffset.set(val)
    @property
    def MoveBlend(self):  # type: ()->Float
        return Float(self._node.at("MoveBlend"))
    @MoveBlend.setter
    def MoveBlend(self, val): self.MoveBlend.set(val)
    @property
    def TravelSpeed(self):  # type: ()->Float
        return Float(self._node.at("TravelSpeed"))
    @TravelSpeed.setter
    def TravelSpeed(self, val): self.TravelSpeed.set(val)
    @property
    def UseFlyingNavMesh(self):  # type: ()->Bool
        return Bool(self._node.at("UseFlyingNavMesh"))
    @UseFlyingNavMesh.setter
    def UseFlyingNavMesh(self, val): self.UseFlyingNavMesh.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TransitionNeighborData(HelperObject):
    schema_name = "TransitionNeighborData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TransitionNeighborData
        return TransitionNeighborData(entlib.load_node_file(sourcefile, entlib.get_schema(TransitionNeighborData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TransitionNeighborData
        return TransitionNeighborData(entlib.make_node(TransitionNeighborData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Backward(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("Backward"))
    @Backward.setter
    def Backward(self, val): self.Backward.set(val)
    @property
    def Forward(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("Forward"))
    @Forward.setter
    def Forward(self, val): self.Forward.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class TrailUVUnwrappingModeEnum(Enum):
    TailToHead = "TailToHead"
    SnakeHeadToTail = "SnakeHeadToTail"
    TrailUVUnwrappingMode_COUNT = "TrailUVUnwrappingMode_COUNT"


class TrailUVUnwrappingMode(Primitive[TrailUVUnwrappingModeEnum]):  # Enum
    def __init__(self, node):
        super(TrailUVUnwrappingMode, self).__init__(TrailUVUnwrappingModeEnum, node)
    schema_name = "TrailUVUnwrappingMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> TrailUVUnwrappingMode
        return TrailUVUnwrappingMode(node)
    def set(self, val):  # type: (TrailUVUnwrappingModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class TrailRenderingTypeEnum(Enum):
    Cross = "Cross"
    Billboard = "Billboard"
    Patches = "Patches"
    Mesh = "Mesh"
    TrailRenderingType_COUNT = "TrailRenderingType_COUNT"


class TrailRenderingType(Primitive[TrailRenderingTypeEnum]):  # Enum
    def __init__(self, node):
        super(TrailRenderingType, self).__init__(TrailRenderingTypeEnum, node)
    schema_name = "TrailRenderingType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> TrailRenderingType
        return TrailRenderingType(node)
    def set(self, val):  # type: (TrailRenderingTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class TrailRenderingSidesEnum(Enum):
    SideA = "SideA"
    SideB = "SideB"
    BothSides = "BothSides"
    TrailRenderingSides_COUNT = "TrailRenderingSides_COUNT"


class TrailRenderingSides(Primitive[TrailRenderingSidesEnum]):  # Enum
    def __init__(self, node):
        super(TrailRenderingSides, self).__init__(TrailRenderingSidesEnum, node)
    schema_name = "TrailRenderingSides"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> TrailRenderingSides
        return TrailRenderingSides(node)
    def set(self, val):  # type: (TrailRenderingSidesEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class TrailRenderingAttributeEnum(Enum):
    Horizontal = "Horizontal"
    Vertical = "Vertical"
    Frontal = "Frontal"
    TrailRenderingAttribute_COUNT = "TrailRenderingAttribute_COUNT"


class TrailRenderingAttribute(Primitive[TrailRenderingAttributeEnum]):  # Enum
    def __init__(self, node):
        super(TrailRenderingAttribute, self).__init__(TrailRenderingAttributeEnum, node)
    schema_name = "TrailRenderingAttribute"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> TrailRenderingAttribute
        return TrailRenderingAttribute(node)
    def set(self, val):  # type: (TrailRenderingAttributeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class TrailRendererProperties(HelperObject):
    schema_name = "TrailRendererProperties"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TrailRendererProperties
        return TrailRendererProperties(entlib.load_node_file(sourcefile, entlib.get_schema(TrailRendererProperties.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TrailRendererProperties
        return TrailRendererProperties(entlib.make_node(TrailRendererProperties.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Attribute(self):  # type: ()->TrailRenderingAttribute
        return TrailRenderingAttribute(self._node.at("Attribute"))
    @Attribute.setter
    def Attribute(self, val): self.Attribute.set(val)
    @property
    def MaterialPath(self):  # type: ()->String
        return String(self._node.at("MaterialPath"))
    @MaterialPath.setter
    def MaterialPath(self, val): self.MaterialPath.set(val)
    @property
    def MeshPath(self):  # type: ()->String
        return String(self._node.at("MeshPath"))
    @MeshPath.setter
    def MeshPath(self, val): self.MeshPath.set(val)
    @property
    def NbMeshInstances(self):  # type: ()->Int
        return Int(self._node.at("NbMeshInstances"))
    @NbMeshInstances.setter
    def NbMeshInstances(self, val): self.NbMeshInstances.set(val)
    @property
    def NbQuads(self):  # type: ()->Int
        return Int(self._node.at("NbQuads"))
    @NbQuads.setter
    def NbQuads(self, val): self.NbQuads.set(val)
    @property
    def NbTrailPointsBetweenFrontQuads(self):  # type: ()->Int
        return Int(self._node.at("NbTrailPointsBetweenFrontQuads"))
    @NbTrailPointsBetweenFrontQuads.setter
    def NbTrailPointsBetweenFrontQuads(self, val): self.NbTrailPointsBetweenFrontQuads.set(val)
    @property
    def NbVertices(self):  # type: ()->Int
        return Int(self._node.at("NbVertices"))
    @NbVertices.setter
    def NbVertices(self, val): self.NbVertices.set(val)
    @property
    def Offset(self):  # type: ()->Vector3
        return Vector3(self._node.at("Offset"))
    @Offset.setter
    def Offset(self, val): self.Offset.set(val)
    @property
    def RandomAxialRotationAmplitude(self):  # type: ()->Vector2
        return Vector2(self._node.at("RandomAxialRotationAmplitude"))
    @RandomAxialRotationAmplitude.setter
    def RandomAxialRotationAmplitude(self, val): self.RandomAxialRotationAmplitude.set(val)
    @property
    def RandomUVOffset(self):  # type: ()->Float
        return Float(self._node.at("RandomUVOffset"))
    @RandomUVOffset.setter
    def RandomUVOffset(self, val): self.RandomUVOffset.set(val)
    @property
    def Sides(self):  # type: ()->TrailRenderingSides
        return TrailRenderingSides(self._node.at("Sides"))
    @Sides.setter
    def Sides(self, val): self.Sides.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TrackedEntitiesItem(HelperObject):

    pass


from EntityLibPy import Node
ThumbPath = String
from EntityLibPy import Node

class TestPropertyDefaultValues(HelperObject):
    schema_name = "TestPropertyDefaultValues"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TestPropertyDefaultValues
        return TestPropertyDefaultValues(entlib.load_node_file(sourcefile, entlib.get_schema(TestPropertyDefaultValues.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TestPropertyDefaultValues
        return TestPropertyDefaultValues(entlib.make_node(TestPropertyDefaultValues.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def A(self):  # type: ()->Int
        return Int(self._node.at("A"))
    @A.setter
    def A(self, val): self.A.set(val)
    @property
    def B(self):  # type: ()->Int
        return Int(self._node.at("B"))
    @B.setter
    def B(self, val): self.B.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TestPropertyDefaultValues2(HelperObject):
    schema_name = "TestPropertyDefaultValues2"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TestPropertyDefaultValues2
        return TestPropertyDefaultValues2(entlib.load_node_file(sourcefile, entlib.get_schema(TestPropertyDefaultValues2.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TestPropertyDefaultValues2
        return TestPropertyDefaultValues2(entlib.make_node(TestPropertyDefaultValues2.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def propertyWithDefault2(self):  # type: ()->TestPropertyDefaultValues
        return TestPropertyDefaultValues(self._node.at("propertyWithDefault2"))
    @property
    def propertyWithDefault3(self):  # type: ()->TestPropertyDefaultValues
        return TestPropertyDefaultValues(self._node.at("propertyWithDefault3"))
    pass


from EntityLibPy import Node

class Terrain_TerrainMeta(HelperObject):
    schema_name = "Terrain::TerrainMeta"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Terrain_TerrainMeta
        return Terrain_TerrainMeta(entlib.load_node_file(sourcefile, entlib.get_schema(Terrain_TerrainMeta.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Terrain_TerrainMeta
        return Terrain_TerrainMeta(entlib.make_node(Terrain_TerrainMeta.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DataPath(self):  # type: ()->String
        return String(self._node.at("DataPath"))
    @DataPath.setter
    def DataPath(self, val): self.DataPath.set(val)
    @property
    def HeightScaleMeters(self):  # type: ()->Float
        return Float(self._node.at("HeightScaleMeters"))
    @HeightScaleMeters.setter
    def HeightScaleMeters(self, val): self.HeightScaleMeters.set(val)
    @property
    def Material(self):  # type: ()->String
        return String(self._node.at("Material"))
    @Material.setter
    def Material(self, val): self.Material.set(val)
    @property
    def RegionWidthMeters(self):  # type: ()->Float
        return Float(self._node.at("RegionWidthMeters"))
    @RegionWidthMeters.setter
    def RegionWidthMeters(self, val): self.RegionWidthMeters.set(val)
    @property
    def RimTerrain(self):  # type: ()->Bool
        return Bool(self._node.at("RimTerrain"))
    @RimTerrain.setter
    def RimTerrain(self, val): self.RimTerrain.set(val)
    @property
    def SkirtScale(self):  # type: ()->Float
        return Float(self._node.at("SkirtScale"))
    @SkirtScale.setter
    def SkirtScale(self, val): self.SkirtScale.set(val)
    @property
    def TexelsPerMeter(self):  # type: ()->Float
        return Float(self._node.at("TexelsPerMeter"))
    @TexelsPerMeter.setter
    def TexelsPerMeter(self, val): self.TexelsPerMeter.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TargetCollision(HelperObject):
    schema_name = "TargetCollision"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TargetCollision
        return TargetCollision(entlib.load_node_file(sourcefile, entlib.get_schema(TargetCollision.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TargetCollision
        return TargetCollision(entlib.make_node(TargetCollision.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def count(self):  # type: ()->Int
        return Int(self._node.at("count"))
    @count.setter
    def count(self, val): self.count.set(val)
    pass


from EntityLibPy import Node

class TagsList(HelperObject):
    schema_name = "TagsList"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TagsList
        return TagsList(entlib.load_node_file(sourcefile, entlib.get_schema(TagsList.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TagsList
        return TagsList(entlib.make_node(TagsList.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Tags(self):  # type: ()->Map[str, PrimitiveSet[str]]
        return (lambda n: Map(str, (lambda n: PrimitiveSet(str, n)), n))(self._node.at("Tags"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class SyncTempoModeEnum(Enum):
    None_ = "None"
    OnGrid = "OnGrid"
    OnBeat = "OnBeat"
    OnBar = "OnBar"
    OnEnterCue = "OnEnterCue"
    OnExitCue = "OnExitCue"
    OnCustomCue = "OnCustomCue"
    OnSwitchTransition = "OnSwitchTransition"
    SyncTempoMode_COUNT = "SyncTempoMode_COUNT"
    SyncTempoMode_FIRST = "SyncTempoMode_FIRST"


class SyncTempoMode(Primitive[SyncTempoModeEnum]):  # Enum
    def __init__(self, node):
        super(SyncTempoMode, self).__init__(SyncTempoModeEnum, node)
    schema_name = "SyncTempoMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> SyncTempoMode
        return SyncTempoMode(node)
    def set(self, val):  # type: (SyncTempoModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class UIMusic(HelperObject):
    schema_name = "UIMusic"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->UIMusic
        return UIMusic(entlib.load_node_file(sourcefile, entlib.get_schema(UIMusic.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->UIMusic
        return UIMusic(entlib.make_node(UIMusic.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MusicType(self):  # type: ()->String
        return String(self._node.at("MusicType"))
    @MusicType.setter
    def MusicType(self, val): self.MusicType.set(val)
    @property
    def SkillTree(self):  # type: ()->String
        return String(self._node.at("SkillTree"))
    @SkillTree.setter
    def SkillTree(self, val): self.SkillTree.set(val)
    @property
    def SynchronizationMode(self):  # type: ()->SyncTempoMode
        return SyncTempoMode(self._node.at("SynchronizationMode"))
    @SynchronizationMode.setter
    def SynchronizationMode(self, val): self.SynchronizationMode.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class StyleModeEnum(Enum):
    default_ = "default"
    stick = "stick"
    sword = "sword"
    do_ = "do"
    hammer = "hammer"
    knife = "knife"
    squirrel = "squirrel"
    lush = "lush"
    StyleMode_COUNT = "StyleMode_COUNT"


class StyleMode(Primitive[StyleModeEnum]):  # Enum
    def __init__(self, node):
        super(StyleMode, self).__init__(StyleModeEnum, node)
    schema_name = "StyleMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> StyleMode
        return StyleMode(node)
    def set(self, val):  # type: (StyleModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class StunData(HelperObject):
    schema_name = "StunData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->StunData
        return StunData(entlib.load_node_file(sourcefile, entlib.get_schema(StunData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->StunData
        return StunData(entlib.make_node(StunData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def damageHitBig(self):  # type: ()->Int
        return Int(self._node.at("damageHitBig"))
    @damageHitBig.setter
    def damageHitBig(self, val): self.damageHitBig.set(val)
    @property
    def damageHitBite(self):  # type: ()->Int
        return Int(self._node.at("damageHitBite"))
    @damageHitBite.setter
    def damageHitBite(self, val): self.damageHitBite.set(val)
    @property
    def damageHitEject(self):  # type: ()->Int
        return Int(self._node.at("damageHitEject"))
    @damageHitEject.setter
    def damageHitEject(self, val): self.damageHitEject.set(val)
    @property
    def damageHitEjectFar(self):  # type: ()->Int
        return Int(self._node.at("damageHitEjectFar"))
    @damageHitEjectFar.setter
    def damageHitEjectFar(self, val): self.damageHitEjectFar.set(val)
    @property
    def damageHitLight(self):  # type: ()->Int
        return Int(self._node.at("damageHitLight"))
    @damageHitLight.setter
    def damageHitLight(self, val): self.damageHitLight.set(val)
    @property
    def damageHitMedium(self):  # type: ()->Int
        return Int(self._node.at("damageHitMedium"))
    @damageHitMedium.setter
    def damageHitMedium(self, val): self.damageHitMedium.set(val)
    @property
    def malus(self):  # type: ()->Int
        return Int(self._node.at("malus"))
    @malus.setter
    def malus(self, val): self.malus.set(val)
    @property
    def orientHitBig(self):  # type: ()->Float
        return Float(self._node.at("orientHitBig"))
    @orientHitBig.setter
    def orientHitBig(self, val): self.orientHitBig.set(val)
    @property
    def orientHitEject(self):  # type: ()->Float
        return Float(self._node.at("orientHitEject"))
    @orientHitEject.setter
    def orientHitEject(self, val): self.orientHitEject.set(val)
    @property
    def orientHitEjectFar(self):  # type: ()->Float
        return Float(self._node.at("orientHitEjectFar"))
    @orientHitEjectFar.setter
    def orientHitEjectFar(self, val): self.orientHitEjectFar.set(val)
    @property
    def orientHitLight(self):  # type: ()->Float
        return Float(self._node.at("orientHitLight"))
    @orientHitLight.setter
    def orientHitLight(self, val): self.orientHitLight.set(val)
    @property
    def orientHitMedium(self):  # type: ()->Float
        return Float(self._node.at("orientHitMedium"))
    @orientHitMedium.setter
    def orientHitMedium(self, val): self.orientHitMedium.set(val)
    @property
    def recoverTime(self):  # type: ()->Float
        return Float(self._node.at("recoverTime"))
    @recoverTime.setter
    def recoverTime(self, val): self.recoverTime.set(val)
    @property
    def resistance(self):  # type: ()->Int
        return Int(self._node.at("resistance"))
    @resistance.setter
    def resistance(self, val): self.resistance.set(val)
    @property
    def stunTime(self):  # type: ()->Float
        return Float(self._node.at("stunTime"))
    @stunTime.setter
    def stunTime(self, val): self.stunTime.set(val)
    pass


from EntityLibPy import Node

class StickToGround(HelperObject):
    schema_name = "StickToGround"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->StickToGround
        return StickToGround(entlib.load_node_file(sourcefile, entlib.get_schema(StickToGround.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->StickToGround
        return StickToGround(entlib.make_node(StickToGround.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoneNameEnd(self):  # type: ()->String
        return String(self._node.at("BoneNameEnd"))
    @BoneNameEnd.setter
    def BoneNameEnd(self, val): self.BoneNameEnd.set(val)
    @property
    def BoneNameStart(self):  # type: ()->String
        return String(self._node.at("BoneNameStart"))
    @BoneNameStart.setter
    def BoneNameStart(self, val): self.BoneNameStart.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class StateGauge(HelperObject):
    schema_name = "StateGauge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->StateGauge
        return StateGauge(entlib.load_node_file(sourcefile, entlib.get_schema(StateGauge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->StateGauge
        return StateGauge(entlib.make_node(StateGauge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def m_amount(self):  # type: ()->Float
        return Float(self._node.at("m_amount"))
    @m_amount.setter
    def m_amount(self, val): self.m_amount.set(val)
    @property
    def m_maxAmount(self):  # type: ()->Float
        return Float(self._node.at("m_maxAmount"))
    @m_maxAmount.setter
    def m_maxAmount(self, val): self.m_maxAmount.set(val)
    @property
    def m_pendingDiff(self):  # type: ()->Float
        return Float(self._node.at("m_pendingDiff"))
    @m_pendingDiff.setter
    def m_pendingDiff(self, val): self.m_pendingDiff.set(val)
    pass


from EntityLibPy import Node

class StunGauge(HelperObject):
    schema_name = "StunGauge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->StunGauge
        return StunGauge(entlib.load_node_file(sourcefile, entlib.get_schema(StunGauge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->StunGauge
        return StunGauge(entlib.make_node(StunGauge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->StateGauge
        return StateGauge(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class SpeedModeEnum(Enum):
    speed0 = "speed0"
    speed1 = "speed1"
    speed2 = "speed2"
    speed3 = "speed3"
    speed4 = "speed4"
    SpeedMode_COUNT = "SpeedMode_COUNT"


class SpeedMode(Primitive[SpeedModeEnum]):  # Enum
    def __init__(self, node):
        super(SpeedMode, self).__init__(SpeedModeEnum, node)
    schema_name = "SpeedMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> SpeedMode
        return SpeedMode(node)
    def set(self, val):  # type: (SpeedModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class SpeedModeMax(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class SpeedFastMinDuration(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node
class SpecieEnum(Enum):
    auroch = "auroch"
    bear = "bear"
    babybear = "babybear"
    catfish = "catfish"
    eagle = "eagle"
    elk = "elk"
    fox = "fox"
    giantbear = "giantbear"
    human = "human"
    cannibal = "cannibal"
    babyhuman = "babyhuman"
    horse = "horse"
    ibex = "ibex"
    rabbit = "rabbit"
    rat = "rat"
    ram = "ram"
    raven = "raven"
    schmetre = "schmetre"
    seagull = "seagull"
    snake = "snake"
    spermwhale = "spermwhale"
    squirrel = "squirrel"
    stag = "stag"
    toad = "toad"
    trout = "trout"
    wildboar = "wildboar"
    babyboar = "babyboar"
    wolf = "wolf"
    shark = "shark"
    dolphin = "dolphin"
    whale = "whale"
    goddess = "goddess"
    clothboots = "clothboots"
    clothbrace = "clothbrace"
    clothhelmet = "clothhelmet"
    clothskirt = "clothskirt"
    clothtorso = "clothtorso"
    clothbody = "clothbody"
    weapon = "weapon"
    outfit = "outfit"
    drivable = "drivable"
    fruit = "fruit"
    darkstone = "darkstone"
    destructible = "destructible"
    environment = "environment"
    regeneration = "regeneration"
    insect = "insect"
    Specie_COUNT = "Specie_COUNT"


class Specie(Primitive[SpecieEnum]):  # Enum
    def __init__(self, node):
        super(Specie, self).__init__(SpecieEnum, node)
    schema_name = "Specie"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> Specie
        return Specie(node)
    def set(self, val):  # type: (SpecieEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class SpawningParameter(HelperObject):
    schema_name = "SpawningParameter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SpawningParameter
        return SpawningParameter(entlib.load_node_file(sourcefile, entlib.get_schema(SpawningParameter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SpawningParameter
        return SpawningParameter(entlib.make_node(SpawningParameter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityName(self):  # type: ()->String
        return String(self._node.at("EntityName"))
    @EntityName.setter
    def EntityName(self, val): self.EntityName.set(val)
    @property
    def MinimumDepth(self):  # type: ()->Float
        return Float(self._node.at("MinimumDepth"))
    @MinimumDepth.setter
    def MinimumDepth(self, val): self.MinimumDepth.set(val)
    @property
    def PeriodRandomness(self):  # type: ()->Float
        return Float(self._node.at("PeriodRandomness"))
    @PeriodRandomness.setter
    def PeriodRandomness(self, val): self.PeriodRandomness.set(val)
    @property
    def SpawningPeriod(self):  # type: ()->Float
        return Float(self._node.at("SpawningPeriod"))
    @SpawningPeriod.setter
    def SpawningPeriod(self, val): self.SpawningPeriod.set(val)
    @property
    def State(self):  # type: ()->String
        return String(self._node.at("State"))
    @State.setter
    def State(self, val): self.State.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SoundManager_BiomeSoundBank(HelperObject):

    pass


from EntityLibPy import Node

class SoundEventMapping(HelperObject):
    schema_name = "SoundEventMapping"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SoundEventMapping
        return SoundEventMapping(entlib.load_node_file(sourcefile, entlib.get_schema(SoundEventMapping.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SoundEventMapping
        return SoundEventMapping(entlib.make_node(SoundEventMapping.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Explicit(self):  # type: ()->Map[str, String]
        return (lambda n: Map(str, String, n))(self._node.at("Explicit"))
    @property
    def Ignored(self):  # type: ()->PrimitiveSet[str]
        return (lambda n: PrimitiveSet(str, n))(self._node.at("Ignored"))
    @property
    def Prefixed(self):  # type: ()->Map[str, String]
        return (lambda n: Map(str, String, n))(self._node.at("Prefixed"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class SoundEmissionStrengthEnum(Enum):
    none = "none"
    low = "low"
    medium = "medium"
    high = "high"
    SoundEmissionStrength_COUNT = "SoundEmissionStrength_COUNT"


class SoundEmissionStrength(Primitive[SoundEmissionStrengthEnum]):  # Enum
    def __init__(self, node):
        super(SoundEmissionStrength, self).__init__(SoundEmissionStrengthEnum, node)
    schema_name = "SoundEmissionStrength"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> SoundEmissionStrength
        return SoundEmissionStrength(node)
    def set(self, val):  # type: (SoundEmissionStrengthEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class soundEmissionStrength(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->SoundEmissionStrength
        return SoundEmissionStrength(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class SmoothScaleComponentInput_Parameters(HelperObject):
    schema_name = "SmoothScaleComponentInput::Parameters"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SmoothScaleComponentInput_Parameters
        return SmoothScaleComponentInput_Parameters(entlib.load_node_file(sourcefile, entlib.get_schema(SmoothScaleComponentInput_Parameters.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SmoothScaleComponentInput_Parameters
        return SmoothScaleComponentInput_Parameters(entlib.make_node(SmoothScaleComponentInput_Parameters.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Scale(self):  # type: ()->Float
        return Float(self._node.at("Scale"))
    @Scale.setter
    def Scale(self, val): self.Scale.set(val)
    @property
    def Time(self):  # type: ()->Float
        return Float(self._node.at("Time"))
    @Time.setter
    def Time(self, val): self.Time.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class SizeEnum(Enum):
    tiny = "tiny"
    small = "small"
    medium = "medium"
    big = "big"
    enormous = "enormous"
    Size_COUNT = "Size_COUNT"


class Size(Primitive[SizeEnum]):  # Enum
    def __init__(self, node):
        super(Size, self).__init__(SizeEnum, node)
    schema_name = "Size"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> Size
        return Size(node)
    def set(self, val):  # type: (SizeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class ShowdownSpeciesAudioData(HelperObject):
    schema_name = "ShowdownSpeciesAudioData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShowdownSpeciesAudioData
        return ShowdownSpeciesAudioData(entlib.load_node_file(sourcefile, entlib.get_schema(ShowdownSpeciesAudioData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShowdownSpeciesAudioData
        return ShowdownSpeciesAudioData(entlib.make_node(ShowdownSpeciesAudioData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AudioCategory(self):  # type: ()->String
        return String(self._node.at("AudioCategory"))
    @AudioCategory.setter
    def AudioCategory(self, val): self.AudioCategory.set(val)
    @property
    def Species(self):  # type: ()->String
        return String(self._node.at("Species"))
    @Species.setter
    def Species(self, val): self.Species.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShowdownLayerInfo(HelperObject):
    schema_name = "ShowdownLayerInfo"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShowdownLayerInfo
        return ShowdownLayerInfo(entlib.load_node_file(sourcefile, entlib.get_schema(ShowdownLayerInfo.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShowdownLayerInfo
        return ShowdownLayerInfo(entlib.make_node(ShowdownLayerInfo.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CoolDown(self):  # type: ()->Float
        return Float(self._node.at("CoolDown"))
    @CoolDown.setter
    def CoolDown(self, val): self.CoolDown.set(val)
    @property
    def DistanceRTPC(self):  # type: ()->String
        return String(self._node.at("DistanceRTPC"))
    @DistanceRTPC.setter
    def DistanceRTPC(self, val): self.DistanceRTPC.set(val)
    @property
    def Loop(self):  # type: ()->Bool
        return Bool(self._node.at("Loop"))
    @Loop.setter
    def Loop(self, val): self.Loop.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Priority(self):  # type: ()->String
        return String(self._node.at("Priority"))
    @Priority.setter
    def Priority(self, val): self.Priority.set(val)
    @property
    def UninvolvedDistanceRTPC(self):  # type: ()->String
        return String(self._node.at("UninvolvedDistanceRTPC"))
    @UninvolvedDistanceRTPC.setter
    def UninvolvedDistanceRTPC(self, val): self.UninvolvedDistanceRTPC.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShowdownLayerData(HelperObject):
    schema_name = "ShowdownLayerData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShowdownLayerData
        return ShowdownLayerData(entlib.load_node_file(sourcefile, entlib.get_schema(ShowdownLayerData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShowdownLayerData
        return ShowdownLayerData(entlib.make_node(ShowdownLayerData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Attacked(self):  # type: ()->ShowdownLayerInfo
        return ShowdownLayerInfo(self._node.at("Attacked"))
    @property
    def Danger(self):  # type: ()->ShowdownLayerInfo
        return ShowdownLayerInfo(self._node.at("Danger"))
    @property
    def Detected(self):  # type: ()->ShowdownLayerInfo
        return ShowdownLayerInfo(self._node.at("Detected"))
    @property
    def Suspected(self):  # type: ()->ShowdownLayerInfo
        return ShowdownLayerInfo(self._node.at("Suspected"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShowdownMusic(HelperObject):
    schema_name = "ShowdownMusic"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShowdownMusic
        return ShowdownMusic(entlib.load_node_file(sourcefile, entlib.get_schema(ShowdownMusic.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShowdownMusic
        return ShowdownMusic(entlib.make_node(ShowdownMusic.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AfterEpicCoolDown(self):  # type: ()->Float
        return Float(self._node.at("AfterEpicCoolDown"))
    @AfterEpicCoolDown.setter
    def AfterEpicCoolDown(self, val): self.AfterEpicCoolDown.set(val)
    @property
    def CloseRange(self):  # type: ()->Float
        return Float(self._node.at("CloseRange"))
    @CloseRange.setter
    def CloseRange(self, val): self.CloseRange.set(val)
    @property
    def CoolDownBeforeStop(self):  # type: ()->Float
        return Float(self._node.at("CoolDownBeforeStop"))
    @CoolDownBeforeStop.setter
    def CoolDownBeforeStop(self, val): self.CoolDownBeforeStop.set(val)
    @property
    def EventsPrefix(self):  # type: ()->String
        return String(self._node.at("EventsPrefix"))
    @EventsPrefix.setter
    def EventsPrefix(self, val): self.EventsPrefix.set(val)
    @property
    def IntensityCountMax(self):  # type: ()->Int
        return Int(self._node.at("IntensityCountMax"))
    @IntensityCountMax.setter
    def IntensityCountMax(self, val): self.IntensityCountMax.set(val)
    @property
    def IntensityCountRatio(self):  # type: ()->Float
        return Float(self._node.at("IntensityCountRatio"))
    @IntensityCountRatio.setter
    def IntensityCountRatio(self, val): self.IntensityCountRatio.set(val)
    @property
    def IntensityDistanceRatio(self):  # type: ()->Float
        return Float(self._node.at("IntensityDistanceRatio"))
    @IntensityDistanceRatio.setter
    def IntensityDistanceRatio(self, val): self.IntensityDistanceRatio.set(val)
    @property
    def IntensityRTPC(self):  # type: ()->String
        return String(self._node.at("IntensityRTPC"))
    @IntensityRTPC.setter
    def IntensityRTPC(self, val): self.IntensityRTPC.set(val)
    @property
    def Layers(self):  # type: ()->ShowdownLayerData
        return ShowdownLayerData(self._node.at("Layers"))
    @property
    def MostSignificantCreatureDistanceRTPC(self):  # type: ()->String
        return String(self._node.at("MostSignificantCreatureDistanceRTPC"))
    @MostSignificantCreatureDistanceRTPC.setter
    def MostSignificantCreatureDistanceRTPC(self, val): self.MostSignificantCreatureDistanceRTPC.set(val)
    @property
    def MusicSourceAnchorRadius(self):  # type: ()->Float
        return Float(self._node.at("MusicSourceAnchorRadius"))
    @MusicSourceAnchorRadius.setter
    def MusicSourceAnchorRadius(self, val): self.MusicSourceAnchorRadius.set(val)
    @property
    def MusicSourceDamping(self):  # type: ()->Float
        return Float(self._node.at("MusicSourceDamping"))
    @MusicSourceDamping.setter
    def MusicSourceDamping(self, val): self.MusicSourceDamping.set(val)
    @property
    def PlayerInvolvedScoreFactor(self):  # type: ()->Float
        return Float(self._node.at("PlayerInvolvedScoreFactor"))
    @PlayerInvolvedScoreFactor.setter
    def PlayerInvolvedScoreFactor(self, val): self.PlayerInvolvedScoreFactor.set(val)
    @property
    def PlayerUninvolvedDistanceFactor(self):  # type: ()->Float
        return Float(self._node.at("PlayerUninvolvedDistanceFactor"))
    @PlayerUninvolvedDistanceFactor.setter
    def PlayerUninvolvedDistanceFactor(self, val): self.PlayerUninvolvedDistanceFactor.set(val)
    @property
    def RTPC_2D3D(self):  # type: ()->String
        return String(self._node.at("RTPC_2D3D"))
    @RTPC_2D3D.setter
    def RTPC_2D3D(self, val): self.RTPC_2D3D.set(val)
    @property
    def RTPC_PlayersInFight(self):  # type: ()->String
        return String(self._node.at("RTPC_PlayersInFight"))
    @RTPC_PlayersInFight.setter
    def RTPC_PlayersInFight(self, val): self.RTPC_PlayersInFight.set(val)
    @property
    def ShowdownBlueSideState(self):  # type: ()->String
        return String(self._node.at("ShowdownBlueSideState"))
    @ShowdownBlueSideState.setter
    def ShowdownBlueSideState(self, val): self.ShowdownBlueSideState.set(val)
    @property
    def ShowdownMusBank(self):  # type: ()->String
        return String(self._node.at("ShowdownMusBank"))
    @ShowdownMusBank.setter
    def ShowdownMusBank(self, val): self.ShowdownMusBank.set(val)
    @property
    def ShowdownMusState(self):  # type: ()->String
        return String(self._node.at("ShowdownMusState"))
    @ShowdownMusState.setter
    def ShowdownMusState(self, val): self.ShowdownMusState.set(val)
    @property
    def ShowdownNeutralSideState(self):  # type: ()->String
        return String(self._node.at("ShowdownNeutralSideState"))
    @ShowdownNeutralSideState.setter
    def ShowdownNeutralSideState(self, val): self.ShowdownNeutralSideState.set(val)
    @property
    def ShowdownRedSideState(self):  # type: ()->String
        return String(self._node.at("ShowdownRedSideState"))
    @ShowdownRedSideState.setter
    def ShowdownRedSideState(self, val): self.ShowdownRedSideState.set(val)
    @property
    def ShowdownSideState(self):  # type: ()->String
        return String(self._node.at("ShowdownSideState"))
    @ShowdownSideState.setter
    def ShowdownSideState(self, val): self.ShowdownSideState.set(val)
    @property
    def ShowdownTypeState(self):  # type: ()->String
        return String(self._node.at("ShowdownTypeState"))
    @ShowdownTypeState.setter
    def ShowdownTypeState(self, val): self.ShowdownTypeState.set(val)
    @property
    def SmoothDistanceRTPCs(self):  # type: ()->Float
        return Float(self._node.at("SmoothDistanceRTPCs"))
    @SmoothDistanceRTPCs.setter
    def SmoothDistanceRTPCs(self, val): self.SmoothDistanceRTPCs.set(val)
    @property
    def SmoothTime(self):  # type: ()->Float
        return Float(self._node.at("SmoothTime"))
    @SmoothTime.setter
    def SmoothTime(self, val): self.SmoothTime.set(val)
    @property
    def SpeciesToAudioCategory(self):  # type: ()->Array[ShowdownSpeciesAudioData]
        return (lambda n: Array(ShowdownSpeciesAudioData, n))(self._node.at("SpeciesToAudioCategory"))
    @property
    def SynchronizationMode(self):  # type: ()->SyncTempoMode
        return SyncTempoMode(self._node.at("SynchronizationMode"))
    @SynchronizationMode.setter
    def SynchronizationMode(self, val): self.SynchronizationMode.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShootSequenceData(HelperObject):
    schema_name = "ShootSequenceData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShootSequenceData
        return ShootSequenceData(entlib.load_node_file(sourcefile, entlib.get_schema(ShootSequenceData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShootSequenceData
        return ShootSequenceData(entlib.make_node(ShootSequenceData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Param(self):  # type: ()->Float
        return Float(self._node.at("Param"))
    @Param.setter
    def Param(self, val): self.Param.set(val)
    @property
    def Type_(self):  # type: ()->String
        return String(self._node.at("Type"))
    @Type_.setter
    def Type_(self, val): self.Type_.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShootData(HelperObject):
    schema_name = "ShootData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShootData
        return ShootData(entlib.load_node_file(sourcefile, entlib.get_schema(ShootData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShootData
        return ShootData(entlib.make_node(ShootData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def ammoName(self):  # type: ()->String
        return String(self._node.at("ammoName"))
    @ammoName.setter
    def ammoName(self, val): self.ammoName.set(val)
    @property
    def anticipationImprecision(self):  # type: ()->Float
        return Float(self._node.at("anticipationImprecision"))
    @anticipationImprecision.setter
    def anticipationImprecision(self, val): self.anticipationImprecision.set(val)
    @property
    def canShoot(self):  # type: ()->Bool
        return Bool(self._node.at("canShoot"))
    @canShoot.setter
    def canShoot(self, val): self.canShoot.set(val)
    @property
    def chargeTierCount(self):  # type: ()->Int
        return Int(self._node.at("chargeTierCount"))
    @chargeTierCount.setter
    def chargeTierCount(self, val): self.chargeTierCount.set(val)
    @property
    def gravity(self):  # type: ()->Float
        return Float(self._node.at("gravity"))
    @gravity.setter
    def gravity(self, val): self.gravity.set(val)
    @property
    def lifeCost(self):  # type: ()->Float
        return Float(self._node.at("lifeCost"))
    @lifeCost.setter
    def lifeCost(self, val): self.lifeCost.set(val)
    @property
    def lifeCostCharged(self):  # type: ()->Float
        return Float(self._node.at("lifeCostCharged"))
    @lifeCostCharged.setter
    def lifeCostCharged(self, val): self.lifeCostCharged.set(val)
    @property
    def maxChargeDuration(self):  # type: ()->Float
        return Float(self._node.at("maxChargeDuration"))
    @maxChargeDuration.setter
    def maxChargeDuration(self, val): self.maxChargeDuration.set(val)
    @property
    def maxShootDistance(self):  # type: ()->Float
        return Float(self._node.at("maxShootDistance"))
    @maxShootDistance.setter
    def maxShootDistance(self, val): self.maxShootDistance.set(val)
    @property
    def minDelayBetweenShots(self):  # type: ()->Float
        return Float(self._node.at("minDelayBetweenShots"))
    @minDelayBetweenShots.setter
    def minDelayBetweenShots(self, val): self.minDelayBetweenShots.set(val)
    @property
    def randomAngleShoot(self):  # type: ()->Bool
        return Bool(self._node.at("randomAngleShoot"))
    @randomAngleShoot.setter
    def randomAngleShoot(self, val): self.randomAngleShoot.set(val)
    @property
    def shootMaxAngle(self):  # type: ()->Float
        return Float(self._node.at("shootMaxAngle"))
    @shootMaxAngle.setter
    def shootMaxAngle(self, val): self.shootMaxAngle.set(val)
    @property
    def shootSpeed(self):  # type: ()->Float
        return Float(self._node.at("shootSpeed"))
    @shootSpeed.setter
    def shootSpeed(self, val): self.shootSpeed.set(val)
    @property
    def zoneImprecision(self):  # type: ()->Float
        return Float(self._node.at("zoneImprecision"))
    @zoneImprecision.setter
    def zoneImprecision(self, val): self.zoneImprecision.set(val)
    pass


from EntityLibPy import Node

class SetOfObjectItem(HelperObject):

    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Value(self):  # type: ()->String
        return String(self._node.at("Value"))
    @Value.setter
    def Value(self, val): self.Value.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SeedPatchData(HelperObject):
    schema_name = "SeedPatchData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SeedPatchData
        return SeedPatchData(entlib.load_node_file(sourcefile, entlib.get_schema(SeedPatchData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SeedPatchData
        return SeedPatchData(entlib.make_node(SeedPatchData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def NoiseBlur(self):  # type: ()->Float
        return Float(self._node.at("NoiseBlur"))
    @NoiseBlur.setter
    def NoiseBlur(self, val): self.NoiseBlur.set(val)
    @property
    def NoiseContrast(self):  # type: ()->Float
        return Float(self._node.at("NoiseContrast"))
    @NoiseContrast.setter
    def NoiseContrast(self, val): self.NoiseContrast.set(val)
    @property
    def NoiseInvert(self):  # type: ()->Bool
        return Bool(self._node.at("NoiseInvert"))
    @NoiseInvert.setter
    def NoiseInvert(self, val): self.NoiseInvert.set(val)
    @property
    def NoiseName(self):  # type: ()->String
        return String(self._node.at("NoiseName"))
    @NoiseName.setter
    def NoiseName(self, val): self.NoiseName.set(val)
    @property
    def NoiseOffsetX(self):  # type: ()->Float
        return Float(self._node.at("NoiseOffsetX"))
    @NoiseOffsetX.setter
    def NoiseOffsetX(self, val): self.NoiseOffsetX.set(val)
    @property
    def NoiseOffsetY(self):  # type: ()->Float
        return Float(self._node.at("NoiseOffsetY"))
    @NoiseOffsetY.setter
    def NoiseOffsetY(self, val): self.NoiseOffsetY.set(val)
    @property
    def NoiseOpacity(self):  # type: ()->Float
        return Float(self._node.at("NoiseOpacity"))
    @NoiseOpacity.setter
    def NoiseOpacity(self, val): self.NoiseOpacity.set(val)
    @property
    def NoisePosition(self):  # type: ()->Float
        return Float(self._node.at("NoisePosition"))
    @NoisePosition.setter
    def NoisePosition(self, val): self.NoisePosition.set(val)
    @property
    def NoiseSizeX(self):  # type: ()->Float
        return Float(self._node.at("NoiseSizeX"))
    @NoiseSizeX.setter
    def NoiseSizeX(self, val): self.NoiseSizeX.set(val)
    @property
    def NoiseSizeY(self):  # type: ()->Float
        return Float(self._node.at("NoiseSizeY"))
    @NoiseSizeY.setter
    def NoiseSizeY(self, val): self.NoiseSizeY.set(val)
    @property
    def SeedName(self):  # type: ()->String
        return String(self._node.at("SeedName"))
    @SeedName.setter
    def SeedName(self, val): self.SeedName.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SeedPatchDataMap(HelperObject):
    schema_name = "SeedPatchDataMap"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SeedPatchDataMap
        return SeedPatchDataMap(entlib.load_node_file(sourcefile, entlib.get_schema(SeedPatchDataMap.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SeedPatchDataMap
        return SeedPatchDataMap(entlib.make_node(SeedPatchDataMap.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Data(self):  # type: ()->Map[str, SeedPatchData]
        return (lambda n: Map(str, SeedPatchData, n))(self._node.at("Data"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SeedPatchDataList(HelperObject):
    schema_name = "SeedPatchDataList"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SeedPatchDataList
        return SeedPatchDataList(entlib.load_node_file(sourcefile, entlib.get_schema(SeedPatchDataList.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SeedPatchDataList
        return SeedPatchDataList(entlib.make_node(SeedPatchDataList.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Data(self):  # type: ()->Array[SeedPatchData]
        return (lambda n: Array(SeedPatchData, n))(self._node.at("Data"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ScriptPathAndDataSet(HelperObject):
    schema_name = "ScriptPathAndDataSet"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ScriptPathAndDataSet
        return ScriptPathAndDataSet(entlib.load_node_file(sourcefile, entlib.get_schema(ScriptPathAndDataSet.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ScriptPathAndDataSet
        return ScriptPathAndDataSet(entlib.make_node(ScriptPathAndDataSet.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AutoLaunch(self):  # type: ()->Bool
        return Bool(self._node.at("AutoLaunch"))
    @AutoLaunch.setter
    def AutoLaunch(self, val): self.AutoLaunch.set(val)
    @property
    def DataMap(self):  # type: ()->Map[str, TypedValue]
        return (lambda n: Map(str, TypedValue, n))(self._node.at("DataMap"))
    @property
    def NickName(self):  # type: ()->String
        return String(self._node.at("NickName"))
    @NickName.setter
    def NickName(self, val): self.NickName.set(val)
    @property
    def Path(self):  # type: ()->String
        return String(self._node.at("Path"))
    @Path.setter
    def Path(self, val): self.Path.set(val)
    @property
    def SpawnDataSets(self):  # type: ()->Array[ScriptPathAndDataSet]
        return (lambda n: Array(ScriptPathAndDataSet, n))(self._node.at("SpawnDataSets"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ScaleFactor(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class ScaleConverter(HelperObject):
    schema_name = "ScaleConverter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ScaleConverter
        return ScaleConverter(entlib.load_node_file(sourcefile, entlib.get_schema(ScaleConverter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ScaleConverter
        return ScaleConverter(entlib.make_node(ScaleConverter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def easing(self):  # type: ()->variant_Pasta_Easing_Curve_string_
        return variant_Pasta_Easing_Curve_string_(self._node.at("easing"))
    @property
    def in_(self):  # type: ()->Vector2
        return Vector2(self._node.at("in"))
    @in_.setter
    def in_(self, val): self.in_.set(val)
    @property
    def inText(self):  # type: ()->String
        return String(self._node.at("inText"))
    @inText.setter
    def inText(self, val): self.inText.set(val)
    @property
    def out(self):  # type: ()->Vector2
        return Vector2(self._node.at("out"))
    @out.setter
    def out(self, val): self.out.set(val)
    @property
    def outText(self):  # type: ()->String
        return String(self._node.at("outText"))
    @outText.setter
    def outText(self, val): self.outText.set(val)
    pass


from EntityLibPy import Node

class RigidBodyUserData(HelperObject):
    schema_name = "RigidBodyUserData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RigidBodyUserData
        return RigidBodyUserData(entlib.load_node_file(sourcefile, entlib.get_schema(RigidBodyUserData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RigidBodyUserData
        return RigidBodyUserData(entlib.make_node(RigidBodyUserData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class RigidBodyUserDataLedges(HelperObject):
    schema_name = "RigidBodyUserDataLedges"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RigidBodyUserDataLedges
        return RigidBodyUserDataLedges(entlib.load_node_file(sourcefile, entlib.get_schema(RigidBodyUserDataLedges.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RigidBodyUserDataLedges
        return RigidBodyUserDataLedges(entlib.make_node(RigidBodyUserDataLedges.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->RigidBodyUserData
        return RigidBodyUserData(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RigidBodyUserDataDamage(HelperObject):
    schema_name = "RigidBodyUserDataDamage"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RigidBodyUserDataDamage
        return RigidBodyUserDataDamage(entlib.load_node_file(sourcefile, entlib.get_schema(RigidBodyUserDataDamage.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RigidBodyUserDataDamage
        return RigidBodyUserDataDamage(entlib.make_node(RigidBodyUserDataDamage.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->RigidBodyUserData
        return RigidBodyUserData(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RigidBodyMeshNavigation(HelperObject):
    schema_name = "RigidBodyMeshNavigation"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RigidBodyMeshNavigation
        return RigidBodyMeshNavigation(entlib.load_node_file(sourcefile, entlib.get_schema(RigidBodyMeshNavigation.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RigidBodyMeshNavigation
        return RigidBodyMeshNavigation(entlib.make_node(RigidBodyMeshNavigation.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->RigidBodyUserData
        return RigidBodyUserData(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidRigidbodyUserData(HelperObject):
    schema_name = "FluidRigidbodyUserData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidRigidbodyUserData
        return FluidRigidbodyUserData(entlib.load_node_file(sourcefile, entlib.get_schema(FluidRigidbodyUserData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidRigidbodyUserData
        return FluidRigidbodyUserData(entlib.make_node(FluidRigidbodyUserData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->RigidBodyUserData
        return RigidBodyUserData(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class ReviveStateEnum(Enum):
    skeleton = "skeleton"
    zombie = "zombie"
    full = "full"
    ReviveState_COUNT = "ReviveState_COUNT"


class ReviveState(Primitive[ReviveStateEnum]):  # Enum
    def __init__(self, node):
        super(ReviveState, self).__init__(ReviveStateEnum, node)
    schema_name = "ReviveState"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> ReviveState
        return ReviveState(node)
    def set(self, val):  # type: (ReviveStateEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class ReviveSideData(HelperObject):
    schema_name = "ReviveSideData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReviveSideData
        return ReviveSideData(entlib.load_node_file(sourcefile, entlib.get_schema(ReviveSideData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReviveSideData
        return ReviveSideData(entlib.make_node(ReviveSideData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("EntityRef"))
    @EntityRef.setter
    def EntityRef(self, val): self.EntityRef.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class ReviveSideEnum(Enum):
    neutral = "neutral"
    sacred = "sacred"
    cursed = "cursed"
    ReviveSide_COUNT = "ReviveSide_COUNT"


class ReviveSide(Primitive[ReviveSideEnum]):  # Enum
    def __init__(self, node):
        super(ReviveSide, self).__init__(ReviveSideEnum, node)
    schema_name = "ReviveSide"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> ReviveSide
        return ReviveSide(node)
    def set(self, val):  # type: (ReviveSideEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class RevivedData(HelperObject):
    schema_name = "RevivedData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RevivedData
        return RevivedData(entlib.load_node_file(sourcefile, entlib.get_schema(RevivedData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RevivedData
        return RevivedData(entlib.make_node(RevivedData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CanBeFreed(self):  # type: ()->Bool
        return Bool(self._node.at("CanBeFreed"))
    @CanBeFreed.setter
    def CanBeFreed(self, val): self.CanBeFreed.set(val)
    @property
    def DecreaseOverTimeSpeed(self):  # type: ()->Float
        return Float(self._node.at("DecreaseOverTimeSpeed"))
    @DecreaseOverTimeSpeed.setter
    def DecreaseOverTimeSpeed(self, val): self.DecreaseOverTimeSpeed.set(val)
    @property
    def LifeMinHysteresis(self):  # type: ()->Float
        return Float(self._node.at("LifeMinHysteresis"))
    @LifeMinHysteresis.setter
    def LifeMinHysteresis(self, val): self.LifeMinHysteresis.set(val)
    @property
    def LifeMinReviveSideNeutral(self):  # type: ()->Float
        return Float(self._node.at("LifeMinReviveSideNeutral"))
    @LifeMinReviveSideNeutral.setter
    def LifeMinReviveSideNeutral(self, val): self.LifeMinReviveSideNeutral.set(val)
    @property
    def NonCreatureConvertRatio(self):  # type: ()->Float
        return Float(self._node.at("NonCreatureConvertRatio"))
    @NonCreatureConvertRatio.setter
    def NonCreatureConvertRatio(self, val): self.NonCreatureConvertRatio.set(val)
    @property
    def RequestReviveLocked(self):  # type: ()->Bool
        return Bool(self._node.at("RequestReviveLocked"))
    @RequestReviveLocked.setter
    def RequestReviveLocked(self, val): self.RequestReviveLocked.set(val)
    @property
    def ReviveEnergyMax(self):  # type: ()->Float
        return Float(self._node.at("ReviveEnergyMax"))
    @ReviveEnergyMax.setter
    def ReviveEnergyMax(self, val): self.ReviveEnergyMax.set(val)
    @property
    def ReviveSinAmplitude(self):  # type: ()->Float
        return Float(self._node.at("ReviveSinAmplitude"))
    @ReviveSinAmplitude.setter
    def ReviveSinAmplitude(self, val): self.ReviveSinAmplitude.set(val)
    @property
    def StartSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("StartSide"))
    @StartSide.setter
    def StartSide(self, val): self.StartSide.set(val)
    @property
    def StateThresholds(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("StateThresholds"))
    @StateThresholds.setter
    def StateThresholds(self, val): self.StateThresholds.set(val)
    @property
    def TimeBeforeFree(self):  # type: ()->Float
        return Float(self._node.at("TimeBeforeFree"))
    @TimeBeforeFree.setter
    def TimeBeforeFree(self, val): self.TimeBeforeFree.set(val)
    @property
    def VomitData(self):  # type: ()->VomitData
        return VomitData(self._node.at("VomitData"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReviveSideEvent(HelperObject):
    schema_name = "ReviveSideEvent"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReviveSideEvent
        return ReviveSideEvent(entlib.load_node_file(sourcefile, entlib.get_schema(ReviveSideEvent.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReviveSideEvent
        return ReviveSideEvent(entlib.make_node(ReviveSideEvent.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ElapsedTime(self):  # type: ()->Float
        return Float(self._node.at("ElapsedTime"))
    @ElapsedTime.setter
    def ElapsedTime(self, val): self.ElapsedTime.set(val)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReviveEnergyComponentInput_ReviveSide(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node
class ResponsiblePointer_CineEvent_(Union):
    pass


from EntityLibPy import Node

class ResponsiblePointer_AnalyticsObserverInterface_(HelperObject):
    schema_name = "ResponsiblePointer&lt;AnalyticsObserverInterface&gt;"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ResponsiblePointer_AnalyticsObserverInterface_
        return ResponsiblePointer_AnalyticsObserverInterface_(entlib.load_node_file(sourcefile, entlib.get_schema(ResponsiblePointer_AnalyticsObserverInterface_.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ResponsiblePointer_AnalyticsObserverInterface_
        return ResponsiblePointer_AnalyticsObserverInterface_(entlib.make_node(ResponsiblePointer_AnalyticsObserverInterface_.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node
class ResponsiblePointer_ActorState_(Union):
    pass


from EntityLibPy import Node
class RegenerationStateEnum(Enum):
    None_ = "None"
    Sacred = "Sacred"
    Cursed = "Cursed"
    Lush = "Lush"
    Neutral = "Neutral"
    Dead = "Dead"
    RegenerationState_COUNT = "RegenerationState_COUNT"


class RegenerationState(Primitive[RegenerationStateEnum]):  # Enum
    def __init__(self, node):
        super(RegenerationState, self).__init__(RegenerationStateEnum, node)
    schema_name = "RegenerationState"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> RegenerationState
        return RegenerationState(node)
    def set(self, val):  # type: (RegenerationStateEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class RegenSwitchBehaviorEnum(Enum):
    CrossFade = "CrossFade"
    CrossMetamorphosis = "CrossMetamorphosis"
    SequentialMetamorphosis = "SequentialMetamorphosis"


class RegenSwitchBehavior(Primitive[RegenSwitchBehaviorEnum]):  # Enum
    def __init__(self, node):
        super(RegenSwitchBehavior, self).__init__(RegenSwitchBehaviorEnum, node)
    schema_name = "RegenSwitchBehavior"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> RegenSwitchBehavior
        return RegenSwitchBehavior(node)
    def set(self, val):  # type: (RegenSwitchBehaviorEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class RegenMeshBone(HelperObject):
    schema_name = "RegenMeshBone"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenMeshBone
        return RegenMeshBone(entlib.load_node_file(sourcefile, entlib.get_schema(RegenMeshBone.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenMeshBone
        return RegenMeshBone(entlib.make_node(RegenMeshBone.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoneName(self):  # type: ()->String
        return String(self._node.at("BoneName"))
    @BoneName.setter
    def BoneName(self, val): self.BoneName.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegenMeshBoneNeighbours(HelperObject):
    schema_name = "RegenMeshBoneNeighbours"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenMeshBoneNeighbours
        return RegenMeshBoneNeighbours(entlib.load_node_file(sourcefile, entlib.get_schema(RegenMeshBoneNeighbours.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenMeshBoneNeighbours
        return RegenMeshBoneNeighbours(entlib.make_node(RegenMeshBoneNeighbours.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoneName(self):  # type: ()->String
        return String(self._node.at("BoneName"))
    @BoneName.setter
    def BoneName(self, val): self.BoneName.set(val)
    @property
    def Neighbours(self):  # type: ()->Array[RegenMeshBone]
        return (lambda n: Array(RegenMeshBone, n))(self._node.at("Neighbours"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegenMeshBonesNeighbourHood(HelperObject):
    schema_name = "RegenMeshBonesNeighbourHood"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenMeshBonesNeighbourHood
        return RegenMeshBonesNeighbourHood(entlib.load_node_file(sourcefile, entlib.get_schema(RegenMeshBonesNeighbourHood.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenMeshBonesNeighbourHood
        return RegenMeshBonesNeighbourHood(entlib.make_node(RegenMeshBonesNeighbourHood.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Bones(self):  # type: ()->Array[RegenMeshBoneNeighbours]
        return (lambda n: Array(RegenMeshBoneNeighbours, n))(self._node.at("Bones"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReflectionTools_EnumSchema(HelperObject):
    schema_name = "ReflectionTools::EnumSchema"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionTools_EnumSchema
        return ReflectionTools_EnumSchema(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionTools_EnumSchema.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionTools_EnumSchema
        return ReflectionTools_EnumSchema(entlib.make_node(ReflectionTools_EnumSchema.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Values(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("Values"))
    @Values.setter
    def Values(self, val): self.Values.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(HelperObject):
    schema_name = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMethods"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods
        return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods
        return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods(entlib.make_node(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def ParamTypes(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("ParamTypes"))
    @ParamTypes.setter
    def ParamTypes(self, val): self.ParamTypes.set(val)
    @property
    def ReturnType(self):  # type: ()->String
        return String(self._node.at("ReturnType"))
    @ReturnType.setter
    def ReturnType(self, val): self.ReturnType.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(HelperObject):
    schema_name = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMetaData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData
        return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData
        return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData(entlib.make_node(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Type_(self):  # type: ()->String
        return String(self._node.at("Type"))
    @Type_.setter
    def Type_(self, val): self.Type_.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(HelperObject):
    schema_name = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaMember"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember
        return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember
        return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember(entlib.make_node(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Type_(self):  # type: ()->String
        return String(self._node.at("Type"))
    @Type_.setter
    def Type_(self, val): self.Type_.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(HelperObject):
    schema_name = "ReflectionTools::ClassReflectionSchema::ClassReflectionSchemaDependency"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency
        return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency
        return ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency(entlib.make_node(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Optional(self):  # type: ()->Bool
        return Bool(self._node.at("Optional"))
    @Optional.setter
    def Optional(self, val): self.Optional.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReflectionTools_FlatBufferSchemaDependenciesExporter(HelperObject):
    schema_name = "ReflectionTools::FlatBufferSchemaDependenciesExporter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionTools_FlatBufferSchemaDependenciesExporter
        return ReflectionTools_FlatBufferSchemaDependenciesExporter(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionTools_FlatBufferSchemaDependenciesExporter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionTools_FlatBufferSchemaDependenciesExporter
        return ReflectionTools_FlatBufferSchemaDependenciesExporter(entlib.make_node(ReflectionTools_FlatBufferSchemaDependenciesExporter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def className(self):  # type: ()->String
        return String(self._node.at("className"))
    @className.setter
    def className(self, val): self.className.set(val)
    @property
    def dependencies(self):  # type: ()->Array[ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency]
        return (lambda n: Array(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency, n))(self._node.at("dependencies"))
    pass


from EntityLibPy import Node

class ReflectionTools_ClassReflectionSchema(HelperObject):
    schema_name = "ReflectionTools::ClassReflectionSchema"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionTools_ClassReflectionSchema
        return ReflectionTools_ClassReflectionSchema(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionTools_ClassReflectionSchema.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionTools_ClassReflectionSchema
        return ReflectionTools_ClassReflectionSchema(entlib.make_node(ReflectionTools_ClassReflectionSchema.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BaseRecursive(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("BaseRecursive"))
    @BaseRecursive.setter
    def BaseRecursive(self, val): self.BaseRecursive.set(val)
    @property
    def Dependencies(self):  # type: ()->Array[ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency]
        return (lambda n: Array(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaDependency, n))(self._node.at("Dependencies"))
    @property
    def Members(self):  # type: ()->Array[ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember]
        return (lambda n: Array(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMember, n))(self._node.at("Members"))
    @property
    def Metadata(self):  # type: ()->Array[ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData]
        return (lambda n: Array(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMetaData, n))(self._node.at("Metadata"))
    @property
    def Methods(self):  # type: ()->Array[ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods]
        return (lambda n: Array(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods, n))(self._node.at("Methods"))
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def RPCMethods(self):  # type: ()->Array[ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods]
        return (lambda n: Array(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods, n))(self._node.at("RPCMethods"))
    @property
    def Signals(self):  # type: ()->Array[ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods]
        return (lambda n: Array(ReflectionTools_ClassReflectionSchema_ClassReflectionSchemaMethods, n))(self._node.at("Signals"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReflectionTools_ReflectionSchema(HelperObject):
    schema_name = "ReflectionTools::ReflectionSchema"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionTools_ReflectionSchema
        return ReflectionTools_ReflectionSchema(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionTools_ReflectionSchema.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionTools_ReflectionSchema
        return ReflectionTools_ReflectionSchema(entlib.make_node(ReflectionTools_ReflectionSchema.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Enums(self):  # type: ()->Array[ReflectionTools_EnumSchema]
        return (lambda n: Array(ReflectionTools_EnumSchema, n))(self._node.at("Enums"))
    @property
    def Schemas(self):  # type: ()->Array[ReflectionTools_ClassReflectionSchema]
        return (lambda n: Array(ReflectionTools_ClassReflectionSchema, n))(self._node.at("Schemas"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReflectionMethodParameter(HelperObject):
    schema_name = "ReflectionMethodParameter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionMethodParameter
        return ReflectionMethodParameter(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionMethodParameter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionMethodParameter
        return ReflectionMethodParameter(entlib.make_node(ReflectionMethodParameter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def containerType(self):  # type: ()->Int
        return Int(self._node.at("containerType"))
    @containerType.setter
    def containerType(self, val): self.containerType.set(val)
    @property
    def elementType(self):  # type: ()->Int
        return Int(self._node.at("elementType"))
    @elementType.setter
    def elementType(self, val): self.elementType.set(val)
    @property
    def elementTypeName(self):  # type: ()->String
        return String(self._node.at("elementTypeName"))
    @elementTypeName.setter
    def elementTypeName(self, val): self.elementTypeName.set(val)
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    @property
    def typeName(self):  # type: ()->String
        return String(self._node.at("typeName"))
    @typeName.setter
    def typeName(self, val): self.typeName.set(val)
    pass


from EntityLibPy import Node

class ReflectionMethod(HelperObject):
    schema_name = "ReflectionMethod"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionMethod
        return ReflectionMethod(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionMethod.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionMethod
        return ReflectionMethod(entlib.make_node(ReflectionMethod.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def inputs(self):  # type: ()->Array[ReflectionMethodParameter]
        return (lambda n: Array(ReflectionMethodParameter, n))(self._node.at("inputs"))
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    @property
    def outputs(self):  # type: ()->Array[ReflectionMethodParameter]
        return (lambda n: Array(ReflectionMethodParameter, n))(self._node.at("outputs"))
    @property
    def threadSafe(self):  # type: ()->Bool
        return Bool(self._node.at("threadSafe"))
    @threadSafe.setter
    def threadSafe(self, val): self.threadSafe.set(val)
    pass


from EntityLibPy import Node

class ReflectionEnum(HelperObject):
    schema_name = "ReflectionEnum"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionEnum
        return ReflectionEnum(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionEnum.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionEnum
        return ReflectionEnum(entlib.make_node(ReflectionEnum.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    @property
    def names(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("names"))
    @names.setter
    def names(self, val): self.names.set(val)
    @property
    def values(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("values"))
    @values.setter
    def values(self, val): self.values.set(val)
    pass


from EntityLibPy import Node

class ReflectionClass(HelperObject):
    schema_name = "ReflectionClass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionClass
        return ReflectionClass(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionClass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionClass
        return ReflectionClass(entlib.make_node(ReflectionClass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def methods(self):  # type: ()->Array[ReflectionMethod]
        return (lambda n: Array(ReflectionMethod, n))(self._node.at("methods"))
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    pass


from EntityLibPy import Node

class ReflectionDb(HelperObject):
    schema_name = "ReflectionDb"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReflectionDb
        return ReflectionDb(entlib.load_node_file(sourcefile, entlib.get_schema(ReflectionDb.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReflectionDb
        return ReflectionDb(entlib.make_node(ReflectionDb.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def classes(self):  # type: ()->Array[ReflectionClass]
        return (lambda n: Array(ReflectionClass, n))(self._node.at("classes"))
    @property
    def enums(self):  # type: ()->Array[ReflectionEnum]
        return (lambda n: Array(ReflectionEnum, n))(self._node.at("enums"))
    pass


from EntityLibPy import Node
Quat = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class sPhysicsJointDesc(HelperObject):
    schema_name = "sPhysicsJointDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sPhysicsJointDesc
        return sPhysicsJointDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sPhysicsJointDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sPhysicsJointDesc
        return sPhysicsJointDesc(entlib.make_node(sPhysicsJointDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Ball(self):  # type: ()->sJointBallDesc
        return sJointBallDesc(self._node.at("Ball"))
    @property
    def Fixed(self):  # type: ()->sJointFixedDesc
        return sJointFixedDesc(self._node.at("Fixed"))
    @property
    def Hinge(self):  # type: ()->sJointHingeDesc
        return sJointHingeDesc(self._node.at("Hinge"))
    @property
    def JointType(self):  # type: ()->String
        return String(self._node.at("JointType"))
    @JointType.setter
    def JointType(self, val): self.JointType.set(val)
    @property
    def Slider(self):  # type: ()->sJointSliderDesc
        return sJointSliderDesc(self._node.at("Slider"))
    @property
    def SwingTwist(self):  # type: ()->sJointSwingTwistDesc
        return sJointSwingTwistDesc(self._node.at("SwingTwist"))
    @property
    def Universal(self):  # type: ()->sJointUniversalDesc
        return sJointUniversalDesc(self._node.at("Universal"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def flags(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("flags"))
    @flags.setter
    def flags(self, val): self.flags.set(val)
    @property
    def idRigodBodyA(self):  # type: ()->Int
        return Int(self._node.at("idRigodBodyA"))
    @idRigodBodyA.setter
    def idRigodBodyA(self, val): self.idRigodBodyA.set(val)
    @property
    def idRigodBodyB(self):  # type: ()->Int
        return Int(self._node.at("idRigodBodyB"))
    @idRigodBodyB.setter
    def idRigodBodyB(self, val): self.idRigodBodyB.set(val)
    @property
    def orientation(self):  # type: ()->Quat
        return Quat(self._node.at("orientation"))
    @orientation.setter
    def orientation(self, val): self.orientation.set(val)
    @property
    def parent(self):  # type: ()->String
        return String(self._node.at("parent"))
    @parent.setter
    def parent(self, val): self.parent.set(val)
    @property
    def translation(self):  # type: ()->Vector3
        return Vector3(self._node.at("translation"))
    @translation.setter
    def translation(self, val): self.translation.set(val)
    pass


from EntityLibPy import Node

class sPhysicShape(HelperObject):
    schema_name = "sPhysicShape"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sPhysicShape
        return sPhysicShape(entlib.load_node_file(sourcefile, entlib.get_schema(sPhysicShape.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sPhysicShape
        return sPhysicShape(entlib.make_node(sPhysicShape.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Box(self):  # type: ()->sPhysicsShapeBox
        return sPhysicsShapeBox(self._node.at("Box"))
    @property
    def Capsule(self):  # type: ()->sPhysicsShapeCapsule
        return sPhysicsShapeCapsule(self._node.at("Capsule"))
    @property
    def Cylinder(self):  # type: ()->sPhysicsShapeCylinder
        return sPhysicsShapeCylinder(self._node.at("Cylinder"))
    @property
    def Mesh(self):  # type: ()->sPhysicsShapeMesh
        return sPhysicsShapeMesh(self._node.at("Mesh"))
    @property
    def PhysicsMaterial(self):  # type: ()->String
        return String(self._node.at("PhysicsMaterial"))
    @PhysicsMaterial.setter
    def PhysicsMaterial(self, val): self.PhysicsMaterial.set(val)
    @property
    def Sphere(self):  # type: ()->sPhysicsShapeSphere
        return sPhysicsShapeSphere(self._node.at("Sphere"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def angles(self):  # type: ()->Vector3
        return Vector3(self._node.at("angles"))
    @angles.setter
    def angles(self, val): self.angles.set(val)
    @property
    def orientation(self):  # type: ()->Quat
        return Quat(self._node.at("orientation"))
    @orientation.setter
    def orientation(self, val): self.orientation.set(val)
    @property
    def scale(self):  # type: ()->Float
        return Float(self._node.at("scale"))
    @scale.setter
    def scale(self, val): self.scale.set(val)
    @property
    def translation(self):  # type: ()->Vector3
        return Vector3(self._node.at("translation"))
    @translation.setter
    def translation(self, val): self.translation.set(val)
    pass


from EntityLibPy import Node

class sRigidBodyDesc(HelperObject):
    schema_name = "sRigidBodyDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sRigidBodyDesc
        return sRigidBodyDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sRigidBodyDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sRigidBodyDesc
        return sRigidBodyDesc(entlib.make_node(sRigidBodyDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def angles(self):  # type: ()->Vector3
        return Vector3(self._node.at("angles"))
    @angles.setter
    def angles(self, val): self.angles.set(val)
    @property
    def flags(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("flags"))
    @flags.setter
    def flags(self, val): self.flags.set(val)
    @property
    def id(self):  # type: ()->Int
        return Int(self._node.at("id"))
    @id.setter
    def id(self, val): self.id.set(val)
    @property
    def motionType(self):  # type: ()->String
        return String(self._node.at("motionType"))
    @motionType.setter
    def motionType(self, val): self.motionType.set(val)
    @property
    def orientation(self):  # type: ()->Quat
        return Quat(self._node.at("orientation"))
    @orientation.setter
    def orientation(self, val): self.orientation.set(val)
    @property
    def parent(self):  # type: ()->String
        return String(self._node.at("parent"))
    @parent.setter
    def parent(self, val): self.parent.set(val)
    @property
    def scale(self):  # type: ()->Float
        return Float(self._node.at("scale"))
    @scale.setter
    def scale(self, val): self.scale.set(val)
    @property
    def shapes(self):  # type: ()->Array[sPhysicShape]
        return (lambda n: Array(sPhysicShape, n))(self._node.at("shapes"))
    @property
    def translation(self):  # type: ()->Vector3
        return Vector3(self._node.at("translation"))
    @translation.setter
    def translation(self, val): self.translation.set(val)
    pass


from EntityLibPy import Node

class Transform3D(HelperObject):
    schema_name = "Transform3D"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Transform3D
        return Transform3D(entlib.load_node_file(sourcefile, entlib.get_schema(Transform3D.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Transform3D
        return Transform3D(entlib.make_node(Transform3D.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def orientation(self):  # type: ()->Quat
        return Quat(self._node.at("orientation"))
    @orientation.setter
    def orientation(self, val): self.orientation.set(val)
    @property
    def scale(self):  # type: ()->Vector3
        return Vector3(self._node.at("scale"))
    @scale.setter
    def scale(self, val): self.scale.set(val)
    @property
    def translation(self):  # type: ()->Vector3
        return Vector3(self._node.at("translation"))
    @translation.setter
    def translation(self, val): self.translation.set(val)
    pass


from EntityLibPy import Node

class ProjectileShooterData(HelperObject):
    schema_name = "ProjectileShooterData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ProjectileShooterData
        return ProjectileShooterData(entlib.load_node_file(sourcefile, entlib.get_schema(ProjectileShooterData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ProjectileShooterData
        return ProjectileShooterData(entlib.make_node(ProjectileShooterData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SubEntity(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("SubEntity"))
    @SubEntity.setter
    def SubEntity(self, val): self.SubEntity.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ProgressSoundEventData(HelperObject):
    schema_name = "ProgressSoundEventData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ProgressSoundEventData
        return ProgressSoundEventData(entlib.load_node_file(sourcefile, entlib.get_schema(ProgressSoundEventData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ProgressSoundEventData
        return ProgressSoundEventData(entlib.make_node(ProgressSoundEventData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DecreaseEventName(self):  # type: ()->String
        return String(self._node.at("DecreaseEventName"))
    @DecreaseEventName.setter
    def DecreaseEventName(self, val): self.DecreaseEventName.set(val)
    @property
    def DecreaseStartThreshold(self):  # type: ()->Float
        return Float(self._node.at("DecreaseStartThreshold"))
    @DecreaseStartThreshold.setter
    def DecreaseStartThreshold(self, val): self.DecreaseStartThreshold.set(val)
    @property
    def DecreaseStopThreshold(self):  # type: ()->Float
        return Float(self._node.at("DecreaseStopThreshold"))
    @DecreaseStopThreshold.setter
    def DecreaseStopThreshold(self, val): self.DecreaseStopThreshold.set(val)
    @property
    def EventBank(self):  # type: ()->String
        return String(self._node.at("EventBank"))
    @EventBank.setter
    def EventBank(self, val): self.EventBank.set(val)
    @property
    def EventLooping(self):  # type: ()->Bool
        return Bool(self._node.at("EventLooping"))
    @EventLooping.setter
    def EventLooping(self, val): self.EventLooping.set(val)
    @property
    def IncreaseEventName(self):  # type: ()->String
        return String(self._node.at("IncreaseEventName"))
    @IncreaseEventName.setter
    def IncreaseEventName(self, val): self.IncreaseEventName.set(val)
    @property
    def IncreaseStartThreshold(self):  # type: ()->Float
        return Float(self._node.at("IncreaseStartThreshold"))
    @IncreaseStartThreshold.setter
    def IncreaseStartThreshold(self, val): self.IncreaseStartThreshold.set(val)
    @property
    def IncreaseStopThreshold(self):  # type: ()->Float
        return Float(self._node.at("IncreaseStopThreshold"))
    @IncreaseStopThreshold.setter
    def IncreaseStopThreshold(self, val): self.IncreaseStopThreshold.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PrimitiveData(HelperObject):

    @property
    def Height(self):  # type: ()->Float
        return Float(self._node.at("Height"))
    @Height.setter
    def Height(self, val): self.Height.set(val)
    @property
    def Length(self):  # type: ()->Float
        return Float(self._node.at("Length"))
    @Length.setter
    def Length(self, val): self.Length.set(val)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def Width(self):  # type: ()->Float
        return Float(self._node.at("Width"))
    @Width.setter
    def Width(self, val): self.Width.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class PrimitiveColliderTypeEnum(Enum):
    Undefined = "Undefined"
    Sphere = "Sphere"
    Box = "Box"
    Capsule = "Capsule"
    Cylinder = "Cylinder"
    Mesh = "Mesh"
    PrimitiveColliderType_COUNT = "PrimitiveColliderType_COUNT"


class PrimitiveColliderType(Primitive[PrimitiveColliderTypeEnum]):  # Enum
    def __init__(self, node):
        super(PrimitiveColliderType, self).__init__(PrimitiveColliderTypeEnum, node)
    schema_name = "PrimitiveColliderType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> PrimitiveColliderType
        return PrimitiveColliderType(node)
    def set(self, val):  # type: (PrimitiveColliderTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class PredictionBehaviorDuration(HelperObject):
    schema_name = "PredictionBehaviorDuration"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PredictionBehaviorDuration
        return PredictionBehaviorDuration(entlib.load_node_file(sourcefile, entlib.get_schema(PredictionBehaviorDuration.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PredictionBehaviorDuration
        return PredictionBehaviorDuration(entlib.make_node(PredictionBehaviorDuration.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Locked(self):  # type: ()->Float
        return Float(self._node.at("Locked"))
    @Locked.setter
    def Locked(self, val): self.Locked.set(val)
    @property
    def Step(self):  # type: ()->Float
        return Float(self._node.at("Step"))
    @Step.setter
    def Step(self, val): self.Step.set(val)
    @property
    def Total(self):  # type: ()->Float
        return Float(self._node.at("Total"))
    @Total.setter
    def Total(self, val): self.Total.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PredictionBehaviorData(HelperObject):
    schema_name = "PredictionBehaviorData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PredictionBehaviorData
        return PredictionBehaviorData(entlib.load_node_file(sourcefile, entlib.get_schema(PredictionBehaviorData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PredictionBehaviorData
        return PredictionBehaviorData(entlib.make_node(PredictionBehaviorData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Duration(self):  # type: ()->PredictionBehaviorDuration
        return PredictionBehaviorDuration(self._node.at("Duration"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class PrecisionEnum(Enum):
    full = "full"
    half = "half"
    quarter = "quarter"
    eighth = "eighth"
    sixteenth = "sixteenth"
    highest = "highest"
    lowest = "lowest"


class Precision(Primitive[PrecisionEnum]):  # Enum
    def __init__(self, node):
        super(Precision, self).__init__(PrecisionEnum, node)
    schema_name = "Precision"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> Precision
        return Precision(node)
    def set(self, val):  # type: (PrecisionEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class Position(TupleNode[Tuple[Type[Int], Type[Int], Type[Float], Type[Float], Type[Float]]]):
    def __init__(self, node=None):  # type: (EntityLibPy.Node) -> None
        super(Position, self).__init__((Int, Int, Float, Float, Float), node)
    schema_name = "Position"

    def get_0(self):  # type: () -> Int
        return Int(self._node.at(0))
    def get_1(self):  # type: () -> Int
        return Int(self._node.at(1))
    def get_2(self):  # type: () -> Float
        return Float(self._node.at(2))
    def get_3(self):  # type: () -> Float
        return Float(self._node.at(3))
    def get_4(self):  # type: () -> Float
        return Float(self._node.at(4))

from EntityLibPy import Node

class ProjectileTrajectory(HelperObject):
    schema_name = "ProjectileTrajectory"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ProjectileTrajectory
        return ProjectileTrajectory(entlib.load_node_file(sourcefile, entlib.get_schema(ProjectileTrajectory.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ProjectileTrajectory
        return ProjectileTrajectory(entlib.make_node(ProjectileTrajectory.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def m_direction(self):  # type: ()->Vector3
        return Vector3(self._node.at("m_direction"))
    @m_direction.setter
    def m_direction(self, val): self.m_direction.set(val)
    @property
    def m_position(self):  # type: ()->Position
        return Position(self._node.at("m_position"))
    @property
    def m_speed(self):  # type: ()->Float
        return Float(self._node.at("m_speed"))
    @m_speed.setter
    def m_speed(self, val): self.m_speed.set(val)
    @property
    def m_straightDistance(self):  # type: ()->Float
        return Float(self._node.at("m_straightDistance"))
    @m_straightDistance.setter
    def m_straightDistance(self, val): self.m_straightDistance.set(val)
    pass


from EntityLibPy import Node

class PlayRatio(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class PhysicsMaterial(HelperObject):
    schema_name = "PhysicsMaterial"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsMaterial
        return PhysicsMaterial(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsMaterial.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsMaterial
        return PhysicsMaterial(entlib.make_node(PhysicsMaterial.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ClimbablePerSize(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("ClimbablePerSize"))
    @ClimbablePerSize.setter
    def ClimbablePerSize(self, val): self.ClimbablePerSize.set(val)
    @property
    def MaterialId(self):  # type: ()->Int
        return Int(self._node.at("MaterialId"))
    @MaterialId.setter
    def MaterialId(self, val): self.MaterialId.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class PhysicsLayerEnum(Enum):
    Default = "Default"
    Ground = "Ground"
    Static = "Static"
    Raycast = "Raycast"
    Trigger = "Trigger"
    Walkable = "Walkable"
    Camera = "Camera"
    ClimbEdge = "ClimbEdge"
    Kinematic = "Kinematic"
    Ragdoll = "Ragdoll"
    Projectile = "Projectile"
    Hit = "Hit"
    MotionConstraint = "MotionConstraint"
    Heal = "Heal"
    Body = "Body"
    Fluid = "Fluid"
    Hitable = "Hitable"
    None_ = "None"
    All = "All"
    PHYSICLAYER_COUNT = "PHYSICLAYER_COUNT"


class PhysicsLayer(Primitive[PhysicsLayerEnum]):  # Enum
    def __init__(self, node):
        super(PhysicsLayer, self).__init__(PhysicsLayerEnum, node)
    schema_name = "PhysicsLayer"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> PhysicsLayer
        return PhysicsLayer(node)
    def set(self, val):  # type: (PhysicsLayerEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class PerceiverComponentInput_usePerception(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class Parameters(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->SmoothScaleComponentInput_Parameters
        return SmoothScaleComponentInput_Parameters(self._node.at("val"))
    pass


from EntityLibPy import Node
class OwnershipModuleDebugWindowEnum(Enum):
    Tree = "Tree"
    Settings = "Settings"
    In_Game_Debug_Data = "In Game Debug Data"
    OwnershipModuleDebugWindow_COUNT = "OwnershipModuleDebugWindow_COUNT"


class OwnershipModuleDebugWindow(Primitive[OwnershipModuleDebugWindowEnum]):  # Enum
    def __init__(self, node):
        super(OwnershipModuleDebugWindow, self).__init__(OwnershipModuleDebugWindowEnum, node)
    schema_name = "OwnershipModuleDebugWindow"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> OwnershipModuleDebugWindow
        return OwnershipModuleDebugWindow(node)
    def set(self, val):  # type: (OwnershipModuleDebugWindowEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class Game_OwnershipDebugger(HelperObject):
    schema_name = "Game::OwnershipDebugger"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Game_OwnershipDebugger
        return Game_OwnershipDebugger(entlib.load_node_file(sourcefile, entlib.get_schema(Game_OwnershipDebugger.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Game_OwnershipDebugger
        return Game_OwnershipDebugger(entlib.make_node(Game_OwnershipDebugger.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Display(self):  # type: ()->PrimArray[OwnershipModuleDebugWindow]
        return (lambda n: PrimArray(OwnershipModuleDebugWindow, n))(self._node.at("Display"))
    @Display.setter
    def Display(self, val): self.Display.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class OutfitWearerComponentInput_ReviveState(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ReviveState
        return ReviveState(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class OutfitWearerComponentInput_ReviveSide(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node
class OutfitPieceTypeEnum(Enum):
    OutfitPieceType_NONE = "OutfitPieceType_NONE"
    Head = "Head"
    Torso = "Torso"
    Skirt = "Skirt"
    Boots = "Boots"
    Brace = "Brace"
    Body = "Body"
    Hair = "Hair"
    OutfitPieceType_COUNT = "OutfitPieceType_COUNT"


class OutfitPieceType(Primitive[OutfitPieceTypeEnum]):  # Enum
    def __init__(self, node):
        super(OutfitPieceType, self).__init__(OutfitPieceTypeEnum, node)
    schema_name = "OutfitPieceType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> OutfitPieceType
        return OutfitPieceType(node)
    def set(self, val):  # type: (OutfitPieceTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class OutfitPiece(HelperObject):
    schema_name = "OutfitPiece"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->OutfitPiece
        return OutfitPiece(entlib.load_node_file(sourcefile, entlib.get_schema(OutfitPiece.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->OutfitPiece
        return OutfitPiece(entlib.make_node(OutfitPiece.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("EntityRef"))
    @EntityRef.setter
    def EntityRef(self, val): self.EntityRef.set(val)
    @property
    def Slot(self):  # type: ()->OutfitPieceType
        return OutfitPieceType(self._node.at("Slot"))
    @Slot.setter
    def Slot(self, val): self.Slot.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Orientation(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Quat
        return Quat(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class Online(HelperObject):

    pass


from EntityLibPy import Node
class Object_MaxActivationLevelEnum(Enum):
    Created = "Created"
    InWorld = "InWorld"
    Loading = "Loading"
    Started = "Started"


class Object_MaxActivationLevel(Primitive[Object_MaxActivationLevelEnum]):  # Enum
    def __init__(self, node):
        super(Object_MaxActivationLevel, self).__init__(Object_MaxActivationLevelEnum, node)
    
    def __call__(self, node):  # type: (EntityLibPy.Node) -> Object_MaxActivationLevel
        return Object_MaxActivationLevel(node)
    def set(self, val):  # type: (Object_MaxActivationLevelEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class NavmeshGenerationParameters(HelperObject):
    schema_name = "NavmeshGenerationParameters"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NavmeshGenerationParameters
        return NavmeshGenerationParameters(entlib.load_node_file(sourcefile, entlib.get_schema(NavmeshGenerationParameters.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NavmeshGenerationParameters
        return NavmeshGenerationParameters(entlib.make_node(NavmeshGenerationParameters.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CreatureHeight(self):  # type: ()->Float
        return Float(self._node.at("CreatureHeight"))
    @CreatureHeight.setter
    def CreatureHeight(self, val): self.CreatureHeight.set(val)
    @property
    def CreatureRadius(self):  # type: ()->Float
        return Float(self._node.at("CreatureRadius"))
    @CreatureRadius.setter
    def CreatureRadius(self, val): self.CreatureRadius.set(val)
    @property
    def MarkWaterAreas(self):  # type: ()->Bool
        return Bool(self._node.at("MarkWaterAreas"))
    @MarkWaterAreas.setter
    def MarkWaterAreas(self, val): self.MarkWaterAreas.set(val)
    @property
    def MaxClimbHeight(self):  # type: ()->Float
        return Float(self._node.at("MaxClimbHeight"))
    @MaxClimbHeight.setter
    def MaxClimbHeight(self, val): self.MaxClimbHeight.set(val)
    @property
    def MaxWalkableSlopeAngle(self):  # type: ()->Float
        return Float(self._node.at("MaxWalkableSlopeAngle"))
    @MaxWalkableSlopeAngle.setter
    def MaxWalkableSlopeAngle(self, val): self.MaxWalkableSlopeAngle.set(val)
    @property
    def MinWaterDepth(self):  # type: ()->Float
        return Float(self._node.at("MinWaterDepth"))
    @MinWaterDepth.setter
    def MinWaterDepth(self, val): self.MinWaterDepth.set(val)
    @property
    def SizeLayerMask(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("SizeLayerMask"))
    @SizeLayerMask.setter
    def SizeLayerMask(self, val): self.SizeLayerMask.set(val)
    @property
    def TileWorldSize(self):  # type: ()->Float
        return Float(self._node.at("TileWorldSize"))
    @TileWorldSize.setter
    def TileWorldSize(self, val): self.TileWorldSize.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class NavMeshTile(HelperObject):
    schema_name = "NavMeshTile"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NavMeshTile
        return NavMeshTile(entlib.load_node_file(sourcefile, entlib.get_schema(NavMeshTile.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NavMeshTile
        return NavMeshTile(entlib.make_node(NavMeshTile.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Data(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("Data"))
    @Data.setter
    def Data(self, val): self.Data.set(val)
    @property
    def TileRef(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("TileRef"))
    @TileRef.setter
    def TileRef(self, val): self.TileRef.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class NavMesh(HelperObject):
    schema_name = "NavMesh"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NavMesh
        return NavMesh(entlib.load_node_file(sourcefile, entlib.get_schema(NavMesh.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NavMesh
        return NavMesh(entlib.make_node(NavMesh.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoundingBox(self):  # type: ()->Vector3
        return Vector3(self._node.at("BoundingBox"))
    @BoundingBox.setter
    def BoundingBox(self, val): self.BoundingBox.set(val)
    @property
    def CenterToCorner(self):  # type: ()->Vector3
        return Vector3(self._node.at("CenterToCorner"))
    @CenterToCorner.setter
    def CenterToCorner(self, val): self.CenterToCorner.set(val)
    @property
    def LayerSizeMask(self):  # type: ()->Int
        return Int(self._node.at("LayerSizeMask"))
    @LayerSizeMask.setter
    def LayerSizeMask(self, val): self.LayerSizeMask.set(val)
    @property
    def NumTiles(self):  # type: ()->Int
        return Int(self._node.at("NumTiles"))
    @NumTiles.setter
    def NumTiles(self, val): self.NumTiles.set(val)
    @property
    def Params(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("Params"))
    @Params.setter
    def Params(self, val): self.Params.set(val)
    @property
    def Tiles(self):  # type: ()->Array[NavMeshTile]
        return (lambda n: Array(NavMeshTile, n))(self._node.at("Tiles"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MusicCategory(HelperObject):
    schema_name = "MusicCategory"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MusicCategory
        return MusicCategory(entlib.load_node_file(sourcefile, entlib.get_schema(MusicCategory.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MusicCategory
        return MusicCategory(entlib.make_node(MusicCategory.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EventName(self):  # type: ()->String
        return String(self._node.at("EventName"))
    @EventName.setter
    def EventName(self, val): self.EventName.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Weight(self):  # type: ()->Int
        return Int(self._node.at("Weight"))
    @Weight.setter
    def Weight(self, val): self.Weight.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MoveTo(HelperObject):
    schema_name = "MoveTo"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveTo
        return MoveTo(entlib.load_node_file(sourcefile, entlib.get_schema(MoveTo.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveTo
        return MoveTo(entlib.make_node(MoveTo.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class MoveToPosition(HelperObject):
    schema_name = "MoveToPosition"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveToPosition
        return MoveToPosition(entlib.load_node_file(sourcefile, entlib.get_schema(MoveToPosition.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveToPosition
        return MoveToPosition(entlib.make_node(MoveToPosition.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->MoveTo
        return MoveTo(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MoveToAlongSpline(HelperObject):
    schema_name = "MoveToAlongSpline"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveToAlongSpline
        return MoveToAlongSpline(entlib.load_node_file(sourcefile, entlib.get_schema(MoveToAlongSpline.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveToAlongSpline
        return MoveToAlongSpline(entlib.make_node(MoveToAlongSpline.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->MoveTo
        return MoveTo(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MoveCapacityData_OrientationSpeed(HelperObject):
    schema_name = "MoveCapacityData::OrientationSpeed"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveCapacityData_OrientationSpeed
        return MoveCapacityData_OrientationSpeed(entlib.load_node_file(sourcefile, entlib.get_schema(MoveCapacityData_OrientationSpeed.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveCapacityData_OrientationSpeed
        return MoveCapacityData_OrientationSpeed(entlib.make_node(MoveCapacityData_OrientationSpeed.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def factor(self):  # type: ()->Vector3
        return Vector3(self._node.at("factor"))
    @factor.setter
    def factor(self, val): self.factor.set(val)
    @property
    def rate(self):  # type: ()->Vector3
        return Vector3(self._node.at("rate"))
    @rate.setter
    def rate(self, val): self.rate.set(val)
    @property
    def rotationRollFromAngularSpeed(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("rotationRollFromAngularSpeed"))
    @property
    def speedFactorFromSpeedSlow(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("speedFactorFromSpeedSlow"))
    @property
    def speedMax(self):  # type: ()->Vector3
        return Vector3(self._node.at("speedMax"))
    @speedMax.setter
    def speedMax(self, val): self.speedMax.set(val)
    @property
    def steeringAngle(self):  # type: ()->Vector3
        return Vector3(self._node.at("steeringAngle"))
    @steeringAngle.setter
    def steeringAngle(self, val): self.steeringAngle.set(val)
    pass


from EntityLibPy import Node

class MountableSnapLine_ControlPoint(HelperObject):
    schema_name = "MountableSnapLine::ControlPoint"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MountableSnapLine_ControlPoint
        return MountableSnapLine_ControlPoint(entlib.load_node_file(sourcefile, entlib.get_schema(MountableSnapLine_ControlPoint.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MountableSnapLine_ControlPoint
        return MountableSnapLine_ControlPoint(entlib.make_node(MountableSnapLine_ControlPoint.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def boneId(self):  # type: ()->Int
        return Int(self._node.at("boneId"))
    @boneId.setter
    def boneId(self, val): self.boneId.set(val)
    @property
    def offset(self):  # type: ()->Vector3
        return Vector3(self._node.at("offset"))
    @offset.setter
    def offset(self, val): self.offset.set(val)
    @property
    def radius(self):  # type: ()->Float
        return Float(self._node.at("radius"))
    @radius.setter
    def radius(self, val): self.radius.set(val)
    pass


from EntityLibPy import Node

class MountableData(HelperObject):
    schema_name = "MountableData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MountableData
        return MountableData(entlib.load_node_file(sourcefile, entlib.get_schema(MountableData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MountableData
        return MountableData(entlib.make_node(MountableData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HotspotID(self):  # type: ()->Int
        return Int(self._node.at("HotspotID"))
    @HotspotID.setter
    def HotspotID(self, val): self.HotspotID.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MountData(HelperObject):
    schema_name = "MountData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MountData
        return MountData(entlib.load_node_file(sourcefile, entlib.get_schema(MountData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MountData
        return MountData(entlib.make_node(MountData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def acrobaticJumpDistance(self):  # type: ()->Float
        return Float(self._node.at("acrobaticJumpDistance"))
    @acrobaticJumpDistance.setter
    def acrobaticJumpDistance(self, val): self.acrobaticJumpDistance.set(val)
    @property
    def angle(self):  # type: ()->Float
        return Float(self._node.at("angle"))
    @angle.setter
    def angle(self, val): self.angle.set(val)
    @property
    def blindAngle(self):  # type: ()->Float
        return Float(self._node.at("blindAngle"))
    @blindAngle.setter
    def blindAngle(self, val): self.blindAngle.set(val)
    @property
    def distance(self):  # type: ()->Float
        return Float(self._node.at("distance"))
    @distance.setter
    def distance(self, val): self.distance.set(val)
    @property
    def offset(self):  # type: ()->Float
        return Float(self._node.at("offset"))
    @offset.setter
    def offset(self, val): self.offset.set(val)
    pass


from EntityLibPy import Node

class MinReviveRatio(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class MeshesItem(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def mesh(self):  # type: ()->String
        return String(self._node.at("mesh"))
    @mesh.setter
    def mesh(self, val): self.mesh.set(val)
    pass


from EntityLibPy import Node

class RUNTIME_LODsItem(HelperObject):

    @property
    def Meshes(self):  # type: ()->Array[MeshesItem]
        return (lambda n: Array(MeshesItem, n))(self._node.at("Meshes"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class MeshNavigationAllowedModeEnum(Enum):
    Never = "Never"
    PlayerOnly = "PlayerOnly"
    Always = "Always"
    MeshNavigationAllowedMode_COUNT = "MeshNavigationAllowedMode_COUNT"


class MeshNavigationAllowedMode(Primitive[MeshNavigationAllowedModeEnum]):  # Enum
    def __init__(self, node):
        super(MeshNavigationAllowedMode, self).__init__(MeshNavigationAllowedModeEnum, node)
    schema_name = "MeshNavigationAllowedMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> MeshNavigationAllowedMode
        return MeshNavigationAllowedMode(node)
    def set(self, val):  # type: (MeshNavigationAllowedModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class MeshNavigationBehaviorData(HelperObject):
    schema_name = "MeshNavigationBehaviorData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MeshNavigationBehaviorData
        return MeshNavigationBehaviorData(entlib.load_node_file(sourcefile, entlib.get_schema(MeshNavigationBehaviorData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MeshNavigationBehaviorData
        return MeshNavigationBehaviorData(entlib.make_node(MeshNavigationBehaviorData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DeltaAngleMinToPrepareToHoldingOnToNavigationMesh(self):  # type: ()->Float
        return Float(self._node.at("DeltaAngleMinToPrepareToHoldingOnToNavigationMesh"))
    @DeltaAngleMinToPrepareToHoldingOnToNavigationMesh.setter
    def DeltaAngleMinToPrepareToHoldingOnToNavigationMesh(self, val): self.DeltaAngleMinToPrepareToHoldingOnToNavigationMesh.set(val)
    @property
    def EdgeTransitionConstraintAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("EdgeTransitionConstraintAllowed"))
    @EdgeTransitionConstraintAllowed.setter
    def EdgeTransitionConstraintAllowed(self, val): self.EdgeTransitionConstraintAllowed.set(val)
    @property
    def EdgeTransitionConstraintLedgeAngle(self):  # type: ()->Float
        return Float(self._node.at("EdgeTransitionConstraintLedgeAngle"))
    @EdgeTransitionConstraintLedgeAngle.setter
    def EdgeTransitionConstraintLedgeAngle(self, val): self.EdgeTransitionConstraintLedgeAngle.set(val)
    @property
    def EdgeTransitionConstraintWallAngle(self):  # type: ()->Float
        return Float(self._node.at("EdgeTransitionConstraintWallAngle"))
    @EdgeTransitionConstraintWallAngle.setter
    def EdgeTransitionConstraintWallAngle(self, val): self.EdgeTransitionConstraintWallAngle.set(val)
    @property
    def MaxNormalAngle(self):  # type: ()->Float
        return Float(self._node.at("MaxNormalAngle"))
    @MaxNormalAngle.setter
    def MaxNormalAngle(self, val): self.MaxNormalAngle.set(val)
    @property
    def MeshNavigationAllowedMode(self):  # type: ()->MeshNavigationAllowedMode
        return MeshNavigationAllowedMode(self._node.at("MeshNavigationAllowedMode"))
    @MeshNavigationAllowedMode.setter
    def MeshNavigationAllowedMode(self, val): self.MeshNavigationAllowedMode.set(val)
    @property
    def OrientationRateToPrepareToHoldingOnToNavigationMesh(self):  # type: ()->Float
        return Float(self._node.at("OrientationRateToPrepareToHoldingOnToNavigationMesh"))
    @OrientationRateToPrepareToHoldingOnToNavigationMesh.setter
    def OrientationRateToPrepareToHoldingOnToNavigationMesh(self, val): self.OrientationRateToPrepareToHoldingOnToNavigationMesh.set(val)
    @property
    def RayCastLengthLegFactor(self):  # type: ()->Float
        return Float(self._node.at("RayCastLengthLegFactor"))
    @RayCastLengthLegFactor.setter
    def RayCastLengthLegFactor(self, val): self.RayCastLengthLegFactor.set(val)
    @property
    def RayCastLengthSpeedFactor(self):  # type: ()->Float
        return Float(self._node.at("RayCastLengthSpeedFactor"))
    @RayCastLengthSpeedFactor.setter
    def RayCastLengthSpeedFactor(self, val): self.RayCastLengthSpeedFactor.set(val)
    @property
    def RollAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("RollAllowed"))
    @RollAllowed.setter
    def RollAllowed(self, val): self.RollAllowed.set(val)
    @property
    def SlopeAngleMinToAllowStickedLand(self):  # type: ()->Float
        return Float(self._node.at("SlopeAngleMinToAllowStickedLand"))
    @SlopeAngleMinToAllowStickedLand.setter
    def SlopeAngleMinToAllowStickedLand(self, val): self.SlopeAngleMinToAllowStickedLand.set(val)
    @property
    def StickToAnyNormalAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("StickToAnyNormalAllowed"))
    @StickToAnyNormalAllowed.setter
    def StickToAnyNormalAllowed(self, val): self.StickToAnyNormalAllowed.set(val)
    @property
    def VerticalAngleMinToUseLandingTreeAnimation(self):  # type: ()->Float
        return Float(self._node.at("VerticalAngleMinToUseLandingTreeAnimation"))
    @VerticalAngleMinToUseLandingTreeAnimation.setter
    def VerticalAngleMinToUseLandingTreeAnimation(self, val): self.VerticalAngleMinToUseLandingTreeAnimation.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class MenaceSelectionEnum(Enum):
    closest = "closest"
    weakest = "weakest"
    strongest = "strongest"
    MenaceSelection_COUNT = "MenaceSelection_COUNT"


class MenaceSelection(Primitive[MenaceSelectionEnum]):  # Enum
    def __init__(self, node):
        super(MenaceSelection, self).__init__(MenaceSelectionEnum, node)
    schema_name = "MenaceSelection"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> MenaceSelection
        return MenaceSelection(node)
    def set(self, val):  # type: (MenaceSelectionEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class MaxActivationLevelEnum(Enum):
    Created = "Created"
    InWorld = "InWorld"
    Loading = "Loading"
    Started = "Started"


class MaxActivationLevel(Primitive[MaxActivationLevelEnum]):  # Enum
    def __init__(self, node):
        super(MaxActivationLevel, self).__init__(MaxActivationLevelEnum, node)
    
    def __call__(self, node):  # type: (EntityLibPy.Node) -> MaxActivationLevel
        return MaxActivationLevel(node)
    def set(self, val):  # type: (MaxActivationLevelEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
Matrix44 = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class VolumeConstraintDataGD(HelperObject):
    schema_name = "VolumeConstraintDataGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VolumeConstraintDataGD
        return VolumeConstraintDataGD(entlib.load_node_file(sourcefile, entlib.get_schema(VolumeConstraintDataGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VolumeConstraintDataGD
        return VolumeConstraintDataGD(entlib.make_node(VolumeConstraintDataGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Matrix(self):  # type: ()->Matrix44
        return Matrix44(self._node.at("Matrix"))
    @Matrix.setter
    def Matrix(self, val): self.Matrix.set(val)
    @property
    def Neighbors(self):  # type: ()->TransitionNeighborData
        return TransitionNeighborData(self._node.at("Neighbors"))
    @property
    def Size(self):  # type: ()->Vector3
        return Vector3(self._node.at("Size"))
    @Size.setter
    def Size(self, val): self.Size.set(val)
    @property
    def Tags(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("Tags"))
    @Tags.setter
    def Tags(self, val): self.Tags.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Game_MacroNavMeshStamper(HelperObject):
    schema_name = "Game::MacroNavMeshStamper"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Game_MacroNavMeshStamper
        return Game_MacroNavMeshStamper(entlib.load_node_file(sourcefile, entlib.get_schema(Game_MacroNavMeshStamper.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Game_MacroNavMeshStamper
        return Game_MacroNavMeshStamper(entlib.make_node(Game_MacroNavMeshStamper.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoundingBox(self):  # type: ()->Vector3
        return Vector3(self._node.at("BoundingBox"))
    @BoundingBox.setter
    def BoundingBox(self, val): self.BoundingBox.set(val)
    @property
    def Matrix(self):  # type: ()->Matrix44
        return Matrix44(self._node.at("Matrix"))
    @Matrix.setter
    def Matrix(self, val): self.Matrix.set(val)
    @property
    def NavmeshPath(self):  # type: ()->String
        return String(self._node.at("NavmeshPath"))
    @NavmeshPath.setter
    def NavmeshPath(self, val): self.NavmeshPath.set(val)
    @property
    def Position(self):  # type: ()->Vector3
        return Vector3(self._node.at("Position"))
    @Position.setter
    def Position(self, val): self.Position.set(val)
    @property
    def RotationZ(self):  # type: ()->Float
        return Float(self._node.at("RotationZ"))
    @RotationZ.setter
    def RotationZ(self, val): self.RotationZ.set(val)
    @property
    def StickToGround(self):  # type: ()->Bool
        return Bool(self._node.at("StickToGround"))
    @StickToGround.setter
    def StickToGround(self, val): self.StickToGround.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
Matrix43 = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class PointCloudInstanceDataResource(HelperObject):
    schema_name = "PointCloudInstanceDataResource"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PointCloudInstanceDataResource
        return PointCloudInstanceDataResource(entlib.load_node_file(sourcefile, entlib.get_schema(PointCloudInstanceDataResource.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PointCloudInstanceDataResource
        return PointCloudInstanceDataResource(entlib.make_node(PointCloudInstanceDataResource.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def index(self):  # type: ()->Int
        return Int(self._node.at("index"))
    @index.setter
    def index(self, val): self.index.set(val)
    @property
    def matrix(self):  # type: ()->Matrix43
        return Matrix43(self._node.at("matrix"))
    @matrix.setter
    def matrix(self, val): self.matrix.set(val)
    pass


from EntityLibPy import Node

class PointCloudChunk(HelperObject):
    schema_name = "PointCloudChunk"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PointCloudChunk
        return PointCloudChunk(entlib.load_node_file(sourcefile, entlib.get_schema(PointCloudChunk.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PointCloudChunk
        return PointCloudChunk(entlib.make_node(PointCloudChunk.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def chunkPosX(self):  # type: ()->Int
        return Int(self._node.at("chunkPosX"))
    @chunkPosX.setter
    def chunkPosX(self, val): self.chunkPosX.set(val)
    @property
    def chunkPosY(self):  # type: ()->Int
        return Int(self._node.at("chunkPosY"))
    @chunkPosY.setter
    def chunkPosY(self, val): self.chunkPosY.set(val)
    @property
    def chunkPosZ(self):  # type: ()->Int
        return Int(self._node.at("chunkPosZ"))
    @chunkPosZ.setter
    def chunkPosZ(self, val): self.chunkPosZ.set(val)
    @property
    def instances(self):  # type: ()->Array[PointCloudInstanceDataResource]
        return (lambda n: Array(PointCloudInstanceDataResource, n))(self._node.at("instances"))
    pass


from EntityLibPy import Node
Matrix33 = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class MapOfObjectItem_A(HelperObject):

    @property
    def Value(self):  # type: ()->String
        return String(self._node.at("Value"))
    @Value.setter
    def Value(self, val): self.Value.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Manager_EntityID(HelperObject):

    pass


from EntityLibPy import Node

class Manager(HelperObject):
    schema_name = "Manager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Manager
        return Manager(entlib.load_node_file(sourcefile, entlib.get_schema(Manager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Manager
        return Manager(entlib.make_node(Manager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityID(self):  # type: ()->Manager_EntityID
        return Manager_EntityID(self._node.at("EntityID"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class WorldManager(HelperObject):
    schema_name = "WorldManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->WorldManager
        return WorldManager(entlib.load_node_file(sourcefile, entlib.get_schema(WorldManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->WorldManager
        return WorldManager(entlib.make_node(WorldManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class WaveManager(HelperObject):
    schema_name = "WaveManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->WaveManager
        return WaveManager(entlib.load_node_file(sourcefile, entlib.get_schema(WaveManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->WaveManager
        return WaveManager(entlib.make_node(WaveManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class WaterManager(HelperObject):
    schema_name = "WaterManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->WaterManager
        return WaterManager(entlib.load_node_file(sourcefile, entlib.get_schema(WaterManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->WaterManager
        return WaterManager(entlib.make_node(WaterManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def WaterHeight(self):  # type: ()->Float
        return Float(self._node.at("WaterHeight"))
    @WaterHeight.setter
    def WaterHeight(self, val): self.WaterHeight.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VoxelSimulationManager(HelperObject):
    schema_name = "VoxelSimulationManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VoxelSimulationManager
        return VoxelSimulationManager(entlib.load_node_file(sourcefile, entlib.get_schema(VoxelSimulationManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VoxelSimulationManager
        return VoxelSimulationManager(entlib.make_node(VoxelSimulationManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VisualManager(HelperObject):
    schema_name = "VisualManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VisualManager
        return VisualManager(entlib.load_node_file(sourcefile, entlib.get_schema(VisualManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VisualManager
        return VisualManager(entlib.make_node(VisualManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VelocityObstaclesManager(HelperObject):
    schema_name = "VelocityObstaclesManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VelocityObstaclesManager
        return VelocityObstaclesManager(entlib.load_node_file(sourcefile, entlib.get_schema(VelocityObstaclesManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VelocityObstaclesManager
        return VelocityObstaclesManager(entlib.make_node(VelocityObstaclesManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AcceptableAccelerationForAvoidance(self):  # type: ()->Float
        return Float(self._node.at("AcceptableAccelerationForAvoidance"))
    @AcceptableAccelerationForAvoidance.setter
    def AcceptableAccelerationForAvoidance(self, val): self.AcceptableAccelerationForAvoidance.set(val)
    @property
    def Active(self):  # type: ()->Bool
        return Bool(self._node.at("Active"))
    @Active.setter
    def Active(self, val): self.Active.set(val)
    @property
    def AvoidanceRadiusAdaptabilityFactor(self):  # type: ()->Float
        return Float(self._node.at("AvoidanceRadiusAdaptabilityFactor"))
    @AvoidanceRadiusAdaptabilityFactor.setter
    def AvoidanceRadiusAdaptabilityFactor(self, val): self.AvoidanceRadiusAdaptabilityFactor.set(val)
    @property
    def RunningSpeed(self):  # type: ()->Float
        return Float(self._node.at("RunningSpeed"))
    @RunningSpeed.setter
    def RunningSpeed(self, val): self.RunningSpeed.set(val)
    @property
    def SimMaxNeighbors(self):  # type: ()->Int
        return Int(self._node.at("SimMaxNeighbors"))
    @SimMaxNeighbors.setter
    def SimMaxNeighbors(self, val): self.SimMaxNeighbors.set(val)
    @property
    def SimMaxSpeed(self):  # type: ()->Float
        return Float(self._node.at("SimMaxSpeed"))
    @SimMaxSpeed.setter
    def SimMaxSpeed(self, val): self.SimMaxSpeed.set(val)
    @property
    def SimNeighborDist(self):  # type: ()->Float
        return Float(self._node.at("SimNeighborDist"))
    @SimNeighborDist.setter
    def SimNeighborDist(self, val): self.SimNeighborDist.set(val)
    @property
    def SimPrefSpeedFactor(self):  # type: ()->Float
        return Float(self._node.at("SimPrefSpeedFactor"))
    @SimPrefSpeedFactor.setter
    def SimPrefSpeedFactor(self, val): self.SimPrefSpeedFactor.set(val)
    @property
    def SimRadius(self):  # type: ()->Float
        return Float(self._node.at("SimRadius"))
    @SimRadius.setter
    def SimRadius(self, val): self.SimRadius.set(val)
    @property
    def SimSlowDownWhenAvoiding(self):  # type: ()->Int
        return Int(self._node.at("SimSlowDownWhenAvoiding"))
    @SimSlowDownWhenAvoiding.setter
    def SimSlowDownWhenAvoiding(self, val): self.SimSlowDownWhenAvoiding.set(val)
    @property
    def SimTimeHorizon(self):  # type: ()->Float
        return Float(self._node.at("SimTimeHorizon"))
    @SimTimeHorizon.setter
    def SimTimeHorizon(self, val): self.SimTimeHorizon.set(val)
    @property
    def SimTimeHorizonObst(self):  # type: ()->Float
        return Float(self._node.at("SimTimeHorizonObst"))
    @SimTimeHorizonObst.setter
    def SimTimeHorizonObst(self, val): self.SimTimeHorizonObst.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def WalkingSpeed(self):  # type: ()->Float
        return Float(self._node.at("WalkingSpeed"))
    @WalkingSpeed.setter
    def WalkingSpeed(self, val): self.WalkingSpeed.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VegetationManager(HelperObject):
    schema_name = "VegetationManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VegetationManager
        return VegetationManager(entlib.load_node_file(sourcefile, entlib.get_schema(VegetationManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VegetationManager
        return VegetationManager(entlib.make_node(VegetationManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BuryDepth(self):  # type: ()->Float
        return Float(self._node.at("BuryDepth"))
    @BuryDepth.setter
    def BuryDepth(self, val): self.BuryDepth.set(val)
    @property
    def BuryScaleThreshold(self):  # type: ()->Float
        return Float(self._node.at("BuryScaleThreshold"))
    @BuryScaleThreshold.setter
    def BuryScaleThreshold(self, val): self.BuryScaleThreshold.set(val)
    @property
    def BuryVeget(self):  # type: ()->Bool
        return Bool(self._node.at("BuryVeget"))
    @BuryVeget.setter
    def BuryVeget(self, val): self.BuryVeget.set(val)
    @property
    def FadeOutScaleThreshold(self):  # type: ()->Float
        return Float(self._node.at("FadeOutScaleThreshold"))
    @FadeOutScaleThreshold.setter
    def FadeOutScaleThreshold(self, val): self.FadeOutScaleThreshold.set(val)
    @property
    def FadeOutVeget(self):  # type: ()->Bool
        return Bool(self._node.at("FadeOutVeget"))
    @FadeOutVeget.setter
    def FadeOutVeget(self, val): self.FadeOutVeget.set(val)
    @property
    def FullScaleGrowDistanceHysteresis(self):  # type: ()->Float
        return Float(self._node.at("FullScaleGrowDistanceHysteresis"))
    @FullScaleGrowDistanceHysteresis.setter
    def FullScaleGrowDistanceHysteresis(self, val): self.FullScaleGrowDistanceHysteresis.set(val)
    @property
    def FullScaleGrowDistanceThreshold(self):  # type: ()->Float
        return Float(self._node.at("FullScaleGrowDistanceThreshold"))
    @FullScaleGrowDistanceThreshold.setter
    def FullScaleGrowDistanceThreshold(self, val): self.FullScaleGrowDistanceThreshold.set(val)
    @property
    def FullScaleGrowMaxRatio(self):  # type: ()->Float
        return Float(self._node.at("FullScaleGrowMaxRatio"))
    @FullScaleGrowMaxRatio.setter
    def FullScaleGrowMaxRatio(self, val): self.FullScaleGrowMaxRatio.set(val)
    @property
    def FullScaleGrowMinRatio(self):  # type: ()->Float
        return Float(self._node.at("FullScaleGrowMinRatio"))
    @FullScaleGrowMinRatio.setter
    def FullScaleGrowMinRatio(self, val): self.FullScaleGrowMinRatio.set(val)
    @property
    def GlobalDistanceMultiplier(self):  # type: ()->Float
        return Float(self._node.at("GlobalDistanceMultiplier"))
    @GlobalDistanceMultiplier.setter
    def GlobalDistanceMultiplier(self, val): self.GlobalDistanceMultiplier.set(val)
    @property
    def RegenInterpolation(self):  # type: ()->Bool
        return Bool(self._node.at("RegenInterpolation"))
    @RegenInterpolation.setter
    def RegenInterpolation(self, val): self.RegenInterpolation.set(val)
    @property
    def ScaleSpeed(self):  # type: ()->Float
        return Float(self._node.at("ScaleSpeed"))
    @ScaleSpeed.setter
    def ScaleSpeed(self, val): self.ScaleSpeed.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def VegetationBankPath(self):  # type: ()->String
        return String(self._node.at("VegetationBankPath"))
    @VegetationBankPath.setter
    def VegetationBankPath(self, val): self.VegetationBankPath.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TrailManager(HelperObject):
    schema_name = "TrailManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TrailManager
        return TrailManager(entlib.load_node_file(sourcefile, entlib.get_schema(TrailManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TrailManager
        return TrailManager(entlib.make_node(TrailManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TerrainManager(HelperObject):
    schema_name = "TerrainManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TerrainManager
        return TerrainManager(entlib.load_node_file(sourcefile, entlib.get_schema(TerrainManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TerrainManager
        return TerrainManager(entlib.make_node(TerrainManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SyncTempoManager(HelperObject):
    schema_name = "SyncTempoManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SyncTempoManager
        return SyncTempoManager(entlib.load_node_file(sourcefile, entlib.get_schema(SyncTempoManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SyncTempoManager
        return SyncTempoManager(entlib.make_node(SyncTempoManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DefaultTempo(self):  # type: ()->Int
        return Int(self._node.at("DefaultTempo"))
    @DefaultTempo.setter
    def DefaultTempo(self, val): self.DefaultTempo.set(val)
    @property
    def RTPC_Tempo(self):  # type: ()->String
        return String(self._node.at("RTPC_Tempo"))
    @RTPC_Tempo.setter
    def RTPC_Tempo(self, val): self.RTPC_Tempo.set(val)
    @property
    def StartSyncClickEvent(self):  # type: ()->String
        return String(self._node.at("StartSyncClickEvent"))
    @StartSyncClickEvent.setter
    def StartSyncClickEvent(self, val): self.StartSyncClickEvent.set(val)
    @property
    def StartSyncEvent(self):  # type: ()->String
        return String(self._node.at("StartSyncEvent"))
    @StartSyncEvent.setter
    def StartSyncEvent(self, val): self.StartSyncEvent.set(val)
    @property
    def StopSyncClickEvent(self):  # type: ()->String
        return String(self._node.at("StopSyncClickEvent"))
    @StopSyncClickEvent.setter
    def StopSyncClickEvent(self, val): self.StopSyncClickEvent.set(val)
    @property
    def StopSyncEvent(self):  # type: ()->String
        return String(self._node.at("StopSyncEvent"))
    @StopSyncEvent.setter
    def StopSyncEvent(self, val): self.StopSyncEvent.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SpatialMapManager(HelperObject):
    schema_name = "SpatialMapManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SpatialMapManager
        return SpatialMapManager(entlib.load_node_file(sourcefile, entlib.get_schema(SpatialMapManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SpatialMapManager
        return SpatialMapManager(entlib.make_node(SpatialMapManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SoulManager(HelperObject):
    schema_name = "SoulManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SoulManager
        return SoulManager(entlib.load_node_file(sourcefile, entlib.get_schema(SoulManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SoulManager
        return SoulManager(entlib.make_node(SoulManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShamanVisionManager(HelperObject):
    schema_name = "ShamanVisionManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShamanVisionManager
        return ShamanVisionManager(entlib.load_node_file(sourcefile, entlib.get_schema(ShamanVisionManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShamanVisionManager
        return ShamanVisionManager(entlib.make_node(ShamanVisionManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HighlightFactorGoddess(self):  # type: ()->Float
        return Float(self._node.at("HighlightFactorGoddess"))
    @HighlightFactorGoddess.setter
    def HighlightFactorGoddess(self, val): self.HighlightFactorGoddess.set(val)
    @property
    def HighlightFactorPlayer(self):  # type: ()->Float
        return Float(self._node.at("HighlightFactorPlayer"))
    @HighlightFactorPlayer.setter
    def HighlightFactorPlayer(self, val): self.HighlightFactorPlayer.set(val)
    @property
    def HighlightFactorSpecie(self):  # type: ()->Float
        return Float(self._node.at("HighlightFactorSpecie"))
    @HighlightFactorSpecie.setter
    def HighlightFactorSpecie(self, val): self.HighlightFactorSpecie.set(val)
    @property
    def ShowEnemiesState(self):  # type: ()->Bool
        return Bool(self._node.at("ShowEnemiesState"))
    @ShowEnemiesState.setter
    def ShowEnemiesState(self, val): self.ShowEnemiesState.set(val)
    @property
    def ShowInjuredState(self):  # type: ()->Bool
        return Bool(self._node.at("ShowInjuredState"))
    @ShowInjuredState.setter
    def ShowInjuredState(self, val): self.ShowInjuredState.set(val)
    @property
    def ShowPlayersState(self):  # type: ()->Bool
        return Bool(self._node.at("ShowPlayersState"))
    @ShowPlayersState.setter
    def ShowPlayersState(self, val): self.ShowPlayersState.set(val)
    @property
    def ShowPrisonersState(self):  # type: ()->Bool
        return Bool(self._node.at("ShowPrisonersState"))
    @ShowPrisonersState.setter
    def ShowPrisonersState(self, val): self.ShowPrisonersState.set(val)
    @property
    def ShowSpecieIcons(self):  # type: ()->Bool
        return Bool(self._node.at("ShowSpecieIcons"))
    @ShowSpecieIcons.setter
    def ShowSpecieIcons(self, val): self.ShowSpecieIcons.set(val)
    @property
    def StateMinSizeDistance(self):  # type: ()->Float
        return Float(self._node.at("StateMinSizeDistance"))
    @StateMinSizeDistance.setter
    def StateMinSizeDistance(self, val): self.StateMinSizeDistance.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def TimerFactorGoddess(self):  # type: ()->Float
        return Float(self._node.at("TimerFactorGoddess"))
    @TimerFactorGoddess.setter
    def TimerFactorGoddess(self, val): self.TimerFactorGoddess.set(val)
    @property
    def TimerFactorPlayer(self):  # type: ()->Float
        return Float(self._node.at("TimerFactorPlayer"))
    @TimerFactorPlayer.setter
    def TimerFactorPlayer(self, val): self.TimerFactorPlayer.set(val)
    @property
    def TimerFactorSpecie(self):  # type: ()->Float
        return Float(self._node.at("TimerFactorSpecie"))
    @TimerFactorSpecie.setter
    def TimerFactorSpecie(self, val): self.TimerFactorSpecie.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SensorManager(HelperObject):
    schema_name = "SensorManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SensorManager
        return SensorManager(entlib.load_node_file(sourcefile, entlib.get_schema(SensorManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SensorManager
        return SensorManager(entlib.make_node(SensorManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Scheduler(HelperObject):
    schema_name = "Scheduler"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Scheduler
        return Scheduler(entlib.load_node_file(sourcefile, entlib.get_schema(Scheduler.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Scheduler
        return Scheduler(entlib.make_node(Scheduler.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SceneManager(HelperObject):
    schema_name = "SceneManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SceneManager
        return SceneManager(entlib.load_node_file(sourcefile, entlib.get_schema(SceneManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SceneManager
        return SceneManager(entlib.make_node(SceneManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ResourceDebugger(HelperObject):
    schema_name = "ResourceDebugger"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ResourceDebugger
        return ResourceDebugger(entlib.load_node_file(sourcefile, entlib.get_schema(ResourceDebugger.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ResourceDebugger
        return ResourceDebugger(entlib.make_node(ResourceDebugger.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReloadManager(HelperObject):
    schema_name = "ReloadManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReloadManager
        return ReloadManager(entlib.load_node_file(sourcefile, entlib.get_schema(ReloadManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReloadManager
        return ReloadManager(entlib.make_node(ReloadManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegionManager(HelperObject):
    schema_name = "RegionManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegionManager
        return RegionManager(entlib.load_node_file(sourcefile, entlib.get_schema(RegionManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegionManager
        return RegionManager(entlib.make_node(RegionManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegenerationManager(HelperObject):
    schema_name = "RegenerationManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenerationManager
        return RegenerationManager(entlib.load_node_file(sourcefile, entlib.get_schema(RegenerationManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenerationManager
        return RegenerationManager(entlib.make_node(RegenerationManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DefaultLostRatio(self):  # type: ()->Float
        return Float(self._node.at("DefaultLostRatio"))
    @DefaultLostRatio.setter
    def DefaultLostRatio(self, val): self.DefaultLostRatio.set(val)
    @property
    def DefaultMaxLossPerSecond(self):  # type: ()->Float
        return Float(self._node.at("DefaultMaxLossPerSecond"))
    @DefaultMaxLossPerSecond.setter
    def DefaultMaxLossPerSecond(self, val): self.DefaultMaxLossPerSecond.set(val)
    @property
    def DefaultMaxTransmissionPerSecond(self):  # type: ()->Float
        return Float(self._node.at("DefaultMaxTransmissionPerSecond"))
    @DefaultMaxTransmissionPerSecond.setter
    def DefaultMaxTransmissionPerSecond(self, val): self.DefaultMaxTransmissionPerSecond.set(val)
    @property
    def DefaultTransmittedRatio(self):  # type: ()->Float
        return Float(self._node.at("DefaultTransmittedRatio"))
    @DefaultTransmittedRatio.setter
    def DefaultTransmittedRatio(self, val): self.DefaultTransmittedRatio.set(val)
    @property
    def EnergyMaxValue(self):  # type: ()->Float
        return Float(self._node.at("EnergyMaxValue"))
    @EnergyMaxValue.setter
    def EnergyMaxValue(self, val): self.EnergyMaxValue.set(val)
    @property
    def EvaporationDecreaseSpeed(self):  # type: ()->Float
        return Float(self._node.at("EvaporationDecreaseSpeed"))
    @EvaporationDecreaseSpeed.setter
    def EvaporationDecreaseSpeed(self, val): self.EvaporationDecreaseSpeed.set(val)
    @property
    def EvaporationMaxValue(self):  # type: ()->Float
        return Float(self._node.at("EvaporationMaxValue"))
    @EvaporationMaxValue.setter
    def EvaporationMaxValue(self, val): self.EvaporationMaxValue.set(val)
    @property
    def InjectedEvaporationMultiplier(self):  # type: ()->Float
        return Float(self._node.at("InjectedEvaporationMultiplier"))
    @InjectedEvaporationMultiplier.setter
    def InjectedEvaporationMultiplier(self, val): self.InjectedEvaporationMultiplier.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RecastPathFindManager(HelperObject):
    schema_name = "RecastPathFindManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RecastPathFindManager
        return RecastPathFindManager(entlib.load_node_file(sourcefile, entlib.get_schema(RecastPathFindManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RecastPathFindManager
        return RecastPathFindManager(entlib.make_node(RecastPathFindManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AStarSearchMaxIteration(self):  # type: ()->Int
        return Int(self._node.at("AStarSearchMaxIteration"))
    @AStarSearchMaxIteration.setter
    def AStarSearchMaxIteration(self, val): self.AStarSearchMaxIteration.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RPCServerManager(HelperObject):
    schema_name = "RPCServerManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RPCServerManager
        return RPCServerManager(entlib.load_node_file(sourcefile, entlib.get_schema(RPCServerManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RPCServerManager
        return RPCServerManager(entlib.make_node(RPCServerManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RPCMarshallingTests(HelperObject):
    schema_name = "RPCMarshallingTests"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RPCMarshallingTests
        return RPCMarshallingTests(entlib.load_node_file(sourcefile, entlib.get_schema(RPCMarshallingTests.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RPCMarshallingTests
        return RPCMarshallingTests(entlib.make_node(RPCMarshallingTests.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class QualityManager(HelperObject):
    schema_name = "QualityManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->QualityManager
        return QualityManager(entlib.load_node_file(sourcefile, entlib.get_schema(QualityManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->QualityManager
        return QualityManager(entlib.make_node(QualityManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityLODDistanceHysteresis(self):  # type: ()->Float
        return Float(self._node.at("EntityLODDistanceHysteresis"))
    @EntityLODDistanceHysteresis.setter
    def EntityLODDistanceHysteresis(self, val): self.EntityLODDistanceHysteresis.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PlayerManager(HelperObject):
    schema_name = "PlayerManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PlayerManager
        return PlayerManager(entlib.load_node_file(sourcefile, entlib.get_schema(PlayerManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PlayerManager
        return PlayerManager(entlib.make_node(PlayerManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SaveGame(self):  # type: ()->String
        return String(self._node.at("SaveGame"))
    @SaveGame.setter
    def SaveGame(self, val): self.SaveGame.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PhysicsEffectsManager(HelperObject):
    schema_name = "PhysicsEffectsManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsEffectsManager
        return PhysicsEffectsManager(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsEffectsManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsEffectsManager
        return PhysicsEffectsManager(entlib.make_node(PhysicsEffectsManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MaterialBank(self):  # type: ()->Array[PhysicsMaterial]
        return (lambda n: Array(PhysicsMaterial, n))(self._node.at("MaterialBank"))
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PestoManager(HelperObject):
    schema_name = "PestoManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PestoManager
        return PestoManager(entlib.load_node_file(sourcefile, entlib.get_schema(PestoManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PestoManager
        return PestoManager(entlib.make_node(PestoManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PerceptionManager(HelperObject):
    schema_name = "PerceptionManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PerceptionManager
        return PerceptionManager(entlib.load_node_file(sourcefile, entlib.get_schema(PerceptionManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PerceptionManager
        return PerceptionManager(entlib.make_node(PerceptionManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DistanceMultipliers(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("DistanceMultipliers"))
    @DistanceMultipliers.setter
    def DistanceMultipliers(self, val): self.DistanceMultipliers.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ParticleManager(HelperObject):
    schema_name = "ParticleManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ParticleManager
        return ParticleManager(entlib.load_node_file(sourcefile, entlib.get_schema(ParticleManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ParticleManager
        return ParticleManager(entlib.make_node(ParticleManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PoolSize(self):  # type: ()->Int
        return Int(self._node.at("PoolSize"))
    @PoolSize.setter
    def PoolSize(self, val): self.PoolSize.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class LoadSaveManager(HelperObject):
    schema_name = "LoadSaveManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->LoadSaveManager
        return LoadSaveManager(entlib.load_node_file(sourcefile, entlib.get_schema(LoadSaveManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->LoadSaveManager
        return LoadSaveManager(entlib.make_node(LoadSaveManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ClothDataFile(self):  # type: ()->String
        return String(self._node.at("ClothDataFile"))
    @ClothDataFile.setter
    def ClothDataFile(self, val): self.ClothDataFile.set(val)
    @property
    def IconDataFile(self):  # type: ()->String
        return String(self._node.at("IconDataFile"))
    @IconDataFile.setter
    def IconDataFile(self, val): self.IconDataFile.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class LightManager(HelperObject):
    schema_name = "LightManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->LightManager
        return LightManager(entlib.load_node_file(sourcefile, entlib.get_schema(LightManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->LightManager
        return LightManager(entlib.make_node(LightManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class InputManager(HelperObject):
    schema_name = "InputManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InputManager
        return InputManager(entlib.load_node_file(sourcefile, entlib.get_schema(InputManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InputManager
        return InputManager(entlib.make_node(InputManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class InfoboardManager(HelperObject):
    schema_name = "InfoboardManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InfoboardManager
        return InfoboardManager(entlib.load_node_file(sourcefile, entlib.get_schema(InfoboardManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InfoboardManager
        return InfoboardManager(entlib.make_node(InfoboardManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HeightMapManager(HelperObject):
    schema_name = "HeightMapManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HeightMapManager
        return HeightMapManager(entlib.load_node_file(sourcefile, entlib.get_schema(HeightMapManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HeightMapManager
        return HeightMapManager(entlib.make_node(HeightMapManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GroundTypeManager(HelperObject):
    schema_name = "GroundTypeManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GroundTypeManager
        return GroundTypeManager(entlib.load_node_file(sourcefile, entlib.get_schema(GroundTypeManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GroundTypeManager
        return GroundTypeManager(entlib.make_node(GroundTypeManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameMasterManager(HelperObject):
    schema_name = "GameMasterManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameMasterManager
        return GameMasterManager(entlib.load_node_file(sourcefile, entlib.get_schema(GameMasterManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameMasterManager
        return GameMasterManager(entlib.make_node(GameMasterManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MaxTimeBetweenSoulOpportunityRespawn(self):  # type: ()->Float
        return Float(self._node.at("MaxTimeBetweenSoulOpportunityRespawn"))
    @MaxTimeBetweenSoulOpportunityRespawn.setter
    def MaxTimeBetweenSoulOpportunityRespawn(self, val): self.MaxTimeBetweenSoulOpportunityRespawn.set(val)
    @property
    def MinDistBetweenSoulOpportunityRespawn(self):  # type: ()->Float
        return Float(self._node.at("MinDistBetweenSoulOpportunityRespawn"))
    @MinDistBetweenSoulOpportunityRespawn.setter
    def MinDistBetweenSoulOpportunityRespawn(self, val): self.MinDistBetweenSoulOpportunityRespawn.set(val)
    @property
    def RadiusWithoutEnemy(self):  # type: ()->Float
        return Float(self._node.at("RadiusWithoutEnemy"))
    @RadiusWithoutEnemy.setter
    def RadiusWithoutEnemy(self, val): self.RadiusWithoutEnemy.set(val)
    @property
    def SoulOpportunitySpawnRadius(self):  # type: ()->Float
        return Float(self._node.at("SoulOpportunitySpawnRadius"))
    @SoulOpportunitySpawnRadius.setter
    def SoulOpportunitySpawnRadius(self, val): self.SoulOpportunitySpawnRadius.set(val)
    @property
    def SoulOpportunityUnspawnInsideFrustumRadius(self):  # type: ()->Float
        return Float(self._node.at("SoulOpportunityUnspawnInsideFrustumRadius"))
    @SoulOpportunityUnspawnInsideFrustumRadius.setter
    def SoulOpportunityUnspawnInsideFrustumRadius(self, val): self.SoulOpportunityUnspawnInsideFrustumRadius.set(val)
    @property
    def SoulOpportunityUnspawnOutsideFrustumRadius(self):  # type: ()->Float
        return Float(self._node.at("SoulOpportunityUnspawnOutsideFrustumRadius"))
    @SoulOpportunityUnspawnOutsideFrustumRadius.setter
    def SoulOpportunityUnspawnOutsideFrustumRadius(self, val): self.SoulOpportunityUnspawnOutsideFrustumRadius.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameEffectManager(HelperObject):
    schema_name = "GameEffectManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameEffectManager
        return GameEffectManager(entlib.load_node_file(sourcefile, entlib.get_schema(GameEffectManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameEffectManager
        return GameEffectManager(entlib.make_node(GameEffectManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GameEffectFileExtension(self):  # type: ()->String
        return String(self._node.at("GameEffectFileExtension"))
    @GameEffectFileExtension.setter
    def GameEffectFileExtension(self, val): self.GameEffectFileExtension.set(val)
    @property
    def GameEffectsRootPath(self):  # type: ()->String
        return String(self._node.at("GameEffectsRootPath"))
    @GameEffectsRootPath.setter
    def GameEffectsRootPath(self, val): self.GameEffectsRootPath.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidManager(HelperObject):
    schema_name = "FluidManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidManager
        return FluidManager(entlib.load_node_file(sourcefile, entlib.get_schema(FluidManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidManager
        return FluidManager(entlib.make_node(FluidManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidGameplayQueriesManager(HelperObject):
    schema_name = "FluidGameplayQueriesManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidGameplayQueriesManager
        return FluidGameplayQueriesManager(entlib.load_node_file(sourcefile, entlib.get_schema(FluidGameplayQueriesManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidGameplayQueriesManager
        return FluidGameplayQueriesManager(entlib.make_node(FluidGameplayQueriesManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FightManager(HelperObject):
    schema_name = "FightManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FightManager
        return FightManager(entlib.load_node_file(sourcefile, entlib.get_schema(FightManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FightManager
        return FightManager(entlib.make_node(FightManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EventManager(HelperObject):
    schema_name = "EventManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EventManager
        return EventManager(entlib.load_node_file(sourcefile, entlib.get_schema(EventManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EventManager
        return EventManager(entlib.make_node(EventManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnvironmentManager(HelperObject):
    schema_name = "EnvironmentManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnvironmentManager
        return EnvironmentManager(entlib.load_node_file(sourcefile, entlib.get_schema(EnvironmentManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnvironmentManager
        return EnvironmentManager(entlib.make_node(EnvironmentManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityManager(HelperObject):
    schema_name = "EntityManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityManager
        return EntityManager(entlib.load_node_file(sourcefile, entlib.get_schema(EntityManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityManager
        return EntityManager(entlib.make_node(EntityManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class DialogManager(HelperObject):
    schema_name = "DialogManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DialogManager
        return DialogManager(entlib.load_node_file(sourcefile, entlib.get_schema(DialogManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DialogManager
        return DialogManager(entlib.make_node(DialogManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DialogFileExtension(self):  # type: ()->String
        return String(self._node.at("DialogFileExtension"))
    @DialogFileExtension.setter
    def DialogFileExtension(self, val): self.DialogFileExtension.set(val)
    @property
    def DialogsRootPath(self):  # type: ()->String
        return String(self._node.at("DialogsRootPath"))
    @DialogsRootPath.setter
    def DialogsRootPath(self, val): self.DialogsRootPath.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BoidsManager(HelperObject):
    schema_name = "BoidsManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BoidsManager
        return BoidsManager(entlib.load_node_file(sourcefile, entlib.get_schema(BoidsManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BoidsManager
        return BoidsManager(entlib.make_node(BoidsManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FirstRootSpeedFactor(self):  # type: ()->Float
        return Float(self._node.at("FirstRootSpeedFactor"))
    @FirstRootSpeedFactor.setter
    def FirstRootSpeedFactor(self, val): self.FirstRootSpeedFactor.set(val)
    @property
    def MergeEntityDistanceMultiplier(self):  # type: ()->Float
        return Float(self._node.at("MergeEntityDistanceMultiplier"))
    @MergeEntityDistanceMultiplier.setter
    def MergeEntityDistanceMultiplier(self, val): self.MergeEntityDistanceMultiplier.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def boidPresets(self):  # type: ()->String
        return String(self._node.at("boidPresets"))
    @boidPresets.setter
    def boidPresets(self, val): self.boidPresets.set(val)
    pass


from EntityLibPy import Node

class BillboardManager(HelperObject):
    schema_name = "BillboardManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BillboardManager
        return BillboardManager(entlib.load_node_file(sourcefile, entlib.get_schema(BillboardManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BillboardManager
        return BillboardManager(entlib.make_node(BillboardManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BehaviorManager(HelperObject):
    schema_name = "BehaviorManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BehaviorManager
        return BehaviorManager(entlib.load_node_file(sourcefile, entlib.get_schema(BehaviorManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BehaviorManager
        return BehaviorManager(entlib.make_node(BehaviorManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimalManager(HelperObject):
    schema_name = "AnimalManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimalManager
        return AnimalManager(entlib.load_node_file(sourcefile, entlib.get_schema(AnimalManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimalManager
        return AnimalManager(entlib.make_node(AnimalManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def animalName(self):  # type: ()->String
        return String(self._node.at("animalName"))
    @animalName.setter
    def animalName(self, val): self.animalName.set(val)
    pass


from EntityLibPy import Node

class ActorManager(HelperObject):
    schema_name = "ActorManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorManager
        return ActorManager(entlib.load_node_file(sourcefile, entlib.get_schema(ActorManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorManager
        return ActorManager(entlib.make_node(ActorManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SizePerceptionRanges(self):  # type: ()->Array[PrimArray[Float]]
        return (lambda n: Array((lambda n: PrimArray(Float, n)), n))(self._node.at("SizePerceptionRanges"))
    @property
    def Sizes(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("Sizes"))
    @Sizes.setter
    def Sizes(self, val): self.Sizes.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateManager(HelperObject):
    schema_name = "ActionStateManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateManager
        return ActionStateManager(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateManager
        return ActionStateManager(entlib.make_node(ActionStateManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ArbiterConfigFile(self):  # type: ()->String
        return String(self._node.at("ArbiterConfigFile"))
    @ArbiterConfigFile.setter
    def ArbiterConfigFile(self, val): self.ArbiterConfigFile.set(val)
    @property
    def ForceTraceActorState(self):  # type: ()->Bool
        return Bool(self._node.at("ForceTraceActorState"))
    @ForceTraceActorState.setter
    def ForceTraceActorState(self, val): self.ForceTraceActorState.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class LocomotionModeEnum(Enum):
    standup = "standup"
    quadstandup = "quadstandup"
    crouch = "crouch"
    prone = "prone"
    swim = "swim"
    ride = "ride"
    fly = "fly"
    dive = "dive"
    fall = "fall"
    cinematic = "cinematic"
    ridden = "ridden"
    riddenfly = "riddenfly"
    fight = "fight"
    clamber = "clamber"
    buried = "buried"
    count = "count"


class LocomotionMode(Primitive[LocomotionModeEnum]):  # Enum
    def __init__(self, node):
        super(LocomotionMode, self).__init__(LocomotionModeEnum, node)
    schema_name = "LocomotionMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> LocomotionMode
        return LocomotionMode(node)
    def set(self, val):  # type: (LocomotionModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class MoveCapacityData_ReachSpeed(HelperObject):
    schema_name = "MoveCapacityData::ReachSpeed"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveCapacityData_ReachSpeed
        return MoveCapacityData_ReachSpeed(entlib.load_node_file(sourcefile, entlib.get_schema(MoveCapacityData_ReachSpeed.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveCapacityData_ReachSpeed
        return MoveCapacityData_ReachSpeed(entlib.make_node(MoveCapacityData_ReachSpeed.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def acceleration(self):  # type: ()->Float
        return Float(self._node.at("acceleration"))
    @acceleration.setter
    def acceleration(self, val): self.acceleration.set(val)
    @property
    def deceleration(self):  # type: ()->Float
        return Float(self._node.at("deceleration"))
    @deceleration.setter
    def deceleration(self, val): self.deceleration.set(val)
    @property
    def name(self):  # type: ()->LocomotionMode
        return LocomotionMode(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    pass


from EntityLibPy import Node

class ListItem(HelperObject):

    @property
    def EntityPath(self):  # type: ()->String
        return String(self._node.at("EntityPath"))
    @EntityPath.setter
    def EntityPath(self, val): self.EntityPath.set(val)
    @property
    def EntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("EntityRef"))
    @EntityRef.setter
    def EntityRef(self, val): self.EntityRef.set(val)
    @property
    def Tag(self):  # type: ()->String
        return String(self._node.at("Tag"))
    @Tag.setter
    def Tag(self, val): self.Tag.set(val)
    @property
    def Thumbnail(self):  # type: ()->String
        return String(self._node.at("Thumbnail"))
    @Thumbnail.setter
    def Thumbnail(self, val): self.Thumbnail.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class LightTypeEnum(Enum):
    Omni = "Omni"
    Hemi = "Hemi"
    Spot = "Spot"
    Dir = "Dir"
    LightType_Count = "LightType_Count"


class LightType(Primitive[LightTypeEnum]):  # Enum
    def __init__(self, node):
        super(LightType, self).__init__(LightTypeEnum, node)
    schema_name = "LightType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> LightType
        return LightType(node)
    def set(self, val):  # type: (LightTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class Light(HelperObject):
    schema_name = "Light"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Light
        return Light(entlib.load_node_file(sourcefile, entlib.get_schema(Light.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Light
        return Light(entlib.make_node(Light.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Brightness(self):  # type: ()->Float
        return Float(self._node.at("Brightness"))
    @Brightness.setter
    def Brightness(self, val): self.Brightness.set(val)
    @property
    def Cast_Shadows(self):  # type: ()->Bool
        return Bool(self._node.at("Cast Shadows"))
    @Cast_Shadows.setter
    def Cast_Shadows(self, val): self.Cast_Shadows.set(val)
    @property
    def Color(self):  # type: ()->Vector3
        return Vector3(self._node.at("Color"))
    @Color.setter
    def Color(self, val): self.Color.set(val)
    @property
    def Dpsm_Plane_Threshold(self):  # type: ()->Float
        return Float(self._node.at("Dpsm Plane Threshold"))
    @Dpsm_Plane_Threshold.setter
    def Dpsm_Plane_Threshold(self, val): self.Dpsm_Plane_Threshold.set(val)
    @property
    def Dpsm_Seam_Offset(self):  # type: ()->Float
        return Float(self._node.at("Dpsm Seam Offset"))
    @Dpsm_Seam_Offset.setter
    def Dpsm_Seam_Offset(self, val): self.Dpsm_Seam_Offset.set(val)
    @property
    def Enabled(self):  # type: ()->Bool
        return Bool(self._node.at("Enabled"))
    @Enabled.setter
    def Enabled(self, val): self.Enabled.set(val)
    @property
    def Linear_attenuation_start(self):  # type: ()->Float
        return Float(self._node.at("Linear attenuation start"))
    @Linear_attenuation_start.setter
    def Linear_attenuation_start(self, val): self.Linear_attenuation_start.set(val)
    @property
    def Linear_attenuation_stop(self):  # type: ()->Float
        return Float(self._node.at("Linear attenuation stop"))
    @Linear_attenuation_stop.setter
    def Linear_attenuation_stop(self, val): self.Linear_attenuation_stop.set(val)
    @property
    def Radial_attenuation_start(self):  # type: ()->Float
        return Float(self._node.at("Radial attenuation start"))
    @Radial_attenuation_start.setter
    def Radial_attenuation_start(self, val): self.Radial_attenuation_start.set(val)
    @property
    def Radial_attenuation_stop(self):  # type: ()->Float
        return Float(self._node.at("Radial attenuation stop"))
    @Radial_attenuation_stop.setter
    def Radial_attenuation_stop(self, val): self.Radial_attenuation_stop.set(val)
    @property
    def Shadow_Depth_Bias(self):  # type: ()->Float
        return Float(self._node.at("Shadow Depth Bias"))
    @Shadow_Depth_Bias.setter
    def Shadow_Depth_Bias(self, val): self.Shadow_Depth_Bias.set(val)
    @property
    def Shadow_Depth_Bias_Factor(self):  # type: ()->Float
        return Float(self._node.at("Shadow Depth Bias Factor"))
    @Shadow_Depth_Bias_Factor.setter
    def Shadow_Depth_Bias_Factor(self, val): self.Shadow_Depth_Bias_Factor.set(val)
    @property
    def Type_(self):  # type: ()->LightType
        return LightType(self._node.at("Type"))
    @Type_.setter
    def Type_(self, val): self.Type_.set(val)
    @property
    def Volumetric_Fog(self):  # type: ()->Bool
        return Bool(self._node.at("Volumetric Fog"))
    @Volumetric_Fog.setter
    def Volumetric_Fog(self, val): self.Volumetric_Fog.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class LifeAndDamageData(HelperObject):
    schema_name = "LifeAndDamageData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->LifeAndDamageData
        return LifeAndDamageData(entlib.load_node_file(sourcefile, entlib.get_schema(LifeAndDamageData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->LifeAndDamageData
        return LifeAndDamageData(entlib.make_node(LifeAndDamageData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def attackCancelThreshold(self):  # type: ()->Float
        return Float(self._node.at("attackCancelThreshold"))
    @attackCancelThreshold.setter
    def attackCancelThreshold(self, val): self.attackCancelThreshold.set(val)
    @property
    def damageThreshold(self):  # type: ()->Float
        return Float(self._node.at("damageThreshold"))
    @damageThreshold.setter
    def damageThreshold(self, val): self.damageThreshold.set(val)
    @property
    def dyingSolidity(self):  # type: ()->Float
        return Float(self._node.at("dyingSolidity"))
    @dyingSolidity.setter
    def dyingSolidity(self, val): self.dyingSolidity.set(val)
    @property
    def energyMax(self):  # type: ()->Float
        return Float(self._node.at("energyMax"))
    @energyMax.setter
    def energyMax(self, val): self.energyMax.set(val)
    @property
    def energyRecoverSpeed(self):  # type: ()->Float
        return Float(self._node.at("energyRecoverSpeed"))
    @energyRecoverSpeed.setter
    def energyRecoverSpeed(self, val): self.energyRecoverSpeed.set(val)
    @property
    def impactPercent(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("impactPercent"))
    @impactPercent.setter
    def impactPercent(self, val): self.impactPercent.set(val)
    @property
    def lifeInjuredCoeff(self):  # type: ()->Float
        return Float(self._node.at("lifeInjuredCoeff"))
    @lifeInjuredCoeff.setter
    def lifeInjuredCoeff(self, val): self.lifeInjuredCoeff.set(val)
    @property
    def lifeMax(self):  # type: ()->Float
        return Float(self._node.at("lifeMax"))
    @lifeMax.setter
    def lifeMax(self, val): self.lifeMax.set(val)
    @property
    def lifeRecoverSpeed(self):  # type: ()->Float
        return Float(self._node.at("lifeRecoverSpeed"))
    @lifeRecoverSpeed.setter
    def lifeRecoverSpeed(self, val): self.lifeRecoverSpeed.set(val)
    @property
    def lifeStunCoeff(self):  # type: ()->Float
        return Float(self._node.at("lifeStunCoeff"))
    @lifeStunCoeff.setter
    def lifeStunCoeff(self, val): self.lifeStunCoeff.set(val)
    @property
    def minLifeWhenSpending(self):  # type: ()->Float
        return Float(self._node.at("minLifeWhenSpending"))
    @minLifeWhenSpending.setter
    def minLifeWhenSpending(self, val): self.minLifeWhenSpending.set(val)
    @property
    def shouldCrashWhenFlyingInjured(self):  # type: ()->Bool
        return Bool(self._node.at("shouldCrashWhenFlyingInjured"))
    @shouldCrashWhenFlyingInjured.setter
    def shouldCrashWhenFlyingInjured(self, val): self.shouldCrashWhenFlyingInjured.set(val)
    @property
    def solidity(self):  # type: ()->Float
        return Float(self._node.at("solidity"))
    @solidity.setter
    def solidity(self, val): self.solidity.set(val)
    @property
    def unbreakable(self):  # type: ()->Bool
        return Bool(self._node.at("unbreakable"))
    @unbreakable.setter
    def unbreakable(self, val): self.unbreakable.set(val)
    @property
    def velocityDamageMax(self):  # type: ()->Float
        return Float(self._node.at("velocityDamageMax"))
    @velocityDamageMax.setter
    def velocityDamageMax(self, val): self.velocityDamageMax.set(val)
    @property
    def velocityImpactMax(self):  # type: ()->Float
        return Float(self._node.at("velocityImpactMax"))
    @velocityImpactMax.setter
    def velocityImpactMax(self, val): self.velocityImpactMax.set(val)
    pass


from EntityLibPy import Node

class Life(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class LedgePositionInfo(HelperObject):
    schema_name = "LedgePositionInfo"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->LedgePositionInfo
        return LedgePositionInfo(entlib.load_node_file(sourcefile, entlib.get_schema(LedgePositionInfo.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->LedgePositionInfo
        return LedgePositionInfo(entlib.make_node(LedgePositionInfo.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class LastValidedReviveSide(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class LastAliveReviveSide(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class JumpHeightMultiplier(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class Invincible(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node
class InventoryTagsEnum(Enum):
    outfit = "outfit"
    item = "item"
    default_ = "default"
    neutral = "neutral"
    sacred = "sacred"
    cursed = "cursed"
    skeleton = "skeleton"
    zombie = "zombie"
    full = "full"
    soul = "soul"
    disguise = "disguise"
    soulfreedflying = "soulfreedflying"
    soulfreednormal = "soulfreednormal"
    InventoryTags_COUNT = "InventoryTags_COUNT"


class InventoryTags(Primitive[InventoryTagsEnum]):  # Enum
    def __init__(self, node):
        super(InventoryTags, self).__init__(InventoryTagsEnum, node)
    schema_name = "InventoryTags"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> InventoryTags
        return InventoryTags(node)
    def set(self, val):  # type: (InventoryTagsEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class TaggedEntityRef(HelperObject):
    schema_name = "TaggedEntityRef"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TaggedEntityRef
        return TaggedEntityRef(entlib.load_node_file(sourcefile, entlib.get_schema(TaggedEntityRef.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TaggedEntityRef
        return TaggedEntityRef(entlib.make_node(TaggedEntityRef.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("EntityRef"))
    @EntityRef.setter
    def EntityRef(self, val): self.EntityRef.set(val)
    @property
    def Tags(self):  # type: ()->PrimArray[InventoryTags]
        return (lambda n: PrimArray(InventoryTags, n))(self._node.at("Tags"))
    @Tags.setter
    def Tags(self, val): self.Tags.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class InterpolationMethodEnum(Enum):
    Spline = "Spline"
    BSpline = "BSpline"
    InterpolationMethod_COUNT = "InterpolationMethod_COUNT"


class InterpolationMethod(Primitive[InterpolationMethodEnum]):  # Enum
    def __init__(self, node):
        super(InterpolationMethod, self).__init__(InterpolationMethodEnum, node)
    schema_name = "InterpolationMethod"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> InterpolationMethod
        return InterpolationMethod(node)
    def set(self, val):  # type: (InterpolationMethodEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class TrailProperties(HelperObject):
    schema_name = "TrailProperties"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TrailProperties
        return TrailProperties(entlib.load_node_file(sourcefile, entlib.get_schema(TrailProperties.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TrailProperties
        return TrailProperties(entlib.make_node(TrailProperties.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ComputeSplineCurvilinearUV(self):  # type: ()->Bool
        return Bool(self._node.at("ComputeSplineCurvilinearUV"))
    @ComputeSplineCurvilinearUV.setter
    def ComputeSplineCurvilinearUV(self, val): self.ComputeSplineCurvilinearUV.set(val)
    @property
    def Duration(self):  # type: ()->Float
        return Float(self._node.at("Duration"))
    @Duration.setter
    def Duration(self, val): self.Duration.set(val)
    @property
    def FadeLuminosity(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("FadeLuminosity"))
    @FadeLuminosity.setter
    def FadeLuminosity(self, val): self.FadeLuminosity.set(val)
    @property
    def FadeSize(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("FadeSize"))
    @FadeSize.setter
    def FadeSize(self, val): self.FadeSize.set(val)
    @property
    def FrontalAxis(self):  # type: ()->Vector3
        return Vector3(self._node.at("FrontalAxis"))
    @FrontalAxis.setter
    def FrontalAxis(self, val): self.FrontalAxis.set(val)
    @property
    def HorizontalAxis(self):  # type: ()->Vector3
        return Vector3(self._node.at("HorizontalAxis"))
    @HorizontalAxis.setter
    def HorizontalAxis(self, val): self.HorizontalAxis.set(val)
    @property
    def InterpolationMethod(self):  # type: ()->InterpolationMethod
        return InterpolationMethod(self._node.at("InterpolationMethod"))
    @InterpolationMethod.setter
    def InterpolationMethod(self, val): self.InterpolationMethod.set(val)
    @property
    def IntervalBetweenTrailPoints(self):  # type: ()->Float
        return Float(self._node.at("IntervalBetweenTrailPoints"))
    @IntervalBetweenTrailPoints.setter
    def IntervalBetweenTrailPoints(self, val): self.IntervalBetweenTrailPoints.set(val)
    @property
    def Luminosity(self):  # type: ()->Float
        return Float(self._node.at("Luminosity"))
    @Luminosity.setter
    def Luminosity(self, val): self.Luminosity.set(val)
    @property
    def LuminosityCurvePath(self):  # type: ()->String
        return String(self._node.at("LuminosityCurvePath"))
    @LuminosityCurvePath.setter
    def LuminosityCurvePath(self, val): self.LuminosityCurvePath.set(val)
    @property
    def LuminosityVariability(self):  # type: ()->Float
        return Float(self._node.at("LuminosityVariability"))
    @LuminosityVariability.setter
    def LuminosityVariability(self, val): self.LuminosityVariability.set(val)
    @property
    def NbSplinePointsBetweenTrailPoints(self):  # type: ()->Int
        return Int(self._node.at("NbSplinePointsBetweenTrailPoints"))
    @NbSplinePointsBetweenTrailPoints.setter
    def NbSplinePointsBetweenTrailPoints(self, val): self.NbSplinePointsBetweenTrailPoints.set(val)
    @property
    def RenderingProperties(self):  # type: ()->Array[TrailRendererProperties]
        return (lambda n: Array(TrailRendererProperties, n))(self._node.at("RenderingProperties"))
    @property
    def RenderingType(self):  # type: ()->TrailRenderingType
        return TrailRenderingType(self._node.at("RenderingType"))
    @RenderingType.setter
    def RenderingType(self, val): self.RenderingType.set(val)
    @property
    def Size(self):  # type: ()->Vector2
        return Vector2(self._node.at("Size"))
    @Size.setter
    def Size(self, val): self.Size.set(val)
    @property
    def SizeCurvePath(self):  # type: ()->String
        return String(self._node.at("SizeCurvePath"))
    @SizeCurvePath.setter
    def SizeCurvePath(self, val): self.SizeCurvePath.set(val)
    @property
    def SizeVariability(self):  # type: ()->Vector2
        return Vector2(self._node.at("SizeVariability"))
    @SizeVariability.setter
    def SizeVariability(self, val): self.SizeVariability.set(val)
    @property
    def TrimTransparentPoints(self):  # type: ()->Bool
        return Bool(self._node.at("TrimTransparentPoints"))
    @TrimTransparentPoints.setter
    def TrimTransparentPoints(self, val): self.TrimTransparentPoints.set(val)
    @property
    def UVUnwrappingMode(self):  # type: ()->TrailUVUnwrappingMode
        return TrailUVUnwrappingMode(self._node.at("UVUnwrappingMode"))
    @UVUnwrappingMode.setter
    def UVUnwrappingMode(self, val): self.UVUnwrappingMode.set(val)
    @property
    def UVZoomCurvilinearCurvePath(self):  # type: ()->String
        return String(self._node.at("UVZoomCurvilinearCurvePath"))
    @UVZoomCurvilinearCurvePath.setter
    def UVZoomCurvilinearCurvePath(self, val): self.UVZoomCurvilinearCurvePath.set(val)
    @property
    def VerticalAxis(self):  # type: ()->Vector3
        return Vector3(self._node.at("VerticalAxis"))
    @VerticalAxis.setter
    def VerticalAxis(self, val): self.VerticalAxis.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class InteractData(HelperObject):
    schema_name = "InteractData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InteractData
        return InteractData(entlib.load_node_file(sourcefile, entlib.get_schema(InteractData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InteractData
        return InteractData(entlib.make_node(InteractData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def distance(self):  # type: ()->Float
        return Float(self._node.at("distance"))
    @distance.setter
    def distance(self, val): self.distance.set(val)
    pass


from EntityLibPy import Node

class InputCollisionBehaviorData(HelperObject):
    schema_name = "InputCollisionBehaviorData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InputCollisionBehaviorData
        return InputCollisionBehaviorData(entlib.load_node_file(sourcefile, entlib.get_schema(InputCollisionBehaviorData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InputCollisionBehaviorData
        return InputCollisionBehaviorData(entlib.make_node(InputCollisionBehaviorData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AltitudeMax(self):  # type: ()->Float
        return Float(self._node.at("AltitudeMax"))
    @AltitudeMax.setter
    def AltitudeMax(self, val): self.AltitudeMax.set(val)
    @property
    def DepthMax(self):  # type: ()->Float
        return Float(self._node.at("DepthMax"))
    @DepthMax.setter
    def DepthMax(self, val): self.DepthMax.set(val)
    @property
    def FrontAngle(self):  # type: ()->Float
        return Float(self._node.at("FrontAngle"))
    @FrontAngle.setter
    def FrontAngle(self, val): self.FrontAngle.set(val)
    @property
    def RadiusCoeff(self):  # type: ()->Float
        return Float(self._node.at("RadiusCoeff"))
    @RadiusCoeff.setter
    def RadiusCoeff(self, val): self.RadiusCoeff.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ID(HelperObject):

    pass


from EntityLibPy import Node

class PhysicsReplicateData(HelperObject):
    schema_name = "PhysicsReplicateData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsReplicateData
        return PhysicsReplicateData(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsReplicateData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsReplicateData
        return PhysicsReplicateData(entlib.make_node(PhysicsReplicateData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AngularV(self):  # type: ()->Vector3
        return Vector3(self._node.at("AngularV"))
    @AngularV.setter
    def AngularV(self, val): self.AngularV.set(val)
    @property
    def ID(self):  # type: ()->ID
        return ID(self._node.at("ID"))
    @property
    def LinearV(self):  # type: ()->Vector3
        return Vector3(self._node.at("LinearV"))
    @LinearV.setter
    def LinearV(self, val): self.LinearV.set(val)
    @property
    def Position(self):  # type: ()->Position
        return Position(self._node.at("Position"))
    @property
    def Rotation(self):  # type: ()->Quat
        return Quat(self._node.at("Rotation"))
    @Rotation.setter
    def Rotation(self, val): self.Rotation.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class HotSpotTypeEnum(Enum):
    all = "all"
    none = "none"
    back = "back"
    beam = "beam"
    bite = "bite"
    biter = "biter"
    breakablestrong = "breakablestrong"
    breakableweak = "breakableweak"
    camera = "camera"
    center = "center"
    head = "head"
    heal = "heal"
    ride = "ride"
    root = "root"
    snap = "snap"
    slot = "slot"
    spawnlife = "spawnlife"
    shoot = "shoot"
    take = "take"
    takehandle = "takehandle"
    vertebra = "vertebra"
    respawnslot = "respawnslot"
    HotSpotType_COUNT = "HotSpotType_COUNT"


class HotSpotType(Primitive[HotSpotTypeEnum]):  # Enum
    def __init__(self, node):
        super(HotSpotType, self).__init__(HotSpotTypeEnum, node)
    schema_name = "HotSpotType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> HotSpotType
        return HotSpotType(node)
    def set(self, val):  # type: (HotSpotTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class PickableDistributorComponentData(HelperObject):
    schema_name = "PickableDistributorComponentData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PickableDistributorComponentData
        return PickableDistributorComponentData(entlib.load_node_file(sourcefile, entlib.get_schema(PickableDistributorComponentData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PickableDistributorComponentData
        return PickableDistributorComponentData(entlib.make_node(PickableDistributorComponentData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("EntityRef"))
    @EntityRef.setter
    def EntityRef(self, val): self.EntityRef.set(val)
    @property
    def HotspotType(self):  # type: ()->HotSpotType
        return HotSpotType(self._node.at("HotspotType"))
    @HotspotType.setter
    def HotspotType(self, val): self.HotspotType.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HotspotData(HelperObject):
    schema_name = "HotspotData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HotspotData
        return HotspotData(entlib.load_node_file(sourcefile, entlib.get_schema(HotspotData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HotspotData
        return HotspotData(entlib.make_node(HotspotData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Bone(self):  # type: ()->String
        return String(self._node.at("Bone"))
    @Bone.setter
    def Bone(self, val): self.Bone.set(val)
    @property
    def Offset(self):  # type: ()->Vector3
        return Vector3(self._node.at("Offset"))
    @Offset.setter
    def Offset(self, val): self.Offset.set(val)
    @property
    def Orientation(self):  # type: ()->Quat
        return Quat(self._node.at("Orientation"))
    @Orientation.setter
    def Orientation(self, val): self.Orientation.set(val)
    @property
    def Scale(self):  # type: ()->Float
        return Float(self._node.at("Scale"))
    @Scale.setter
    def Scale(self, val): self.Scale.set(val)
    @property
    def Tags(self):  # type: ()->PrimitiveSet[str]
        return (lambda n: PrimitiveSet(str, n))(self._node.at("Tags"))
    @property
    def TargetEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("TargetEntityRef"))
    @TargetEntityRef.setter
    def TargetEntityRef(self, val): self.TargetEntityRef.set(val)
    @property
    def Type_(self):  # type: ()->HotSpotType
        return HotSpotType(self._node.at("Type"))
    @Type_.setter
    def Type_(self, val): self.Type_.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class HitTypeEnum(Enum):
    HitInstant = "HitInstant"
    HitPoison = "HitPoison"
    HitDestroy = "HitDestroy"
    HitType_COUNT = "HitType_COUNT"


class HitType(Primitive[HitTypeEnum]):  # Enum
    def __init__(self, node):
        super(HitType, self).__init__(HitTypeEnum, node)
    schema_name = "HitType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> HitType
        return HitType(node)
    def set(self, val):  # type: (HitTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class HitStyleEnum(Enum):
    None_ = "None"
    Bite = "Bite"
    Light = "Light"
    Medium = "Medium"
    Big = "Big"
    Eject = "Eject"
    EjectFar = "EjectFar"
    Fall = "Fall"
    Impact = "Impact"
    HitStyle_COUNT = "HitStyle_COUNT"


class HitStyle(Primitive[HitStyleEnum]):  # Enum
    def __init__(self, node):
        super(HitStyle, self).__init__(HitStyleEnum, node)
    schema_name = "HitStyle"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> HitStyle
        return HitStyle(node)
    def set(self, val):  # type: (HitStyleEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class HeightGrid(HelperObject):
    schema_name = "HeightGrid"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HeightGrid
        return HeightGrid(entlib.load_node_file(sourcefile, entlib.get_schema(HeightGrid.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HeightGrid
        return HeightGrid(entlib.make_node(HeightGrid.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CenterToCorner(self):  # type: ()->Vector3
        return Vector3(self._node.at("CenterToCorner"))
    @CenterToCorner.setter
    def CenterToCorner(self, val): self.CenterToCorner.set(val)
    @property
    def GridCellSize(self):  # type: ()->Float
        return Float(self._node.at("GridCellSize"))
    @GridCellSize.setter
    def GridCellSize(self, val): self.GridCellSize.set(val)
    @property
    def GridHeight(self):  # type: ()->Int
        return Int(self._node.at("GridHeight"))
    @GridHeight.setter
    def GridHeight(self, val): self.GridHeight.set(val)
    @property
    def GridWidth(self):  # type: ()->Int
        return Int(self._node.at("GridWidth"))
    @GridWidth.setter
    def GridWidth(self, val): self.GridWidth.set(val)
    @property
    def Heights(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("Heights"))
    @Heights.setter
    def Heights(self, val): self.Heights.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class NavMeshSet(HelperObject):
    schema_name = "NavMeshSet"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NavMeshSet
        return NavMeshSet(entlib.load_node_file(sourcefile, entlib.get_schema(NavMeshSet.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NavMeshSet
        return NavMeshSet(entlib.make_node(NavMeshSet.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HeightGrid(self):  # type: ()->HeightGrid
        return HeightGrid(self._node.at("HeightGrid"))
    @property
    def NavMeshes(self):  # type: ()->Array[NavMesh]
        return (lambda n: Array(NavMesh, n))(self._node.at("NavMeshes"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HeadCollisionBehaviorData(HelperObject):
    schema_name = "HeadCollisionBehaviorData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HeadCollisionBehaviorData
        return HeadCollisionBehaviorData(entlib.load_node_file(sourcefile, entlib.get_schema(HeadCollisionBehaviorData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HeadCollisionBehaviorData
        return HeadCollisionBehaviorData(entlib.make_node(HeadCollisionBehaviorData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def disableDuration(self):  # type: ()->Float
        return Float(self._node.at("disableDuration"))
    @disableDuration.setter
    def disableDuration(self, val): self.disableDuration.set(val)
    @property
    def enableDuration(self):  # type: ()->Float
        return Float(self._node.at("enableDuration"))
    @enableDuration.setter
    def enableDuration(self, val): self.enableDuration.set(val)
    @property
    def headOffset(self):  # type: ()->Vector3
        return Vector3(self._node.at("headOffset"))
    @headOffset.setter
    def headOffset(self, val): self.headOffset.set(val)
    @property
    def isEnabled(self):  # type: ()->Bool
        return Bool(self._node.at("isEnabled"))
    @isEnabled.setter
    def isEnabled(self, val): self.isEnabled.set(val)
    @property
    def radiusCoeff(self):  # type: ()->Float
        return Float(self._node.at("radiusCoeff"))
    @radiusCoeff.setter
    def radiusCoeff(self, val): self.radiusCoeff.set(val)
    @property
    def slopeInfluence(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("slopeInfluence"))
    @property
    def softCollisionRigidbodyCoeff(self):  # type: ()->Float
        return Float(self._node.at("softCollisionRigidbodyCoeff"))
    @softCollisionRigidbodyCoeff.setter
    def softCollisionRigidbodyCoeff(self, val): self.softCollisionRigidbodyCoeff.set(val)
    @property
    def softCollisionVisualCoeff(self):  # type: ()->Float
        return Float(self._node.at("softCollisionVisualCoeff"))
    @softCollisionVisualCoeff.setter
    def softCollisionVisualCoeff(self, val): self.softCollisionVisualCoeff.set(val)
    @property
    def speedInfluence(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("speedInfluence"))
    @property
    def visualSmoothOut(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("visualSmoothOut"))
    pass


from EntityLibPy import Node
class GrowingStateEnum(Enum):
    invalid = "invalid"
    nogrow = "nogrow"
    growing = "growing"
    grown = "grown"
    manualgrow = "manualgrow"
    degrowing = "degrowing"
    GrowingState_COUNT = "GrowingState_COUNT"


class GrowingState(Primitive[GrowingStateEnum]):  # Enum
    def __init__(self, node):
        super(GrowingState, self).__init__(GrowingStateEnum, node)
    schema_name = "GrowingState"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> GrowingState
        return GrowingState(node)
    def set(self, val):  # type: (GrowingStateEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class GroundTypeData(HelperObject):
    schema_name = "GroundTypeData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GroundTypeData
        return GroundTypeData(entlib.load_node_file(sourcefile, entlib.get_schema(GroundTypeData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GroundTypeData
        return GroundTypeData(entlib.make_node(GroundTypeData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GrainRangeMax(self):  # type: ()->Float
        return Float(self._node.at("GrainRangeMax"))
    @GrainRangeMax.setter
    def GrainRangeMax(self, val): self.GrainRangeMax.set(val)
    @property
    def GrainRangeMin(self):  # type: ()->Float
        return Float(self._node.at("GrainRangeMin"))
    @GrainRangeMin.setter
    def GrainRangeMin(self, val): self.GrainRangeMin.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def RegenRangeMax(self):  # type: ()->Float
        return Float(self._node.at("RegenRangeMax"))
    @RegenRangeMax.setter
    def RegenRangeMax(self, val): self.RegenRangeMax.set(val)
    @property
    def RegenRangeMin(self):  # type: ()->Float
        return Float(self._node.at("RegenRangeMin"))
    @RegenRangeMin.setter
    def RegenRangeMin(self, val): self.RegenRangeMin.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Game_VoxelsPile(HelperObject):
    schema_name = "Game::VoxelsPile"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Game_VoxelsPile
        return Game_VoxelsPile(entlib.load_node_file(sourcefile, entlib.get_schema(Game_VoxelsPile.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Game_VoxelsPile
        return Game_VoxelsPile(entlib.make_node(Game_VoxelsPile.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def NbEmptyVoxels(self):  # type: ()->Int
        return Int(self._node.at("NbEmptyVoxels"))
    @NbEmptyVoxels.setter
    def NbEmptyVoxels(self, val): self.NbEmptyVoxels.set(val)
    @property
    def NbUsedVoxels(self):  # type: ()->Int
        return Int(self._node.at("NbUsedVoxels"))
    @NbUsedVoxels.setter
    def NbUsedVoxels(self, val): self.NbUsedVoxels.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Game_VoxelsColumn(HelperObject):
    schema_name = "Game::VoxelsColumn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Game_VoxelsColumn
        return Game_VoxelsColumn(entlib.load_node_file(sourcefile, entlib.get_schema(Game_VoxelsColumn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Game_VoxelsColumn
        return Game_VoxelsColumn(entlib.make_node(Game_VoxelsColumn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Piles(self):  # type: ()->Array[Game_VoxelsPile]
        return (lambda n: Array(Game_VoxelsPile, n))(self._node.at("Piles"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Game_VoxelsVolume(HelperObject):
    schema_name = "Game::VoxelsVolume"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Game_VoxelsVolume
        return Game_VoxelsVolume(entlib.load_node_file(sourcefile, entlib.get_schema(Game_VoxelsVolume.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Game_VoxelsVolume
        return Game_VoxelsVolume(entlib.make_node(Game_VoxelsVolume.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AnchorToCorner(self):  # type: ()->Vector3
        return Vector3(self._node.at("AnchorToCorner"))
    @AnchorToCorner.setter
    def AnchorToCorner(self, val): self.AnchorToCorner.set(val)
    @property
    def BoundingBox(self):  # type: ()->Vector3
        return Vector3(self._node.at("BoundingBox"))
    @BoundingBox.setter
    def BoundingBox(self, val): self.BoundingBox.set(val)
    @property
    def Columns(self):  # type: ()->Array[Game_VoxelsColumn]
        return (lambda n: Array(Game_VoxelsColumn, n))(self._node.at("Columns"))
    @property
    def Height(self):  # type: ()->Int
        return Int(self._node.at("Height"))
    @Height.setter
    def Height(self, val): self.Height.set(val)
    @property
    def VoxelSize(self):  # type: ()->Float
        return Float(self._node.at("VoxelSize"))
    @VoxelSize.setter
    def VoxelSize(self, val): self.VoxelSize.set(val)
    @property
    def Width(self):  # type: ()->Int
        return Int(self._node.at("Width"))
    @Width.setter
    def Width(self, val): self.Width.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameTimeInMs(HelperObject):
    schema_name = "GameTimeInMs"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameTimeInMs
        return GameTimeInMs(entlib.load_node_file(sourcefile, entlib.get_schema(GameTimeInMs.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameTimeInMs
        return GameTimeInMs(entlib.make_node(GameTimeInMs.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class GameProfile(HelperObject):
    schema_name = "GameProfile"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameProfile
        return GameProfile(entlib.load_node_file(sourcefile, entlib.get_schema(GameProfile.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameProfile
        return GameProfile(entlib.make_node(GameProfile.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def TypedScoreOverTimeList(self):  # type: ()->Map[str, Array[Array[TupleNode[Type[GameTimeInMs], Type[Float]]]]]
        return (lambda n: Map(str, (lambda n: Array((lambda n: Array(TupleNode, n)), n)), n))(self._node.at("TypedScoreOverTimeList"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameSnapData(HelperObject):
    schema_name = "GameSnapData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameSnapData
        return GameSnapData(entlib.load_node_file(sourcefile, entlib.get_schema(GameSnapData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameSnapData
        return GameSnapData(entlib.make_node(GameSnapData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def creatureSizeCoeff(self):  # type: ()->Float
        return Float(self._node.at("creatureSizeCoeff"))
    @creatureSizeCoeff.setter
    def creatureSizeCoeff(self, val): self.creatureSizeCoeff.set(val)
    @property
    def dirCoeff(self):  # type: ()->Float
        return Float(self._node.at("dirCoeff"))
    @dirCoeff.setter
    def dirCoeff(self, val): self.dirCoeff.set(val)
    @property
    def distCoeff(self):  # type: ()->Float
        return Float(self._node.at("distCoeff"))
    @distCoeff.setter
    def distCoeff(self, val): self.distCoeff.set(val)
    @property
    def maxAngle(self):  # type: ()->Float
        return Float(self._node.at("maxAngle"))
    @maxAngle.setter
    def maxAngle(self, val): self.maxAngle.set(val)
    @property
    def maxDist(self):  # type: ()->Float
        return Float(self._node.at("maxDist"))
    @maxDist.setter
    def maxDist(self, val): self.maxDist.set(val)
    pass


from EntityLibPy import Node

class GameSlopeData(HelperObject):
    schema_name = "GameSlopeData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameSlopeData
        return GameSlopeData(entlib.load_node_file(sourcefile, entlib.get_schema(GameSlopeData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameSlopeData
        return GameSlopeData(entlib.make_node(GameSlopeData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AngleMin(self):  # type: ()->Float
        return Float(self._node.at("AngleMin"))
    @AngleMin.setter
    def AngleMin(self, val): self.AngleMin.set(val)
    @property
    def AngleMinHysteresis(self):  # type: ()->Float
        return Float(self._node.at("AngleMinHysteresis"))
    @AngleMinHysteresis.setter
    def AngleMinHysteresis(self, val): self.AngleMinHysteresis.set(val)
    @property
    def ForceAgainstSlopeAdherenceMin(self):  # type: ()->Float
        return Float(self._node.at("ForceAgainstSlopeAdherenceMin"))
    @ForceAgainstSlopeAdherenceMin.setter
    def ForceAgainstSlopeAdherenceMin(self, val): self.ForceAgainstSlopeAdherenceMin.set(val)
    @property
    def ForceAgainstSlopeAdherenceMinHysteresis(self):  # type: ()->Float
        return Float(self._node.at("ForceAgainstSlopeAdherenceMinHysteresis"))
    @ForceAgainstSlopeAdherenceMinHysteresis.setter
    def ForceAgainstSlopeAdherenceMinHysteresis(self, val): self.ForceAgainstSlopeAdherenceMinHysteresis.set(val)
    @property
    def OrientationDotMin(self):  # type: ()->Float
        return Float(self._node.at("OrientationDotMin"))
    @OrientationDotMin.setter
    def OrientationDotMin(self, val): self.OrientationDotMin.set(val)
    @property
    def OrientationDotMinHysteresis(self):  # type: ()->Float
        return Float(self._node.at("OrientationDotMinHysteresis"))
    @OrientationDotMinHysteresis.setter
    def OrientationDotMinHysteresis(self, val): self.OrientationDotMinHysteresis.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameShamanVisionData(HelperObject):
    schema_name = "GameShamanVisionData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameShamanVisionData
        return GameShamanVisionData(entlib.load_node_file(sourcefile, entlib.get_schema(GameShamanVisionData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameShamanVisionData
        return GameShamanVisionData(entlib.make_node(GameShamanVisionData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AudioAngle(self):  # type: ()->Float
        return Float(self._node.at("AudioAngle"))
    @AudioAngle.setter
    def AudioAngle(self, val): self.AudioAngle.set(val)
    @property
    def IconDisableDisplayDuration(self):  # type: ()->Float
        return Float(self._node.at("IconDisableDisplayDuration"))
    @IconDisableDisplayDuration.setter
    def IconDisableDisplayDuration(self, val): self.IconDisableDisplayDuration.set(val)
    @property
    def IconDisplayDuration(self):  # type: ()->Float
        return Float(self._node.at("IconDisplayDuration"))
    @IconDisplayDuration.setter
    def IconDisplayDuration(self, val): self.IconDisplayDuration.set(val)
    @property
    def IconEnableDisplayDuration(self):  # type: ()->Float
        return Float(self._node.at("IconEnableDisplayDuration"))
    @IconEnableDisplayDuration.setter
    def IconEnableDisplayDuration(self, val): self.IconEnableDisplayDuration.set(val)
    @property
    def IntensityGoddess(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("IntensityGoddess"))
    @property
    def IntensityPlayer(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("IntensityPlayer"))
    @property
    def IntensitySpecie(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("IntensitySpecie"))
    @property
    def PerceptionGoddess(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("PerceptionGoddess"))
    @property
    def PerceptionPlayer(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("PerceptionPlayer"))
    @property
    def PerceptionSpecie(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("PerceptionSpecie"))
    @property
    def Sound_Locate_HeartBeat(self):  # type: ()->String
        return String(self._node.at("Sound_Locate_HeartBeat"))
    @Sound_Locate_HeartBeat.setter
    def Sound_Locate_HeartBeat(self, val): self.Sound_Locate_HeartBeat.set(val)
    @property
    def Sound_UI_Locate_HeartBeat_Stop(self):  # type: ()->String
        return String(self._node.at("Sound_UI_Locate_HeartBeat_Stop"))
    @Sound_UI_Locate_HeartBeat_Stop.setter
    def Sound_UI_Locate_HeartBeat_Stop(self, val): self.Sound_UI_Locate_HeartBeat_Stop.set(val)
    @property
    def Sound_UI_Locate_In(self):  # type: ()->String
        return String(self._node.at("Sound_UI_Locate_In"))
    @Sound_UI_Locate_In.setter
    def Sound_UI_Locate_In(self, val): self.Sound_UI_Locate_In.set(val)
    @property
    def Sound_UI_Locate_Out(self):  # type: ()->String
        return String(self._node.at("Sound_UI_Locate_Out"))
    @Sound_UI_Locate_Out.setter
    def Sound_UI_Locate_Out(self, val): self.Sound_UI_Locate_Out.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameReviveData(HelperObject):
    schema_name = "GameReviveData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameReviveData
        return GameReviveData(entlib.load_node_file(sourcefile, entlib.get_schema(GameReviveData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameReviveData
        return GameReviveData(entlib.make_node(GameReviveData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AnimPlayRatioSpeedIn(self):  # type: ()->Float
        return Float(self._node.at("AnimPlayRatioSpeedIn"))
    @AnimPlayRatioSpeedIn.setter
    def AnimPlayRatioSpeedIn(self, val): self.AnimPlayRatioSpeedIn.set(val)
    @property
    def AnimPlayRatioSpeedOut(self):  # type: ()->Float
        return Float(self._node.at("AnimPlayRatioSpeedOut"))
    @AnimPlayRatioSpeedOut.setter
    def AnimPlayRatioSpeedOut(self, val): self.AnimPlayRatioSpeedOut.set(val)
    @property
    def AnimPlayRatioSpeedRate(self):  # type: ()->Float
        return Float(self._node.at("AnimPlayRatioSpeedRate"))
    @AnimPlayRatioSpeedRate.setter
    def AnimPlayRatioSpeedRate(self, val): self.AnimPlayRatioSpeedRate.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameRespawnData(HelperObject):
    schema_name = "GameRespawnData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameRespawnData
        return GameRespawnData(entlib.load_node_file(sourcefile, entlib.get_schema(GameRespawnData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameRespawnData
        return GameRespawnData(entlib.make_node(GameRespawnData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GuardianTravelParams(self):  # type: ()->TravelParams
        return TravelParams(self._node.at("GuardianTravelParams"))
    @property
    def IdleTimeBeforeRespawn(self):  # type: ()->Float
        return Float(self._node.at("IdleTimeBeforeRespawn"))
    @IdleTimeBeforeRespawn.setter
    def IdleTimeBeforeRespawn(self, val): self.IdleTimeBeforeRespawn.set(val)
    @property
    def NonGuardianTravelParams(self):  # type: ()->TravelParams
        return TravelParams(self._node.at("NonGuardianTravelParams"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GamePropelData(HelperObject):
    schema_name = "GamePropelData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GamePropelData
        return GamePropelData(entlib.load_node_file(sourcefile, entlib.get_schema(GamePropelData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GamePropelData
        return GamePropelData(entlib.make_node(GamePropelData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AttractorFactorFallThreshold(self):  # type: ()->Float
        return Float(self._node.at("AttractorFactorFallThreshold"))
    @AttractorFactorFallThreshold.setter
    def AttractorFactorFallThreshold(self, val): self.AttractorFactorFallThreshold.set(val)
    @property
    def AttractorFactorRaiseThreshold(self):  # type: ()->Float
        return Float(self._node.at("AttractorFactorRaiseThreshold"))
    @AttractorFactorRaiseThreshold.setter
    def AttractorFactorRaiseThreshold(self, val): self.AttractorFactorRaiseThreshold.set(val)
    @property
    def EnterAngleMin(self):  # type: ()->Float
        return Float(self._node.at("EnterAngleMin"))
    @EnterAngleMin.setter
    def EnterAngleMin(self, val): self.EnterAngleMin.set(val)
    @property
    def EnterSpeedMin(self):  # type: ()->Float
        return Float(self._node.at("EnterSpeedMin"))
    @EnterSpeedMin.setter
    def EnterSpeedMin(self, val): self.EnterSpeedMin.set(val)
    @property
    def Speed(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("Speed"))
    @Speed.setter
    def Speed(self, val): self.Speed.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GamePadSpeedBehaviorData(HelperObject):
    schema_name = "GamePadSpeedBehaviorData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GamePadSpeedBehaviorData
        return GamePadSpeedBehaviorData(entlib.load_node_file(sourcefile, entlib.get_schema(GamePadSpeedBehaviorData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GamePadSpeedBehaviorData
        return GamePadSpeedBehaviorData(entlib.make_node(GamePadSpeedBehaviorData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DeadZoneThreshold(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("DeadZoneThreshold"))
    @property
    def JoyAcceleration(self):  # type: ()->Float
        return Float(self._node.at("JoyAcceleration"))
    @JoyAcceleration.setter
    def JoyAcceleration(self, val): self.JoyAcceleration.set(val)
    @property
    def PostponeDelayMax(self):  # type: ()->Float
        return Float(self._node.at("PostponeDelayMax"))
    @PostponeDelayMax.setter
    def PostponeDelayMax(self, val): self.PostponeDelayMax.set(val)
    @property
    def SpeedFastMinDuration(self):  # type: ()->Float
        return Float(self._node.at("SpeedFastMinDuration"))
    @SpeedFastMinDuration.setter
    def SpeedFastMinDuration(self, val): self.SpeedFastMinDuration.set(val)
    @property
    def SpeedMediumThreshold(self):  # type: ()->Float
        return Float(self._node.at("SpeedMediumThreshold"))
    @SpeedMediumThreshold.setter
    def SpeedMediumThreshold(self, val): self.SpeedMediumThreshold.set(val)
    @property
    def SpeedSlowThreshold(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("SpeedSlowThreshold"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GamePadNavigationData(HelperObject):
    schema_name = "GamePadNavigationData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GamePadNavigationData
        return GamePadNavigationData(entlib.load_node_file(sourcefile, entlib.get_schema(GamePadNavigationData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GamePadNavigationData
        return GamePadNavigationData(entlib.make_node(GamePadNavigationData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def clamberDirectionDeltaAngle(self):  # type: ()->Float
        return Float(self._node.at("clamberDirectionDeltaAngle"))
    @clamberDirectionDeltaAngle.setter
    def clamberDirectionDeltaAngle(self, val): self.clamberDirectionDeltaAngle.set(val)
    @property
    def invertInputFactor(self):  # type: ()->Float
        return Float(self._node.at("invertInputFactor"))
    @invertInputFactor.setter
    def invertInputFactor(self, val): self.invertInputFactor.set(val)
    @property
    def joyLockedAngularSpeedMax(self):  # type: ()->Float
        return Float(self._node.at("joyLockedAngularSpeedMax"))
    @joyLockedAngularSpeedMax.setter
    def joyLockedAngularSpeedMax(self, val): self.joyLockedAngularSpeedMax.set(val)
    @property
    def meshNavigationMaxDeltaAngleToKeepInputLock(self):  # type: ()->Float
        return Float(self._node.at("meshNavigationMaxDeltaAngleToKeepInputLock"))
    @meshNavigationMaxDeltaAngleToKeepInputLock.setter
    def meshNavigationMaxDeltaAngleToKeepInputLock(self, val): self.meshNavigationMaxDeltaAngleToKeepInputLock.set(val)
    @property
    def normalAlignmentToKeepTrajectory(self):  # type: ()->Float
        return Float(self._node.at("normalAlignmentToKeepTrajectory"))
    @normalAlignmentToKeepTrajectory.setter
    def normalAlignmentToKeepTrajectory(self, val): self.normalAlignmentToKeepTrajectory.set(val)
    pass


from EntityLibPy import Node

class GameLODData(HelperObject):
    schema_name = "GameLODData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameLODData
        return GameLODData(entlib.load_node_file(sourcefile, entlib.get_schema(GameLODData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameLODData
        return GameLODData(entlib.make_node(GameLODData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CreatureDistance(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("CreatureDistance"))
    @CreatureDistance.setter
    def CreatureDistance(self, val): self.CreatureDistance.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameInfoDB(HelperObject):
    schema_name = "GameInfoDB"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameInfoDB
        return GameInfoDB(entlib.load_node_file(sourcefile, entlib.get_schema(GameInfoDB.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameInfoDB
        return GameInfoDB(entlib.make_node(GameInfoDB.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Store(self):  # type: ()->Map[str, Map[str, variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_]]
        return (lambda n: Map(str, (lambda n: Map(str, variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_, n)), n))(self._node.at("Store"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameImmersionData(HelperObject):
    schema_name = "GameImmersionData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameImmersionData
        return GameImmersionData(entlib.load_node_file(sourcefile, entlib.get_schema(GameImmersionData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameImmersionData
        return GameImmersionData(entlib.make_node(GameImmersionData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def friction(self):  # type: ()->Float
        return Float(self._node.at("friction"))
    @friction.setter
    def friction(self, val): self.friction.set(val)
    @property
    def immersedFactor(self):  # type: ()->Float
        return Float(self._node.at("immersedFactor"))
    @immersedFactor.setter
    def immersedFactor(self, val): self.immersedFactor.set(val)
    @property
    def immersedFactorMaxToJump(self):  # type: ()->Float
        return Float(self._node.at("immersedFactorMaxToJump"))
    @immersedFactorMaxToJump.setter
    def immersedFactorMaxToJump(self, val): self.immersedFactorMaxToJump.set(val)
    @property
    def pitchMaxAngleToJump(self):  # type: ()->Float
        return Float(self._node.at("pitchMaxAngleToJump"))
    @pitchMaxAngleToJump.setter
    def pitchMaxAngleToJump(self, val): self.pitchMaxAngleToJump.set(val)
    @property
    def pitchMinAngleToJump(self):  # type: ()->Float
        return Float(self._node.at("pitchMinAngleToJump"))
    @pitchMinAngleToJump.setter
    def pitchMinAngleToJump(self, val): self.pitchMinAngleToJump.set(val)
    @property
    def reachSurfaceAcceleration(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("reachSurfaceAcceleration"))
    @property
    def speedZMinToJump(self):  # type: ()->Float
        return Float(self._node.at("speedZMinToJump"))
    @speedZMinToJump.setter
    def speedZMinToJump(self, val): self.speedZMinToJump.set(val)
    pass


from EntityLibPy import Node

class GameFlyData_FlyUp(HelperObject):
    schema_name = "GameFlyData::FlyUp"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFlyData_FlyUp
        return GameFlyData_FlyUp(entlib.load_node_file(sourcefile, entlib.get_schema(GameFlyData_FlyUp.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFlyData_FlyUp
        return GameFlyData_FlyUp(entlib.make_node(GameFlyData_FlyUp.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Acceleration(self):  # type: ()->Float
        return Float(self._node.at("Acceleration"))
    @Acceleration.setter
    def Acceleration(self, val): self.Acceleration.set(val)
    @property
    def Deceleration(self):  # type: ()->Float
        return Float(self._node.at("Deceleration"))
    @Deceleration.setter
    def Deceleration(self, val): self.Deceleration.set(val)
    @property
    def ExitDeceleration(self):  # type: ()->Float
        return Float(self._node.at("ExitDeceleration"))
    @ExitDeceleration.setter
    def ExitDeceleration(self, val): self.ExitDeceleration.set(val)
    @property
    def PitchStart(self):  # type: ()->Float
        return Float(self._node.at("PitchStart"))
    @PitchStart.setter
    def PitchStart(self, val): self.PitchStart.set(val)
    @property
    def SpeedFactor(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("SpeedFactor"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameFlyData_FlyDown(HelperObject):
    schema_name = "GameFlyData::FlyDown"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFlyData_FlyDown
        return GameFlyData_FlyDown(entlib.load_node_file(sourcefile, entlib.get_schema(GameFlyData_FlyDown.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFlyData_FlyDown
        return GameFlyData_FlyDown(entlib.make_node(GameFlyData_FlyDown.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Acceleration(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("Acceleration"))
    @property
    def Deceleration(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("Deceleration"))
    @property
    def ExitDeceleration(self):  # type: ()->Float
        return Float(self._node.at("ExitDeceleration"))
    @ExitDeceleration.setter
    def ExitDeceleration(self, val): self.ExitDeceleration.set(val)
    @property
    def PitchStart(self):  # type: ()->Float
        return Float(self._node.at("PitchStart"))
    @PitchStart.setter
    def PitchStart(self, val): self.PitchStart.set(val)
    @property
    def SpeedSlowFactor(self):  # type: ()->Float
        return Float(self._node.at("SpeedSlowFactor"))
    @SpeedSlowFactor.setter
    def SpeedSlowFactor(self, val): self.SpeedSlowFactor.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameFlyData_Flap(HelperObject):
    schema_name = "GameFlyData::Flap"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFlyData_Flap
        return GameFlyData_Flap(entlib.load_node_file(sourcefile, entlib.get_schema(GameFlyData_Flap.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFlyData_Flap
        return GameFlyData_Flap(entlib.make_node(GameFlyData_Flap.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def RollMin(self):  # type: ()->Float
        return Float(self._node.at("RollMin"))
    @RollMin.setter
    def RollMin(self, val): self.RollMin.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameFlyData_Dive(HelperObject):
    schema_name = "GameFlyData::Dive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFlyData_Dive
        return GameFlyData_Dive(entlib.load_node_file(sourcefile, entlib.get_schema(GameFlyData_Dive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFlyData_Dive
        return GameFlyData_Dive(entlib.make_node(GameFlyData_Dive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Acceleration(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("Acceleration"))
    @property
    def Deceleration(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("Deceleration"))
    @property
    def ExitDeceleration(self):  # type: ()->Float
        return Float(self._node.at("ExitDeceleration"))
    @ExitDeceleration.setter
    def ExitDeceleration(self, val): self.ExitDeceleration.set(val)
    @property
    def SpeedFastFactor(self):  # type: ()->Float
        return Float(self._node.at("SpeedFastFactor"))
    @SpeedFastFactor.setter
    def SpeedFastFactor(self, val): self.SpeedFastFactor.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameFlyData_Centrifugal(HelperObject):
    schema_name = "GameFlyData::Centrifugal"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFlyData_Centrifugal
        return GameFlyData_Centrifugal(entlib.load_node_file(sourcefile, entlib.get_schema(GameFlyData_Centrifugal.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFlyData_Centrifugal
        return GameFlyData_Centrifugal(entlib.make_node(GameFlyData_Centrifugal.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Acceleration(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("Acceleration"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameFlyData(HelperObject):
    schema_name = "GameFlyData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFlyData
        return GameFlyData(entlib.load_node_file(sourcefile, entlib.get_schema(GameFlyData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFlyData
        return GameFlyData(entlib.make_node(GameFlyData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Centrifugal(self):  # type: ()->GameFlyData_Centrifugal
        return GameFlyData_Centrifugal(self._node.at("Centrifugal"))
    @property
    def Dive(self):  # type: ()->GameFlyData_Dive
        return GameFlyData_Dive(self._node.at("Dive"))
    @property
    def Flap(self):  # type: ()->GameFlyData_Flap
        return GameFlyData_Flap(self._node.at("Flap"))
    @property
    def FlyBlendIn(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("FlyBlendIn"))
    @property
    def FlyDown(self):  # type: ()->GameFlyData_FlyDown
        return GameFlyData_FlyDown(self._node.at("FlyDown"))
    @property
    def FlyExitBlendIn(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("FlyExitBlendIn"))
    @property
    def FlyPitchCoeffFromSpeedCoeff(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("FlyPitchCoeffFromSpeedCoeff"))
    @property
    def FlyUp(self):  # type: ()->GameFlyData_FlyUp
        return GameFlyData_FlyUp(self._node.at("FlyUp"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameFluidData_HeightThreshold(HelperObject):
    schema_name = "GameFluidData::HeightThreshold"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFluidData_HeightThreshold
        return GameFluidData_HeightThreshold(entlib.load_node_file(sourcefile, entlib.get_schema(GameFluidData_HeightThreshold.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFluidData_HeightThreshold
        return GameFluidData_HeightThreshold(entlib.make_node(GameFluidData_HeightThreshold.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Damage(self):  # type: ()->Float
        return Float(self._node.at("Damage"))
    @Damage.setter
    def Damage(self, val): self.Damage.set(val)
    @property
    def Depth(self):  # type: ()->Float
        return Float(self._node.at("Depth"))
    @Depth.setter
    def Depth(self, val): self.Depth.set(val)
    @property
    def HitStyle(self):  # type: ()->HitStyle
        return HitStyle(self._node.at("HitStyle"))
    @HitStyle.setter
    def HitStyle(self, val): self.HitStyle.set(val)
    @property
    def Impact(self):  # type: ()->Float
        return Float(self._node.at("Impact"))
    @Impact.setter
    def Impact(self, val): self.Impact.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameFluidData(HelperObject):
    schema_name = "GameFluidData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFluidData
        return GameFluidData(entlib.load_node_file(sourcefile, entlib.get_schema(GameFluidData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFluidData
        return GameFluidData(entlib.make_node(GameFluidData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FlowSpeedInfluences(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("FlowSpeedInfluences"))
    @FlowSpeedInfluences.setter
    def FlowSpeedInfluences(self, val): self.FlowSpeedInfluences.set(val)
    @property
    def HeightThresholds(self):  # type: ()->Array[Array[GameFluidData_HeightThreshold]]
        return (lambda n: Array((lambda n: Array(GameFluidData_HeightThreshold, n)), n))(self._node.at("HeightThresholds"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameFeetCatchUpData(HelperObject):
    schema_name = "GameFeetCatchUpData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFeetCatchUpData
        return GameFeetCatchUpData(entlib.load_node_file(sourcefile, entlib.get_schema(GameFeetCatchUpData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFeetCatchUpData
        return GameFeetCatchUpData(entlib.make_node(GameFeetCatchUpData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def aerialRate(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("aerialRate"))
    @property
    def groundRate(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("groundRate"))
    @property
    def useHeightmapPerSize(self):  # type: ()->Map[SizeEnum, Bool]
        return (lambda n: Map(SizeEnum, Bool, n))(self._node.at("useHeightmapPerSize"))
    pass


from EntityLibPy import Node

class GameFallData(HelperObject):
    schema_name = "GameFallData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameFallData
        return GameFallData(entlib.load_node_file(sourcefile, entlib.get_schema(GameFallData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameFallData
        return GameFallData(entlib.make_node(GameFallData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Acceleration(self):  # type: ()->Float
        return Float(self._node.at("Acceleration"))
    @Acceleration.setter
    def Acceleration(self, val): self.Acceleration.set(val)
    @property
    def AirControlBrakeAngleMin(self):  # type: ()->Float
        return Float(self._node.at("AirControlBrakeAngleMin"))
    @AirControlBrakeAngleMin.setter
    def AirControlBrakeAngleMin(self, val): self.AirControlBrakeAngleMin.set(val)
    @property
    def AirControlDirection(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("AirControlDirection"))
    @property
    def AirControlSpeedAngleMax(self):  # type: ()->Float
        return Float(self._node.at("AirControlSpeedAngleMax"))
    @AirControlSpeedAngleMax.setter
    def AirControlSpeedAngleMax(self, val): self.AirControlSpeedAngleMax.set(val)
    @property
    def Friction(self):  # type: ()->Float
        return Float(self._node.at("Friction"))
    @Friction.setter
    def Friction(self, val): self.Friction.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameDeathData(HelperObject):
    schema_name = "GameDeathData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameDeathData
        return GameDeathData(entlib.load_node_file(sourcefile, entlib.get_schema(GameDeathData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameDeathData
        return GameDeathData(entlib.make_node(GameDeathData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def defaultFreedDelay(self):  # type: ()->Float
        return Float(self._node.at("defaultFreedDelay"))
    @defaultFreedDelay.setter
    def defaultFreedDelay(self, val): self.defaultFreedDelay.set(val)
    @property
    def immersedFreedDelay(self):  # type: ()->Float
        return Float(self._node.at("immersedFreedDelay"))
    @immersedFreedDelay.setter
    def immersedFreedDelay(self, val): self.immersedFreedDelay.set(val)
    @property
    def leavingLavaDelay(self):  # type: ()->Float
        return Float(self._node.at("leavingLavaDelay"))
    @leavingLavaDelay.setter
    def leavingLavaDelay(self, val): self.leavingLavaDelay.set(val)
    @property
    def meetingLavaDelay(self):  # type: ()->Float
        return Float(self._node.at("meetingLavaDelay"))
    @meetingLavaDelay.setter
    def meetingLavaDelay(self, val): self.meetingLavaDelay.set(val)
    pass


from EntityLibPy import Node

class GameClockManager_TimeOfDay(HelperObject):
    schema_name = "GameClockManager::TimeOfDay"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameClockManager_TimeOfDay
        return GameClockManager_TimeOfDay(entlib.load_node_file(sourcefile, entlib.get_schema(GameClockManager_TimeOfDay.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameClockManager_TimeOfDay
        return GameClockManager_TimeOfDay(entlib.make_node(GameClockManager_TimeOfDay.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Hour(self):  # type: ()->Int
        return Int(self._node.at("Hour"))
    @Hour.setter
    def Hour(self, val): self.Hour.set(val)
    @property
    def Minute(self):  # type: ()->Int
        return Int(self._node.at("Minute"))
    @Minute.setter
    def Minute(self, val): self.Minute.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameClockManager_GameDate(HelperObject):
    schema_name = "GameClockManager::GameDate"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameClockManager_GameDate
        return GameClockManager_GameDate(entlib.load_node_file(sourcefile, entlib.get_schema(GameClockManager_GameDate.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameClockManager_GameDate
        return GameClockManager_GameDate(entlib.make_node(GameClockManager_GameDate.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DayOfYear(self):  # type: ()->Int
        return Int(self._node.at("DayOfYear"))
    @DayOfYear.setter
    def DayOfYear(self, val): self.DayOfYear.set(val)
    @property
    def Season(self):  # type: ()->String
        return String(self._node.at("Season"))
    @Season.setter
    def Season(self, val): self.Season.set(val)
    @property
    def TimeOfDay(self):  # type: ()->GameClockManager_TimeOfDay
        return GameClockManager_TimeOfDay(self._node.at("TimeOfDay"))
    @property
    def Year(self):  # type: ()->Int
        return Int(self._node.at("Year"))
    @Year.setter
    def Year(self, val): self.Year.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameClockManager(HelperObject):
    schema_name = "GameClockManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameClockManager
        return GameClockManager(entlib.load_node_file(sourcefile, entlib.get_schema(GameClockManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameClockManager
        return GameClockManager(entlib.make_node(GameClockManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DayDurationInMin(self):  # type: ()->Int
        return Int(self._node.at("DayDurationInMin"))
    @DayDurationInMin.setter
    def DayDurationInMin(self, val): self.DayDurationInMin.set(val)
    @property
    def DayDurationInMs(self):  # type: ()->Int
        return Int(self._node.at("DayDurationInMs"))
    @DayDurationInMs.setter
    def DayDurationInMs(self, val): self.DayDurationInMs.set(val)
    @property
    def FallDurationInDay(self):  # type: ()->Int
        return Int(self._node.at("FallDurationInDay"))
    @FallDurationInDay.setter
    def FallDurationInDay(self, val): self.FallDurationInDay.set(val)
    @property
    def FreezeTime(self):  # type: ()->Bool
        return Bool(self._node.at("FreezeTime"))
    @FreezeTime.setter
    def FreezeTime(self, val): self.FreezeTime.set(val)
    @property
    def SpringDurationInDay(self):  # type: ()->Int
        return Int(self._node.at("SpringDurationInDay"))
    @SpringDurationInDay.setter
    def SpringDurationInDay(self, val): self.SpringDurationInDay.set(val)
    @property
    def StartTime(self):  # type: ()->GameClockManager_GameDate
        return GameClockManager_GameDate(self._node.at("StartTime"))
    @property
    def SummerDurationInDay(self):  # type: ()->Int
        return Int(self._node.at("SummerDurationInDay"))
    @SummerDurationInDay.setter
    def SummerDurationInDay(self, val): self.SummerDurationInDay.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def WinterDurationInDay(self):  # type: ()->Int
        return Int(self._node.at("WinterDurationInDay"))
    @WinterDurationInDay.setter
    def WinterDurationInDay(self, val): self.WinterDurationInDay.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameBiteData(HelperObject):
    schema_name = "GameBiteData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameBiteData
        return GameBiteData(entlib.load_node_file(sourcefile, entlib.get_schema(GameBiteData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameBiteData
        return GameBiteData(entlib.make_node(GameBiteData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BiterShakeStamina(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("BiterShakeStamina"))
    @BiterShakeStamina.setter
    def BiterShakeStamina(self, val): self.BiterShakeStamina.set(val)
    @property
    def BiterStrength(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("BiterStrength"))
    @BiterStrength.setter
    def BiterStrength(self, val): self.BiterStrength.set(val)
    @property
    def BittenResistance(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("BittenResistance"))
    @BittenResistance.setter
    def BittenResistance(self, val): self.BittenResistance.set(val)
    @property
    def BittenShakeExhaustion(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("BittenShakeExhaustion"))
    @BittenShakeExhaustion.setter
    def BittenShakeExhaustion(self, val): self.BittenShakeExhaustion.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameBeamSnapData(HelperObject):
    schema_name = "GameBeamSnapData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameBeamSnapData
        return GameBeamSnapData(entlib.load_node_file(sourcefile, entlib.get_schema(GameBeamSnapData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameBeamSnapData
        return GameBeamSnapData(entlib.make_node(GameBeamSnapData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Max2DDist(self):  # type: ()->Float
        return Float(self._node.at("Max2DDist"))
    @Max2DDist.setter
    def Max2DDist(self, val): self.Max2DDist.set(val)
    @property
    def Max2DDistScoreCoeff(self):  # type: ()->Float
        return Float(self._node.at("Max2DDistScoreCoeff"))
    @Max2DDistScoreCoeff.setter
    def Max2DDistScoreCoeff(self, val): self.Max2DDistScoreCoeff.set(val)
    @property
    def Max3DDistScoreCoeff(self):  # type: ()->Float
        return Float(self._node.at("Max3DDistScoreCoeff"))
    @Max3DDistScoreCoeff.setter
    def Max3DDistScoreCoeff(self, val): self.Max3DDistScoreCoeff.set(val)
    @property
    def MinCameraDepth(self):  # type: ()->Float
        return Float(self._node.at("MinCameraDepth"))
    @MinCameraDepth.setter
    def MinCameraDepth(self, val): self.MinCameraDepth.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameAttackData(HelperObject):
    schema_name = "GameAttackData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameAttackData
        return GameAttackData(entlib.load_node_file(sourcefile, entlib.get_schema(GameAttackData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameAttackData
        return GameAttackData(entlib.make_node(GameAttackData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AggressiveDuration(self):  # type: ()->Float
        return Float(self._node.at("AggressiveDuration"))
    @AggressiveDuration.setter
    def AggressiveDuration(self, val): self.AggressiveDuration.set(val)
    @property
    def AttackDamageValues(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("AttackDamageValues"))
    @AttackDamageValues.setter
    def AttackDamageValues(self, val): self.AttackDamageValues.set(val)
    @property
    def AttackImpactValues(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("AttackImpactValues"))
    @AttackImpactValues.setter
    def AttackImpactValues(self, val): self.AttackImpactValues.set(val)
    @property
    def DashTargetImpulse(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("DashTargetImpulse"))
    @property
    def ShapeAfterGlowTime(self):  # type: ()->Float
        return Float(self._node.at("ShapeAfterGlowTime"))
    @ShapeAfterGlowTime.setter
    def ShapeAfterGlowTime(self, val): self.ShapeAfterGlowTime.set(val)
    @property
    def ShapeAnticipationTime(self):  # type: ()->Float
        return Float(self._node.at("ShapeAnticipationTime"))
    @ShapeAnticipationTime.setter
    def ShapeAnticipationTime(self, val): self.ShapeAnticipationTime.set(val)
    @property
    def ShapePassivedAnticipationTime(self):  # type: ()->Float
        return Float(self._node.at("ShapePassivedAnticipationTime"))
    @ShapePassivedAnticipationTime.setter
    def ShapePassivedAnticipationTime(self, val): self.ShapePassivedAnticipationTime.set(val)
    @property
    def ShapeRadiusScale(self):  # type: ()->Float
        return Float(self._node.at("ShapeRadiusScale"))
    @ShapeRadiusScale.setter
    def ShapeRadiusScale(self, val): self.ShapeRadiusScale.set(val)
    @property
    def SpeedLockedDelayAfterDodge(self):  # type: ()->Float
        return Float(self._node.at("SpeedLockedDelayAfterDodge"))
    @SpeedLockedDelayAfterDodge.setter
    def SpeedLockedDelayAfterDodge(self, val): self.SpeedLockedDelayAfterDodge.set(val)
    @property
    def UseMountAttack(self):  # type: ()->Bool
        return Bool(self._node.at("UseMountAttack"))
    @UseMountAttack.setter
    def UseMountAttack(self, val): self.UseMountAttack.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class GPETypeEnum(Enum):
    BendTree = "BendTree"
    Geyser = "Geyser"
    PossessFlocking = "PossessFlocking"
    GPEType_COUNT = "GPEType_COUNT"


class GPEType(Primitive[GPETypeEnum]):  # Enum
    def __init__(self, node):
        super(GPEType, self).__init__(GPETypeEnum, node)
    schema_name = "GPEType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> GPEType
        return GPEType(node)
    def set(self, val):  # type: (GPETypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class FusionData(HelperObject):
    schema_name = "FusionData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FusionData
        return FusionData(entlib.load_node_file(sourcefile, entlib.get_schema(FusionData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FusionData
        return FusionData(entlib.make_node(FusionData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def IsSoul(self):  # type: ()->Bool
        return Bool(self._node.at("IsSoul"))
    @IsSoul.setter
    def IsSoul(self, val): self.IsSoul.set(val)
    @property
    def SoulEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("SoulEntityRef"))
    @SoulEntityRef.setter
    def SoulEntityRef(self, val): self.SoulEntityRef.set(val)
    @property
    def WarriorDamageFactor(self):  # type: ()->Float
        return Float(self._node.at("WarriorDamageFactor"))
    @WarriorDamageFactor.setter
    def WarriorDamageFactor(self, val): self.WarriorDamageFactor.set(val)
    @property
    def WarriorImpactFactor(self):  # type: ()->Float
        return Float(self._node.at("WarriorImpactFactor"))
    @WarriorImpactFactor.setter
    def WarriorImpactFactor(self, val): self.WarriorImpactFactor.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FreezeData(HelperObject):
    schema_name = "FreezeData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FreezeData
        return FreezeData(entlib.load_node_file(sourcefile, entlib.get_schema(FreezeData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FreezeData
        return FreezeData(entlib.make_node(FreezeData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def deltaTimeFactor(self):  # type: ()->Float
        return Float(self._node.at("deltaTimeFactor"))
    @deltaTimeFactor.setter
    def deltaTimeFactor(self, val): self.deltaTimeFactor.set(val)
    @property
    def eventStringHash(self):  # type: ()->eventStringHash
        return eventStringHash(self._node.at("eventStringHash"))
    @property
    def stateDuration(self):  # type: ()->Float
        return Float(self._node.at("stateDuration"))
    @stateDuration.setter
    def stateDuration(self, val): self.stateDuration.set(val)
    @property
    def transitionInDuration(self):  # type: ()->Float
        return Float(self._node.at("transitionInDuration"))
    @transitionInDuration.setter
    def transitionInDuration(self, val): self.transitionInDuration.set(val)
    @property
    def transitionOutDuration(self):  # type: ()->Float
        return Float(self._node.at("transitionOutDuration"))
    @transitionOutDuration.setter
    def transitionOutDuration(self, val): self.transitionOutDuration.set(val)
    pass


from EntityLibPy import Node

class ProjectileData(HelperObject):
    schema_name = "ProjectileData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ProjectileData
        return ProjectileData(entlib.load_node_file(sourcefile, entlib.get_schema(ProjectileData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ProjectileData
        return ProjectileData(entlib.make_node(ProjectileData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def canCollideWithOtherProjectiles(self):  # type: ()->Bool
        return Bool(self._node.at("canCollideWithOtherProjectiles"))
    @canCollideWithOtherProjectiles.setter
    def canCollideWithOtherProjectiles(self, val): self.canCollideWithOtherProjectiles.set(val)
    @property
    def damages(self):  # type: ()->Float
        return Float(self._node.at("damages"))
    @damages.setter
    def damages(self, val): self.damages.set(val)
    @property
    def deleteAfterPlantTimer(self):  # type: ()->Float
        return Float(self._node.at("deleteAfterPlantTimer"))
    @deleteAfterPlantTimer.setter
    def deleteAfterPlantTimer(self, val): self.deleteAfterPlantTimer.set(val)
    @property
    def destroyOnHit(self):  # type: ()->Bool
        return Bool(self._node.at("destroyOnHit"))
    @destroyOnHit.setter
    def destroyOnHit(self, val): self.destroyOnHit.set(val)
    @property
    def distanceFromBodyAtLaunch(self):  # type: ()->Float
        return Float(self._node.at("distanceFromBodyAtLaunch"))
    @distanceFromBodyAtLaunch.setter
    def distanceFromBodyAtLaunch(self, val): self.distanceFromBodyAtLaunch.set(val)
    @property
    def explodeOnFire(self):  # type: ()->Bool
        return Bool(self._node.at("explodeOnFire"))
    @explodeOnFire.setter
    def explodeOnFire(self, val): self.explodeOnFire.set(val)
    @property
    def explosionShockForce(self):  # type: ()->Float
        return Float(self._node.at("explosionShockForce"))
    @explosionShockForce.setter
    def explosionShockForce(self, val): self.explosionShockForce.set(val)
    @property
    def freezeData(self):  # type: ()->FreezeData
        return FreezeData(self._node.at("freezeData"))
    @property
    def gameEffectOnHit(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("gameEffectOnHit"))
    @gameEffectOnHit.setter
    def gameEffectOnHit(self, val): self.gameEffectOnHit.set(val)
    @property
    def gravity(self):  # type: ()->Float
        return Float(self._node.at("gravity"))
    @gravity.setter
    def gravity(self, val): self.gravity.set(val)
    @property
    def hasNoCollision(self):  # type: ()->Bool
        return Bool(self._node.at("hasNoCollision"))
    @hasNoCollision.setter
    def hasNoCollision(self, val): self.hasNoCollision.set(val)
    @property
    def hitSourceOffset(self):  # type: ()->Vector3
        return Vector3(self._node.at("hitSourceOffset"))
    @hitSourceOffset.setter
    def hitSourceOffset(self, val): self.hitSourceOffset.set(val)
    @property
    def homingInRangeAnticipationDist(self):  # type: ()->Float
        return Float(self._node.at("homingInRangeAnticipationDist"))
    @homingInRangeAnticipationDist.setter
    def homingInRangeAnticipationDist(self, val): self.homingInRangeAnticipationDist.set(val)
    @property
    def homingMaxAngle(self):  # type: ()->Float
        return Float(self._node.at("homingMaxAngle"))
    @homingMaxAngle.setter
    def homingMaxAngle(self, val): self.homingMaxAngle.set(val)
    @property
    def homingMaxFlightTime(self):  # type: ()->Float
        return Float(self._node.at("homingMaxFlightTime"))
    @homingMaxFlightTime.setter
    def homingMaxFlightTime(self, val): self.homingMaxFlightTime.set(val)
    @property
    def homingMaxInFrontAnticipationDist(self):  # type: ()->Float
        return Float(self._node.at("homingMaxInFrontAnticipationDist"))
    @homingMaxInFrontAnticipationDist.setter
    def homingMaxInFrontAnticipationDist(self, val): self.homingMaxInFrontAnticipationDist.set(val)
    @property
    def homingMaxTotalAnticipationDist(self):  # type: ()->Float
        return Float(self._node.at("homingMaxTotalAnticipationDist"))
    @homingMaxTotalAnticipationDist.setter
    def homingMaxTotalAnticipationDist(self, val): self.homingMaxTotalAnticipationDist.set(val)
    @property
    def homingTotalAnticipationRatioSpeeds(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("homingTotalAnticipationRatioSpeeds"))
    @homingTotalAnticipationRatioSpeeds.setter
    def homingTotalAnticipationRatioSpeeds(self, val): self.homingTotalAnticipationRatioSpeeds.set(val)
    @property
    def impact(self):  # type: ()->Float
        return Float(self._node.at("impact"))
    @impact.setter
    def impact(self, val): self.impact.set(val)
    @property
    def isRegenProjectile(self):  # type: ()->Bool
        return Bool(self._node.at("isRegenProjectile"))
    @isRegenProjectile.setter
    def isRegenProjectile(self, val): self.isRegenProjectile.set(val)
    @property
    def isThrowable(self):  # type: ()->Bool
        return Bool(self._node.at("isThrowable"))
    @isThrowable.setter
    def isThrowable(self, val): self.isThrowable.set(val)
    @property
    def launchRotation(self):  # type: ()->Vector3
        return Vector3(self._node.at("launchRotation"))
    @launchRotation.setter
    def launchRotation(self, val): self.launchRotation.set(val)
    @property
    def launchSpeed(self):  # type: ()->Float
        return Float(self._node.at("launchSpeed"))
    @launchSpeed.setter
    def launchSpeed(self, val): self.launchSpeed.set(val)
    @property
    def noiseLevelOnImpact(self):  # type: ()->Float
        return Float(self._node.at("noiseLevelOnImpact"))
    @noiseLevelOnImpact.setter
    def noiseLevelOnImpact(self, val): self.noiseLevelOnImpact.set(val)
    @property
    def shouldBeVisibleBeforeShoot(self):  # type: ()->Bool
        return Bool(self._node.at("shouldBeVisibleBeforeShoot"))
    @shouldBeVisibleBeforeShoot.setter
    def shouldBeVisibleBeforeShoot(self, val): self.shouldBeVisibleBeforeShoot.set(val)
    @property
    def smoothTime(self):  # type: ()->Float
        return Float(self._node.at("smoothTime"))
    @smoothTime.setter
    def smoothTime(self, val): self.smoothTime.set(val)
    @property
    def stopOnWater(self):  # type: ()->Bool
        return Bool(self._node.at("stopOnWater"))
    @stopOnWater.setter
    def stopOnWater(self, val): self.stopOnWater.set(val)
    @property
    def straightDistance(self):  # type: ()->Float
        return Float(self._node.at("straightDistance"))
    @straightDistance.setter
    def straightDistance(self, val): self.straightDistance.set(val)
    @property
    def visibleInFlight(self):  # type: ()->Bool
        return Bool(self._node.at("visibleInFlight"))
    @visibleInFlight.setter
    def visibleInFlight(self, val): self.visibleInFlight.set(val)
    pass


from EntityLibPy import Node

class ForceBlendInReachRequired(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class ForceBlendIn(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class FluidVolumeComponentGD_SimulationParameters(HelperObject):
    schema_name = "FluidVolumeComponentGD::SimulationParameters"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidVolumeComponentGD_SimulationParameters
        return FluidVolumeComponentGD_SimulationParameters(entlib.load_node_file(sourcefile, entlib.get_schema(FluidVolumeComponentGD_SimulationParameters.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidVolumeComponentGD_SimulationParameters
        return FluidVolumeComponentGD_SimulationParameters(entlib.make_node(FluidVolumeComponentGD_SimulationParameters.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Evaporation(self):  # type: ()->Float
        return Float(self._node.at("Evaporation"))
    @Evaporation.setter
    def Evaporation(self, val): self.Evaporation.set(val)
    @property
    def Momentum(self):  # type: ()->Float
        return Float(self._node.at("Momentum"))
    @Momentum.setter
    def Momentum(self, val): self.Momentum.set(val)
    @property
    def Precision(self):  # type: ()->Float
        return Float(self._node.at("Precision"))
    @Precision.setter
    def Precision(self, val): self.Precision.set(val)
    @property
    def Viscosity(self):  # type: ()->Float
        return Float(self._node.at("Viscosity"))
    @Viscosity.setter
    def Viscosity(self, val): self.Viscosity.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidVolumeComponentGD_HeightMapData(HelperObject):
    schema_name = "FluidVolumeComponentGD::HeightMapData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidVolumeComponentGD_HeightMapData
        return FluidVolumeComponentGD_HeightMapData(entlib.load_node_file(sourcefile, entlib.get_schema(FluidVolumeComponentGD_HeightMapData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidVolumeComponentGD_HeightMapData
        return FluidVolumeComponentGD_HeightMapData(entlib.make_node(FluidVolumeComponentGD_HeightMapData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Path(self):  # type: ()->String
        return String(self._node.at("Path"))
    @Path.setter
    def Path(self, val): self.Path.set(val)
    @property
    def TerrainName(self):  # type: ()->String
        return String(self._node.at("TerrainName"))
    @TerrainName.setter
    def TerrainName(self, val): self.TerrainName.set(val)
    @property
    def WorldSize(self):  # type: ()->Vector2
        return Vector2(self._node.at("WorldSize"))
    @WorldSize.setter
    def WorldSize(self, val): self.WorldSize.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidVolumeComponentGD_FluidVolumeData(HelperObject):
    schema_name = "FluidVolumeComponentGD::FluidVolumeData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidVolumeComponentGD_FluidVolumeData
        return FluidVolumeComponentGD_FluidVolumeData(entlib.load_node_file(sourcefile, entlib.get_schema(FluidVolumeComponentGD_FluidVolumeData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidVolumeComponentGD_FluidVolumeData
        return FluidVolumeComponentGD_FluidVolumeData(entlib.make_node(FluidVolumeComponentGD_FluidVolumeData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HeightMap(self):  # type: ()->FluidVolumeComponentGD_HeightMapData
        return FluidVolumeComponentGD_HeightMapData(self._node.at("HeightMap"))
    @property
    def InHeightMapWorldSizeOffset(self):  # type: ()->Vector2
        return Vector2(self._node.at("InHeightMapWorldSizeOffset"))
    @InHeightMapWorldSizeOffset.setter
    def InHeightMapWorldSizeOffset(self, val): self.InHeightMapWorldSizeOffset.set(val)
    @property
    def Material(self):  # type: ()->String
        return String(self._node.at("Material"))
    @Material.setter
    def Material(self, val): self.Material.set(val)
    @property
    def Simulation(self):  # type: ()->FluidVolumeComponentGD_SimulationParameters
        return FluidVolumeComponentGD_SimulationParameters(self._node.at("Simulation"))
    @property
    def WorldSize(self):  # type: ()->Vector2
        return Vector2(self._node.at("WorldSize"))
    @WorldSize.setter
    def WorldSize(self, val): self.WorldSize.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class FluidTypeEnum(Enum):
    water = "water"
    lava = "lava"
    mud = "mud"
    FluidType_COUNT = "FluidType_COUNT"


class FluidType(Primitive[FluidTypeEnum]):  # Enum
    def __init__(self, node):
        super(FluidType, self).__init__(FluidTypeEnum, node)
    schema_name = "FluidType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> FluidType
        return FluidType(node)
    def set(self, val):  # type: (FluidTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class ImmersedBehaviorData(HelperObject):
    schema_name = "ImmersedBehaviorData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ImmersedBehaviorData
        return ImmersedBehaviorData(entlib.load_node_file(sourcefile, entlib.get_schema(ImmersedBehaviorData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ImmersedBehaviorData
        return ImmersedBehaviorData(entlib.make_node(ImmersedBehaviorData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def depth(self):  # type: ()->Float
        return Float(self._node.at("depth"))
    @depth.setter
    def depth(self, val): self.depth.set(val)
    @property
    def depthHysteresisCoeff(self):  # type: ()->Float
        return Float(self._node.at("depthHysteresisCoeff"))
    @depthHysteresisCoeff.setter
    def depthHysteresisCoeff(self, val): self.depthHysteresisCoeff.set(val)
    @property
    def depthMaxRange(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("depthMaxRange"))
    @property
    def flotation(self):  # type: ()->Float
        return Float(self._node.at("flotation"))
    @flotation.setter
    def flotation(self, val): self.flotation.set(val)
    @property
    def isAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("isAllowed"))
    @isAllowed.setter
    def isAllowed(self, val): self.isAllowed.set(val)
    @property
    def minTooDeepPushSpeed(self):  # type: ()->Float
        return Float(self._node.at("minTooDeepPushSpeed"))
    @minTooDeepPushSpeed.setter
    def minTooDeepPushSpeed(self, val): self.minTooDeepPushSpeed.set(val)
    @property
    def reachSurfaceAccelerationCoeff(self):  # type: ()->Float
        return Float(self._node.at("reachSurfaceAccelerationCoeff"))
    @reachSurfaceAccelerationCoeff.setter
    def reachSurfaceAccelerationCoeff(self, val): self.reachSurfaceAccelerationCoeff.set(val)
    @property
    def slowDowns(self):  # type: ()->Map[FluidTypeEnum, ScaleConverter]
        return (lambda n: Map(FluidTypeEnum, ScaleConverter, n))(self._node.at("slowDowns"))
    pass


from EntityLibPy import Node

class FluidData(HelperObject):
    schema_name = "FluidData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidData
        return FluidData(entlib.load_node_file(sourcefile, entlib.get_schema(FluidData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidData
        return FluidData(entlib.make_node(FluidData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def depth(self):  # type: ()->Float
        return Float(self._node.at("depth"))
    @depth.setter
    def depth(self, val): self.depth.set(val)
    @property
    def energy(self):  # type: ()->Float
        return Float(self._node.at("energy"))
    @energy.setter
    def energy(self, val): self.energy.set(val)
    @property
    def flow(self):  # type: ()->Vector2
        return Vector2(self._node.at("flow"))
    @flow.setter
    def flow(self, val): self.flow.set(val)
    @property
    def level(self):  # type: ()->Float
        return Float(self._node.at("level"))
    @level.setter
    def level(self, val): self.level.set(val)
    @property
    def type(self):  # type: ()->FluidType
        return FluidType(self._node.at("type"))
    @type.setter
    def type(self, val): self.type.set(val)
    pass


from EntityLibPy import Node

class FloatRange(HelperObject):
    schema_name = "FloatRange"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FloatRange
        return FloatRange(entlib.load_node_file(sourcefile, entlib.get_schema(FloatRange.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FloatRange
        return FloatRange(entlib.make_node(FloatRange.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MinMax(self):  # type: ()->Vector2
        return Vector2(self._node.at("MinMax"))
    @MinMax.setter
    def MinMax(self, val): self.MinMax.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VegetationPCloudData(HelperObject):
    schema_name = "VegetationPCloudData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VegetationPCloudData
        return VegetationPCloudData(entlib.load_node_file(sourcefile, entlib.get_schema(VegetationPCloudData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VegetationPCloudData
        return VegetationPCloudData(entlib.make_node(VegetationPCloudData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PCloudPath(self):  # type: ()->String
        return String(self._node.at("PCloudPath"))
    @PCloudPath.setter
    def PCloudPath(self, val): self.PCloudPath.set(val)
    @property
    def RegenRange(self):  # type: ()->FloatRange
        return FloatRange(self._node.at("RegenRange"))
    @property
    def UsedVegetations(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("UsedVegetations"))
    @UsedVegetations.setter
    def UsedVegetations(self, val): self.UsedVegetations.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TaggingVegetation(HelperObject):
    schema_name = "TaggingVegetation"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TaggingVegetation
        return TaggingVegetation(entlib.load_node_file(sourcefile, entlib.get_schema(TaggingVegetation.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TaggingVegetation
        return TaggingVegetation(entlib.make_node(TaggingVegetation.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def RegenRange(self):  # type: ()->FloatRange
        return FloatRange(self._node.at("RegenRange"))
    @property
    def RequiredRatio(self):  # type: ()->Float
        return Float(self._node.at("RequiredRatio"))
    @RequiredRatio.setter
    def RequiredRatio(self, val): self.RequiredRatio.set(val)
    @property
    def TaggedState(self):  # type: ()->RegenerationState
        return RegenerationState(self._node.at("TaggedState"))
    @TaggedState.setter
    def TaggedState(self, val): self.TaggedState.set(val)
    @property
    def VegetationTags(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("VegetationTags"))
    @VegetationTags.setter
    def VegetationTags(self, val): self.VegetationTags.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SmallActorSpawnRuleData(HelperObject):
    schema_name = "SmallActorSpawnRuleData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SmallActorSpawnRuleData
        return SmallActorSpawnRuleData(entlib.load_node_file(sourcefile, entlib.get_schema(SmallActorSpawnRuleData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SmallActorSpawnRuleData
        return SmallActorSpawnRuleData(entlib.make_node(SmallActorSpawnRuleData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AudioEventName(self):  # type: ()->String
        return String(self._node.at("AudioEventName"))
    @AudioEventName.setter
    def AudioEventName(self, val): self.AudioEventName.set(val)
    @property
    def AudioEventSoundBank(self):  # type: ()->String
        return String(self._node.at("AudioEventSoundBank"))
    @AudioEventSoundBank.setter
    def AudioEventSoundBank(self, val): self.AudioEventSoundBank.set(val)
    @property
    def DayTimeRange(self):  # type: ()->FloatRange
        return FloatRange(self._node.at("DayTimeRange"))
    @property
    def DistanceRange(self):  # type: ()->FloatRange
        return FloatRange(self._node.at("DistanceRange"))
    @property
    def PrecipitationRange(self):  # type: ()->FloatRange
        return FloatRange(self._node.at("PrecipitationRange"))
    @property
    def RegenRange(self):  # type: ()->FloatRange
        return FloatRange(self._node.at("RegenRange"))
    @property
    def SpawnProbability(self):  # type: ()->Float
        return Float(self._node.at("SpawnProbability"))
    @SpawnProbability.setter
    def SpawnProbability(self, val): self.SpawnProbability.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SmallActorSpawnPointData(HelperObject):
    schema_name = "SmallActorSpawnPointData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SmallActorSpawnPointData
        return SmallActorSpawnPointData(entlib.load_node_file(sourcefile, entlib.get_schema(SmallActorSpawnPointData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SmallActorSpawnPointData
        return SmallActorSpawnPointData(entlib.make_node(SmallActorSpawnPointData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SelectionProbability(self):  # type: ()->Float
        return Float(self._node.at("SelectionProbability"))
    @SelectionProbability.setter
    def SelectionProbability(self, val): self.SelectionProbability.set(val)
    @property
    def SpawnRules(self):  # type: ()->Array[SmallActorSpawnRuleData]
        return (lambda n: Array(SmallActorSpawnRuleData, n))(self._node.at("SpawnRules"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FadeDuration(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class FadeDelay(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class FactionSpecieRelationData(HelperObject):
    schema_name = "FactionSpecieRelationData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FactionSpecieRelationData
        return FactionSpecieRelationData(entlib.load_node_file(sourcefile, entlib.get_schema(FactionSpecieRelationData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FactionSpecieRelationData
        return FactionSpecieRelationData(entlib.make_node(FactionSpecieRelationData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    @property
    def specie(self):  # type: ()->String
        return String(self._node.at("specie"))
    @specie.setter
    def specie(self, val): self.specie.set(val)
    pass


from EntityLibPy import Node

class FactionRelationData(HelperObject):
    schema_name = "FactionRelationData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FactionRelationData
        return FactionRelationData(entlib.load_node_file(sourcefile, entlib.get_schema(FactionRelationData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FactionRelationData
        return FactionRelationData(entlib.make_node(FactionRelationData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def faction1(self):  # type: ()->String
        return String(self._node.at("faction1"))
    @faction1.setter
    def faction1(self, val): self.faction1.set(val)
    @property
    def faction2(self):  # type: ()->String
        return String(self._node.at("faction2"))
    @faction2.setter
    def faction2(self, val): self.faction2.set(val)
    @property
    def relation(self):  # type: ()->String
        return String(self._node.at("relation"))
    @relation.setter
    def relation(self, val): self.relation.set(val)
    pass


from EntityLibPy import Node

class FactionData(HelperObject):
    schema_name = "FactionData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FactionData
        return FactionData(entlib.load_node_file(sourcefile, entlib.get_schema(FactionData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FactionData
        return FactionData(entlib.make_node(FactionData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    pass


from EntityLibPy import Node

class FactionManager(HelperObject):
    schema_name = "FactionManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FactionManager
        return FactionManager(entlib.load_node_file(sourcefile, entlib.get_schema(FactionManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FactionManager
        return FactionManager(entlib.make_node(FactionManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FactionSpecieRelations(self):  # type: ()->Array[FactionSpecieRelationData]
        return (lambda n: Array(FactionSpecieRelationData, n))(self._node.at("FactionSpecieRelations"))
    @property
    def Factions(self):  # type: ()->Array[FactionData]
        return (lambda n: Array(FactionData, n))(self._node.at("Factions"))
    @property
    def Relations(self):  # type: ()->Array[FactionRelationData]
        return (lambda n: Array(FactionRelationData, n))(self._node.at("Relations"))
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EventMusic(HelperObject):
    schema_name = "EventMusic"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EventMusic
        return EventMusic(entlib.load_node_file(sourcefile, entlib.get_schema(EventMusic.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EventMusic
        return EventMusic(entlib.make_node(EventMusic.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PlayerDeathBank(self):  # type: ()->String
        return String(self._node.at("PlayerDeathBank"))
    @PlayerDeathBank.setter
    def PlayerDeathBank(self, val): self.PlayerDeathBank.set(val)
    @property
    def PlayerDeathEvent(self):  # type: ()->String
        return String(self._node.at("PlayerDeathEvent"))
    @PlayerDeathEvent.setter
    def PlayerDeathEvent(self, val): self.PlayerDeathEvent.set(val)
    @property
    def PlayerDeathMusicPriority(self):  # type: ()->Int
        return Int(self._node.at("PlayerDeathMusicPriority"))
    @PlayerDeathMusicPriority.setter
    def PlayerDeathMusicPriority(self, val): self.PlayerDeathMusicPriority.set(val)
    @property
    def PlayerDeathTimeOnStack(self):  # type: ()->Float
        return Float(self._node.at("PlayerDeathTimeOnStack"))
    @PlayerDeathTimeOnStack.setter
    def PlayerDeathTimeOnStack(self, val): self.PlayerDeathTimeOnStack.set(val)
    @property
    def PlayerVictoryBank(self):  # type: ()->String
        return String(self._node.at("PlayerVictoryBank"))
    @PlayerVictoryBank.setter
    def PlayerVictoryBank(self, val): self.PlayerVictoryBank.set(val)
    @property
    def PlayerVictoryEvent(self):  # type: ()->String
        return String(self._node.at("PlayerVictoryEvent"))
    @PlayerVictoryEvent.setter
    def PlayerVictoryEvent(self, val): self.PlayerVictoryEvent.set(val)
    @property
    def ReleaseCreatureBankPrefix(self):  # type: ()->String
        return String(self._node.at("ReleaseCreatureBankPrefix"))
    @ReleaseCreatureBankPrefix.setter
    def ReleaseCreatureBankPrefix(self, val): self.ReleaseCreatureBankPrefix.set(val)
    @property
    def ReleaseCreatureEventPrefix(self):  # type: ()->String
        return String(self._node.at("ReleaseCreatureEventPrefix"))
    @ReleaseCreatureEventPrefix.setter
    def ReleaseCreatureEventPrefix(self, val): self.ReleaseCreatureEventPrefix.set(val)
    @property
    def ReleaseCreatureMusicPriority(self):  # type: ()->Int
        return Int(self._node.at("ReleaseCreatureMusicPriority"))
    @ReleaseCreatureMusicPriority.setter
    def ReleaseCreatureMusicPriority(self, val): self.ReleaseCreatureMusicPriority.set(val)
    @property
    def ReleaseCreatureTimeOnStack(self):  # type: ()->Float
        return Float(self._node.at("ReleaseCreatureTimeOnStack"))
    @ReleaseCreatureTimeOnStack.setter
    def ReleaseCreatureTimeOnStack(self, val): self.ReleaseCreatureTimeOnStack.set(val)
    @property
    def ReleaseSoulBankPrefix(self):  # type: ()->String
        return String(self._node.at("ReleaseSoulBankPrefix"))
    @ReleaseSoulBankPrefix.setter
    def ReleaseSoulBankPrefix(self, val): self.ReleaseSoulBankPrefix.set(val)
    @property
    def ReleaseSoulEventPrefix(self):  # type: ()->String
        return String(self._node.at("ReleaseSoulEventPrefix"))
    @ReleaseSoulEventPrefix.setter
    def ReleaseSoulEventPrefix(self, val): self.ReleaseSoulEventPrefix.set(val)
    @property
    def ReleaseSoulMusicPriority(self):  # type: ()->Int
        return Int(self._node.at("ReleaseSoulMusicPriority"))
    @ReleaseSoulMusicPriority.setter
    def ReleaseSoulMusicPriority(self, val): self.ReleaseSoulMusicPriority.set(val)
    @property
    def ReleaseSoulTimeOnStack(self):  # type: ()->Float
        return Float(self._node.at("ReleaseSoulTimeOnStack"))
    @ReleaseSoulTimeOnStack.setter
    def ReleaseSoulTimeOnStack(self, val): self.ReleaseSoulTimeOnStack.set(val)
    @property
    def SynchronizationMode(self):  # type: ()->SyncTempoMode
        return SyncTempoMode(self._node.at("SynchronizationMode"))
    @SynchronizationMode.setter
    def SynchronizationMode(self, val): self.SynchronizationMode.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MusicManager(HelperObject):
    schema_name = "MusicManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MusicManager
        return MusicManager(entlib.load_node_file(sourcefile, entlib.get_schema(MusicManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MusicManager
        return MusicManager(entlib.make_node(MusicManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Categories(self):  # type: ()->Array[MusicCategory]
        return (lambda n: Array(MusicCategory, n))(self._node.at("Categories"))
    @property
    def EventMusicParam(self):  # type: ()->EventMusic
        return EventMusic(self._node.at("EventMusicParam"))
    @property
    def PlayerMusicTypes(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("PlayerMusicTypes"))
    @PlayerMusicTypes.setter
    def PlayerMusicTypes(self, val): self.PlayerMusicTypes.set(val)
    @property
    def RTPCMixWorldPrefix(self):  # type: ()->String
        return String(self._node.at("RTPCMixWorldPrefix"))
    @RTPCMixWorldPrefix.setter
    def RTPCMixWorldPrefix(self, val): self.RTPCMixWorldPrefix.set(val)
    @property
    def RelationsParamPath(self):  # type: ()->String
        return String(self._node.at("RelationsParamPath"))
    @RelationsParamPath.setter
    def RelationsParamPath(self, val): self.RelationsParamPath.set(val)
    @property
    def ShowdownMusicParam(self):  # type: ()->ShowdownMusic
        return ShowdownMusic(self._node.at("ShowdownMusicParam"))
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def UIMusicParam(self):  # type: ()->UIMusic
        return UIMusic(self._node.at("UIMusicParam"))
    @property
    def WorldMusicTypes(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("WorldMusicTypes"))
    @WorldMusicTypes.setter
    def WorldMusicTypes(self, val): self.WorldMusicTypes.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EventCameraData(HelperObject):
    schema_name = "EventCameraData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EventCameraData
        return EventCameraData(entlib.load_node_file(sourcefile, entlib.get_schema(EventCameraData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EventCameraData
        return EventCameraData(entlib.make_node(EventCameraData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BlendCameraTime(self):  # type: ()->Float
        return Float(self._node.at("BlendCameraTime"))
    @BlendCameraTime.setter
    def BlendCameraTime(self, val): self.BlendCameraTime.set(val)
    @property
    def CameraAimTriggerActor(self):  # type: ()->Bool
        return Bool(self._node.at("CameraAimTriggerActor"))
    @CameraAimTriggerActor.setter
    def CameraAimTriggerActor(self, val): self.CameraAimTriggerActor.set(val)
    @property
    def CameraOffsets(self):  # type: ()->Array[Vector3]
        return (lambda n: Array(Vector3, n))(self._node.at("CameraOffsets"))
    @property
    def DOFFarStart(self):  # type: ()->Float
        return Float(self._node.at("DOFFarStart"))
    @DOFFarStart.setter
    def DOFFarStart(self, val): self.DOFFarStart.set(val)
    @property
    def DOFFarStop(self):  # type: ()->Float
        return Float(self._node.at("DOFFarStop"))
    @DOFFarStop.setter
    def DOFFarStop(self, val): self.DOFFarStop.set(val)
    @property
    def DOFMultiplier(self):  # type: ()->Float
        return Float(self._node.at("DOFMultiplier"))
    @DOFMultiplier.setter
    def DOFMultiplier(self, val): self.DOFMultiplier.set(val)
    @property
    def DOFNearStart(self):  # type: ()->Float
        return Float(self._node.at("DOFNearStart"))
    @DOFNearStart.setter
    def DOFNearStart(self, val): self.DOFNearStart.set(val)
    @property
    def DOFNearStop(self):  # type: ()->Float
        return Float(self._node.at("DOFNearStop"))
    @DOFNearStop.setter
    def DOFNearStop(self, val): self.DOFNearStop.set(val)
    @property
    def DOFRelativeTarget(self):  # type: ()->Bool
        return Bool(self._node.at("DOFRelativeTarget"))
    @DOFRelativeTarget.setter
    def DOFRelativeTarget(self, val): self.DOFRelativeTarget.set(val)
    @property
    def EventCameraTime(self):  # type: ()->Float
        return Float(self._node.at("EventCameraTime"))
    @EventCameraTime.setter
    def EventCameraTime(self, val): self.EventCameraTime.set(val)
    @property
    def FOV(self):  # type: ()->Float
        return Float(self._node.at("FOV"))
    @FOV.setter
    def FOV(self, val): self.FOV.set(val)
    @property
    def FixedCam(self):  # type: ()->Bool
        return Bool(self._node.at("FixedCam"))
    @FixedCam.setter
    def FixedCam(self, val): self.FixedCam.set(val)
    @property
    def FollowCam(self):  # type: ()->Bool
        return Bool(self._node.at("FollowCam"))
    @FollowCam.setter
    def FollowCam(self, val): self.FollowCam.set(val)
    @property
    def FollowTarget(self):  # type: ()->Bool
        return Bool(self._node.at("FollowTarget"))
    @FollowTarget.setter
    def FollowTarget(self, val): self.FollowTarget.set(val)
    @property
    def OffsetsBlendTime(self):  # type: ()->Float
        return Float(self._node.at("OffsetsBlendTime"))
    @OffsetsBlendTime.setter
    def OffsetsBlendTime(self, val): self.OffsetsBlendTime.set(val)
    @property
    def PositionsAngularBlend(self):  # type: ()->Bool
        return Bool(self._node.at("PositionsAngularBlend"))
    @PositionsAngularBlend.setter
    def PositionsAngularBlend(self, val): self.PositionsAngularBlend.set(val)
    @property
    def PositionsBlendTime(self):  # type: ()->Float
        return Float(self._node.at("PositionsBlendTime"))
    @PositionsBlendTime.setter
    def PositionsBlendTime(self, val): self.PositionsBlendTime.set(val)
    @property
    def TargetOffsets(self):  # type: ()->Array[Vector3]
        return (lambda n: Array(Vector3, n))(self._node.at("TargetOffsets"))
    @property
    def UseDOF(self):  # type: ()->Bool
        return Bool(self._node.at("UseDOF"))
    @UseDOF.setter
    def UseDOF(self, val): self.UseDOF.set(val)
    @property
    def UseOffsetsSpline(self):  # type: ()->Bool
        return Bool(self._node.at("UseOffsetsSpline"))
    @UseOffsetsSpline.setter
    def UseOffsetsSpline(self, val): self.UseOffsetsSpline.set(val)
    @property
    def UsePositionsSpline(self):  # type: ()->Bool
        return Bool(self._node.at("UsePositionsSpline"))
    @UsePositionsSpline.setter
    def UsePositionsSpline(self, val): self.UsePositionsSpline.set(val)
    @property
    def UseTriggerActorPosition(self):  # type: ()->Bool
        return Bool(self._node.at("UseTriggerActorPosition"))
    @UseTriggerActorPosition.setter
    def UseTriggerActorPosition(self, val): self.UseTriggerActorPosition.set(val)
    @property
    def UseTriggerActorSight(self):  # type: ()->Bool
        return Bool(self._node.at("UseTriggerActorSight"))
    @UseTriggerActorSight.setter
    def UseTriggerActorSight(self, val): self.UseTriggerActorSight.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSet(HelperObject):
    schema_name = "EntityStateSet"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSet
        return EntityStateSet(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSet.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSet
        return EntityStateSet(entlib.make_node(EntityStateSet.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityStates(self):  # type: ()->Array[ResponsiblePointer_ActorState_]
        return (lambda n: Array(ResponsiblePointer_ActorState_, n))(self._node.at("EntityStates"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PlayerState(HelperObject):
    schema_name = "PlayerState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PlayerState
        return PlayerState(entlib.load_node_file(sourcefile, entlib.get_schema(PlayerState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PlayerState
        return PlayerState(entlib.make_node(PlayerState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActiveScene(self):  # type: ()->String
        return String(self._node.at("ActiveScene"))
    @ActiveScene.setter
    def ActiveScene(self, val): self.ActiveScene.set(val)
    @property
    def DynamicStates(self):  # type: ()->Map[str, Map[str, EntityStateSet]]
        return (lambda n: Map(str, (lambda n: Map(str, EntityStateSet, n)), n))(self._node.at("DynamicStates"))
    @property
    def GameInfoDB(self):  # type: ()->GameInfoDB
        return GameInfoDB(self._node.at("GameInfoDB"))
    @property
    def MainScene(self):  # type: ()->String
        return String(self._node.at("MainScene"))
    @MainScene.setter
    def MainScene(self, val): self.MainScene.set(val)
    @property
    def Version(self):  # type: ()->Int
        return Int(self._node.at("Version"))
    @Version.setter
    def Version(self, val): self.Version.set(val)
    @property
    def WEDMode(self):  # type: ()->Bool
        return Bool(self._node.at("WEDMode"))
    @WEDMode.setter
    def WEDMode(self, val): self.WEDMode.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateRevive_Inputs(HelperObject):
    schema_name = "EntityStateRevive::Inputs"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateRevive_Inputs
        return EntityStateRevive_Inputs(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateRevive_Inputs.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateRevive_Inputs
        return EntityStateRevive_Inputs(entlib.make_node(EntityStateRevive_Inputs.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Life(self):  # type: ()->Float
        return Float(self._node.at("Life"))
    @Life.setter
    def Life(self, val): self.Life.set(val)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateCreatureHatching_Inputs(HelperObject):
    schema_name = "EntityStateCreatureHatching::Inputs"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateCreatureHatching_Inputs
        return EntityStateCreatureHatching_Inputs(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateCreatureHatching_Inputs.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateCreatureHatching_Inputs
        return EntityStateCreatureHatching_Inputs(entlib.make_node(EntityStateCreatureHatching_Inputs.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ForceSuccess(self):  # type: ()->Bool
        return Bool(self._node.at("ForceSuccess"))
    @ForceSuccess.setter
    def ForceSuccess(self, val): self.ForceSuccess.set(val)
    @property
    def MinReviveRatio(self):  # type: ()->MinReviveRatio
        return MinReviveRatio(self._node.at("MinReviveRatio"))
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityLODData(HelperObject):
    schema_name = "EntityLODData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityLODData
        return EntityLODData(entlib.load_node_file(sourcefile, entlib.get_schema(EntityLODData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityLODData
        return EntityLODData(entlib.make_node(EntityLODData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("EntityRef"))
    @EntityRef.setter
    def EntityRef(self, val): self.EntityRef.set(val)
    @property
    def MaxDist(self):  # type: ()->Float
        return Float(self._node.at("MaxDist"))
    @MaxDist.setter
    def MaxDist(self, val): self.MaxDist.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegenData(HelperObject):
    schema_name = "RegenData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenData
        return RegenData(entlib.load_node_file(sourcefile, entlib.get_schema(RegenData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenData
        return RegenData(entlib.make_node(RegenData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def LODData(self):  # type: ()->Array[EntityLODData]
        return (lambda n: Array(EntityLODData, n))(self._node.at("LODData"))
    @property
    def RegenRange(self):  # type: ()->FloatRange
        return FloatRange(self._node.at("RegenRange"))
    @property
    def RegenRangeHysteresis(self):  # type: ()->Float
        return Float(self._node.at("RegenRangeHysteresis"))
    @RegenRangeHysteresis.setter
    def RegenRangeHysteresis(self, val): self.RegenRangeHysteresis.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityID(HelperObject):

    pass


from EntityLibPy import Node

class Energy(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class Enabled(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class EDITOR_Mesh(HelperObject):
    schema_name = "EDITOR_Mesh"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EDITOR_Mesh
        return EDITOR_Mesh(entlib.load_node_file(sourcefile, entlib.get_schema(EDITOR_Mesh.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EDITOR_Mesh
        return EDITOR_Mesh(entlib.make_node(EDITOR_Mesh.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def id(self):  # type: ()->Int
        return Int(self._node.at("id"))
    @id.setter
    def id(self, val): self.id.set(val)
    @property
    def path(self):  # type: ()->String
        return String(self._node.at("path"))
    @path.setter
    def path(self, val): self.path.set(val)
    pass


from EntityLibPy import Node

class EDITOR_LODsItem(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def lod(self):  # type: ()->Int
        return Int(self._node.at("lod"))
    @lod.setter
    def lod(self, val): self.lod.set(val)
    @property
    def wvis(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("wvis"))
    @wvis.setter
    def wvis(self, val): self.wvis.set(val)
    pass


from EntityLibPy import Node

class DisplaceNoiseListItem(HelperObject):

    @property
    def DisplaceDistance(self):  # type: ()->Float
        return Float(self._node.at("DisplaceDistance"))
    @DisplaceDistance.setter
    def DisplaceDistance(self, val): self.DisplaceDistance.set(val)
    @property
    def LuminanceCenter(self):  # type: ()->Float
        return Float(self._node.at("LuminanceCenter"))
    @LuminanceCenter.setter
    def LuminanceCenter(self, val): self.LuminanceCenter.set(val)
    @property
    def MapChannel(self):  # type: ()->Int
        return Int(self._node.at("MapChannel"))
    @MapChannel.setter
    def MapChannel(self, val): self.MapChannel.set(val)
    @property
    def MotifName(self):  # type: ()->String
        return String(self._node.at("MotifName"))
    @MotifName.setter
    def MotifName(self, val): self.MotifName.set(val)
    @property
    def MotifOffsetX(self):  # type: ()->Float
        return Float(self._node.at("MotifOffsetX"))
    @MotifOffsetX.setter
    def MotifOffsetX(self, val): self.MotifOffsetX.set(val)
    @property
    def MotifOffsetY(self):  # type: ()->Float
        return Float(self._node.at("MotifOffsetY"))
    @MotifOffsetY.setter
    def MotifOffsetY(self, val): self.MotifOffsetY.set(val)
    @property
    def MotifRotationZ(self):  # type: ()->Float
        return Float(self._node.at("MotifRotationZ"))
    @MotifRotationZ.setter
    def MotifRotationZ(self, val): self.MotifRotationZ.set(val)
    @property
    def MotifSizeX(self):  # type: ()->Float
        return Float(self._node.at("MotifSizeX"))
    @MotifSizeX.setter
    def MotifSizeX(self, val): self.MotifSizeX.set(val)
    @property
    def MotifSizeY(self):  # type: ()->Float
        return Float(self._node.at("MotifSizeY"))
    @MotifSizeY.setter
    def MotifSizeY(self, val): self.MotifSizeY.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class DisableFluid(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class DeltaTimeFactor(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Float
        return Float(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class DebugManager_PlayerState(HelperObject):

    pass


from EntityLibPy import Node

class DebugManager_ComponentID(HelperObject):
    schema_name = "DebugManager::ComponentID"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DebugManager_ComponentID
        return DebugManager_ComponentID(entlib.load_node_file(sourcefile, entlib.get_schema(DebugManager_ComponentID.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DebugManager_ComponentID
        return DebugManager_ComponentID(entlib.make_node(DebugManager_ComponentID.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ComponentNameID(self):  # type: ()->String
        return String(self._node.at("ComponentNameID"))
    @ComponentNameID.setter
    def ComponentNameID(self, val): self.ComponentNameID.set(val)
    @property
    def EntityID(self):  # type: ()->EntityID
        return EntityID(self._node.at("EntityID"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class DebugDisplayFlags(HelperObject):
    schema_name = "DebugDisplayFlags"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DebugDisplayFlags
        return DebugDisplayFlags(entlib.load_node_file(sourcefile, entlib.get_schema(DebugDisplayFlags.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DebugDisplayFlags
        return DebugDisplayFlags(entlib.make_node(DebugDisplayFlags.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Activate(self):  # type: ()->Bool
        return Bool(self._node.at("Activate"))
    @Activate.setter
    def Activate(self, val): self.Activate.set(val)
    @property
    def ActiveRTPCHunt(self):  # type: ()->Bool
        return Bool(self._node.at("ActiveRTPCHunt"))
    @ActiveRTPCHunt.setter
    def ActiveRTPCHunt(self, val): self.ActiveRTPCHunt.set(val)
    @property
    def ActiveWeatherSystem(self):  # type: ()->Bool
        return Bool(self._node.at("ActiveWeatherSystem"))
    @ActiveWeatherSystem.setter
    def ActiveWeatherSystem(self, val): self.ActiveWeatherSystem.set(val)
    @property
    def AssertOnPestoErrors(self):  # type: ()->Bool
        return Bool(self._node.at("AssertOnPestoErrors"))
    @AssertOnPestoErrors.setter
    def AssertOnPestoErrors(self, val): self.AssertOnPestoErrors.set(val)
    @property
    def DisplayActorStateArbiter(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayActorStateArbiter"))
    @DisplayActorStateArbiter.setter
    def DisplayActorStateArbiter(self, val): self.DisplayActorStateArbiter.set(val)
    @property
    def DisplayAnalytics(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAnalytics"))
    @DisplayAnalytics.setter
    def DisplayAnalytics(self, val): self.DisplayAnalytics.set(val)
    @property
    def DisplayAutonomousClan(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousClan"))
    @DisplayAutonomousClan.setter
    def DisplayAutonomousClan(self, val): self.DisplayAutonomousClan.set(val)
    @property
    def DisplayAutonomousCreatureList(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousCreatureList"))
    @DisplayAutonomousCreatureList.setter
    def DisplayAutonomousCreatureList(self, val): self.DisplayAutonomousCreatureList.set(val)
    @property
    def DisplayAutonomousDecision(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousDecision"))
    @DisplayAutonomousDecision.setter
    def DisplayAutonomousDecision(self, val): self.DisplayAutonomousDecision.set(val)
    @property
    def DisplayAutonomousEntityList(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousEntityList"))
    @DisplayAutonomousEntityList.setter
    def DisplayAutonomousEntityList(self, val): self.DisplayAutonomousEntityList.set(val)
    @property
    def DisplayAutonomousInfo(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousInfo"))
    @DisplayAutonomousInfo.setter
    def DisplayAutonomousInfo(self, val): self.DisplayAutonomousInfo.set(val)
    @property
    def DisplayAutonomousListClan(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousListClan"))
    @DisplayAutonomousListClan.setter
    def DisplayAutonomousListClan(self, val): self.DisplayAutonomousListClan.set(val)
    @property
    def DisplayAutonomousLogMessage(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousLogMessage"))
    @DisplayAutonomousLogMessage.setter
    def DisplayAutonomousLogMessage(self, val): self.DisplayAutonomousLogMessage.set(val)
    @property
    def DisplayAutonomousMaster(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousMaster"))
    @DisplayAutonomousMaster.setter
    def DisplayAutonomousMaster(self, val): self.DisplayAutonomousMaster.set(val)
    @property
    def DisplayAutonomousPhysical(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousPhysical"))
    @DisplayAutonomousPhysical.setter
    def DisplayAutonomousPhysical(self, val): self.DisplayAutonomousPhysical.set(val)
    @property
    def DisplayAutonomousPosition(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousPosition"))
    @DisplayAutonomousPosition.setter
    def DisplayAutonomousPosition(self, val): self.DisplayAutonomousPosition.set(val)
    @property
    def DisplayAutonomousPredator(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousPredator"))
    @DisplayAutonomousPredator.setter
    def DisplayAutonomousPredator(self, val): self.DisplayAutonomousPredator.set(val)
    @property
    def DisplayAutonomousPsychological(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousPsychological"))
    @DisplayAutonomousPsychological.setter
    def DisplayAutonomousPsychological(self, val): self.DisplayAutonomousPsychological.set(val)
    @property
    def DisplayAutonomousSound(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousSound"))
    @DisplayAutonomousSound.setter
    def DisplayAutonomousSound(self, val): self.DisplayAutonomousSound.set(val)
    @property
    def DisplayAutonomousUnlocked(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayAutonomousUnlocked"))
    @DisplayAutonomousUnlocked.setter
    def DisplayAutonomousUnlocked(self, val): self.DisplayAutonomousUnlocked.set(val)
    @property
    def DisplayBehavior(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayBehavior"))
    @DisplayBehavior.setter
    def DisplayBehavior(self, val): self.DisplayBehavior.set(val)
    @property
    def DisplayBrainMonitor(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayBrainMonitor"))
    @DisplayBrainMonitor.setter
    def DisplayBrainMonitor(self, val): self.DisplayBrainMonitor.set(val)
    @property
    def DisplayCPU(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCPU"))
    @DisplayCPU.setter
    def DisplayCPU(self, val): self.DisplayCPU.set(val)
    @property
    def DisplayCompass(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCompass"))
    @DisplayCompass.setter
    def DisplayCompass(self, val): self.DisplayCompass.set(val)
    @property
    def DisplayComponentCacheDebugger(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayComponentCacheDebugger"))
    @DisplayComponentCacheDebugger.setter
    def DisplayComponentCacheDebugger(self, val): self.DisplayComponentCacheDebugger.set(val)
    @property
    def DisplayComponentsDependencies(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayComponentsDependencies"))
    @DisplayComponentsDependencies.setter
    def DisplayComponentsDependencies(self, val): self.DisplayComponentsDependencies.set(val)
    @property
    def DisplayConnectionWarning(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayConnectionWarning"))
    @DisplayConnectionWarning.setter
    def DisplayConnectionWarning(self, val): self.DisplayConnectionWarning.set(val)
    @property
    def DisplayCreatureListAggressive(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListAggressive"))
    @DisplayCreatureListAggressive.setter
    def DisplayCreatureListAggressive(self, val): self.DisplayCreatureListAggressive.set(val)
    @property
    def DisplayCreatureListDanger(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListDanger"))
    @DisplayCreatureListDanger.setter
    def DisplayCreatureListDanger(self, val): self.DisplayCreatureListDanger.set(val)
    @property
    def DisplayCreatureListDetection(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListDetection"))
    @DisplayCreatureListDetection.setter
    def DisplayCreatureListDetection(self, val): self.DisplayCreatureListDetection.set(val)
    @property
    def DisplayCreatureListDistance(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListDistance"))
    @DisplayCreatureListDistance.setter
    def DisplayCreatureListDistance(self, val): self.DisplayCreatureListDistance.set(val)
    @property
    def DisplayCreatureListHelp(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListHelp"))
    @DisplayCreatureListHelp.setter
    def DisplayCreatureListHelp(self, val): self.DisplayCreatureListHelp.set(val)
    @property
    def DisplayCreatureListPresence(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListPresence"))
    @DisplayCreatureListPresence.setter
    def DisplayCreatureListPresence(self, val): self.DisplayCreatureListPresence.set(val)
    @property
    def DisplayCreatureListSpecie(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListSpecie"))
    @DisplayCreatureListSpecie.setter
    def DisplayCreatureListSpecie(self, val): self.DisplayCreatureListSpecie.set(val)
    @property
    def DisplayCreatureListState(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListState"))
    @DisplayCreatureListState.setter
    def DisplayCreatureListState(self, val): self.DisplayCreatureListState.set(val)
    @property
    def DisplayCreatureListThreat(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListThreat"))
    @DisplayCreatureListThreat.setter
    def DisplayCreatureListThreat(self, val): self.DisplayCreatureListThreat.set(val)
    @property
    def DisplayCreatureListTrust(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListTrust"))
    @DisplayCreatureListTrust.setter
    def DisplayCreatureListTrust(self, val): self.DisplayCreatureListTrust.set(val)
    @property
    def DisplayCreatureListVisibility(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayCreatureListVisibility"))
    @DisplayCreatureListVisibility.setter
    def DisplayCreatureListVisibility(self, val): self.DisplayCreatureListVisibility.set(val)
    @property
    def DisplayDecalsDebug(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayDecalsDebug"))
    @DisplayDecalsDebug.setter
    def DisplayDecalsDebug(self, val): self.DisplayDecalsDebug.set(val)
    @property
    def DisplayDistanceTool(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayDistanceTool"))
    @DisplayDistanceTool.setter
    def DisplayDistanceTool(self, val): self.DisplayDistanceTool.set(val)
    @property
    def DisplayDrawDebugFromLastSteppedFrame(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayDrawDebugFromLastSteppedFrame"))
    @DisplayDrawDebugFromLastSteppedFrame.setter
    def DisplayDrawDebugFromLastSteppedFrame(self, val): self.DisplayDrawDebugFromLastSteppedFrame.set(val)
    @property
    def DisplayEnergyPools(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayEnergyPools"))
    @DisplayEnergyPools.setter
    def DisplayEnergyPools(self, val): self.DisplayEnergyPools.set(val)
    @property
    def DisplayEntities(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayEntities"))
    @DisplayEntities.setter
    def DisplayEntities(self, val): self.DisplayEntities.set(val)
    @property
    def DisplayEntitiesWithErrors(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayEntitiesWithErrors"))
    @DisplayEntitiesWithErrors.setter
    def DisplayEntitiesWithErrors(self, val): self.DisplayEntitiesWithErrors.set(val)
    @property
    def DisplayEntityClan(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayEntityClan"))
    @DisplayEntityClan.setter
    def DisplayEntityClan(self, val): self.DisplayEntityClan.set(val)
    @property
    def DisplayEntityDistanceMax(self):  # type: ()->Float
        return Float(self._node.at("DisplayEntityDistanceMax"))
    @DisplayEntityDistanceMax.setter
    def DisplayEntityDistanceMax(self, val): self.DisplayEntityDistanceMax.set(val)
    @property
    def DisplayFPS(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayFPS"))
    @DisplayFPS.setter
    def DisplayFPS(self, val): self.DisplayFPS.set(val)
    @property
    def DisplayGameMaster(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayGameMaster"))
    @DisplayGameMaster.setter
    def DisplayGameMaster(self, val): self.DisplayGameMaster.set(val)
    @property
    def DisplayGamepadStateViewer(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayGamepadStateViewer"))
    @DisplayGamepadStateViewer.setter
    def DisplayGamepadStateViewer(self, val): self.DisplayGamepadStateViewer.set(val)
    @property
    def DisplayGestureMenu(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayGestureMenu"))
    @DisplayGestureMenu.setter
    def DisplayGestureMenu(self, val): self.DisplayGestureMenu.set(val)
    @property
    def DisplayGoToPosition(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayGoToPosition"))
    @DisplayGoToPosition.setter
    def DisplayGoToPosition(self, val): self.DisplayGoToPosition.set(val)
    @property
    def DisplayHeightProbe(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayHeightProbe"))
    @DisplayHeightProbe.setter
    def DisplayHeightProbe(self, val): self.DisplayHeightProbe.set(val)
    @property
    def DisplayHitDebugger(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayHitDebugger"))
    @DisplayHitDebugger.setter
    def DisplayHitDebugger(self, val): self.DisplayHitDebugger.set(val)
    @property
    def DisplayHotSpot(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayHotSpot"))
    @DisplayHotSpot.setter
    def DisplayHotSpot(self, val): self.DisplayHotSpot.set(val)
    @property
    def DisplayHotspotDistanceMax(self):  # type: ()->Float
        return Float(self._node.at("DisplayHotspotDistanceMax"))
    @DisplayHotspotDistanceMax.setter
    def DisplayHotspotDistanceMax(self, val): self.DisplayHotspotDistanceMax.set(val)
    @property
    def DisplayManagersInfos(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayManagersInfos"))
    @DisplayManagersInfos.setter
    def DisplayManagersInfos(self, val): self.DisplayManagersInfos.set(val)
    @property
    def DisplayMeshRasterizerInfos(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayMeshRasterizerInfos"))
    @DisplayMeshRasterizerInfos.setter
    def DisplayMeshRasterizerInfos(self, val): self.DisplayMeshRasterizerInfos.set(val)
    @property
    def DisplayObjectFilterHistory(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayObjectFilterHistory"))
    @DisplayObjectFilterHistory.setter
    def DisplayObjectFilterHistory(self, val): self.DisplayObjectFilterHistory.set(val)
    @property
    def DisplayOrder(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayOrder"))
    @DisplayOrder.setter
    def DisplayOrder(self, val): self.DisplayOrder.set(val)
    @property
    def DisplayPadEmulator(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPadEmulator"))
    @DisplayPadEmulator.setter
    def DisplayPadEmulator(self, val): self.DisplayPadEmulator.set(val)
    @property
    def DisplayParticleTool(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayParticleTool"))
    @DisplayParticleTool.setter
    def DisplayParticleTool(self, val): self.DisplayParticleTool.set(val)
    @property
    def DisplayPathSystem(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPathSystem"))
    @DisplayPathSystem.setter
    def DisplayPathSystem(self, val): self.DisplayPathSystem.set(val)
    @property
    def DisplayPesto(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPesto"))
    @DisplayPesto.setter
    def DisplayPesto(self, val): self.DisplayPesto.set(val)
    @property
    def DisplayPestoCPUMarkers(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPestoCPUMarkers"))
    @DisplayPestoCPUMarkers.setter
    def DisplayPestoCPUMarkers(self, val): self.DisplayPestoCPUMarkers.set(val)
    @property
    def DisplayPhysicsPicker(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPhysicsPicker"))
    @DisplayPhysicsPicker.setter
    def DisplayPhysicsPicker(self, val): self.DisplayPhysicsPicker.set(val)
    @property
    def DisplayPivot(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPivot"))
    @DisplayPivot.setter
    def DisplayPivot(self, val): self.DisplayPivot.set(val)
    @property
    def DisplayPlayerInteraction(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPlayerInteraction"))
    @DisplayPlayerInteraction.setter
    def DisplayPlayerInteraction(self, val): self.DisplayPlayerInteraction.set(val)
    @property
    def DisplayPositionPicker(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPositionPicker"))
    @DisplayPositionPicker.setter
    def DisplayPositionPicker(self, val): self.DisplayPositionPicker.set(val)
    @property
    def DisplayProjectileThrower(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayProjectileThrower"))
    @DisplayProjectileThrower.setter
    def DisplayProjectileThrower(self, val): self.DisplayProjectileThrower.set(val)
    @property
    def DisplayPseudos(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayPseudos"))
    @DisplayPseudos.setter
    def DisplayPseudos(self, val): self.DisplayPseudos.set(val)
    @property
    def DisplayQualityManager(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayQualityManager"))
    @DisplayQualityManager.setter
    def DisplayQualityManager(self, val): self.DisplayQualityManager.set(val)
    @property
    def DisplayRPCCalls(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayRPCCalls"))
    @DisplayRPCCalls.setter
    def DisplayRPCCalls(self, val): self.DisplayRPCCalls.set(val)
    @property
    def DisplayReloadNotifications(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayReloadNotifications"))
    @DisplayReloadNotifications.setter
    def DisplayReloadNotifications(self, val): self.DisplayReloadNotifications.set(val)
    @property
    def DisplaySelectedPestoEntity(self):  # type: ()->Bool
        return Bool(self._node.at("DisplaySelectedPestoEntity"))
    @DisplaySelectedPestoEntity.setter
    def DisplaySelectedPestoEntity(self, val): self.DisplaySelectedPestoEntity.set(val)
    @property
    def DisplaySplinePilot(self):  # type: ()->Bool
        return Bool(self._node.at("DisplaySplinePilot"))
    @DisplaySplinePilot.setter
    def DisplaySplinePilot(self, val): self.DisplaySplinePilot.set(val)
    @property
    def DisplaySplinePilotTool(self):  # type: ()->Bool
        return Bool(self._node.at("DisplaySplinePilotTool"))
    @DisplaySplinePilotTool.setter
    def DisplaySplinePilotTool(self, val): self.DisplaySplinePilotTool.set(val)
    @property
    def DisplayStringHashTranslator(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayStringHashTranslator"))
    @DisplayStringHashTranslator.setter
    def DisplayStringHashTranslator(self, val): self.DisplayStringHashTranslator.set(val)
    @property
    def DisplayTimer(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayTimer"))
    @DisplayTimer.setter
    def DisplayTimer(self, val): self.DisplayTimer.set(val)
    @property
    def DisplayTreesStates(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayTreesStates"))
    @DisplayTreesStates.setter
    def DisplayTreesStates(self, val): self.DisplayTreesStates.set(val)
    @property
    def EditorGuiAllowsComponentsSplitView(self):  # type: ()->Bool
        return Bool(self._node.at("EditorGuiAllowsComponentsSplitView"))
    @EditorGuiAllowsComponentsSplitView.setter
    def EditorGuiAllowsComponentsSplitView(self, val): self.EditorGuiAllowsComponentsSplitView.set(val)
    @property
    def EditorGuiListenGamepad(self):  # type: ()->Bool
        return Bool(self._node.at("EditorGuiListenGamepad"))
    @EditorGuiListenGamepad.setter
    def EditorGuiListenGamepad(self, val): self.EditorGuiListenGamepad.set(val)
    @property
    def EditorGuiListenKeyboard(self):  # type: ()->Bool
        return Bool(self._node.at("EditorGuiListenKeyboard"))
    @EditorGuiListenKeyboard.setter
    def EditorGuiListenKeyboard(self, val): self.EditorGuiListenKeyboard.set(val)
    @property
    def OpenEntityWindows(self):  # type: ()->Bool
        return Bool(self._node.at("OpenEntityWindows"))
    @OpenEntityWindows.setter
    def OpenEntityWindows(self, val): self.OpenEntityWindows.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class DebugManager(HelperObject):
    schema_name = "DebugManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DebugManager
        return DebugManager(entlib.load_node_file(sourcefile, entlib.get_schema(DebugManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DebugManager
        return DebugManager(entlib.make_node(DebugManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CheatCodes(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("CheatCodes"))
    @CheatCodes.setter
    def CheatCodes(self, val): self.CheatCodes.set(val)
    @property
    def DisplayComponentType(self):  # type: ()->Map[str, Bool]
        return (lambda n: Map(str, Bool, n))(self._node.at("DisplayComponentType"))
    @property
    def DisplayManagerWindow(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayManagerWindow"))
    @DisplayManagerWindow.setter
    def DisplayManagerWindow(self, val): self.DisplayManagerWindow.set(val)
    @property
    def DisplayNodeType(self):  # type: ()->Map[str, Bool]
        return (lambda n: Map(str, Bool, n))(self._node.at("DisplayNodeType"))
    @property
    def DisplayNodeTypeWithAlwaysAutoResize(self):  # type: ()->Map[str, Bool]
        return (lambda n: Map(str, Bool, n))(self._node.at("DisplayNodeTypeWithAlwaysAutoResize"))
    @property
    def DisplayResourceWindow(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayResourceWindow"))
    @DisplayResourceWindow.setter
    def DisplayResourceWindow(self, val): self.DisplayResourceWindow.set(val)
    @property
    def Flags(self):  # type: ()->DebugDisplayFlags
        return DebugDisplayFlags(self._node.at("Flags"))
    @property
    def Online(self):  # type: ()->Online
        return Online(self._node.at("Online"))
    @property
    def PlayerState(self):  # type: ()->DebugManager_PlayerState
        return DebugManager_PlayerState(self._node.at("PlayerState"))
    @property
    def StreamPublicationCommand(self):  # type: ()->String
        return String(self._node.at("StreamPublicationCommand"))
    @StreamPublicationCommand.setter
    def StreamPublicationCommand(self, val): self.StreamPublicationCommand.set(val)
    @property
    def StreamingServerIP(self):  # type: ()->String
        return String(self._node.at("StreamingServerIP"))
    @StreamingServerIP.setter
    def StreamingServerIP(self, val): self.StreamingServerIP.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def TrackedEntities(self):  # type: ()->Array[TrackedEntitiesItem]
        return (lambda n: Array(TrackedEntitiesItem, n))(self._node.at("TrackedEntities"))
    @property
    def TrackedEntitiesSplitComponents(self):  # type: ()->Array[DebugManager_ComponentID]
        return (lambda n: Array(DebugManager_ComponentID, n))(self._node.at("TrackedEntitiesSplitComponents"))
    @property
    def WipAnimation(self):  # type: ()->Bool
        return Bool(self._node.at("WipAnimation"))
    @WipAnimation.setter
    def WipAnimation(self, val): self.WipAnimation.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class DamagesInstant(HelperObject):
    schema_name = "DamagesInstant"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DamagesInstant
        return DamagesInstant(entlib.load_node_file(sourcefile, entlib.get_schema(DamagesInstant.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DamagesInstant
        return DamagesInstant(entlib.make_node(DamagesInstant.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def damage(self):  # type: ()->Float
        return Float(self._node.at("damage"))
    @damage.setter
    def damage(self, val): self.damage.set(val)
    @property
    def impact(self):  # type: ()->Float
        return Float(self._node.at("impact"))
    @impact.setter
    def impact(self, val): self.impact.set(val)
    pass


from EntityLibPy import Node

class CreatureTypeData(HelperObject):
    schema_name = "CreatureTypeData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureTypeData
        return CreatureTypeData(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureTypeData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureTypeData
        return CreatureTypeData(entlib.make_node(CreatureTypeData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    @property
    def value(self):  # type: ()->Float
        return Float(self._node.at("value"))
    @value.setter
    def value(self, val): self.value.set(val)
    pass


from EntityLibPy import Node

class CreatureProfile__CreatureProfileFact(HelperObject):
    schema_name = "CreatureProfile::_CreatureProfileFact"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureProfile__CreatureProfileFact
        return CreatureProfile__CreatureProfileFact(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureProfile__CreatureProfileFact.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureProfile__CreatureProfileFact
        return CreatureProfile__CreatureProfileFact(entlib.make_node(CreatureProfile__CreatureProfileFact.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def TimeOfCreation(self):  # type: ()->GameTimeInMs
        return GameTimeInMs(self._node.at("TimeOfCreation"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CreatureProfile(HelperObject):
    schema_name = "CreatureProfile"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureProfile
        return CreatureProfile(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureProfile.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureProfile
        return CreatureProfile(entlib.make_node(CreatureProfile.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Facts(self):  # type: ()->Array[Array[CreatureProfile__CreatureProfileFact]]
        return (lambda n: Array((lambda n: Array(CreatureProfile__CreatureProfileFact, n)), n))(self._node.at("Facts"))
    @property
    def ValueMap(self):  # type: ()->Map[str, Float]
        return (lambda n: Map(str, Float, n))(self._node.at("ValueMap"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CreatureDangerousness(HelperObject):
    schema_name = "CreatureDangerousness"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureDangerousness
        return CreatureDangerousness(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureDangerousness.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureDangerousness
        return CreatureDangerousness(entlib.make_node(CreatureDangerousness.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def dangerousness(self):  # type: ()->Int
        return Int(self._node.at("dangerousness"))
    @dangerousness.setter
    def dangerousness(self, val): self.dangerousness.set(val)
    @property
    def multiplierWhenInjured(self):  # type: ()->Float
        return Float(self._node.at("multiplierWhenInjured"))
    @multiplierWhenInjured.setter
    def multiplierWhenInjured(self, val): self.multiplierWhenInjured.set(val)
    pass


from EntityLibPy import Node

class CreatureComponentInput_ReviveState(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ReviveState
        return ReviveState(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class CreatureComponentInput_ReviveSide(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class CreatureComponentInput_LastAliveReviveSide(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class ConditionalRigidityAttribute_RigidityParameter(HelperObject):
    schema_name = "ConditionalRigidityAttribute::RigidityParameter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ConditionalRigidityAttribute_RigidityParameter
        return ConditionalRigidityAttribute_RigidityParameter(entlib.load_node_file(sourcefile, entlib.get_schema(ConditionalRigidityAttribute_RigidityParameter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ConditionalRigidityAttribute_RigidityParameter
        return ConditionalRigidityAttribute_RigidityParameter(entlib.make_node(ConditionalRigidityAttribute_RigidityParameter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Rigidity(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("Rigidity"))
    @property
    def SpeedDown(self):  # type: ()->Float
        return Float(self._node.at("SpeedDown"))
    @SpeedDown.setter
    def SpeedDown(self, val): self.SpeedDown.set(val)
    @property
    def SpeedUp(self):  # type: ()->Float
        return Float(self._node.at("SpeedUp"))
    @SpeedUp.setter
    def SpeedUp(self, val): self.SpeedUp.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ConditionalRigidityAttribute_Attributes(HelperObject):
    schema_name = "ConditionalRigidityAttribute::Attributes"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ConditionalRigidityAttribute_Attributes
        return ConditionalRigidityAttribute_Attributes(entlib.load_node_file(sourcefile, entlib.get_schema(ConditionalRigidityAttribute_Attributes.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ConditionalRigidityAttribute_Attributes
        return ConditionalRigidityAttribute_Attributes(entlib.make_node(ConditionalRigidityAttribute_Attributes.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DirectionAngular(self):  # type: ()->ConditionalRigidityAttribute_RigidityParameter
        return ConditionalRigidityAttribute_RigidityParameter(self._node.at("DirectionAngular"))
    @property
    def DirectionLinear(self):  # type: ()->ConditionalRigidityAttribute_RigidityParameter
        return ConditionalRigidityAttribute_RigidityParameter(self._node.at("DirectionLinear"))
    @property
    def OscillationAngular(self):  # type: ()->ConditionalRigidityAttribute_RigidityParameter
        return ConditionalRigidityAttribute_RigidityParameter(self._node.at("OscillationAngular"))
    @property
    def OscillationLinear(self):  # type: ()->ConditionalRigidityAttribute_RigidityParameter
        return ConditionalRigidityAttribute_RigidityParameter(self._node.at("OscillationLinear"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ComponentInputBase(HelperObject):
    schema_name = "ComponentInputBase"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ComponentInputBase
        return ComponentInputBase(entlib.load_node_file(sourcefile, entlib.get_schema(ComponentInputBase.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ComponentInputBase
        return ComponentInputBase(entlib.make_node(ComponentInputBase.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class ComponentInputEmpty(HelperObject):
    schema_name = "ComponentInputEmpty"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ComponentInputEmpty
        return ComponentInputEmpty(entlib.load_node_file(sourcefile, entlib.get_schema(ComponentInputEmpty.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ComponentInputEmpty
        return ComponentInputEmpty(entlib.make_node(ComponentInputEmpty.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInputBase
        return ComponentInputBase(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ComponentInput(HelperObject):
    schema_name = "ComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ComponentInput
        return ComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(ComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ComponentInput
        return ComponentInput(entlib.make_node(ComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Enabled(self):  # type: ()->Enabled
        return Enabled(self._node.at("Enabled"))
    @property
    def Super(self):  # type: ()->ComponentInputBase
        return ComponentInputBase(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VelocityObstacleComponentInput(HelperObject):
    schema_name = "VelocityObstacleComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VelocityObstacleComponentInput
        return VelocityObstacleComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(VelocityObstacleComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VelocityObstacleComponentInput
        return VelocityObstacleComponentInput(entlib.make_node(VelocityObstacleComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class UnifiedPhysicsDataComponentInput(HelperObject):
    schema_name = "UnifiedPhysicsDataComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->UnifiedPhysicsDataComponentInput
        return UnifiedPhysicsDataComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(UnifiedPhysicsDataComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->UnifiedPhysicsDataComponentInput
        return UnifiedPhysicsDataComponentInput(entlib.make_node(UnifiedPhysicsDataComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SoundEmitterComponentInput(HelperObject):
    schema_name = "SoundEmitterComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SoundEmitterComponentInput
        return SoundEmitterComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(SoundEmitterComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SoundEmitterComponentInput
        return SoundEmitterComponentInput(entlib.make_node(SoundEmitterComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def computePitchAngle(self):  # type: ()->computePitchAngle
        return computePitchAngle(self._node.at("computePitchAngle"))
    pass


from EntityLibPy import Node

class SmoothScaleComponentInput(HelperObject):
    schema_name = "SmoothScaleComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SmoothScaleComponentInput
        return SmoothScaleComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(SmoothScaleComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SmoothScaleComponentInput
        return SmoothScaleComponentInput(entlib.make_node(SmoothScaleComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Parameters(self):  # type: ()->Parameters
        return Parameters(self._node.at("Parameters"))
    @property
    def ScaleFactor(self):  # type: ()->ScaleFactor
        return ScaleFactor(self._node.at("ScaleFactor"))
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReviveEnergyComponentInput(HelperObject):
    schema_name = "ReviveEnergyComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReviveEnergyComponentInput
        return ReviveEnergyComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(ReviveEnergyComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReviveEnergyComponentInput
        return ReviveEnergyComponentInput(entlib.make_node(ReviveEnergyComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Energy(self):  # type: ()->Energy
        return Energy(self._node.at("Energy"))
    @property
    def LastValidedReviveSide(self):  # type: ()->LastValidedReviveSide
        return LastValidedReviveSide(self._node.at("LastValidedReviveSide"))
    @property
    def ReviveSide(self):  # type: ()->ReviveEnergyComponentInput_ReviveSide
        return ReviveEnergyComponentInput_ReviveSide(self._node.at("ReviveSide"))
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PhysicsComponentInput(HelperObject):
    schema_name = "PhysicsComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsComponentInput
        return PhysicsComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsComponentInput
        return PhysicsComponentInput(entlib.make_node(PhysicsComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PerceiverComponentInput(HelperObject):
    schema_name = "PerceiverComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PerceiverComponentInput
        return PerceiverComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(PerceiverComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PerceiverComponentInput
        return PerceiverComponentInput(entlib.make_node(PerceiverComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def usePerception(self):  # type: ()->PerceiverComponentInput_usePerception
        return PerceiverComponentInput_usePerception(self._node.at("usePerception"))
    pass


from EntityLibPy import Node

class PerceivableComponentInput(HelperObject):
    schema_name = "PerceivableComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PerceivableComponentInput
        return PerceivableComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(PerceivableComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PerceivableComponentInput
        return PerceivableComponentInput(entlib.make_node(PerceivableComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def isPerceivable(self):  # type: ()->isPerceivable
        return isPerceivable(self._node.at("isPerceivable"))
    @property
    def isPerceivableForEnemies(self):  # type: ()->isPerceivableForEnemies
        return isPerceivableForEnemies(self._node.at("isPerceivableForEnemies"))
    @property
    def soundEmissionStrength(self):  # type: ()->soundEmissionStrength
        return soundEmissionStrength(self._node.at("soundEmissionStrength"))
    pass


from EntityLibPy import Node

class OutfitWearerComponentInput(HelperObject):
    schema_name = "OutfitWearerComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->OutfitWearerComponentInput
        return OutfitWearerComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(OutfitWearerComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->OutfitWearerComponentInput
        return OutfitWearerComponentInput(entlib.make_node(OutfitWearerComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FadeDelay(self):  # type: ()->FadeDelay
        return FadeDelay(self._node.at("FadeDelay"))
    @property
    def FadeDuration(self):  # type: ()->FadeDuration
        return FadeDuration(self._node.at("FadeDuration"))
    @property
    def OutfitTags(self):  # type: ()->PrimArray[InventoryTags]
        return (lambda n: PrimArray(InventoryTags, n))(self._node.at("OutfitTags"))
    @OutfitTags.setter
    def OutfitTags(self, val): self.OutfitTags.set(val)
    @property
    def ReviveSide(self):  # type: ()->OutfitWearerComponentInput_ReviveSide
        return OutfitWearerComponentInput_ReviveSide(self._node.at("ReviveSide"))
    @property
    def ReviveState(self):  # type: ()->OutfitWearerComponentInput_ReviveState
        return OutfitWearerComponentInput_ReviveState(self._node.at("ReviveState"))
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MountIKControllerComponentInput(HelperObject):
    schema_name = "MountIKControllerComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MountIKControllerComponentInput
        return MountIKControllerComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(MountIKControllerComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MountIKControllerComponentInput
        return MountIKControllerComponentInput(entlib.make_node(MountIKControllerComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidComponentInput(HelperObject):
    schema_name = "FluidComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidComponentInput
        return FluidComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(FluidComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidComponentInput
        return FluidComponentInput(entlib.make_node(FluidComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DisableFluid(self):  # type: ()->DisableFluid
        return DisableFluid(self._node.at("DisableFluid"))
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergySpoutComponentInput(HelperObject):
    schema_name = "EnergySpoutComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergySpoutComponentInput
        return EnergySpoutComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(EnergySpoutComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergySpoutComponentInput
        return EnergySpoutComponentInput(entlib.make_node(EnergySpoutComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CreatureAIComponentInput(HelperObject):
    schema_name = "CreatureAIComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureAIComponentInput
        return CreatureAIComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureAIComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureAIComponentInput
        return CreatureAIComponentInput(entlib.make_node(CreatureAIComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def usePerception(self):  # type: ()->usePerception
        return usePerception(self._node.at("usePerception"))
    pass


from EntityLibPy import Node

class CharacterControllerComponentInput(HelperObject):
    schema_name = "CharacterControllerComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CharacterControllerComponentInput
        return CharacterControllerComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(CharacterControllerComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CharacterControllerComponentInput
        return CharacterControllerComponentInput(entlib.make_node(CharacterControllerComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def JumpHeightMultiplier(self):  # type: ()->JumpHeightMultiplier
        return JumpHeightMultiplier(self._node.at("JumpHeightMultiplier"))
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BeamTargetComponentInput(HelperObject):
    schema_name = "BeamTargetComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BeamTargetComponentInput
        return BeamTargetComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(BeamTargetComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BeamTargetComponentInput
        return BeamTargetComponentInput(entlib.make_node(BeamTargetComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AttackTriggerComponentInput(HelperObject):
    schema_name = "AttackTriggerComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AttackTriggerComponentInput
        return AttackTriggerComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(AttackTriggerComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AttackTriggerComponentInput
        return AttackTriggerComponentInput(entlib.make_node(AttackTriggerComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationTransformDriverComponentInput(HelperObject):
    schema_name = "AnimationTransformDriverComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationTransformDriverComponentInput
        return AnimationTransformDriverComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationTransformDriverComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationTransformDriverComponentInput
        return AnimationTransformDriverComponentInput(entlib.make_node(AnimationTransformDriverComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ComponentGD(HelperObject):
    schema_name = "ComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ComponentGD
        return ComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(ComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ComponentGD
        return ComponentGD(entlib.make_node(ComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class WorldScalePathFindGD(HelperObject):
    schema_name = "WorldScalePathFindGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->WorldScalePathFindGD
        return WorldScalePathFindGD(entlib.load_node_file(sourcefile, entlib.get_schema(WorldScalePathFindGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->WorldScalePathFindGD
        return WorldScalePathFindGD(entlib.make_node(WorldScalePathFindGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FilePath(self):  # type: ()->String
        return String(self._node.at("FilePath"))
    @FilePath.setter
    def FilePath(self, val): self.FilePath.set(val)
    @property
    def GenerationParameters(self):  # type: ()->Array[NavmeshGenerationParameters]
        return (lambda n: Array(NavmeshGenerationParameters, n))(self._node.at("GenerationParameters"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class WildObject(HelperObject):
    schema_name = "WildObject"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->WildObject
        return WildObject(entlib.load_node_file(sourcefile, entlib.get_schema(WildObject.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->WildObject
        return WildObject(entlib.make_node(WildObject.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GdPath(self):  # type: ()->String
        return String(self._node.at("GdPath"))
    @GdPath.setter
    def GdPath(self, val): self.GdPath.set(val)
    @property
    def ObjectType(self):  # type: ()->String
        return String(self._node.at("ObjectType"))
    @ObjectType.setter
    def ObjectType(self, val): self.ObjectType.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VoxelSimulationGD(HelperObject):
    schema_name = "VoxelSimulationGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VoxelSimulationGD
        return VoxelSimulationGD(entlib.load_node_file(sourcefile, entlib.get_schema(VoxelSimulationGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VoxelSimulationGD
        return VoxelSimulationGD(entlib.make_node(VoxelSimulationGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EDITOR_voxelSize(self):  # type: ()->Float
        return Float(self._node.at("EDITOR_voxelSize"))
    @EDITOR_voxelSize.setter
    def EDITOR_voxelSize(self, val): self.EDITOR_voxelSize.set(val)
    @property
    def FilePath(self):  # type: ()->String
        return String(self._node.at("FilePath"))
    @FilePath.setter
    def FilePath(self, val): self.FilePath.set(val)
    @property
    def LossBySecond(self):  # type: ()->Float
        return Float(self._node.at("LossBySecond"))
    @LossBySecond.setter
    def LossBySecond(self, val): self.LossBySecond.set(val)
    @property
    def LostRatio(self):  # type: ()->Float
        return Float(self._node.at("LostRatio"))
    @LostRatio.setter
    def LostRatio(self, val): self.LostRatio.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TransmissionBySecond(self):  # type: ()->Float
        return Float(self._node.at("TransmissionBySecond"))
    @TransmissionBySecond.setter
    def TransmissionBySecond(self, val): self.TransmissionBySecond.set(val)
    @property
    def TransmittedRatio(self):  # type: ()->Float
        return Float(self._node.at("TransmittedRatio"))
    @TransmittedRatio.setter
    def TransmittedRatio(self, val): self.TransmittedRatio.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VolumeConstraintGD(HelperObject):
    schema_name = "VolumeConstraintGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VolumeConstraintGD
        return VolumeConstraintGD(entlib.load_node_file(sourcefile, entlib.get_schema(VolumeConstraintGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VolumeConstraintGD
        return VolumeConstraintGD(entlib.make_node(VolumeConstraintGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Constraints(self):  # type: ()->Array[VolumeConstraintDataGD]
        return (lambda n: Array(VolumeConstraintDataGD, n))(self._node.at("Constraints"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VisualGD(HelperObject):
    schema_name = "VisualGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VisualGD
        return VisualGD(entlib.load_node_file(sourcefile, entlib.get_schema(VisualGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VisualGD
        return VisualGD(entlib.make_node(VisualGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AlwaysStatic(self):  # type: ()->Bool
        return Bool(self._node.at("AlwaysStatic"))
    @AlwaysStatic.setter
    def AlwaysStatic(self, val): self.AlwaysStatic.set(val)
    @property
    def EDITOR_GenerateFur(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_GenerateFur"))
    @EDITOR_GenerateFur.setter
    def EDITOR_GenerateFur(self, val): self.EDITOR_GenerateFur.set(val)
    @property
    def EDITOR_LODs(self):  # type: ()->Array[EDITOR_LODsItem]
        return (lambda n: Array(EDITOR_LODsItem, n))(self._node.at("EDITOR_LODs"))
    @property
    def RUNTIME_LODScale(self):  # type: ()->Float
        return Float(self._node.at("RUNTIME_LODScale"))
    @RUNTIME_LODScale.setter
    def RUNTIME_LODScale(self, val): self.RUNTIME_LODScale.set(val)
    @property
    def RUNTIME_LODs(self):  # type: ()->Array[RUNTIME_LODsItem]
        return (lambda n: Array(RUNTIME_LODsItem, n))(self._node.at("RUNTIME_LODs"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def VisualResourcePath(self):  # type: ()->String
        return String(self._node.at("VisualResourcePath"))
    @VisualResourcePath.setter
    def VisualResourcePath(self, val): self.VisualResourcePath.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VelocityObstacleGD(HelperObject):
    schema_name = "VelocityObstacleGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VelocityObstacleGD
        return VelocityObstacleGD(entlib.load_node_file(sourcefile, entlib.get_schema(VelocityObstacleGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VelocityObstacleGD
        return VelocityObstacleGD(entlib.make_node(VelocityObstacleGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AccelerationAfterAvoidance(self):  # type: ()->Float
        return Float(self._node.at("AccelerationAfterAvoidance"))
    @AccelerationAfterAvoidance.setter
    def AccelerationAfterAvoidance(self, val): self.AccelerationAfterAvoidance.set(val)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VegetationNavMeshTaggerGD(HelperObject):
    schema_name = "VegetationNavMeshTaggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VegetationNavMeshTaggerGD
        return VegetationNavMeshTaggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(VegetationNavMeshTaggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VegetationNavMeshTaggerGD
        return VegetationNavMeshTaggerGD(entlib.make_node(VegetationNavMeshTaggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoundingBoxMargin(self):  # type: ()->Vector3
        return Vector3(self._node.at("BoundingBoxMargin"))
    @BoundingBoxMargin.setter
    def BoundingBoxMargin(self, val): self.BoundingBoxMargin.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TaggingVegetation(self):  # type: ()->Array[TaggingVegetation]
        return (lambda n: Array(TaggingVegetation, n))(self._node.at("TaggingVegetation"))
    @property
    def UpdatePeriod(self):  # type: ()->Float
        return Float(self._node.at("UpdatePeriod"))
    @UpdatePeriod.setter
    def UpdatePeriod(self, val): self.UpdatePeriod.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class UnifiedPhysicsDataGD(HelperObject):
    schema_name = "UnifiedPhysicsDataGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->UnifiedPhysicsDataGD
        return UnifiedPhysicsDataGD(entlib.load_node_file(sourcefile, entlib.get_schema(UnifiedPhysicsDataGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->UnifiedPhysicsDataGD
        return UnifiedPhysicsDataGD(entlib.make_node(UnifiedPhysicsDataGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TriggerEventCameraGD(HelperObject):
    schema_name = "TriggerEventCameraGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TriggerEventCameraGD
        return TriggerEventCameraGD(entlib.load_node_file(sourcefile, entlib.get_schema(TriggerEventCameraGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TriggerEventCameraGD
        return TriggerEventCameraGD(entlib.make_node(TriggerEventCameraGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EventCameraData(self):  # type: ()->EventCameraData
        return EventCameraData(self._node.at("EventCameraData"))
    @property
    def PlayAnimBeforeTrigger(self):  # type: ()->String
        return String(self._node.at("PlayAnimBeforeTrigger"))
    @PlayAnimBeforeTrigger.setter
    def PlayAnimBeforeTrigger(self, val): self.PlayAnimBeforeTrigger.set(val)
    @property
    def PlayAnimsWhenTriggered(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("PlayAnimsWhenTriggered"))
    @PlayAnimsWhenTriggered.setter
    def PlayAnimsWhenTriggered(self, val): self.PlayAnimsWhenTriggered.set(val)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UseDuration(self):  # type: ()->Bool
        return Bool(self._node.at("UseDuration"))
    @UseDuration.setter
    def UseDuration(self, val): self.UseDuration.set(val)
    @property
    def UsePhysics(self):  # type: ()->Bool
        return Bool(self._node.at("UsePhysics"))
    @UsePhysics.setter
    def UsePhysics(self, val): self.UsePhysics.set(val)
    @property
    def UseRadius(self):  # type: ()->Bool
        return Bool(self._node.at("UseRadius"))
    @UseRadius.setter
    def UseRadius(self, val): self.UseRadius.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TransformGD(HelperObject):
    schema_name = "TransformGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TransformGD
        return TransformGD(entlib.load_node_file(sourcefile, entlib.get_schema(TransformGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TransformGD
        return TransformGD(entlib.make_node(TransformGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EDITOR_InheritScaleFromSubSceneHolder(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_InheritScaleFromSubSceneHolder"))
    @EDITOR_InheritScaleFromSubSceneHolder.setter
    def EDITOR_InheritScaleFromSubSceneHolder(self, val): self.EDITOR_InheritScaleFromSubSceneHolder.set(val)
    @property
    def EDITOR_PropagateScaleToSubScene(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_PropagateScaleToSubScene"))
    @EDITOR_PropagateScaleToSubScene.setter
    def EDITOR_PropagateScaleToSubScene(self, val): self.EDITOR_PropagateScaleToSubScene.set(val)
    @property
    def Matrix(self):  # type: ()->Matrix33
        return Matrix33(self._node.at("Matrix"))
    @Matrix.setter
    def Matrix(self, val): self.Matrix.set(val)
    @property
    def Orientation(self):  # type: ()->Quat
        return Quat(self._node.at("Orientation"))
    @Orientation.setter
    def Orientation(self, val): self.Orientation.set(val)
    @property
    def Position(self):  # type: ()->Vector3
        return Vector3(self._node.at("Position"))
    @Position.setter
    def Position(self, val): self.Position.set(val)
    @property
    def Scale(self):  # type: ()->Vector3
        return Vector3(self._node.at("Scale"))
    @Scale.setter
    def Scale(self, val): self.Scale.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TestUnion(HelperObject):
    schema_name = "TestUnion"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TestUnion
        return TestUnion(entlib.load_node_file(sourcefile, entlib.get_schema(TestUnion.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TestUnion
        return TestUnion(entlib.make_node(TestUnion.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Union(self):  # type: ()->variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_
        return variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(self._node.at("Union"))
    @property
    def UnionArray(self):  # type: ()->Array[variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_]
        return (lambda n: Array(variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_, n))(self._node.at("UnionArray"))
    @property
    def UnionObjectArray(self):  # type: ()->Array[UnionObjectArrayItem]
        return (lambda n: Array(UnionObjectArrayItem, n))(self._node.at("UnionObjectArray"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TestSetOfObject(HelperObject):
    schema_name = "TestSetOfObject"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TestSetOfObject
        return TestSetOfObject(entlib.load_node_file(sourcefile, entlib.get_schema(TestSetOfObject.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TestSetOfObject
        return TestSetOfObject(entlib.make_node(TestSetOfObject.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MapOfObject(self):  # type: ()->Map[str, MapOfObjectItem_A]
        return (lambda n: Map(str, MapOfObjectItem_A, n))(self._node.at("MapOfObject"))
    @property
    def SetOfObject(self):  # type: ()->ObjectSet[SetOfObjectItem]
        return (lambda n: ObjectSet(SetOfObjectItem, n))(self._node.at("SetOfObject"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TestEntityRef(HelperObject):
    schema_name = "TestEntityRef"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TestEntityRef
        return TestEntityRef(entlib.load_node_file(sourcefile, entlib.get_schema(TestEntityRef.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TestEntityRef
        return TestEntityRef(entlib.make_node(TestEntityRef.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TestRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("TestRef"))
    @TestRef.setter
    def TestRef(self, val): self.TestRef.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TestDefaultValues(HelperObject):
    schema_name = "TestDefaultValues"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TestDefaultValues
        return TestDefaultValues(entlib.load_node_file(sourcefile, entlib.get_schema(TestDefaultValues.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TestDefaultValues
        return TestDefaultValues(entlib.make_node(TestDefaultValues.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Matrix(self):  # type: ()->Matrix33
        return Matrix33(self._node.at("Matrix"))
    @Matrix.setter
    def Matrix(self, val): self.Matrix.set(val)
    @property
    def Matrix2(self):  # type: ()->Matrix33
        return Matrix33(self._node.at("Matrix2"))
    @Matrix2.setter
    def Matrix2(self, val): self.Matrix2.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def propertyWithDefault(self):  # type: ()->TestPropertyDefaultValues2
        return TestPropertyDefaultValues2(self._node.at("propertyWithDefault"))
    pass


from EntityLibPy import Node

class TestCreature(HelperObject):
    schema_name = "TestCreature"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TestCreature
        return TestCreature(entlib.load_node_file(sourcefile, entlib.get_schema(TestCreature.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TestCreature
        return TestCreature(entlib.make_node(TestCreature.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FullCursed(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("FullCursed"))
    @FullCursed.setter
    def FullCursed(self, val): self.FullCursed.set(val)
    @property
    def FullLush(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("FullLush"))
    @FullLush.setter
    def FullLush(self, val): self.FullLush.set(val)
    @property
    def SklCursed(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("SklCursed"))
    @SklCursed.setter
    def SklCursed(self, val): self.SklCursed.set(val)
    @property
    def SklLush(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("SklLush"))
    @SklLush.setter
    def SklLush(self, val): self.SklLush.set(val)
    @property
    def SklNeutral(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("SklNeutral"))
    @SklNeutral.setter
    def SklNeutral(self, val): self.SklNeutral.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TestArrays(HelperObject):
    schema_name = "TestArrays"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TestArrays
        return TestArrays(entlib.load_node_file(sourcefile, entlib.get_schema(TestArrays.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TestArrays
        return TestArrays(entlib.make_node(TestArrays.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DefaultValue(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("DefaultValue"))
    @DefaultValue.setter
    def DefaultValue(self, val): self.DefaultValue.set(val)
    @property
    def OverridedDefaultValue(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("OverridedDefaultValue"))
    @OverridedDefaultValue.setter
    def OverridedDefaultValue(self, val): self.OverridedDefaultValue.set(val)
    @property
    def OverridedPrefabValue(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("OverridedPrefabValue"))
    @OverridedPrefabValue.setter
    def OverridedPrefabValue(self, val): self.OverridedPrefabValue.set(val)
    @property
    def PrefabValue(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("PrefabValue"))
    @PrefabValue.setter
    def PrefabValue(self, val): self.PrefabValue.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Variant(self):  # type: ()->variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_
        return variant_s32_float_bool_string_Vector2_Vector3_Quat_Position_(self._node.at("Variant"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TerrainSurfaceObject(HelperObject):
    schema_name = "TerrainSurfaceObject"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TerrainSurfaceObject
        return TerrainSurfaceObject(entlib.load_node_file(sourcefile, entlib.get_schema(TerrainSurfaceObject.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TerrainSurfaceObject
        return TerrainSurfaceObject(entlib.make_node(TerrainSurfaceObject.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EDITOR_tso(self):  # type: ()->String
        return String(self._node.at("EDITOR_tso"))
    @EDITOR_tso.setter
    def EDITOR_tso(self, val): self.EDITOR_tso.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TerrainGD(HelperObject):
    schema_name = "TerrainGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TerrainGD
        return TerrainGD(entlib.load_node_file(sourcefile, entlib.get_schema(TerrainGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TerrainGD
        return TerrainGD(entlib.make_node(TerrainGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EDITOR_AlbedoType(self):  # type: ()->Int
        return Int(self._node.at("EDITOR_AlbedoType"))
    @EDITOR_AlbedoType.setter
    def EDITOR_AlbedoType(self, val): self.EDITOR_AlbedoType.set(val)
    @property
    def EDITOR_CavityAlbedoStrength(self):  # type: ()->Float
        return Float(self._node.at("EDITOR_CavityAlbedoStrength"))
    @EDITOR_CavityAlbedoStrength.setter
    def EDITOR_CavityAlbedoStrength(self, val): self.EDITOR_CavityAlbedoStrength.set(val)
    @property
    def EDITOR_CavityStrength(self):  # type: ()->Float
        return Float(self._node.at("EDITOR_CavityStrength"))
    @EDITOR_CavityStrength.setter
    def EDITOR_CavityStrength(self, val): self.EDITOR_CavityStrength.set(val)
    @property
    def EDITOR_CollisionDecimateHmm(self):  # type: ()->Float
        return Float(self._node.at("EDITOR_CollisionDecimateHmm"))
    @EDITOR_CollisionDecimateHmm.setter
    def EDITOR_CollisionDecimateHmm(self, val): self.EDITOR_CollisionDecimateHmm.set(val)
    @property
    def EDITOR_ComputeSurfaceObjectTerrain(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_ComputeSurfaceObjectTerrain"))
    @EDITOR_ComputeSurfaceObjectTerrain.setter
    def EDITOR_ComputeSurfaceObjectTerrain(self, val): self.EDITOR_ComputeSurfaceObjectTerrain.set(val)
    @property
    def EDITOR_DebugMode(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_DebugMode"))
    @EDITOR_DebugMode.setter
    def EDITOR_DebugMode(self, val): self.EDITOR_DebugMode.set(val)
    @property
    def EDITOR_DetailMapFalloff(self):  # type: ()->Int
        return Int(self._node.at("EDITOR_DetailMapFalloff"))
    @EDITOR_DetailMapFalloff.setter
    def EDITOR_DetailMapFalloff(self, val): self.EDITOR_DetailMapFalloff.set(val)
    @property
    def EDITOR_DetailScale(self):  # type: ()->Float
        return Float(self._node.at("EDITOR_DetailScale"))
    @EDITOR_DetailScale.setter
    def EDITOR_DetailScale(self, val): self.EDITOR_DetailScale.set(val)
    @property
    def EDITOR_DisableSeedParams(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_DisableSeedParams"))
    @EDITOR_DisableSeedParams.setter
    def EDITOR_DisableSeedParams(self, val): self.EDITOR_DisableSeedParams.set(val)
    @property
    def EDITOR_DisplayAlbedo(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_DisplayAlbedo"))
    @EDITOR_DisplayAlbedo.setter
    def EDITOR_DisplayAlbedo(self, val): self.EDITOR_DisplayAlbedo.set(val)
    @property
    def EDITOR_DisplayFinal(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_DisplayFinal"))
    @EDITOR_DisplayFinal.setter
    def EDITOR_DisplayFinal(self, val): self.EDITOR_DisplayFinal.set(val)
    @property
    def EDITOR_Distributed(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_Distributed"))
    @EDITOR_Distributed.setter
    def EDITOR_Distributed(self, val): self.EDITOR_Distributed.set(val)
    @property
    def EDITOR_Erosion(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_Erosion"))
    @EDITOR_Erosion.setter
    def EDITOR_Erosion(self, val): self.EDITOR_Erosion.set(val)
    @property
    def EDITOR_ErosionType(self):  # type: ()->Int
        return Int(self._node.at("EDITOR_ErosionType"))
    @EDITOR_ErosionType.setter
    def EDITOR_ErosionType(self, val): self.EDITOR_ErosionType.set(val)
    @property
    def EDITOR_ExportCollision(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_ExportCollision"))
    @EDITOR_ExportCollision.setter
    def EDITOR_ExportCollision(self, val): self.EDITOR_ExportCollision.set(val)
    @property
    def EDITOR_ExportQuality(self):  # type: ()->Int
        return Int(self._node.at("EDITOR_ExportQuality"))
    @EDITOR_ExportQuality.setter
    def EDITOR_ExportQuality(self, val): self.EDITOR_ExportQuality.set(val)
    @property
    def EDITOR_LocalSndbs(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_LocalSndbs"))
    @EDITOR_LocalSndbs.setter
    def EDITOR_LocalSndbs(self, val): self.EDITOR_LocalSndbs.set(val)
    @property
    def EDITOR_MergeTSOPreview(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_MergeTSOPreview"))
    @EDITOR_MergeTSOPreview.setter
    def EDITOR_MergeTSOPreview(self, val): self.EDITOR_MergeTSOPreview.set(val)
    @property
    def EDITOR_MultiLayerHeightmap(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_MultiLayerHeightmap"))
    @EDITOR_MultiLayerHeightmap.setter
    def EDITOR_MultiLayerHeightmap(self, val): self.EDITOR_MultiLayerHeightmap.set(val)
    @property
    def EDITOR_Path(self):  # type: ()->String
        return String(self._node.at("EDITOR_Path"))
    @EDITOR_Path.setter
    def EDITOR_Path(self, val): self.EDITOR_Path.set(val)
    @property
    def EDITOR_PreviewQuality(self):  # type: ()->Int
        return Int(self._node.at("EDITOR_PreviewQuality"))
    @EDITOR_PreviewQuality.setter
    def EDITOR_PreviewQuality(self, val): self.EDITOR_PreviewQuality.set(val)
    @property
    def EDITOR_ProcessDetailMap(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_ProcessDetailMap"))
    @EDITOR_ProcessDetailMap.setter
    def EDITOR_ProcessDetailMap(self, val): self.EDITOR_ProcessDetailMap.set(val)
    @property
    def EDITOR_SeedTextureSizeReduce(self):  # type: ()->Int
        return Int(self._node.at("EDITOR_SeedTextureSizeReduce"))
    @EDITOR_SeedTextureSizeReduce.setter
    def EDITOR_SeedTextureSizeReduce(self, val): self.EDITOR_SeedTextureSizeReduce.set(val)
    @property
    def EDITOR_SuperimposeSeeds(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_SuperimposeSeeds"))
    @EDITOR_SuperimposeSeeds.setter
    def EDITOR_SuperimposeSeeds(self, val): self.EDITOR_SuperimposeSeeds.set(val)
    @property
    def EDITOR_SurfaceObjectDecimate(self):  # type: ()->Float
        return Float(self._node.at("EDITOR_SurfaceObjectDecimate"))
    @EDITOR_SurfaceObjectDecimate.setter
    def EDITOR_SurfaceObjectDecimate(self, val): self.EDITOR_SurfaceObjectDecimate.set(val)
    @property
    def EDITOR_SurfaceObjectDecimateHmm(self):  # type: ()->Float
        return Float(self._node.at("EDITOR_SurfaceObjectDecimateHmm"))
    @EDITOR_SurfaceObjectDecimateHmm.setter
    def EDITOR_SurfaceObjectDecimateHmm(self, val): self.EDITOR_SurfaceObjectDecimateHmm.set(val)
    @property
    def EDITOR_TerrainWildMat(self):  # type: ()->String
        return String(self._node.at("EDITOR_TerrainWildMat"))
    @EDITOR_TerrainWildMat.setter
    def EDITOR_TerrainWildMat(self, val): self.EDITOR_TerrainWildMat.set(val)
    @property
    def EDITOR_TriPerMeter(self):  # type: ()->Int
        return Int(self._node.at("EDITOR_TriPerMeter"))
    @EDITOR_TriPerMeter.setter
    def EDITOR_TriPerMeter(self, val): self.EDITOR_TriPerMeter.set(val)
    @property
    def EDITOR_WMErosionComputeDistant(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_WMErosionComputeDistant"))
    @EDITOR_WMErosionComputeDistant.setter
    def EDITOR_WMErosionComputeDistant(self, val): self.EDITOR_WMErosionComputeDistant.set(val)
    @property
    def EDITOR_WMErosionPreview(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_WMErosionPreview"))
    @EDITOR_WMErosionPreview.setter
    def EDITOR_WMErosionPreview(self, val): self.EDITOR_WMErosionPreview.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TerrainMeta(self):  # type: ()->Terrain_TerrainMeta
        return Terrain_TerrainMeta(self._node.at("TerrainMeta"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TeamGD(HelperObject):
    schema_name = "TeamGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TeamGD
        return TeamGD(entlib.load_node_file(sourcefile, entlib.get_schema(TeamGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TeamGD
        return TeamGD(entlib.make_node(TeamGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SystemicCreature(HelperObject):
    schema_name = "SystemicCreature"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SystemicCreature
        return SystemicCreature(entlib.load_node_file(sourcefile, entlib.get_schema(SystemicCreature.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SystemicCreature
        return SystemicCreature(entlib.make_node(SystemicCreature.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BehaviorModifierTagList(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("BehaviorModifierTagList"))
    @BehaviorModifierTagList.setter
    def BehaviorModifierTagList(self, val): self.BehaviorModifierTagList.set(val)
    @property
    def BehaviorPath(self):  # type: ()->String
        return String(self._node.at("BehaviorPath"))
    @BehaviorPath.setter
    def BehaviorPath(self, val): self.BehaviorPath.set(val)
    @property
    def BehaviorState(self):  # type: ()->String
        return String(self._node.at("BehaviorState"))
    @BehaviorState.setter
    def BehaviorState(self, val): self.BehaviorState.set(val)
    @property
    def Burried(self):  # type: ()->Bool
        return Bool(self._node.at("Burried"))
    @Burried.setter
    def Burried(self, val): self.Burried.set(val)
    @property
    def CameraTarget(self):  # type: ()->Bool
        return Bool(self._node.at("CameraTarget"))
    @CameraTarget.setter
    def CameraTarget(self, val): self.CameraTarget.set(val)
    @property
    def CanBeMaster(self):  # type: ()->Bool
        return Bool(self._node.at("CanBeMaster"))
    @CanBeMaster.setter
    def CanBeMaster(self, val): self.CanBeMaster.set(val)
    @property
    def Faction(self):  # type: ()->String
        return String(self._node.at("Faction"))
    @Faction.setter
    def Faction(self, val): self.Faction.set(val)
    @property
    def Inventory(self):  # type: ()->String
        return String(self._node.at("Inventory"))
    @Inventory.setter
    def Inventory(self, val): self.Inventory.set(val)
    @property
    def Invincible(self):  # type: ()->Bool
        return Bool(self._node.at("Invincible"))
    @Invincible.setter
    def Invincible(self, val): self.Invincible.set(val)
    @property
    def Life(self):  # type: ()->Float
        return Float(self._node.at("Life"))
    @Life.setter
    def Life(self, val): self.Life.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def PlayerSpawn(self):  # type: ()->Bool
        return Bool(self._node.at("PlayerSpawn"))
    @PlayerSpawn.setter
    def PlayerSpawn(self, val): self.PlayerSpawn.set(val)
    @property
    def ScriptList(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("ScriptList"))
    @ScriptList.setter
    def ScriptList(self, val): self.ScriptList.set(val)
    @property
    def Spawner(self):  # type: ()->String
        return String(self._node.at("Spawner"))
    @Spawner.setter
    def Spawner(self, val): self.Spawner.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UniqueID(self):  # type: ()->String
        return String(self._node.at("UniqueID"))
    @UniqueID.setter
    def UniqueID(self, val): self.UniqueID.set(val)
    @property
    def Warrior(self):  # type: ()->Bool
        return Bool(self._node.at("Warrior"))
    @Warrior.setter
    def Warrior(self, val): self.Warrior.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class StickToTerrain(HelperObject):
    schema_name = "StickToTerrain"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->StickToTerrain
        return StickToTerrain(entlib.load_node_file(sourcefile, entlib.get_schema(StickToTerrain.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->StickToTerrain
        return StickToTerrain(entlib.make_node(StickToTerrain.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def NormalRatio(self):  # type: ()->Float
        return Float(self._node.at("NormalRatio"))
    @NormalRatio.setter
    def NormalRatio(self, val): self.NormalRatio.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def ZOffset(self):  # type: ()->Float
        return Float(self._node.at("ZOffset"))
    @ZOffset.setter
    def ZOffset(self, val): self.ZOffset.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def precisionRadius(self):  # type: ()->Float
        return Float(self._node.at("precisionRadius"))
    @precisionRadius.setter
    def precisionRadius(self, val): self.precisionRadius.set(val)
    @property
    def useNormal(self):  # type: ()->Bool
        return Bool(self._node.at("useNormal"))
    @useNormal.setter
    def useNormal(self, val): self.useNormal.set(val)
    pass


from EntityLibPy import Node

class StaticObjectGD(HelperObject):
    schema_name = "StaticObjectGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->StaticObjectGD
        return StaticObjectGD(entlib.load_node_file(sourcefile, entlib.get_schema(StaticObjectGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->StaticObjectGD
        return StaticObjectGD(entlib.make_node(StaticObjectGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EDITOR_IsCave(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_IsCave"))
    @EDITOR_IsCave.setter
    def EDITOR_IsCave(self, val): self.EDITOR_IsCave.set(val)
    @property
    def EDITOR_UsedInMultiLayerHeightmap(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_UsedInMultiLayerHeightmap"))
    @EDITOR_UsedInMultiLayerHeightmap.setter
    def EDITOR_UsedInMultiLayerHeightmap(self, val): self.EDITOR_UsedInMultiLayerHeightmap.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Visual(self):  # type: ()->Bool
        return Bool(self._node.at("Visual"))
    @Visual.setter
    def Visual(self, val): self.Visual.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class StaffVertebrasGD(HelperObject):
    schema_name = "StaffVertebrasGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->StaffVertebrasGD
        return StaffVertebrasGD(entlib.load_node_file(sourcefile, entlib.get_schema(StaffVertebrasGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->StaffVertebrasGD
        return StaffVertebrasGD(entlib.make_node(StaffVertebrasGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HotspotNames(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("HotspotNames"))
    @HotspotNames.setter
    def HotspotNames(self, val): self.HotspotNames.set(val)
    @property
    def MaxVertebraCount(self):  # type: ()->Int
        return Int(self._node.at("MaxVertebraCount"))
    @MaxVertebraCount.setter
    def MaxVertebraCount(self, val): self.MaxVertebraCount.set(val)
    @property
    def OwnedVertebraStartCount(self):  # type: ()->Int
        return Int(self._node.at("OwnedVertebraStartCount"))
    @OwnedVertebraStartCount.setter
    def OwnedVertebraStartCount(self, val): self.OwnedVertebraStartCount.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def VertebraGRCPath1(self):  # type: ()->String
        return String(self._node.at("VertebraGRCPath1"))
    @VertebraGRCPath1.setter
    def VertebraGRCPath1(self, val): self.VertebraGRCPath1.set(val)
    @property
    def VertebraGRCPath2(self):  # type: ()->String
        return String(self._node.at("VertebraGRCPath2"))
    @VertebraGRCPath2.setter
    def VertebraGRCPath2(self, val): self.VertebraGRCPath2.set(val)
    @property
    def VertebraGRCPath3(self):  # type: ()->String
        return String(self._node.at("VertebraGRCPath3"))
    @VertebraGRCPath3.setter
    def VertebraGRCPath3(self, val): self.VertebraGRCPath3.set(val)
    @property
    def VertebraGRCPath4(self):  # type: ()->String
        return String(self._node.at("VertebraGRCPath4"))
    @VertebraGRCPath4.setter
    def VertebraGRCPath4(self, val): self.VertebraGRCPath4.set(val)
    @property
    def VomitData(self):  # type: ()->VomitData
        return VomitData(self._node.at("VomitData"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SpiritAnimalGD(HelperObject):
    schema_name = "SpiritAnimalGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SpiritAnimalGD
        return SpiritAnimalGD(entlib.load_node_file(sourcefile, entlib.get_schema(SpiritAnimalGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SpiritAnimalGD
        return SpiritAnimalGD(entlib.make_node(SpiritAnimalGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DeadDurationBeforeRevive(self):  # type: ()->Float
        return Float(self._node.at("DeadDurationBeforeRevive"))
    @DeadDurationBeforeRevive.setter
    def DeadDurationBeforeRevive(self, val): self.DeadDurationBeforeRevive.set(val)
    @property
    def EntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("EntityRef"))
    @EntityRef.setter
    def EntityRef(self, val): self.EntityRef.set(val)
    @property
    def SoulCooldownFromDeath(self):  # type: ()->Float
        return Float(self._node.at("SoulCooldownFromDeath"))
    @SoulCooldownFromDeath.setter
    def SoulCooldownFromDeath(self, val): self.SoulCooldownFromDeath.set(val)
    @property
    def SoulCooldownFromSpiritAttack(self):  # type: ()->Float
        return Float(self._node.at("SoulCooldownFromSpiritAttack"))
    @SoulCooldownFromSpiritAttack.setter
    def SoulCooldownFromSpiritAttack(self, val): self.SoulCooldownFromSpiritAttack.set(val)
    @property
    def SpiritAttackHoldDuration(self):  # type: ()->Float
        return Float(self._node.at("SpiritAttackHoldDuration"))
    @SpiritAttackHoldDuration.setter
    def SpiritAttackHoldDuration(self, val): self.SpiritAttackHoldDuration.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SoundEmitterGD(HelperObject):
    schema_name = "SoundEmitterGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SoundEmitterGD
        return SoundEmitterGD(entlib.load_node_file(sourcefile, entlib.get_schema(SoundEmitterGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SoundEmitterGD
        return SoundEmitterGD(entlib.make_node(SoundEmitterGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActivationDistance(self):  # type: ()->Float
        return Float(self._node.at("ActivationDistance"))
    @ActivationDistance.setter
    def ActivationDistance(self, val): self.ActivationDistance.set(val)
    @property
    def ActivationSound(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("ActivationSound"))
    @ActivationSound.setter
    def ActivationSound(self, val): self.ActivationSound.set(val)
    @property
    def ActivationSync(self):  # type: ()->SyncTempoMode
        return SyncTempoMode(self._node.at("ActivationSync"))
    @ActivationSync.setter
    def ActivationSync(self, val): self.ActivationSync.set(val)
    @property
    def AuxSend(self):  # type: ()->String
        return String(self._node.at("AuxSend"))
    @AuxSend.setter
    def AuxSend(self, val): self.AuxSend.set(val)
    @property
    def Bank(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("Bank"))
    @Bank.setter
    def Bank(self, val): self.Bank.set(val)
    @property
    def BoidRadius(self):  # type: ()->Float
        return Float(self._node.at("BoidRadius"))
    @BoidRadius.setter
    def BoidRadius(self, val): self.BoidRadius.set(val)
    @property
    def BoidRadiusToInnerEdgeRatio(self):  # type: ()->Float
        return Float(self._node.at("BoidRadiusToInnerEdgeRatio"))
    @BoidRadiusToInnerEdgeRatio.setter
    def BoidRadiusToInnerEdgeRatio(self, val): self.BoidRadiusToInnerEdgeRatio.set(val)
    @property
    def BoidRadiusToOuterEdgeRatio(self):  # type: ()->Float
        return Float(self._node.at("BoidRadiusToOuterEdgeRatio"))
    @BoidRadiusToOuterEdgeRatio.setter
    def BoidRadiusToOuterEdgeRatio(self, val): self.BoidRadiusToOuterEdgeRatio.set(val)
    @property
    def BoidRealPositionComputation(self):  # type: ()->Bool
        return Bool(self._node.at("BoidRealPositionComputation"))
    @BoidRealPositionComputation.setter
    def BoidRealPositionComputation(self, val): self.BoidRealPositionComputation.set(val)
    @property
    def CreatureType(self):  # type: ()->String
        return String(self._node.at("CreatureType"))
    @CreatureType.setter
    def CreatureType(self, val): self.CreatureType.set(val)
    @property
    def Echoes(self):  # type: ()->Bool
        return Bool(self._node.at("Echoes"))
    @Echoes.setter
    def Echoes(self, val): self.Echoes.set(val)
    @property
    def EchoesSend(self):  # type: ()->Float
        return Float(self._node.at("EchoesSend"))
    @EchoesSend.setter
    def EchoesSend(self, val): self.EchoesSend.set(val)
    @property
    def EventDistance(self):  # type: ()->Float
        return Float(self._node.at("EventDistance"))
    @EventDistance.setter
    def EventDistance(self, val): self.EventDistance.set(val)
    @property
    def EventMapping(self):  # type: ()->SoundEventMapping
        return SoundEventMapping(self._node.at("EventMapping"))
    @property
    def InEvents(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("InEvents"))
    @InEvents.setter
    def InEvents(self, val): self.InEvents.set(val)
    @property
    def OutEvents(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("OutEvents"))
    @OutEvents.setter
    def OutEvents(self, val): self.OutEvents.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UnactivationSound(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("UnactivationSound"))
    @UnactivationSound.setter
    def UnactivationSound(self, val): self.UnactivationSound.set(val)
    @property
    def UnactivationSync(self):  # type: ()->SyncTempoMode
        return SyncTempoMode(self._node.at("UnactivationSync"))
    @UnactivationSync.setter
    def UnactivationSync(self, val): self.UnactivationSync.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def dopplerActivated(self):  # type: ()->Bool
        return Bool(self._node.at("dopplerActivated"))
    @dopplerActivated.setter
    def dopplerActivated(self, val): self.dopplerActivated.set(val)
    @property
    def relativeHeightPriority(self):  # type: ()->Int
        return Int(self._node.at("relativeHeightPriority"))
    @relativeHeightPriority.setter
    def relativeHeightPriority(self, val): self.relativeHeightPriority.set(val)
    @property
    def sendSoundAreaEvents(self):  # type: ()->Bool
        return Bool(self._node.at("sendSoundAreaEvents"))
    @sendSoundAreaEvents.setter
    def sendSoundAreaEvents(self, val): self.sendSoundAreaEvents.set(val)
    @property
    def waterDeepAltitude(self):  # type: ()->Float
        return Float(self._node.at("waterDeepAltitude"))
    @waterDeepAltitude.setter
    def waterDeepAltitude(self, val): self.waterDeepAltitude.set(val)
    @property
    def waterPuddleAltitude(self):  # type: ()->Float
        return Float(self._node.at("waterPuddleAltitude"))
    @waterPuddleAltitude.setter
    def waterPuddleAltitude(self, val): self.waterPuddleAltitude.set(val)
    pass


from EntityLibPy import Node

class SoundAreaGD(HelperObject):
    schema_name = "SoundAreaGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SoundAreaGD
        return SoundAreaGD(entlib.load_node_file(sourcefile, entlib.get_schema(SoundAreaGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SoundAreaGD
        return SoundAreaGD(entlib.make_node(SoundAreaGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EventEnter(self):  # type: ()->String
        return String(self._node.at("EventEnter"))
    @EventEnter.setter
    def EventEnter(self, val): self.EventEnter.set(val)
    @property
    def EventExit(self):  # type: ()->String
        return String(self._node.at("EventExit"))
    @EventExit.setter
    def EventExit(self, val): self.EventExit.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SoulSpotGD(HelperObject):
    schema_name = "SoulSpotGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SoulSpotGD
        return SoulSpotGD(entlib.load_node_file(sourcefile, entlib.get_schema(SoulSpotGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SoulSpotGD
        return SoulSpotGD(entlib.make_node(SoulSpotGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Tags(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("Tags"))
    @Tags.setter
    def Tags(self, val): self.Tags.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SoulRespawnOpportunityGD(HelperObject):
    schema_name = "SoulRespawnOpportunityGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SoulRespawnOpportunityGD
        return SoulRespawnOpportunityGD(entlib.load_node_file(sourcefile, entlib.get_schema(SoulRespawnOpportunityGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SoulRespawnOpportunityGD
        return SoulRespawnOpportunityGD(entlib.make_node(SoulRespawnOpportunityGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ForceReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ForceReviveSide"))
    @ForceReviveSide.setter
    def ForceReviveSide(self, val): self.ForceReviveSide.set(val)
    @property
    def MaxDensityCount(self):  # type: ()->Int
        return Int(self._node.at("MaxDensityCount"))
    @MaxDensityCount.setter
    def MaxDensityCount(self, val): self.MaxDensityCount.set(val)
    @property
    def MaxDensityRadius(self):  # type: ()->Float
        return Float(self._node.at("MaxDensityRadius"))
    @MaxDensityRadius.setter
    def MaxDensityRadius(self, val): self.MaxDensityRadius.set(val)
    @property
    def Offset(self):  # type: ()->Vector3
        return Vector3(self._node.at("Offset"))
    @Offset.setter
    def Offset(self, val): self.Offset.set(val)
    @property
    def SlotCount(self):  # type: ()->Int
        return Int(self._node.at("SlotCount"))
    @SlotCount.setter
    def SlotCount(self, val): self.SlotCount.set(val)
    @property
    def Specie(self):  # type: ()->Specie
        return Specie(self._node.at("Specie"))
    @Specie.setter
    def Specie(self, val): self.Specie.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SmoothScaleComponentGD(HelperObject):
    schema_name = "SmoothScaleComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SmoothScaleComponentGD
        return SmoothScaleComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(SmoothScaleComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SmoothScaleComponentGD
        return SmoothScaleComponentGD(entlib.make_node(SmoothScaleComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SideMapGateGD(HelperObject):
    schema_name = "SideMapGateGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SideMapGateGD
        return SideMapGateGD(entlib.load_node_file(sourcefile, entlib.get_schema(SideMapGateGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SideMapGateGD
        return SideMapGateGD(entlib.make_node(SideMapGateGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SideMapName(self):  # type: ()->String
        return String(self._node.at("SideMapName"))
    @SideMapName.setter
    def SideMapName(self, val): self.SideMapName.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShapeshiftStatueGD(HelperObject):
    schema_name = "ShapeshiftStatueGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShapeshiftStatueGD
        return ShapeshiftStatueGD(entlib.load_node_file(sourcefile, entlib.get_schema(ShapeshiftStatueGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShapeshiftStatueGD
        return ShapeshiftStatueGD(entlib.make_node(ShapeshiftStatueGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AssociatedEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("AssociatedEntityRef"))
    @AssociatedEntityRef.setter
    def AssociatedEntityRef(self, val): self.AssociatedEntityRef.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShamanVisionGD(HelperObject):
    schema_name = "ShamanVisionGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShamanVisionGD
        return ShamanVisionGD(entlib.load_node_file(sourcefile, entlib.get_schema(ShamanVisionGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShamanVisionGD
        return ShamanVisionGD(entlib.make_node(ShamanVisionGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ShamanItemGD(HelperObject):
    schema_name = "ShamanItemGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ShamanItemGD
        return ShamanItemGD(entlib.load_node_file(sourcefile, entlib.get_schema(ShamanItemGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ShamanItemGD
        return ShamanItemGD(entlib.make_node(ShamanItemGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoneNames(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("BoneNames"))
    @BoneNames.setter
    def BoneNames(self, val): self.BoneNames.set(val)
    @property
    def OppositeItemEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("OppositeItemEntityRef"))
    @OppositeItemEntityRef.setter
    def OppositeItemEntityRef(self, val): self.OppositeItemEntityRef.set(val)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def StartPartCount(self):  # type: ()->Int
        return Int(self._node.at("StartPartCount"))
    @StartPartCount.setter
    def StartPartCount(self, val): self.StartPartCount.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SensorVoxelsGD(HelperObject):
    schema_name = "SensorVoxelsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SensorVoxelsGD
        return SensorVoxelsGD(entlib.load_node_file(sourcefile, entlib.get_schema(SensorVoxelsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SensorVoxelsGD
        return SensorVoxelsGD(entlib.make_node(SensorVoxelsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def VoxelsDataPath(self):  # type: ()->String
        return String(self._node.at("VoxelsDataPath"))
    @VoxelsDataPath.setter
    def VoxelsDataPath(self, val): self.VoxelsDataPath.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SensorControllerGD(HelperObject):
    schema_name = "SensorControllerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SensorControllerGD
        return SensorControllerGD(entlib.load_node_file(sourcefile, entlib.get_schema(SensorControllerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SensorControllerGD
        return SensorControllerGD(entlib.make_node(SensorControllerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SeedPatch(HelperObject):
    schema_name = "SeedPatch"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SeedPatch
        return SeedPatch(entlib.load_node_file(sourcefile, entlib.get_schema(SeedPatch.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SeedPatch
        return SeedPatch(entlib.make_node(SeedPatch.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AddVertexColor(self):  # type: ()->Bool
        return Bool(self._node.at("AddVertexColor"))
    @AddVertexColor.setter
    def AddVertexColor(self, val): self.AddVertexColor.set(val)
    @property
    def LocalMatrix(self):  # type: ()->Matrix33
        return Matrix33(self._node.at("LocalMatrix"))
    @LocalMatrix.setter
    def LocalMatrix(self, val): self.LocalMatrix.set(val)
    @property
    def MeshFile(self):  # type: ()->String
        return String(self._node.at("MeshFile"))
    @MeshFile.setter
    def MeshFile(self, val): self.MeshFile.set(val)
    @property
    def NoiseName(self):  # type: ()->String
        return String(self._node.at("NoiseName"))
    @NoiseName.setter
    def NoiseName(self, val): self.NoiseName.set(val)
    @property
    def NoiseOffsetX(self):  # type: ()->Float
        return Float(self._node.at("NoiseOffsetX"))
    @NoiseOffsetX.setter
    def NoiseOffsetX(self, val): self.NoiseOffsetX.set(val)
    @property
    def NoiseOffsetY(self):  # type: ()->Float
        return Float(self._node.at("NoiseOffsetY"))
    @NoiseOffsetY.setter
    def NoiseOffsetY(self, val): self.NoiseOffsetY.set(val)
    @property
    def NoiseSizeX(self):  # type: ()->Float
        return Float(self._node.at("NoiseSizeX"))
    @NoiseSizeX.setter
    def NoiseSizeX(self, val): self.NoiseSizeX.set(val)
    @property
    def NoiseSizeY(self):  # type: ()->Float
        return Float(self._node.at("NoiseSizeY"))
    @NoiseSizeY.setter
    def NoiseSizeY(self, val): self.NoiseSizeY.set(val)
    @property
    def SeedName(self):  # type: ()->String
        return String(self._node.at("SeedName"))
    @SeedName.setter
    def SeedName(self, val): self.SeedName.set(val)
    @property
    def SeedOverride(self):  # type: ()->Bool
        return Bool(self._node.at("SeedOverride"))
    @SeedOverride.setter
    def SeedOverride(self, val): self.SeedOverride.set(val)
    @property
    def SeedPatchDataList(self):  # type: ()->SeedPatchDataList
        return SeedPatchDataList(self._node.at("SeedPatchDataList"))
    @property
    def SeedPatchDataMap(self):  # type: ()->SeedPatchDataMap
        return SeedPatchDataMap(self._node.at("SeedPatchDataMap"))
    @property
    def Subdivision(self):  # type: ()->Int
        return Int(self._node.at("Subdivision"))
    @Subdivision.setter
    def Subdivision(self, val): self.Subdivision.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ScriptComponentGD(HelperObject):
    schema_name = "ScriptComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ScriptComponentGD
        return ScriptComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(ScriptComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ScriptComponentGD
        return ScriptComponentGD(entlib.make_node(ScriptComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CommonDataMap(self):  # type: ()->Map[str, TypedValue]
        return (lambda n: Map(str, TypedValue, n))(self._node.at("CommonDataMap"))
    @property
    def ScriptsMap(self):  # type: ()->Map[str, ScriptPathAndDataSet]
        return (lambda n: Map(str, ScriptPathAndDataSet, n))(self._node.at("ScriptsMap"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReviveSideSwitcherGD(HelperObject):
    schema_name = "ReviveSideSwitcherGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReviveSideSwitcherGD
        return ReviveSideSwitcherGD(entlib.load_node_file(sourcefile, entlib.get_schema(ReviveSideSwitcherGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReviveSideSwitcherGD
        return ReviveSideSwitcherGD(entlib.make_node(ReviveSideSwitcherGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ReviveEnergyEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("ReviveEnergyEntityRef"))
    @ReviveEnergyEntityRef.setter
    def ReviveEnergyEntityRef(self, val): self.ReviveEnergyEntityRef.set(val)
    @property
    def ReviveSideData(self):  # type: ()->Map[ReviveSideEnum, ReviveSideData]
        return (lambda n: Map(ReviveSideEnum, ReviveSideData, n))(self._node.at("ReviveSideData"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ReviveEnergyGD(HelperObject):
    schema_name = "ReviveEnergyGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReviveEnergyGD
        return ReviveEnergyGD(entlib.load_node_file(sourcefile, entlib.get_schema(ReviveEnergyGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReviveEnergyGD
        return ReviveEnergyGD(entlib.make_node(ReviveEnergyGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EnergyMinNeutral(self):  # type: ()->Float
        return Float(self._node.at("EnergyMinNeutral"))
    @EnergyMinNeutral.setter
    def EnergyMinNeutral(self, val): self.EnergyMinNeutral.set(val)
    @property
    def HatchingCostsEnergy(self):  # type: ()->Bool
        return Bool(self._node.at("HatchingCostsEnergy"))
    @HatchingCostsEnergy.setter
    def HatchingCostsEnergy(self, val): self.HatchingCostsEnergy.set(val)
    @property
    def HatchingEnergyMinHysteresis(self):  # type: ()->Float
        return Float(self._node.at("HatchingEnergyMinHysteresis"))
    @HatchingEnergyMinHysteresis.setter
    def HatchingEnergyMinHysteresis(self, val): self.HatchingEnergyMinHysteresis.set(val)
    @property
    def HatchingMaxDuration(self):  # type: ()->Float
        return Float(self._node.at("HatchingMaxDuration"))
    @HatchingMaxDuration.setter
    def HatchingMaxDuration(self, val): self.HatchingMaxDuration.set(val)
    @property
    def InitEnergy(self):  # type: ()->Float
        return Float(self._node.at("InitEnergy"))
    @InitEnergy.setter
    def InitEnergy(self, val): self.InitEnergy.set(val)
    @property
    def InitReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("InitReviveSide"))
    @InitReviveSide.setter
    def InitReviveSide(self, val): self.InitReviveSide.set(val)
    @property
    def MaxEnergy(self):  # type: ()->Float
        return Float(self._node.at("MaxEnergy"))
    @MaxEnergy.setter
    def MaxEnergy(self, val): self.MaxEnergy.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TimeBetweenShot(self):  # type: ()->Float
        return Float(self._node.at("TimeBetweenShot"))
    @TimeBetweenShot.setter
    def TimeBetweenShot(self, val): self.TimeBetweenShot.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RespawnPlaceGD(HelperObject):
    schema_name = "RespawnPlaceGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RespawnPlaceGD
        return RespawnPlaceGD(entlib.load_node_file(sourcefile, entlib.get_schema(RespawnPlaceGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RespawnPlaceGD
        return RespawnPlaceGD(entlib.make_node(RespawnPlaceGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AlwaysAvailable(self):  # type: ()->Bool
        return Bool(self._node.at("AlwaysAvailable"))
    @AlwaysAvailable.setter
    def AlwaysAvailable(self, val): self.AlwaysAvailable.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegenerableVegetationGD(HelperObject):
    schema_name = "RegenerableVegetationGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenerableVegetationGD
        return RegenerableVegetationGD(entlib.load_node_file(sourcefile, entlib.get_schema(RegenerableVegetationGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenerableVegetationGD
        return RegenerableVegetationGD(entlib.make_node(RegenerableVegetationGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PCloudPath(self):  # type: ()->String
        return String(self._node.at("PCloudPath"))
    @PCloudPath.setter
    def PCloudPath(self, val): self.PCloudPath.set(val)
    @property
    def RegenRange(self):  # type: ()->FloatRange
        return FloatRange(self._node.at("RegenRange"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UsedVegetations(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("UsedVegetations"))
    @UsedVegetations.setter
    def UsedVegetations(self, val): self.UsedVegetations.set(val)
    @property
    def VegetationPClouds(self):  # type: ()->Array[VegetationPCloudData]
        return (lambda n: Array(VegetationPCloudData, n))(self._node.at("VegetationPClouds"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegenSwitcherGD(HelperObject):
    schema_name = "RegenSwitcherGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenSwitcherGD
        return RegenSwitcherGD(entlib.load_node_file(sourcefile, entlib.get_schema(RegenSwitcherGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenSwitcherGD
        return RegenSwitcherGD(entlib.make_node(RegenSwitcherGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ParentTransforms(self):  # type: ()->Bool
        return Bool(self._node.at("ParentTransforms"))
    @ParentTransforms.setter
    def ParentTransforms(self, val): self.ParentTransforms.set(val)
    @property
    def RegenData(self):  # type: ()->Array[RegenData]
        return (lambda n: Array(RegenData, n))(self._node.at("RegenData"))
    @property
    def RegenSwitchBehavior(self):  # type: ()->RegenSwitchBehavior
        return RegenSwitchBehavior(self._node.at("RegenSwitchBehavior"))
    @RegenSwitchBehavior.setter
    def RegenSwitchBehavior(self, val): self.RegenSwitchBehavior.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegenMeshGD(HelperObject):
    schema_name = "RegenMeshGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenMeshGD
        return RegenMeshGD(entlib.load_node_file(sourcefile, entlib.get_schema(RegenMeshGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenMeshGD
        return RegenMeshGD(entlib.make_node(RegenMeshGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FilePath(self):  # type: ()->String
        return String(self._node.at("FilePath"))
    @FilePath.setter
    def FilePath(self, val): self.FilePath.set(val)
    @property
    def FrontierHeightDetection(self):  # type: ()->Float
        return Float(self._node.at("FrontierHeightDetection"))
    @FrontierHeightDetection.setter
    def FrontierHeightDetection(self, val): self.FrontierHeightDetection.set(val)
    @property
    def FrontierTolerance(self):  # type: ()->Float
        return Float(self._node.at("FrontierTolerance"))
    @FrontierTolerance.setter
    def FrontierTolerance(self, val): self.FrontierTolerance.set(val)
    @property
    def LossBySecond(self):  # type: ()->Float
        return Float(self._node.at("LossBySecond"))
    @LossBySecond.setter
    def LossBySecond(self, val): self.LossBySecond.set(val)
    @property
    def LostRatio(self):  # type: ()->Float
        return Float(self._node.at("LostRatio"))
    @LostRatio.setter
    def LostRatio(self, val): self.LostRatio.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TransmissionPerSecond(self):  # type: ()->Float
        return Float(self._node.at("TransmissionPerSecond"))
    @TransmissionPerSecond.setter
    def TransmissionPerSecond(self, val): self.TransmissionPerSecond.set(val)
    @property
    def TransmissionRatio(self):  # type: ()->Float
        return Float(self._node.at("TransmissionRatio"))
    @TransmissionRatio.setter
    def TransmissionRatio(self, val): self.TransmissionRatio.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RegenFXGD(HelperObject):
    schema_name = "RegenFXGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RegenFXGD
        return RegenFXGD(entlib.load_node_file(sourcefile, entlib.get_schema(RegenFXGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RegenFXGD
        return RegenFXGD(entlib.make_node(RegenFXGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RagdollGD(HelperObject):
    schema_name = "RagdollGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RagdollGD
        return RagdollGD(entlib.load_node_file(sourcefile, entlib.get_schema(RagdollGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RagdollGD
        return RagdollGD(entlib.make_node(RagdollGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def RagdollType(self):  # type: ()->String
        return String(self._node.at("RagdollType"))
    @RagdollType.setter
    def RagdollType(self, val): self.RagdollType.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class QuickCreatureSwitchGD(HelperObject):
    schema_name = "QuickCreatureSwitchGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->QuickCreatureSwitchGD
        return QuickCreatureSwitchGD(entlib.load_node_file(sourcefile, entlib.get_schema(QuickCreatureSwitchGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->QuickCreatureSwitchGD
        return QuickCreatureSwitchGD(entlib.make_node(QuickCreatureSwitchGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CreatureEntityRefs(self):  # type: ()->PrimArray[EntityRef]
        return (lambda n: PrimArray(EntityRef, n))(self._node.at("CreatureEntityRefs"))
    @CreatureEntityRefs.setter
    def CreatureEntityRefs(self, val): self.CreatureEntityRefs.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ProtoComponentGD(HelperObject):
    schema_name = "ProtoComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ProtoComponentGD
        return ProtoComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(ProtoComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ProtoComponentGD
        return ProtoComponentGD(entlib.make_node(ProtoComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ProjectileShooterGD(HelperObject):
    schema_name = "ProjectileShooterGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ProjectileShooterGD
        return ProjectileShooterGD(entlib.load_node_file(sourcefile, entlib.get_schema(ProjectileShooterGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ProjectileShooterGD
        return ProjectileShooterGD(entlib.make_node(ProjectileShooterGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ProjectileShooterData(self):  # type: ()->Map[str, ProjectileShooterData]
        return (lambda n: Map(str, ProjectileShooterData, n))(self._node.at("ProjectileShooterData"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PossessableGPEGD(HelperObject):
    schema_name = "PossessableGPEGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PossessableGPEGD
        return PossessableGPEGD(entlib.load_node_file(sourcefile, entlib.get_schema(PossessableGPEGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PossessableGPEGD
        return PossessableGPEGD(entlib.make_node(PossessableGPEGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GPEActorStateName(self):  # type: ()->String
        return String(self._node.at("GPEActorStateName"))
    @GPEActorStateName.setter
    def GPEActorStateName(self, val): self.GPEActorStateName.set(val)
    @property
    def GPEType(self):  # type: ()->GPEType
        return GPEType(self._node.at("GPEType"))
    @GPEType.setter
    def GPEType(self, val): self.GPEType.set(val)
    @property
    def HotspotName(self):  # type: ()->String
        return String(self._node.at("HotspotName"))
    @HotspotName.setter
    def HotspotName(self, val): self.HotspotName.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PlayerComponentGD(HelperObject):
    schema_name = "PlayerComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PlayerComponentGD
        return PlayerComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(PlayerComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PlayerComponentGD
        return PlayerComponentGD(entlib.make_node(PlayerComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PickableDistributorComponentGD(HelperObject):
    schema_name = "PickableDistributorComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PickableDistributorComponentGD
        return PickableDistributorComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(PickableDistributorComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PickableDistributorComponentGD
        return PickableDistributorComponentGD(entlib.make_node(PickableDistributorComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PickableGrowingTime(self):  # type: ()->Float
        return Float(self._node.at("PickableGrowingTime"))
    @PickableGrowingTime.setter
    def PickableGrowingTime(self, val): self.PickableGrowingTime.set(val)
    @property
    def PickablePickedUpCooldownTime(self):  # type: ()->Float
        return Float(self._node.at("PickablePickedUpCooldownTime"))
    @PickablePickedUpCooldownTime.setter
    def PickablePickedUpCooldownTime(self, val): self.PickablePickedUpCooldownTime.set(val)
    @property
    def PickablesList(self):  # type: ()->Array[PickableDistributorComponentData]
        return (lambda n: Array(PickableDistributorComponentData, n))(self._node.at("PickablesList"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PickableComponentGD(HelperObject):
    schema_name = "PickableComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PickableComponentGD
        return PickableComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(PickableComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PickableComponentGD
        return PickableComponentGD(entlib.make_node(PickableComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def StatesForPicker(self):  # type: ()->Array[ResponsiblePointer_ActorState_]
        return (lambda n: Array(ResponsiblePointer_ActorState_, n))(self._node.at("StatesForPicker"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PhysicsTriggerGD(HelperObject):
    schema_name = "PhysicsTriggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsTriggerGD
        return PhysicsTriggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsTriggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsTriggerGD
        return PhysicsTriggerGD(entlib.make_node(PhysicsTriggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def RequiredComponents(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("RequiredComponents"))
    @RequiredComponents.setter
    def RequiredComponents(self, val): self.RequiredComponents.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PhysicsMeshProviderGD(HelperObject):
    schema_name = "PhysicsMeshProviderGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsMeshProviderGD
        return PhysicsMeshProviderGD(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsMeshProviderGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsMeshProviderGD
        return PhysicsMeshProviderGD(entlib.make_node(PhysicsMeshProviderGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EdgeTransitionConstraintAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("EdgeTransitionConstraintAllowed"))
    @EdgeTransitionConstraintAllowed.setter
    def EdgeTransitionConstraintAllowed(self, val): self.EdgeTransitionConstraintAllowed.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PhysicsMeshDeformerGD(HelperObject):
    schema_name = "PhysicsMeshDeformerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsMeshDeformerGD
        return PhysicsMeshDeformerGD(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsMeshDeformerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsMeshDeformerGD
        return PhysicsMeshDeformerGD(entlib.make_node(PhysicsMeshDeformerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PhysicsGD(HelperObject):
    schema_name = "PhysicsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsGD
        return PhysicsGD(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsGD
        return PhysicsGD(entlib.make_node(PhysicsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AffectByHit(self):  # type: ()->Bool
        return Bool(self._node.at("AffectByHit"))
    @AffectByHit.setter
    def AffectByHit(self, val): self.AffectByHit.set(val)
    @property
    def AngularDamping(self):  # type: ()->Float
        return Float(self._node.at("AngularDamping"))
    @AngularDamping.setter
    def AngularDamping(self, val): self.AngularDamping.set(val)
    @property
    def AxisRestriction(self):  # type: ()->Vector3
        return Vector3(self._node.at("AxisRestriction"))
    @AxisRestriction.setter
    def AxisRestriction(self, val): self.AxisRestriction.set(val)
    @property
    def CameraIgnored(self):  # type: ()->Bool
        return Bool(self._node.at("CameraIgnored"))
    @CameraIgnored.setter
    def CameraIgnored(self, val): self.CameraIgnored.set(val)
    @property
    def Ccd(self):  # type: ()->Bool
        return Bool(self._node.at("Ccd"))
    @Ccd.setter
    def Ccd(self, val): self.Ccd.set(val)
    @property
    def EDITOR_MeshColliders(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("EDITOR_MeshColliders"))
    @EDITOR_MeshColliders.setter
    def EDITOR_MeshColliders(self, val): self.EDITOR_MeshColliders.set(val)
    @property
    def EDITOR_MeshEdges(self):  # type: ()->String
        return String(self._node.at("EDITOR_MeshEdges"))
    @EDITOR_MeshEdges.setter
    def EDITOR_MeshEdges(self, val): self.EDITOR_MeshEdges.set(val)
    @property
    def EDITOR_NavMeshStamper(self):  # type: ()->String
        return String(self._node.at("EDITOR_NavMeshStamper"))
    @EDITOR_NavMeshStamper.setter
    def EDITOR_NavMeshStamper(self, val): self.EDITOR_NavMeshStamper.set(val)
    @property
    def EnergyLoss(self):  # type: ()->Float
        return Float(self._node.at("EnergyLoss"))
    @EnergyLoss.setter
    def EnergyLoss(self, val): self.EnergyLoss.set(val)
    @property
    def Friction(self):  # type: ()->Float
        return Float(self._node.at("Friction"))
    @Friction.setter
    def Friction(self, val): self.Friction.set(val)
    @property
    def HasGravity(self):  # type: ()->Bool
        return Bool(self._node.at("HasGravity"))
    @HasGravity.setter
    def HasGravity(self, val): self.HasGravity.set(val)
    @property
    def LinearDamping(self):  # type: ()->Float
        return Float(self._node.at("LinearDamping"))
    @LinearDamping.setter
    def LinearDamping(self, val): self.LinearDamping.set(val)
    @property
    def Mass(self):  # type: ()->Float
        return Float(self._node.at("Mass"))
    @Mass.setter
    def Mass(self, val): self.Mass.set(val)
    @property
    def MeshColliders(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("MeshColliders"))
    @MeshColliders.setter
    def MeshColliders(self, val): self.MeshColliders.set(val)
    @property
    def MeshEdges(self):  # type: ()->String
        return String(self._node.at("MeshEdges"))
    @MeshEdges.setter
    def MeshEdges(self, val): self.MeshEdges.set(val)
    @property
    def MotionType(self):  # type: ()->String
        return String(self._node.at("MotionType"))
    @MotionType.setter
    def MotionType(self, val): self.MotionType.set(val)
    @property
    def NavMeshStamper(self):  # type: ()->String
        return String(self._node.at("NavMeshStamper"))
    @NavMeshStamper.setter
    def NavMeshStamper(self, val): self.NavMeshStamper.set(val)
    @property
    def Offset(self):  # type: ()->Vector3
        return Vector3(self._node.at("Offset"))
    @Offset.setter
    def Offset(self, val): self.Offset.set(val)
    @property
    def OffsetRotation(self):  # type: ()->Vector3
        return Vector3(self._node.at("OffsetRotation"))
    @OffsetRotation.setter
    def OffsetRotation(self, val): self.OffsetRotation.set(val)
    @property
    def PhysicsMaterial(self):  # type: ()->String
        return String(self._node.at("PhysicsMaterial"))
    @PhysicsMaterial.setter
    def PhysicsMaterial(self, val): self.PhysicsMaterial.set(val)
    @property
    def PrimitiveCollider(self):  # type: ()->PrimitiveColliderType
        return PrimitiveColliderType(self._node.at("PrimitiveCollider"))
    @PrimitiveCollider.setter
    def PrimitiveCollider(self, val): self.PrimitiveCollider.set(val)
    @property
    def PrimitiveColliderSizeLayerMask(self):  # type: ()->PrimArray[Size]
        return (lambda n: PrimArray(Size, n))(self._node.at("PrimitiveColliderSizeLayerMask"))
    @PrimitiveColliderSizeLayerMask.setter
    def PrimitiveColliderSizeLayerMask(self, val): self.PrimitiveColliderSizeLayerMask.set(val)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def Restitution(self):  # type: ()->Float
        return Float(self._node.at("Restitution"))
    @Restitution.setter
    def Restitution(self, val): self.Restitution.set(val)
    @property
    def SelfFilter(self):  # type: ()->PrimArray[PhysicsLayer]
        return (lambda n: PrimArray(PhysicsLayer, n))(self._node.at("SelfFilter"))
    @SelfFilter.setter
    def SelfFilter(self, val): self.SelfFilter.set(val)
    @property
    def Size(self):  # type: ()->Vector3
        return Vector3(self._node.at("Size"))
    @Size.setter
    def Size(self, val): self.Size.set(val)
    @property
    def Sleep(self):  # type: ()->Bool
        return Bool(self._node.at("Sleep"))
    @Sleep.setter
    def Sleep(self, val): self.Sleep.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TargetFilter(self):  # type: ()->PrimArray[PhysicsLayer]
        return (lambda n: PrimArray(PhysicsLayer, n))(self._node.at("TargetFilter"))
    @TargetFilter.setter
    def TargetFilter(self, val): self.TargetFilter.set(val)
    @property
    def Walkable(self):  # type: ()->Bool
        return Bool(self._node.at("Walkable"))
    @Walkable.setter
    def Walkable(self, val): self.Walkable.set(val)
    @property
    def WalkableSoundSwitch(self):  # type: ()->String
        return String(self._node.at("WalkableSoundSwitch"))
    @WalkableSoundSwitch.setter
    def WalkableSoundSwitch(self, val): self.WalkableSoundSwitch.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PhysicsDataGD(HelperObject):
    schema_name = "PhysicsDataGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsDataGD
        return PhysicsDataGD(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsDataGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsDataGD
        return PhysicsDataGD(entlib.make_node(PhysicsDataGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EDITOR_Shapes(self):  # type: ()->Array[EDITOR_Mesh]
        return (lambda n: Array(EDITOR_Mesh, n))(self._node.at("EDITOR_Shapes"))
    @property
    def EDITOR_isTrigger(self):  # type: ()->Bool
        return Bool(self._node.at("EDITOR_isTrigger"))
    @EDITOR_isTrigger.setter
    def EDITOR_isTrigger(self, val): self.EDITOR_isTrigger.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def joints(self):  # type: ()->Array[sPhysicsJointDesc]
        return (lambda n: Array(sPhysicsJointDesc, n))(self._node.at("joints"))
    @property
    def rigidBodies(self):  # type: ()->Array[sRigidBodyDesc]
        return (lambda n: Array(sRigidBodyDesc, n))(self._node.at("rigidBodies"))
    pass


from EntityLibPy import Node

class PerceiverGD(HelperObject):
    schema_name = "PerceiverGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PerceiverGD
        return PerceiverGD(entlib.load_node_file(sourcefile, entlib.get_schema(PerceiverGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PerceiverGD
        return PerceiverGD(entlib.make_node(PerceiverGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def m_coneAngle(self):  # type: ()->Float
        return Float(self._node.at("m_coneAngle"))
    @m_coneAngle.setter
    def m_coneAngle(self, val): self.m_coneAngle.set(val)
    @property
    def m_farSoundDistance(self):  # type: ()->Float
        return Float(self._node.at("m_farSoundDistance"))
    @m_farSoundDistance.setter
    def m_farSoundDistance(self, val): self.m_farSoundDistance.set(val)
    @property
    def m_longRangeDistance(self):  # type: ()->Float
        return Float(self._node.at("m_longRangeDistance"))
    @m_longRangeDistance.setter
    def m_longRangeDistance(self, val): self.m_longRangeDistance.set(val)
    @property
    def m_lowRangeDistance(self):  # type: ()->Float
        return Float(self._node.at("m_lowRangeDistance"))
    @m_lowRangeDistance.setter
    def m_lowRangeDistance(self, val): self.m_lowRangeDistance.set(val)
    @property
    def m_middleRangeDistance(self):  # type: ()->Float
        return Float(self._node.at("m_middleRangeDistance"))
    @m_middleRangeDistance.setter
    def m_middleRangeDistance(self, val): self.m_middleRangeDistance.set(val)
    @property
    def m_middleSoundDistance(self):  # type: ()->Float
        return Float(self._node.at("m_middleSoundDistance"))
    @m_middleSoundDistance.setter
    def m_middleSoundDistance(self, val): self.m_middleSoundDistance.set(val)
    @property
    def m_nearSoundDistance(self):  # type: ()->Float
        return Float(self._node.at("m_nearSoundDistance"))
    @m_nearSoundDistance.setter
    def m_nearSoundDistance(self, val): self.m_nearSoundDistance.set(val)
    @property
    def m_perceptionHeightMultiplier(self):  # type: ()->Float
        return Float(self._node.at("m_perceptionHeightMultiplier"))
    @m_perceptionHeightMultiplier.setter
    def m_perceptionHeightMultiplier(self, val): self.m_perceptionHeightMultiplier.set(val)
    @property
    def m_perceptionHeightMultiplierHeightMax(self):  # type: ()->Float
        return Float(self._node.at("m_perceptionHeightMultiplierHeightMax"))
    @m_perceptionHeightMultiplierHeightMax.setter
    def m_perceptionHeightMultiplierHeightMax(self, val): self.m_perceptionHeightMultiplierHeightMax.set(val)
    @property
    def m_rayCastCheck(self):  # type: ()->Bool
        return Bool(self._node.at("m_rayCastCheck"))
    @m_rayCastCheck.setter
    def m_rayCastCheck(self, val): self.m_rayCastCheck.set(val)
    pass


from EntityLibPy import Node

class PerceivableGD(HelperObject):
    schema_name = "PerceivableGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PerceivableGD
        return PerceivableGD(entlib.load_node_file(sourcefile, entlib.get_schema(PerceivableGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PerceivableGD
        return PerceivableGD(entlib.make_node(PerceivableGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def m_perceivedDistanceMultiplier(self):  # type: ()->Float
        return Float(self._node.at("m_perceivedDistanceMultiplier"))
    @m_perceivedDistanceMultiplier.setter
    def m_perceivedDistanceMultiplier(self, val): self.m_perceivedDistanceMultiplier.set(val)
    @property
    def m_soundCrouch(self):  # type: ()->SoundEmissionStrength
        return SoundEmissionStrength(self._node.at("m_soundCrouch"))
    @m_soundCrouch.setter
    def m_soundCrouch(self, val): self.m_soundCrouch.set(val)
    @property
    def m_soundImmobile(self):  # type: ()->SoundEmissionStrength
        return SoundEmissionStrength(self._node.at("m_soundImmobile"))
    @m_soundImmobile.setter
    def m_soundImmobile(self, val): self.m_soundImmobile.set(val)
    @property
    def m_soundRun(self):  # type: ()->SoundEmissionStrength
        return SoundEmissionStrength(self._node.at("m_soundRun"))
    @m_soundRun.setter
    def m_soundRun(self, val): self.m_soundRun.set(val)
    @property
    def m_soundWalk(self):  # type: ()->SoundEmissionStrength
        return SoundEmissionStrength(self._node.at("m_soundWalk"))
    @m_soundWalk.setter
    def m_soundWalk(self, val): self.m_soundWalk.set(val)
    @property
    def m_tags(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("m_tags"))
    @m_tags.setter
    def m_tags(self, val): self.m_tags.set(val)
    pass


from EntityLibPy import Node

class PathNodeGD(HelperObject):
    schema_name = "PathNodeGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PathNodeGD
        return PathNodeGD(entlib.load_node_file(sourcefile, entlib.get_schema(PathNodeGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PathNodeGD
        return PathNodeGD(entlib.make_node(PathNodeGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Tags(self):  # type: ()->TagsList
        return TagsList(self._node.at("Tags"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PathMotionControllerGD(HelperObject):
    schema_name = "PathMotionControllerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PathMotionControllerGD
        return PathMotionControllerGD(entlib.load_node_file(sourcefile, entlib.get_schema(PathMotionControllerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PathMotionControllerGD
        return PathMotionControllerGD(entlib.make_node(PathMotionControllerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PathGD(HelperObject):
    schema_name = "PathGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PathGD
        return PathGD(entlib.load_node_file(sourcefile, entlib.get_schema(PathGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PathGD
        return PathGD(entlib.make_node(PathGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FilePath(self):  # type: ()->String
        return String(self._node.at("FilePath"))
    @FilePath.setter
    def FilePath(self, val): self.FilePath.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PathBoneRigidBodyGD(HelperObject):
    schema_name = "PathBoneRigidBodyGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PathBoneRigidBodyGD
        return PathBoneRigidBodyGD(entlib.load_node_file(sourcefile, entlib.get_schema(PathBoneRigidBodyGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PathBoneRigidBodyGD
        return PathBoneRigidBodyGD(entlib.make_node(PathBoneRigidBodyGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PathBoneInfluenceGD(HelperObject):
    schema_name = "PathBoneInfluenceGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PathBoneInfluenceGD
        return PathBoneInfluenceGD(entlib.load_node_file(sourcefile, entlib.get_schema(PathBoneInfluenceGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PathBoneInfluenceGD
        return PathBoneInfluenceGD(entlib.make_node(PathBoneInfluenceGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Data(self):  # type: ()->Array[sNodeBoneInfluenceDataTemplate]
        return (lambda n: Array(sNodeBoneInfluenceDataTemplate, n))(self._node.at("Data"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PathBoneAnimGD(HelperObject):
    schema_name = "PathBoneAnimGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PathBoneAnimGD
        return PathBoneAnimGD(entlib.load_node_file(sourcefile, entlib.get_schema(PathBoneAnimGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PathBoneAnimGD
        return PathBoneAnimGD(entlib.make_node(PathBoneAnimGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class OutfitWearerGD(HelperObject):
    schema_name = "OutfitWearerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->OutfitWearerGD
        return OutfitWearerGD(entlib.load_node_file(sourcefile, entlib.get_schema(OutfitWearerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->OutfitWearerGD
        return OutfitWearerGD(entlib.make_node(OutfitWearerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def InventoryEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("InventoryEntityRef"))
    @InventoryEntityRef.setter
    def InventoryEntityRef(self, val): self.InventoryEntityRef.set(val)
    @property
    def OutfitFadeDelay(self):  # type: ()->Float
        return Float(self._node.at("OutfitFadeDelay"))
    @OutfitFadeDelay.setter
    def OutfitFadeDelay(self, val): self.OutfitFadeDelay.set(val)
    @property
    def OutfitFadeDuration(self):  # type: ()->Float
        return Float(self._node.at("OutfitFadeDuration"))
    @OutfitFadeDuration.setter
    def OutfitFadeDuration(self, val): self.OutfitFadeDuration.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class OutfitGD(HelperObject):
    schema_name = "OutfitGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->OutfitGD
        return OutfitGD(entlib.load_node_file(sourcefile, entlib.get_schema(OutfitGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->OutfitGD
        return OutfitGD(entlib.make_node(OutfitGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SnapLine(self):  # type: ()->Array[MountableSnapLine_ControlPoint]
        return (lambda n: Array(MountableSnapLine_ControlPoint, n))(self._node.at("SnapLine"))
    @property
    def SoundEventMappingRules(self):  # type: ()->SoundEventMapping
        return SoundEventMapping(self._node.at("SoundEventMappingRules"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def clothes(self):  # type: ()->Array[OutfitPiece]
        return (lambda n: Array(OutfitPiece, n))(self._node.at("clothes"))
    @property
    def faction(self):  # type: ()->String
        return String(self._node.at("faction"))
    @faction.setter
    def faction(self, val): self.faction.set(val)
    @property
    def overrideSpeciesAudioCategory(self):  # type: ()->String
        return String(self._node.at("overrideSpeciesAudioCategory"))
    @overrideSpeciesAudioCategory.setter
    def overrideSpeciesAudioCategory(self, val): self.overrideSpeciesAudioCategory.set(val)
    @property
    def soundBank(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("soundBank"))
    @soundBank.setter
    def soundBank(self, val): self.soundBank.set(val)
    @property
    def soundTag(self):  # type: ()->String
        return String(self._node.at("soundTag"))
    @soundTag.setter
    def soundTag(self, val): self.soundTag.set(val)
    @property
    def specialOutfitStyle(self):  # type: ()->StyleMode
        return StyleMode(self._node.at("specialOutfitStyle"))
    @specialOutfitStyle.setter
    def specialOutfitStyle(self, val): self.specialOutfitStyle.set(val)
    @property
    def spirit(self):  # type: ()->Bool
        return Bool(self._node.at("spirit"))
    @spirit.setter
    def spirit(self, val): self.spirit.set(val)
    pass


from EntityLibPy import Node

class NotVisibleInSubscene(HelperObject):
    schema_name = "NotVisibleInSubscene"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NotVisibleInSubscene
        return NotVisibleInSubscene(entlib.load_node_file(sourcefile, entlib.get_schema(NotVisibleInSubscene.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NotVisibleInSubscene
        return NotVisibleInSubscene(entlib.make_node(NotVisibleInSubscene.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class NetworkNode(HelperObject):
    schema_name = "NetworkNode"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NetworkNode
        return NetworkNode(entlib.load_node_file(sourcefile, entlib.get_schema(NetworkNode.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NetworkNode
        return NetworkNode(entlib.make_node(NetworkNode.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Tag(self):  # type: ()->String
        return String(self._node.at("Tag"))
    @Tag.setter
    def Tag(self, val): self.Tag.set(val)
    @property
    def ThumbnailMesh(self):  # type: ()->String
        return String(self._node.at("ThumbnailMesh"))
    @ThumbnailMesh.setter
    def ThumbnailMesh(self, val): self.ThumbnailMesh.set(val)
    @property
    def Type_(self):  # type: ()->String
        return String(self._node.at("Type"))
    @Type_.setter
    def Type_(self, val): self.Type_.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class NetworkLink(HelperObject):
    schema_name = "NetworkLink"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NetworkLink
        return NetworkLink(entlib.load_node_file(sourcefile, entlib.get_schema(NetworkLink.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NetworkLink
        return NetworkLink(entlib.make_node(NetworkLink.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Source(self):  # type: ()->String
        return String(self._node.at("Source"))
    @Source.setter
    def Source(self, val): self.Source.set(val)
    @property
    def SourceEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("SourceEntityRef"))
    @SourceEntityRef.setter
    def SourceEntityRef(self, val): self.SourceEntityRef.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Target(self):  # type: ()->String
        return String(self._node.at("Target"))
    @Target.setter
    def Target(self, val): self.Target.set(val)
    @property
    def TargetEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("TargetEntityRef"))
    @TargetEntityRef.setter
    def TargetEntityRef(self, val): self.TargetEntityRef.set(val)
    @property
    def ThumbnailMesh(self):  # type: ()->String
        return String(self._node.at("ThumbnailMesh"))
    @ThumbnailMesh.setter
    def ThumbnailMesh(self, val): self.ThumbnailMesh.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class NetGD(HelperObject):
    schema_name = "NetGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NetGD
        return NetGD(entlib.load_node_file(sourcefile, entlib.get_schema(NetGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NetGD
        return NetGD(entlib.make_node(NetGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class NavMeshRasterizerGD(HelperObject):
    schema_name = "NavMeshRasterizerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NavMeshRasterizerGD
        return NavMeshRasterizerGD(entlib.load_node_file(sourcefile, entlib.get_schema(NavMeshRasterizerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NavMeshRasterizerGD
        return NavMeshRasterizerGD(entlib.make_node(NavMeshRasterizerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GridSize(self):  # type: ()->Float
        return Float(self._node.at("GridSize"))
    @GridSize.setter
    def GridSize(self, val): self.GridSize.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MultiThumbnail(HelperObject):
    schema_name = "MultiThumbnail"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MultiThumbnail
        return MultiThumbnail(entlib.load_node_file(sourcefile, entlib.get_schema(MultiThumbnail.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MultiThumbnail
        return MultiThumbnail(entlib.make_node(MultiThumbnail.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def List(self):  # type: ()->Array[ListItem]
        return (lambda n: Array(ListItem, n))(self._node.at("List"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MounterGD(HelperObject):
    schema_name = "MounterGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MounterGD
        return MounterGD(entlib.load_node_file(sourcefile, entlib.get_schema(MounterGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MounterGD
        return MounterGD(entlib.make_node(MounterGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HotspotName(self):  # type: ()->String
        return String(self._node.at("HotspotName"))
    @HotspotName.setter
    def HotspotName(self, val): self.HotspotName.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MountableGD(HelperObject):
    schema_name = "MountableGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MountableGD
        return MountableGD(entlib.load_node_file(sourcefile, entlib.get_schema(MountableGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MountableGD
        return MountableGD(entlib.make_node(MountableGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HotspotNames(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("HotspotNames"))
    @HotspotNames.setter
    def HotspotNames(self, val): self.HotspotNames.set(val)
    @property
    def SnapLine(self):  # type: ()->Array[MountableSnapLine_ControlPoint]
        return (lambda n: Array(MountableSnapLine_ControlPoint, n))(self._node.at("SnapLine"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MountIKControllerGD(HelperObject):
    schema_name = "MountIKControllerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MountIKControllerGD
        return MountIKControllerGD(entlib.load_node_file(sourcefile, entlib.get_schema(MountIKControllerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MountIKControllerGD
        return MountIKControllerGD(entlib.make_node(MountIKControllerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def horizontalSpineLeanFactor(self):  # type: ()->Float
        return Float(self._node.at("horizontalSpineLeanFactor"))
    @horizontalSpineLeanFactor.setter
    def horizontalSpineLeanFactor(self, val): self.horizontalSpineLeanFactor.set(val)
    pass


from EntityLibPy import Node

class MissionHolderGD(HelperObject):
    schema_name = "MissionHolderGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MissionHolderGD
        return MissionHolderGD(entlib.load_node_file(sourcefile, entlib.get_schema(MissionHolderGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MissionHolderGD
        return MissionHolderGD(entlib.make_node(MissionHolderGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Private(self):  # type: ()->Bool
        return Bool(self._node.at("Private"))
    @Private.setter
    def Private(self, val): self.Private.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class MeshNavigationInfosGD(HelperObject):
    schema_name = "MeshNavigationInfosGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MeshNavigationInfosGD
        return MeshNavigationInfosGD(entlib.load_node_file(sourcefile, entlib.get_schema(MeshNavigationInfosGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MeshNavigationInfosGD
        return MeshNavigationInfosGD(entlib.make_node(MeshNavigationInfosGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Mesh(HelperObject):
    schema_name = "Mesh"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Mesh
        return Mesh(entlib.load_node_file(sourcefile, entlib.get_schema(Mesh.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Mesh
        return Mesh(entlib.make_node(Mesh.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def File(self):  # type: ()->String
        return String(self._node.at("File"))
    @File.setter
    def File(self, val): self.File.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class LDPrimitive(HelperObject):
    schema_name = "LDPrimitive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->LDPrimitive
        return LDPrimitive(entlib.load_node_file(sourcefile, entlib.get_schema(LDPrimitive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->LDPrimitive
        return LDPrimitive(entlib.make_node(LDPrimitive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def NonDisuptive(self):  # type: ()->Bool
        return Bool(self._node.at("NonDisuptive"))
    @NonDisuptive.setter
    def NonDisuptive(self, val): self.NonDisuptive.set(val)
    @property
    def PrimitiveData(self):  # type: ()->PrimitiveData
        return PrimitiveData(self._node.at("PrimitiveData"))
    @property
    def PrimitiveType(self):  # type: ()->String
        return String(self._node.at("PrimitiveType"))
    @PrimitiveType.setter
    def PrimitiveType(self, val): self.PrimitiveType.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ItemHolderGD(HelperObject):
    schema_name = "ItemHolderGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ItemHolderGD
        return ItemHolderGD(entlib.load_node_file(sourcefile, entlib.get_schema(ItemHolderGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ItemHolderGD
        return ItemHolderGD(entlib.make_node(ItemHolderGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HotspotDefault(self):  # type: ()->String
        return String(self._node.at("HotspotDefault"))
    @HotspotDefault.setter
    def HotspotDefault(self, val): self.HotspotDefault.set(val)
    @property
    def HotspotHandLeft(self):  # type: ()->String
        return String(self._node.at("HotspotHandLeft"))
    @HotspotHandLeft.setter
    def HotspotHandLeft(self, val): self.HotspotHandLeft.set(val)
    @property
    def HotspotHandRight(self):  # type: ()->String
        return String(self._node.at("HotspotHandRight"))
    @HotspotHandRight.setter
    def HotspotHandRight(self, val): self.HotspotHandRight.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Visible(self):  # type: ()->Bool
        return Bool(self._node.at("Visible"))
    @Visible.setter
    def Visible(self, val): self.Visible.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class InventoryGD(HelperObject):
    schema_name = "InventoryGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InventoryGD
        return InventoryGD(entlib.load_node_file(sourcefile, entlib.get_schema(InventoryGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InventoryGD
        return InventoryGD(entlib.make_node(InventoryGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TaggedEntityRefs(self):  # type: ()->Array[TaggedEntityRef]
        return (lambda n: Array(TaggedEntityRef, n))(self._node.at("TaggedEntityRefs"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class InfoboardRegistererGD(HelperObject):
    schema_name = "InfoboardRegistererGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InfoboardRegistererGD
        return InfoboardRegistererGD(entlib.load_node_file(sourcefile, entlib.get_schema(InfoboardRegistererGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InfoboardRegistererGD
        return InfoboardRegistererGD(entlib.make_node(InfoboardRegistererGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def InfoboardName(self):  # type: ()->String
        return String(self._node.at("InfoboardName"))
    @InfoboardName.setter
    def InfoboardName(self, val): self.InfoboardName.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HotspotsGD(HelperObject):
    schema_name = "HotspotsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HotspotsGD
        return HotspotsGD(entlib.load_node_file(sourcefile, entlib.get_schema(HotspotsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HotspotsGD
        return HotspotsGD(entlib.make_node(HotspotsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HotspotsMap(self):  # type: ()->Map[str, HotspotData]
        return (lambda n: Map(str, HotspotData, n))(self._node.at("HotspotsMap"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HitTriggerGD(HelperObject):
    schema_name = "HitTriggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HitTriggerGD
        return HitTriggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(HitTriggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HitTriggerGD
        return HitTriggerGD(entlib.make_node(HitTriggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HeightObj(HelperObject):
    schema_name = "HeightObj"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HeightObj
        return HeightObj(entlib.load_node_file(sourcefile, entlib.get_schema(HeightObj.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HeightObj
        return HeightObj(entlib.make_node(HeightObj.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DisplaceNoiseList(self):  # type: ()->Array[DisplaceNoiseListItem]
        return (lambda n: Array(DisplaceNoiseListItem, n))(self._node.at("DisplaceNoiseList"))
    @property
    def EditorSubdivision(self):  # type: ()->Int
        return Int(self._node.at("EditorSubdivision"))
    @EditorSubdivision.setter
    def EditorSubdivision(self, val): self.EditorSubdivision.set(val)
    @property
    def LocalMatrix(self):  # type: ()->Matrix33
        return Matrix33(self._node.at("LocalMatrix"))
    @LocalMatrix.setter
    def LocalMatrix(self, val): self.LocalMatrix.set(val)
    @property
    def MeshFile(self):  # type: ()->String
        return String(self._node.at("MeshFile"))
    @MeshFile.setter
    def MeshFile(self, val): self.MeshFile.set(val)
    @property
    def MeshName(self):  # type: ()->String
        return String(self._node.at("MeshName"))
    @MeshName.setter
    def MeshName(self, val): self.MeshName.set(val)
    @property
    def Priority(self):  # type: ()->Int
        return Int(self._node.at("Priority"))
    @Priority.setter
    def Priority(self, val): self.Priority.set(val)
    @property
    def Subdivision(self):  # type: ()->Int
        return Int(self._node.at("Subdivision"))
    @Subdivision.setter
    def Subdivision(self, val): self.Subdivision.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HeightMapComponentGD(HelperObject):
    schema_name = "HeightMapComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HeightMapComponentGD
        return HeightMapComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(HeightMapComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HeightMapComponentGD
        return HeightMapComponentGD(entlib.make_node(HeightMapComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HeightMapArchivePath(self):  # type: ()->String
        return String(self._node.at("HeightMapArchivePath"))
    @HeightMapArchivePath.setter
    def HeightMapArchivePath(self, val): self.HeightMapArchivePath.set(val)
    @property
    def HeightMapPaths(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("HeightMapPaths"))
    @HeightMapPaths.setter
    def HeightMapPaths(self, val): self.HeightMapPaths.set(val)
    @property
    def HeightScale(self):  # type: ()->Float
        return Float(self._node.at("HeightScale"))
    @HeightScale.setter
    def HeightScale(self, val): self.HeightScale.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def SwapX(self):  # type: ()->Bool
        return Bool(self._node.at("SwapX"))
    @SwapX.setter
    def SwapX(self, val): self.SwapX.set(val)
    @property
    def SwapY(self):  # type: ()->Bool
        return Bool(self._node.at("SwapY"))
    @SwapY.setter
    def SwapY(self, val): self.SwapY.set(val)
    @property
    def WorldSize(self):  # type: ()->Vector2
        return Vector2(self._node.at("WorldSize"))
    @WorldSize.setter
    def WorldSize(self, val): self.WorldSize.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HealthAreaGD(HelperObject):
    schema_name = "HealthAreaGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HealthAreaGD
        return HealthAreaGD(entlib.load_node_file(sourcefile, entlib.get_schema(HealthAreaGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HealthAreaGD
        return HealthAreaGD(entlib.make_node(HealthAreaGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EnergyRestorationRate(self):  # type: ()->Float
        return Float(self._node.at("EnergyRestorationRate"))
    @EnergyRestorationRate.setter
    def EnergyRestorationRate(self, val): self.EnergyRestorationRate.set(val)
    @property
    def FactionSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("FactionSide"))
    @FactionSide.setter
    def FactionSide(self, val): self.FactionSide.set(val)
    @property
    def LifeRestorationRate(self):  # type: ()->Float
        return Float(self._node.at("LifeRestorationRate"))
    @LifeRestorationRate.setter
    def LifeRestorationRate(self, val): self.LifeRestorationRate.set(val)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def ReviveRestorationRate(self):  # type: ()->Float
        return Float(self._node.at("ReviveRestorationRate"))
    @ReviveRestorationRate.setter
    def ReviveRestorationRate(self, val): self.ReviveRestorationRate.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HealerGD(HelperObject):
    schema_name = "HealerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HealerGD
        return HealerGD(entlib.load_node_file(sourcefile, entlib.get_schema(HealerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HealerGD
        return HealerGD(entlib.make_node(HealerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HealTriggerGD(HelperObject):
    schema_name = "HealTriggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HealTriggerGD
        return HealTriggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(HealTriggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HealTriggerGD
        return HealTriggerGD(entlib.make_node(HealTriggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class HealPumpGD(HelperObject):
    schema_name = "HealPumpGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->HealPumpGD
        return HealPumpGD(entlib.load_node_file(sourcefile, entlib.get_schema(HealPumpGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->HealPumpGD
        return HealPumpGD(entlib.make_node(HealPumpGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AlliesLifeAgentPerSecond(self):  # type: ()->Float
        return Float(self._node.at("AlliesLifeAgentPerSecond"))
    @AlliesLifeAgentPerSecond.setter
    def AlliesLifeAgentPerSecond(self, val): self.AlliesLifeAgentPerSecond.set(val)
    @property
    def EnemiesLifeAgentPerSecond(self):  # type: ()->Float
        return Float(self._node.at("EnemiesLifeAgentPerSecond"))
    @EnemiesLifeAgentPerSecond.setter
    def EnemiesLifeAgentPerSecond(self, val): self.EnemiesLifeAgentPerSecond.set(val)
    @property
    def LifeAmountRatio(self):  # type: ()->Float
        return Float(self._node.at("LifeAmountRatio"))
    @LifeAmountRatio.setter
    def LifeAmountRatio(self, val): self.LifeAmountRatio.set(val)
    @property
    def Range(self):  # type: ()->Float
        return Float(self._node.at("Range"))
    @Range.setter
    def Range(self, val): self.Range.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GroundTypeSamplerGD(HelperObject):
    schema_name = "GroundTypeSamplerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GroundTypeSamplerGD
        return GroundTypeSamplerGD(entlib.load_node_file(sourcefile, entlib.get_schema(GroundTypeSamplerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GroundTypeSamplerGD
        return GroundTypeSamplerGD(entlib.make_node(GroundTypeSamplerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GroundTypeMapPath(self):  # type: ()->String
        return String(self._node.at("GroundTypeMapPath"))
    @GroundTypeMapPath.setter
    def GroundTypeMapPath(self, val): self.GroundTypeMapPath.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GameEffectSpawnerGD(HelperObject):
    schema_name = "GameEffectSpawnerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameEffectSpawnerGD
        return GameEffectSpawnerGD(entlib.load_node_file(sourcefile, entlib.get_schema(GameEffectSpawnerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameEffectSpawnerGD
        return GameEffectSpawnerGD(entlib.make_node(GameEffectSpawnerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GameEffectOffset(self):  # type: ()->Vector3
        return Vector3(self._node.at("GameEffectOffset"))
    @GameEffectOffset.setter
    def GameEffectOffset(self, val): self.GameEffectOffset.set(val)
    @property
    def StartGameEffects(self):  # type: ()->Array[sGameEffectTemplate]
        return (lambda n: Array(sGameEffectTemplate, n))(self._node.at("StartGameEffects"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidVolumeComponentGD(HelperObject):
    schema_name = "FluidVolumeComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidVolumeComponentGD
        return FluidVolumeComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(FluidVolumeComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidVolumeComponentGD
        return FluidVolumeComponentGD(entlib.make_node(FluidVolumeComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FluidVolume(self):  # type: ()->FluidVolumeComponentGD_FluidVolumeData
        return FluidVolumeComponentGD_FluidVolumeData(self._node.at("FluidVolume"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidViewGD(HelperObject):
    schema_name = "FluidViewGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidViewGD
        return FluidViewGD(entlib.load_node_file(sourcefile, entlib.get_schema(FluidViewGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidViewGD
        return FluidViewGD(entlib.make_node(FluidViewGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidToRegenInjectorGD(HelperObject):
    schema_name = "FluidToRegenInjectorGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidToRegenInjectorGD
        return FluidToRegenInjectorGD(entlib.load_node_file(sourcefile, entlib.get_schema(FluidToRegenInjectorGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidToRegenInjectorGD
        return FluidToRegenInjectorGD(entlib.make_node(FluidToRegenInjectorGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EnergyPerSecond(self):  # type: ()->Float
        return Float(self._node.at("EnergyPerSecond"))
    @EnergyPerSecond.setter
    def EnergyPerSecond(self, val): self.EnergyPerSecond.set(val)
    @property
    def MinDepth(self):  # type: ()->Float
        return Float(self._node.at("MinDepth"))
    @MinDepth.setter
    def MinDepth(self, val): self.MinDepth.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UpdatePeriod(self):  # type: ()->Float
        return Float(self._node.at("UpdatePeriod"))
    @UpdatePeriod.setter
    def UpdatePeriod(self, val): self.UpdatePeriod.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidNavMeshTaggerGD(HelperObject):
    schema_name = "FluidNavMeshTaggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidNavMeshTaggerGD
        return FluidNavMeshTaggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(FluidNavMeshTaggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidNavMeshTaggerGD
        return FluidNavMeshTaggerGD(entlib.make_node(FluidNavMeshTaggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MinDepth(self):  # type: ()->Float
        return Float(self._node.at("MinDepth"))
    @MinDepth.setter
    def MinDepth(self, val): self.MinDepth.set(val)
    @property
    def SamplingPrecision(self):  # type: ()->Precision
        return Precision(self._node.at("SamplingPrecision"))
    @SamplingPrecision.setter
    def SamplingPrecision(self, val): self.SamplingPrecision.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UpdatePeriod(self):  # type: ()->Float
        return Float(self._node.at("UpdatePeriod"))
    @UpdatePeriod.setter
    def UpdatePeriod(self, val): self.UpdatePeriod.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FluidGD(HelperObject):
    schema_name = "FluidGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidGD
        return FluidGD(entlib.load_node_file(sourcefile, entlib.get_schema(FluidGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidGD
        return FluidGD(entlib.make_node(FluidGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def type(self):  # type: ()->FluidType
        return FluidType(self._node.at("type"))
    @type.setter
    def type(self, val): self.type.set(val)
    @property
    def useHalfShape(self):  # type: ()->Bool
        return Bool(self._node.at("useHalfShape"))
    @useHalfShape.setter
    def useHalfShape(self, val): self.useHalfShape.set(val)
    pass


from EntityLibPy import Node

class FluidFXEntitySpawnerGD(HelperObject):
    schema_name = "FluidFXEntitySpawnerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FluidFXEntitySpawnerGD
        return FluidFXEntitySpawnerGD(entlib.load_node_file(sourcefile, entlib.get_schema(FluidFXEntitySpawnerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FluidFXEntitySpawnerGD
        return FluidFXEntitySpawnerGD(entlib.make_node(FluidFXEntitySpawnerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SamplingPrecision(self):  # type: ()->Precision
        return Precision(self._node.at("SamplingPrecision"))
    @SamplingPrecision.setter
    def SamplingPrecision(self, val): self.SamplingPrecision.set(val)
    @property
    def SpawningParameters(self):  # type: ()->Array[SpawningParameter]
        return (lambda n: Array(SpawningParameter, n))(self._node.at("SpawningParameters"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UpdatePeriod(self):  # type: ()->Float
        return Float(self._node.at("UpdatePeriod"))
    @UpdatePeriod.setter
    def UpdatePeriod(self, val): self.UpdatePeriod.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FireSensorGD(HelperObject):
    schema_name = "FireSensorGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FireSensorGD
        return FireSensorGD(entlib.load_node_file(sourcefile, entlib.get_schema(FireSensorGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FireSensorGD
        return FireSensorGD(entlib.make_node(FireSensorGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EventTriggerGD(HelperObject):
    schema_name = "EventTriggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EventTriggerGD
        return EventTriggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(EventTriggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EventTriggerGD
        return EventTriggerGD(entlib.make_node(EventTriggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Events(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("Events"))
    @Events.setter
    def Events(self, val): self.Events.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EventHandlerGD(HelperObject):
    schema_name = "EventHandlerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EventHandlerGD
        return EventHandlerGD(entlib.load_node_file(sourcefile, entlib.get_schema(EventHandlerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EventHandlerGD
        return EventHandlerGD(entlib.make_node(EventHandlerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnvStampGD(HelperObject):
    schema_name = "EnvStampGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnvStampGD
        return EnvStampGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnvStampGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnvStampGD
        return EnvStampGD(entlib.make_node(EnvStampGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def RegenStateChangeDuration(self):  # type: ()->Float
        return Float(self._node.at("RegenStateChangeDuration"))
    @RegenStateChangeDuration.setter
    def RegenStateChangeDuration(self, val): self.RegenStateChangeDuration.set(val)
    @property
    def Stamps(self):  # type: ()->Map[RegenerationStateEnum, Array[sEnvStamp]]
        return (lambda n: Map(RegenerationStateEnum, (lambda n: Array(sEnvStamp, n)), n))(self._node.at("Stamps"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergySpoutGD(HelperObject):
    schema_name = "EnergySpoutGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergySpoutGD
        return EnergySpoutGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnergySpoutGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergySpoutGD
        return EnergySpoutGD(entlib.make_node(EnergySpoutGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EnergySpeed(self):  # type: ()->Float
        return Float(self._node.at("EnergySpeed"))
    @EnergySpeed.setter
    def EnergySpeed(self, val): self.EnergySpeed.set(val)
    @property
    def ListenerEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("ListenerEntityRef"))
    @ListenerEntityRef.setter
    def ListenerEntityRef(self, val): self.ListenerEntityRef.set(val)
    @property
    def MinDistanceBetweenRegen(self):  # type: ()->Float
        return Float(self._node.at("MinDistanceBetweenRegen"))
    @MinDistanceBetweenRegen.setter
    def MinDistanceBetweenRegen(self, val): self.MinDistanceBetweenRegen.set(val)
    @property
    def MinTimeBetweenRegen(self):  # type: ()->Float
        return Float(self._node.at("MinTimeBetweenRegen"))
    @MinTimeBetweenRegen.setter
    def MinTimeBetweenRegen(self, val): self.MinTimeBetweenRegen.set(val)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def SplineRegenEffectName(self):  # type: ()->String
        return String(self._node.at("SplineRegenEffectName"))
    @SplineRegenEffectName.setter
    def SplineRegenEffectName(self, val): self.SplineRegenEffectName.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergySourceGD(HelperObject):
    schema_name = "EnergySourceGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergySourceGD
        return EnergySourceGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnergySourceGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergySourceGD
        return EnergySourceGD(entlib.make_node(EnergySourceGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MaxBuffDuration(self):  # type: ()->Float
        return Float(self._node.at("MaxBuffDuration"))
    @MaxBuffDuration.setter
    def MaxBuffDuration(self, val): self.MaxBuffDuration.set(val)
    @property
    def NearbyReactionRadius(self):  # type: ()->Float
        return Float(self._node.at("NearbyReactionRadius"))
    @NearbyReactionRadius.setter
    def NearbyReactionRadius(self, val): self.NearbyReactionRadius.set(val)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def RefreshFrequency(self):  # type: ()->Float
        return Float(self._node.at("RefreshFrequency"))
    @RefreshFrequency.setter
    def RefreshFrequency(self, val): self.RefreshFrequency.set(val)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def SourceRegenEffectName(self):  # type: ()->String
        return String(self._node.at("SourceRegenEffectName"))
    @SourceRegenEffectName.setter
    def SourceRegenEffectName(self, val): self.SourceRegenEffectName.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergyProbeGD(HelperObject):
    schema_name = "EnergyProbeGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergyProbeGD
        return EnergyProbeGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnergyProbeGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergyProbeGD
        return EnergyProbeGD(entlib.make_node(EnergyProbeGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergyPoolTaggerGD(HelperObject):
    schema_name = "EnergyPoolTaggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergyPoolTaggerGD
        return EnergyPoolTaggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnergyPoolTaggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergyPoolTaggerGD
        return EnergyPoolTaggerGD(entlib.make_node(EnergyPoolTaggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergyPoolGD(HelperObject):
    schema_name = "EnergyPoolGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergyPoolGD
        return EnergyPoolGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnergyPoolGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergyPoolGD
        return EnergyPoolGD(entlib.make_node(EnergyPoolGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DrainConnectionRadius(self):  # type: ()->Float
        return Float(self._node.at("DrainConnectionRadius"))
    @DrainConnectionRadius.setter
    def DrainConnectionRadius(self, val): self.DrainConnectionRadius.set(val)
    @property
    def FactionOverride(self):  # type: ()->Bool
        return Bool(self._node.at("FactionOverride"))
    @FactionOverride.setter
    def FactionOverride(self, val): self.FactionOverride.set(val)
    @property
    def ProbeDetectionRadius(self):  # type: ()->Float
        return Float(self._node.at("ProbeDetectionRadius"))
    @ProbeDetectionRadius.setter
    def ProbeDetectionRadius(self, val): self.ProbeDetectionRadius.set(val)
    @property
    def RegenEffectsOnConversion(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("RegenEffectsOnConversion"))
    @RegenEffectsOnConversion.setter
    def RegenEffectsOnConversion(self, val): self.RegenEffectsOnConversion.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergyNetworkListenerGD(HelperObject):
    schema_name = "EnergyNetworkListenerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergyNetworkListenerGD
        return EnergyNetworkListenerGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnergyNetworkListenerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergyNetworkListenerGD
        return EnergyNetworkListenerGD(entlib.make_node(EnergyNetworkListenerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergyDrainGD(HelperObject):
    schema_name = "EnergyDrainGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergyDrainGD
        return EnergyDrainGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnergyDrainGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergyDrainGD
        return EnergyDrainGD(entlib.make_node(EnergyDrainGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PoolEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("PoolEntityRef"))
    @PoolEntityRef.setter
    def PoolEntityRef(self, val): self.PoolEntityRef.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EnergyCrookGD(HelperObject):
    schema_name = "EnergyCrookGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EnergyCrookGD
        return EnergyCrookGD(entlib.load_node_file(sourcefile, entlib.get_schema(EnergyCrookGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EnergyCrookGD
        return EnergyCrookGD(entlib.make_node(EnergyCrookGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FatherEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("FatherEntityRef"))
    @FatherEntityRef.setter
    def FatherEntityRef(self, val): self.FatherEntityRef.set(val)
    @property
    def Radius(self):  # type: ()->Float
        return Float(self._node.at("Radius"))
    @Radius.setter
    def Radius(self, val): self.Radius.set(val)
    @property
    def RegenScale(self):  # type: ()->Float
        return Float(self._node.at("RegenScale"))
    @RegenScale.setter
    def RegenScale(self, val): self.RegenScale.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class DummyComponentGD(HelperObject):
    schema_name = "DummyComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DummyComponentGD
        return DummyComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(DummyComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DummyComponentGD
        return DummyComponentGD(entlib.make_node(DummyComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class DistanceTriggerGD(HelperObject):
    schema_name = "DistanceTriggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DistanceTriggerGD
        return DistanceTriggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(DistanceTriggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DistanceTriggerGD
        return DistanceTriggerGD(entlib.make_node(DistanceTriggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Distances(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("Distances"))
    @Distances.setter
    def Distances(self, val): self.Distances.set(val)
    @property
    def Hystereses(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("Hystereses"))
    @Hystereses.setter
    def Hystereses(self, val): self.Hystereses.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class FightDistanceTriggerGD(HelperObject):
    schema_name = "FightDistanceTriggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FightDistanceTriggerGD
        return FightDistanceTriggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(FightDistanceTriggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FightDistanceTriggerGD
        return FightDistanceTriggerGD(entlib.make_node(FightDistanceTriggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->DistanceTriggerGD
        return DistanceTriggerGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class DebugGridGD(HelperObject):
    schema_name = "DebugGridGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DebugGridGD
        return DebugGridGD(entlib.load_node_file(sourcefile, entlib.get_schema(DebugGridGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DebugGridGD
        return DebugGridGD(entlib.make_node(DebugGridGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Height(self):  # type: ()->Int
        return Int(self._node.at("Height"))
    @Height.setter
    def Height(self, val): self.Height.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Width(self):  # type: ()->Int
        return Int(self._node.at("Width"))
    @Width.setter
    def Width(self, val): self.Width.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CustomThumbnail(HelperObject):
    schema_name = "CustomThumbnail"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CustomThumbnail
        return CustomThumbnail(entlib.load_node_file(sourcefile, entlib.get_schema(CustomThumbnail.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CustomThumbnail
        return CustomThumbnail(entlib.make_node(CustomThumbnail.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Thumbnail(self):  # type: ()->ThumbPath
        return ThumbPath(self._node.at("Thumbnail"))
    @Thumbnail.setter
    def Thumbnail(self, val): self.Thumbnail.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CreatureUIGD(HelperObject):
    schema_name = "CreatureUIGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureUIGD
        return CreatureUIGD(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureUIGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureUIGD
        return CreatureUIGD(entlib.make_node(CreatureUIGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def LifeBarLength(self):  # type: ()->Float
        return Float(self._node.at("LifeBarLength"))
    @LifeBarLength.setter
    def LifeBarLength(self, val): self.LifeBarLength.set(val)
    @property
    def LifeBarWidth(self):  # type: ()->Float
        return Float(self._node.at("LifeBarWidth"))
    @LifeBarWidth.setter
    def LifeBarWidth(self, val): self.LifeBarWidth.set(val)
    @property
    def LifeBarZOffset(self):  # type: ()->Float
        return Float(self._node.at("LifeBarZOffset"))
    @LifeBarZOffset.setter
    def LifeBarZOffset(self, val): self.LifeBarZOffset.set(val)
    @property
    def ShowLifeBar(self):  # type: ()->Bool
        return Bool(self._node.at("ShowLifeBar"))
    @ShowLifeBar.setter
    def ShowLifeBar(self, val): self.ShowLifeBar.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ConnectorGD(HelperObject):
    schema_name = "ConnectorGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ConnectorGD
        return ConnectorGD(entlib.load_node_file(sourcefile, entlib.get_schema(ConnectorGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ConnectorGD
        return ConnectorGD(entlib.make_node(ConnectorGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ComponentWithProtoCodeGD(HelperObject):
    schema_name = "ComponentWithProtoCodeGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ComponentWithProtoCodeGD
        return ComponentWithProtoCodeGD(entlib.load_node_file(sourcefile, entlib.get_schema(ComponentWithProtoCodeGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ComponentWithProtoCodeGD
        return ComponentWithProtoCodeGD(entlib.make_node(ComponentWithProtoCodeGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ClothAnimationGD(HelperObject):
    schema_name = "ClothAnimationGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ClothAnimationGD
        return ClothAnimationGD(entlib.load_node_file(sourcefile, entlib.get_schema(ClothAnimationGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ClothAnimationGD
        return ClothAnimationGD(entlib.make_node(ClothAnimationGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ClothSkeletonPath(self):  # type: ()->String
        return String(self._node.at("ClothSkeletonPath"))
    @ClothSkeletonPath.setter
    def ClothSkeletonPath(self, val): self.ClothSkeletonPath.set(val)
    @property
    def PhysicsDamping(self):  # type: ()->Float
        return Float(self._node.at("PhysicsDamping"))
    @PhysicsDamping.setter
    def PhysicsDamping(self, val): self.PhysicsDamping.set(val)
    @property
    def PhysicsFixedDt(self):  # type: ()->Bool
        return Bool(self._node.at("PhysicsFixedDt"))
    @PhysicsFixedDt.setter
    def PhysicsFixedDt(self, val): self.PhysicsFixedDt.set(val)
    @property
    def PhysicsGravity(self):  # type: ()->Vector3
        return Vector3(self._node.at("PhysicsGravity"))
    @PhysicsGravity.setter
    def PhysicsGravity(self, val): self.PhysicsGravity.set(val)
    @property
    def PhysicsMass(self):  # type: ()->Float
        return Float(self._node.at("PhysicsMass"))
    @PhysicsMass.setter
    def PhysicsMass(self, val): self.PhysicsMass.set(val)
    @property
    def PhysicsSpeedInfluence(self):  # type: ()->Float
        return Float(self._node.at("PhysicsSpeedInfluence"))
    @PhysicsSpeedInfluence.setter
    def PhysicsSpeedInfluence(self, val): self.PhysicsSpeedInfluence.set(val)
    @property
    def PhysicsUseDefaultProperties(self):  # type: ()->Bool
        return Bool(self._node.at("PhysicsUseDefaultProperties"))
    @PhysicsUseDefaultProperties.setter
    def PhysicsUseDefaultProperties(self, val): self.PhysicsUseDefaultProperties.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ChildEntityPoolComponentGD(HelperObject):
    schema_name = "ChildEntityPoolComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ChildEntityPoolComponentGD
        return ChildEntityPoolComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(ChildEntityPoolComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ChildEntityPoolComponentGD
        return ChildEntityPoolComponentGD(entlib.make_node(ChildEntityPoolComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EntityRefs(self):  # type: ()->PrimArray[EntityRef]
        return (lambda n: PrimArray(EntityRef, n))(self._node.at("EntityRefs"))
    @EntityRefs.setter
    def EntityRefs(self, val): self.EntityRefs.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CharacterPlatformGD(HelperObject):
    schema_name = "CharacterPlatformGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CharacterPlatformGD
        return CharacterPlatformGD(entlib.load_node_file(sourcefile, entlib.get_schema(CharacterPlatformGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CharacterPlatformGD
        return CharacterPlatformGD(entlib.make_node(CharacterPlatformGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CameraDataGD(HelperObject):
    schema_name = "CameraDataGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CameraDataGD
        return CameraDataGD(entlib.load_node_file(sourcefile, entlib.get_schema(CameraDataGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CameraDataGD
        return CameraDataGD(entlib.make_node(CameraDataGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CameraDataResourcePath(self):  # type: ()->String
        return String(self._node.at("CameraDataResourcePath"))
    @CameraDataResourcePath.setter
    def CameraDataResourcePath(self, val): self.CameraDataResourcePath.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BreakableGD(HelperObject):
    schema_name = "BreakableGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BreakableGD
        return BreakableGD(entlib.load_node_file(sourcefile, entlib.get_schema(BreakableGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BreakableGD
        return BreakableGD(entlib.make_node(BreakableGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BreakSoundBank(self):  # type: ()->String
        return String(self._node.at("BreakSoundBank"))
    @BreakSoundBank.setter
    def BreakSoundBank(self, val): self.BreakSoundBank.set(val)
    @property
    def BreakSoundEvent(self):  # type: ()->String
        return String(self._node.at("BreakSoundEvent"))
    @BreakSoundEvent.setter
    def BreakSoundEvent(self, val): self.BreakSoundEvent.set(val)
    @property
    def GameEffectOnBroken(self):  # type: ()->String
        return String(self._node.at("GameEffectOnBroken"))
    @GameEffectOnBroken.setter
    def GameEffectOnBroken(self, val): self.GameEffectOnBroken.set(val)
    @property
    def GameEffectOnDestruction(self):  # type: ()->String
        return String(self._node.at("GameEffectOnDestruction"))
    @GameEffectOnDestruction.setter
    def GameEffectOnDestruction(self, val): self.GameEffectOnDestruction.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def isBreakableWithAttack(self):  # type: ()->Bool
        return Bool(self._node.at("isBreakableWithAttack"))
    @isBreakableWithAttack.setter
    def isBreakableWithAttack(self, val): self.isBreakableWithAttack.set(val)
    pass


from EntityLibPy import Node

class BittenGD(HelperObject):
    schema_name = "BittenGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BittenGD
        return BittenGD(entlib.load_node_file(sourcefile, entlib.get_schema(BittenGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BittenGD
        return BittenGD(entlib.make_node(BittenGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MaxAngle(self):  # type: ()->Float
        return Float(self._node.at("MaxAngle"))
    @MaxAngle.setter
    def MaxAngle(self, val): self.MaxAngle.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BeamGeneratorGD(HelperObject):
    schema_name = "BeamGeneratorGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BeamGeneratorGD
        return BeamGeneratorGD(entlib.load_node_file(sourcefile, entlib.get_schema(BeamGeneratorGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BeamGeneratorGD
        return BeamGeneratorGD(entlib.make_node(BeamGeneratorGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BonesStartPoints(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("BonesStartPoints"))
    @BonesStartPoints.setter
    def BonesStartPoints(self, val): self.BonesStartPoints.set(val)
    @property
    def ExtraDistanceBeyondTarget(self):  # type: ()->Float
        return Float(self._node.at("ExtraDistanceBeyondTarget"))
    @ExtraDistanceBeyondTarget.setter
    def ExtraDistanceBeyondTarget(self, val): self.ExtraDistanceBeyondTarget.set(val)
    @property
    def LengthDuration(self):  # type: ()->Float
        return Float(self._node.at("LengthDuration"))
    @LengthDuration.setter
    def LengthDuration(self, val): self.LengthDuration.set(val)
    @property
    def PathBeamEffect(self):  # type: ()->String
        return String(self._node.at("PathBeamEffect"))
    @PathBeamEffect.setter
    def PathBeamEffect(self, val): self.PathBeamEffect.set(val)
    @property
    def PointsPerBeam(self):  # type: ()->Int
        return Int(self._node.at("PointsPerBeam"))
    @PointsPerBeam.setter
    def PointsPerBeam(self, val): self.PointsPerBeam.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AttackTriggerGD(HelperObject):
    schema_name = "AttackTriggerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AttackTriggerGD
        return AttackTriggerGD(entlib.load_node_file(sourcefile, entlib.get_schema(AttackTriggerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AttackTriggerGD
        return AttackTriggerGD(entlib.make_node(AttackTriggerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AssemblyGD(HelperObject):
    schema_name = "AssemblyGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AssemblyGD
        return AssemblyGD(entlib.load_node_file(sourcefile, entlib.get_schema(AssemblyGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AssemblyGD
        return AssemblyGD(entlib.make_node(AssemblyGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationTransformDriverGD(HelperObject):
    schema_name = "AnimationTransformDriverGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationTransformDriverGD
        return AnimationTransformDriverGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationTransformDriverGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationTransformDriverGD
        return AnimationTransformDriverGD(entlib.make_node(AnimationTransformDriverGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationRegenConstraintsGD(HelperObject):
    schema_name = "AnimationRegenConstraintsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationRegenConstraintsGD
        return AnimationRegenConstraintsGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationRegenConstraintsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationRegenConstraintsGD
        return AnimationRegenConstraintsGD(entlib.make_node(AnimationRegenConstraintsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MaxDisplace(self):  # type: ()->Float
        return Float(self._node.at("MaxDisplace"))
    @MaxDisplace.setter
    def MaxDisplace(self, val): self.MaxDisplace.set(val)
    @property
    def MaxRegenSpeed(self):  # type: ()->Float
        return Float(self._node.at("MaxRegenSpeed"))
    @MaxRegenSpeed.setter
    def MaxRegenSpeed(self, val): self.MaxRegenSpeed.set(val)
    @property
    def MinDisplace(self):  # type: ()->Float
        return Float(self._node.at("MinDisplace"))
    @MinDisplace.setter
    def MinDisplace(self, val): self.MinDisplace.set(val)
    @property
    def RegenMultiplier(self):  # type: ()->Float
        return Float(self._node.at("RegenMultiplier"))
    @RegenMultiplier.setter
    def RegenMultiplier(self, val): self.RegenMultiplier.set(val)
    @property
    def RegenToDisplaceCurve(self):  # type: ()->String
        return String(self._node.at("RegenToDisplaceCurve"))
    @RegenToDisplaceCurve.setter
    def RegenToDisplaceCurve(self, val): self.RegenToDisplaceCurve.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationPlaylistGD(HelperObject):
    schema_name = "AnimationPlaylistGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationPlaylistGD
        return AnimationPlaylistGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationPlaylistGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationPlaylistGD
        return AnimationPlaylistGD(entlib.make_node(AnimationPlaylistGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PlayAnim(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("PlayAnim"))
    @PlayAnim.setter
    def PlayAnim(self, val): self.PlayAnim.set(val)
    @property
    def PlayAnimInputID(self):  # type: ()->Int
        return Int(self._node.at("PlayAnimInputID"))
    @PlayAnimInputID.setter
    def PlayAnimInputID(self, val): self.PlayAnimInputID.set(val)
    @property
    def RandomizeStartTime(self):  # type: ()->Bool
        return Bool(self._node.at("RandomizeStartTime"))
    @RandomizeStartTime.setter
    def RandomizeStartTime(self, val): self.RandomizeStartTime.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationPhysicsChainConstraintsGD(HelperObject):
    schema_name = "AnimationPhysicsChainConstraintsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationPhysicsChainConstraintsGD
        return AnimationPhysicsChainConstraintsGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationPhysicsChainConstraintsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationPhysicsChainConstraintsGD
        return AnimationPhysicsChainConstraintsGD(entlib.make_node(AnimationPhysicsChainConstraintsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoneNamePrefix(self):  # type: ()->String
        return String(self._node.at("BoneNamePrefix"))
    @BoneNamePrefix.setter
    def BoneNamePrefix(self, val): self.BoneNamePrefix.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationModelGD(HelperObject):
    schema_name = "AnimationModelGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationModelGD
        return AnimationModelGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationModelGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationModelGD
        return AnimationModelGD(entlib.make_node(AnimationModelGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def additionalSpeedDebug(self):  # type: ()->Map[LocomotionModeEnum, Map[SpeedModeEnum, Float]]
        return (lambda n: Map(LocomotionModeEnum, (lambda n: Map(SpeedModeEnum, Float, n)), n))(self._node.at("additionalSpeedDebug"))
    @property
    def isLandAnimDriven(self):  # type: ()->Bool
        return Bool(self._node.at("isLandAnimDriven"))
    @isLandAnimDriven.setter
    def isLandAnimDriven(self, val): self.isLandAnimDriven.set(val)
    @property
    def isTurnAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("isTurnAllowed"))
    @isTurnAllowed.setter
    def isTurnAllowed(self, val): self.isTurnAllowed.set(val)
    @property
    def playRatioFactor(self):  # type: ()->Float
        return Float(self._node.at("playRatioFactor"))
    @playRatioFactor.setter
    def playRatioFactor(self, val): self.playRatioFactor.set(val)
    @property
    def scalePlayRatioCoeffInfluence(self):  # type: ()->Float
        return Float(self._node.at("scalePlayRatioCoeffInfluence"))
    @scalePlayRatioCoeffInfluence.setter
    def scalePlayRatioCoeffInfluence(self, val): self.scalePlayRatioCoeffInfluence.set(val)
    @property
    def startRunPlayRatioFactor(self):  # type: ()->Float
        return Float(self._node.at("startRunPlayRatioFactor"))
    @startRunPlayRatioFactor.setter
    def startRunPlayRatioFactor(self, val): self.startRunPlayRatioFactor.set(val)
    @property
    def turnPlayRatioFactor(self):  # type: ()->Float
        return Float(self._node.at("turnPlayRatioFactor"))
    @turnPlayRatioFactor.setter
    def turnPlayRatioFactor(self, val): self.turnPlayRatioFactor.set(val)
    pass


from EntityLibPy import Node

class AnimationHitsConstraintsGD(HelperObject):
    schema_name = "AnimationHitsConstraintsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationHitsConstraintsGD
        return AnimationHitsConstraintsGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationHitsConstraintsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationHitsConstraintsGD
        return AnimationHitsConstraintsGD(entlib.make_node(AnimationHitsConstraintsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class Component(Union):
    pass


from EntityLibPy import Node
Object_Components = (lambda n: UnionSet(Component, n))
from EntityLibPy import Node
Components = (lambda n: UnionSet(Component, n))
from EntityLibPy import Node
Color = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class UIMessage(HelperObject):
    schema_name = "UIMessage"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->UIMessage
        return UIMessage(entlib.load_node_file(sourcefile, entlib.get_schema(UIMessage.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->UIMessage
        return UIMessage(entlib.make_node(UIMessage.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Color(self):  # type: ()->Color
        return Color(self._node.at("Color"))
    @Color.setter
    def Color(self, val): self.Color.set(val)
    @property
    def Duration(self):  # type: ()->Float
        return Float(self._node.at("Duration"))
    @Duration.setter
    def Duration(self, val): self.Duration.set(val)
    @property
    def ScreenPosition(self):  # type: ()->Vector2
        return Vector2(self._node.at("ScreenPosition"))
    @ScreenPosition.setter
    def ScreenPosition(self, val): self.ScreenPosition.set(val)
    @property
    def Text(self):  # type: ()->String
        return String(self._node.at("Text"))
    @Text.setter
    def Text(self, val): self.Text.set(val)
    @property
    def TextScale(self):  # type: ()->Float
        return Float(self._node.at("TextScale"))
    @TextScale.setter
    def TextScale(self, val): self.TextScale.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class UIManager(HelperObject):
    schema_name = "UIManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->UIManager
        return UIManager(entlib.load_node_file(sourcefile, entlib.get_schema(UIManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->UIManager
        return UIManager(entlib.make_node(UIManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BarAlpha(self):  # type: ()->Float
        return Float(self._node.at("BarAlpha"))
    @BarAlpha.setter
    def BarAlpha(self, val): self.BarAlpha.set(val)
    @property
    def BarHeight(self):  # type: ()->Float
        return Float(self._node.at("BarHeight"))
    @BarHeight.setter
    def BarHeight(self, val): self.BarHeight.set(val)
    @property
    def BarWidth(self):  # type: ()->Float
        return Float(self._node.at("BarWidth"))
    @BarWidth.setter
    def BarWidth(self, val): self.BarWidth.set(val)
    @property
    def BlankMaterialPath(self):  # type: ()->String
        return String(self._node.at("BlankMaterialPath"))
    @BlankMaterialPath.setter
    def BlankMaterialPath(self, val): self.BlankMaterialPath.set(val)
    @property
    def EnableReticle(self):  # type: ()->Bool
        return Bool(self._node.at("EnableReticle"))
    @EnableReticle.setter
    def EnableReticle(self, val): self.EnableReticle.set(val)
    @property
    def EnableReticleLock(self):  # type: ()->Bool
        return Bool(self._node.at("EnableReticleLock"))
    @EnableReticleLock.setter
    def EnableReticleLock(self, val): self.EnableReticleLock.set(val)
    @property
    def Font(self):  # type: ()->String
        return String(self._node.at("Font"))
    @Font.setter
    def Font(self, val): self.Font.set(val)
    @property
    def HaloBigGRC(self):  # type: ()->String
        return String(self._node.at("HaloBigGRC"))
    @HaloBigGRC.setter
    def HaloBigGRC(self, val): self.HaloBigGRC.set(val)
    @property
    def HaloSmallGRC(self):  # type: ()->String
        return String(self._node.at("HaloSmallGRC"))
    @HaloSmallGRC.setter
    def HaloSmallGRC(self, val): self.HaloSmallGRC.set(val)
    @property
    def LaunchedMessages(self):  # type: ()->Array[UIMessage]
        return (lambda n: Array(UIMessage, n))(self._node.at("LaunchedMessages"))
    @property
    def LaunchedSceneMessage(self):  # type: ()->UIMessage
        return UIMessage(self._node.at("LaunchedSceneMessage"))
    @property
    def ShowFoodBar(self):  # type: ()->Bool
        return Bool(self._node.at("ShowFoodBar"))
    @ShowFoodBar.setter
    def ShowFoodBar(self, val): self.ShowFoodBar.set(val)
    @property
    def ShowLifeBar(self):  # type: ()->Bool
        return Bool(self._node.at("ShowLifeBar"))
    @ShowLifeBar.setter
    def ShowLifeBar(self, val): self.ShowLifeBar.set(val)
    @property
    def ShowOxygenBar(self):  # type: ()->Bool
        return Bool(self._node.at("ShowOxygenBar"))
    @ShowOxygenBar.setter
    def ShowOxygenBar(self, val): self.ShowOxygenBar.set(val)
    @property
    def ShowTempBar(self):  # type: ()->Bool
        return Bool(self._node.at("ShowTempBar"))
    @ShowTempBar.setter
    def ShowTempBar(self, val): self.ShowTempBar.set(val)
    @property
    def ShowThirstBar(self):  # type: ()->Bool
        return Bool(self._node.at("ShowThirstBar"))
    @ShowThirstBar.setter
    def ShowThirstBar(self, val): self.ShowThirstBar.set(val)
    @property
    def ShowTiredBar(self):  # type: ()->Bool
        return Bool(self._node.at("ShowTiredBar"))
    @ShowTiredBar.setter
    def ShowTiredBar(self, val): self.ShowTiredBar.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SoundManager(HelperObject):
    schema_name = "SoundManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SoundManager
        return SoundManager(entlib.load_node_file(sourcefile, entlib.get_schema(SoundManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SoundManager
        return SoundManager(entlib.make_node(SoundManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AmbienceProbeLayerAttenuation(self):  # type: ()->Float
        return Float(self._node.at("AmbienceProbeLayerAttenuation"))
    @AmbienceProbeLayerAttenuation.setter
    def AmbienceProbeLayerAttenuation(self, val): self.AmbienceProbeLayerAttenuation.set(val)
    @property
    def AmbienceProbeLayerCount(self):  # type: ()->Int
        return Int(self._node.at("AmbienceProbeLayerCount"))
    @AmbienceProbeLayerCount.setter
    def AmbienceProbeLayerCount(self, val): self.AmbienceProbeLayerCount.set(val)
    @property
    def AmbienceProbeLayerSpacing(self):  # type: ()->Float
        return Float(self._node.at("AmbienceProbeLayerSpacing"))
    @AmbienceProbeLayerSpacing.setter
    def AmbienceProbeLayerSpacing(self, val): self.AmbienceProbeLayerSpacing.set(val)
    @property
    def AmbienceProbePerLayerCount(self):  # type: ()->Int
        return Int(self._node.at("AmbienceProbePerLayerCount"))
    @AmbienceProbePerLayerCount.setter
    def AmbienceProbePerLayerCount(self, val): self.AmbienceProbePerLayerCount.set(val)
    @property
    def AmbienceTagMapping(self):  # type: ()->Map[str, String]
        return (lambda n: Map(str, String, n))(self._node.at("AmbienceTagMapping"))
    @property
    def BiomeSoundBank(self):  # type: ()->SoundManager_BiomeSoundBank
        return SoundManager_BiomeSoundBank(self._node.at("BiomeSoundBank"))
    @property
    def CallAnswerDelayMax(self):  # type: ()->Float
        return Float(self._node.at("CallAnswerDelayMax"))
    @CallAnswerDelayMax.setter
    def CallAnswerDelayMax(self, val): self.CallAnswerDelayMax.set(val)
    @property
    def CallAnswerDelayMin(self):  # type: ()->Float
        return Float(self._node.at("CallAnswerDelayMin"))
    @CallAnswerDelayMin.setter
    def CallAnswerDelayMin(self, val): self.CallAnswerDelayMin.set(val)
    @property
    def CallDistance(self):  # type: ()->Float
        return Float(self._node.at("CallDistance"))
    @CallDistance.setter
    def CallDistance(self, val): self.CallDistance.set(val)
    @property
    def ClassStyleToHitActive(self):  # type: ()->Map[StyleModeEnum, String]
        return (lambda n: Map(StyleModeEnum, String, n))(self._node.at("ClassStyleToHitActive"))
    @property
    def CreatureType(self):  # type: ()->Array[CreatureTypeData]
        return (lambda n: Array(CreatureTypeData, n))(self._node.at("CreatureType"))
    @property
    def DefaultAmbiantBank(self):  # type: ()->String
        return String(self._node.at("DefaultAmbiantBank"))
    @DefaultAmbiantBank.setter
    def DefaultAmbiantBank(self, val): self.DefaultAmbiantBank.set(val)
    @property
    def DefaultAmbiantEvent(self):  # type: ()->String
        return String(self._node.at("DefaultAmbiantEvent"))
    @DefaultAmbiantEvent.setter
    def DefaultAmbiantEvent(self, val): self.DefaultAmbiantEvent.set(val)
    @property
    def DisplayListener(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayListener"))
    @DisplayListener.setter
    def DisplayListener(self, val): self.DisplayListener.set(val)
    @property
    def EchoEntityNames(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("EchoEntityNames"))
    @EchoEntityNames.setter
    def EchoEntityNames(self, val): self.EchoEntityNames.set(val)
    @property
    def Enabled(self):  # type: ()->Bool
        return Bool(self._node.at("Enabled"))
    @Enabled.setter
    def Enabled(self, val): self.Enabled.set(val)
    @property
    def GroundSFX(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("GroundSFX"))
    @GroundSFX.setter
    def GroundSFX(self, val): self.GroundSFX.set(val)
    @property
    def GroundTypeWater(self):  # type: ()->String
        return String(self._node.at("GroundTypeWater"))
    @GroundTypeWater.setter
    def GroundTypeWater(self, val): self.GroundTypeWater.set(val)
    @property
    def GroundTypeWaterDeep(self):  # type: ()->String
        return String(self._node.at("GroundTypeWaterDeep"))
    @GroundTypeWaterDeep.setter
    def GroundTypeWaterDeep(self, val): self.GroundTypeWaterDeep.set(val)
    @property
    def GroundTypeWaterPuddle(self):  # type: ()->String
        return String(self._node.at("GroundTypeWaterPuddle"))
    @GroundTypeWaterPuddle.setter
    def GroundTypeWaterPuddle(self, val): self.GroundTypeWaterPuddle.set(val)
    @property
    def GroundTypes(self):  # type: ()->Array[GroundTypeData]
        return (lambda n: Array(GroundTypeData, n))(self._node.at("GroundTypes"))
    @property
    def HitIntensityHigh(self):  # type: ()->Float
        return Float(self._node.at("HitIntensityHigh"))
    @HitIntensityHigh.setter
    def HitIntensityHigh(self, val): self.HitIntensityHigh.set(val)
    @property
    def HitIntensityLow(self):  # type: ()->Float
        return Float(self._node.at("HitIntensityLow"))
    @HitIntensityLow.setter
    def HitIntensityLow(self, val): self.HitIntensityLow.set(val)
    @property
    def InWaterEvent(self):  # type: ()->String
        return String(self._node.at("InWaterEvent"))
    @InWaterEvent.setter
    def InWaterEvent(self, val): self.InWaterEvent.set(val)
    @property
    def ListenerDistanceFromPlayer(self):  # type: ()->Float
        return Float(self._node.at("ListenerDistanceFromPlayer"))
    @ListenerDistanceFromPlayer.setter
    def ListenerDistanceFromPlayer(self, val): self.ListenerDistanceFromPlayer.set(val)
    @property
    def ListenerOnFreeCam(self):  # type: ()->Bool
        return Bool(self._node.at("ListenerOnFreeCam"))
    @ListenerOnFreeCam.setter
    def ListenerOnFreeCam(self, val): self.ListenerOnFreeCam.set(val)
    @property
    def OutWaterEvent(self):  # type: ()->String
        return String(self._node.at("OutWaterEvent"))
    @OutWaterEvent.setter
    def OutWaterEvent(self, val): self.OutWaterEvent.set(val)
    @property
    def RTPC_3DFrontBack(self):  # type: ()->String
        return String(self._node.at("RTPC_3DFrontBack"))
    @RTPC_3DFrontBack.setter
    def RTPC_3DFrontBack(self, val): self.RTPC_3DFrontBack.set(val)
    @property
    def RTPC_3DLeftRight(self):  # type: ()->String
        return String(self._node.at("RTPC_3DLeftRight"))
    @RTPC_3DLeftRight.setter
    def RTPC_3DLeftRight(self, val): self.RTPC_3DLeftRight.set(val)
    @property
    def RTPC_AbsoluteHeight(self):  # type: ()->String
        return String(self._node.at("RTPC_AbsoluteHeight"))
    @RTPC_AbsoluteHeight.setter
    def RTPC_AbsoluteHeight(self, val): self.RTPC_AbsoluteHeight.set(val)
    @property
    def RTPC_AmbientRegenLevel(self):  # type: ()->String
        return String(self._node.at("RTPC_AmbientRegenLevel"))
    @RTPC_AmbientRegenLevel.setter
    def RTPC_AmbientRegenLevel(self, val): self.RTPC_AmbientRegenLevel.set(val)
    @property
    def RTPC_AngleToListener(self):  # type: ()->String
        return String(self._node.at("RTPC_AngleToListener"))
    @RTPC_AngleToListener.setter
    def RTPC_AngleToListener(self, val): self.RTPC_AngleToListener.set(val)
    @property
    def RTPC_BoidLeavesCount(self):  # type: ()->String
        return String(self._node.at("RTPC_BoidLeavesCount"))
    @RTPC_BoidLeavesCount.setter
    def RTPC_BoidLeavesCount(self, val): self.RTPC_BoidLeavesCount.set(val)
    @property
    def RTPC_CreatureType(self):  # type: ()->String
        return String(self._node.at("RTPC_CreatureType"))
    @RTPC_CreatureType.setter
    def RTPC_CreatureType(self, val): self.RTPC_CreatureType.set(val)
    @property
    def RTPC_DayHour(self):  # type: ()->String
        return String(self._node.at("RTPC_DayHour"))
    @RTPC_DayHour.setter
    def RTPC_DayHour(self, val): self.RTPC_DayHour.set(val)
    @property
    def RTPC_Distance(self):  # type: ()->String
        return String(self._node.at("RTPC_Distance"))
    @RTPC_Distance.setter
    def RTPC_Distance(self, val): self.RTPC_Distance.set(val)
    @property
    def RTPC_DreamFireDistance(self):  # type: ()->String
        return String(self._node.at("RTPC_DreamFireDistance"))
    @RTPC_DreamFireDistance.setter
    def RTPC_DreamFireDistance(self, val): self.RTPC_DreamFireDistance.set(val)
    @property
    def RTPC_EntityAttackVolume(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityAttackVolume"))
    @RTPC_EntityAttackVolume.setter
    def RTPC_EntityAttackVolume(self, val): self.RTPC_EntityAttackVolume.set(val)
    @property
    def RTPC_EntityDoppler(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityDoppler"))
    @RTPC_EntityDoppler.setter
    def RTPC_EntityDoppler(self, val): self.RTPC_EntityDoppler.set(val)
    @property
    def RTPC_EntityHitIntensity(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityHitIntensity"))
    @RTPC_EntityHitIntensity.setter
    def RTPC_EntityHitIntensity(self, val): self.RTPC_EntityHitIntensity.set(val)
    @property
    def RTPC_EntityHitVolume(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityHitVolume"))
    @RTPC_EntityHitVolume.setter
    def RTPC_EntityHitVolume(self, val): self.RTPC_EntityHitVolume.set(val)
    @property
    def RTPC_EntityNodeRegen(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityNodeRegen"))
    @RTPC_EntityNodeRegen.setter
    def RTPC_EntityNodeRegen(self, val): self.RTPC_EntityNodeRegen.set(val)
    @property
    def RTPC_EntityPitch(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityPitch"))
    @RTPC_EntityPitch.setter
    def RTPC_EntityPitch(self, val): self.RTPC_EntityPitch.set(val)
    @property
    def RTPC_EntityRunDuration(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityRunDuration"))
    @RTPC_EntityRunDuration.setter
    def RTPC_EntityRunDuration(self, val): self.RTPC_EntityRunDuration.set(val)
    @property
    def RTPC_EntityScale(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityScale"))
    @RTPC_EntityScale.setter
    def RTPC_EntityScale(self, val): self.RTPC_EntityScale.set(val)
    @property
    def RTPC_EntityShamanVisiblity(self):  # type: ()->String
        return String(self._node.at("RTPC_EntityShamanVisiblity"))
    @RTPC_EntityShamanVisiblity.setter
    def RTPC_EntityShamanVisiblity(self, val): self.RTPC_EntityShamanVisiblity.set(val)
    @property
    def RTPC_EntitySpeed(self):  # type: ()->String
        return String(self._node.at("RTPC_EntitySpeed"))
    @RTPC_EntitySpeed.setter
    def RTPC_EntitySpeed(self, val): self.RTPC_EntitySpeed.set(val)
    @property
    def RTPC_FernProximity(self):  # type: ()->String
        return String(self._node.at("RTPC_FernProximity"))
    @RTPC_FernProximity.setter
    def RTPC_FernProximity(self, val): self.RTPC_FernProximity.set(val)
    @property
    def RTPC_FlowersProximity(self):  # type: ()->String
        return String(self._node.at("RTPC_FlowersProximity"))
    @RTPC_FlowersProximity.setter
    def RTPC_FlowersProximity(self, val): self.RTPC_FlowersProximity.set(val)
    @property
    def RTPC_Fx_Speed(self):  # type: ()->String
        return String(self._node.at("RTPC_Fx_Speed"))
    @RTPC_Fx_Speed.setter
    def RTPC_Fx_Speed(self, val): self.RTPC_Fx_Speed.set(val)
    @property
    def RTPC_HunterDistance(self):  # type: ()->String
        return String(self._node.at("RTPC_HunterDistance"))
    @RTPC_HunterDistance.setter
    def RTPC_HunterDistance(self, val): self.RTPC_HunterDistance.set(val)
    @property
    def RTPC_LocateClosestEntity(self):  # type: ()->String
        return String(self._node.at("RTPC_LocateClosestEntity"))
    @RTPC_LocateClosestEntity.setter
    def RTPC_LocateClosestEntity(self, val): self.RTPC_LocateClosestEntity.set(val)
    @property
    def RTPC_LocateEntityPan(self):  # type: ()->String
        return String(self._node.at("RTPC_LocateEntityPan"))
    @RTPC_LocateEntityPan.setter
    def RTPC_LocateEntityPan(self, val): self.RTPC_LocateEntityPan.set(val)
    @property
    def RTPC_OuterToInnerProximityEdges(self):  # type: ()->String
        return String(self._node.at("RTPC_OuterToInnerProximityEdges"))
    @RTPC_OuterToInnerProximityEdges.setter
    def RTPC_OuterToInnerProximityEdges(self, val): self.RTPC_OuterToInnerProximityEdges.set(val)
    @property
    def RTPC_PCEnergy(self):  # type: ()->String
        return String(self._node.at("RTPC_PCEnergy"))
    @RTPC_PCEnergy.setter
    def RTPC_PCEnergy(self, val): self.RTPC_PCEnergy.set(val)
    @property
    def RTPC_PCLife(self):  # type: ()->String
        return String(self._node.at("RTPC_PCLife"))
    @RTPC_PCLife.setter
    def RTPC_PCLife(self, val): self.RTPC_PCLife.set(val)
    @property
    def RTPC_PCScale(self):  # type: ()->String
        return String(self._node.at("RTPC_PCScale"))
    @RTPC_PCScale.setter
    def RTPC_PCScale(self, val): self.RTPC_PCScale.set(val)
    @property
    def RTPC_PCSpeed(self):  # type: ()->String
        return String(self._node.at("RTPC_PCSpeed"))
    @RTPC_PCSpeed.setter
    def RTPC_PCSpeed(self, val): self.RTPC_PCSpeed.set(val)
    @property
    def RTPC_PcNPC(self):  # type: ()->String
        return String(self._node.at("RTPC_PcNPC"))
    @RTPC_PcNPC.setter
    def RTPC_PcNPC(self, val): self.RTPC_PcNPC.set(val)
    @property
    def RTPC_PlayerAbsoluteHeight(self):  # type: ()->String
        return String(self._node.at("RTPC_PlayerAbsoluteHeight"))
    @RTPC_PlayerAbsoluteHeight.setter
    def RTPC_PlayerAbsoluteHeight(self, val): self.RTPC_PlayerAbsoluteHeight.set(val)
    @property
    def RTPC_PlayerAcceleration(self):  # type: ()->String
        return String(self._node.at("RTPC_PlayerAcceleration"))
    @RTPC_PlayerAcceleration.setter
    def RTPC_PlayerAcceleration(self, val): self.RTPC_PlayerAcceleration.set(val)
    @property
    def RTPC_PlayerRelativeHeight(self):  # type: ()->String
        return String(self._node.at("RTPC_PlayerRelativeHeight"))
    @RTPC_PlayerRelativeHeight.setter
    def RTPC_PlayerRelativeHeight(self, val): self.RTPC_PlayerRelativeHeight.set(val)
    @property
    def RTPC_Progress(self):  # type: ()->String
        return String(self._node.at("RTPC_Progress"))
    @RTPC_Progress.setter
    def RTPC_Progress(self, val): self.RTPC_Progress.set(val)
    @property
    def RTPC_RainIntensity(self):  # type: ()->String
        return String(self._node.at("RTPC_RainIntensity"))
    @RTPC_RainIntensity.setter
    def RTPC_RainIntensity(self, val): self.RTPC_RainIntensity.set(val)
    @property
    def RTPC_RelativeHeight(self):  # type: ()->String
        return String(self._node.at("RTPC_RelativeHeight"))
    @RTPC_RelativeHeight.setter
    def RTPC_RelativeHeight(self, val): self.RTPC_RelativeHeight.set(val)
    @property
    def RTPC_StormDistance(self):  # type: ()->String
        return String(self._node.at("RTPC_StormDistance"))
    @RTPC_StormDistance.setter
    def RTPC_StormDistance(self, val): self.RTPC_StormDistance.set(val)
    @property
    def RTPC_StormIntensity(self):  # type: ()->String
        return String(self._node.at("RTPC_StormIntensity"))
    @RTPC_StormIntensity.setter
    def RTPC_StormIntensity(self, val): self.RTPC_StormIntensity.set(val)
    @property
    def RTPC_SwampProximity(self):  # type: ()->String
        return String(self._node.at("RTPC_SwampProximity"))
    @RTPC_SwampProximity.setter
    def RTPC_SwampProximity(self, val): self.RTPC_SwampProximity.set(val)
    @property
    def RTPC_UnderwaterCameraActivator(self):  # type: ()->String
        return String(self._node.at("RTPC_UnderwaterCameraActivator"))
    @RTPC_UnderwaterCameraActivator.setter
    def RTPC_UnderwaterCameraActivator(self, val): self.RTPC_UnderwaterCameraActivator.set(val)
    @property
    def RTPC_UnderwaterDepth(self):  # type: ()->String
        return String(self._node.at("RTPC_UnderwaterDepth"))
    @RTPC_UnderwaterDepth.setter
    def RTPC_UnderwaterDepth(self, val): self.RTPC_UnderwaterDepth.set(val)
    @property
    def RainLevelStart(self):  # type: ()->Float
        return Float(self._node.at("RainLevelStart"))
    @RainLevelStart.setter
    def RainLevelStart(self, val): self.RainLevelStart.set(val)
    @property
    def SmallActorSpawnRules(self):  # type: ()->Map[str, SmallActorSpawnPointData]
        return (lambda n: Map(str, SmallActorSpawnPointData, n))(self._node.at("SmallActorSpawnRules"))
    @property
    def SoundTagDataFile(self):  # type: ()->String
        return String(self._node.at("SoundTagDataFile"))
    @SoundTagDataFile.setter
    def SoundTagDataFile(self, val): self.SoundTagDataFile.set(val)
    @property
    def Sound_GameEntity_Stop_All(self):  # type: ()->String
        return String(self._node.at("Sound_GameEntity_Stop_All"))
    @Sound_GameEntity_Stop_All.setter
    def Sound_GameEntity_Stop_All(self, val): self.Sound_GameEntity_Stop_All.set(val)
    @property
    def Sound_GameObject_Dial_Stop(self):  # type: ()->String
        return String(self._node.at("Sound_GameObject_Dial_Stop"))
    @Sound_GameObject_Dial_Stop.setter
    def Sound_GameObject_Dial_Stop(self, val): self.Sound_GameObject_Dial_Stop.set(val)
    @property
    def Sound_Game_Pause_All(self):  # type: ()->String
        return String(self._node.at("Sound_Game_Pause_All"))
    @Sound_Game_Pause_All.setter
    def Sound_Game_Pause_All(self, val): self.Sound_Game_Pause_All.set(val)
    @property
    def Sound_Game_Resume_All(self):  # type: ()->String
        return String(self._node.at("Sound_Game_Resume_All"))
    @Sound_Game_Resume_All.setter
    def Sound_Game_Resume_All(self, val): self.Sound_Game_Resume_All.set(val)
    @property
    def SoundbankEventDataFile(self):  # type: ()->String
        return String(self._node.at("SoundbankEventDataFile"))
    @SoundbankEventDataFile.setter
    def SoundbankEventDataFile(self, val): self.SoundbankEventDataFile.set(val)
    @property
    def SpeciesToHitActive(self):  # type: ()->Map[SpecieEnum, String]
        return (lambda n: Map(SpecieEnum, String, n))(self._node.at("SpeciesToHitActive"))
    @property
    def StateId_MainBiomeType(self):  # type: ()->String
        return String(self._node.at("StateId_MainBiomeType"))
    @StateId_MainBiomeType.setter
    def StateId_MainBiomeType(self, val): self.StateId_MainBiomeType.set(val)
    @property
    def StateId_RainLevel(self):  # type: ()->String
        return String(self._node.at("StateId_RainLevel"))
    @StateId_RainLevel.setter
    def StateId_RainLevel(self, val): self.StateId_RainLevel.set(val)
    @property
    def State_NoRain(self):  # type: ()->String
        return String(self._node.at("State_NoRain"))
    @State_NoRain.setter
    def State_NoRain(self, val): self.State_NoRain.set(val)
    @property
    def State_Rain(self):  # type: ()->String
        return String(self._node.at("State_Rain"))
    @State_Rain.setter
    def State_Rain(self, val): self.State_Rain.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def SwitchId_Appeau(self):  # type: ()->String
        return String(self._node.at("SwitchId_Appeau"))
    @SwitchId_Appeau.setter
    def SwitchId_Appeau(self, val): self.SwitchId_Appeau.set(val)
    @property
    def SwitchId_EntityState(self):  # type: ()->String
        return String(self._node.at("SwitchId_EntityState"))
    @SwitchId_EntityState.setter
    def SwitchId_EntityState(self, val): self.SwitchId_EntityState.set(val)
    @property
    def SwitchId_GiveOrder_Tone(self):  # type: ()->String
        return String(self._node.at("SwitchId_GiveOrder_Tone"))
    @SwitchId_GiveOrder_Tone.setter
    def SwitchId_GiveOrder_Tone(self, val): self.SwitchId_GiveOrder_Tone.set(val)
    @property
    def SwitchId_GiveOrder_Type(self):  # type: ()->String
        return String(self._node.at("SwitchId_GiveOrder_Type"))
    @SwitchId_GiveOrder_Type.setter
    def SwitchId_GiveOrder_Type(self, val): self.SwitchId_GiveOrder_Type.set(val)
    @property
    def SwitchId_GroundType(self):  # type: ()->String
        return String(self._node.at("SwitchId_GroundType"))
    @SwitchId_GroundType.setter
    def SwitchId_GroundType(self, val): self.SwitchId_GroundType.set(val)
    @property
    def SwitchId_Hit_Active(self):  # type: ()->String
        return String(self._node.at("SwitchId_Hit_Active"))
    @SwitchId_Hit_Active.setter
    def SwitchId_Hit_Active(self, val): self.SwitchId_Hit_Active.set(val)
    @property
    def SwitchId_Hit_Intensity(self):  # type: ()->String
        return String(self._node.at("SwitchId_Hit_Intensity"))
    @SwitchId_Hit_Intensity.setter
    def SwitchId_Hit_Intensity(self, val): self.SwitchId_Hit_Intensity.set(val)
    @property
    def SwitchId_Hit_Style(self):  # type: ()->String
        return String(self._node.at("SwitchId_Hit_Style"))
    @SwitchId_Hit_Style.setter
    def SwitchId_Hit_Style(self, val): self.SwitchId_Hit_Style.set(val)
    @property
    def SwitchId_Level(self):  # type: ()->String
        return String(self._node.at("SwitchId_Level"))
    @SwitchId_Level.setter
    def SwitchId_Level(self, val): self.SwitchId_Level.set(val)
    @property
    def SwitchId_OutfitInteraction(self):  # type: ()->String
        return String(self._node.at("SwitchId_OutfitInteraction"))
    @SwitchId_OutfitInteraction.setter
    def SwitchId_OutfitInteraction(self, val): self.SwitchId_OutfitInteraction.set(val)
    @property
    def SwitchId_VegetType(self):  # type: ()->String
        return String(self._node.at("SwitchId_VegetType"))
    @SwitchId_VegetType.setter
    def SwitchId_VegetType(self, val): self.SwitchId_VegetType.set(val)
    @property
    def SwitchState_EntityState_Attack(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Attack"))
    @SwitchState_EntityState_Attack.setter
    def SwitchState_EntityState_Attack(self, val): self.SwitchState_EntityState_Attack.set(val)
    @property
    def SwitchState_EntityState_Cold(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Cold"))
    @SwitchState_EntityState_Cold.setter
    def SwitchState_EntityState_Cold(self, val): self.SwitchState_EntityState_Cold.set(val)
    @property
    def SwitchState_EntityState_Defend(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Defend"))
    @SwitchState_EntityState_Defend.setter
    def SwitchState_EntityState_Defend(self, val): self.SwitchState_EntityState_Defend.set(val)
    @property
    def SwitchState_EntityState_Examine(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Examine"))
    @SwitchState_EntityState_Examine.setter
    def SwitchState_EntityState_Examine(self, val): self.SwitchState_EntityState_Examine.set(val)
    @property
    def SwitchState_EntityState_Flee(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Flee"))
    @SwitchState_EntityState_Flee.setter
    def SwitchState_EntityState_Flee(self, val): self.SwitchState_EntityState_Flee.set(val)
    @property
    def SwitchState_EntityState_Follow(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Follow"))
    @SwitchState_EntityState_Follow.setter
    def SwitchState_EntityState_Follow(self, val): self.SwitchState_EntityState_Follow.set(val)
    @property
    def SwitchState_EntityState_Hungry(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Hungry"))
    @SwitchState_EntityState_Hungry.setter
    def SwitchState_EntityState_Hungry(self, val): self.SwitchState_EntityState_Hungry.set(val)
    @property
    def SwitchState_EntityState_Hunt(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Hunt"))
    @SwitchState_EntityState_Hunt.setter
    def SwitchState_EntityState_Hunt(self, val): self.SwitchState_EntityState_Hunt.set(val)
    @property
    def SwitchState_EntityState_Idle(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Idle"))
    @SwitchState_EntityState_Idle.setter
    def SwitchState_EntityState_Idle(self, val): self.SwitchState_EntityState_Idle.set(val)
    @property
    def SwitchState_EntityState_Protect(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Protect"))
    @SwitchState_EntityState_Protect.setter
    def SwitchState_EntityState_Protect(self, val): self.SwitchState_EntityState_Protect.set(val)
    @property
    def SwitchState_EntityState_Sleep(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Sleep"))
    @SwitchState_EntityState_Sleep.setter
    def SwitchState_EntityState_Sleep(self, val): self.SwitchState_EntityState_Sleep.set(val)
    @property
    def SwitchState_EntityState_Thirst(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Thirst"))
    @SwitchState_EntityState_Thirst.setter
    def SwitchState_EntityState_Thirst(self, val): self.SwitchState_EntityState_Thirst.set(val)
    @property
    def SwitchState_EntityState_Threat(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Threat"))
    @SwitchState_EntityState_Threat.setter
    def SwitchState_EntityState_Threat(self, val): self.SwitchState_EntityState_Threat.set(val)
    @property
    def SwitchState_EntityState_Wait(self):  # type: ()->String
        return String(self._node.at("SwitchState_EntityState_Wait"))
    @SwitchState_EntityState_Wait.setter
    def SwitchState_EntityState_Wait(self, val): self.SwitchState_EntityState_Wait.set(val)
    @property
    def SwitchState_GiveOrder_Follow(self):  # type: ()->String
        return String(self._node.at("SwitchState_GiveOrder_Follow"))
    @SwitchState_GiveOrder_Follow.setter
    def SwitchState_GiveOrder_Follow(self, val): self.SwitchState_GiveOrder_Follow.set(val)
    @property
    def SwitchState_GiveOrder_Insistent(self):  # type: ()->String
        return String(self._node.at("SwitchState_GiveOrder_Insistent"))
    @SwitchState_GiveOrder_Insistent.setter
    def SwitchState_GiveOrder_Insistent(self, val): self.SwitchState_GiveOrder_Insistent.set(val)
    @property
    def SwitchState_GiveOrder_Normal(self):  # type: ()->String
        return String(self._node.at("SwitchState_GiveOrder_Normal"))
    @SwitchState_GiveOrder_Normal.setter
    def SwitchState_GiveOrder_Normal(self, val): self.SwitchState_GiveOrder_Normal.set(val)
    @property
    def SwitchState_GiveOrder_Wait(self):  # type: ()->String
        return String(self._node.at("SwitchState_GiveOrder_Wait"))
    @SwitchState_GiveOrder_Wait.setter
    def SwitchState_GiveOrder_Wait(self, val): self.SwitchState_GiveOrder_Wait.set(val)
    @property
    def SwitchState_Level_High(self):  # type: ()->String
        return String(self._node.at("SwitchState_Level_High"))
    @SwitchState_Level_High.setter
    def SwitchState_Level_High(self, val): self.SwitchState_Level_High.set(val)
    @property
    def SwitchState_Level_Low(self):  # type: ()->String
        return String(self._node.at("SwitchState_Level_Low"))
    @SwitchState_Level_Low.setter
    def SwitchState_Level_Low(self, val): self.SwitchState_Level_Low.set(val)
    @property
    def SwitchState_Level_Medium(self):  # type: ()->String
        return String(self._node.at("SwitchState_Level_Medium"))
    @SwitchState_Level_Medium.setter
    def SwitchState_Level_Medium(self, val): self.SwitchState_Level_Medium.set(val)
    @property
    def SwitchState_Level_VeryHigh(self):  # type: ()->String
        return String(self._node.at("SwitchState_Level_VeryHigh"))
    @SwitchState_Level_VeryHigh.setter
    def SwitchState_Level_VeryHigh(self, val): self.SwitchState_Level_VeryHigh.set(val)
    @property
    def Switch_Ground_Prefix(self):  # type: ()->String
        return String(self._node.at("Switch_Ground_Prefix"))
    @Switch_Ground_Prefix.setter
    def Switch_Ground_Prefix(self, val): self.Switch_Ground_Prefix.set(val)
    @property
    def TagColors(self):  # type: ()->Map[str, Color]
        return (lambda n: Map(str, Color, n))(self._node.at("TagColors"))
    @property
    def UnderWaterBank(self):  # type: ()->String
        return String(self._node.at("UnderWaterBank"))
    @UnderWaterBank.setter
    def UnderWaterBank(self, val): self.UnderWaterBank.set(val)
    @property
    def UnderWaterOnPlayer(self):  # type: ()->Bool
        return Bool(self._node.at("UnderWaterOnPlayer"))
    @UnderWaterOnPlayer.setter
    def UnderWaterOnPlayer(self, val): self.UnderWaterOnPlayer.set(val)
    @property
    def UnderwaterOutZone(self):  # type: ()->Float
        return Float(self._node.at("UnderwaterOutZone"))
    @UnderwaterOutZone.setter
    def UnderwaterOutZone(self, val): self.UnderwaterOutZone.set(val)
    @property
    def VegetationTagMapping(self):  # type: ()->Map[str, String]
        return (lambda n: Map(str, String, n))(self._node.at("VegetationTagMapping"))
    @property
    def VerticalUnderWaterOffset(self):  # type: ()->Float
        return Float(self._node.at("VerticalUnderWaterOffset"))
    @VerticalUnderWaterOffset.setter
    def VerticalUnderWaterOffset(self, val): self.VerticalUnderWaterOffset.set(val)
    @property
    def VolumeRTPCScaleFactor(self):  # type: ()->Float
        return Float(self._node.at("VolumeRTPCScaleFactor"))
    @VolumeRTPCScaleFactor.setter
    def VolumeRTPCScaleFactor(self, val): self.VolumeRTPCScaleFactor.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class OnlineDebugger_BandwidthWindow_BandwithLimit(HelperObject):
    schema_name = "OnlineDebugger::BandwidthWindow::BandwithLimit"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->OnlineDebugger_BandwidthWindow_BandwithLimit
        return OnlineDebugger_BandwidthWindow_BandwithLimit(entlib.load_node_file(sourcefile, entlib.get_schema(OnlineDebugger_BandwidthWindow_BandwithLimit.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->OnlineDebugger_BandwidthWindow_BandwithLimit
        return OnlineDebugger_BandwidthWindow_BandwithLimit(entlib.make_node(OnlineDebugger_BandwidthWindow_BandwithLimit.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def color(self):  # type: ()->Color
        return Color(self._node.at("color"))
    @color.setter
    def color(self, val): self.color.set(val)
    @property
    def limit(self):  # type: ()->Float
        return Float(self._node.at("limit"))
    @limit.setter
    def limit(self, val): self.limit.set(val)
    pass


from EntityLibPy import Node

class OnlineDebugger_BandwidthWindow(HelperObject):
    schema_name = "OnlineDebugger::BandwidthWindow"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->OnlineDebugger_BandwidthWindow
        return OnlineDebugger_BandwidthWindow(entlib.load_node_file(sourcefile, entlib.get_schema(OnlineDebugger_BandwidthWindow.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->OnlineDebugger_BandwidthWindow
        return OnlineDebugger_BandwidthWindow(entlib.make_node(OnlineDebugger_BandwidthWindow.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DownColor(self):  # type: ()->Array[OnlineDebugger_BandwidthWindow_BandwithLimit]
        return (lambda n: Array(OnlineDebugger_BandwidthWindow_BandwithLimit, n))(self._node.at("DownColor"))
    @property
    def Enabled(self):  # type: ()->Bool
        return Bool(self._node.at("Enabled"))
    @Enabled.setter
    def Enabled(self, val): self.Enabled.set(val)
    @property
    def UpColor(self):  # type: ()->Array[OnlineDebugger_BandwidthWindow_BandwithLimit]
        return (lambda n: Array(OnlineDebugger_BandwidthWindow_BandwithLimit, n))(self._node.at("UpColor"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class LightComponentGD(HelperObject):
    schema_name = "LightComponentGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->LightComponentGD
        return LightComponentGD(entlib.load_node_file(sourcefile, entlib.get_schema(LightComponentGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->LightComponentGD
        return LightComponentGD(entlib.make_node(LightComponentGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AngleOffset(self):  # type: ()->Vector3
        return Vector3(self._node.at("AngleOffset"))
    @AngleOffset.setter
    def AngleOffset(self, val): self.AngleOffset.set(val)
    @property
    def Brightness(self):  # type: ()->Float
        return Float(self._node.at("Brightness"))
    @Brightness.setter
    def Brightness(self, val): self.Brightness.set(val)
    @property
    def CastShadow(self):  # type: ()->Bool
        return Bool(self._node.at("CastShadow"))
    @CastShadow.setter
    def CastShadow(self, val): self.CastShadow.set(val)
    @property
    def Color(self):  # type: ()->Color
        return Color(self._node.at("Color"))
    @Color.setter
    def Color(self, val): self.Color.set(val)
    @property
    def Direction(self):  # type: ()->Vector3
        return Vector3(self._node.at("Direction"))
    @Direction.setter
    def Direction(self, val): self.Direction.set(val)
    @property
    def Enabled(self):  # type: ()->Bool
        return Bool(self._node.at("Enabled"))
    @Enabled.setter
    def Enabled(self, val): self.Enabled.set(val)
    @property
    def LinearAttenuationStart(self):  # type: ()->Float
        return Float(self._node.at("LinearAttenuationStart"))
    @LinearAttenuationStart.setter
    def LinearAttenuationStart(self, val): self.LinearAttenuationStart.set(val)
    @property
    def LinearAttenuationStop(self):  # type: ()->Float
        return Float(self._node.at("LinearAttenuationStop"))
    @LinearAttenuationStop.setter
    def LinearAttenuationStop(self, val): self.LinearAttenuationStop.set(val)
    @property
    def Offset(self):  # type: ()->Vector3
        return Vector3(self._node.at("Offset"))
    @Offset.setter
    def Offset(self, val): self.Offset.set(val)
    @property
    def RadialAttenuationStart(self):  # type: ()->Float
        return Float(self._node.at("RadialAttenuationStart"))
    @RadialAttenuationStart.setter
    def RadialAttenuationStart(self, val): self.RadialAttenuationStart.set(val)
    @property
    def RadialAttenuationStop(self):  # type: ()->Float
        return Float(self._node.at("RadialAttenuationStop"))
    @RadialAttenuationStop.setter
    def RadialAttenuationStop(self, val): self.RadialAttenuationStop.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Type_(self):  # type: ()->LightType
        return LightType(self._node.at("Type"))
    @Type_.setter
    def Type_(self, val): self.Type_.set(val)
    @property
    def VolumetricFog(self):  # type: ()->Bool
        return Bool(self._node.at("VolumetricFog"))
    @VolumetricFog.setter
    def VolumetricFog(self, val): self.VolumetricFog.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GradientColor(HelperObject):
    schema_name = "GradientColor"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GradientColor
        return GradientColor(entlib.load_node_file(sourcefile, entlib.get_schema(GradientColor.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GradientColor
        return GradientColor(entlib.make_node(GradientColor.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def color(self):  # type: ()->Color
        return Color(self._node.at("color"))
    @color.setter
    def color(self, val): self.color.set(val)
    @property
    def percent(self):  # type: ()->Float
        return Float(self._node.at("percent"))
    @percent.setter
    def percent(self, val): self.percent.set(val)
    pass


from EntityLibPy import Node

class EditorManager(HelperObject):
    schema_name = "EditorManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EditorManager
        return EditorManager(entlib.load_node_file(sourcefile, entlib.get_schema(EditorManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EditorManager
        return EditorManager(entlib.make_node(EditorManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActivateMouseControl(self):  # type: ()->Bool
        return Bool(self._node.at("ActivateMouseControl"))
    @ActivateMouseControl.setter
    def ActivateMouseControl(self, val): self.ActivateMouseControl.set(val)
    @property
    def DisableDisplayDebugEntityInfo(self):  # type: ()->Bool
        return Bool(self._node.at("DisableDisplayDebugEntityInfo"))
    @DisableDisplayDebugEntityInfo.setter
    def DisableDisplayDebugEntityInfo(self, val): self.DisableDisplayDebugEntityInfo.set(val)
    @property
    def GameBlockedWhenActive(self):  # type: ()->Bool
        return Bool(self._node.at("GameBlockedWhenActive"))
    @GameBlockedWhenActive.setter
    def GameBlockedWhenActive(self, val): self.GameBlockedWhenActive.set(val)
    @property
    def MoveZ_Blend(self):  # type: ()->Float
        return Float(self._node.at("MoveZ_Blend"))
    @MoveZ_Blend.setter
    def MoveZ_Blend(self, val): self.MoveZ_Blend.set(val)
    @property
    def MoveZ_BlendJoy(self):  # type: ()->Float
        return Float(self._node.at("MoveZ_BlendJoy"))
    @MoveZ_BlendJoy.setter
    def MoveZ_BlendJoy(self, val): self.MoveZ_BlendJoy.set(val)
    @property
    def MoveZ_SpeedAtScreenWidthMax(self):  # type: ()->Float
        return Float(self._node.at("MoveZ_SpeedAtScreenWidthMax"))
    @MoveZ_SpeedAtScreenWidthMax.setter
    def MoveZ_SpeedAtScreenWidthMax(self, val): self.MoveZ_SpeedAtScreenWidthMax.set(val)
    @property
    def MoveZ_SpeedAtScreenWidthMin(self):  # type: ()->Float
        return Float(self._node.at("MoveZ_SpeedAtScreenWidthMin"))
    @MoveZ_SpeedAtScreenWidthMin.setter
    def MoveZ_SpeedAtScreenWidthMin(self, val): self.MoveZ_SpeedAtScreenWidthMin.set(val)
    @property
    def Rotate_AccelerationTime(self):  # type: ()->Float
        return Float(self._node.at("Rotate_AccelerationTime"))
    @Rotate_AccelerationTime.setter
    def Rotate_AccelerationTime(self, val): self.Rotate_AccelerationTime.set(val)
    @property
    def Rotate_Blend(self):  # type: ()->Float
        return Float(self._node.at("Rotate_Blend"))
    @Rotate_Blend.setter
    def Rotate_Blend(self, val): self.Rotate_Blend.set(val)
    @property
    def Rotate_Speed(self):  # type: ()->Float
        return Float(self._node.at("Rotate_Speed"))
    @Rotate_Speed.setter
    def Rotate_Speed(self, val): self.Rotate_Speed.set(val)
    @property
    def Scale_AccelerationTime(self):  # type: ()->Float
        return Float(self._node.at("Scale_AccelerationTime"))
    @Scale_AccelerationTime.setter
    def Scale_AccelerationTime(self, val): self.Scale_AccelerationTime.set(val)
    @property
    def Scale_Blend(self):  # type: ()->Float
        return Float(self._node.at("Scale_Blend"))
    @Scale_Blend.setter
    def Scale_Blend(self, val): self.Scale_Blend.set(val)
    @property
    def Scale_Speed(self):  # type: ()->Float
        return Float(self._node.at("Scale_Speed"))
    @Scale_Speed.setter
    def Scale_Speed(self, val): self.Scale_Speed.set(val)
    @property
    def Selection_DistanceMax(self):  # type: ()->Float
        return Float(self._node.at("Selection_DistanceMax"))
    @Selection_DistanceMax.setter
    def Selection_DistanceMax(self, val): self.Selection_DistanceMax.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def Text_BackgroundColor(self):  # type: ()->Color
        return Color(self._node.at("Text_BackgroundColor"))
    @Text_BackgroundColor.setter
    def Text_BackgroundColor(self, val): self.Text_BackgroundColor.set(val)
    @property
    def Text_DefaultColor(self):  # type: ()->Color
        return Color(self._node.at("Text_DefaultColor"))
    @Text_DefaultColor.setter
    def Text_DefaultColor(self, val): self.Text_DefaultColor.set(val)
    @property
    def Text_Scale(self):  # type: ()->Float
        return Float(self._node.at("Text_Scale"))
    @Text_Scale.setter
    def Text_Scale(self, val): self.Text_Scale.set(val)
    @property
    def Text_SelectedColor(self):  # type: ()->Color
        return Color(self._node.at("Text_SelectedColor"))
    @Text_SelectedColor.setter
    def Text_SelectedColor(self, val): self.Text_SelectedColor.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BoidsGD(HelperObject):
    schema_name = "BoidsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BoidsGD
        return BoidsGD(entlib.load_node_file(sourcefile, entlib.get_schema(BoidsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BoidsGD
        return BoidsGD(entlib.make_node(BoidsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AffectedByFluid(self):  # type: ()->Bool
        return Bool(self._node.at("AffectedByFluid"))
    @AffectedByFluid.setter
    def AffectedByFluid(self, val): self.AffectedByFluid.set(val)
    @property
    def AllowMerge(self):  # type: ()->Bool
        return Bool(self._node.at("AllowMerge"))
    @AllowMerge.setter
    def AllowMerge(self, val): self.AllowMerge.set(val)
    @property
    def AutoMoveRoot(self):  # type: ()->Bool
        return Bool(self._node.at("AutoMoveRoot"))
    @AutoMoveRoot.setter
    def AutoMoveRoot(self, val): self.AutoMoveRoot.set(val)
    @property
    def BudEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("BudEntityRef"))
    @BudEntityRef.setter
    def BudEntityRef(self, val): self.BudEntityRef.set(val)
    @property
    def BudVisualScaleMax(self):  # type: ()->Float
        return Float(self._node.at("BudVisualScaleMax"))
    @BudVisualScaleMax.setter
    def BudVisualScaleMax(self, val): self.BudVisualScaleMax.set(val)
    @property
    def BudVisualScaleMin(self):  # type: ()->Float
        return Float(self._node.at("BudVisualScaleMin"))
    @BudVisualScaleMin.setter
    def BudVisualScaleMin(self, val): self.BudVisualScaleMin.set(val)
    @property
    def DisplayMaster(self):  # type: ()->Bool
        return Bool(self._node.at("DisplayMaster"))
    @DisplayMaster.setter
    def DisplayMaster(self, val): self.DisplayMaster.set(val)
    @property
    def FlockingAttackDamages(self):  # type: ()->Float
        return Float(self._node.at("FlockingAttackDamages"))
    @FlockingAttackDamages.setter
    def FlockingAttackDamages(self, val): self.FlockingAttackDamages.set(val)
    @property
    def FluidSurfaceHeightOffset(self):  # type: ()->Float
        return Float(self._node.at("FluidSurfaceHeightOffset"))
    @FluidSurfaceHeightOffset.setter
    def FluidSurfaceHeightOffset(self, val): self.FluidSurfaceHeightOffset.set(val)
    @property
    def ForceOutsideWater(self):  # type: ()->Bool
        return Bool(self._node.at("ForceOutsideWater"))
    @ForceOutsideWater.setter
    def ForceOutsideWater(self, val): self.ForceOutsideWater.set(val)
    @property
    def FullEntityPoolRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("FullEntityPoolRef"))
    @FullEntityPoolRef.setter
    def FullEntityPoolRef(self, val): self.FullEntityPoolRef.set(val)
    @property
    def GetBackToFlockingDuration(self):  # type: ()->Float
        return Float(self._node.at("GetBackToFlockingDuration"))
    @GetBackToFlockingDuration.setter
    def GetBackToFlockingDuration(self, val): self.GetBackToFlockingDuration.set(val)
    @property
    def GhostDuration(self):  # type: ()->Float
        return Float(self._node.at("GhostDuration"))
    @GhostDuration.setter
    def GhostDuration(self, val): self.GhostDuration.set(val)
    @property
    def HackCanCreateHitRigidbody(self):  # type: ()->Bool
        return Bool(self._node.at("HackCanCreateHitRigidbody"))
    @HackCanCreateHitRigidbody.setter
    def HackCanCreateHitRigidbody(self, val): self.HackCanCreateHitRigidbody.set(val)
    @property
    def HierarchyDistanceMultiplier(self):  # type: ()->Float
        return Float(self._node.at("HierarchyDistanceMultiplier"))
    @HierarchyDistanceMultiplier.setter
    def HierarchyDistanceMultiplier(self, val): self.HierarchyDistanceMultiplier.set(val)
    @property
    def InitialRadius(self):  # type: ()->Float
        return Float(self._node.at("InitialRadius"))
    @InitialRadius.setter
    def InitialRadius(self, val): self.InitialRadius.set(val)
    @property
    def LightBrightness(self):  # type: ()->Float
        return Float(self._node.at("LightBrightness"))
    @LightBrightness.setter
    def LightBrightness(self, val): self.LightBrightness.set(val)
    @property
    def LightColor(self):  # type: ()->Color
        return Color(self._node.at("LightColor"))
    @LightColor.setter
    def LightColor(self, val): self.LightColor.set(val)
    @property
    def MainTargetHeight(self):  # type: ()->Float
        return Float(self._node.at("MainTargetHeight"))
    @MainTargetHeight.setter
    def MainTargetHeight(self, val): self.MainTargetHeight.set(val)
    @property
    def MainTargetRotateDistance(self):  # type: ()->Float
        return Float(self._node.at("MainTargetRotateDistance"))
    @MainTargetRotateDistance.setter
    def MainTargetRotateDistance(self, val): self.MainTargetRotateDistance.set(val)
    @property
    def MainTargetSpeedMultiplier(self):  # type: ()->Float
        return Float(self._node.at("MainTargetSpeedMultiplier"))
    @MainTargetSpeedMultiplier.setter
    def MainTargetSpeedMultiplier(self, val): self.MainTargetSpeedMultiplier.set(val)
    @property
    def MinRegenToWakeUp(self):  # type: ()->Float
        return Float(self._node.at("MinRegenToWakeUp"))
    @MinRegenToWakeUp.setter
    def MinRegenToWakeUp(self, val): self.MinRegenToWakeUp.set(val)
    @property
    def NbAgents(self):  # type: ()->Int
        return Int(self._node.at("NbAgents"))
    @NbAgents.setter
    def NbAgents(self, val): self.NbAgents.set(val)
    @property
    def NbAgentsPerZone(self):  # type: ()->Int
        return Int(self._node.at("NbAgentsPerZone"))
    @NbAgentsPerZone.setter
    def NbAgentsPerZone(self, val): self.NbAgentsPerZone.set(val)
    @property
    def ParamBlock(self):  # type: ()->String
        return String(self._node.at("ParamBlock"))
    @ParamBlock.setter
    def ParamBlock(self, val): self.ParamBlock.set(val)
    @property
    def ParamBudAppear(self):  # type: ()->String
        return String(self._node.at("ParamBudAppear"))
    @ParamBudAppear.setter
    def ParamBudAppear(self, val): self.ParamBudAppear.set(val)
    @property
    def ParamBudOpen(self):  # type: ()->String
        return String(self._node.at("ParamBudOpen"))
    @ParamBudOpen.setter
    def ParamBudOpen(self, val): self.ParamBudOpen.set(val)
    @property
    def ParamHome(self):  # type: ()->String
        return String(self._node.at("ParamHome"))
    @ParamHome.setter
    def ParamHome(self, val): self.ParamHome.set(val)
    @property
    def ParamMove(self):  # type: ()->String
        return String(self._node.at("ParamMove"))
    @ParamMove.setter
    def ParamMove(self, val): self.ParamMove.set(val)
    @property
    def ParamSwim(self):  # type: ()->String
        return String(self._node.at("ParamSwim"))
    @ParamSwim.setter
    def ParamSwim(self, val): self.ParamSwim.set(val)
    @property
    def ParamWakeUp(self):  # type: ()->String
        return String(self._node.at("ParamWakeUp"))
    @ParamWakeUp.setter
    def ParamWakeUp(self, val): self.ParamWakeUp.set(val)
    @property
    def PointCloudSearchRadius(self):  # type: ()->Float
        return Float(self._node.at("PointCloudSearchRadius"))
    @PointCloudSearchRadius.setter
    def PointCloudSearchRadius(self, val): self.PointCloudSearchRadius.set(val)
    @property
    def PointCloudTag(self):  # type: ()->String
        return String(self._node.at("PointCloudTag"))
    @PointCloudTag.setter
    def PointCloudTag(self, val): self.PointCloudTag.set(val)
    @property
    def PresetName(self):  # type: ()->String
        return String(self._node.at("PresetName"))
    @PresetName.setter
    def PresetName(self, val): self.PresetName.set(val)
    @property
    def PresetNameBud(self):  # type: ()->String
        return String(self._node.at("PresetNameBud"))
    @PresetNameBud.setter
    def PresetNameBud(self, val): self.PresetNameBud.set(val)
    @property
    def RegenMaxThreshold(self):  # type: ()->Float
        return Float(self._node.at("RegenMaxThreshold"))
    @RegenMaxThreshold.setter
    def RegenMaxThreshold(self, val): self.RegenMaxThreshold.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def VisualScaleMax(self):  # type: ()->Float
        return Float(self._node.at("VisualScaleMax"))
    @VisualScaleMax.setter
    def VisualScaleMax(self, val): self.VisualScaleMax.set(val)
    @property
    def VisualScaleMin(self):  # type: ()->Float
        return Float(self._node.at("VisualScaleMin"))
    @VisualScaleMin.setter
    def VisualScaleMin(self, val): self.VisualScaleMin.set(val)
    @property
    def WakeUpDuration(self):  # type: ()->Float
        return Float(self._node.at("WakeUpDuration"))
    @WakeUpDuration.setter
    def WakeUpDuration(self, val): self.WakeUpDuration.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Collider(HelperObject):
    schema_name = "Collider"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Collider
        return Collider(entlib.load_node_file(sourcefile, entlib.get_schema(Collider.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Collider
        return Collider(entlib.make_node(Collider.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BoneName(self):  # type: ()->String
        return String(self._node.at("BoneName"))
    @BoneName.setter
    def BoneName(self, val): self.BoneName.set(val)
    @property
    def RadiusFactor(self):  # type: ()->Float
        return Float(self._node.at("RadiusFactor"))
    @RadiusFactor.setter
    def RadiusFactor(self, val): self.RadiusFactor.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Codec(HelperObject):
    schema_name = "Codec"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Codec
        return Codec(entlib.load_node_file(sourcefile, entlib.get_schema(Codec.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Codec
        return Codec(entlib.make_node(Codec.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class Zlib(HelperObject):
    schema_name = "Zlib"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Zlib
        return Zlib(entlib.load_node_file(sourcefile, entlib.get_schema(Zlib.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Zlib
        return Zlib(entlib.make_node(Zlib.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Codec
        return Codec(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Lz4Fast(HelperObject):
    schema_name = "Lz4Fast"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Lz4Fast
        return Lz4Fast(entlib.load_node_file(sourcefile, entlib.get_schema(Lz4Fast.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Lz4Fast
        return Lz4Fast(entlib.make_node(Lz4Fast.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->Codec
        return Codec(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ClassMemberRef(HelperObject):
    schema_name = "ClassMemberRef"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ClassMemberRef
        return ClassMemberRef(entlib.load_node_file(sourcefile, entlib.get_schema(ClassMemberRef.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ClassMemberRef
        return ClassMemberRef(entlib.make_node(ClassMemberRef.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def class_(self):  # type: ()->String
        return String(self._node.at("class"))
    @class_.setter
    def class_(self, val): self.class_.set(val)
    @property
    def member(self):  # type: ()->String
        return String(self._node.at("member"))
    @member.setter
    def member(self, val): self.member.set(val)
    pass


from EntityLibPy import Node

class ComponentSignalRef(HelperObject):
    schema_name = "ComponentSignalRef"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ComponentSignalRef
        return ComponentSignalRef(entlib.load_node_file(sourcefile, entlib.get_schema(ComponentSignalRef.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ComponentSignalRef
        return ComponentSignalRef(entlib.make_node(ComponentSignalRef.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Signal(self):  # type: ()->ClassMemberRef
        return ClassMemberRef(self._node.at("Signal"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ComponentMethodRef(HelperObject):
    schema_name = "ComponentMethodRef"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ComponentMethodRef
        return ComponentMethodRef(entlib.load_node_file(sourcefile, entlib.get_schema(ComponentMethodRef.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ComponentMethodRef
        return ComponentMethodRef(entlib.make_node(ComponentMethodRef.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Method(self):  # type: ()->ClassMemberRef
        return ClassMemberRef(self._node.at("Method"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Connection(HelperObject):
    schema_name = "Connection"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Connection
        return Connection(entlib.load_node_file(sourcefile, entlib.get_schema(Connection.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Connection
        return Connection(entlib.make_node(Connection.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def receiver(self):  # type: ()->ComponentMethodRef
        return ComponentMethodRef(self._node.at("receiver"))
    @property
    def sender(self):  # type: ()->ComponentSignalRef
        return ComponentSignalRef(self._node.at("sender"))
    pass


from EntityLibPy import Node
class CinematicUpdateTypeEnum(Enum):
    none = "none"
    Internal = "Internal"
    Pesto = "Pesto"
    CinematicUpdateType_COUNT = "CinematicUpdateType_COUNT"


class CinematicUpdateType(Primitive[CinematicUpdateTypeEnum]):  # Enum
    def __init__(self, node):
        super(CinematicUpdateType, self).__init__(CinematicUpdateTypeEnum, node)
    schema_name = "CinematicUpdateType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> CinematicUpdateType
        return CinematicUpdateType(node)
    def set(self, val):  # type: (CinematicUpdateTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class CinematicSlot(HelperObject):
    schema_name = "CinematicSlot"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CinematicSlot
        return CinematicSlot(entlib.load_node_file(sourcefile, entlib.get_schema(CinematicSlot.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CinematicSlot
        return CinematicSlot(entlib.make_node(CinematicSlot.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Anim(self):  # type: ()->String
        return String(self._node.at("Anim"))
    @Anim.setter
    def Anim(self, val): self.Anim.set(val)
    @property
    def CameraHolder(self):  # type: ()->Bool
        return Bool(self._node.at("CameraHolder"))
    @CameraHolder.setter
    def CameraHolder(self, val): self.CameraHolder.set(val)
    @property
    def CanBeInstanciated(self):  # type: ()->Bool
        return Bool(self._node.at("CanBeInstanciated"))
    @CanBeInstanciated.setter
    def CanBeInstanciated(self, val): self.CanBeInstanciated.set(val)
    @property
    def DestroyAfter(self):  # type: ()->Bool
        return Bool(self._node.at("DestroyAfter"))
    @DestroyAfter.setter
    def DestroyAfter(self, val): self.DestroyAfter.set(val)
    @property
    def EntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("EntityRef"))
    @EntityRef.setter
    def EntityRef(self, val): self.EntityRef.set(val)
    @property
    def EventCameraHolder(self):  # type: ()->Bool
        return Bool(self._node.at("EventCameraHolder"))
    @EventCameraHolder.setter
    def EventCameraHolder(self, val): self.EventCameraHolder.set(val)
    @property
    def FOV(self):  # type: ()->Float
        return Float(self._node.at("FOV"))
    @FOV.setter
    def FOV(self, val): self.FOV.set(val)
    @property
    def FadeInDelay(self):  # type: ()->Float
        return Float(self._node.at("FadeInDelay"))
    @FadeInDelay.setter
    def FadeInDelay(self, val): self.FadeInDelay.set(val)
    @property
    def FadeOutDelay(self):  # type: ()->Float
        return Float(self._node.at("FadeOutDelay"))
    @FadeOutDelay.setter
    def FadeOutDelay(self, val): self.FadeOutDelay.set(val)
    @property
    def InitTransform(self):  # type: ()->Transform3D
        return Transform3D(self._node.at("InitTransform"))
    @property
    def MainRole(self):  # type: ()->Bool
        return Bool(self._node.at("MainRole"))
    @MainRole.setter
    def MainRole(self, val): self.MainRole.set(val)
    @property
    def Mandatory(self):  # type: ()->Bool
        return Bool(self._node.at("Mandatory"))
    @Mandatory.setter
    def Mandatory(self, val): self.Mandatory.set(val)
    @property
    def Role(self):  # type: ()->String
        return String(self._node.at("Role"))
    @Role.setter
    def Role(self, val): self.Role.set(val)
    @property
    def RoleInNextSequence(self):  # type: ()->String
        return String(self._node.at("RoleInNextSequence"))
    @RoleInNextSequence.setter
    def RoleInNextSequence(self, val): self.RoleInNextSequence.set(val)
    @property
    def Visible(self):  # type: ()->Bool
        return Bool(self._node.at("Visible"))
    @Visible.setter
    def Visible(self, val): self.Visible.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Sequence(HelperObject):
    schema_name = "Sequence"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Sequence
        return Sequence(entlib.load_node_file(sourcefile, entlib.get_schema(Sequence.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Sequence
        return Sequence(entlib.make_node(Sequence.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActivationDelay(self):  # type: ()->Float
        return Float(self._node.at("ActivationDelay"))
    @ActivationDelay.setter
    def ActivationDelay(self, val): self.ActivationDelay.set(val)
    @property
    def AutoSwitchToNextSequence(self):  # type: ()->Bool
        return Bool(self._node.at("AutoSwitchToNextSequence"))
    @AutoSwitchToNextSequence.setter
    def AutoSwitchToNextSequence(self, val): self.AutoSwitchToNextSequence.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def actors(self):  # type: ()->Array[CinematicSlot]
        return (lambda n: Array(CinematicSlot, n))(self._node.at("actors"))
    @property
    def loop(self):  # type: ()->Bool
        return Bool(self._node.at("loop"))
    @loop.setter
    def loop(self, val): self.loop.set(val)
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    pass


from EntityLibPy import Node

class CinematicGD(HelperObject):
    schema_name = "CinematicGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CinematicGD
        return CinematicGD(entlib.load_node_file(sourcefile, entlib.get_schema(CinematicGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CinematicGD
        return CinematicGD(entlib.make_node(CinematicGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActivationDistance(self):  # type: ()->Float
        return Float(self._node.at("ActivationDistance"))
    @ActivationDistance.setter
    def ActivationDistance(self, val): self.ActivationDistance.set(val)
    @property
    def ScriptEvents(self):  # type: ()->Array[ResponsiblePointer_CineEvent_]
        return (lambda n: Array(ResponsiblePointer_CineEvent_, n))(self._node.at("ScriptEvents"))
    @property
    def Sequences(self):  # type: ()->Array[Sequence]
        return (lambda n: Array(Sequence, n))(self._node.at("Sequences"))
    @property
    def Skippable(self):  # type: ()->Bool
        return Bool(self._node.at("Skippable"))
    @Skippable.setter
    def Skippable(self, val): self.Skippable.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UpdateType(self):  # type: ()->CinematicUpdateType
        return CinematicUpdateType(self._node.at("UpdateType"))
    @UpdateType.setter
    def UpdateType(self, val): self.UpdateType.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEvent(HelperObject):
    schema_name = "CineEvent"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEvent
        return CineEvent(entlib.load_node_file(sourcefile, entlib.get_schema(CineEvent.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEvent
        return CineEvent(entlib.make_node(CineEvent.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Active(self):  # type: ()->Bool
        return Bool(self._node.at("Active"))
    @Active.setter
    def Active(self, val): self.Active.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTrigger(HelperObject):
    schema_name = "CineEventTrigger"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTrigger
        return CineEventTrigger(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTrigger.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTrigger
        return CineEventTrigger(entlib.make_node(CineEventTrigger.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->CineEvent
        return CineEvent(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTriggerPlaySound(HelperObject):
    schema_name = "CineEventTriggerPlaySound"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTriggerPlaySound
        return CineEventTriggerPlaySound(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTriggerPlaySound.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTriggerPlaySound
        return CineEventTriggerPlaySound(entlib.make_node(CineEventTriggerPlaySound.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SoundEventName(self):  # type: ()->String
        return String(self._node.at("SoundEventName"))
    @SoundEventName.setter
    def SoundEventName(self, val): self.SoundEventName.set(val)
    @property
    def Super(self):  # type: ()->CineEventTrigger
        return CineEventTrigger(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTriggerPlaySequence(HelperObject):
    schema_name = "CineEventTriggerPlaySequence"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTriggerPlaySequence
        return CineEventTriggerPlaySequence(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTriggerPlaySequence.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTriggerPlaySequence
        return CineEventTriggerPlaySequence(entlib.make_node(CineEventTriggerPlaySequence.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SequenceID(self):  # type: ()->Int
        return Int(self._node.at("SequenceID"))
    @SequenceID.setter
    def SequenceID(self, val): self.SequenceID.set(val)
    @property
    def Super(self):  # type: ()->CineEventTrigger
        return CineEventTrigger(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTriggerGameStateChange(HelperObject):
    schema_name = "CineEventTriggerGameStateChange"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTriggerGameStateChange
        return CineEventTriggerGameStateChange(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTriggerGameStateChange.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTriggerGameStateChange
        return CineEventTriggerGameStateChange(entlib.make_node(CineEventTriggerGameStateChange.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GameStateName(self):  # type: ()->String
        return String(self._node.at("GameStateName"))
    @GameStateName.setter
    def GameStateName(self, val): self.GameStateName.set(val)
    @property
    def Super(self):  # type: ()->CineEventTrigger
        return CineEventTrigger(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTriggerEventHandlerPost(HelperObject):
    schema_name = "CineEventTriggerEventHandlerPost"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTriggerEventHandlerPost
        return CineEventTriggerEventHandlerPost(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTriggerEventHandlerPost.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTriggerEventHandlerPost
        return CineEventTriggerEventHandlerPost(entlib.make_node(CineEventTriggerEventHandlerPost.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EventCategory(self):  # type: ()->String
        return String(self._node.at("EventCategory"))
    @EventCategory.setter
    def EventCategory(self, val): self.EventCategory.set(val)
    @property
    def EventName(self):  # type: ()->String
        return String(self._node.at("EventName"))
    @EventName.setter
    def EventName(self, val): self.EventName.set(val)
    @property
    def Super(self):  # type: ()->CineEventTrigger
        return CineEventTrigger(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTest(HelperObject):
    schema_name = "CineEventTest"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTest
        return CineEventTest(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTest.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTest
        return CineEventTest(entlib.make_node(CineEventTest.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def InvertTest(self):  # type: ()->Bool
        return Bool(self._node.at("InvertTest"))
    @InvertTest.setter
    def InvertTest(self, val): self.InvertTest.set(val)
    @property
    def Super(self):  # type: ()->CineEvent
        return CineEvent(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTestWait(HelperObject):
    schema_name = "CineEventTestWait"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTestWait
        return CineEventTestWait(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTestWait.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTestWait
        return CineEventTestWait(entlib.make_node(CineEventTestWait.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Duration(self):  # type: ()->Float
        return Float(self._node.at("Duration"))
    @Duration.setter
    def Duration(self, val): self.Duration.set(val)
    @property
    def Super(self):  # type: ()->CineEventTest
        return CineEventTest(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTestIsCanceled(HelperObject):
    schema_name = "CineEventTestIsCanceled"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTestIsCanceled
        return CineEventTestIsCanceled(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTestIsCanceled.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTestIsCanceled
        return CineEventTestIsCanceled(entlib.make_node(CineEventTestIsCanceled.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->CineEventTest
        return CineEventTest(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTestInput(HelperObject):
    schema_name = "CineEventTestInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTestInput
        return CineEventTestInput(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTestInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTestInput
        return CineEventTestInput(entlib.make_node(CineEventTestInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AnyButtonInput(self):  # type: ()->Bool
        return Bool(self._node.at("AnyButtonInput"))
    @AnyButtonInput.setter
    def AnyButtonInput(self, val): self.AnyButtonInput.set(val)
    @property
    def AnyJoyInput(self):  # type: ()->Bool
        return Bool(self._node.at("AnyJoyInput"))
    @AnyJoyInput.setter
    def AnyJoyInput(self, val): self.AnyJoyInput.set(val)
    @property
    def Super(self):  # type: ()->CineEventTest
        return CineEventTest(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTestEndCurrentSequence(HelperObject):
    schema_name = "CineEventTestEndCurrentSequence"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTestEndCurrentSequence
        return CineEventTestEndCurrentSequence(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTestEndCurrentSequence.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTestEndCurrentSequence
        return CineEventTestEndCurrentSequence(entlib.make_node(CineEventTestEndCurrentSequence.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->CineEventTest
        return CineEventTest(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CineEventTestCurrentGameState(HelperObject):
    schema_name = "CineEventTestCurrentGameState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CineEventTestCurrentGameState
        return CineEventTestCurrentGameState(entlib.load_node_file(sourcefile, entlib.get_schema(CineEventTestCurrentGameState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CineEventTestCurrentGameState
        return CineEventTestCurrentGameState(entlib.make_node(CineEventTestCurrentGameState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GameStateName(self):  # type: ()->String
        return String(self._node.at("GameStateName"))
    @GameStateName.setter
    def GameStateName(self, val): self.GameStateName.set(val)
    @property
    def Super(self):  # type: ()->CineEventTest
        return CineEventTest(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CharacterControllerSlideData(HelperObject):
    schema_name = "CharacterControllerSlideData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CharacterControllerSlideData
        return CharacterControllerSlideData(entlib.load_node_file(sourcefile, entlib.get_schema(CharacterControllerSlideData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CharacterControllerSlideData
        return CharacterControllerSlideData(entlib.make_node(CharacterControllerSlideData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def adherenceRecoverSpeedDependingOnTheSlope(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("adherenceRecoverSpeedDependingOnTheSlope"))
    @property
    def adherenceThresholdHysteresis(self):  # type: ()->Float
        return Float(self._node.at("adherenceThresholdHysteresis"))
    @adherenceThresholdHysteresis.setter
    def adherenceThresholdHysteresis(self, val): self.adherenceThresholdHysteresis.set(val)
    @property
    def adherenceThresholdRequiredToKeepControl(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("adherenceThresholdRequiredToKeepControl"))
    @property
    def adherenceUsingDownwardSlopeDirection(self):  # type: ()->Float
        return Float(self._node.at("adherenceUsingDownwardSlopeDirection"))
    @adherenceUsingDownwardSlopeDirection.setter
    def adherenceUsingDownwardSlopeDirection(self, val): self.adherenceUsingDownwardSlopeDirection.set(val)
    @property
    def adherenceUsingSideSlopeDirection(self):  # type: ()->Float
        return Float(self._node.at("adherenceUsingSideSlopeDirection"))
    @adherenceUsingSideSlopeDirection.setter
    def adherenceUsingSideSlopeDirection(self, val): self.adherenceUsingSideSlopeDirection.set(val)
    @property
    def adherenceUsingUpwardSlopeDirection(self):  # type: ()->Float
        return Float(self._node.at("adherenceUsingUpwardSlopeDirection"))
    @adherenceUsingUpwardSlopeDirection.setter
    def adherenceUsingUpwardSlopeDirection(self, val): self.adherenceUsingUpwardSlopeDirection.set(val)
    @property
    def animblendInTime(self):  # type: ()->Float
        return Float(self._node.at("animblendInTime"))
    @animblendInTime.setter
    def animblendInTime(self, val): self.animblendInTime.set(val)
    @property
    def friction(self):  # type: ()->Float
        return Float(self._node.at("friction"))
    @friction.setter
    def friction(self, val): self.friction.set(val)
    @property
    def maxSlopeAngle(self):  # type: ()->Float
        return Float(self._node.at("maxSlopeAngle"))
    @maxSlopeAngle.setter
    def maxSlopeAngle(self, val): self.maxSlopeAngle.set(val)
    @property
    def speedMediumCoeffHysteresis(self):  # type: ()->Float
        return Float(self._node.at("speedMediumCoeffHysteresis"))
    @speedMediumCoeffHysteresis.setter
    def speedMediumCoeffHysteresis(self, val): self.speedMediumCoeffHysteresis.set(val)
    @property
    def speedMediumCoeffIn(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("speedMediumCoeffIn"))
    @property
    def speedMediumCoeffMin(self):  # type: ()->Float
        return Float(self._node.at("speedMediumCoeffMin"))
    @speedMediumCoeffMin.setter
    def speedMediumCoeffMin(self, val): self.speedMediumCoeffMin.set(val)
    pass


from EntityLibPy import Node

class CharacterControllerGroundNormalData(HelperObject):
    schema_name = "CharacterControllerGroundNormalData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CharacterControllerGroundNormalData
        return CharacterControllerGroundNormalData(entlib.load_node_file(sourcefile, entlib.get_schema(CharacterControllerGroundNormalData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CharacterControllerGroundNormalData
        return CharacterControllerGroundNormalData(entlib.make_node(CharacterControllerGroundNormalData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AllowOtherCreatureCast(self):  # type: ()->Bool
        return Bool(self._node.at("AllowOtherCreatureCast"))
    @AllowOtherCreatureCast.setter
    def AllowOtherCreatureCast(self, val): self.AllowOtherCreatureCast.set(val)
    @property
    def PercentageEdgeTolerance(self):  # type: ()->Float
        return Float(self._node.at("PercentageEdgeTolerance"))
    @PercentageEdgeTolerance.setter
    def PercentageEdgeTolerance(self, val): self.PercentageEdgeTolerance.set(val)
    @property
    def PercentageExtirpate(self):  # type: ()->Float
        return Float(self._node.at("PercentageExtirpate"))
    @PercentageExtirpate.setter
    def PercentageExtirpate(self, val): self.PercentageExtirpate.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CharacterControllerFallData(HelperObject):
    schema_name = "CharacterControllerFallData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CharacterControllerFallData
        return CharacterControllerFallData(entlib.load_node_file(sourcefile, entlib.get_schema(CharacterControllerFallData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CharacterControllerFallData
        return CharacterControllerFallData(entlib.make_node(CharacterControllerFallData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AirControlBrake(self):  # type: ()->Float
        return Float(self._node.at("AirControlBrake"))
    @AirControlBrake.setter
    def AirControlBrake(self, val): self.AirControlBrake.set(val)
    @property
    def AirControlSmooth(self):  # type: ()->Float
        return Float(self._node.at("AirControlSmooth"))
    @AirControlSmooth.setter
    def AirControlSmooth(self, val): self.AirControlSmooth.set(val)
    @property
    def AirControlSpeed(self):  # type: ()->Float
        return Float(self._node.at("AirControlSpeed"))
    @AirControlSpeed.setter
    def AirControlSpeed(self, val): self.AirControlSpeed.set(val)
    @property
    def DamagesPerHeightFall(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("DamagesPerHeightFall"))
    @property
    def MinHeightForDamageFall(self):  # type: ()->Float
        return Float(self._node.at("MinHeightForDamageFall"))
    @MinHeightForDamageFall.setter
    def MinHeightForDamageFall(self, val): self.MinHeightForDamageFall.set(val)
    @property
    def MinHeightForDeathFall(self):  # type: ()->Float
        return Float(self._node.at("MinHeightForDeathFall"))
    @MinHeightForDeathFall.setter
    def MinHeightForDeathFall(self, val): self.MinHeightForDeathFall.set(val)
    @property
    def MinHeightForRecoveryFall(self):  # type: ()->Float
        return Float(self._node.at("MinHeightForRecoveryFall"))
    @MinHeightForRecoveryFall.setter
    def MinHeightForRecoveryFall(self, val): self.MinHeightForRecoveryFall.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CharacterControllerClamberData(HelperObject):
    schema_name = "CharacterControllerClamberData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CharacterControllerClamberData
        return CharacterControllerClamberData(entlib.load_node_file(sourcefile, entlib.get_schema(CharacterControllerClamberData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CharacterControllerClamberData
        return CharacterControllerClamberData(entlib.make_node(CharacterControllerClamberData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DropOffAngle(self):  # type: ()->Float
        return Float(self._node.at("DropOffAngle"))
    @DropOffAngle.setter
    def DropOffAngle(self, val): self.DropOffAngle.set(val)
    @property
    def EnterAngle(self):  # type: ()->Float
        return Float(self._node.at("EnterAngle"))
    @EnterAngle.setter
    def EnterAngle(self, val): self.EnterAngle.set(val)
    @property
    def ExitAngle(self):  # type: ()->Float
        return Float(self._node.at("ExitAngle"))
    @ExitAngle.setter
    def ExitAngle(self, val): self.ExitAngle.set(val)
    @property
    def IsAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("IsAllowed"))
    @IsAllowed.setter
    def IsAllowed(self, val): self.IsAllowed.set(val)
    @property
    def VerticalOrientationRatio(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("VerticalOrientationRatio"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class CarryModeEnum(Enum):
    carryno = "carryno"
    carrylight = "carrylight"
    CarryMode_COUNT = "CarryMode_COUNT"


class CarryMode(Primitive[CarryModeEnum]):  # Enum
    def __init__(self, node):
        super(CarryMode, self).__init__(CarryModeEnum, node)
    schema_name = "CarryMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> CarryMode
        return CarryMode(node)
    def set(self, val):  # type: (CarryModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class CanTakeHit(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->Bool
        return Bool(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class CreatureComponentInput(HelperObject):
    schema_name = "CreatureComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureComponentInput
        return CreatureComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureComponentInput
        return CreatureComponentInput(entlib.make_node(CreatureComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CanTakeHit(self):  # type: ()->CanTakeHit
        return CanTakeHit(self._node.at("CanTakeHit"))
    @property
    def DeltaTimeFactor(self):  # type: ()->DeltaTimeFactor
        return DeltaTimeFactor(self._node.at("DeltaTimeFactor"))
    @property
    def Invincible(self):  # type: ()->Invincible
        return Invincible(self._node.at("Invincible"))
    @property
    def LastAliveReviveSide(self):  # type: ()->CreatureComponentInput_LastAliveReviveSide
        return CreatureComponentInput_LastAliveReviveSide(self._node.at("LastAliveReviveSide"))
    @property
    def Life(self):  # type: ()->Life
        return Life(self._node.at("Life"))
    @property
    def ReviveSide(self):  # type: ()->CreatureComponentInput_ReviveSide
        return CreatureComponentInput_ReviveSide(self._node.at("ReviveSide"))
    @property
    def ReviveState(self):  # type: ()->CreatureComponentInput_ReviveState
        return CreatureComponentInput_ReviveState(self._node.at("ReviveState"))
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class CameraTypeEnum(Enum):
    NONE = "NONE"
    Death = "Death"
    Editor = "Editor"
    Event = "Event"
    Free = "Free"
    ThirdPerson = "ThirdPerson"
    ThirdPersonFollow = "ThirdPersonFollow"
    ThirdPersonAim = "ThirdPersonAim"
    ThirdPersonClamber = "ThirdPersonClamber"
    MotionConstraint = "MotionConstraint"
    OnSpline = "OnSpline"
    OnBones = "OnBones"
    TopView = "TopView"
    EntitySwap = "EntitySwap"
    Locked = "Locked"
    Pan = "Pan"
    CameraType_COUNT = "CameraType_COUNT"


class CameraType(Primitive[CameraTypeEnum]):  # Enum
    def __init__(self, node):
        super(CameraType, self).__init__(CameraTypeEnum, node)
    schema_name = "CameraType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> CameraType
        return CameraType(node)
    def set(self, val):  # type: (CameraTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class CameraSetterGD(HelperObject):
    schema_name = "CameraSetterGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CameraSetterGD
        return CameraSetterGD(entlib.load_node_file(sourcefile, entlib.get_schema(CameraSetterGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CameraSetterGD
        return CameraSetterGD(entlib.make_node(CameraSetterGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SetPositionToHotspot(self):  # type: ()->Bool
        return Bool(self._node.at("SetPositionToHotspot"))
    @SetPositionToHotspot.setter
    def SetPositionToHotspot(self, val): self.SetPositionToHotspot.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def SwitchToType(self):  # type: ()->Bool
        return Bool(self._node.at("SwitchToType"))
    @SwitchToType.setter
    def SwitchToType(self, val): self.SwitchToType.set(val)
    @property
    def Type_(self):  # type: ()->CameraType
        return CameraType(self._node.at("Type"))
    @Type_.setter
    def Type_(self, val): self.Type_.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CameraSoundEvent(HelperObject):
    schema_name = "CameraSoundEvent"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CameraSoundEvent
        return CameraSoundEvent(entlib.load_node_file(sourcefile, entlib.get_schema(CameraSoundEvent.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CameraSoundEvent
        return CameraSoundEvent(entlib.make_node(CameraSoundEvent.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def eventName(self):  # type: ()->String
        return String(self._node.at("eventName"))
    @eventName.setter
    def eventName(self, val): self.eventName.set(val)
    @property
    def from_(self):  # type: ()->String
        return String(self._node.at("from"))
    @from_.setter
    def from_(self, val): self.from_.set(val)
    @property
    def to(self):  # type: ()->String
        return String(self._node.at("to"))
    @to.setter
    def to(self, val): self.to.set(val)
    pass


from EntityLibPy import Node

class CameraShakeData(HelperObject):
    schema_name = "CameraShakeData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CameraShakeData
        return CameraShakeData(entlib.load_node_file(sourcefile, entlib.get_schema(CameraShakeData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CameraShakeData
        return CameraShakeData(entlib.make_node(CameraShakeData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def shakeDuration(self):  # type: ()->Float
        return Float(self._node.at("shakeDuration"))
    @shakeDuration.setter
    def shakeDuration(self, val): self.shakeDuration.set(val)
    @property
    def shakeFrequency(self):  # type: ()->Float
        return Float(self._node.at("shakeFrequency"))
    @shakeFrequency.setter
    def shakeFrequency(self, val): self.shakeFrequency.set(val)
    @property
    def shakeIntensity(self):  # type: ()->Float
        return Float(self._node.at("shakeIntensity"))
    @shakeIntensity.setter
    def shakeIntensity(self, val): self.shakeIntensity.set(val)
    @property
    def shakeRotation(self):  # type: ()->Vector3
        return Vector3(self._node.at("shakeRotation"))
    @shakeRotation.setter
    def shakeRotation(self, val): self.shakeRotation.set(val)
    pass


from EntityLibPy import Node

class GameManager(HelperObject):
    schema_name = "GameManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GameManager
        return GameManager(entlib.load_node_file(sourcefile, entlib.get_schema(GameManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GameManager
        return GameManager(entlib.make_node(GameManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActionAttackValidityTime(self):  # type: ()->Float
        return Float(self._node.at("ActionAttackValidityTime"))
    @ActionAttackValidityTime.setter
    def ActionAttackValidityTime(self, val): self.ActionAttackValidityTime.set(val)
    @property
    def AttackData(self):  # type: ()->GameAttackData
        return GameAttackData(self._node.at("AttackData"))
    @property
    def BeamFreezeData(self):  # type: ()->FreezeData
        return FreezeData(self._node.at("BeamFreezeData"))
    @property
    def BeamSnapData(self):  # type: ()->GameBeamSnapData
        return GameBeamSnapData(self._node.at("BeamSnapData"))
    @property
    def BiteData(self):  # type: ()->GameBiteData
        return GameBiteData(self._node.at("BiteData"))
    @property
    def DeathData(self):  # type: ()->GameDeathData
        return GameDeathData(self._node.at("DeathData"))
    @property
    def EnableSplashScreen(self):  # type: ()->Bool
        return Bool(self._node.at("EnableSplashScreen"))
    @EnableSplashScreen.setter
    def EnableSplashScreen(self, val): self.EnableSplashScreen.set(val)
    @property
    def FallData(self):  # type: ()->GameFallData
        return GameFallData(self._node.at("FallData"))
    @property
    def FeetCatchUpData(self):  # type: ()->GameFeetCatchUpData
        return GameFeetCatchUpData(self._node.at("FeetCatchUpData"))
    @property
    def FluidData(self):  # type: ()->GameFluidData
        return GameFluidData(self._node.at("FluidData"))
    @property
    def FlyData(self):  # type: ()->GameFlyData
        return GameFlyData(self._node.at("FlyData"))
    @property
    def GamePadAimHysteresis(self):  # type: ()->Float
        return Float(self._node.at("GamePadAimHysteresis"))
    @GamePadAimHysteresis.setter
    def GamePadAimHysteresis(self, val): self.GamePadAimHysteresis.set(val)
    @property
    def GamePadAimThreshold(self):  # type: ()->Float
        return Float(self._node.at("GamePadAimThreshold"))
    @GamePadAimThreshold.setter
    def GamePadAimThreshold(self, val): self.GamePadAimThreshold.set(val)
    @property
    def GamePadNavigationData(self):  # type: ()->GamePadNavigationData
        return GamePadNavigationData(self._node.at("GamePadNavigationData"))
    @property
    def GamePadRumbleScale(self):  # type: ()->Float
        return Float(self._node.at("GamePadRumbleScale"))
    @GamePadRumbleScale.setter
    def GamePadRumbleScale(self, val): self.GamePadRumbleScale.set(val)
    @property
    def GamePadSpeedBehaviorData(self):  # type: ()->GamePadSpeedBehaviorData
        return GamePadSpeedBehaviorData(self._node.at("GamePadSpeedBehaviorData"))
    @property
    def GameSpawnFadeInDelay(self):  # type: ()->Float
        return Float(self._node.at("GameSpawnFadeInDelay"))
    @GameSpawnFadeInDelay.setter
    def GameSpawnFadeInDelay(self, val): self.GameSpawnFadeInDelay.set(val)
    @property
    def GameSpawnFadeInDuration(self):  # type: ()->Float
        return Float(self._node.at("GameSpawnFadeInDuration"))
    @GameSpawnFadeInDuration.setter
    def GameSpawnFadeInDuration(self, val): self.GameSpawnFadeInDuration.set(val)
    @property
    def HitShakeData(self):  # type: ()->CameraShakeData
        return CameraShakeData(self._node.at("HitShakeData"))
    @property
    def ImmersionData(self):  # type: ()->Array[GameImmersionData]
        return (lambda n: Array(GameImmersionData, n))(self._node.at("ImmersionData"))
    @property
    def InputCollisionAnticipationLength(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("InputCollisionAnticipationLength"))
    @property
    def InteractionDisplayHysteresis(self):  # type: ()->Float
        return Float(self._node.at("InteractionDisplayHysteresis"))
    @InteractionDisplayHysteresis.setter
    def InteractionDisplayHysteresis(self, val): self.InteractionDisplayHysteresis.set(val)
    @property
    def InteractionPressDuration(self):  # type: ()->Float
        return Float(self._node.at("InteractionPressDuration"))
    @InteractionPressDuration.setter
    def InteractionPressDuration(self, val): self.InteractionPressDuration.set(val)
    @property
    def InteractionScreenViewDistance(self):  # type: ()->Float
        return Float(self._node.at("InteractionScreenViewDistance"))
    @InteractionScreenViewDistance.setter
    def InteractionScreenViewDistance(self, val): self.InteractionScreenViewDistance.set(val)
    @property
    def IntroVideo(self):  # type: ()->String
        return String(self._node.at("IntroVideo"))
    @IntroVideo.setter
    def IntroVideo(self, val): self.IntroVideo.set(val)
    @property
    def LODData(self):  # type: ()->GameLODData
        return GameLODData(self._node.at("LODData"))
    @property
    def LavaImmersionData(self):  # type: ()->GameImmersionData
        return GameImmersionData(self._node.at("LavaImmersionData"))
    @property
    def LockTargetMaxDistance(self):  # type: ()->Float
        return Float(self._node.at("LockTargetMaxDistance"))
    @LockTargetMaxDistance.setter
    def LockTargetMaxDistance(self, val): self.LockTargetMaxDistance.set(val)
    @property
    def LockTargetScreenViewDistance(self):  # type: ()->Float
        return Float(self._node.at("LockTargetScreenViewDistance"))
    @LockTargetScreenViewDistance.setter
    def LockTargetScreenViewDistance(self, val): self.LockTargetScreenViewDistance.set(val)
    @property
    def MountOnlyOnFollower(self):  # type: ()->Bool
        return Bool(self._node.at("MountOnlyOnFollower"))
    @MountOnlyOnFollower.setter
    def MountOnlyOnFollower(self, val): self.MountOnlyOnFollower.set(val)
    @property
    def PropelData(self):  # type: ()->GamePropelData
        return GamePropelData(self._node.at("PropelData"))
    @property
    def QuickLaunch(self):  # type: ()->Bool
        return Bool(self._node.at("QuickLaunch"))
    @QuickLaunch.setter
    def QuickLaunch(self, val): self.QuickLaunch.set(val)
    @property
    def RespawnData(self):  # type: ()->GameRespawnData
        return GameRespawnData(self._node.at("RespawnData"))
    @property
    def ReviveData(self):  # type: ()->GameReviveData
        return GameReviveData(self._node.at("ReviveData"))
    @property
    def ShamanVisionData(self):  # type: ()->GameShamanVisionData
        return GameShamanVisionData(self._node.at("ShamanVisionData"))
    @property
    def SlopeData(self):  # type: ()->GameSlopeData
        return GameSlopeData(self._node.at("SlopeData"))
    @property
    def SnapData(self):  # type: ()->GameSnapData
        return GameSnapData(self._node.at("SnapData"))
    @property
    def Sound_TopView_Start(self):  # type: ()->String
        return String(self._node.at("Sound_TopView_Start"))
    @Sound_TopView_Start.setter
    def Sound_TopView_Start(self, val): self.Sound_TopView_Start.set(val)
    @property
    def Sound_TopView_Stop(self):  # type: ()->String
        return String(self._node.at("Sound_TopView_Stop"))
    @Sound_TopView_Stop.setter
    def Sound_TopView_Stop(self, val): self.Sound_TopView_Stop.set(val)
    @property
    def SpeedMaxInUndergroundCavity(self):  # type: ()->Map[SizeEnum, Float]
        return (lambda n: Map(SizeEnum, Float, n))(self._node.at("SpeedMaxInUndergroundCavity"))
    @property
    def SplashScreenSoundStart(self):  # type: ()->String
        return String(self._node.at("SplashScreenSoundStart"))
    @SplashScreenSoundStart.setter
    def SplashScreenSoundStart(self, val): self.SplashScreenSoundStart.set(val)
    @property
    def SplashScreenSoundStop(self):  # type: ()->String
        return String(self._node.at("SplashScreenSoundStop"))
    @SplashScreenSoundStop.setter
    def SplashScreenSoundStop(self, val): self.SplashScreenSoundStop.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def WaterImmersionData(self):  # type: ()->GameImmersionData
        return GameImmersionData(self._node.at("WaterImmersionData"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CameraFreeData(HelperObject):
    schema_name = "CameraFreeData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CameraFreeData
        return CameraFreeData(entlib.load_node_file(sourcefile, entlib.get_schema(CameraFreeData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CameraFreeData
        return CameraFreeData(entlib.make_node(CameraFreeData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Acceleration(self):  # type: ()->Float
        return Float(self._node.at("Acceleration"))
    @Acceleration.setter
    def Acceleration(self, val): self.Acceleration.set(val)
    @property
    def Deceleration(self):  # type: ()->Float
        return Float(self._node.at("Deceleration"))
    @Deceleration.setter
    def Deceleration(self, val): self.Deceleration.set(val)
    @property
    def JoyThreshold(self):  # type: ()->Float
        return Float(self._node.at("JoyThreshold"))
    @JoyThreshold.setter
    def JoyThreshold(self, val): self.JoyThreshold.set(val)
    @property
    def MoveBlend(self):  # type: ()->Float
        return Float(self._node.at("MoveBlend"))
    @MoveBlend.setter
    def MoveBlend(self, val): self.MoveBlend.set(val)
    @property
    def MoveSpeed(self):  # type: ()->Float
        return Float(self._node.at("MoveSpeed"))
    @MoveSpeed.setter
    def MoveSpeed(self, val): self.MoveSpeed.set(val)
    @property
    def MoveSpeedZ(self):  # type: ()->Float
        return Float(self._node.at("MoveSpeedZ"))
    @MoveSpeedZ.setter
    def MoveSpeedZ(self, val): self.MoveSpeedZ.set(val)
    @property
    def RotateBlendX(self):  # type: ()->Float
        return Float(self._node.at("RotateBlendX"))
    @RotateBlendX.setter
    def RotateBlendX(self, val): self.RotateBlendX.set(val)
    @property
    def RotateBlendY(self):  # type: ()->Float
        return Float(self._node.at("RotateBlendY"))
    @RotateBlendY.setter
    def RotateBlendY(self, val): self.RotateBlendY.set(val)
    @property
    def RotateSpeedX(self):  # type: ()->Float
        return Float(self._node.at("RotateSpeedX"))
    @RotateSpeedX.setter
    def RotateSpeedX(self, val): self.RotateSpeedX.set(val)
    @property
    def RotateSpeedY(self):  # type: ()->Float
        return Float(self._node.at("RotateSpeedY"))
    @RotateSpeedY.setter
    def RotateSpeedY(self, val): self.RotateSpeedY.set(val)
    @property
    def SpeedMax(self):  # type: ()->Float
        return Float(self._node.at("SpeedMax"))
    @SpeedMax.setter
    def SpeedMax(self, val): self.SpeedMax.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CameraEditorData(HelperObject):
    schema_name = "CameraEditorData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CameraEditorData
        return CameraEditorData(entlib.load_node_file(sourcefile, entlib.get_schema(CameraEditorData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CameraEditorData
        return CameraEditorData(entlib.make_node(CameraEditorData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DistanceMax(self):  # type: ()->Float
        return Float(self._node.at("DistanceMax"))
    @DistanceMax.setter
    def DistanceMax(self, val): self.DistanceMax.set(val)
    @property
    def DistanceMin(self):  # type: ()->Float
        return Float(self._node.at("DistanceMin"))
    @DistanceMin.setter
    def DistanceMin(self, val): self.DistanceMin.set(val)
    @property
    def MoveBlend(self):  # type: ()->Float
        return Float(self._node.at("MoveBlend"))
    @MoveBlend.setter
    def MoveBlend(self, val): self.MoveBlend.set(val)
    @property
    def MoveSpeedAtScreenWidthMax(self):  # type: ()->Float
        return Float(self._node.at("MoveSpeedAtScreenWidthMax"))
    @MoveSpeedAtScreenWidthMax.setter
    def MoveSpeedAtScreenWidthMax(self, val): self.MoveSpeedAtScreenWidthMax.set(val)
    @property
    def MoveSpeedAtScreenWidthMin(self):  # type: ()->Float
        return Float(self._node.at("MoveSpeedAtScreenWidthMin"))
    @MoveSpeedAtScreenWidthMin.setter
    def MoveSpeedAtScreenWidthMin(self, val): self.MoveSpeedAtScreenWidthMin.set(val)
    @property
    def RotateBlendX(self):  # type: ()->Float
        return Float(self._node.at("RotateBlendX"))
    @RotateBlendX.setter
    def RotateBlendX(self, val): self.RotateBlendX.set(val)
    @property
    def RotateBlendY(self):  # type: ()->Float
        return Float(self._node.at("RotateBlendY"))
    @RotateBlendY.setter
    def RotateBlendY(self, val): self.RotateBlendY.set(val)
    @property
    def RotateSpeedX(self):  # type: ()->Float
        return Float(self._node.at("RotateSpeedX"))
    @RotateSpeedX.setter
    def RotateSpeedX(self, val): self.RotateSpeedX.set(val)
    @property
    def RotateSpeedY(self):  # type: ()->Float
        return Float(self._node.at("RotateSpeedY"))
    @RotateSpeedY.setter
    def RotateSpeedY(self, val): self.RotateSpeedY.set(val)
    @property
    def ScreenWidthMax(self):  # type: ()->Float
        return Float(self._node.at("ScreenWidthMax"))
    @ScreenWidthMax.setter
    def ScreenWidthMax(self, val): self.ScreenWidthMax.set(val)
    @property
    def ScreenWidthMin(self):  # type: ()->Float
        return Float(self._node.at("ScreenWidthMin"))
    @ScreenWidthMin.setter
    def ScreenWidthMin(self, val): self.ScreenWidthMin.set(val)
    @property
    def ZoomBlend(self):  # type: ()->Float
        return Float(self._node.at("ZoomBlend"))
    @ZoomBlend.setter
    def ZoomBlend(self, val): self.ZoomBlend.set(val)
    @property
    def ZoomSpeedAtScreenWidthMax(self):  # type: ()->Float
        return Float(self._node.at("ZoomSpeedAtScreenWidthMax"))
    @ZoomSpeedAtScreenWidthMax.setter
    def ZoomSpeedAtScreenWidthMax(self, val): self.ZoomSpeedAtScreenWidthMax.set(val)
    @property
    def ZoomSpeedAtScreenWidthMin(self):  # type: ()->Float
        return Float(self._node.at("ZoomSpeedAtScreenWidthMin"))
    @ZoomSpeedAtScreenWidthMin.setter
    def ZoomSpeedAtScreenWidthMin(self, val): self.ZoomSpeedAtScreenWidthMin.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CameraManager(HelperObject):
    schema_name = "CameraManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CameraManager
        return CameraManager(entlib.load_node_file(sourcefile, entlib.get_schema(CameraManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CameraManager
        return CameraManager(entlib.make_node(CameraManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActivateDoF(self):  # type: ()->Bool
        return Bool(self._node.at("ActivateDoF"))
    @ActivateDoF.setter
    def ActivateDoF(self, val): self.ActivateDoF.set(val)
    @property
    def AnglesLevels(self):  # type: ()->Vector2
        return Vector2(self._node.at("AnglesLevels"))
    @AnglesLevels.setter
    def AnglesLevels(self, val): self.AnglesLevels.set(val)
    @property
    def CameraControlAxisInvertX(self):  # type: ()->Bool
        return Bool(self._node.at("CameraControlAxisInvertX"))
    @CameraControlAxisInvertX.setter
    def CameraControlAxisInvertX(self, val): self.CameraControlAxisInvertX.set(val)
    @property
    def CameraControlAxisInvertY(self):  # type: ()->Bool
        return Bool(self._node.at("CameraControlAxisInvertY"))
    @CameraControlAxisInvertY.setter
    def CameraControlAxisInvertY(self, val): self.CameraControlAxisInvertY.set(val)
    @property
    def DistanceFromTopPosition(self):  # type: ()->Vector2
        return Vector2(self._node.at("DistanceFromTopPosition"))
    @DistanceFromTopPosition.setter
    def DistanceFromTopPosition(self, val): self.DistanceFromTopPosition.set(val)
    @property
    def Editor(self):  # type: ()->CameraEditorData
        return CameraEditorData(self._node.at("Editor"))
    @property
    def Free(self):  # type: ()->CameraFreeData
        return CameraFreeData(self._node.at("Free"))
    @property
    def HeightLevel(self):  # type: ()->Vector2
        return Vector2(self._node.at("HeightLevel"))
    @HeightLevel.setter
    def HeightLevel(self, val): self.HeightLevel.set(val)
    @property
    def RotatePitchIn(self):  # type: ()->Float
        return Float(self._node.at("RotatePitchIn"))
    @RotatePitchIn.setter
    def RotatePitchIn(self, val): self.RotatePitchIn.set(val)
    @property
    def RotatePitchOut(self):  # type: ()->Float
        return Float(self._node.at("RotatePitchOut"))
    @RotatePitchOut.setter
    def RotatePitchOut(self, val): self.RotatePitchOut.set(val)
    @property
    def RotateYawIn(self):  # type: ()->Float
        return Float(self._node.at("RotateYawIn"))
    @RotateYawIn.setter
    def RotateYawIn(self, val): self.RotateYawIn.set(val)
    @property
    def RotateYawOut(self):  # type: ()->Float
        return Float(self._node.at("RotateYawOut"))
    @RotateYawOut.setter
    def RotateYawOut(self, val): self.RotateYawOut.set(val)
    @property
    def SpeedHorizontal(self):  # type: ()->Float
        return Float(self._node.at("SpeedHorizontal"))
    @SpeedHorizontal.setter
    def SpeedHorizontal(self, val): self.SpeedHorizontal.set(val)
    @property
    def SpeedVertical(self):  # type: ()->Float
        return Float(self._node.at("SpeedVertical"))
    @SpeedVertical.setter
    def SpeedVertical(self, val): self.SpeedVertical.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BoneAnimation(HelperObject):
    schema_name = "BoneAnimation"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BoneAnimation
        return BoneAnimation(entlib.load_node_file(sourcefile, entlib.get_schema(BoneAnimation.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BoneAnimation
        return BoneAnimation(entlib.make_node(BoneAnimation.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Rotations(self):  # type: ()->Array[Vector4]
        return (lambda n: Array(Vector4, n))(self._node.at("Rotations"))
    @property
    def Scales(self):  # type: ()->Array[Vector3]
        return (lambda n: Array(Vector3, n))(self._node.at("Scales"))
    @property
    def Translations(self):  # type: ()->Array[Vector4]
        return (lambda n: Array(Vector4, n))(self._node.at("Translations"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BoidSpeedMaxData(HelperObject):
    schema_name = "BoidSpeedMaxData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BoidSpeedMaxData
        return BoidSpeedMaxData(entlib.load_node_file(sourcefile, entlib.get_schema(BoidSpeedMaxData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BoidSpeedMaxData
        return BoidSpeedMaxData(entlib.make_node(BoidSpeedMaxData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Duration(self):  # type: ()->Float
        return Float(self._node.at("Duration"))
    @Duration.setter
    def Duration(self, val): self.Duration.set(val)
    @property
    def SpeedMax(self):  # type: ()->Float
        return Float(self._node.at("SpeedMax"))
    @SpeedMax.setter
    def SpeedMax(self, val): self.SpeedMax.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class BoidGoalModeEnum(Enum):
    none = "none"
    parent = "parent"
    home = "home"
    BoidGoalMode_COUNT = "BoidGoalMode_COUNT"


class BoidGoalMode(Primitive[BoidGoalModeEnum]):  # Enum
    def __init__(self, node):
        super(BoidGoalMode, self).__init__(BoidGoalModeEnum, node)
    schema_name = "BoidGoalMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> BoidGoalMode
        return BoidGoalMode(node)
    def set(self, val):  # type: (BoidGoalModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class BlendShapeAnimation(HelperObject):
    schema_name = "BlendShapeAnimation"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BlendShapeAnimation
        return BlendShapeAnimation(entlib.load_node_file(sourcefile, entlib.get_schema(BlendShapeAnimation.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BlendShapeAnimation
        return BlendShapeAnimation(entlib.make_node(BlendShapeAnimation.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Weights(self):  # type: ()->PrimArray[Float]
        return (lambda n: PrimArray(Float, n))(self._node.at("Weights"))
    @Weights.setter
    def Weights(self, val): self.Weights.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationIntermediateFormat(HelperObject):
    schema_name = "AnimationIntermediateFormat"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationIntermediateFormat
        return AnimationIntermediateFormat(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationIntermediateFormat.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationIntermediateFormat
        return AnimationIntermediateFormat(entlib.make_node(AnimationIntermediateFormat.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BlendShapeAnimations(self):  # type: ()->Array[BlendShapeAnimation]
        return (lambda n: Array(BlendShapeAnimation, n))(self._node.at("BlendShapeAnimations"))
    @property
    def BoneAnimations(self):  # type: ()->Array[BoneAnimation]
        return (lambda n: Array(BoneAnimation, n))(self._node.at("BoneAnimations"))
    @property
    def EndFrame(self):  # type: ()->Int
        return Int(self._node.at("EndFrame"))
    @EndFrame.setter
    def EndFrame(self, val): self.EndFrame.set(val)
    @property
    def EndTime(self):  # type: ()->Float
        return Float(self._node.at("EndTime"))
    @EndTime.setter
    def EndTime(self, val): self.EndTime.set(val)
    @property
    def NumFrames(self):  # type: ()->Int
        return Int(self._node.at("NumFrames"))
    @NumFrames.setter
    def NumFrames(self, val): self.NumFrames.set(val)
    @property
    def Period(self):  # type: ()->Float
        return Float(self._node.at("Period"))
    @Period.setter
    def Period(self, val): self.Period.set(val)
    @property
    def StartFrame(self):  # type: ()->Int
        return Int(self._node.at("StartFrame"))
    @StartFrame.setter
    def StartFrame(self, val): self.StartFrame.set(val)
    @property
    def StartTime(self):  # type: ()->Float
        return Float(self._node.at("StartTime"))
    @StartTime.setter
    def StartTime(self, val): self.StartTime.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BiteData(HelperObject):
    schema_name = "BiteData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BiteData
        return BiteData(entlib.load_node_file(sourcefile, entlib.get_schema(BiteData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BiteData
        return BiteData(entlib.make_node(BiteData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CanBiteBiped(self):  # type: ()->Bool
        return Bool(self._node.at("CanBiteBiped"))
    @CanBiteBiped.setter
    def CanBiteBiped(self, val): self.CanBiteBiped.set(val)
    @property
    def CanBiteFriends(self):  # type: ()->Bool
        return Bool(self._node.at("CanBiteFriends"))
    @CanBiteFriends.setter
    def CanBiteFriends(self, val): self.CanBiteFriends.set(val)
    @property
    def CheckHotspotOrientation(self):  # type: ()->Bool
        return Bool(self._node.at("CheckHotspotOrientation"))
    @CheckHotspotOrientation.setter
    def CheckHotspotOrientation(self, val): self.CheckHotspotOrientation.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def bezierMove(self):  # type: ()->Bool
        return Bool(self._node.at("bezierMove"))
    @bezierMove.setter
    def bezierMove(self, val): self.bezierMove.set(val)
    @property
    def biteDamagePerSec(self):  # type: ()->Float
        return Float(self._node.at("biteDamagePerSec"))
    @biteDamagePerSec.setter
    def biteDamagePerSec(self, val): self.biteDamagePerSec.set(val)
    @property
    def biteDefenseDamages(self):  # type: ()->Float
        return Float(self._node.at("biteDefenseDamages"))
    @biteDefenseDamages.setter
    def biteDefenseDamages(self, val): self.biteDefenseDamages.set(val)
    @property
    def biteDuration(self):  # type: ()->Float
        return Float(self._node.at("biteDuration"))
    @biteDuration.setter
    def biteDuration(self, val): self.biteDuration.set(val)
    @property
    def biteMaxRange(self):  # type: ()->Float
        return Float(self._node.at("biteMaxRange"))
    @biteMaxRange.setter
    def biteMaxRange(self, val): self.biteMaxRange.set(val)
    pass


from EntityLibPy import Node

class BiomeSoundBank_sBiomeEnv(HelperObject):
    schema_name = "BiomeSoundBank::sBiomeEnv"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BiomeSoundBank_sBiomeEnv
        return BiomeSoundBank_sBiomeEnv(entlib.load_node_file(sourcefile, entlib.get_schema(BiomeSoundBank_sBiomeEnv.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BiomeSoundBank_sBiomeEnv
        return BiomeSoundBank_sBiomeEnv(entlib.make_node(BiomeSoundBank_sBiomeEnv.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Spread(self):  # type: ()->Float
        return Float(self._node.at("Spread"))
    @Spread.setter
    def Spread(self, val): self.Spread.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BiomeSoundBank_sBiomeSound(HelperObject):
    schema_name = "BiomeSoundBank::sBiomeSound"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BiomeSoundBank_sBiomeSound
        return BiomeSoundBank_sBiomeSound(entlib.load_node_file(sourcefile, entlib.get_schema(BiomeSoundBank_sBiomeSound.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BiomeSoundBank_sBiomeSound
        return BiomeSoundBank_sBiomeSound(entlib.make_node(BiomeSoundBank_sBiomeSound.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AuxSend(self):  # type: ()->String
        return String(self._node.at("AuxSend"))
    @AuxSend.setter
    def AuxSend(self, val): self.AuxSend.set(val)
    @property
    def Bank(self):  # type: ()->String
        return String(self._node.at("Bank"))
    @Bank.setter
    def Bank(self, val): self.Bank.set(val)
    @property
    def Event(self):  # type: ()->String
        return String(self._node.at("Event"))
    @Event.setter
    def Event(self, val): self.Event.set(val)
    @property
    def Event_Stop(self):  # type: ()->String
        return String(self._node.at("Event_Stop"))
    @Event_Stop.setter
    def Event_Stop(self, val): self.Event_Stop.set(val)
    @property
    def MainState(self):  # type: ()->String
        return String(self._node.at("MainState"))
    @MainState.setter
    def MainState(self, val): self.MainState.set(val)
    @property
    def Super(self):  # type: ()->BiomeSoundBank_sBiomeEnv
        return BiomeSoundBank_sBiomeEnv(self._node.at("Super"))
    @property
    def Volume(self):  # type: ()->String
        return String(self._node.at("Volume"))
    @Volume.setter
    def Volume(self, val): self.Volume.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BiomeSoundBank_sBiomeSFX(HelperObject):
    schema_name = "BiomeSoundBank::sBiomeSFX"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BiomeSoundBank_sBiomeSFX
        return BiomeSoundBank_sBiomeSFX(entlib.load_node_file(sourcefile, entlib.get_schema(BiomeSoundBank_sBiomeSFX.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BiomeSoundBank_sBiomeSFX
        return BiomeSoundBank_sBiomeSFX(entlib.make_node(BiomeSoundBank_sBiomeSFX.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Rtpc(self):  # type: ()->String
        return String(self._node.at("Rtpc"))
    @Rtpc.setter
    def Rtpc(self, val): self.Rtpc.set(val)
    @property
    def SFX(self):  # type: ()->String
        return String(self._node.at("SFX"))
    @SFX.setter
    def SFX(self, val): self.SFX.set(val)
    @property
    def Super(self):  # type: ()->BiomeSoundBank_sBiomeEnv
        return BiomeSoundBank_sBiomeEnv(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BiomeSoundBank(HelperObject):
    schema_name = "BiomeSoundBank"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BiomeSoundBank
        return BiomeSoundBank(entlib.load_node_file(sourcefile, entlib.get_schema(BiomeSoundBank.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BiomeSoundBank
        return BiomeSoundBank(entlib.make_node(BiomeSoundBank.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BiomeSFX(self):  # type: ()->Array[BiomeSoundBank_sBiomeSFX]
        return (lambda n: Array(BiomeSoundBank_sBiomeSFX, n))(self._node.at("BiomeSFX"))
    @property
    def BiomeSounds(self):  # type: ()->Array[BiomeSoundBank_sBiomeSound]
        return (lambda n: Array(BiomeSoundBank_sBiomeSound, n))(self._node.at("BiomeSounds"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class BillboardRenderingTypeEnum(Enum):
    Cross = "Cross"
    CameraFacingQuad = "CameraFacingQuad"
    Mesh = "Mesh"
    BillboardRenderingType_COUNT = "BillboardRenderingType_COUNT"


class BillboardRenderingType(Primitive[BillboardRenderingTypeEnum]):  # Enum
    def __init__(self, node):
        super(BillboardRenderingType, self).__init__(BillboardRenderingTypeEnum, node)
    schema_name = "BillboardRenderingType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> BillboardRenderingType
        return BillboardRenderingType(node)
    def set(self, val):  # type: (BillboardRenderingTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class BillboardRenderingSidesEnum(Enum):
    SideA = "SideA"
    SideB = "SideB"
    BothSides = "BothSides"
    BillboardRenderingSides_COUNT = "BillboardRenderingSides_COUNT"


class BillboardRenderingSides(Primitive[BillboardRenderingSidesEnum]):  # Enum
    def __init__(self, node):
        super(BillboardRenderingSides, self).__init__(BillboardRenderingSidesEnum, node)
    schema_name = "BillboardRenderingSides"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> BillboardRenderingSides
        return BillboardRenderingSides(node)
    def set(self, val):  # type: (BillboardRenderingSidesEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class BillboardRenderingAttributeEnum(Enum):
    Horizontal = "Horizontal"
    Vertical = "Vertical"
    Frontal = "Frontal"
    BillboardRenderingAttribute_COUNT = "BillboardRenderingAttribute_COUNT"


class BillboardRenderingAttribute(Primitive[BillboardRenderingAttributeEnum]):  # Enum
    def __init__(self, node):
        super(BillboardRenderingAttribute, self).__init__(BillboardRenderingAttributeEnum, node)
    schema_name = "BillboardRenderingAttribute"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> BillboardRenderingAttribute
        return BillboardRenderingAttribute(node)
    def set(self, val):  # type: (BillboardRenderingAttributeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class BillboardCameraFacingQuadTypeEnum(Enum):
    AroundAxis = "AroundAxis"
    AroundCenter = "AroundCenter"
    NotFacingCamera = "NotFacingCamera"
    BGELikeShaft = "BGELikeShaft"
    BillboardCameraFacingQuadType_COUNT = "BillboardCameraFacingQuadType_COUNT"


class BillboardCameraFacingQuadType(Primitive[BillboardCameraFacingQuadTypeEnum]):  # Enum
    def __init__(self, node):
        super(BillboardCameraFacingQuadType, self).__init__(BillboardCameraFacingQuadTypeEnum, node)
    schema_name = "BillboardCameraFacingQuadType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> BillboardCameraFacingQuadType
        return BillboardCameraFacingQuadType(node)
    def set(self, val):  # type: (BillboardCameraFacingQuadTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class BillboardRendererProperties(HelperObject):
    schema_name = "BillboardRendererProperties"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BillboardRendererProperties
        return BillboardRendererProperties(entlib.load_node_file(sourcefile, entlib.get_schema(BillboardRendererProperties.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BillboardRendererProperties
        return BillboardRendererProperties(entlib.make_node(BillboardRendererProperties.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Attribute(self):  # type: ()->BillboardRenderingAttribute
        return BillboardRenderingAttribute(self._node.at("Attribute"))
    @Attribute.setter
    def Attribute(self, val): self.Attribute.set(val)
    @property
    def BillboardType(self):  # type: ()->BillboardCameraFacingQuadType
        return BillboardCameraFacingQuadType(self._node.at("BillboardType"))
    @BillboardType.setter
    def BillboardType(self, val): self.BillboardType.set(val)
    @property
    def ExtraMaterialPathArray(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("ExtraMaterialPathArray"))
    @ExtraMaterialPathArray.setter
    def ExtraMaterialPathArray(self, val): self.ExtraMaterialPathArray.set(val)
    @property
    def MaterialPath(self):  # type: ()->String
        return String(self._node.at("MaterialPath"))
    @MaterialPath.setter
    def MaterialPath(self, val): self.MaterialPath.set(val)
    @property
    def NbMeshInstances(self):  # type: ()->Int
        return Int(self._node.at("NbMeshInstances"))
    @NbMeshInstances.setter
    def NbMeshInstances(self, val): self.NbMeshInstances.set(val)
    @property
    def NbQuads(self):  # type: ()->Int
        return Int(self._node.at("NbQuads"))
    @NbQuads.setter
    def NbQuads(self, val): self.NbQuads.set(val)
    @property
    def Offset(self):  # type: ()->Vector3
        return Vector3(self._node.at("Offset"))
    @Offset.setter
    def Offset(self, val): self.Offset.set(val)
    @property
    def Sides(self):  # type: ()->BillboardRenderingSides
        return BillboardRenderingSides(self._node.at("Sides"))
    @Sides.setter
    def Sides(self, val): self.Sides.set(val)
    @property
    def VisualPath(self):  # type: ()->String
        return String(self._node.at("VisualPath"))
    @VisualPath.setter
    def VisualPath(self, val): self.VisualPath.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BillboardProperties(HelperObject):
    schema_name = "BillboardProperties"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BillboardProperties
        return BillboardProperties(entlib.load_node_file(sourcefile, entlib.get_schema(BillboardProperties.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BillboardProperties
        return BillboardProperties(entlib.make_node(BillboardProperties.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Duration(self):  # type: ()->Float
        return Float(self._node.at("Duration"))
    @Duration.setter
    def Duration(self, val): self.Duration.set(val)
    @property
    def Looping(self):  # type: ()->Bool
        return Bool(self._node.at("Looping"))
    @Looping.setter
    def Looping(self, val): self.Looping.set(val)
    @property
    def Luminosity(self):  # type: ()->Float
        return Float(self._node.at("Luminosity"))
    @Luminosity.setter
    def Luminosity(self, val): self.Luminosity.set(val)
    @property
    def LuminosityCurvePath(self):  # type: ()->String
        return String(self._node.at("LuminosityCurvePath"))
    @LuminosityCurvePath.setter
    def LuminosityCurvePath(self, val): self.LuminosityCurvePath.set(val)
    @property
    def LuminosityVariability(self):  # type: ()->Float
        return Float(self._node.at("LuminosityVariability"))
    @LuminosityVariability.setter
    def LuminosityVariability(self, val): self.LuminosityVariability.set(val)
    @property
    def RenderingProperties(self):  # type: ()->Array[BillboardRendererProperties]
        return (lambda n: Array(BillboardRendererProperties, n))(self._node.at("RenderingProperties"))
    @property
    def RenderingType(self):  # type: ()->BillboardRenderingType
        return BillboardRenderingType(self._node.at("RenderingType"))
    @RenderingType.setter
    def RenderingType(self, val): self.RenderingType.set(val)
    @property
    def Size(self):  # type: ()->Vector3
        return Vector3(self._node.at("Size"))
    @Size.setter
    def Size(self, val): self.Size.set(val)
    @property
    def SizeCurvePath(self):  # type: ()->String
        return String(self._node.at("SizeCurvePath"))
    @SizeCurvePath.setter
    def SizeCurvePath(self, val): self.SizeCurvePath.set(val)
    @property
    def SizeVariability(self):  # type: ()->Vector3
        return Vector3(self._node.at("SizeVariability"))
    @SizeVariability.setter
    def SizeVariability(self, val): self.SizeVariability.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BehaviorScriptData(HelperObject):
    schema_name = "BehaviorScriptData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BehaviorScriptData
        return BehaviorScriptData(entlib.load_node_file(sourcefile, entlib.get_schema(BehaviorScriptData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BehaviorScriptData
        return BehaviorScriptData(entlib.make_node(BehaviorScriptData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def additionalDangerousnessDiffToFlee(self):  # type: ()->Float
        return Float(self._node.at("additionalDangerousnessDiffToFlee"))
    @additionalDangerousnessDiffToFlee.setter
    def additionalDangerousnessDiffToFlee(self, val): self.additionalDangerousnessDiffToFlee.set(val)
    @property
    def aimingDuration(self):  # type: ()->Float
        return Float(self._node.at("aimingDuration"))
    @aimingDuration.setter
    def aimingDuration(self, val): self.aimingDuration.set(val)
    @property
    def answerAttackRunSpeed(self):  # type: ()->Int
        return Int(self._node.at("answerAttackRunSpeed"))
    @answerAttackRunSpeed.setter
    def answerAttackRunSpeed(self, val): self.answerAttackRunSpeed.set(val)
    @property
    def artificialArenaRadius(self):  # type: ()->Float
        return Float(self._node.at("artificialArenaRadius"))
    @artificialArenaRadius.setter
    def artificialArenaRadius(self, val): self.artificialArenaRadius.set(val)
    @property
    def attackAggressivityDecrease(self):  # type: ()->Int
        return Int(self._node.at("attackAggressivityDecrease"))
    @attackAggressivityDecrease.setter
    def attackAggressivityDecrease(self, val): self.attackAggressivityDecrease.set(val)
    @property
    def attackIfEnemyHasBeenSeenSince(self):  # type: ()->Float
        return Float(self._node.at("attackIfEnemyHasBeenSeenSince"))
    @attackIfEnemyHasBeenSeenSince.setter
    def attackIfEnemyHasBeenSeenSince(self, val): self.attackIfEnemyHasBeenSeenSince.set(val)
    @property
    def attackInPack(self):  # type: ()->Bool
        return Bool(self._node.at("attackInPack"))
    @attackInPack.setter
    def attackInPack(self, val): self.attackInPack.set(val)
    @property
    def attackOrderCanFlee(self):  # type: ()->Bool
        return Bool(self._node.at("attackOrderCanFlee"))
    @attackOrderCanFlee.setter
    def attackOrderCanFlee(self, val): self.attackOrderCanFlee.set(val)
    @property
    def attackRunSpeed(self):  # type: ()->Int
        return Int(self._node.at("attackRunSpeed"))
    @attackRunSpeed.setter
    def attackRunSpeed(self, val): self.attackRunSpeed.set(val)
    @property
    def attackWaitCircle_Offset_Z(self):  # type: ()->Float
        return Float(self._node.at("attackWaitCircle_Offset_Z"))
    @attackWaitCircle_Offset_Z.setter
    def attackWaitCircle_Offset_Z(self, val): self.attackWaitCircle_Offset_Z.set(val)
    @property
    def avoidGroundMovements(self):  # type: ()->Bool
        return Bool(self._node.at("avoidGroundMovements"))
    @avoidGroundMovements.setter
    def avoidGroundMovements(self, val): self.avoidGroundMovements.set(val)
    @property
    def avoidWaterMovements(self):  # type: ()->Bool
        return Bool(self._node.at("avoidWaterMovements"))
    @avoidWaterMovements.setter
    def avoidWaterMovements(self, val): self.avoidWaterMovements.set(val)
    @property
    def blockedByScaryWeather(self):  # type: ()->Bool
        return Bool(self._node.at("blockedByScaryWeather"))
    @blockedByScaryWeather.setter
    def blockedByScaryWeather(self, val): self.blockedByScaryWeather.set(val)
    @property
    def canBite(self):  # type: ()->Bool
        return Bool(self._node.at("canBite"))
    @canBite.setter
    def canBite(self, val): self.canBite.set(val)
    @property
    def canFlee(self):  # type: ()->Bool
        return Bool(self._node.at("canFlee"))
    @canFlee.setter
    def canFlee(self, val): self.canFlee.set(val)
    @property
    def closeAttack_Offset_Z(self):  # type: ()->Float
        return Float(self._node.at("closeAttack_Offset_Z"))
    @closeAttack_Offset_Z.setter
    def closeAttack_Offset_Z(self, val): self.closeAttack_Offset_Z.set(val)
    @property
    def closeCombatDistance(self):  # type: ()->Float
        return Float(self._node.at("closeCombatDistance"))
    @closeCombatDistance.setter
    def closeCombatDistance(self, val): self.closeCombatDistance.set(val)
    @property
    def combatFlyingHeightOffset(self):  # type: ()->Float
        return Float(self._node.at("combatFlyingHeightOffset"))
    @combatFlyingHeightOffset.setter
    def combatFlyingHeightOffset(self, val): self.combatFlyingHeightOffset.set(val)
    @property
    def combatSpeedModeOnNodes(self):  # type: ()->Int
        return Int(self._node.at("combatSpeedModeOnNodes"))
    @combatSpeedModeOnNodes.setter
    def combatSpeedModeOnNodes(self, val): self.combatSpeedModeOnNodes.set(val)
    @property
    def combatStopOnNodeCoolDown(self):  # type: ()->Float
        return Float(self._node.at("combatStopOnNodeCoolDown"))
    @combatStopOnNodeCoolDown.setter
    def combatStopOnNodeCoolDown(self, val): self.combatStopOnNodeCoolDown.set(val)
    @property
    def combatStopOnNodeMaxTime(self):  # type: ()->Float
        return Float(self._node.at("combatStopOnNodeMaxTime"))
    @combatStopOnNodeMaxTime.setter
    def combatStopOnNodeMaxTime(self, val): self.combatStopOnNodeMaxTime.set(val)
    @property
    def combatTooCloseDistance(self):  # type: ()->Float
        return Float(self._node.at("combatTooCloseDistance"))
    @combatTooCloseDistance.setter
    def combatTooCloseDistance(self, val): self.combatTooCloseDistance.set(val)
    @property
    def combatTriggerStopOnNodeTimerDistance(self):  # type: ()->Float
        return Float(self._node.at("combatTriggerStopOnNodeTimerDistance"))
    @combatTriggerStopOnNodeTimerDistance.setter
    def combatTriggerStopOnNodeTimerDistance(self, val): self.combatTriggerStopOnNodeTimerDistance.set(val)
    @property
    def considersRunnerAsAMenace(self):  # type: ()->Bool
        return Bool(self._node.at("considersRunnerAsAMenace"))
    @considersRunnerAsAMenace.setter
    def considersRunnerAsAMenace(self, val): self.considersRunnerAsAMenace.set(val)
    @property
    def coolDownBetweenProjectileDodge(self):  # type: ()->Float
        return Float(self._node.at("coolDownBetweenProjectileDodge"))
    @coolDownBetweenProjectileDodge.setter
    def coolDownBetweenProjectileDodge(self, val): self.coolDownBetweenProjectileDodge.set(val)
    @property
    def drivingAimAngle(self):  # type: ()->Float
        return Float(self._node.at("drivingAimAngle"))
    @drivingAimAngle.setter
    def drivingAimAngle(self, val): self.drivingAimAngle.set(val)
    @property
    def drivingAimSpeed(self):  # type: ()->Float
        return Float(self._node.at("drivingAimSpeed"))
    @drivingAimSpeed.setter
    def drivingAimSpeed(self, val): self.drivingAimSpeed.set(val)
    @property
    def enemyAggressivity(self):  # type: ()->Int
        return Int(self._node.at("enemyAggressivity"))
    @enemyAggressivity.setter
    def enemyAggressivity(self, val): self.enemyAggressivity.set(val)
    @property
    def energyAttackProbability(self):  # type: ()->Float
        return Float(self._node.at("energyAttackProbability"))
    @energyAttackProbability.setter
    def energyAttackProbability(self, val): self.energyAttackProbability.set(val)
    @property
    def engageInCombatDistance(self):  # type: ()->Float
        return Float(self._node.at("engageInCombatDistance"))
    @engageInCombatDistance.setter
    def engageInCombatDistance(self, val): self.engageInCombatDistance.set(val)
    @property
    def farCombatDistance(self):  # type: ()->Float
        return Float(self._node.at("farCombatDistance"))
    @farCombatDistance.setter
    def farCombatDistance(self, val): self.farCombatDistance.set(val)
    @property
    def feelsSafeWhenDangerIsThisFar(self):  # type: ()->Float
        return Float(self._node.at("feelsSafeWhenDangerIsThisFar"))
    @feelsSafeWhenDangerIsThisFar.setter
    def feelsSafeWhenDangerIsThisFar(self, val): self.feelsSafeWhenDangerIsThisFar.set(val)
    @property
    def fleeDistToEnemy(self):  # type: ()->Float
        return Float(self._node.at("fleeDistToEnemy"))
    @fleeDistToEnemy.setter
    def fleeDistToEnemy(self, val): self.fleeDistToEnemy.set(val)
    @property
    def fleeMaxDist(self):  # type: ()->Float
        return Float(self._node.at("fleeMaxDist"))
    @fleeMaxDist.setter
    def fleeMaxDist(self, val): self.fleeMaxDist.set(val)
    @property
    def fleeTime(self):  # type: ()->Float
        return Float(self._node.at("fleeTime"))
    @fleeTime.setter
    def fleeTime(self, val): self.fleeTime.set(val)
    @property
    def flockingArenaRadius(self):  # type: ()->Float
        return Float(self._node.at("flockingArenaRadius"))
    @flockingArenaRadius.setter
    def flockingArenaRadius(self, val): self.flockingArenaRadius.set(val)
    @property
    def friendAggressivity(self):  # type: ()->Int
        return Int(self._node.at("friendAggressivity"))
    @friendAggressivity.setter
    def friendAggressivity(self, val): self.friendAggressivity.set(val)
    @property
    def goToTargetCheckDistance(self):  # type: ()->Float
        return Float(self._node.at("goToTargetCheckDistance"))
    @goToTargetCheckDistance.setter
    def goToTargetCheckDistance(self, val): self.goToTargetCheckDistance.set(val)
    @property
    def guideFollowMalusScorePerSec(self):  # type: ()->Float
        return Float(self._node.at("guideFollowMalusScorePerSec"))
    @guideFollowMalusScorePerSec.setter
    def guideFollowMalusScorePerSec(self, val): self.guideFollowMalusScorePerSec.set(val)
    @property
    def guideFollowMaxBonusScorePerSec(self):  # type: ()->Float
        return Float(self._node.at("guideFollowMaxBonusScorePerSec"))
    @guideFollowMaxBonusScorePerSec.setter
    def guideFollowMaxBonusScorePerSec(self, val): self.guideFollowMaxBonusScorePerSec.set(val)
    @property
    def guideFollowMaxDistToScore(self):  # type: ()->Float
        return Float(self._node.at("guideFollowMaxDistToScore"))
    @guideFollowMaxDistToScore.setter
    def guideFollowMaxDistToScore(self, val): self.guideFollowMaxDistToScore.set(val)
    @property
    def guideFollowMaxDistanceToTrail(self):  # type: ()->Float
        return Float(self._node.at("guideFollowMaxDistanceToTrail"))
    @guideFollowMaxDistanceToTrail.setter
    def guideFollowMaxDistanceToTrail(self, val): self.guideFollowMaxDistanceToTrail.set(val)
    @property
    def guideFollowMinBonusScorePerSec(self):  # type: ()->Float
        return Float(self._node.at("guideFollowMinBonusScorePerSec"))
    @guideFollowMinBonusScorePerSec.setter
    def guideFollowMinBonusScorePerSec(self, val): self.guideFollowMinBonusScorePerSec.set(val)
    @property
    def guideFollowMinDistToScore(self):  # type: ()->Float
        return Float(self._node.at("guideFollowMinDistToScore"))
    @guideFollowMinDistToScore.setter
    def guideFollowMinDistToScore(self, val): self.guideFollowMinDistToScore.set(val)
    @property
    def guideFollowScoreThreshold(self):  # type: ()->Float
        return Float(self._node.at("guideFollowScoreThreshold"))
    @guideFollowScoreThreshold.setter
    def guideFollowScoreThreshold(self, val): self.guideFollowScoreThreshold.set(val)
    @property
    def guideFollowTimeBetweenTeleport(self):  # type: ()->Float
        return Float(self._node.at("guideFollowTimeBetweenTeleport"))
    @guideFollowTimeBetweenTeleport.setter
    def guideFollowTimeBetweenTeleport(self, val): self.guideFollowTimeBetweenTeleport.set(val)
    @property
    def guideMinSpeed(self):  # type: ()->Float
        return Float(self._node.at("guideMinSpeed"))
    @guideMinSpeed.setter
    def guideMinSpeed(self, val): self.guideMinSpeed.set(val)
    @property
    def guideRepulsiveDistIn(self):  # type: ()->Float
        return Float(self._node.at("guideRepulsiveDistIn"))
    @guideRepulsiveDistIn.setter
    def guideRepulsiveDistIn(self, val): self.guideRepulsiveDistIn.set(val)
    @property
    def guideRepulsiveDistOut(self):  # type: ()->Float
        return Float(self._node.at("guideRepulsiveDistOut"))
    @guideRepulsiveDistOut.setter
    def guideRepulsiveDistOut(self, val): self.guideRepulsiveDistOut.set(val)
    @property
    def hardFeelingsFriendlyHitCount(self):  # type: ()->Int
        return Int(self._node.at("hardFeelingsFriendlyHitCount"))
    @hardFeelingsFriendlyHitCount.setter
    def hardFeelingsFriendlyHitCount(self, val): self.hardFeelingsFriendlyHitCount.set(val)
    @property
    def hardFeelingsNotFriendlyHitCount(self):  # type: ()->Int
        return Int(self._node.at("hardFeelingsNotFriendlyHitCount"))
    @hardFeelingsNotFriendlyHitCount.setter
    def hardFeelingsNotFriendlyHitCount(self, val): self.hardFeelingsNotFriendlyHitCount.set(val)
    @property
    def helpOtherDoneIfLifeAboveThreshold(self):  # type: ()->Float
        return Float(self._node.at("helpOtherDoneIfLifeAboveThreshold"))
    @helpOtherDoneIfLifeAboveThreshold.setter
    def helpOtherDoneIfLifeAboveThreshold(self, val): self.helpOtherDoneIfLifeAboveThreshold.set(val)
    @property
    def helpOtherIfLifeBelowThreshold(self):  # type: ()->Float
        return Float(self._node.at("helpOtherIfLifeBelowThreshold"))
    @helpOtherIfLifeBelowThreshold.setter
    def helpOtherIfLifeBelowThreshold(self, val): self.helpOtherIfLifeBelowThreshold.set(val)
    @property
    def innerArenaRatio(self):  # type: ()->Float
        return Float(self._node.at("innerArenaRatio"))
    @innerArenaRatio.setter
    def innerArenaRatio(self, val): self.innerArenaRatio.set(val)
    @property
    def isAffectedByStench(self):  # type: ()->Bool
        return Bool(self._node.at("isAffectedByStench"))
    @isAffectedByStench.setter
    def isAffectedByStench(self, val): self.isAffectedByStench.set(val)
    @property
    def isCourageous(self):  # type: ()->Bool
        return Bool(self._node.at("isCourageous"))
    @isCourageous.setter
    def isCourageous(self, val): self.isCourageous.set(val)
    @property
    def isScaredBySoundEffect(self):  # type: ()->Bool
        return Bool(self._node.at("isScaredBySoundEffect"))
    @isScaredBySoundEffect.setter
    def isScaredBySoundEffect(self, val): self.isScaredBySoundEffect.set(val)
    @property
    def jumpAttackProbability(self):  # type: ()->Float
        return Float(self._node.at("jumpAttackProbability"))
    @jumpAttackProbability.setter
    def jumpAttackProbability(self, val): self.jumpAttackProbability.set(val)
    @property
    def lifeInDangerThreshold(self):  # type: ()->Float
        return Float(self._node.at("lifeInDangerThreshold"))
    @lifeInDangerThreshold.setter
    def lifeInDangerThreshold(self, val): self.lifeInDangerThreshold.set(val)
    @property
    def lifeInNoMoreDangerThreshold(self):  # type: ()->Float
        return Float(self._node.at("lifeInNoMoreDangerThreshold"))
    @lifeInNoMoreDangerThreshold.setter
    def lifeInNoMoreDangerThreshold(self, val): self.lifeInNoMoreDangerThreshold.set(val)
    @property
    def lockEnemyFollowMaxDistFromGuide(self):  # type: ()->Float
        return Float(self._node.at("lockEnemyFollowMaxDistFromGuide"))
    @lockEnemyFollowMaxDistFromGuide.setter
    def lockEnemyFollowMaxDistFromGuide(self, val): self.lockEnemyFollowMaxDistFromGuide.set(val)
    @property
    def maxDistanceToFollowBeam(self):  # type: ()->Float
        return Float(self._node.at("maxDistanceToFollowBeam"))
    @maxDistanceToFollowBeam.setter
    def maxDistanceToFollowBeam(self, val): self.maxDistanceToFollowBeam.set(val)
    @property
    def maxFollowerCount(self):  # type: ()->Int
        return Int(self._node.at("maxFollowerCount"))
    @maxFollowerCount.setter
    def maxFollowerCount(self, val): self.maxFollowerCount.set(val)
    @property
    def maxLookOutModeTimer(self):  # type: ()->Float
        return Float(self._node.at("maxLookOutModeTimer"))
    @maxLookOutModeTimer.setter
    def maxLookOutModeTimer(self, val): self.maxLookOutModeTimer.set(val)
    @property
    def maxTimeBeforeStoppingToWaitForBeam(self):  # type: ()->Float
        return Float(self._node.at("maxTimeBeforeStoppingToWaitForBeam"))
    @maxTimeBeforeStoppingToWaitForBeam.setter
    def maxTimeBeforeStoppingToWaitForBeam(self, val): self.maxTimeBeforeStoppingToWaitForBeam.set(val)
    @property
    def menaceSelection(self):  # type: ()->MenaceSelection
        return MenaceSelection(self._node.at("menaceSelection"))
    @menaceSelection.setter
    def menaceSelection(self, val): self.menaceSelection.set(val)
    @property
    def middleCombatDistance(self):  # type: ()->Float
        return Float(self._node.at("middleCombatDistance"))
    @middleCombatDistance.setter
    def middleCombatDistance(self, val): self.middleCombatDistance.set(val)
    @property
    def minAbsoluteDistanceToTeleportToMaster(self):  # type: ()->Float
        return Float(self._node.at("minAbsoluteDistanceToTeleportToMaster"))
    @minAbsoluteDistanceToTeleportToMaster.setter
    def minAbsoluteDistanceToTeleportToMaster(self, val): self.minAbsoluteDistanceToTeleportToMaster.set(val)
    @property
    def minDistanceToBeamPosition(self):  # type: ()->Float
        return Float(self._node.at("minDistanceToBeamPosition"))
    @minDistanceToBeamPosition.setter
    def minDistanceToBeamPosition(self, val): self.minDistanceToBeamPosition.set(val)
    @property
    def minDistanceToFollowBeam(self):  # type: ()->Float
        return Float(self._node.at("minDistanceToFollowBeam"))
    @minDistanceToFollowBeam.setter
    def minDistanceToFollowBeam(self, val): self.minDistanceToFollowBeam.set(val)
    @property
    def minNavmeshDistanceToTeleportToMaster(self):  # type: ()->Float
        return Float(self._node.at("minNavmeshDistanceToTeleportToMaster"))
    @minNavmeshDistanceToTeleportToMaster.setter
    def minNavmeshDistanceToTeleportToMaster(self, val): self.minNavmeshDistanceToTeleportToMaster.set(val)
    @property
    def minTimeBeforeStoppingToWaitForBeam(self):  # type: ()->Float
        return Float(self._node.at("minTimeBeforeStoppingToWaitForBeam"))
    @minTimeBeforeStoppingToWaitForBeam.setter
    def minTimeBeforeStoppingToWaitForBeam(self, val): self.minTimeBeforeStoppingToWaitForBeam.set(val)
    @property
    def noAttackTimeAfterAttack(self):  # type: ()->Float
        return Float(self._node.at("noAttackTimeAfterAttack"))
    @noAttackTimeAfterAttack.setter
    def noAttackTimeAfterAttack(self, val): self.noAttackTimeAfterAttack.set(val)
    @property
    def offerAGiftWhenChosen(self):  # type: ()->Bool
        return Bool(self._node.at("offerAGiftWhenChosen"))
    @offerAGiftWhenChosen.setter
    def offerAGiftWhenChosen(self, val): self.offerAGiftWhenChosen.set(val)
    @property
    def panicAggressivityDecrease(self):  # type: ()->Int
        return Int(self._node.at("panicAggressivityDecrease"))
    @panicAggressivityDecrease.setter
    def panicAggressivityDecrease(self, val): self.panicAggressivityDecrease.set(val)
    @property
    def panicsWhenGameEffect(self):  # type: ()->Int
        return Int(self._node.at("panicsWhenGameEffect"))
    @panicsWhenGameEffect.setter
    def panicsWhenGameEffect(self, val): self.panicsWhenGameEffect.set(val)
    @property
    def returnOnCircleAfterMaxAttacks(self):  # type: ()->Int
        return Int(self._node.at("returnOnCircleAfterMaxAttacks"))
    @returnOnCircleAfterMaxAttacks.setter
    def returnOnCircleAfterMaxAttacks(self, val): self.returnOnCircleAfterMaxAttacks.set(val)
    @property
    def roamSpeedModeOnNodes(self):  # type: ()->Int
        return Int(self._node.at("roamSpeedModeOnNodes"))
    @roamSpeedModeOnNodes.setter
    def roamSpeedModeOnNodes(self, val): self.roamSpeedModeOnNodes.set(val)
    @property
    def runsForDistancesSuperiorTo(self):  # type: ()->Float
        return Float(self._node.at("runsForDistancesSuperiorTo"))
    @runsForDistancesSuperiorTo.setter
    def runsForDistancesSuperiorTo(self, val): self.runsForDistancesSuperiorTo.set(val)
    @property
    def searchSoulOpportunity(self):  # type: ()->Bool
        return Bool(self._node.at("searchSoulOpportunity"))
    @searchSoulOpportunity.setter
    def searchSoulOpportunity(self, val): self.searchSoulOpportunity.set(val)
    @property
    def shootPreferedEnemyDistance(self):  # type: ()->Float
        return Float(self._node.at("shootPreferedEnemyDistance"))
    @shootPreferedEnemyDistance.setter
    def shootPreferedEnemyDistance(self, val): self.shootPreferedEnemyDistance.set(val)
    @property
    def shootSequence(self):  # type: ()->Array[ShootSequenceData]
        return (lambda n: Array(ShootSequenceData, n))(self._node.at("shootSequence"))
    @property
    def shootingMistakeMaxDelta(self):  # type: ()->Float
        return Float(self._node.at("shootingMistakeMaxDelta"))
    @shootingMistakeMaxDelta.setter
    def shootingMistakeMaxDelta(self, val): self.shootingMistakeMaxDelta.set(val)
    @property
    def shouldConquer(self):  # type: ()->Bool
        return Bool(self._node.at("shouldConquer"))
    @shouldConquer.setter
    def shouldConquer(self, val): self.shouldConquer.set(val)
    @property
    def shouldDodgeAfterAttack(self):  # type: ()->Bool
        return Bool(self._node.at("shouldDodgeAfterAttack"))
    @shouldDodgeAfterAttack.setter
    def shouldDodgeAfterAttack(self, val): self.shouldDodgeAfterAttack.set(val)
    @property
    def shouldHealPools(self):  # type: ()->Bool
        return Bool(self._node.at("shouldHealPools"))
    @shouldHealPools.setter
    def shouldHealPools(self, val): self.shouldHealPools.set(val)
    @property
    def shouldJumpInArena(self):  # type: ()->Bool
        return Bool(self._node.at("shouldJumpInArena"))
    @shouldJumpInArena.setter
    def shouldJumpInArena(self, val): self.shouldJumpInArena.set(val)
    @property
    def shouldStrafe(self):  # type: ()->Bool
        return Bool(self._node.at("shouldStrafe"))
    @shouldStrafe.setter
    def shouldStrafe(self, val): self.shouldStrafe.set(val)
    @property
    def shouldTranshumance(self):  # type: ()->Bool
        return Bool(self._node.at("shouldTranshumance"))
    @shouldTranshumance.setter
    def shouldTranshumance(self, val): self.shouldTranshumance.set(val)
    @property
    def staffAngleFullHint(self):  # type: ()->Float
        return Float(self._node.at("staffAngleFullHint"))
    @staffAngleFullHint.setter
    def staffAngleFullHint(self, val): self.staffAngleFullHint.set(val)
    @property
    def staffMaxTimeInAlert(self):  # type: ()->Float
        return Float(self._node.at("staffMaxTimeInAlert"))
    @staffMaxTimeInAlert.setter
    def staffMaxTimeInAlert(self, val): self.staffMaxTimeInAlert.set(val)
    @property
    def staffMinScoreToAlert(self):  # type: ()->Int
        return Int(self._node.at("staffMinScoreToAlert"))
    @staffMinScoreToAlert.setter
    def staffMinScoreToAlert(self, val): self.staffMinScoreToAlert.set(val)
    @property
    def staffTimeBeforeAlertAgain(self):  # type: ()->Float
        return Float(self._node.at("staffTimeBeforeAlertAgain"))
    @staffTimeBeforeAlertAgain.setter
    def staffTimeBeforeAlertAgain(self, val): self.staffTimeBeforeAlertAgain.set(val)
    @property
    def usesWarningShot(self):  # type: ()->Bool
        return Bool(self._node.at("usesWarningShot"))
    @usesWarningShot.setter
    def usesWarningShot(self, val): self.usesWarningShot.set(val)
    pass


from EntityLibPy import Node

class CreatureAIGD(HelperObject):
    schema_name = "CreatureAIGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureAIGD
        return CreatureAIGD(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureAIGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureAIGD
        return CreatureAIGD(entlib.make_node(CreatureAIGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BehaviorModifiersTags(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("BehaviorModifiersTags"))
    @BehaviorModifiersTags.setter
    def BehaviorModifiersTags(self, val): self.BehaviorModifiersTags.set(val)
    @property
    def BehaviorPath(self):  # type: ()->String
        return String(self._node.at("BehaviorPath"))
    @BehaviorPath.setter
    def BehaviorPath(self, val): self.BehaviorPath.set(val)
    @property
    def BehaviorState(self):  # type: ()->String
        return String(self._node.at("BehaviorState"))
    @BehaviorState.setter
    def BehaviorState(self, val): self.BehaviorState.set(val)
    @property
    def CanBeMaster(self):  # type: ()->Bool
        return Bool(self._node.at("CanBeMaster"))
    @CanBeMaster.setter
    def CanBeMaster(self, val): self.CanBeMaster.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def behaviorScriptData(self):  # type: ()->BehaviorScriptData
        return BehaviorScriptData(self._node.at("behaviorScriptData"))
    @property
    def m_oblivionTimerAfterSuspicious(self):  # type: ()->Float
        return Float(self._node.at("m_oblivionTimerAfterSuspicious"))
    @m_oblivionTimerAfterSuspicious.setter
    def m_oblivionTimerAfterSuspicious(self, val): self.m_oblivionTimerAfterSuspicious.set(val)
    @property
    def m_oblivionTimerBeforeSuspicious(self):  # type: ()->Float
        return Float(self._node.at("m_oblivionTimerBeforeSuspicious"))
    @m_oblivionTimerBeforeSuspicious.setter
    def m_oblivionTimerBeforeSuspicious(self, val): self.m_oblivionTimerBeforeSuspicious.set(val)
    @property
    def m_timerBeforeCertain(self):  # type: ()->Float
        return Float(self._node.at("m_timerBeforeCertain"))
    @m_timerBeforeCertain.setter
    def m_timerBeforeCertain(self, val): self.m_timerBeforeCertain.set(val)
    @property
    def m_timerBeforeSuspicious(self):  # type: ()->Float
        return Float(self._node.at("m_timerBeforeSuspicious"))
    @m_timerBeforeSuspicious.setter
    def m_timerBeforeSuspicious(self, val): self.m_timerBeforeSuspicious.set(val)
    pass


from EntityLibPy import Node
class BeamStaffModeEnum(Enum):
    Off = "Off"
    Searching = "Searching"
    Creature = "Creature"
    PossessingGPE = "PossessingGPE"
    Shapeshifting = "Shapeshifting"
    Item = "Item"
    UpgradeStaff = "UpgradeStaff"
    SideMap = "SideMap"
    PickUp = "PickUp"
    Hatching = "Hatching"
    Any = "Any"
    BeamStaffMode_COUNT = "BeamStaffMode_COUNT"


class BeamStaffMode(Primitive[BeamStaffModeEnum]):  # Enum
    def __init__(self, node):
        super(BeamStaffMode, self).__init__(BeamStaffModeEnum, node)
    schema_name = "BeamStaffMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> BeamStaffMode
        return BeamStaffMode(node)
    def set(self, val):  # type: (BeamStaffModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class BeamTargetGD(HelperObject):
    schema_name = "BeamTargetGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BeamTargetGD
        return BeamTargetGD(entlib.load_node_file(sourcefile, entlib.get_schema(BeamTargetGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BeamTargetGD
        return BeamTargetGD(entlib.make_node(BeamTargetGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CheckHotspotOrientation(self):  # type: ()->Bool
        return Bool(self._node.at("CheckHotspotOrientation"))
    @CheckHotspotOrientation.setter
    def CheckHotspotOrientation(self, val): self.CheckHotspotOrientation.set(val)
    @property
    def EventTriggered(self):  # type: ()->String
        return String(self._node.at("EventTriggered"))
    @EventTriggered.setter
    def EventTriggered(self, val): self.EventTriggered.set(val)
    @property
    def HotspotType(self):  # type: ()->HotSpotType
        return HotSpotType(self._node.at("HotspotType"))
    @HotspotType.setter
    def HotspotType(self, val): self.HotspotType.set(val)
    @property
    def IsCollectable(self):  # type: ()->Bool
        return Bool(self._node.at("IsCollectable"))
    @IsCollectable.setter
    def IsCollectable(self, val): self.IsCollectable.set(val)
    @property
    def Levitate(self):  # type: ()->Bool
        return Bool(self._node.at("Levitate"))
    @Levitate.setter
    def Levitate(self, val): self.Levitate.set(val)
    @property
    def MaxTargetableDistance(self):  # type: ()->Float
        return Float(self._node.at("MaxTargetableDistance"))
    @MaxTargetableDistance.setter
    def MaxTargetableDistance(self, val): self.MaxTargetableDistance.set(val)
    @property
    def Mode(self):  # type: ()->BeamStaffMode
        return BeamStaffMode(self._node.at("Mode"))
    @Mode.setter
    def Mode(self, val): self.Mode.set(val)
    @property
    def SpendEnergy(self):  # type: ()->Bool
        return Bool(self._node.at("SpendEnergy"))
    @SpendEnergy.setter
    def SpendEnergy(self, val): self.SpendEnergy.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BaseParameters(HelperObject):
    schema_name = "BaseParameters"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BaseParameters
        return BaseParameters(entlib.load_node_file(sourcefile, entlib.get_schema(BaseParameters.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BaseParameters
        return BaseParameters(entlib.make_node(BaseParameters.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FreezeData(self):  # type: ()->FreezeData
        return FreezeData(self._node.at("FreezeData"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def additionalSpeedRequired(self):  # type: ()->Float
        return Float(self._node.at("additionalSpeedRequired"))
    @additionalSpeedRequired.setter
    def additionalSpeedRequired(self, val): self.additionalSpeedRequired.set(val)
    @property
    def direction(self):  # type: ()->Vector3
        return Vector3(self._node.at("direction"))
    @direction.setter
    def direction(self, val): self.direction.set(val)
    @property
    def flags(self):  # type: ()->Int
        return Int(self._node.at("flags"))
    @flags.setter
    def flags(self, val): self.flags.set(val)
    @property
    def force(self):  # type: ()->Float
        return Float(self._node.at("force"))
    @force.setter
    def force(self, val): self.force.set(val)
    @property
    def position(self):  # type: ()->Position
        return Position(self._node.at("position"))
    @property
    def shouldIgnoreSourceContactsDuringHit(self):  # type: ()->Bool
        return Bool(self._node.at("shouldIgnoreSourceContactsDuringHit"))
    @shouldIgnoreSourceContactsDuringHit.setter
    def shouldIgnoreSourceContactsDuringHit(self, val): self.shouldIgnoreSourceContactsDuringHit.set(val)
    @property
    def size(self):  # type: ()->Size
        return Size(self._node.at("size"))
    @size.setter
    def size(self, val): self.size.set(val)
    @property
    def style(self):  # type: ()->HitStyle
        return HitStyle(self._node.at("style"))
    @style.setter
    def style(self, val): self.style.set(val)
    @property
    def type(self):  # type: ()->HitType
        return HitType(self._node.at("type"))
    @type.setter
    def type(self, val): self.type.set(val)
    pass


from EntityLibPy import Node

class Hit(HelperObject):
    schema_name = "Hit"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Hit
        return Hit(entlib.load_node_file(sourcefile, entlib.get_schema(Hit.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Hit
        return Hit(entlib.make_node(Hit.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BaseParameters(self):  # type: ()->BaseParameters
        return BaseParameters(self._node.at("BaseParameters"))
    @property
    def DamageInstantParameters(self):  # type: ()->DamagesInstant
        return DamagesInstant(self._node.at("DamageInstantParameters"))
    @property
    def TargetCollision(self):  # type: ()->TargetCollision
        return TargetCollision(self._node.at("TargetCollision"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class AutoRotationTypeEnum(Enum):
    None_ = "None"
    _2D = "2D"
    _3D = "3D"
    AutoRotationType_COUNT = "AutoRotationType_COUNT"


class AutoRotationType(Primitive[AutoRotationTypeEnum]):  # Enum
    def __init__(self, node):
        super(AutoRotationType, self).__init__(AutoRotationTypeEnum, node)
    schema_name = "AutoRotationType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> AutoRotationType
        return AutoRotationType(node)
    def set(self, val):  # type: (AutoRotationTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class AttitudeModeEnum(Enum):
    normal = "normal"
    injured = "injured"
    dead = "dead"
    aggressive = "aggressive"
    bitten = "bitten"
    AttitudeMode_COUNT = "AttitudeMode_COUNT"


class AttitudeMode(Primitive[AttitudeModeEnum]):  # Enum
    def __init__(self, node):
        super(AttitudeMode, self).__init__(AttitudeModeEnum, node)
    schema_name = "AttitudeMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> AttitudeMode
        return AttitudeMode(node)
    def set(self, val):  # type: (AttitudeModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class AttackTypeEnum(Enum):
    Short = "Short"
    Long = "Long"
    Backward = "Backward"
    Charged = "Charged"
    Distant = "Distant"
    Push = "Push"
    Unmount = "Unmount"
    Dodge = "Dodge"
    Uppercut = "Uppercut"
    Landing = "Landing"
    JumpOnto = "JumpOnto"
    Bite = "Bite"
    Stomp = "Stomp"
    AttackType_COUNT = "AttackType_COUNT"


class AttackType(Primitive[AttackTypeEnum]):  # Enum
    def __init__(self, node):
        super(AttackType, self).__init__(AttackTypeEnum, node)
    schema_name = "AttackType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> AttackType
        return AttackType(node)
    def set(self, val):  # type: (AttackTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class AttackAbility(HelperObject):
    schema_name = "AttackAbility"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AttackAbility
        return AttackAbility(entlib.load_node_file(sourcefile, entlib.get_schema(AttackAbility.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AttackAbility
        return AttackAbility(entlib.make_node(AttackAbility.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Damage(self):  # type: ()->Float
        return Float(self._node.at("Damage"))
    @Damage.setter
    def Damage(self, val): self.Damage.set(val)
    @property
    def DistanceMax(self):  # type: ()->Float
        return Float(self._node.at("DistanceMax"))
    @DistanceMax.setter
    def DistanceMax(self, val): self.DistanceMax.set(val)
    @property
    def DistanceMin(self):  # type: ()->Float
        return Float(self._node.at("DistanceMin"))
    @DistanceMin.setter
    def DistanceMin(self, val): self.DistanceMin.set(val)
    @property
    def Duration(self):  # type: ()->Float
        return Float(self._node.at("Duration"))
    @Duration.setter
    def Duration(self, val): self.Duration.set(val)
    @property
    def EnergyCost(self):  # type: ()->Float
        return Float(self._node.at("EnergyCost"))
    @EnergyCost.setter
    def EnergyCost(self, val): self.EnergyCost.set(val)
    @property
    def FreezeData(self):  # type: ()->FreezeData
        return FreezeData(self._node.at("FreezeData"))
    @property
    def Impact(self):  # type: ()->Float
        return Float(self._node.at("Impact"))
    @Impact.setter
    def Impact(self, val): self.Impact.set(val)
    @property
    def ShakeData(self):  # type: ()->CameraShakeData
        return CameraShakeData(self._node.at("ShakeData"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AttackWeaponAbility(HelperObject):
    schema_name = "AttackWeaponAbility"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AttackWeaponAbility
        return AttackWeaponAbility(entlib.load_node_file(sourcefile, entlib.get_schema(AttackWeaponAbility.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AttackWeaponAbility
        return AttackWeaponAbility(entlib.make_node(AttackWeaponAbility.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Backward(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Backward"))
    @property
    def Bite(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Bite"))
    @property
    def Charged(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Charged"))
    @property
    def Dash(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Dash"))
    @property
    def Distant(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Distant"))
    @property
    def Dodge(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Dodge"))
    @property
    def JumpOnto(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("JumpOnto"))
    @property
    def Landing(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Landing"))
    @property
    def Long(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Long"))
    @property
    def Push(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Push"))
    @property
    def Short(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Short"))
    @property
    def Stomp(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Stomp"))
    @property
    def Unmount(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Unmount"))
    @property
    def Uppercut(self):  # type: ()->AttackAbility
        return AttackAbility(self._node.at("Uppercut"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AttackData(HelperObject):
    schema_name = "AttackData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AttackData
        return AttackData(entlib.load_node_file(sourcefile, entlib.get_schema(AttackData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AttackData
        return AttackData(entlib.make_node(AttackData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DefaultAttackType(self):  # type: ()->AttackType
        return AttackType(self._node.at("DefaultAttackType"))
    @DefaultAttackType.setter
    def DefaultAttackType(self, val): self.DefaultAttackType.set(val)
    @property
    def Hammer(self):  # type: ()->AttackWeaponAbility
        return AttackWeaponAbility(self._node.at("Hammer"))
    @property
    def Knife(self):  # type: ()->AttackWeaponAbility
        return AttackWeaponAbility(self._node.at("Knife"))
    @property
    def None_(self):  # type: ()->AttackWeaponAbility
        return AttackWeaponAbility(self._node.at("None"))
    @property
    def Stick(self):  # type: ()->AttackWeaponAbility
        return AttackWeaponAbility(self._node.at("Stick"))
    @property
    def Sword(self):  # type: ()->AttackWeaponAbility
        return AttackWeaponAbility(self._node.at("Sword"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class ArchetypeEnum(Enum):
    flying = "flying"
    swimming = "swimming"
    quadripede = "quadripede"
    bipede = "bipede"
    item = "item"
    structure = "structure"
    activator = "activator"
    Archetype_COUNT = "Archetype_COUNT"


class Archetype(Primitive[ArchetypeEnum]):  # Enum
    def __init__(self, node):
        super(Archetype, self).__init__(ArchetypeEnum, node)
    schema_name = "Archetype"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> Archetype
        return Archetype(node)
    def set(self, val):  # type: (ArchetypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class AnimationTreeConstraintsGD_GrowData(HelperObject):
    schema_name = "AnimationTreeConstraintsGD::GrowData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationTreeConstraintsGD_GrowData
        return AnimationTreeConstraintsGD_GrowData(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationTreeConstraintsGD_GrowData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationTreeConstraintsGD_GrowData
        return AnimationTreeConstraintsGD_GrowData(entlib.make_node(AnimationTreeConstraintsGD_GrowData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DegrowShakeForce(self):  # type: ()->Float
        return Float(self._node.at("DegrowShakeForce"))
    @DegrowShakeForce.setter
    def DegrowShakeForce(self, val): self.DegrowShakeForce.set(val)
    @property
    def GrowShakeForce(self):  # type: ()->Float
        return Float(self._node.at("GrowShakeForce"))
    @GrowShakeForce.setter
    def GrowShakeForce(self, val): self.GrowShakeForce.set(val)
    @property
    def GrowSpeed(self):  # type: ()->Float
        return Float(self._node.at("GrowSpeed"))
    @GrowSpeed.setter
    def GrowSpeed(self, val): self.GrowSpeed.set(val)
    @property
    def GrowingState(self):  # type: ()->GrowingState
        return GrowingState(self._node.at("GrowingState"))
    @GrowingState.setter
    def GrowingState(self, val): self.GrowingState.set(val)
    @property
    def ProgressSoundEventData(self):  # type: ()->ProgressSoundEventData
        return ProgressSoundEventData(self._node.at("ProgressSoundEventData"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationTreeConstraintsGD_ForceData(HelperObject):
    schema_name = "AnimationTreeConstraintsGD::ForceData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationTreeConstraintsGD_ForceData
        return AnimationTreeConstraintsGD_ForceData(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationTreeConstraintsGD_ForceData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationTreeConstraintsGD_ForceData
        return AnimationTreeConstraintsGD_ForceData(entlib.make_node(AnimationTreeConstraintsGD_ForceData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AutoSetupForceInfluence(self):  # type: ()->Bool
        return Bool(self._node.at("AutoSetupForceInfluence"))
    @AutoSetupForceInfluence.setter
    def AutoSetupForceInfluence(self, val): self.AutoSetupForceInfluence.set(val)
    @property
    def AutoSetupForceInfluenceLevelStart(self):  # type: ()->Int
        return Int(self._node.at("AutoSetupForceInfluenceLevelStart"))
    @AutoSetupForceInfluenceLevelStart.setter
    def AutoSetupForceInfluenceLevelStart(self, val): self.AutoSetupForceInfluenceLevelStart.set(val)
    @property
    def AutoSetupForceInfluenceLevelStop(self):  # type: ()->Int
        return Int(self._node.at("AutoSetupForceInfluenceLevelStop"))
    @AutoSetupForceInfluenceLevelStop.setter
    def AutoSetupForceInfluenceLevelStop(self, val): self.AutoSetupForceInfluenceLevelStop.set(val)
    @property
    def AutoSetupForceInfluenceValueAfterStop(self):  # type: ()->Float
        return Float(self._node.at("AutoSetupForceInfluenceValueAfterStop"))
    @AutoSetupForceInfluenceValueAfterStop.setter
    def AutoSetupForceInfluenceValueAfterStop(self, val): self.AutoSetupForceInfluenceValueAfterStop.set(val)
    @property
    def AutoSetupForceInfluenceValueBeforeStart(self):  # type: ()->Float
        return Float(self._node.at("AutoSetupForceInfluenceValueBeforeStart"))
    @AutoSetupForceInfluenceValueBeforeStart.setter
    def AutoSetupForceInfluenceValueBeforeStart(self, val): self.AutoSetupForceInfluenceValueBeforeStart.set(val)
    @property
    def AutoSetupForceInfluenceValueStart(self):  # type: ()->Float
        return Float(self._node.at("AutoSetupForceInfluenceValueStart"))
    @AutoSetupForceInfluenceValueStart.setter
    def AutoSetupForceInfluenceValueStart(self, val): self.AutoSetupForceInfluenceValueStart.set(val)
    @property
    def AutoSetupForceInfluenceValueStop(self):  # type: ()->Float
        return Float(self._node.at("AutoSetupForceInfluenceValueStop"))
    @AutoSetupForceInfluenceValueStop.setter
    def AutoSetupForceInfluenceValueStop(self, val): self.AutoSetupForceInfluenceValueStop.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationTreeConstraintsGD_BendData(HelperObject):
    schema_name = "AnimationTreeConstraintsGD::BendData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationTreeConstraintsGD_BendData
        return AnimationTreeConstraintsGD_BendData(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationTreeConstraintsGD_BendData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationTreeConstraintsGD_BendData
        return AnimationTreeConstraintsGD_BendData(entlib.make_node(AnimationTreeConstraintsGD_BendData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AcceptDrag(self):  # type: ()->Bool
        return Bool(self._node.at("AcceptDrag"))
    @AcceptDrag.setter
    def AcceptDrag(self, val): self.AcceptDrag.set(val)
    @property
    def AcceptDragOnBaseBone(self):  # type: ()->Bool
        return Bool(self._node.at("AcceptDragOnBaseBone"))
    @AcceptDragOnBaseBone.setter
    def AcceptDragOnBaseBone(self, val): self.AcceptDragOnBaseBone.set(val)
    @property
    def AttractDuration(self):  # type: ()->Float
        return Float(self._node.at("AttractDuration"))
    @AttractDuration.setter
    def AttractDuration(self, val): self.AttractDuration.set(val)
    @property
    def DragOnBaseBoneAttractionStartFactor(self):  # type: ()->Float
        return Float(self._node.at("DragOnBaseBoneAttractionStartFactor"))
    @DragOnBaseBoneAttractionStartFactor.setter
    def DragOnBaseBoneAttractionStartFactor(self, val): self.DragOnBaseBoneAttractionStartFactor.set(val)
    @property
    def MaxBendAngleFirstBone(self):  # type: ()->Int
        return Int(self._node.at("MaxBendAngleFirstBone"))
    @MaxBendAngleFirstBone.setter
    def MaxBendAngleFirstBone(self, val): self.MaxBendAngleFirstBone.set(val)
    @property
    def MaxBendAngleValueAtFirstBone(self):  # type: ()->Float
        return Float(self._node.at("MaxBendAngleValueAtFirstBone"))
    @MaxBendAngleValueAtFirstBone.setter
    def MaxBendAngleValueAtFirstBone(self, val): self.MaxBendAngleValueAtFirstBone.set(val)
    @property
    def MaxBendAngleValueAtLastBone(self):  # type: ()->Float
        return Float(self._node.at("MaxBendAngleValueAtLastBone"))
    @MaxBendAngleValueAtLastBone.setter
    def MaxBendAngleValueAtLastBone(self, val): self.MaxBendAngleValueAtLastBone.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationTreeConstraintsGD(HelperObject):
    schema_name = "AnimationTreeConstraintsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationTreeConstraintsGD
        return AnimationTreeConstraintsGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationTreeConstraintsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationTreeConstraintsGD
        return AnimationTreeConstraintsGD(entlib.make_node(AnimationTreeConstraintsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BendData(self):  # type: ()->AnimationTreeConstraintsGD_BendData
        return AnimationTreeConstraintsGD_BendData(self._node.at("BendData"))
    @property
    def ForceData(self):  # type: ()->AnimationTreeConstraintsGD_ForceData
        return AnimationTreeConstraintsGD_ForceData(self._node.at("ForceData"))
    @property
    def GrowData(self):  # type: ()->AnimationTreeConstraintsGD_GrowData
        return AnimationTreeConstraintsGD_GrowData(self._node.at("GrowData"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationModelComponentInput_StyleMode(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->StyleMode
        return StyleMode(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class AnimationModelComponentInput_SpeedMode(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class AnimationModelComponentInput_LocomotionMode(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->LocomotionMode
        return LocomotionMode(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class AnimationModelComponentInput_CarryMode(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->CarryMode
        return CarryMode(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class AnimationModelComponentInput_AttitudeMode(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->AttitudeMode
        return AttitudeMode(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class AnimationLegsConstraints_SlopeOffsetInfo(HelperObject):
    schema_name = "AnimationLegsConstraints::SlopeOffsetInfo"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationLegsConstraints_SlopeOffsetInfo
        return AnimationLegsConstraints_SlopeOffsetInfo(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationLegsConstraints_SlopeOffsetInfo.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationLegsConstraints_SlopeOffsetInfo
        return AnimationLegsConstraints_SlopeOffsetInfo(entlib.make_node(AnimationLegsConstraints_SlopeOffsetInfo.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MaxSlopeAngle(self):  # type: ()->Float
        return Float(self._node.at("MaxSlopeAngle"))
    @MaxSlopeAngle.setter
    def MaxSlopeAngle(self, val): self.MaxSlopeAngle.set(val)
    @property
    def RotationOffset(self):  # type: ()->Vector3
        return Vector3(self._node.at("RotationOffset"))
    @RotationOffset.setter
    def RotationOffset(self, val): self.RotationOffset.set(val)
    @property
    def TranslationOffset(self):  # type: ()->Vector3
        return Vector3(self._node.at("TranslationOffset"))
    @TranslationOffset.setter
    def TranslationOffset(self, val): self.TranslationOffset.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationLegsConstraintsGD(HelperObject):
    schema_name = "AnimationLegsConstraintsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationLegsConstraintsGD
        return AnimationLegsConstraintsGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationLegsConstraintsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationLegsConstraintsGD
        return AnimationLegsConstraintsGD(entlib.make_node(AnimationLegsConstraintsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AllowHeightMapCastFallback(self):  # type: ()->Bool
        return Bool(self._node.at("AllowHeightMapCastFallback"))
    @AllowHeightMapCastFallback.setter
    def AllowHeightMapCastFallback(self, val): self.AllowHeightMapCastFallback.set(val)
    @property
    def AscendingSlopeOffsetInfo(self):  # type: ()->AnimationLegsConstraints_SlopeOffsetInfo
        return AnimationLegsConstraints_SlopeOffsetInfo(self._node.at("AscendingSlopeOffsetInfo"))
    @property
    def BackLegsCompensateExtensionThreshold(self):  # type: ()->Float
        return Float(self._node.at("BackLegsCompensateExtensionThreshold"))
    @BackLegsCompensateExtensionThreshold.setter
    def BackLegsCompensateExtensionThreshold(self, val): self.BackLegsCompensateExtensionThreshold.set(val)
    @property
    def BackLegsHeightRangeForIKInfluence(self):  # type: ()->Vector2
        return Vector2(self._node.at("BackLegsHeightRangeForIKInfluence"))
    @BackLegsHeightRangeForIKInfluence.setter
    def BackLegsHeightRangeForIKInfluence(self, val): self.BackLegsHeightRangeForIKInfluence.set(val)
    @property
    def BoneBending(self):  # type: ()->Bool
        return Bool(self._node.at("BoneBending"))
    @BoneBending.setter
    def BoneBending(self, val): self.BoneBending.set(val)
    @property
    def BoneBendingAnticipation(self):  # type: ()->Float
        return Float(self._node.at("BoneBendingAnticipation"))
    @BoneBendingAnticipation.setter
    def BoneBendingAnticipation(self, val): self.BoneBendingAnticipation.set(val)
    @property
    def BoneBendingAnticipationBackward(self):  # type: ()->Float
        return Float(self._node.at("BoneBendingAnticipationBackward"))
    @BoneBendingAnticipationBackward.setter
    def BoneBendingAnticipationBackward(self, val): self.BoneBendingAnticipationBackward.set(val)
    @property
    def BoneBendingLocomotionInfluenceSpeed(self):  # type: ()->Float
        return Float(self._node.at("BoneBendingLocomotionInfluenceSpeed"))
    @BoneBendingLocomotionInfluenceSpeed.setter
    def BoneBendingLocomotionInfluenceSpeed(self, val): self.BoneBendingLocomotionInfluenceSpeed.set(val)
    @property
    def CastDeltaDistToTriggerSmooth(self):  # type: ()->Float
        return Float(self._node.at("CastDeltaDistToTriggerSmooth"))
    @CastDeltaDistToTriggerSmooth.setter
    def CastDeltaDistToTriggerSmooth(self, val): self.CastDeltaDistToTriggerSmooth.set(val)
    @property
    def DescendingSlopeOffsetInfo(self):  # type: ()->AnimationLegsConstraints_SlopeOffsetInfo
        return AnimationLegsConstraints_SlopeOffsetInfo(self._node.at("DescendingSlopeOffsetInfo"))
    @property
    def FeetInfluence(self):  # type: ()->Float
        return Float(self._node.at("FeetInfluence"))
    @FeetInfluence.setter
    def FeetInfluence(self, val): self.FeetInfluence.set(val)
    @property
    def FrontLegsCompensateExtensionThreshold(self):  # type: ()->Float
        return Float(self._node.at("FrontLegsCompensateExtensionThreshold"))
    @FrontLegsCompensateExtensionThreshold.setter
    def FrontLegsCompensateExtensionThreshold(self, val): self.FrontLegsCompensateExtensionThreshold.set(val)
    @property
    def FrontLegsHeightRangeForIKInfluence(self):  # type: ()->Vector2
        return Vector2(self._node.at("FrontLegsHeightRangeForIKInfluence"))
    @FrontLegsHeightRangeForIKInfluence.setter
    def FrontLegsHeightRangeForIKInfluence(self, val): self.FrontLegsHeightRangeForIKInfluence.set(val)
    @property
    def GlobalInfluence(self):  # type: ()->Float
        return Float(self._node.at("GlobalInfluence"))
    @GlobalInfluence.setter
    def GlobalInfluence(self, val): self.GlobalInfluence.set(val)
    @property
    def LegInfluence(self):  # type: ()->Float
        return Float(self._node.at("LegInfluence"))
    @LegInfluence.setter
    def LegInfluence(self, val): self.LegInfluence.set(val)
    @property
    def LegLock(self):  # type: ()->Bool
        return Bool(self._node.at("LegLock"))
    @LegLock.setter
    def LegLock(self, val): self.LegLock.set(val)
    @property
    def MaxHeightForFootInfluence(self):  # type: ()->Float
        return Float(self._node.at("MaxHeightForFootInfluence"))
    @MaxHeightForFootInfluence.setter
    def MaxHeightForFootInfluence(self, val): self.MaxHeightForFootInfluence.set(val)
    @property
    def ObstructionCastHitPosMarginOffsetFactor(self):  # type: ()->Float
        return Float(self._node.at("ObstructionCastHitPosMarginOffsetFactor"))
    @ObstructionCastHitPosMarginOffsetFactor.setter
    def ObstructionCastHitPosMarginOffsetFactor(self, val): self.ObstructionCastHitPosMarginOffsetFactor.set(val)
    @property
    def ObstructionCastOffsetFactor(self):  # type: ()->Float
        return Float(self._node.at("ObstructionCastOffsetFactor"))
    @ObstructionCastOffsetFactor.setter
    def ObstructionCastOffsetFactor(self, val): self.ObstructionCastOffsetFactor.set(val)
    @property
    def ObstructionCastSafeRadiusFactor(self):  # type: ()->Float
        return Float(self._node.at("ObstructionCastSafeRadiusFactor"))
    @ObstructionCastSafeRadiusFactor.setter
    def ObstructionCastSafeRadiusFactor(self, val): self.ObstructionCastSafeRadiusFactor.set(val)
    @property
    def SpeedFactorFromLockedRootDistance(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("SpeedFactorFromLockedRootDistance"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def UseObstructionCast(self):  # type: ()->Bool
        return Bool(self._node.at("UseObstructionCast"))
    @UseObstructionCast.setter
    def UseObstructionCast(self, val): self.UseObstructionCast.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationEventsGeneratorGD_TrackedBone(HelperObject):
    schema_name = "AnimationEventsGeneratorGD::TrackedBone"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationEventsGeneratorGD_TrackedBone
        return AnimationEventsGeneratorGD_TrackedBone(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationEventsGeneratorGD_TrackedBone.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationEventsGeneratorGD_TrackedBone
        return AnimationEventsGeneratorGD_TrackedBone(entlib.make_node(AnimationEventsGeneratorGD_TrackedBone.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def OffsetFrameCountStart(self):  # type: ()->Int
        return Int(self._node.at("OffsetFrameCountStart"))
    @OffsetFrameCountStart.setter
    def OffsetFrameCountStart(self, val): self.OffsetFrameCountStart.set(val)
    @property
    def OffsetFrameCountStop(self):  # type: ()->Int
        return Int(self._node.at("OffsetFrameCountStop"))
    @OffsetFrameCountStop.setter
    def OffsetFrameCountStop(self, val): self.OffsetFrameCountStop.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationEventsGeneratorGD(HelperObject):
    schema_name = "AnimationEventsGeneratorGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationEventsGeneratorGD
        return AnimationEventsGeneratorGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationEventsGeneratorGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationEventsGeneratorGD
        return AnimationEventsGeneratorGD(entlib.make_node(AnimationEventsGeneratorGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def TrackedBones(self):  # type: ()->Array[AnimationEventsGeneratorGD_TrackedBone]
        return (lambda n: Array(AnimationEventsGeneratorGD_TrackedBone, n))(self._node.at("TrackedBones"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class AnimTagTimelineTransitionEnum(Enum):
    beginning = "beginning"
    copy = "copy"
    reverse = "reverse"
    AnimTagTimelineTransition_COUNT = "AnimTagTimelineTransition_COUNT"


class AnimTagTimelineTransition(Primitive[AnimTagTimelineTransitionEnum]):  # Enum
    def __init__(self, node):
        super(AnimTagTimelineTransition, self).__init__(AnimTagTimelineTransitionEnum, node)
    schema_name = "AnimTagTimelineTransition"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> AnimTagTimelineTransition
        return AnimTagTimelineTransition(node)
    def set(self, val):  # type: (AnimTagTimelineTransitionEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node
class AnimTagEnum(Enum):
    none = "none"
    apex = "apex"
    forward = "forward"
    forwardright = "forwardright"
    right = "right"
    backwardright = "backwardright"
    backward = "backward"
    backwardleft = "backwardleft"
    left = "left"
    forwardleft = "forwardleft"
    regular = "regular"
    alignedregular = "alignedregular"
    goofy = "goofy"
    alignedgoofy = "alignedgoofy"
    top = "top"
    bottom = "bottom"
    up = "up"
    upforward = "upforward"
    upward = "upward"
    down = "down"
    downforward = "downforward"
    downward = "downward"
    in_ = "in"
    out = "out"
    horizontal = "horizontal"
    vertical = "vertical"
    count = "count"


class AnimTag(Primitive[AnimTagEnum]):  # Enum
    def __init__(self, node):
        super(AnimTag, self).__init__(AnimTagEnum, node)
    schema_name = "AnimTag"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> AnimTag
        return AnimTag(node)
    def set(self, val):  # type: (AnimTagEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class MoveCapacityData_AnimTagTransitionGroup(HelperObject):
    schema_name = "MoveCapacityData::AnimTagTransitionGroup"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveCapacityData_AnimTagTransitionGroup
        return MoveCapacityData_AnimTagTransitionGroup(entlib.load_node_file(sourcefile, entlib.get_schema(MoveCapacityData_AnimTagTransitionGroup.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveCapacityData_AnimTagTransitionGroup
        return MoveCapacityData_AnimTagTransitionGroup(entlib.make_node(MoveCapacityData_AnimTagTransitionGroup.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def animTags(self):  # type: ()->PrimArray[AnimTag]
        return (lambda n: PrimArray(AnimTag, n))(self._node.at("animTags"))
    @animTags.setter
    def animTags(self, val): self.animTags.set(val)
    @property
    def blendIn(self):  # type: ()->Float
        return Float(self._node.at("blendIn"))
    @blendIn.setter
    def blendIn(self, val): self.blendIn.set(val)
    pass


from EntityLibPy import Node

class MoveCapacityData_AnimTagTimelineTransitionItem(HelperObject):
    schema_name = "MoveCapacityData::AnimTagTimelineTransitionItem"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveCapacityData_AnimTagTimelineTransitionItem
        return MoveCapacityData_AnimTagTimelineTransitionItem(entlib.load_node_file(sourcefile, entlib.get_schema(MoveCapacityData_AnimTagTimelineTransitionItem.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveCapacityData_AnimTagTimelineTransitionItem
        return MoveCapacityData_AnimTagTimelineTransitionItem(entlib.make_node(MoveCapacityData_AnimTagTimelineTransitionItem.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def to(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("to"))
    @to.setter
    def to(self, val): self.to.set(val)
    @property
    def type(self):  # type: ()->AnimTagTimelineTransition
        return AnimTagTimelineTransition(self._node.at("type"))
    @type.setter
    def type(self, val): self.type.set(val)
    pass


from EntityLibPy import Node

class MoveCapacityData_AnimTagTimelineTransitionTable(HelperObject):
    schema_name = "MoveCapacityData::AnimTagTimelineTransitionTable"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveCapacityData_AnimTagTimelineTransitionTable
        return MoveCapacityData_AnimTagTimelineTransitionTable(entlib.load_node_file(sourcefile, entlib.get_schema(MoveCapacityData_AnimTagTimelineTransitionTable.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveCapacityData_AnimTagTimelineTransitionTable
        return MoveCapacityData_AnimTagTimelineTransitionTable(entlib.make_node(MoveCapacityData_AnimTagTimelineTransitionTable.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def from_(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("from"))
    @from_.setter
    def from_(self, val): self.from_.set(val)
    @property
    def transitions(self):  # type: ()->Array[MoveCapacityData_AnimTagTimelineTransitionItem]
        return (lambda n: Array(MoveCapacityData_AnimTagTimelineTransitionItem, n))(self._node.at("transitions"))
    pass


from EntityLibPy import Node

class MoveCapacityData(HelperObject):
    schema_name = "MoveCapacityData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MoveCapacityData
        return MoveCapacityData(entlib.load_node_file(sourcefile, entlib.get_schema(MoveCapacityData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MoveCapacityData
        return MoveCapacityData(entlib.make_node(MoveCapacityData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def airControlFactor(self):  # type: ()->Float
        return Float(self._node.at("airControlFactor"))
    @airControlFactor.setter
    def airControlFactor(self, val): self.airControlFactor.set(val)
    @property
    def allowClampSpeedBiggerThanLocomotionDuringBlend(self):  # type: ()->Bool
        return Bool(self._node.at("allowClampSpeedBiggerThanLocomotionDuringBlend"))
    @allowClampSpeedBiggerThanLocomotionDuringBlend.setter
    def allowClampSpeedBiggerThanLocomotionDuringBlend(self, val): self.allowClampSpeedBiggerThanLocomotionDuringBlend.set(val)
    @property
    def allowKeepAnimationPlayRatioUnclamped(self):  # type: ()->Bool
        return Bool(self._node.at("allowKeepAnimationPlayRatioUnclamped"))
    @allowKeepAnimationPlayRatioUnclamped.setter
    def allowKeepAnimationPlayRatioUnclamped(self, val): self.allowKeepAnimationPlayRatioUnclamped.set(val)
    @property
    def angularSpeedMaxFlyDumpFactor(self):  # type: ()->Float
        return Float(self._node.at("angularSpeedMaxFlyDumpFactor"))
    @angularSpeedMaxFlyDumpFactor.setter
    def angularSpeedMaxFlyDumpFactor(self, val): self.angularSpeedMaxFlyDumpFactor.set(val)
    @property
    def angularSpeedMaxGroundDumpFactor(self):  # type: ()->Float
        return Float(self._node.at("angularSpeedMaxGroundDumpFactor"))
    @angularSpeedMaxGroundDumpFactor.setter
    def angularSpeedMaxGroundDumpFactor(self, val): self.angularSpeedMaxGroundDumpFactor.set(val)
    @property
    def angularSpeedMaxRiderDumpFactor(self):  # type: ()->Float
        return Float(self._node.at("angularSpeedMaxRiderDumpFactor"))
    @angularSpeedMaxRiderDumpFactor.setter
    def angularSpeedMaxRiderDumpFactor(self, val): self.angularSpeedMaxRiderDumpFactor.set(val)
    @property
    def angularSpeedMaxWaterDumpFactor(self):  # type: ()->Float
        return Float(self._node.at("angularSpeedMaxWaterDumpFactor"))
    @angularSpeedMaxWaterDumpFactor.setter
    def angularSpeedMaxWaterDumpFactor(self, val): self.angularSpeedMaxWaterDumpFactor.set(val)
    @property
    def animTagTimelineTransitionTable(self):  # type: ()->MoveCapacityData_AnimTagTimelineTransitionTable
        return MoveCapacityData_AnimTagTimelineTransitionTable(self._node.at("animTagTimelineTransitionTable"))
    @property
    def brakeDeceleration(self):  # type: ()->Float
        return Float(self._node.at("brakeDeceleration"))
    @brakeDeceleration.setter
    def brakeDeceleration(self, val): self.brakeDeceleration.set(val)
    @property
    def capsuleBigRadius(self):  # type: ()->Float
        return Float(self._node.at("capsuleBigRadius"))
    @capsuleBigRadius.setter
    def capsuleBigRadius(self, val): self.capsuleBigRadius.set(val)
    @property
    def capsuleEnormousRadius(self):  # type: ()->Float
        return Float(self._node.at("capsuleEnormousRadius"))
    @capsuleEnormousRadius.setter
    def capsuleEnormousRadius(self, val): self.capsuleEnormousRadius.set(val)
    @property
    def capsuleMediumRadius(self):  # type: ()->Float
        return Float(self._node.at("capsuleMediumRadius"))
    @capsuleMediumRadius.setter
    def capsuleMediumRadius(self, val): self.capsuleMediumRadius.set(val)
    @property
    def capsuleSmallRadius(self):  # type: ()->Float
        return Float(self._node.at("capsuleSmallRadius"))
    @capsuleSmallRadius.setter
    def capsuleSmallRadius(self, val): self.capsuleSmallRadius.set(val)
    @property
    def capsuleTinyRadius(self):  # type: ()->Float
        return Float(self._node.at("capsuleTinyRadius"))
    @capsuleTinyRadius.setter
    def capsuleTinyRadius(self, val): self.capsuleTinyRadius.set(val)
    @property
    def constraintDetectionAnticipation(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("constraintDetectionAnticipation"))
    @property
    def constraintDetectionOffset(self):  # type: ()->Vector3
        return Vector3(self._node.at("constraintDetectionOffset"))
    @constraintDetectionOffset.setter
    def constraintDetectionOffset(self, val): self.constraintDetectionOffset.set(val)
    @property
    def constraintDetectionRadius(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("constraintDetectionRadius"))
    @property
    def coyoteJumpMaxTime(self):  # type: ()->Float
        return Float(self._node.at("coyoteJumpMaxTime"))
    @coyoteJumpMaxTime.setter
    def coyoteJumpMaxTime(self, val): self.coyoteJumpMaxTime.set(val)
    @property
    def crashPreventionSafeguardFactor(self):  # type: ()->Float
        return Float(self._node.at("crashPreventionSafeguardFactor"))
    @crashPreventionSafeguardFactor.setter
    def crashPreventionSafeguardFactor(self, val): self.crashPreventionSafeguardFactor.set(val)
    @property
    def defaultWorldUpSpeedFactor(self):  # type: ()->Float
        return Float(self._node.at("defaultWorldUpSpeedFactor"))
    @defaultWorldUpSpeedFactor.setter
    def defaultWorldUpSpeedFactor(self, val): self.defaultWorldUpSpeedFactor.set(val)
    @property
    def doubleJump(self):  # type: ()->Bool
        return Bool(self._node.at("doubleJump"))
    @doubleJump.setter
    def doubleJump(self, val): self.doubleJump.set(val)
    @property
    def dropPlaneLegLenFactor(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("dropPlaneLegLenFactor"))
    @property
    def dropSyncTrajectoryAndVisual(self):  # type: ()->Bool
        return Bool(self._node.at("dropSyncTrajectoryAndVisual"))
    @dropSyncTrajectoryAndVisual.setter
    def dropSyncTrajectoryAndVisual(self, val): self.dropSyncTrajectoryAndVisual.set(val)
    @property
    def ellipseCoeff(self):  # type: ()->Float
        return Float(self._node.at("ellipseCoeff"))
    @ellipseCoeff.setter
    def ellipseCoeff(self, val): self.ellipseCoeff.set(val)
    @property
    def extirpateObstacleAcceleration(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("extirpateObstacleAcceleration"))
    @property
    def extirpateObstacleDuration(self):  # type: ()->Float
        return Float(self._node.at("extirpateObstacleDuration"))
    @extirpateObstacleDuration.setter
    def extirpateObstacleDuration(self, val): self.extirpateObstacleDuration.set(val)
    @property
    def flyCentrifugalCoeff(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("flyCentrifugalCoeff"))
    @property
    def flyCentrifugalRate(self):  # type: ()->Float
        return Float(self._node.at("flyCentrifugalRate"))
    @flyCentrifugalRate.setter
    def flyCentrifugalRate(self, val): self.flyCentrifugalRate.set(val)
    @property
    def jumpAnalogScale(self):  # type: ()->Float
        return Float(self._node.at("jumpAnalogScale"))
    @jumpAnalogScale.setter
    def jumpAnalogScale(self, val): self.jumpAnalogScale.set(val)
    @property
    def jumpOntoPosition(self):  # type: ()->Bool
        return Bool(self._node.at("jumpOntoPosition"))
    @jumpOntoPosition.setter
    def jumpOntoPosition(self, val): self.jumpOntoPosition.set(val)
    @property
    def ledgeApproachSpeedMaxZ(self):  # type: ()->Float
        return Float(self._node.at("ledgeApproachSpeedMaxZ"))
    @ledgeApproachSpeedMaxZ.setter
    def ledgeApproachSpeedMaxZ(self, val): self.ledgeApproachSpeedMaxZ.set(val)
    @property
    def ledgeDepthRadiusCoeff(self):  # type: ()->Float
        return Float(self._node.at("ledgeDepthRadiusCoeff"))
    @ledgeDepthRadiusCoeff.setter
    def ledgeDepthRadiusCoeff(self, val): self.ledgeDepthRadiusCoeff.set(val)
    @property
    def ledgeMaxDistance(self):  # type: ()->Float
        return Float(self._node.at("ledgeMaxDistance"))
    @ledgeMaxDistance.setter
    def ledgeMaxDistance(self, val): self.ledgeMaxDistance.set(val)
    @property
    def ledgeMaxHeightEpsilon(self):  # type: ()->Float
        return Float(self._node.at("ledgeMaxHeightEpsilon"))
    @ledgeMaxHeightEpsilon.setter
    def ledgeMaxHeightEpsilon(self, val): self.ledgeMaxHeightEpsilon.set(val)
    @property
    def ledgeMinDepthEpsilon(self):  # type: ()->Float
        return Float(self._node.at("ledgeMinDepthEpsilon"))
    @ledgeMinDepthEpsilon.setter
    def ledgeMinDepthEpsilon(self, val): self.ledgeMinDepthEpsilon.set(val)
    @property
    def ledgeMinWidthEpsilon(self):  # type: ()->Float
        return Float(self._node.at("ledgeMinWidthEpsilon"))
    @ledgeMinWidthEpsilon.setter
    def ledgeMinWidthEpsilon(self, val): self.ledgeMinWidthEpsilon.set(val)
    @property
    def legLength(self):  # type: ()->Float
        return Float(self._node.at("legLength"))
    @legLength.setter
    def legLength(self, val): self.legLength.set(val)
    @property
    def mass(self):  # type: ()->Float
        return Float(self._node.at("mass"))
    @mass.setter
    def mass(self, val): self.mass.set(val)
    @property
    def maxAverageSpeedDuringJumpOnto(self):  # type: ()->Float
        return Float(self._node.at("maxAverageSpeedDuringJumpOnto"))
    @maxAverageSpeedDuringJumpOnto.setter
    def maxAverageSpeedDuringJumpOnto(self, val): self.maxAverageSpeedDuringJumpOnto.set(val)
    @property
    def maxFlapTime(self):  # type: ()->Float
        return Float(self._node.at("maxFlapTime"))
    @maxFlapTime.setter
    def maxFlapTime(self, val): self.maxFlapTime.set(val)
    @property
    def maxTimeBetweenFlaps(self):  # type: ()->Float
        return Float(self._node.at("maxTimeBetweenFlaps"))
    @maxTimeBetweenFlaps.setter
    def maxTimeBetweenFlaps(self, val): self.maxTimeBetweenFlaps.set(val)
    @property
    def minFlapTime(self):  # type: ()->Float
        return Float(self._node.at("minFlapTime"))
    @minFlapTime.setter
    def minFlapTime(self, val): self.minFlapTime.set(val)
    @property
    def minSpeedToSteerPitch(self):  # type: ()->Float
        return Float(self._node.at("minSpeedToSteerPitch"))
    @minSpeedToSteerPitch.setter
    def minSpeedToSteerPitch(self, val): self.minSpeedToSteerPitch.set(val)
    @property
    def minTimeBetweenFlaps(self):  # type: ()->Float
        return Float(self._node.at("minTimeBetweenFlaps"))
    @minTimeBetweenFlaps.setter
    def minTimeBetweenFlaps(self, val): self.minTimeBetweenFlaps.set(val)
    @property
    def minimumDropTimeBeforeAClimbEdge(self):  # type: ()->Float
        return Float(self._node.at("minimumDropTimeBeforeAClimbEdge"))
    @minimumDropTimeBeforeAClimbEdge.setter
    def minimumDropTimeBeforeAClimbEdge(self, val): self.minimumDropTimeBeforeAClimbEdge.set(val)
    @property
    def orientationSpeedFly(self):  # type: ()->MoveCapacityData_OrientationSpeed
        return MoveCapacityData_OrientationSpeed(self._node.at("orientationSpeedFly"))
    @property
    def orientationSpeedGround(self):  # type: ()->MoveCapacityData_OrientationSpeed
        return MoveCapacityData_OrientationSpeed(self._node.at("orientationSpeedGround"))
    @property
    def orientationSpeedWater(self):  # type: ()->MoveCapacityData_OrientationSpeed
        return MoveCapacityData_OrientationSpeed(self._node.at("orientationSpeedWater"))
    @property
    def patinateSpeedMinEnter(self):  # type: ()->Float
        return Float(self._node.at("patinateSpeedMinEnter"))
    @patinateSpeedMinEnter.setter
    def patinateSpeedMinEnter(self, val): self.patinateSpeedMinEnter.set(val)
    @property
    def patinateSpeedMinExit(self):  # type: ()->Float
        return Float(self._node.at("patinateSpeedMinExit"))
    @patinateSpeedMinExit.setter
    def patinateSpeedMinExit(self, val): self.patinateSpeedMinExit.set(val)
    @property
    def reachSpeedAcceleration(self):  # type: ()->Float
        return Float(self._node.at("reachSpeedAcceleration"))
    @reachSpeedAcceleration.setter
    def reachSpeedAcceleration(self, val): self.reachSpeedAcceleration.set(val)
    @property
    def reachSpeedByLocomotion(self):  # type: ()->Array[MoveCapacityData_ReachSpeed]
        return (lambda n: Array(MoveCapacityData_ReachSpeed, n))(self._node.at("reachSpeedByLocomotion"))
    @property
    def reachSpeedDeceleration(self):  # type: ()->Float
        return Float(self._node.at("reachSpeedDeceleration"))
    @reachSpeedDeceleration.setter
    def reachSpeedDeceleration(self, val): self.reachSpeedDeceleration.set(val)
    @property
    def reactToOtherCharacterBodyCollision(self):  # type: ()->Bool
        return Bool(self._node.at("reactToOtherCharacterBodyCollision"))
    @reactToOtherCharacterBodyCollision.setter
    def reactToOtherCharacterBodyCollision(self, val): self.reactToOtherCharacterBodyCollision.set(val)
    @property
    def sphereCastRadiusRatio(self):  # type: ()->Float
        return Float(self._node.at("sphereCastRadiusRatio"))
    @sphereCastRadiusRatio.setter
    def sphereCastRadiusRatio(self, val): self.sphereCastRadiusRatio.set(val)
    @property
    def sphereOverrideRadius(self):  # type: ()->Float
        return Float(self._node.at("sphereOverrideRadius"))
    @sphereOverrideRadius.setter
    def sphereOverrideRadius(self, val): self.sphereOverrideRadius.set(val)
    @property
    def strafeBlendIn(self):  # type: ()->Float
        return Float(self._node.at("strafeBlendIn"))
    @strafeBlendIn.setter
    def strafeBlendIn(self, val): self.strafeBlendIn.set(val)
    @property
    def strafeBlendWeightMinToChangeAnim(self):  # type: ()->Float
        return Float(self._node.at("strafeBlendWeightMinToChangeAnim"))
    @strafeBlendWeightMinToChangeAnim.setter
    def strafeBlendWeightMinToChangeAnim(self, val): self.strafeBlendWeightMinToChangeAnim.set(val)
    @property
    def strafeOrientationRateFactor(self):  # type: ()->Float
        return Float(self._node.at("strafeOrientationRateFactor"))
    @strafeOrientationRateFactor.setter
    def strafeOrientationRateFactor(self, val): self.strafeOrientationRateFactor.set(val)
    @property
    def strafeSpeedModeMax(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("strafeSpeedModeMax"))
    @strafeSpeedModeMax.setter
    def strafeSpeedModeMax(self, val): self.strafeSpeedModeMax.set(val)
    @property
    def strafeStopOrientationRateFactor(self):  # type: ()->Float
        return Float(self._node.at("strafeStopOrientationRateFactor"))
    @strafeStopOrientationRateFactor.setter
    def strafeStopOrientationRateFactor(self, val): self.strafeStopOrientationRateFactor.set(val)
    @property
    def strafeTurnAngleMin(self):  # type: ()->Float
        return Float(self._node.at("strafeTurnAngleMin"))
    @strafeTurnAngleMin.setter
    def strafeTurnAngleMin(self, val): self.strafeTurnAngleMin.set(val)
    @property
    def trajectoryRateFactorDuringLateralLand(self):  # type: ()->Float
        return Float(self._node.at("trajectoryRateFactorDuringLateralLand"))
    @trajectoryRateFactorDuringLateralLand.setter
    def trajectoryRateFactorDuringLateralLand(self, val): self.trajectoryRateFactorDuringLateralLand.set(val)
    @property
    def turnAroundInputDirectionAngleDeltaMin(self):  # type: ()->Float
        return Float(self._node.at("turnAroundInputDirectionAngleDeltaMin"))
    @turnAroundInputDirectionAngleDeltaMin.setter
    def turnAroundInputDirectionAngleDeltaMin(self, val): self.turnAroundInputDirectionAngleDeltaMin.set(val)
    pass


from EntityLibPy import Node

class CharacterControllerGD(HelperObject):
    schema_name = "CharacterControllerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CharacterControllerGD
        return CharacterControllerGD(entlib.load_node_file(sourcefile, entlib.get_schema(CharacterControllerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CharacterControllerGD
        return CharacterControllerGD(entlib.make_node(CharacterControllerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AllowHeightMapFallback(self):  # type: ()->Bool
        return Bool(self._node.at("AllowHeightMapFallback"))
    @AllowHeightMapFallback.setter
    def AllowHeightMapFallback(self, val): self.AllowHeightMapFallback.set(val)
    @property
    def ClamberData(self):  # type: ()->CharacterControllerClamberData
        return CharacterControllerClamberData(self._node.at("ClamberData"))
    @property
    def FallData(self):  # type: ()->CharacterControllerFallData
        return CharacterControllerFallData(self._node.at("FallData"))
    @property
    def GroundNormalData(self):  # type: ()->CharacterControllerGroundNormalData
        return CharacterControllerGroundNormalData(self._node.at("GroundNormalData"))
    @property
    def HeadCollisionData(self):  # type: ()->HeadCollisionBehaviorData
        return HeadCollisionBehaviorData(self._node.at("HeadCollisionData"))
    @property
    def ImmersedData(self):  # type: ()->ImmersedBehaviorData
        return ImmersedBehaviorData(self._node.at("ImmersedData"))
    @property
    def InputCollisionData(self):  # type: ()->InputCollisionBehaviorData
        return InputCollisionBehaviorData(self._node.at("InputCollisionData"))
    @property
    def MeshNavigationData(self):  # type: ()->MeshNavigationBehaviorData
        return MeshNavigationBehaviorData(self._node.at("MeshNavigationData"))
    @property
    def PredictionData(self):  # type: ()->PredictionBehaviorData
        return PredictionBehaviorData(self._node.at("PredictionData"))
    @property
    def RotationSmooth(self):  # type: ()->Vector3
        return Vector3(self._node.at("RotationSmooth"))
    @RotationSmooth.setter
    def RotationSmooth(self, val): self.RotationSmooth.set(val)
    @property
    def SlideData(self):  # type: ()->CharacterControllerSlideData
        return CharacterControllerSlideData(self._node.at("SlideData"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def moveCapacityData(self):  # type: ()->MoveCapacityData
        return MoveCapacityData(self._node.at("moveCapacityData"))
    pass


from EntityLibPy import Node

class DirectionSync(HelperObject):
    schema_name = "DirectionSync"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DirectionSync
        return DirectionSync(entlib.load_node_file(sourcefile, entlib.get_schema(DirectionSync.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DirectionSync
        return DirectionSync(entlib.make_node(DirectionSync.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def isOpposite(self):  # type: ()->Bool
        return Bool(self._node.at("isOpposite"))
    @isOpposite.setter
    def isOpposite(self, val): self.isOpposite.set(val)
    @property
    def mirrorKey(self):  # type: ()->Bool
        return Bool(self._node.at("mirrorKey"))
    @mirrorKey.setter
    def mirrorKey(self, val): self.mirrorKey.set(val)
    @property
    def syncCoeff(self):  # type: ()->Float
        return Float(self._node.at("syncCoeff"))
    @syncCoeff.setter
    def syncCoeff(self, val): self.syncCoeff.set(val)
    @property
    def tag1(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("tag1"))
    @tag1.setter
    def tag1(self, val): self.tag1.set(val)
    @property
    def tag2(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("tag2"))
    @tag2.setter
    def tag2(self, val): self.tag2.set(val)
    pass


from EntityLibPy import Node

class DirectionSyncData(HelperObject):
    schema_name = "DirectionSyncData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->DirectionSyncData
        return DirectionSyncData(entlib.load_node_file(sourcefile, entlib.get_schema(DirectionSyncData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->DirectionSyncData
        return DirectionSyncData(entlib.make_node(DirectionSyncData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def datas(self):  # type: ()->Array[DirectionSync]
        return (lambda n: Array(DirectionSync, n))(self._node.at("datas"))
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    pass


from EntityLibPy import Node

class AnimationManager(HelperObject):
    schema_name = "AnimationManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationManager
        return AnimationManager(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationManager
        return AnimationManager(entlib.make_node(AnimationManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AnimationVariantDelayMax(self):  # type: ()->Float
        return Float(self._node.at("AnimationVariantDelayMax"))
    @AnimationVariantDelayMax.setter
    def AnimationVariantDelayMax(self, val): self.AnimationVariantDelayMax.set(val)
    @property
    def AnimationVariantDelayMin(self):  # type: ()->Float
        return Float(self._node.at("AnimationVariantDelayMin"))
    @AnimationVariantDelayMin.setter
    def AnimationVariantDelayMin(self, val): self.AnimationVariantDelayMin.set(val)
    @property
    def LookAtSlopeCoeff(self):  # type: ()->Float
        return Float(self._node.at("LookAtSlopeCoeff"))
    @LookAtSlopeCoeff.setter
    def LookAtSlopeCoeff(self, val): self.LookAtSlopeCoeff.set(val)
    @property
    def PlayRatioMax(self):  # type: ()->Float
        return Float(self._node.at("PlayRatioMax"))
    @PlayRatioMax.setter
    def PlayRatioMax(self, val): self.PlayRatioMax.set(val)
    @property
    def PlayRatioMin(self):  # type: ()->Float
        return Float(self._node.at("PlayRatioMin"))
    @PlayRatioMin.setter
    def PlayRatioMin(self, val): self.PlayRatioMin.set(val)
    @property
    def RejectedMetadataStatus(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("RejectedMetadataStatus"))
    @RejectedMetadataStatus.setter
    def RejectedMetadataStatus(self, val): self.RejectedMetadataStatus.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def SyncDatas(self):  # type: ()->Array[DirectionSyncData]
        return (lambda n: Array(DirectionSyncData, n))(self._node.at("SyncDatas"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def canDetachFromGroundAction(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("canDetachFromGroundAction"))
    @canDetachFromGroundAction.setter
    def canDetachFromGroundAction(self, val): self.canDetachFromGroundAction.set(val)
    pass


from EntityLibPy import Node

class AnimationModelComponentInput_AnimTag(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class AnimMirroringSpecData(HelperObject):
    schema_name = "AnimMirroringSpecData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimMirroringSpecData
        return AnimMirroringSpecData(entlib.load_node_file(sourcefile, entlib.get_schema(AnimMirroringSpecData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimMirroringSpecData
        return AnimMirroringSpecData(entlib.make_node(AnimMirroringSpecData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def name(self):  # type: ()->String
        return String(self._node.at("name"))
    @name.setter
    def name(self, val): self.name.set(val)
    @property
    def name2(self):  # type: ()->String
        return String(self._node.at("name2"))
    @name2.setter
    def name2(self, val): self.name2.set(val)
    @property
    def spec(self):  # type: ()->String
        return String(self._node.at("spec"))
    @spec.setter
    def spec(self, val): self.spec.set(val)
    pass


from EntityLibPy import Node

class AnimMirroringData(HelperObject):
    schema_name = "AnimMirroringData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimMirroringData
        return AnimMirroringData(entlib.load_node_file(sourcefile, entlib.get_schema(AnimMirroringData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimMirroringData
        return AnimMirroringData(entlib.make_node(AnimMirroringData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def specs(self):  # type: ()->Array[AnimMirroringSpecData]
        return (lambda n: Array(AnimMirroringSpecData, n))(self._node.at("specs"))
    pass


from EntityLibPy import Node

class AnimationControllerGD(HelperObject):
    schema_name = "AnimationControllerGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationControllerGD
        return AnimationControllerGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationControllerGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationControllerGD
        return AnimationControllerGD(entlib.make_node(AnimationControllerGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EDITOR_skeleton(self):  # type: ()->String
        return String(self._node.at("EDITOR_skeleton"))
    @EDITOR_skeleton.setter
    def EDITOR_skeleton(self, val): self.EDITOR_skeleton.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def animDatabase(self):  # type: ()->String
        return String(self._node.at("animDatabase"))
    @animDatabase.setter
    def animDatabase(self, val): self.animDatabase.set(val)
    @property
    def mirroringData(self):  # type: ()->AnimMirroringData
        return AnimMirroringData(self._node.at("mirroringData"))
    @property
    def romLookAtInfluence(self):  # type: ()->Float
        return Float(self._node.at("romLookAtInfluence"))
    @romLookAtInfluence.setter
    def romLookAtInfluence(self, val): self.romLookAtInfluence.set(val)
    @property
    def skeleton(self):  # type: ()->String
        return String(self._node.at("skeleton"))
    @skeleton.setter
    def skeleton(self, val): self.skeleton.set(val)
    @property
    def syncDataName(self):  # type: ()->String
        return String(self._node.at("syncDataName"))
    @syncDataName.setter
    def syncDataName(self, val): self.syncDataName.set(val)
    pass


from EntityLibPy import Node
class AnimAdditionalTagEnum(Enum):
    none = "none"
    small = "small"
    light = "light"
    medium = "medium"
    big = "big"
    enormous = "enormous"
    menace = "menace"
    variant1 = "variant1"
    variant2 = "variant2"
    variant3 = "variant3"
    variant4 = "variant4"
    variant5 = "variant5"
    variant6 = "variant6"
    variant7 = "variant7"
    variant8 = "variant8"
    variant9 = "variant9"
    variant10 = "variant10"
    variant11 = "variant11"
    variant12 = "variant12"
    variant13 = "variant13"
    variant14 = "variant14"
    variant15 = "variant15"
    variant16 = "variant16"
    variant17 = "variant17"
    variant18 = "variant18"
    variant19 = "variant19"
    variant20 = "variant20"
    ejected = "ejected"
    ejectedfar = "ejectedfar"
    plunge = "plunge"
    lateralplunge = "lateralplunge"
    aerialplunge = "aerialplunge"
    AnimAdditionalTag_COUNT = "AnimAdditionalTag_COUNT"


class AnimAdditionalTag(Primitive[AnimAdditionalTagEnum]):  # Enum
    def __init__(self, node):
        super(AnimAdditionalTag, self).__init__(AnimAdditionalTagEnum, node)
    schema_name = "AnimAdditionalTag"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> AnimAdditionalTag
        return AnimAdditionalTag(node)
    def set(self, val):  # type: (AnimAdditionalTagEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class AnalyticsManager_MongoDBConnection(HelperObject):
    schema_name = "AnalyticsManager::MongoDBConnection"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnalyticsManager_MongoDBConnection
        return AnalyticsManager_MongoDBConnection(entlib.load_node_file(sourcefile, entlib.get_schema(AnalyticsManager_MongoDBConnection.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnalyticsManager_MongoDBConnection
        return AnalyticsManager_MongoDBConnection(entlib.make_node(AnalyticsManager_MongoDBConnection.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def database(self):  # type: ()->String
        return String(self._node.at("database"))
    @database.setter
    def database(self, val): self.database.set(val)
    @property
    def uri(self):  # type: ()->String
        return String(self._node.at("uri"))
    @uri.setter
    def uri(self, val): self.uri.set(val)
    pass


from EntityLibPy import Node

class AnalyticsManager(HelperObject):
    schema_name = "AnalyticsManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnalyticsManager
        return AnalyticsManager(entlib.load_node_file(sourcefile, entlib.get_schema(AnalyticsManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnalyticsManager
        return AnalyticsManager(entlib.make_node(AnalyticsManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def EnableEventLogger(self):  # type: ()->Bool
        return Bool(self._node.at("EnableEventLogger"))
    @EnableEventLogger.setter
    def EnableEventLogger(self, val): self.EnableEventLogger.set(val)
    @property
    def MongoDBConnection(self):  # type: ()->AnalyticsManager_MongoDBConnection
        return AnalyticsManager_MongoDBConnection(self._node.at("MongoDBConnection"))
    @property
    def Plugins(self):  # type: ()->Array[ResponsiblePointer_AnalyticsObserverInterface_]
        return (lambda n: Array(ResponsiblePointer_AnalyticsObserverInterface_, n))(self._node.at("Plugins"))
    @property
    def StartPaused(self):  # type: ()->Bool
        return Bool(self._node.at("StartPaused"))
    @StartPaused.setter
    def StartPaused(self, val): self.StartPaused.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AdditionnalTag(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->AnimAdditionalTag
        return AnimAdditionalTag(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node
ActorStates = (lambda n: UnionSet(ResponsiblePointer_ActorState_, n))
from EntityLibPy import Node

class Object(HelperObject):
    schema_name = "Object"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Object
        return Object(entlib.load_node_file(sourcefile, entlib.get_schema(Object.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Object
        return Object(entlib.make_node(Object.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActorStates(self):  # type: ()->ActorStates
        return ActorStates(self._node.at("ActorStates"))
    @property
    def Color(self):  # type: ()->Color
        return Color(self._node.at("Color"))
    @Color.setter
    def Color(self, val): self.Color.set(val)
    @property
    def Components(self):  # type: ()->Object_Components
        return Object_Components(self._node.at("Components"))
    @property
    def InstanceOf(self):  # type: ()->String
        return String(self._node.at("InstanceOf"))
    @InstanceOf.setter
    def InstanceOf(self, val): self.InstanceOf.set(val)
    @property
    def MaxActivationLevel(self):  # type: ()->Object_MaxActivationLevel
        return Object_MaxActivationLevel(self._node.at("MaxActivationLevel"))
    @MaxActivationLevel.setter
    def MaxActivationLevel(self, val): self.MaxActivationLevel.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Thumbnail(self):  # type: ()->String
        return String(self._node.at("Thumbnail"))
    @Thumbnail.setter
    def Thumbnail(self, val): self.Thumbnail.set(val)
    @property
    def __removed__(self):  # type: ()->Bool
        return Bool(self._node.at("__removed__"))
    @__removed__.setter
    def __removed__(self, val): self.__removed__.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class UnitTestComponent(HelperObject):
    schema_name = "UnitTestComponent"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->UnitTestComponent
        return UnitTestComponent(entlib.load_node_file(sourcefile, entlib.get_schema(UnitTestComponent.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->UnitTestComponent
        return UnitTestComponent(entlib.make_node(UnitTestComponent.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Entity(self):  # type: ()->Object
        return Object(self._node.at("Entity"))
    @property
    def EnumSet(self):  # type: ()->PrimitiveSet[ReviveSideEnum]
        return (lambda n: PrimitiveSet(ReviveSideEnum, n))(self._node.at("EnumSet"))
    @property
    def Position(self):  # type: ()->Position
        return Position(self._node.at("Position"))
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Entity(HelperObject):
    schema_name = "Entity"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Entity
        return Entity(entlib.load_node_file(sourcefile, entlib.get_schema(Entity.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Entity
        return Entity(entlib.make_node(Entity.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActorStates(self):  # type: ()->ActorStates
        return ActorStates(self._node.at("ActorStates"))
    @property
    def Color(self):  # type: ()->Color
        return Color(self._node.at("Color"))
    @Color.setter
    def Color(self, val): self.Color.set(val)
    @property
    def Components(self):  # type: ()->Components
        return Components(self._node.at("Components"))
    @property
    def InstanceOf(self):  # type: ()->String
        return String(self._node.at("InstanceOf"))
    @InstanceOf.setter
    def InstanceOf(self, val): self.InstanceOf.set(val)
    @property
    def MaxActivationLevel(self):  # type: ()->MaxActivationLevel
        return MaxActivationLevel(self._node.at("MaxActivationLevel"))
    @MaxActivationLevel.setter
    def MaxActivationLevel(self, val): self.MaxActivationLevel.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Thumbnail(self):  # type: ()->String
        return String(self._node.at("Thumbnail"))
    @Thumbnail.setter
    def Thumbnail(self, val): self.Thumbnail.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class SubScene(HelperObject):
    schema_name = "SubScene"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SubScene
        return SubScene(entlib.load_node_file(sourcefile, entlib.get_schema(SubScene.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SubScene
        return SubScene(entlib.make_node(SubScene.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Embedded(self):  # type: ()->ObjectSet[Entity]
        return (lambda n: ObjectSet(Entity, n))(self._node.at("Embedded"))
    @property
    def File(self):  # type: ()->String
        return String(self._node.at("File"))
    @File.setter
    def File(self, val): self.File.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def isEmbedded(self):  # type: ()->Bool
        return Bool(self._node.at("isEmbedded"))
    @isEmbedded.setter
    def isEmbedded(self, val): self.isEmbedded.set(val)
    pass


from EntityLibPy import Node

class Scene(HelperObject):
    schema_name = "Scene"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Scene
        return Scene(entlib.load_node_file(sourcefile, entlib.get_schema(Scene.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Scene
        return Scene(entlib.make_node(Scene.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Objects(self):  # type: ()->ObjectSet[Entity]
        return (lambda n: ObjectSet(Entity, n))(self._node.at("Objects"))
    @property
    def Version(self):  # type: ()->Int
        return Int(self._node.at("Version"))
    @Version.setter
    def Version(self, val): self.Version.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateTeleport_Inputs(HelperObject):
    schema_name = "ActorStateTeleport::Inputs"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateTeleport_Inputs
        return ActorStateTeleport_Inputs(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateTeleport_Inputs.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateTeleport_Inputs
        return ActorStateTeleport_Inputs(entlib.make_node(ActorStateTeleport_Inputs.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Orientation(self):  # type: ()->Orientation
        return Orientation(self._node.at("Orientation"))
    @property
    def Position(self):  # type: ()->Position
        return Position(self._node.at("Position"))
    @property
    def ResetCamera(self):  # type: ()->Bool
        return Bool(self._node.at("ResetCamera"))
    @ResetCamera.setter
    def ResetCamera(self, val): self.ResetCamera.set(val)
    @property
    def TouchGround(self):  # type: ()->Bool
        return Bool(self._node.at("TouchGround"))
    @TouchGround.setter
    def TouchGround(self, val): self.TouchGround.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateTeleportWhileMovingInputs(HelperObject):
    schema_name = "ActorStateTeleportWhileMovingInputs"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateTeleportWhileMovingInputs
        return ActorStateTeleportWhileMovingInputs(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateTeleportWhileMovingInputs.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateTeleportWhileMovingInputs
        return ActorStateTeleportWhileMovingInputs(entlib.make_node(ActorStateTeleportWhileMovingInputs.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def aerialMount(self):  # type: ()->Bool
        return Bool(self._node.at("aerialMount"))
    @aerialMount.setter
    def aerialMount(self, val): self.aerialMount.set(val)
    @property
    def direction(self):  # type: ()->Vector3
        return Vector3(self._node.at("direction"))
    @direction.setter
    def direction(self, val): self.direction.set(val)
    @property
    def orientation(self):  # type: ()->Quat
        return Quat(self._node.at("orientation"))
    @orientation.setter
    def orientation(self, val): self.orientation.set(val)
    @property
    def position(self):  # type: ()->Position
        return Position(self._node.at("position"))
    @property
    def speedRequired(self):  # type: ()->Float
        return Float(self._node.at("speedRequired"))
    @speedRequired.setter
    def speedRequired(self, val): self.speedRequired.set(val)
    pass


from EntityLibPy import Node

class ActorStateFlockingChangingParams_Params(HelperObject):
    schema_name = "ActorStateFlockingChangingParams::Params"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateFlockingChangingParams_Params
        return ActorStateFlockingChangingParams_Params(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateFlockingChangingParams_Params.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateFlockingChangingParams_Params
        return ActorStateFlockingChangingParams_Params(entlib.make_node(ActorStateFlockingChangingParams_Params.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ApplyAfterCurrent(self):  # type: ()->Bool
        return Bool(self._node.at("ApplyAfterCurrent"))
    @ApplyAfterCurrent.setter
    def ApplyAfterCurrent(self, val): self.ApplyAfterCurrent.set(val)
    @property
    def ApplyOnBud(self):  # type: ()->Bool
        return Bool(self._node.at("ApplyOnBud"))
    @ApplyOnBud.setter
    def ApplyOnBud(self, val): self.ApplyOnBud.set(val)
    @property
    def DelayRandom(self):  # type: ()->Float
        return Float(self._node.at("DelayRandom"))
    @DelayRandom.setter
    def DelayRandom(self, val): self.DelayRandom.set(val)
    @property
    def DelayStatic(self):  # type: ()->Float
        return Float(self._node.at("DelayStatic"))
    @DelayStatic.setter
    def DelayStatic(self, val): self.DelayStatic.set(val)
    @property
    def Hash(self):  # type: ()->String
        return String(self._node.at("Hash"))
    @Hash.setter
    def Hash(self, val): self.Hash.set(val)
    @property
    def Layer(self):  # type: ()->Int
        return Int(self._node.at("Layer"))
    @Layer.setter
    def Layer(self, val): self.Layer.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class ActorStateArbiterDecisionEnum(Enum):
    CancelCurrent = "CancelCurrent"
    Coexist = "Coexist"
    RejectNew = "RejectNew"
    Specific = "Specific"
    Wait = "Wait"
    ArbiterDecision_COUNT = "ArbiterDecision_COUNT"


class ActorStateArbiterDecision(Primitive[ActorStateArbiterDecisionEnum]):  # Enum
    def __init__(self, node):
        super(ActorStateArbiterDecision, self).__init__(ActorStateArbiterDecisionEnum, node)
    schema_name = "ActorStateArbiterDecision"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> ActorStateArbiterDecision
        return ActorStateArbiterDecision(node)
    def set(self, val):  # type: (ActorStateArbiterDecisionEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class ActorState(HelperObject):
    schema_name = "ActorState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorState
        return ActorState(entlib.load_node_file(sourcefile, entlib.get_schema(ActorState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorState
        return ActorState(entlib.make_node(ActorState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class EntityStateVoxelsVolume(HelperObject):
    schema_name = "EntityStateVoxelsVolume"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateVoxelsVolume
        return EntityStateVoxelsVolume(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateVoxelsVolume.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateVoxelsVolume
        return EntityStateVoxelsVolume(entlib.make_node(EntityStateVoxelsVolume.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def VoxelsState(self):  # type: ()->String
        return String(self._node.at("VoxelsState"))
    @VoxelsState.setter
    def VoxelsState(self, val): self.VoxelsState.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateUndergroundCavity(HelperObject):
    schema_name = "EntityStateUndergroundCavity"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateUndergroundCavity
        return EntityStateUndergroundCavity(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateUndergroundCavity.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateUndergroundCavity
        return EntityStateUndergroundCavity(entlib.make_node(EntityStateUndergroundCavity.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateTriggerBeamTargetEvent(HelperObject):
    schema_name = "EntityStateTriggerBeamTargetEvent"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateTriggerBeamTargetEvent
        return EntityStateTriggerBeamTargetEvent(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateTriggerBeamTargetEvent.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateTriggerBeamTargetEvent
        return EntityStateTriggerBeamTargetEvent(entlib.make_node(EntityStateTriggerBeamTargetEvent.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateTreeTurretTargeting(HelperObject):
    schema_name = "EntityStateTreeTurretTargeting"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateTreeTurretTargeting
        return EntityStateTreeTurretTargeting(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateTreeTurretTargeting.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateTreeTurretTargeting
        return EntityStateTreeTurretTargeting(entlib.make_node(EntityStateTreeTurretTargeting.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateTreeSwitchTransition(HelperObject):
    schema_name = "EntityStateTreeSwitchTransition"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateTreeSwitchTransition
        return EntityStateTreeSwitchTransition(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateTreeSwitchTransition.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateTreeSwitchTransition
        return EntityStateTreeSwitchTransition(entlib.make_node(EntityStateTreeSwitchTransition.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateTreeMetamorphosisUsingScale(HelperObject):
    schema_name = "EntityStateTreeMetamorphosisUsingScale"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateTreeMetamorphosisUsingScale
        return EntityStateTreeMetamorphosisUsingScale(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateTreeMetamorphosisUsingScale.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateTreeMetamorphosisUsingScale
        return EntityStateTreeMetamorphosisUsingScale(entlib.make_node(EntityStateTreeMetamorphosisUsingScale.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateTreeMetamorphosis(HelperObject):
    schema_name = "EntityStateTreeMetamorphosis"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateTreeMetamorphosis
        return EntityStateTreeMetamorphosis(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateTreeMetamorphosis.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateTreeMetamorphosis
        return EntityStateTreeMetamorphosis(entlib.make_node(EntityStateTreeMetamorphosis.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateTooDeep(HelperObject):
    schema_name = "EntityStateTooDeep"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateTooDeep
        return EntityStateTooDeep(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateTooDeep.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateTooDeep
        return EntityStateTooDeep(entlib.make_node(EntityStateTooDeep.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateTakeDamageOnMount(HelperObject):
    schema_name = "EntityStateTakeDamageOnMount"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateTakeDamageOnMount
        return EntityStateTakeDamageOnMount(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateTakeDamageOnMount.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateTakeDamageOnMount
        return EntityStateTakeDamageOnMount(entlib.make_node(EntityStateTakeDamageOnMount.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateStrafeDodge(HelperObject):
    schema_name = "EntityStateStrafeDodge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateStrafeDodge
        return EntityStateStrafeDodge(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateStrafeDodge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateStrafeDodge
        return EntityStateStrafeDodge(entlib.make_node(EntityStateStrafeDodge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateStickedLand(HelperObject):
    schema_name = "EntityStateStickedLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateStickedLand
        return EntityStateStickedLand(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateStickedLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateStickedLand
        return EntityStateStickedLand(entlib.make_node(EntityStateStickedLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSpiritAttacked(HelperObject):
    schema_name = "EntityStateSpiritAttacked"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSpiritAttacked
        return EntityStateSpiritAttacked(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSpiritAttacked.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSpiritAttacked
        return EntityStateSpiritAttacked(entlib.make_node(EntityStateSpiritAttacked.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSpiritAttack(HelperObject):
    schema_name = "EntityStateSpiritAttack"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSpiritAttack
        return EntityStateSpiritAttack(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSpiritAttack.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSpiritAttack
        return EntityStateSpiritAttack(entlib.make_node(EntityStateSpiritAttack.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSpiritAnimalSoulForm(HelperObject):
    schema_name = "EntityStateSpiritAnimalSoulForm"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSpiritAnimalSoulForm
        return EntityStateSpiritAnimalSoulForm(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSpiritAnimalSoulForm.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSpiritAnimalSoulForm
        return EntityStateSpiritAnimalSoulForm(entlib.make_node(EntityStateSpiritAnimalSoulForm.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSpiritAnimalBeingCalled(HelperObject):
    schema_name = "EntityStateSpiritAnimalBeingCalled"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSpiritAnimalBeingCalled
        return EntityStateSpiritAnimalBeingCalled(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSpiritAnimalBeingCalled.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSpiritAnimalBeingCalled
        return EntityStateSpiritAnimalBeingCalled(entlib.make_node(EntityStateSpiritAnimalBeingCalled.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSpiritAnimalActive(HelperObject):
    schema_name = "EntityStateSpiritAnimalActive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSpiritAnimalActive
        return EntityStateSpiritAnimalActive(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSpiritAnimalActive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSpiritAnimalActive
        return EntityStateSpiritAnimalActive(entlib.make_node(EntityStateSpiritAnimalActive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSpeedLimiter(HelperObject):
    schema_name = "EntityStateSpeedLimiter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSpeedLimiter
        return EntityStateSpeedLimiter(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSpeedLimiter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSpeedLimiter
        return EntityStateSpeedLimiter(entlib.make_node(EntityStateSpeedLimiter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSpawnedSoul(HelperObject):
    schema_name = "EntityStateSpawnedSoul"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSpawnedSoul
        return EntityStateSpawnedSoul(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSpawnedSoul.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSpawnedSoul
        return EntityStateSpawnedSoul(entlib.make_node(EntityStateSpawnedSoul.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSnappedToHatchingTarget(HelperObject):
    schema_name = "EntityStateSnappedToHatchingTarget"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSnappedToHatchingTarget
        return EntityStateSnappedToHatchingTarget(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSnappedToHatchingTarget.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSnappedToHatchingTarget
        return EntityStateSnappedToHatchingTarget(entlib.make_node(EntityStateSnappedToHatchingTarget.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateSlowMotion(HelperObject):
    schema_name = "EntityStateSlowMotion"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateSlowMotion
        return EntityStateSlowMotion(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateSlowMotion.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateSlowMotion
        return EntityStateSlowMotion(entlib.make_node(EntityStateSlowMotion.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateShootHatchingEnergy(HelperObject):
    schema_name = "EntityStateShootHatchingEnergy"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateShootHatchingEnergy
        return EntityStateShootHatchingEnergy(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateShootHatchingEnergy.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateShootHatchingEnergy
        return EntityStateShootHatchingEnergy(entlib.make_node(EntityStateShootHatchingEnergy.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateReviveFullCreature(HelperObject):
    schema_name = "EntityStateReviveFullCreature"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateReviveFullCreature
        return EntityStateReviveFullCreature(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateReviveFullCreature.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateReviveFullCreature
        return EntityStateReviveFullCreature(entlib.make_node(EntityStateReviveFullCreature.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateRevive(HelperObject):
    schema_name = "EntityStateRevive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateRevive
        return EntityStateRevive(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateRevive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateRevive
        return EntityStateRevive(entlib.make_node(EntityStateRevive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Inputs(self):  # type: ()->EntityStateRevive_Inputs
        return EntityStateRevive_Inputs(self._node.at("Inputs"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateReserveMountSlots(HelperObject):
    schema_name = "EntityStateReserveMountSlots"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateReserveMountSlots
        return EntityStateReserveMountSlots(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateReserveMountSlots.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateReserveMountSlots
        return EntityStateReserveMountSlots(entlib.make_node(EntityStateReserveMountSlots.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MountableDataTo(self):  # type: ()->MountableData
        return MountableData(self._node.at("MountableDataTo"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateRecoverLand(HelperObject):
    schema_name = "EntityStateRecoverLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateRecoverLand
        return EntityStateRecoverLand(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateRecoverLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateRecoverLand
        return EntityStateRecoverLand(entlib.make_node(EntityStateRecoverLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateReadyToGiveOrder(HelperObject):
    schema_name = "EntityStateReadyToGiveOrder"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateReadyToGiveOrder
        return EntityStateReadyToGiveOrder(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateReadyToGiveOrder.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateReadyToGiveOrder
        return EntityStateReadyToGiveOrder(entlib.make_node(EntityStateReadyToGiveOrder.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateRaise(HelperObject):
    schema_name = "EntityStateRaise"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateRaise
        return EntityStateRaise(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateRaise.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateRaise
        return EntityStateRaise(entlib.make_node(EntityStateRaise.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Life(self):  # type: ()->Float
        return Float(self._node.at("Life"))
    @Life.setter
    def Life(self, val): self.Life.set(val)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStatePrepareToHoldingOnToNavigationMesh(HelperObject):
    schema_name = "EntityStatePrepareToHoldingOnToNavigationMesh"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStatePrepareToHoldingOnToNavigationMesh
        return EntityStatePrepareToHoldingOnToNavigationMesh(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStatePrepareToHoldingOnToNavigationMesh.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStatePrepareToHoldingOnToNavigationMesh
        return EntityStatePrepareToHoldingOnToNavigationMesh(entlib.make_node(EntityStatePrepareToHoldingOnToNavigationMesh.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStatePlungeLand(HelperObject):
    schema_name = "EntityStatePlungeLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStatePlungeLand
        return EntityStatePlungeLand(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStatePlungeLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStatePlungeLand
        return EntityStatePlungeLand(entlib.make_node(EntityStatePlungeLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStatePlayer(HelperObject):
    schema_name = "EntityStatePlayer"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStatePlayer
        return EntityStatePlayer(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStatePlayer.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStatePlayer
        return EntityStatePlayer(entlib.make_node(EntityStatePlayer.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStatePickableDistributor(HelperObject):
    schema_name = "EntityStatePickableDistributor"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStatePickableDistributor
        return EntityStatePickableDistributor(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStatePickableDistributor.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStatePickableDistributor
        return EntityStatePickableDistributor(entlib.make_node(EntityStatePickableDistributor.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateParry(HelperObject):
    schema_name = "EntityStateParry"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateParry
        return EntityStateParry(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateParry.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateParry
        return EntityStateParry(entlib.make_node(EntityStateParry.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateParried(HelperObject):
    schema_name = "EntityStateParried"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateParried
        return EntityStateParried(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateParried.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateParried
        return EntityStateParried(entlib.make_node(EntityStateParried.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateOrderingAttack(HelperObject):
    schema_name = "EntityStateOrderingAttack"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateOrderingAttack
        return EntityStateOrderingAttack(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateOrderingAttack.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateOrderingAttack
        return EntityStateOrderingAttack(entlib.make_node(EntityStateOrderingAttack.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateMineScaling(HelperObject):
    schema_name = "EntityStateMineScaling"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateMineScaling
        return EntityStateMineScaling(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateMineScaling.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateMineScaling
        return EntityStateMineScaling(entlib.make_node(EntityStateMineScaling.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateMineRespawning(HelperObject):
    schema_name = "EntityStateMineRespawning"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateMineRespawning
        return EntityStateMineRespawning(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateMineRespawning.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateMineRespawning
        return EntityStateMineRespawning(entlib.make_node(EntityStateMineRespawning.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateMeditateToHatch(HelperObject):
    schema_name = "EntityStateMeditateToHatch"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateMeditateToHatch
        return EntityStateMeditateToHatch(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateMeditateToHatch.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateMeditateToHatch
        return EntityStateMeditateToHatch(entlib.make_node(EntityStateMeditateToHatch.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateMask(HelperObject):
    schema_name = "EntityStateMask"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateMask
        return EntityStateMask(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateMask.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateMask
        return EntityStateMask(entlib.make_node(EntityStateMask.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MaskMeshPath(self):  # type: ()->String
        return String(self._node.at("MaskMeshPath"))
    @MaskMeshPath.setter
    def MaskMeshPath(self, val): self.MaskMeshPath.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateLateralLand(HelperObject):
    schema_name = "EntityStateLateralLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateLateralLand
        return EntityStateLateralLand(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateLateralLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateLateralLand
        return EntityStateLateralLand(entlib.make_node(EntityStateLateralLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateLateralDodge(HelperObject):
    schema_name = "EntityStateLateralDodge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateLateralDodge
        return EntityStateLateralDodge(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateLateralDodge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateLateralDodge
        return EntityStateLateralDodge(entlib.make_node(EntityStateLateralDodge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateJumpHeightMultiplier(HelperObject):
    schema_name = "EntityStateJumpHeightMultiplier"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateJumpHeightMultiplier
        return EntityStateJumpHeightMultiplier(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateJumpHeightMultiplier.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateJumpHeightMultiplier
        return EntityStateJumpHeightMultiplier(entlib.make_node(EntityStateJumpHeightMultiplier.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def JumpHeightMultiplier(self):  # type: ()->Float
        return Float(self._node.at("JumpHeightMultiplier"))
    @JumpHeightMultiplier.setter
    def JumpHeightMultiplier(self, val): self.JumpHeightMultiplier.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateInconvertible(HelperObject):
    schema_name = "EntityStateInconvertible"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateInconvertible
        return EntityStateInconvertible(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateInconvertible.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateInconvertible
        return EntityStateInconvertible(entlib.make_node(EntityStateInconvertible.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateImmersedJump(HelperObject):
    schema_name = "EntityStateImmersedJump"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateImmersedJump
        return EntityStateImmersedJump(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateImmersedJump.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateImmersedJump
        return EntityStateImmersedJump(entlib.make_node(EntityStateImmersedJump.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateHintNone(HelperObject):
    schema_name = "EntityStateHintNone"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateHintNone
        return EntityStateHintNone(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateHintNone.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateHintNone
        return EntityStateHintNone(entlib.make_node(EntityStateHintNone.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateHintLight(HelperObject):
    schema_name = "EntityStateHintLight"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateHintLight
        return EntityStateHintLight(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateHintLight.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateHintLight
        return EntityStateHintLight(entlib.make_node(EntityStateHintLight.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateHintFull(HelperObject):
    schema_name = "EntityStateHintFull"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateHintFull
        return EntityStateHintFull(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateHintFull.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateHintFull
        return EntityStateHintFull(entlib.make_node(EntityStateHintFull.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateHideOut(HelperObject):
    schema_name = "EntityStateHideOut"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateHideOut
        return EntityStateHideOut(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateHideOut.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateHideOut
        return EntityStateHideOut(entlib.make_node(EntityStateHideOut.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateHideIn(HelperObject):
    schema_name = "EntityStateHideIn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateHideIn
        return EntityStateHideIn(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateHideIn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateHideIn
        return EntityStateHideIn(entlib.make_node(EntityStateHideIn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateHide(HelperObject):
    schema_name = "EntityStateHide"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateHide
        return EntityStateHide(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateHide.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateHide
        return EntityStateHide(entlib.make_node(EntityStateHide.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ExitRequired(self):  # type: ()->Bool
        return Bool(self._node.at("ExitRequired"))
    @ExitRequired.setter
    def ExitRequired(self, val): self.ExitRequired.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateGroundedJump(HelperObject):
    schema_name = "EntityStateGroundedJump"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateGroundedJump
        return EntityStateGroundedJump(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateGroundedJump.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateGroundedJump
        return EntityStateGroundedJump(entlib.make_node(EntityStateGroundedJump.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateForceCanBeTargeted(HelperObject):
    schema_name = "EntityStateForceCanBeTargeted"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateForceCanBeTargeted
        return EntityStateForceCanBeTargeted(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateForceCanBeTargeted.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateForceCanBeTargeted
        return EntityStateForceCanBeTargeted(entlib.make_node(EntityStateForceCanBeTargeted.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CanBeTargeted(self):  # type: ()->Bool
        return Bool(self._node.at("CanBeTargeted"))
    @CanBeTargeted.setter
    def CanBeTargeted(self, val): self.CanBeTargeted.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateFastRun(HelperObject):
    schema_name = "EntityStateFastRun"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateFastRun
        return EntityStateFastRun(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateFastRun.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateFastRun
        return EntityStateFastRun(entlib.make_node(EntityStateFastRun.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateFallSafe(HelperObject):
    schema_name = "EntityStateFallSafe"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateFallSafe
        return EntityStateFallSafe(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateFallSafe.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateFallSafe
        return EntityStateFallSafe(entlib.make_node(EntityStateFallSafe.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateFallInjured(HelperObject):
    schema_name = "EntityStateFallInjured"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateFallInjured
        return EntityStateFallInjured(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateFallInjured.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateFallInjured
        return EntityStateFallInjured(entlib.make_node(EntityStateFallInjured.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateFallDying(HelperObject):
    schema_name = "EntityStateFallDying"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateFallDying
        return EntityStateFallDying(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateFallDying.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateFallDying
        return EntityStateFallDying(entlib.make_node(EntityStateFallDying.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateFall(HelperObject):
    schema_name = "EntityStateFall"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateFall
        return EntityStateFall(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateFall.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateFall
        return EntityStateFall(entlib.make_node(EntityStateFall.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateExtraLife(HelperObject):
    schema_name = "EntityStateExtraLife"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateExtraLife
        return EntityStateExtraLife(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateExtraLife.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateExtraLife
        return EntityStateExtraLife(entlib.make_node(EntityStateExtraLife.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateEnterSideMapRequest(HelperObject):
    schema_name = "EntityStateEnterSideMapRequest"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateEnterSideMapRequest
        return EntityStateEnterSideMapRequest(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateEnterSideMapRequest.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateEnterSideMapRequest
        return EntityStateEnterSideMapRequest(entlib.make_node(EntityStateEnterSideMapRequest.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateEnergySpoutState(HelperObject):
    schema_name = "EntityStateEnergySpoutState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateEnergySpoutState
        return EntityStateEnergySpoutState(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateEnergySpoutState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateEnergySpoutState
        return EntityStateEnergySpoutState(entlib.make_node(EntityStateEnergySpoutState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def ReviveSideEvents(self):  # type: ()->Array[ReviveSideEvent]
        return (lambda n: Array(ReviveSideEvent, n))(self._node.at("ReviveSideEvents"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateEnergyRootState(HelperObject):
    schema_name = "EntityStateEnergyRootState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateEnergyRootState
        return EntityStateEnergyRootState(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateEnergyRootState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateEnergyRootState
        return EntityStateEnergyRootState(entlib.make_node(EntityStateEnergyRootState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Energy(self):  # type: ()->Float
        return Float(self._node.at("Energy"))
    @Energy.setter
    def Energy(self, val): self.Energy.set(val)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateEnergyRootHatching(HelperObject):
    schema_name = "EntityStateEnergyRootHatching"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateEnergyRootHatching
        return EntityStateEnergyRootHatching(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateEnergyRootHatching.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateEnergyRootHatching
        return EntityStateEnergyRootHatching(entlib.make_node(EntityStateEnergyRootHatching.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateEnergyRootAbortHatching(HelperObject):
    schema_name = "EntityStateEnergyRootAbortHatching"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateEnergyRootAbortHatching
        return EntityStateEnergyRootAbortHatching(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateEnergyRootAbortHatching.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateEnergyRootAbortHatching
        return EntityStateEnergyRootAbortHatching(entlib.make_node(EntityStateEnergyRootAbortHatching.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateEjectedLand(HelperObject):
    schema_name = "EntityStateEjectedLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateEjectedLand
        return EntityStateEjectedLand(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateEjectedLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateEjectedLand
        return EntityStateEjectedLand(entlib.make_node(EntityStateEjectedLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateDisplayHatchingCost(HelperObject):
    schema_name = "EntityStateDisplayHatchingCost"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateDisplayHatchingCost
        return EntityStateDisplayHatchingCost(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateDisplayHatchingCost.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateDisplayHatchingCost
        return EntityStateDisplayHatchingCost(entlib.make_node(EntityStateDisplayHatchingCost.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateDisguise(HelperObject):
    schema_name = "EntityStateDisguise"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateDisguise
        return EntityStateDisguise(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateDisguise.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateDisguise
        return EntityStateDisguise(entlib.make_node(EntityStateDisguise.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ExitRequired(self):  # type: ()->Bool
        return Bool(self._node.at("ExitRequired"))
    @ExitRequired.setter
    def ExitRequired(self, val): self.ExitRequired.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateDisablePerceptionRequest(HelperObject):
    schema_name = "EntityStateDisablePerceptionRequest"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateDisablePerceptionRequest
        return EntityStateDisablePerceptionRequest(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateDisablePerceptionRequest.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateDisablePerceptionRequest
        return EntityStateDisablePerceptionRequest(entlib.make_node(EntityStateDisablePerceptionRequest.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateDeathLand(HelperObject):
    schema_name = "EntityStateDeathLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateDeathLand
        return EntityStateDeathLand(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateDeathLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateDeathLand
        return EntityStateDeathLand(entlib.make_node(EntityStateDeathLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateDamageLand(HelperObject):
    schema_name = "EntityStateDamageLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateDamageLand
        return EntityStateDamageLand(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateDamageLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateDamageLand
        return EntityStateDamageLand(entlib.make_node(EntityStateDamageLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateCreatureProfile(HelperObject):
    schema_name = "EntityStateCreatureProfile"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateCreatureProfile
        return EntityStateCreatureProfile(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateCreatureProfile.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateCreatureProfile
        return EntityStateCreatureProfile(entlib.make_node(EntityStateCreatureProfile.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Profile(self):  # type: ()->CreatureProfile
        return CreatureProfile(self._node.at("Profile"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateCreatureHatching(HelperObject):
    schema_name = "EntityStateCreatureHatching"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateCreatureHatching
        return EntityStateCreatureHatching(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateCreatureHatching.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateCreatureHatching
        return EntityStateCreatureHatching(entlib.make_node(EntityStateCreatureHatching.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Inputs(self):  # type: ()->EntityStateCreatureHatching_Inputs
        return EntityStateCreatureHatching_Inputs(self._node.at("Inputs"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateCreateSoul(HelperObject):
    schema_name = "EntityStateCreateSoul"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateCreateSoul
        return EntityStateCreateSoul(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateCreateSoul.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateCreateSoul
        return EntityStateCreateSoul(entlib.make_node(EntityStateCreateSoul.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateCombat(HelperObject):
    schema_name = "EntityStateCombat"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateCombat
        return EntityStateCombat(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateCombat.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateCombat
        return EntityStateCombat(entlib.make_node(EntityStateCombat.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateClassicLand(HelperObject):
    schema_name = "EntityStateClassicLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateClassicLand
        return EntityStateClassicLand(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateClassicLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateClassicLand
        return EntityStateClassicLand(entlib.make_node(EntityStateClassicLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateClassicDodge(HelperObject):
    schema_name = "EntityStateClassicDodge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateClassicDodge
        return EntityStateClassicDodge(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateClassicDodge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateClassicDodge
        return EntityStateClassicDodge(entlib.make_node(EntityStateClassicDodge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateCanNotBePerceived(HelperObject):
    schema_name = "EntityStateCanNotBePerceived"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateCanNotBePerceived
        return EntityStateCanNotBePerceived(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateCanNotBePerceived.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateCanNotBePerceived
        return EntityStateCanNotBePerceived(entlib.make_node(EntityStateCanNotBePerceived.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateCallAndMountSpiritAnimal(HelperObject):
    schema_name = "EntityStateCallAndMountSpiritAnimal"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateCallAndMountSpiritAnimal
        return EntityStateCallAndMountSpiritAnimal(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateCallAndMountSpiritAnimal.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateCallAndMountSpiritAnimal
        return EntityStateCallAndMountSpiritAnimal(entlib.make_node(EntityStateCallAndMountSpiritAnimal.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateBoidsHomePos(HelperObject):
    schema_name = "EntityStateBoidsHomePos"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateBoidsHomePos
        return EntityStateBoidsHomePos(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateBoidsHomePos.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateBoidsHomePos
        return EntityStateBoidsHomePos(entlib.make_node(EntityStateBoidsHomePos.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def HomePosition(self):  # type: ()->Position
        return Position(self._node.at("HomePosition"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateBeingOnSpike(HelperObject):
    schema_name = "EntityStateBeingOnSpike"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateBeingOnSpike
        return EntityStateBeingOnSpike(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateBeingOnSpike.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateBeingOnSpike
        return EntityStateBeingOnSpike(entlib.make_node(EntityStateBeingOnSpike.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SpikeCooldown(self):  # type: ()->Float
        return Float(self._node.at("SpikeCooldown"))
    @SpikeCooldown.setter
    def SpikeCooldown(self, val): self.SpikeCooldown.set(val)
    @property
    def SpikeDamage(self):  # type: ()->Float
        return Float(self._node.at("SpikeDamage"))
    @SpikeDamage.setter
    def SpikeDamage(self, val): self.SpikeDamage.set(val)
    @property
    def SpikeEject(self):  # type: ()->Bool
        return Bool(self._node.at("SpikeEject"))
    @SpikeEject.setter
    def SpikeEject(self, val): self.SpikeEject.set(val)
    @property
    def SpikeImpact(self):  # type: ()->Float
        return Float(self._node.at("SpikeImpact"))
    @SpikeImpact.setter
    def SpikeImpact(self, val): self.SpikeImpact.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateBeingBlockedByVine(HelperObject):
    schema_name = "EntityStateBeingBlockedByVine"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateBeingBlockedByVine
        return EntityStateBeingBlockedByVine(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateBeingBlockedByVine.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateBeingBlockedByVine
        return EntityStateBeingBlockedByVine(entlib.make_node(EntityStateBeingBlockedByVine.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Blocker(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("Blocker"))
    @Blocker.setter
    def Blocker(self, val): self.Blocker.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateAttackCharge(HelperObject):
    schema_name = "EntityStateAttackCharge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateAttackCharge
        return EntityStateAttackCharge(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateAttackCharge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateAttackCharge
        return EntityStateAttackCharge(entlib.make_node(EntityStateAttackCharge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateAskStaffGuide(HelperObject):
    schema_name = "EntityStateAskStaffGuide"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateAskStaffGuide
        return EntityStateAskStaffGuide(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateAskStaffGuide.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateAskStaffGuide
        return EntityStateAskStaffGuide(entlib.make_node(EntityStateAskStaffGuide.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateApplyExtraLife(HelperObject):
    schema_name = "EntityStateApplyExtraLife"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateApplyExtraLife
        return EntityStateApplyExtraLife(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateApplyExtraLife.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateApplyExtraLife
        return EntityStateApplyExtraLife(entlib.make_node(EntityStateApplyExtraLife.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateAirControl(HelperObject):
    schema_name = "EntityStateAirControl"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateAirControl
        return EntityStateAirControl(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateAirControl.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateAirControl
        return EntityStateAirControl(entlib.make_node(EntityStateAirControl.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateAimAt(HelperObject):
    schema_name = "EntityStateAimAt"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateAimAt
        return EntityStateAimAt(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateAimAt.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateAimAt
        return EntityStateAimAt(entlib.make_node(EntityStateAimAt.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityStateAerialJump(HelperObject):
    schema_name = "EntityStateAerialJump"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityStateAerialJump
        return EntityStateAerialJump(entlib.load_node_file(sourcefile, entlib.get_schema(EntityStateAerialJump.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityStateAerialJump
        return EntityStateAerialJump(entlib.make_node(EntityStateAerialJump.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateVomiting(HelperObject):
    schema_name = "ActorStateVomiting"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateVomiting
        return ActorStateVomiting(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateVomiting.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateVomiting
        return ActorStateVomiting(entlib.make_node(ActorStateVomiting.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateTryUpgradeShamanStaff(HelperObject):
    schema_name = "ActorStateTryUpgradeShamanStaff"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateTryUpgradeShamanStaff
        return ActorStateTryUpgradeShamanStaff(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateTryUpgradeShamanStaff.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateTryUpgradeShamanStaff
        return ActorStateTryUpgradeShamanStaff(entlib.make_node(ActorStateTryUpgradeShamanStaff.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateTryEquipShamanStaff(HelperObject):
    schema_name = "ActorStateTryEquipShamanStaff"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateTryEquipShamanStaff
        return ActorStateTryEquipShamanStaff(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateTryEquipShamanStaff.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateTryEquipShamanStaff
        return ActorStateTryEquipShamanStaff(entlib.make_node(ActorStateTryEquipShamanStaff.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateTeleportWhileMoving(HelperObject):
    schema_name = "ActorStateTeleportWhileMoving"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateTeleportWhileMoving
        return ActorStateTeleportWhileMoving(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateTeleportWhileMoving.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateTeleportWhileMoving
        return ActorStateTeleportWhileMoving(entlib.make_node(ActorStateTeleportWhileMoving.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def input(self):  # type: ()->ActorStateTeleportWhileMovingInputs
        return ActorStateTeleportWhileMovingInputs(self._node.at("input"))
    pass


from EntityLibPy import Node

class ActorStateTeleportToTarget(HelperObject):
    schema_name = "ActorStateTeleportToTarget"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateTeleportToTarget
        return ActorStateTeleportToTarget(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateTeleportToTarget.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateTeleportToTarget
        return ActorStateTeleportToTarget(entlib.make_node(ActorStateTeleportToTarget.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateTeleport(HelperObject):
    schema_name = "ActorStateTeleport"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateTeleport
        return ActorStateTeleport(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateTeleport.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateTeleport
        return ActorStateTeleport(entlib.make_node(ActorStateTeleport.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Inputs(self):  # type: ()->ActorStateTeleport_Inputs
        return ActorStateTeleport_Inputs(self._node.at("Inputs"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateTaunting(HelperObject):
    schema_name = "ActorStateTaunting"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateTaunting
        return ActorStateTaunting(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateTaunting.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateTaunting
        return ActorStateTaunting(entlib.make_node(ActorStateTaunting.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateStopAttitudeAggressive(HelperObject):
    schema_name = "ActorStateStopAttitudeAggressive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateStopAttitudeAggressive
        return ActorStateStopAttitudeAggressive(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateStopAttitudeAggressive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateStopAttitudeAggressive
        return ActorStateStopAttitudeAggressive(entlib.make_node(ActorStateStopAttitudeAggressive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSpeedMultiplier(HelperObject):
    schema_name = "ActorStateSpeedMultiplier"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSpeedMultiplier
        return ActorStateSpeedMultiplier(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSpeedMultiplier.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSpeedMultiplier
        return ActorStateSpeedMultiplier(entlib.make_node(ActorStateSpeedMultiplier.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SpeedMultiplier(self):  # type: ()->Float
        return Float(self._node.at("SpeedMultiplier"))
    @SpeedMultiplier.setter
    def SpeedMultiplier(self, val): self.SpeedMultiplier.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSoulWaitingToRespawn(HelperObject):
    schema_name = "ActorStateSoulWaitingToRespawn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSoulWaitingToRespawn
        return ActorStateSoulWaitingToRespawn(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSoulWaitingToRespawn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSoulWaitingToRespawn
        return ActorStateSoulWaitingToRespawn(entlib.make_node(ActorStateSoulWaitingToRespawn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSoulRespawn(HelperObject):
    schema_name = "ActorStateSoulRespawn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSoulRespawn
        return ActorStateSoulRespawn(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSoulRespawn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSoulRespawn
        return ActorStateSoulRespawn(entlib.make_node(ActorStateSoulRespawn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSoulPathfindAndMove(HelperObject):
    schema_name = "ActorStateSoulPathfindAndMove"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSoulPathfindAndMove
        return ActorStateSoulPathfindAndMove(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSoulPathfindAndMove.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSoulPathfindAndMove
        return ActorStateSoulPathfindAndMove(entlib.make_node(ActorStateSoulPathfindAndMove.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSoulMove(HelperObject):
    schema_name = "ActorStateSoulMove"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSoulMove
        return ActorStateSoulMove(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSoulMove.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSoulMove
        return ActorStateSoulMove(entlib.make_node(ActorStateSoulMove.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSlope(HelperObject):
    schema_name = "ActorStateSlope"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSlope
        return ActorStateSlope(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSlope.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSlope
        return ActorStateSlope(entlib.make_node(ActorStateSlope.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSleeping(HelperObject):
    schema_name = "ActorStateSleeping"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSleeping
        return ActorStateSleeping(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSleeping.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSleeping
        return ActorStateSleeping(entlib.make_node(ActorStateSleeping.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSkeletonPartPickUpState(HelperObject):
    schema_name = "ActorStateSkeletonPartPickUpState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSkeletonPartPickUpState
        return ActorStateSkeletonPartPickUpState(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSkeletonPartPickUpState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSkeletonPartPickUpState
        return ActorStateSkeletonPartPickUpState(entlib.make_node(ActorStateSkeletonPartPickUpState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSkeletonPartPickUpRequest(HelperObject):
    schema_name = "ActorStateSkeletonPartPickUpRequest"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSkeletonPartPickUpRequest
        return ActorStateSkeletonPartPickUpRequest(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSkeletonPartPickUpRequest.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSkeletonPartPickUpRequest
        return ActorStateSkeletonPartPickUpRequest(entlib.make_node(ActorStateSkeletonPartPickUpRequest.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSink(HelperObject):
    schema_name = "ActorStateSink"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSink
        return ActorStateSink(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSink.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSink
        return ActorStateSink(entlib.make_node(ActorStateSink.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateShootingFlow(HelperObject):
    schema_name = "ActorStateShootingFlow"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateShootingFlow
        return ActorStateShootingFlow(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateShootingFlow.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateShootingFlow
        return ActorStateShootingFlow(entlib.make_node(ActorStateShootingFlow.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateShapeshift(HelperObject):
    schema_name = "ActorStateShapeshift"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateShapeshift
        return ActorStateShapeshift(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateShapeshift.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateShapeshift
        return ActorStateShapeshift(entlib.make_node(ActorStateShapeshift.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateShamanItemPartState(HelperObject):
    schema_name = "ActorStateShamanItemPartState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateShamanItemPartState
        return ActorStateShamanItemPartState(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateShamanItemPartState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateShamanItemPartState
        return ActorStateShamanItemPartState(entlib.make_node(ActorStateShamanItemPartState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateShamanItemLiving(HelperObject):
    schema_name = "ActorStateShamanItemLiving"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateShamanItemLiving
        return ActorStateShamanItemLiving(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateShamanItemLiving.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateShamanItemLiving
        return ActorStateShamanItemLiving(entlib.make_node(ActorStateShamanItemLiving.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def End(self):  # type: ()->Bool
        return Bool(self._node.at("End"))
    @End.setter
    def End(self, val): self.End.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateSendMission(HelperObject):
    schema_name = "ActorStateSendMission"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateSendMission
        return ActorStateSendMission(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateSendMission.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateSendMission
        return ActorStateSendMission(entlib.make_node(ActorStateSendMission.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateScreaming(HelperObject):
    schema_name = "ActorStateScreaming"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateScreaming
        return ActorStateScreaming(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateScreaming.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateScreaming
        return ActorStateScreaming(entlib.make_node(ActorStateScreaming.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateRespawnability(HelperObject):
    schema_name = "ActorStateRespawnability"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateRespawnability
        return ActorStateRespawnability(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateRespawnability.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateRespawnability
        return ActorStateRespawnability(entlib.make_node(ActorStateRespawnability.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateRespawnOnPossessGPE(HelperObject):
    schema_name = "ActorStateRespawnOnPossessGPE"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateRespawnOnPossessGPE
        return ActorStateRespawnOnPossessGPE(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateRespawnOnPossessGPE.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateRespawnOnPossessGPE
        return ActorStateRespawnOnPossessGPE(entlib.make_node(ActorStateRespawnOnPossessGPE.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateRespawnOnMount(HelperObject):
    schema_name = "ActorStateRespawnOnMount"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateRespawnOnMount
        return ActorStateRespawnOnMount(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateRespawnOnMount.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateRespawnOnMount
        return ActorStateRespawnOnMount(entlib.make_node(ActorStateRespawnOnMount.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateRequestingWaiting(HelperObject):
    schema_name = "ActorStateRequestingWaiting"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateRequestingWaiting
        return ActorStateRequestingWaiting(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateRequestingWaiting.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateRequestingWaiting
        return ActorStateRequestingWaiting(entlib.make_node(ActorStateRequestingWaiting.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateRequestingHealing(HelperObject):
    schema_name = "ActorStateRequestingHealing"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateRequestingHealing
        return ActorStateRequestingHealing(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateRequestingHealing.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateRequestingHealing
        return ActorStateRequestingHealing(entlib.make_node(ActorStateRequestingHealing.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateRegenerationLow(HelperObject):
    schema_name = "ActorStateRegenerationLow"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateRegenerationLow
        return ActorStateRegenerationLow(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateRegenerationLow.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateRegenerationLow
        return ActorStateRegenerationLow(entlib.make_node(ActorStateRegenerationLow.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def NeedToBeFreed(self):  # type: ()->Bool
        return Bool(self._node.at("NeedToBeFreed"))
    @NeedToBeFreed.setter
    def NeedToBeFreed(self, val): self.NeedToBeFreed.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateRegenerationFull(HelperObject):
    schema_name = "ActorStateRegenerationFull"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateRegenerationFull
        return ActorStateRegenerationFull(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateRegenerationFull.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateRegenerationFull
        return ActorStateRegenerationFull(entlib.make_node(ActorStateRegenerationFull.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateRecover(HelperObject):
    schema_name = "ActorStateRecover"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateRecover
        return ActorStateRecover(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateRecover.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateRecover
        return ActorStateRecover(entlib.make_node(ActorStateRecover.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateReactingLava(HelperObject):
    schema_name = "ActorStateReactingLava"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateReactingLava
        return ActorStateReactingLava(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateReactingLava.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateReactingLava
        return ActorStateReactingLava(entlib.make_node(ActorStateReactingLava.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStatePossessedGPE(HelperObject):
    schema_name = "ActorStatePossessedGPE"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStatePossessedGPE
        return ActorStatePossessedGPE(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStatePossessedGPE.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStatePossessedGPE
        return ActorStatePossessedGPE(entlib.make_node(ActorStatePossessedGPE.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStatePossessGPE(HelperObject):
    schema_name = "ActorStatePossessGPE"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStatePossessGPE
        return ActorStatePossessGPE(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStatePossessGPE.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStatePossessGPE
        return ActorStatePossessGPE(entlib.make_node(ActorStatePossessGPE.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStatePossessFlocking(HelperObject):
    schema_name = "ActorStatePossessFlocking"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStatePossessFlocking
        return ActorStatePossessFlocking(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStatePossessFlocking.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStatePossessFlocking
        return ActorStatePossessFlocking(entlib.make_node(ActorStatePossessFlocking.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateNavigationMesh(HelperObject):
    schema_name = "ActorStateNavigationMesh"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateNavigationMesh
        return ActorStateNavigationMesh(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateNavigationMesh.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateNavigationMesh
        return ActorStateNavigationMesh(entlib.make_node(ActorStateNavigationMesh.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMovingSwim(HelperObject):
    schema_name = "ActorStateMovingSwim"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMovingSwim
        return ActorStateMovingSwim(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMovingSwim.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMovingSwim
        return ActorStateMovingSwim(entlib.make_node(ActorStateMovingSwim.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMovingStandUp(HelperObject):
    schema_name = "ActorStateMovingStandUp"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMovingStandUp
        return ActorStateMovingStandUp(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMovingStandUp.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMovingStandUp
        return ActorStateMovingStandUp(entlib.make_node(ActorStateMovingStandUp.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMovingRide(HelperObject):
    schema_name = "ActorStateMovingRide"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMovingRide
        return ActorStateMovingRide(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMovingRide.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMovingRide
        return ActorStateMovingRide(entlib.make_node(ActorStateMovingRide.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMovingProne(HelperObject):
    schema_name = "ActorStateMovingProne"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMovingProne
        return ActorStateMovingProne(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMovingProne.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMovingProne
        return ActorStateMovingProne(entlib.make_node(ActorStateMovingProne.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMovingFly(HelperObject):
    schema_name = "ActorStateMovingFly"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMovingFly
        return ActorStateMovingFly(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMovingFly.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMovingFly
        return ActorStateMovingFly(entlib.make_node(ActorStateMovingFly.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMovingFall(HelperObject):
    schema_name = "ActorStateMovingFall"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMovingFall
        return ActorStateMovingFall(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMovingFall.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMovingFall
        return ActorStateMovingFall(entlib.make_node(ActorStateMovingFall.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMovingDive(HelperObject):
    schema_name = "ActorStateMovingDive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMovingDive
        return ActorStateMovingDive(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMovingDive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMovingDive
        return ActorStateMovingDive(entlib.make_node(ActorStateMovingDive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMovingClamber(HelperObject):
    schema_name = "ActorStateMovingClamber"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMovingClamber
        return ActorStateMovingClamber(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMovingClamber.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMovingClamber
        return ActorStateMovingClamber(entlib.make_node(ActorStateMovingClamber.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMoveAlongBezier(HelperObject):
    schema_name = "ActorStateMoveAlongBezier"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMoveAlongBezier
        return ActorStateMoveAlongBezier(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMoveAlongBezier.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMoveAlongBezier
        return ActorStateMoveAlongBezier(entlib.make_node(ActorStateMoveAlongBezier.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateMeetingLava(HelperObject):
    schema_name = "ActorStateMeetingLava"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateMeetingLava
        return ActorStateMeetingLava(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateMeetingLava.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateMeetingLava
        return ActorStateMeetingLava(entlib.make_node(ActorStateMeetingLava.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateLosingOxygen(HelperObject):
    schema_name = "ActorStateLosingOxygen"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateLosingOxygen
        return ActorStateLosingOxygen(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateLosingOxygen.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateLosingOxygen
        return ActorStateLosingOxygen(entlib.make_node(ActorStateLosingOxygen.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateLeavingLava(HelperObject):
    schema_name = "ActorStateLeavingLava"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateLeavingLava
        return ActorStateLeavingLava(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateLeavingLava.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateLeavingLava
        return ActorStateLeavingLava(entlib.make_node(ActorStateLeavingLava.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateInvincible(HelperObject):
    schema_name = "ActorStateInvincible"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateInvincible
        return ActorStateInvincible(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateInvincible.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateInvincible
        return ActorStateInvincible(entlib.make_node(ActorStateInvincible.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateIKConstraint(HelperObject):
    schema_name = "ActorStateIKConstraint"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateIKConstraint
        return ActorStateIKConstraint(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateIKConstraint.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateIKConstraint
        return ActorStateIKConstraint(entlib.make_node(ActorStateIKConstraint.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateHoldingItem(HelperObject):
    schema_name = "ActorStateHoldingItem"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateHoldingItem
        return ActorStateHoldingItem(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateHoldingItem.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateHoldingItem
        return ActorStateHoldingItem(entlib.make_node(ActorStateHoldingItem.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def InventoryEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("InventoryEntityRef"))
    @InventoryEntityRef.setter
    def InventoryEntityRef(self, val): self.InventoryEntityRef.set(val)
    @property
    def ItemEntityRef(self):  # type: ()->EntityRef
        return EntityRef(self._node.at("ItemEntityRef"))
    @ItemEntityRef.setter
    def ItemEntityRef(self, val): self.ItemEntityRef.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateHitEnergyWall(HelperObject):
    schema_name = "ActorStateHitEnergyWall"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateHitEnergyWall
        return ActorStateHitEnergyWall(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateHitEnergyWall.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateHitEnergyWall
        return ActorStateHitEnergyWall(entlib.make_node(ActorStateHitEnergyWall.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateHeld(HelperObject):
    schema_name = "ActorStateHeld"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateHeld
        return ActorStateHeld(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateHeld.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateHeld
        return ActorStateHeld(entlib.make_node(ActorStateHeld.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateHasNoBody(HelperObject):
    schema_name = "ActorStateHasNoBody"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateHasNoBody
        return ActorStateHasNoBody(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateHasNoBody.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateHasNoBody
        return ActorStateHasNoBody(entlib.make_node(ActorStateHasNoBody.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateForceAgainstSlope(HelperObject):
    schema_name = "ActorStateForceAgainstSlope"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateForceAgainstSlope
        return ActorStateForceAgainstSlope(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateForceAgainstSlope.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateForceAgainstSlope
        return ActorStateForceAgainstSlope(entlib.make_node(ActorStateForceAgainstSlope.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateFluidSlowDown(HelperObject):
    schema_name = "ActorStateFluidSlowDown"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateFluidSlowDown
        return ActorStateFluidSlowDown(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateFluidSlowDown.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateFluidSlowDown
        return ActorStateFluidSlowDown(entlib.make_node(ActorStateFluidSlowDown.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateFlockingRigidbodyBeingActive(HelperObject):
    schema_name = "ActorStateFlockingRigidbodyBeingActive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateFlockingRigidbodyBeingActive
        return ActorStateFlockingRigidbodyBeingActive(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateFlockingRigidbodyBeingActive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateFlockingRigidbodyBeingActive
        return ActorStateFlockingRigidbodyBeingActive(entlib.make_node(ActorStateFlockingRigidbodyBeingActive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateFlockingPathfindingAndMoving(HelperObject):
    schema_name = "ActorStateFlockingPathfindingAndMoving"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateFlockingPathfindingAndMoving
        return ActorStateFlockingPathfindingAndMoving(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateFlockingPathfindingAndMoving.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateFlockingPathfindingAndMoving
        return ActorStateFlockingPathfindingAndMoving(entlib.make_node(ActorStateFlockingPathfindingAndMoving.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateFlockingLiving(HelperObject):
    schema_name = "ActorStateFlockingLiving"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateFlockingLiving
        return ActorStateFlockingLiving(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateFlockingLiving.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateFlockingLiving
        return ActorStateFlockingLiving(entlib.make_node(ActorStateFlockingLiving.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CanCreateHitRigidBodies(self):  # type: ()->Bool
        return Bool(self._node.at("CanCreateHitRigidBodies"))
    @CanCreateHitRigidBodies.setter
    def CanCreateHitRigidBodies(self, val): self.CanCreateHitRigidBodies.set(val)
    @property
    def Killed(self):  # type: ()->Bool
        return Bool(self._node.at("Killed"))
    @Killed.setter
    def Killed(self, val): self.Killed.set(val)
    @property
    def Regenerated(self):  # type: ()->Bool
        return Bool(self._node.at("Regenerated"))
    @Regenerated.setter
    def Regenerated(self, val): self.Regenerated.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateFlockingIndividualSpawning(HelperObject):
    schema_name = "ActorStateFlockingIndividualSpawning"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateFlockingIndividualSpawning
        return ActorStateFlockingIndividualSpawning(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateFlockingIndividualSpawning.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateFlockingIndividualSpawning
        return ActorStateFlockingIndividualSpawning(entlib.make_node(ActorStateFlockingIndividualSpawning.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateFlockingChangingParams(HelperObject):
    schema_name = "ActorStateFlockingChangingParams"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateFlockingChangingParams
        return ActorStateFlockingChangingParams(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateFlockingChangingParams.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateFlockingChangingParams
        return ActorStateFlockingChangingParams(entlib.make_node(ActorStateFlockingChangingParams.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Params(self):  # type: ()->ActorStateFlockingChangingParams_Params
        return ActorStateFlockingChangingParams_Params(self._node.at("Params"))
    @property
    def ParamsBud(self):  # type: ()->ActorStateFlockingChangingParams_Params
        return ActorStateFlockingChangingParams_Params(self._node.at("ParamsBud"))
    @property
    def ShouldApplyBudParam(self):  # type: ()->Bool
        return Bool(self._node.at("ShouldApplyBudParam"))
    @ShouldApplyBudParam.setter
    def ShouldApplyBudParam(self, val): self.ShouldApplyBudParam.set(val)
    @property
    def ShouldApplyParam(self):  # type: ()->Bool
        return Bool(self._node.at("ShouldApplyParam"))
    @ShouldApplyParam.setter
    def ShouldApplyParam(self, val): self.ShouldApplyParam.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateFlockingAttackFlocking(HelperObject):
    schema_name = "ActorStateFlockingAttackFlocking"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateFlockingAttackFlocking
        return ActorStateFlockingAttackFlocking(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateFlockingAttackFlocking.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateFlockingAttackFlocking
        return ActorStateFlockingAttackFlocking(entlib.make_node(ActorStateFlockingAttackFlocking.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateExitingFly(HelperObject):
    schema_name = "ActorStateExitingFly"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateExitingFly
        return ActorStateExitingFly(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateExitingFly.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateExitingFly
        return ActorStateExitingFly(entlib.make_node(ActorStateExitingFly.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateEnergyShooting(HelperObject):
    schema_name = "ActorStateEnergyShooting"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateEnergyShooting
        return ActorStateEnergyShooting(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateEnergyShooting.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateEnergyShooting
        return ActorStateEnergyShooting(entlib.make_node(ActorStateEnergyShooting.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateEnergyProtected(HelperObject):
    schema_name = "ActorStateEnergyProtected"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateEnergyProtected
        return ActorStateEnergyProtected(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateEnergyProtected.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateEnergyProtected
        return ActorStateEnergyProtected(entlib.make_node(ActorStateEnergyProtected.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateDucking(HelperObject):
    schema_name = "ActorStateDucking"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateDucking
        return ActorStateDucking(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateDucking.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateDucking
        return ActorStateDucking(entlib.make_node(ActorStateDucking.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ExitRequired(self):  # type: ()->Bool
        return Bool(self._node.at("ExitRequired"))
    @ExitRequired.setter
    def ExitRequired(self, val): self.ExitRequired.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateDodge3D(HelperObject):
    schema_name = "ActorStateDodge3D"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateDodge3D
        return ActorStateDodge3D(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateDodge3D.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateDodge3D
        return ActorStateDodge3D(entlib.make_node(ActorStateDodge3D.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateDisabledOut(HelperObject):
    schema_name = "ActorStateDisabledOut"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateDisabledOut
        return ActorStateDisabledOut(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateDisabledOut.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateDisabledOut
        return ActorStateDisabledOut(entlib.make_node(ActorStateDisabledOut.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateDisabledIn(HelperObject):
    schema_name = "ActorStateDisabledIn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateDisabledIn
        return ActorStateDisabledIn(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateDisabledIn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateDisabledIn
        return ActorStateDisabledIn(entlib.make_node(ActorStateDisabledIn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateDisabled(HelperObject):
    schema_name = "ActorStateDisabled"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateDisabled
        return ActorStateDisabled(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateDisabled.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateDisabled
        return ActorStateDisabled(entlib.make_node(ActorStateDisabled.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateDead(HelperObject):
    schema_name = "ActorStateDead"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateDead
        return ActorStateDead(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateDead.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateDead
        return ActorStateDead(entlib.make_node(ActorStateDead.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def LastAliveReviveSide(self):  # type: ()->LastAliveReviveSide
        return LastAliveReviveSide(self._node.at("LastAliveReviveSide"))
    @property
    def ReviveLifeSigned(self):  # type: ()->Float
        return Float(self._node.at("ReviveLifeSigned"))
    @ReviveLifeSigned.setter
    def ReviveLifeSigned(self, val): self.ReviveLifeSigned.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateCreature(HelperObject):
    schema_name = "ActorStateCreature"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateCreature
        return ActorStateCreature(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateCreature.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateCreature
        return ActorStateCreature(entlib.make_node(ActorStateCreature.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Position(self):  # type: ()->Position
        return Position(self._node.at("Position"))
    @property
    def Rotation(self):  # type: ()->Quat
        return Quat(self._node.at("Rotation"))
    @Rotation.setter
    def Rotation(self, val): self.Rotation.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateConvertWithFlow(HelperObject):
    schema_name = "ActorStateConvertWithFlow"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateConvertWithFlow
        return ActorStateConvertWithFlow(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateConvertWithFlow.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateConvertWithFlow
        return ActorStateConvertWithFlow(entlib.make_node(ActorStateConvertWithFlow.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateChargeSpendLife(HelperObject):
    schema_name = "ActorStateChargeSpendLife"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateChargeSpendLife
        return ActorStateChargeSpendLife(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateChargeSpendLife.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateChargeSpendLife
        return ActorStateChargeSpendLife(entlib.make_node(ActorStateChargeSpendLife.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateChangeReviveSide(HelperObject):
    schema_name = "ActorStateChangeReviveSide"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateChangeReviveSide
        return ActorStateChangeReviveSide(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateChangeReviveSide.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateChangeReviveSide
        return ActorStateChangeReviveSide(entlib.make_node(ActorStateChangeReviveSide.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateCatapultedLand(HelperObject):
    schema_name = "ActorStateCatapultedLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateCatapultedLand
        return ActorStateCatapultedLand(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateCatapultedLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateCatapultedLand
        return ActorStateCatapultedLand(entlib.make_node(ActorStateCatapultedLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateCatapulted(HelperObject):
    schema_name = "ActorStateCatapulted"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateCatapulted
        return ActorStateCatapulted(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateCatapulted.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateCatapulted
        return ActorStateCatapulted(entlib.make_node(ActorStateCatapulted.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateCallingFollower(HelperObject):
    schema_name = "ActorStateCallingFollower"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateCallingFollower
        return ActorStateCallingFollower(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateCallingFollower.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateCallingFollower
        return ActorStateCallingFollower(entlib.make_node(ActorStateCallingFollower.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBuried(HelperObject):
    schema_name = "ActorStateBuried"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBuried
        return ActorStateBuried(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBuried.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBuried
        return ActorStateBuried(entlib.make_node(ActorStateBuried.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBittenShaked(HelperObject):
    schema_name = "ActorStateBittenShaked"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBittenShaked
        return ActorStateBittenShaked(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBittenShaked.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBittenShaked
        return ActorStateBittenShaked(entlib.make_node(ActorStateBittenShaked.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBittenRegenerated(HelperObject):
    schema_name = "ActorStateBittenRegenerated"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBittenRegenerated
        return ActorStateBittenRegenerated(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBittenRegenerated.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBittenRegenerated
        return ActorStateBittenRegenerated(entlib.make_node(ActorStateBittenRegenerated.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBiteJumpOut(HelperObject):
    schema_name = "ActorStateBiteJumpOut"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBiteJumpOut
        return ActorStateBiteJumpOut(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBiteJumpOut.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBiteJumpOut
        return ActorStateBiteJumpOut(entlib.make_node(ActorStateBiteJumpOut.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBiteEntityLiving(HelperObject):
    schema_name = "ActorStateBiteEntityLiving"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBiteEntityLiving
        return ActorStateBiteEntityLiving(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBiteEntityLiving.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBiteEntityLiving
        return ActorStateBiteEntityLiving(entlib.make_node(ActorStateBiteEntityLiving.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def State(self):  # type: ()->Int
        return Int(self._node.at("State"))
    @State.setter
    def State(self, val): self.State.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBendingTree(HelperObject):
    schema_name = "ActorStateBendingTree"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBendingTree
        return ActorStateBendingTree(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBendingTree.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBendingTree
        return ActorStateBendingTree(entlib.make_node(ActorStateBendingTree.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AttackInput(self):  # type: ()->Bool
        return Bool(self._node.at("AttackInput"))
    @AttackInput.setter
    def AttackInput(self, val): self.AttackInput.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBendingConstraint(HelperObject):
    schema_name = "ActorStateBendingConstraint"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBendingConstraint
        return ActorStateBendingConstraint(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBendingConstraint.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBendingConstraint
        return ActorStateBendingConstraint(entlib.make_node(ActorStateBendingConstraint.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingRided(HelperObject):
    schema_name = "ActorStateBeingRided"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingRided
        return ActorStateBeingRided(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingRided.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingRided
        return ActorStateBeingRided(entlib.make_node(ActorStateBeingRided.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingOnPossessedGPE(HelperObject):
    schema_name = "ActorStateBeingOnPossessedGPE"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingOnPossessedGPE
        return ActorStateBeingOnPossessedGPE(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingOnPossessedGPE.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingOnPossessedGPE
        return ActorStateBeingOnPossessedGPE(entlib.make_node(ActorStateBeingOnPossessedGPE.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingOnMount(HelperObject):
    schema_name = "ActorStateBeingOnMount"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingOnMount
        return ActorStateBeingOnMount(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingOnMount.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingOnMount
        return ActorStateBeingOnMount(entlib.make_node(ActorStateBeingOnMount.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MountableData(self):  # type: ()->MountableData
        return MountableData(self._node.at("MountableData"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingOnGroundFromImmersed(HelperObject):
    schema_name = "ActorStateBeingOnGroundFromImmersed"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingOnGroundFromImmersed
        return ActorStateBeingOnGroundFromImmersed(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingOnGroundFromImmersed.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingOnGroundFromImmersed
        return ActorStateBeingOnGroundFromImmersed(entlib.make_node(ActorStateBeingOnGroundFromImmersed.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingOnGround(HelperObject):
    schema_name = "ActorStateBeingOnGround"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingOnGround
        return ActorStateBeingOnGround(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingOnGround.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingOnGround
        return ActorStateBeingOnGround(entlib.make_node(ActorStateBeingOnGround.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingInAir(HelperObject):
    schema_name = "ActorStateBeingInAir"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingInAir
        return ActorStateBeingInAir(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingInAir.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingInAir
        return ActorStateBeingInAir(entlib.make_node(ActorStateBeingInAir.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingImmersedFromOnGround(HelperObject):
    schema_name = "ActorStateBeingImmersedFromOnGround"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingImmersedFromOnGround
        return ActorStateBeingImmersedFromOnGround(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingImmersedFromOnGround.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingImmersedFromOnGround
        return ActorStateBeingImmersedFromOnGround(entlib.make_node(ActorStateBeingImmersedFromOnGround.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingImmersedFromInAir(HelperObject):
    schema_name = "ActorStateBeingImmersedFromInAir"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingImmersedFromInAir
        return ActorStateBeingImmersedFromInAir(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingImmersedFromInAir.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingImmersedFromInAir
        return ActorStateBeingImmersedFromInAir(entlib.make_node(ActorStateBeingImmersedFromInAir.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBeingImmersed(HelperObject):
    schema_name = "ActorStateBeingImmersed"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBeingImmersed
        return ActorStateBeingImmersed(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBeingImmersed.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBeingImmersed
        return ActorStateBeingImmersed(entlib.make_node(ActorStateBeingImmersed.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateBehaviorState(HelperObject):
    schema_name = "ActorStateBehaviorState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateBehaviorState
        return ActorStateBehaviorState(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateBehaviorState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateBehaviorState
        return ActorStateBehaviorState(entlib.make_node(ActorStateBehaviorState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def State(self):  # type: ()->Int
        return Int(self._node.at("State"))
    @State.setter
    def State(self, val): self.State.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateAttitudeAggressive(HelperObject):
    schema_name = "ActorStateAttitudeAggressive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateAttitudeAggressive
        return ActorStateAttitudeAggressive(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateAttitudeAggressive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateAttitudeAggressive
        return ActorStateAttitudeAggressive(entlib.make_node(ActorStateAttitudeAggressive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateAscendPurgatory(HelperObject):
    schema_name = "ActorStateAscendPurgatory"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateAscendPurgatory
        return ActorStateAscendPurgatory(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateAscendPurgatory.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateAscendPurgatory
        return ActorStateAscendPurgatory(entlib.make_node(ActorStateAscendPurgatory.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateApplyHit(HelperObject):
    schema_name = "ActorStateApplyHit"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateApplyHit
        return ActorStateApplyHit(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateApplyHit.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateApplyHit
        return ActorStateApplyHit(entlib.make_node(ActorStateApplyHit.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateAnsweringCall(HelperObject):
    schema_name = "ActorStateAnsweringCall"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateAnsweringCall
        return ActorStateAnsweringCall(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateAnsweringCall.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateAnsweringCall
        return ActorStateAnsweringCall(entlib.make_node(ActorStateAnsweringCall.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateAliveSoul(HelperObject):
    schema_name = "ActorStateAliveSoul"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateAliveSoul
        return ActorStateAliveSoul(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateAliveSoul.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateAliveSoul
        return ActorStateAliveSoul(entlib.make_node(ActorStateAliveSoul.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateAlive(HelperObject):
    schema_name = "ActorStateAlive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateAlive
        return ActorStateAlive(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateAlive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateAlive
        return ActorStateAlive(entlib.make_node(ActorStateAlive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Life(self):  # type: ()->Float
        return Float(self._node.at("Life"))
    @Life.setter
    def Life(self, val): self.Life.set(val)
    @property
    def ReviveSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("ReviveSide"))
    @ReviveSide.setter
    def ReviveSide(self, val): self.ReviveSide.set(val)
    @property
    def StunGauge(self):  # type: ()->StunGauge
        return StunGauge(self._node.at("StunGauge"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateAimCharge(HelperObject):
    schema_name = "ActorStateAimCharge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateAimCharge
        return ActorStateAimCharge(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateAimCharge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateAimCharge
        return ActorStateAimCharge(entlib.make_node(ActorStateAimCharge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionWait(HelperObject):
    schema_name = "ActionWait"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionWait
        return ActionWait(entlib.load_node_file(sourcefile, entlib.get_schema(ActionWait.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionWait
        return ActionWait(entlib.make_node(ActionWait.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ExitRequired(self):  # type: ()->Bool
        return Bool(self._node.at("ExitRequired"))
    @ExitRequired.setter
    def ExitRequired(self, val): self.ExitRequired.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionUnmount(HelperObject):
    schema_name = "ActionUnmount"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionUnmount
        return ActionUnmount(entlib.load_node_file(sourcefile, entlib.get_schema(ActionUnmount.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionUnmount
        return ActionUnmount(entlib.make_node(ActionUnmount.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def MountableData(self):  # type: ()->MountableData
        return MountableData(self._node.at("MountableData"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def acrobaticDirection(self):  # type: ()->Vector3
        return Vector3(self._node.at("acrobaticDirection"))
    @acrobaticDirection.setter
    def acrobaticDirection(self, val): self.acrobaticDirection.set(val)
    @property
    def acrobaticUnmount(self):  # type: ()->Bool
        return Bool(self._node.at("acrobaticUnmount"))
    @acrobaticUnmount.setter
    def acrobaticUnmount(self, val): self.acrobaticUnmount.set(val)
    @property
    def speedMode(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("speedMode"))
    @speedMode.setter
    def speedMode(self, val): self.speedMode.set(val)
    pass


from EntityLibPy import Node

class ActionTriggerStandUp(HelperObject):
    schema_name = "ActionTriggerStandUp"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionTriggerStandUp
        return ActionTriggerStandUp(entlib.load_node_file(sourcefile, entlib.get_schema(ActionTriggerStandUp.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionTriggerStandUp
        return ActionTriggerStandUp(entlib.make_node(ActionTriggerStandUp.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionTriggerShamanVisionExit(HelperObject):
    schema_name = "ActionTriggerShamanVisionExit"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionTriggerShamanVisionExit
        return ActionTriggerShamanVisionExit(entlib.load_node_file(sourcefile, entlib.get_schema(ActionTriggerShamanVisionExit.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionTriggerShamanVisionExit
        return ActionTriggerShamanVisionExit(entlib.make_node(ActionTriggerShamanVisionExit.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionTriggerCrouch(HelperObject):
    schema_name = "ActionTriggerCrouch"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionTriggerCrouch
        return ActionTriggerCrouch(entlib.load_node_file(sourcefile, entlib.get_schema(ActionTriggerCrouch.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionTriggerCrouch
        return ActionTriggerCrouch(entlib.make_node(ActionTriggerCrouch.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionTopView(HelperObject):
    schema_name = "ActionTopView"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionTopView
        return ActionTopView(entlib.load_node_file(sourcefile, entlib.get_schema(ActionTopView.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionTopView
        return ActionTopView(entlib.make_node(ActionTopView.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionTalk(HelperObject):
    schema_name = "ActionTalk"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionTalk
        return ActionTalk(entlib.load_node_file(sourcefile, entlib.get_schema(ActionTalk.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionTalk
        return ActionTalk(entlib.make_node(ActionTalk.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionTakeOff(HelperObject):
    schema_name = "ActionTakeOff"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionTakeOff
        return ActionTakeOff(entlib.load_node_file(sourcefile, entlib.get_schema(ActionTakeOff.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionTakeOff
        return ActionTakeOff(entlib.make_node(ActionTakeOff.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStun(HelperObject):
    schema_name = "ActionStun"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStun
        return ActionStun(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStun.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStun
        return ActionStun(entlib.make_node(ActionStun.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def StunMax(self):  # type: ()->Bool
        return Bool(self._node.at("StunMax"))
    @StunMax.setter
    def StunMax(self, val): self.StunMax.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStrafeTurn(HelperObject):
    schema_name = "ActionStrafeTurn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStrafeTurn
        return ActionStrafeTurn(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStrafeTurn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStrafeTurn
        return ActionStrafeTurn(entlib.make_node(ActionStrafeTurn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStrafe(HelperObject):
    schema_name = "ActionStrafe"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStrafe
        return ActionStrafe(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStrafe.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStrafe
        return ActionStrafe(entlib.make_node(ActionStrafe.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def changeAnimationAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("changeAnimationAllowed"))
    @changeAnimationAllowed.setter
    def changeAnimationAllowed(self, val): self.changeAnimationAllowed.set(val)
    @property
    def orientation(self):  # type: ()->Quat
        return Quat(self._node.at("orientation"))
    @orientation.setter
    def orientation(self, val): self.orientation.set(val)
    @property
    def speedrequired(self):  # type: ()->Float
        return Float(self._node.at("speedrequired"))
    @speedrequired.setter
    def speedrequired(self, val): self.speedrequired.set(val)
    @property
    def trajectoryDir(self):  # type: ()->Vector3
        return Vector3(self._node.at("trajectoryDir"))
    @trajectoryDir.setter
    def trajectoryDir(self, val): self.trajectoryDir.set(val)
    @property
    def visualDir(self):  # type: ()->Vector3
        return Vector3(self._node.at("visualDir"))
    @visualDir.setter
    def visualDir(self, val): self.visualDir.set(val)
    pass


from EntityLibPy import Node

class ActionStop(HelperObject):
    schema_name = "ActionStop"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStop
        return ActionStop(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStop.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStop
        return ActionStop(entlib.make_node(ActionStop.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStartRun(HelperObject):
    schema_name = "ActionStartRun"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStartRun
        return ActionStartRun(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStartRun.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStartRun
        return ActionStartRun(entlib.make_node(ActionStartRun.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionSoulFreed(HelperObject):
    schema_name = "ActionSoulFreed"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionSoulFreed
        return ActionSoulFreed(entlib.load_node_file(sourcefile, entlib.get_schema(ActionSoulFreed.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionSoulFreed
        return ActionSoulFreed(entlib.make_node(ActionSoulFreed.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionSlide(HelperObject):
    schema_name = "ActionSlide"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionSlide
        return ActionSlide(entlib.load_node_file(sourcefile, entlib.get_schema(ActionSlide.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionSlide
        return ActionSlide(entlib.make_node(ActionSlide.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionShootBeam(HelperObject):
    schema_name = "ActionShootBeam"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionShootBeam
        return ActionShootBeam(entlib.load_node_file(sourcefile, entlib.get_schema(ActionShootBeam.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionShootBeam
        return ActionShootBeam(entlib.make_node(ActionShootBeam.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionShamanVision(HelperObject):
    schema_name = "ActionShamanVision"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionShamanVision
        return ActionShamanVision(entlib.load_node_file(sourcefile, entlib.get_schema(ActionShamanVision.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionShamanVision
        return ActionShamanVision(entlib.make_node(ActionShamanVision.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionScaleRider(HelperObject):
    schema_name = "ActionScaleRider"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionScaleRider
        return ActionScaleRider(entlib.load_node_file(sourcefile, entlib.get_schema(ActionScaleRider.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionScaleRider
        return ActionScaleRider(entlib.make_node(ActionScaleRider.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionRise(HelperObject):
    schema_name = "ActionRise"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionRise
        return ActionRise(entlib.load_node_file(sourcefile, entlib.get_schema(ActionRise.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionRise
        return ActionRise(entlib.make_node(ActionRise.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionRiderStance(HelperObject):
    schema_name = "ActionRiderStance"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionRiderStance
        return ActionRiderStance(entlib.load_node_file(sourcefile, entlib.get_schema(ActionRiderStance.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionRiderStance
        return ActionRiderStance(entlib.make_node(ActionRiderStance.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionReviveMaskEffect(HelperObject):
    schema_name = "ActionReviveMaskEffect"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionReviveMaskEffect
        return ActionReviveMaskEffect(entlib.load_node_file(sourcefile, entlib.get_schema(ActionReviveMaskEffect.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionReviveMaskEffect
        return ActionReviveMaskEffect(entlib.make_node(ActionReviveMaskEffect.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionRespawn(HelperObject):
    schema_name = "ActionRespawn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionRespawn
        return ActionRespawn(entlib.load_node_file(sourcefile, entlib.get_schema(ActionRespawn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionRespawn
        return ActionRespawn(entlib.make_node(ActionRespawn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def respawnDone(self):  # type: ()->Bool
        return Bool(self._node.at("respawnDone"))
    @respawnDone.setter
    def respawnDone(self, val): self.respawnDone.set(val)
    @property
    def respawnPosition(self):  # type: ()->Position
        return Position(self._node.at("respawnPosition"))
    @property
    def respawnSide(self):  # type: ()->ReviveSide
        return ReviveSide(self._node.at("respawnSide"))
    @respawnSide.setter
    def respawnSide(self, val): self.respawnSide.set(val)
    pass


from EntityLibPy import Node

class ActionRagdoll(HelperObject):
    schema_name = "ActionRagdoll"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionRagdoll
        return ActionRagdoll(entlib.load_node_file(sourcefile, entlib.get_schema(ActionRagdoll.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionRagdoll
        return ActionRagdoll(entlib.make_node(ActionRagdoll.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def State(self):  # type: ()->Int
        return Int(self._node.at("State"))
    @State.setter
    def State(self, val): self.State.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionQuadStandUpStateOut(HelperObject):
    schema_name = "ActionQuadStandUpStateOut"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionQuadStandUpStateOut
        return ActionQuadStandUpStateOut(entlib.load_node_file(sourcefile, entlib.get_schema(ActionQuadStandUpStateOut.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionQuadStandUpStateOut
        return ActionQuadStandUpStateOut(entlib.make_node(ActionQuadStandUpStateOut.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionQuadStandUpStateIn(HelperObject):
    schema_name = "ActionQuadStandUpStateIn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionQuadStandUpStateIn
        return ActionQuadStandUpStateIn(entlib.load_node_file(sourcefile, entlib.get_schema(ActionQuadStandUpStateIn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionQuadStandUpStateIn
        return ActionQuadStandUpStateIn(entlib.make_node(ActionQuadStandUpStateIn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionQuadStandUpState(HelperObject):
    schema_name = "ActionQuadStandUpState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionQuadStandUpState
        return ActionQuadStandUpState(entlib.load_node_file(sourcefile, entlib.get_schema(ActionQuadStandUpState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionQuadStandUpState
        return ActionQuadStandUpState(entlib.make_node(ActionQuadStandUpState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ExitRequired(self):  # type: ()->Bool
        return Bool(self._node.at("ExitRequired"))
    @ExitRequired.setter
    def ExitRequired(self, val): self.ExitRequired.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionPushed(HelperObject):
    schema_name = "ActionPushed"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionPushed
        return ActionPushed(entlib.load_node_file(sourcefile, entlib.get_schema(ActionPushed.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionPushed
        return ActionPushed(entlib.make_node(ActionPushed.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionPurgatoryState(HelperObject):
    schema_name = "ActionPurgatoryState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionPurgatoryState
        return ActionPurgatoryState(entlib.load_node_file(sourcefile, entlib.get_schema(ActionPurgatoryState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionPurgatoryState
        return ActionPurgatoryState(entlib.make_node(ActionPurgatoryState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionPropelled(HelperObject):
    schema_name = "ActionPropelled"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionPropelled
        return ActionPropelled(entlib.load_node_file(sourcefile, entlib.get_schema(ActionPropelled.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionPropelled
        return ActionPropelled(entlib.make_node(ActionPropelled.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PropelForce(self):  # type: ()->Vector3
        return Vector3(self._node.at("PropelForce"))
    @PropelForce.setter
    def PropelForce(self, val): self.PropelForce.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionPatinate(HelperObject):
    schema_name = "ActionPatinate"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionPatinate
        return ActionPatinate(entlib.load_node_file(sourcefile, entlib.get_schema(ActionPatinate.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionPatinate
        return ActionPatinate(entlib.make_node(ActionPatinate.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionPathfindAndMove(HelperObject):
    schema_name = "ActionPathfindAndMove"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionPathfindAndMove
        return ActionPathfindAndMove(entlib.load_node_file(sourcefile, entlib.get_schema(ActionPathfindAndMove.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionPathfindAndMove
        return ActionPathfindAndMove(entlib.make_node(ActionPathfindAndMove.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionOutfitSpecialState(HelperObject):
    schema_name = "ActionOutfitSpecialState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionOutfitSpecialState
        return ActionOutfitSpecialState(entlib.load_node_file(sourcefile, entlib.get_schema(ActionOutfitSpecialState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionOutfitSpecialState
        return ActionOutfitSpecialState(entlib.make_node(ActionOutfitSpecialState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionOrientMount(HelperObject):
    schema_name = "ActionOrientMount"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionOrientMount
        return ActionOrientMount(entlib.load_node_file(sourcefile, entlib.get_schema(ActionOrientMount.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionOrientMount
        return ActionOrientMount(entlib.make_node(ActionOrientMount.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def m_direction(self):  # type: ()->Vector3
        return Vector3(self._node.at("m_direction"))
    @m_direction.setter
    def m_direction(self, val): self.m_direction.set(val)
    pass


from EntityLibPy import Node

class ActionMoveTo(HelperObject):
    schema_name = "ActionMoveTo"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionMoveTo
        return ActionMoveTo(entlib.load_node_file(sourcefile, entlib.get_schema(ActionMoveTo.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionMoveTo
        return ActionMoveTo(entlib.make_node(ActionMoveTo.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionMoveProjectile(HelperObject):
    schema_name = "ActionMoveProjectile"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionMoveProjectile
        return ActionMoveProjectile(entlib.load_node_file(sourcefile, entlib.get_schema(ActionMoveProjectile.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionMoveProjectile
        return ActionMoveProjectile(entlib.make_node(ActionMoveProjectile.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def Trajectory(self):  # type: ()->ProjectileTrajectory
        return ProjectileTrajectory(self._node.at("Trajectory"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionMove(HelperObject):
    schema_name = "ActionMove"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionMove
        return ActionMove(entlib.load_node_file(sourcefile, entlib.get_schema(ActionMove.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionMove
        return ActionMove(entlib.make_node(ActionMove.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def CurrentDirection(self):  # type: ()->Vector3
        return Vector3(self._node.at("CurrentDirection"))
    @CurrentDirection.setter
    def CurrentDirection(self, val): self.CurrentDirection.set(val)
    @property
    def InstantReachSpeedRequired(self):  # type: ()->Bool
        return Bool(self._node.at("InstantReachSpeedRequired"))
    @InstantReachSpeedRequired.setter
    def InstantReachSpeedRequired(self, val): self.InstantReachSpeedRequired.set(val)
    @property
    def Speed(self):  # type: ()->Float
        return Float(self._node.at("Speed"))
    @Speed.setter
    def Speed(self, val): self.Speed.set(val)
    @property
    def SpeedModeDest(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("SpeedModeDest"))
    @SpeedModeDest.setter
    def SpeedModeDest(self, val): self.SpeedModeDest.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionMountReception(HelperObject):
    schema_name = "ActionMountReception"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionMountReception
        return ActionMountReception(entlib.load_node_file(sourcefile, entlib.get_schema(ActionMountReception.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionMountReception
        return ActionMountReception(entlib.make_node(ActionMountReception.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionLookAt(HelperObject):
    schema_name = "ActionLookAt"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionLookAt
        return ActionLookAt(entlib.load_node_file(sourcefile, entlib.get_schema(ActionLookAt.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionLookAt
        return ActionLookAt(entlib.make_node(ActionLookAt.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionLevitate(HelperObject):
    schema_name = "ActionLevitate"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionLevitate
        return ActionLevitate(entlib.load_node_file(sourcefile, entlib.get_schema(ActionLevitate.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionLevitate
        return ActionLevitate(entlib.make_node(ActionLevitate.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionLandingMount(HelperObject):
    schema_name = "ActionLandingMount"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionLandingMount
        return ActionLandingMount(entlib.load_node_file(sourcefile, entlib.get_schema(ActionLandingMount.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionLandingMount
        return ActionLandingMount(entlib.make_node(ActionLandingMount.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionLand(HelperObject):
    schema_name = "ActionLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionLand
        return ActionLand(entlib.load_node_file(sourcefile, entlib.get_schema(ActionLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionLand
        return ActionLand(entlib.make_node(ActionLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionJumpOnto(HelperObject):
    schema_name = "ActionJumpOnto"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionJumpOnto
        return ActionJumpOnto(entlib.load_node_file(sourcefile, entlib.get_schema(ActionJumpOnto.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionJumpOnto
        return ActionJumpOnto(entlib.make_node(ActionJumpOnto.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionJump(HelperObject):
    schema_name = "ActionJump"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionJump
        return ActionJump(entlib.load_node_file(sourcefile, entlib.get_schema(ActionJump.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionJump
        return ActionJump(entlib.make_node(ActionJump.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def jumpAnalog(self):  # type: ()->Bool
        return Bool(self._node.at("jumpAnalog"))
    @jumpAnalog.setter
    def jumpAnalog(self, val): self.jumpAnalog.set(val)
    pass


from EntityLibPy import Node

class ActionIncarnated(HelperObject):
    schema_name = "ActionIncarnated"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionIncarnated
        return ActionIncarnated(entlib.load_node_file(sourcefile, entlib.get_schema(ActionIncarnated.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionIncarnated
        return ActionIncarnated(entlib.make_node(ActionIncarnated.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionIncarnateAndFusion(HelperObject):
    schema_name = "ActionIncarnateAndFusion"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionIncarnateAndFusion
        return ActionIncarnateAndFusion(entlib.load_node_file(sourcefile, entlib.get_schema(ActionIncarnateAndFusion.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionIncarnateAndFusion
        return ActionIncarnateAndFusion(entlib.make_node(ActionIncarnateAndFusion.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FusionEndOutfitChangeDuration(self):  # type: ()->Float
        return Float(self._node.at("FusionEndOutfitChangeDuration"))
    @FusionEndOutfitChangeDuration.setter
    def FusionEndOutfitChangeDuration(self, val): self.FusionEndOutfitChangeDuration.set(val)
    @property
    def FusionEndRequested(self):  # type: ()->Bool
        return Bool(self._node.at("FusionEndRequested"))
    @FusionEndRequested.setter
    def FusionEndRequested(self, val): self.FusionEndRequested.set(val)
    @property
    def FusionStartRequested(self):  # type: ()->Bool
        return Bool(self._node.at("FusionStartRequested"))
    @FusionStartRequested.setter
    def FusionStartRequested(self, val): self.FusionStartRequested.set(val)
    @property
    def GameEffectHash(self):  # type: ()->String
        return String(self._node.at("GameEffectHash"))
    @GameEffectHash.setter
    def GameEffectHash(self, val): self.GameEffectHash.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionIncarnate(HelperObject):
    schema_name = "ActionIncarnate"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionIncarnate
        return ActionIncarnate(entlib.load_node_file(sourcefile, entlib.get_schema(ActionIncarnate.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionIncarnate
        return ActionIncarnate(entlib.make_node(ActionIncarnate.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ExitRequired(self):  # type: ()->Bool
        return Bool(self._node.at("ExitRequired"))
    @ExitRequired.setter
    def ExitRequired(self, val): self.ExitRequired.set(val)
    @property
    def GameEffectHash(self):  # type: ()->String
        return String(self._node.at("GameEffectHash"))
    @GameEffectHash.setter
    def GameEffectHash(self, val): self.GameEffectHash.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionIdle(HelperObject):
    schema_name = "ActionIdle"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionIdle
        return ActionIdle(entlib.load_node_file(sourcefile, entlib.get_schema(ActionIdle.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionIdle
        return ActionIdle(entlib.make_node(ActionIdle.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionHit(HelperObject):
    schema_name = "ActionHit"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionHit
        return ActionHit(entlib.load_node_file(sourcefile, entlib.get_schema(ActionHit.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionHit
        return ActionHit(entlib.make_node(ActionHit.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Hit(self):  # type: ()->Hit
        return Hit(self._node.at("Hit"))
    @property
    def NoAnimNeeded(self):  # type: ()->Bool
        return Bool(self._node.at("NoAnimNeeded"))
    @NoAnimNeeded.setter
    def NoAnimNeeded(self, val): self.NoAnimNeeded.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def TransferAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("TransferAllowed"))
    @TransferAllowed.setter
    def TransferAllowed(self, val): self.TransferAllowed.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionFusion(HelperObject):
    schema_name = "ActionFusion"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionFusion
        return ActionFusion(entlib.load_node_file(sourcefile, entlib.get_schema(ActionFusion.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionFusion
        return ActionFusion(entlib.make_node(ActionFusion.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionFreed(HelperObject):
    schema_name = "ActionFreed"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionFreed
        return ActionFreed(entlib.load_node_file(sourcefile, entlib.get_schema(ActionFreed.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionFreed
        return ActionFreed(entlib.make_node(ActionFreed.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionFlyUp(HelperObject):
    schema_name = "ActionFlyUp"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionFlyUp
        return ActionFlyUp(entlib.load_node_file(sourcefile, entlib.get_schema(ActionFlyUp.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionFlyUp
        return ActionFlyUp(entlib.make_node(ActionFlyUp.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionFlyFlap(HelperObject):
    schema_name = "ActionFlyFlap"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionFlyFlap
        return ActionFlyFlap(entlib.load_node_file(sourcefile, entlib.get_schema(ActionFlyFlap.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionFlyFlap
        return ActionFlyFlap(entlib.make_node(ActionFlyFlap.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionFlyDown(HelperObject):
    schema_name = "ActionFlyDown"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionFlyDown
        return ActionFlyDown(entlib.load_node_file(sourcefile, entlib.get_schema(ActionFlyDown.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionFlyDown
        return ActionFlyDown(entlib.make_node(ActionFlyDown.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionFlyDive(HelperObject):
    schema_name = "ActionFlyDive"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionFlyDive
        return ActionFlyDive(entlib.load_node_file(sourcefile, entlib.get_schema(ActionFlyDive.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionFlyDive
        return ActionFlyDive(entlib.make_node(ActionFlyDive.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionFlyCrash(HelperObject):
    schema_name = "ActionFlyCrash"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionFlyCrash
        return ActionFlyCrash(entlib.load_node_file(sourcefile, entlib.get_schema(ActionFlyCrash.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionFlyCrash
        return ActionFlyCrash(entlib.make_node(ActionFlyCrash.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionFloatToPosition(HelperObject):
    schema_name = "ActionFloatToPosition"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionFloatToPosition
        return ActionFloatToPosition(entlib.load_node_file(sourcefile, entlib.get_schema(ActionFloatToPosition.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionFloatToPosition
        return ActionFloatToPosition(entlib.make_node(ActionFloatToPosition.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionDrop(HelperObject):
    schema_name = "ActionDrop"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDrop
        return ActionDrop(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDrop.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDrop
        return ActionDrop(entlib.make_node(ActionDrop.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionDrift(HelperObject):
    schema_name = "ActionDrift"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDrift
        return ActionDrift(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDrift.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDrift
        return ActionDrift(entlib.make_node(ActionDrift.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionDrawWeaponState(HelperObject):
    schema_name = "ActionDrawWeaponState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDrawWeaponState
        return ActionDrawWeaponState(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDrawWeaponState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDrawWeaponState
        return ActionDrawWeaponState(entlib.make_node(ActionDrawWeaponState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def m_longRangeWeapon(self):  # type: ()->Bool
        return Bool(self._node.at("m_longRangeWeapon"))
    @m_longRangeWeapon.setter
    def m_longRangeWeapon(self, val): self.m_longRangeWeapon.set(val)
    @property
    def m_noDrawAnimation(self):  # type: ()->Bool
        return Bool(self._node.at("m_noDrawAnimation"))
    @m_noDrawAnimation.setter
    def m_noDrawAnimation(self, val): self.m_noDrawAnimation.set(val)
    @property
    def m_offHandWeapon(self):  # type: ()->Bool
        return Bool(self._node.at("m_offHandWeapon"))
    @m_offHandWeapon.setter
    def m_offHandWeapon(self, val): self.m_offHandWeapon.set(val)
    @property
    def m_sheatheDuration(self):  # type: ()->Float
        return Float(self._node.at("m_sheatheDuration"))
    @m_sheatheDuration.setter
    def m_sheatheDuration(self, val): self.m_sheatheDuration.set(val)
    @property
    def m_shortDrawAnimation(self):  # type: ()->Bool
        return Bool(self._node.at("m_shortDrawAnimation"))
    @m_shortDrawAnimation.setter
    def m_shortDrawAnimation(self, val): self.m_shortDrawAnimation.set(val)
    @property
    def m_timer(self):  # type: ()->Float
        return Float(self._node.at("m_timer"))
    @m_timer.setter
    def m_timer(self, val): self.m_timer.set(val)
    pass


from EntityLibPy import Node

class ActionDrawWeapon(HelperObject):
    schema_name = "ActionDrawWeapon"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDrawWeapon
        return ActionDrawWeapon(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDrawWeapon.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDrawWeapon
        return ActionDrawWeapon(entlib.make_node(ActionDrawWeapon.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionDrawAttention(HelperObject):
    schema_name = "ActionDrawAttention"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDrawAttention
        return ActionDrawAttention(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDrawAttention.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDrawAttention
        return ActionDrawAttention(entlib.make_node(ActionDrawAttention.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionDodge(HelperObject):
    schema_name = "ActionDodge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDodge
        return ActionDodge(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDodge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDodge
        return ActionDodge(entlib.make_node(ActionDodge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionDisableAndFollow(HelperObject):
    schema_name = "ActionDisableAndFollow"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDisableAndFollow
        return ActionDisableAndFollow(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDisableAndFollow.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDisableAndFollow
        return ActionDisableAndFollow(entlib.make_node(ActionDisableAndFollow.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionDigUpTreasure(HelperObject):
    schema_name = "ActionDigUpTreasure"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDigUpTreasure
        return ActionDigUpTreasure(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDigUpTreasure.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDigUpTreasure
        return ActionDigUpTreasure(entlib.make_node(ActionDigUpTreasure.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionDecelerate(HelperObject):
    schema_name = "ActionDecelerate"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionDecelerate
        return ActionDecelerate(entlib.load_node_file(sourcefile, entlib.get_schema(ActionDecelerate.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionDecelerate
        return ActionDecelerate(entlib.make_node(ActionDecelerate.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionCollapse(HelperObject):
    schema_name = "ActionCollapse"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionCollapse
        return ActionCollapse(entlib.load_node_file(sourcefile, entlib.get_schema(ActionCollapse.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionCollapse
        return ActionCollapse(entlib.make_node(ActionCollapse.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionClimbEdge(HelperObject):
    schema_name = "ActionClimbEdge"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionClimbEdge
        return ActionClimbEdge(entlib.load_node_file(sourcefile, entlib.get_schema(ActionClimbEdge.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionClimbEdge
        return ActionClimbEdge(entlib.make_node(ActionClimbEdge.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def ledgePosInfo(self):  # type: ()->LedgePositionInfo
        return LedgePositionInfo(self._node.at("ledgePosInfo"))
    @property
    def locomotionMode(self):  # type: ()->LocomotionMode
        return LocomotionMode(self._node.at("locomotionMode"))
    @locomotionMode.setter
    def locomotionMode(self, val): self.locomotionMode.set(val)
    @property
    def wasFalling(self):  # type: ()->Bool
        return Bool(self._node.at("wasFalling"))
    @wasFalling.setter
    def wasFalling(self, val): self.wasFalling.set(val)
    pass


from EntityLibPy import Node

class ActionClamberRise(HelperObject):
    schema_name = "ActionClamberRise"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionClamberRise
        return ActionClamberRise(entlib.load_node_file(sourcefile, entlib.get_schema(ActionClamberRise.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionClamberRise
        return ActionClamberRise(entlib.make_node(ActionClamberRise.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionClamberMove(HelperObject):
    schema_name = "ActionClamberMove"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionClamberMove
        return ActionClamberMove(entlib.load_node_file(sourcefile, entlib.get_schema(ActionClamberMove.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionClamberMove
        return ActionClamberMove(entlib.make_node(ActionClamberMove.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionClamberLand(HelperObject):
    schema_name = "ActionClamberLand"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionClamberLand
        return ActionClamberLand(entlib.load_node_file(sourcefile, entlib.get_schema(ActionClamberLand.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionClamberLand
        return ActionClamberLand(entlib.make_node(ActionClamberLand.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionClamberJumpOff(HelperObject):
    schema_name = "ActionClamberJumpOff"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionClamberJumpOff
        return ActionClamberJumpOff(entlib.load_node_file(sourcefile, entlib.get_schema(ActionClamberJumpOff.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionClamberJumpOff
        return ActionClamberJumpOff(entlib.make_node(ActionClamberJumpOff.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionClamberJump(HelperObject):
    schema_name = "ActionClamberJump"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionClamberJump
        return ActionClamberJump(entlib.load_node_file(sourcefile, entlib.get_schema(ActionClamberJump.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionClamberJump
        return ActionClamberJump(entlib.make_node(ActionClamberJump.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionClamberDropOff(HelperObject):
    schema_name = "ActionClamberDropOff"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionClamberDropOff
        return ActionClamberDropOff(entlib.load_node_file(sourcefile, entlib.get_schema(ActionClamberDropOff.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionClamberDropOff
        return ActionClamberDropOff(entlib.make_node(ActionClamberDropOff.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionCinematic(HelperObject):
    schema_name = "ActionCinematic"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionCinematic
        return ActionCinematic(entlib.load_node_file(sourcefile, entlib.get_schema(ActionCinematic.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionCinematic
        return ActionCinematic(entlib.make_node(ActionCinematic.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionChosen(HelperObject):
    schema_name = "ActionChosen"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionChosen
        return ActionChosen(entlib.load_node_file(sourcefile, entlib.get_schema(ActionChosen.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionChosen
        return ActionChosen(entlib.make_node(ActionChosen.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ExitRequired(self):  # type: ()->Bool
        return Bool(self._node.at("ExitRequired"))
    @ExitRequired.setter
    def ExitRequired(self, val): self.ExitRequired.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionChangeRidingSpot(HelperObject):
    schema_name = "ActionChangeRidingSpot"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionChangeRidingSpot
        return ActionChangeRidingSpot(entlib.load_node_file(sourcefile, entlib.get_schema(ActionChangeRidingSpot.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionChangeRidingSpot
        return ActionChangeRidingSpot(entlib.make_node(ActionChangeRidingSpot.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def TargetHotspotDestID(self):  # type: ()->Int
        return Int(self._node.at("TargetHotspotDestID"))
    @TargetHotspotDestID.setter
    def TargetHotspotDestID(self, val): self.TargetHotspotDestID.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionChangeMount(HelperObject):
    schema_name = "ActionChangeMount"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionChangeMount
        return ActionChangeMount(entlib.load_node_file(sourcefile, entlib.get_schema(ActionChangeMount.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionChangeMount
        return ActionChangeMount(entlib.make_node(ActionChangeMount.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def UseSlowMotion(self):  # type: ()->Bool
        return Bool(self._node.at("UseSlowMotion"))
    @UseSlowMotion.setter
    def UseSlowMotion(self, val): self.UseSlowMotion.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionCentrifugal(HelperObject):
    schema_name = "ActionCentrifugal"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionCentrifugal
        return ActionCentrifugal(entlib.load_node_file(sourcefile, entlib.get_schema(ActionCentrifugal.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionCentrifugal
        return ActionCentrifugal(entlib.make_node(ActionCentrifugal.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionCallForHelp(HelperObject):
    schema_name = "ActionCallForHelp"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionCallForHelp
        return ActionCallForHelp(entlib.load_node_file(sourcefile, entlib.get_schema(ActionCallForHelp.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionCallForHelp
        return ActionCallForHelp(entlib.make_node(ActionCallForHelp.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionBreakableHit(HelperObject):
    schema_name = "ActionBreakableHit"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionBreakableHit
        return ActionBreakableHit(entlib.load_node_file(sourcefile, entlib.get_schema(ActionBreakableHit.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionBreakableHit
        return ActionBreakableHit(entlib.make_node(ActionBreakableHit.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionBrake(HelperObject):
    schema_name = "ActionBrake"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionBrake
        return ActionBrake(entlib.load_node_file(sourcefile, entlib.get_schema(ActionBrake.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionBrake
        return ActionBrake(entlib.make_node(ActionBrake.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionBittenState(HelperObject):
    schema_name = "ActionBittenState"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionBittenState
        return ActionBittenState(entlib.load_node_file(sourcefile, entlib.get_schema(ActionBittenState.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionBittenState
        return ActionBittenState(entlib.make_node(ActionBittenState.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionBiteOut(HelperObject):
    schema_name = "ActionBiteOut"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionBiteOut
        return ActionBiteOut(entlib.load_node_file(sourcefile, entlib.get_schema(ActionBiteOut.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionBiteOut
        return ActionBiteOut(entlib.make_node(ActionBiteOut.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionBiteIn(HelperObject):
    schema_name = "ActionBiteIn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionBiteIn
        return ActionBiteIn(entlib.load_node_file(sourcefile, entlib.get_schema(ActionBiteIn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionBiteIn
        return ActionBiteIn(entlib.make_node(ActionBiteIn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionBite(HelperObject):
    schema_name = "ActionBite"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionBite
        return ActionBite(entlib.load_node_file(sourcefile, entlib.get_schema(ActionBite.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionBite
        return ActionBite(entlib.make_node(ActionBite.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionAttackStomp(HelperObject):
    schema_name = "ActionAttackStomp"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionAttackStomp
        return ActionAttackStomp(entlib.load_node_file(sourcefile, entlib.get_schema(ActionAttackStomp.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionAttackStomp
        return ActionAttackStomp(entlib.make_node(ActionAttackStomp.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionAttackJumpOnto(HelperObject):
    schema_name = "ActionAttackJumpOnto"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionAttackJumpOnto
        return ActionAttackJumpOnto(entlib.load_node_file(sourcefile, entlib.get_schema(ActionAttackJumpOnto.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionAttackJumpOnto
        return ActionAttackJumpOnto(entlib.make_node(ActionAttackJumpOnto.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class ActorCategoryEnum(Enum):
    CATEGORY_All = "CATEGORY_All"
    CATEGORY_Action = "CATEGORY_Action"
    CATEGORY_AnimationLegConstraint = "CATEGORY_AnimationLegConstraint"
    CATEGORY_ActionAttack = "CATEGORY_ActionAttack"
    CATEGORY_Attitude = "CATEGORY_Attitude"
    CATEGORY_Context = "CATEGORY_Context"
    CATEGORY_Control = "CATEGORY_Control"
    CATEGORY_ActionCosmetic = "CATEGORY_ActionCosmetic"
    CATEGORY_ActionDamage = "CATEGORY_ActionDamage"
    CATEGORY_ActionDefault = "CATEGORY_ActionDefault"
    CATEGORY_ActionDie = "CATEGORY_ActionDie"
    CATEGORY_Environment = "CATEGORY_Environment"
    CATEGORY_Fall = "CATEGORY_Fall"
    CATEGORY_Hint = "CATEGORY_Hint"
    CATEGORY_LookAt = "CATEGORY_LookAt"
    CATEGORY_ActionJump = "CATEGORY_ActionJump"
    CATEGORY_ActionLand = "CATEGORY_ActionLand"
    CATEGORY_Life = "CATEGORY_Life"
    CATEGORY_Locomotion = "CATEGORY_Locomotion"
    CATEGORY_ActionMove = "CATEGORY_ActionMove"
    CATEGORY_Persistent = "CATEGORY_Persistent"
    CATEGORY_Purgatory = "CATEGORY_Purgatory"
    CATEGORY_ActionSlide = "CATEGORY_ActionSlide"
    CATEGORY_ActionStop = "CATEGORY_ActionStop"
    CATEGORY_ActionStrafe = "CATEGORY_ActionStrafe"
    CATEGORY_Transition = "CATEGORY_Transition"
    CATEGORY_Trigger = "CATEGORY_Trigger"
    CATEGORY_ActionWingFlutter = "CATEGORY_ActionWingFlutter"
    CATEGORY_Health = "CATEGORY_Health"
    CATEGORY_HealthAlive = "CATEGORY_HealthAlive"
    CATEGORY_HealthDead = "CATEGORY_HealthDead"
    CATEGORY_Regeneration = "CATEGORY_Regeneration"
    CATEGORY_EntitySwitchTransition = "CATEGORY_EntitySwitchTransition"
    CATEGORY_EnergyRoot = "CATEGORY_EnergyRoot"
    CATEGORY_EnergySpout = "CATEGORY_EnergySpout"
    CATEGORY_GPE = "CATEGORY_GPE"
    CATEGORY_Hatching = "CATEGORY_Hatching"
    ActorCategory_COUNT = "ActorCategory_COUNT"


class ActorCategory(Primitive[ActorCategoryEnum]):  # Enum
    def __init__(self, node):
        super(ActorCategory, self).__init__(ActorCategoryEnum, node)
    schema_name = "ActorCategory"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> ActorCategory
        return ActorCategory(node)
    def set(self, val):  # type: (ActorCategoryEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class ConditionalRigidityAttribute_Conditions(HelperObject):
    schema_name = "ConditionalRigidityAttribute::Conditions"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ConditionalRigidityAttribute_Conditions
        return ConditionalRigidityAttribute_Conditions(entlib.load_node_file(sourcefile, entlib.get_schema(ConditionalRigidityAttribute_Conditions.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ConditionalRigidityAttribute_Conditions
        return ConditionalRigidityAttribute_Conditions(entlib.make_node(ConditionalRigidityAttribute_Conditions.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActorCategories(self):  # type: ()->PrimArray[ActorCategory]
        return (lambda n: PrimArray(ActorCategory, n))(self._node.at("ActorCategories"))
    @ActorCategories.setter
    def ActorCategories(self, val): self.ActorCategories.set(val)
    @property
    def ActorStates(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("ActorStates"))
    @ActorStates.setter
    def ActorStates(self, val): self.ActorStates.set(val)
    @property
    def AngularVelocityFactorRange(self):  # type: ()->Vector2
        return Vector2(self._node.at("AngularVelocityFactorRange"))
    @AngularVelocityFactorRange.setter
    def AngularVelocityFactorRange(self, val): self.AngularVelocityFactorRange.set(val)
    @property
    def DirectionDotRange(self):  # type: ()->Vector2
        return Vector2(self._node.at("DirectionDotRange"))
    @DirectionDotRange.setter
    def DirectionDotRange(self, val): self.DirectionDotRange.set(val)
    @property
    def LinearVelocityFactorRange(self):  # type: ()->Vector2
        return Vector2(self._node.at("LinearVelocityFactorRange"))
    @LinearVelocityFactorRange.setter
    def LinearVelocityFactorRange(self, val): self.LinearVelocityFactorRange.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ConditionalRigidityAttribute(HelperObject):
    schema_name = "ConditionalRigidityAttribute"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ConditionalRigidityAttribute
        return ConditionalRigidityAttribute(entlib.load_node_file(sourcefile, entlib.get_schema(ConditionalRigidityAttribute.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ConditionalRigidityAttribute
        return ConditionalRigidityAttribute(entlib.make_node(ConditionalRigidityAttribute.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Attributes(self):  # type: ()->ConditionalRigidityAttribute_Attributes
        return ConditionalRigidityAttribute_Attributes(self._node.at("Attributes"))
    @property
    def Conditions(self):  # type: ()->ConditionalRigidityAttribute_Conditions
        return ConditionalRigidityAttribute_Conditions(self._node.at("Conditions"))
    @property
    def Default(self):  # type: ()->Bool
        return Bool(self._node.at("Default"))
    @Default.setter
    def Default(self, val): self.Default.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimationTailConstraintsGD(HelperObject):
    schema_name = "AnimationTailConstraintsGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationTailConstraintsGD
        return AnimationTailConstraintsGD(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationTailConstraintsGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationTailConstraintsGD
        return AnimationTailConstraintsGD(entlib.make_node(AnimationTailConstraintsGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AngularSpeedMaxForSpeedModeFurious(self):  # type: ()->Float
        return Float(self._node.at("AngularSpeedMaxForSpeedModeFurious"))
    @AngularSpeedMaxForSpeedModeFurious.setter
    def AngularSpeedMaxForSpeedModeFurious(self, val): self.AngularSpeedMaxForSpeedModeFurious.set(val)
    @property
    def AngularSpeedMaxForSpeedModeNone(self):  # type: ()->Float
        return Float(self._node.at("AngularSpeedMaxForSpeedModeNone"))
    @AngularSpeedMaxForSpeedModeNone.setter
    def AngularSpeedMaxForSpeedModeNone(self, val): self.AngularSpeedMaxForSpeedModeNone.set(val)
    @property
    def BoneInjectDirectionFromUseAmplitudeFactor(self):  # type: ()->Bool
        return Bool(self._node.at("BoneInjectDirectionFromUseAmplitudeFactor"))
    @BoneInjectDirectionFromUseAmplitudeFactor.setter
    def BoneInjectDirectionFromUseAmplitudeFactor(self, val): self.BoneInjectDirectionFromUseAmplitudeFactor.set(val)
    @property
    def BoneNameEnd(self):  # type: ()->String
        return String(self._node.at("BoneNameEnd"))
    @BoneNameEnd.setter
    def BoneNameEnd(self, val): self.BoneNameEnd.set(val)
    @property
    def BoneNameInjectDirectionFrom(self):  # type: ()->String
        return String(self._node.at("BoneNameInjectDirectionFrom"))
    @BoneNameInjectDirectionFrom.setter
    def BoneNameInjectDirectionFrom(self, val): self.BoneNameInjectDirectionFrom.set(val)
    @property
    def BoneNameStart(self):  # type: ()->String
        return String(self._node.at("BoneNameStart"))
    @BoneNameStart.setter
    def BoneNameStart(self, val): self.BoneNameStart.set(val)
    @property
    def Colliders(self):  # type: ()->Array[Collider]
        return (lambda n: Array(Collider, n))(self._node.at("Colliders"))
    @property
    def CollidersRadiusFactorGrounded(self):  # type: ()->Float
        return Float(self._node.at("CollidersRadiusFactorGrounded"))
    @CollidersRadiusFactorGrounded.setter
    def CollidersRadiusFactorGrounded(self, val): self.CollidersRadiusFactorGrounded.set(val)
    @property
    def CompensateSegmentStretchFactor(self):  # type: ()->Float
        return Float(self._node.at("CompensateSegmentStretchFactor"))
    @CompensateSegmentStretchFactor.setter
    def CompensateSegmentStretchFactor(self, val): self.CompensateSegmentStretchFactor.set(val)
    @property
    def ConditionalRigidityAttributes(self):  # type: ()->Array[ConditionalRigidityAttribute]
        return (lambda n: Array(ConditionalRigidityAttribute, n))(self._node.at("ConditionalRigidityAttributes"))
    @property
    def StickToGrounds(self):  # type: ()->Array[StickToGround]
        return (lambda n: Array(StickToGround, n))(self._node.at("StickToGrounds"))
    @property
    def StickToGroundsGravity(self):  # type: ()->Float
        return Float(self._node.at("StickToGroundsGravity"))
    @StickToGroundsGravity.setter
    def StickToGroundsGravity(self, val): self.StickToGroundsGravity.set(val)
    @property
    def StickToGroundsGravityUnderwater(self):  # type: ()->Float
        return Float(self._node.at("StickToGroundsGravityUnderwater"))
    @StickToGroundsGravityUnderwater.setter
    def StickToGroundsGravityUnderwater(self, val): self.StickToGroundsGravityUnderwater.set(val)
    @property
    def StickToGroundsRadiusFactorDead(self):  # type: ()->Float
        return Float(self._node.at("StickToGroundsRadiusFactorDead"))
    @StickToGroundsRadiusFactorDead.setter
    def StickToGroundsRadiusFactorDead(self, val): self.StickToGroundsRadiusFactorDead.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class ActorAbilityEnum(Enum):
    landing = "landing"
    crouch = "crouch"
    fly = "fly"
    ride = "ride"
    dive = "dive"
    stinky = "stinky"
    ActorAbility_COUNT = "ActorAbility_COUNT"


class ActorAbility(Primitive[ActorAbilityEnum]):  # Enum
    def __init__(self, node):
        super(ActorAbility, self).__init__(ActorAbilityEnum, node)
    schema_name = "ActorAbility"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> ActorAbility
        return ActorAbility(node)
    def set(self, val):  # type: (ActorAbilityEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class ActionTurn_Inputs(HelperObject):
    schema_name = "ActionTurn::Inputs"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionTurn_Inputs
        return ActionTurn_Inputs(entlib.load_node_file(sourcefile, entlib.get_schema(ActionTurn_Inputs.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionTurn_Inputs
        return ActionTurn_Inputs(entlib.make_node(ActionTurn_Inputs.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def checkDir(self):  # type: ()->Bool
        return Bool(self._node.at("checkDir"))
    @checkDir.setter
    def checkDir(self, val): self.checkDir.set(val)
    @property
    def directionREQUIRED(self):  # type: ()->Vector3
        return Vector3(self._node.at("directionREQUIRED"))
    @directionREQUIRED.setter
    def directionREQUIRED(self, val): self.directionREQUIRED.set(val)
    @property
    def speedModeUpdateAllowed(self):  # type: ()->Bool
        return Bool(self._node.at("speedModeUpdateAllowed"))
    @speedModeUpdateAllowed.setter
    def speedModeUpdateAllowed(self, val): self.speedModeUpdateAllowed.set(val)
    @property
    def useRequest(self):  # type: ()->Bool
        return Bool(self._node.at("useRequest"))
    @useRequest.setter
    def useRequest(self, val): self.useRequest.set(val)
    pass


from EntityLibPy import Node

class ActionTurn(HelperObject):
    schema_name = "ActionTurn"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionTurn
        return ActionTurn(entlib.load_node_file(sourcefile, entlib.get_schema(ActionTurn.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionTurn
        return ActionTurn(entlib.make_node(ActionTurn.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def animTag(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("animTag"))
    @animTag.setter
    def animTag(self, val): self.animTag.set(val)
    @property
    def direction(self):  # type: ()->Vector3
        return Vector3(self._node.at("direction"))
    @direction.setter
    def direction(self, val): self.direction.set(val)
    @property
    def inputs(self):  # type: ()->ActionTurn_Inputs
        return ActionTurn_Inputs(self._node.at("inputs"))
    @property
    def speedAtStart(self):  # type: ()->Float
        return Float(self._node.at("speedAtStart"))
    @speedAtStart.setter
    def speedAtStart(self, val): self.speedAtStart.set(val)
    @property
    def speedModeRequired(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("speedModeRequired"))
    @speedModeRequired.setter
    def speedModeRequired(self, val): self.speedModeRequired.set(val)
    @property
    def speedModeStart(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("speedModeStart"))
    @speedModeStart.setter
    def speedModeStart(self, val): self.speedModeStart.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_StateStateDecision(HelperObject):
    schema_name = "ActionStateArbiter::StateStateDecision"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_StateStateDecision
        return ActionStateArbiter_StateStateDecision(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_StateStateDecision.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_StateStateDecision
        return ActionStateArbiter_StateStateDecision(entlib.make_node(ActionStateArbiter_StateStateDecision.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Current(self):  # type: ()->String
        return String(self._node.at("Current"))
    @Current.setter
    def Current(self, val): self.Current.set(val)
    @property
    def Decision(self):  # type: ()->ActorStateArbiterDecision
        return ActorStateArbiterDecision(self._node.at("Decision"))
    @Decision.setter
    def Decision(self, val): self.Decision.set(val)
    @property
    def New(self):  # type: ()->String
        return String(self._node.at("New"))
    @New.setter
    def New(self, val): self.New.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_StateStateDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::StateStateDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_StateStateDecisionPass
        return ActionStateArbiter_StateStateDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_StateStateDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_StateStateDecisionPass
        return ActionStateArbiter_StateStateDecisionPass(entlib.make_node(ActionStateArbiter_StateStateDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_StateStateDecision]
        return (lambda n: Array(ActionStateArbiter_StateStateDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_StateOrderPass(HelperObject):
    schema_name = "ActionStateArbiter::StateOrderPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_StateOrderPass
        return ActionStateArbiter_StateOrderPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_StateOrderPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_StateOrderPass
        return ActionStateArbiter_StateOrderPass(entlib.make_node(ActionStateArbiter_StateOrderPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Order(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("Order"))
    @Order.setter
    def Order(self, val): self.Order.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_StateCategoryDecision(HelperObject):
    schema_name = "ActionStateArbiter::StateCategoryDecision"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_StateCategoryDecision
        return ActionStateArbiter_StateCategoryDecision(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_StateCategoryDecision.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_StateCategoryDecision
        return ActionStateArbiter_StateCategoryDecision(entlib.make_node(ActionStateArbiter_StateCategoryDecision.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Current(self):  # type: ()->String
        return String(self._node.at("Current"))
    @Current.setter
    def Current(self, val): self.Current.set(val)
    @property
    def Decision(self):  # type: ()->ActorStateArbiterDecision
        return ActorStateArbiterDecision(self._node.at("Decision"))
    @Decision.setter
    def Decision(self, val): self.Decision.set(val)
    @property
    def New(self):  # type: ()->String
        return String(self._node.at("New"))
    @New.setter
    def New(self, val): self.New.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_StateCategoryDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::StateCategoryDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_StateCategoryDecisionPass
        return ActionStateArbiter_StateCategoryDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_StateCategoryDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_StateCategoryDecisionPass
        return ActionStateArbiter_StateCategoryDecisionPass(entlib.make_node(ActionStateArbiter_StateCategoryDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_StateCategoryDecision]
        return (lambda n: Array(ActionStateArbiter_StateCategoryDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_StateAllDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::StateAllDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_StateAllDecisionPass
        return ActionStateArbiter_StateAllDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_StateAllDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_StateAllDecisionPass
        return ActionStateArbiter_StateAllDecisionPass(entlib.make_node(ActionStateArbiter_StateAllDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_StateCategoryDecision]
        return (lambda n: Array(ActionStateArbiter_StateCategoryDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_CategoryStateDecision(HelperObject):
    schema_name = "ActionStateArbiter::CategoryStateDecision"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_CategoryStateDecision
        return ActionStateArbiter_CategoryStateDecision(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_CategoryStateDecision.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_CategoryStateDecision
        return ActionStateArbiter_CategoryStateDecision(entlib.make_node(ActionStateArbiter_CategoryStateDecision.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Current(self):  # type: ()->String
        return String(self._node.at("Current"))
    @Current.setter
    def Current(self, val): self.Current.set(val)
    @property
    def Decision(self):  # type: ()->ActorStateArbiterDecision
        return ActorStateArbiterDecision(self._node.at("Decision"))
    @Decision.setter
    def Decision(self, val): self.Decision.set(val)
    @property
    def New(self):  # type: ()->String
        return String(self._node.at("New"))
    @New.setter
    def New(self, val): self.New.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_CategoryStateDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::CategoryStateDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_CategoryStateDecisionPass
        return ActionStateArbiter_CategoryStateDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_CategoryStateDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_CategoryStateDecisionPass
        return ActionStateArbiter_CategoryStateDecisionPass(entlib.make_node(ActionStateArbiter_CategoryStateDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_CategoryStateDecision]
        return (lambda n: Array(ActionStateArbiter_CategoryStateDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_CategoryOrderPass(HelperObject):
    schema_name = "ActionStateArbiter::CategoryOrderPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_CategoryOrderPass
        return ActionStateArbiter_CategoryOrderPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_CategoryOrderPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_CategoryOrderPass
        return ActionStateArbiter_CategoryOrderPass(entlib.make_node(ActionStateArbiter_CategoryOrderPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Order(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("Order"))
    @Order.setter
    def Order(self, val): self.Order.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_CategoryCategoryDecision(HelperObject):
    schema_name = "ActionStateArbiter::CategoryCategoryDecision"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_CategoryCategoryDecision
        return ActionStateArbiter_CategoryCategoryDecision(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_CategoryCategoryDecision.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_CategoryCategoryDecision
        return ActionStateArbiter_CategoryCategoryDecision(entlib.make_node(ActionStateArbiter_CategoryCategoryDecision.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Current(self):  # type: ()->String
        return String(self._node.at("Current"))
    @Current.setter
    def Current(self, val): self.Current.set(val)
    @property
    def Decision(self):  # type: ()->ActorStateArbiterDecision
        return ActorStateArbiterDecision(self._node.at("Decision"))
    @Decision.setter
    def Decision(self, val): self.Decision.set(val)
    @property
    def New(self):  # type: ()->String
        return String(self._node.at("New"))
    @New.setter
    def New(self, val): self.New.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_PairDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::PairDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_PairDecisionPass
        return ActionStateArbiter_PairDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_PairDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_PairDecisionPass
        return ActionStateArbiter_PairDecisionPass(entlib.make_node(ActionStateArbiter_PairDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_CategoryCategoryDecision]
        return (lambda n: Array(ActionStateArbiter_CategoryCategoryDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_CategoryCategoryDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::CategoryCategoryDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_CategoryCategoryDecisionPass
        return ActionStateArbiter_CategoryCategoryDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_CategoryCategoryDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_CategoryCategoryDecisionPass
        return ActionStateArbiter_CategoryCategoryDecisionPass(entlib.make_node(ActionStateArbiter_CategoryCategoryDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_CategoryCategoryDecision]
        return (lambda n: Array(ActionStateArbiter_CategoryCategoryDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_CategoryAllDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::CategoryAllDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_CategoryAllDecisionPass
        return ActionStateArbiter_CategoryAllDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_CategoryAllDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_CategoryAllDecisionPass
        return ActionStateArbiter_CategoryAllDecisionPass(entlib.make_node(ActionStateArbiter_CategoryAllDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_CategoryCategoryDecision]
        return (lambda n: Array(ActionStateArbiter_CategoryCategoryDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_AllStateDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::AllStateDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_AllStateDecisionPass
        return ActionStateArbiter_AllStateDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_AllStateDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_AllStateDecisionPass
        return ActionStateArbiter_AllStateDecisionPass(entlib.make_node(ActionStateArbiter_AllStateDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_CategoryStateDecision]
        return (lambda n: Array(ActionStateArbiter_CategoryStateDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_AllCategoryDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::AllCategoryDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_AllCategoryDecisionPass
        return ActionStateArbiter_AllCategoryDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_AllCategoryDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_AllCategoryDecisionPass
        return ActionStateArbiter_AllCategoryDecisionPass(entlib.make_node(ActionStateArbiter_AllCategoryDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_CategoryCategoryDecision]
        return (lambda n: Array(ActionStateArbiter_CategoryCategoryDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter_AllAllDecisionPass(HelperObject):
    schema_name = "ActionStateArbiter::AllAllDecisionPass"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter_AllAllDecisionPass
        return ActionStateArbiter_AllAllDecisionPass(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter_AllAllDecisionPass.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter_AllAllDecisionPass
        return ActionStateArbiter_AllAllDecisionPass(entlib.make_node(ActionStateArbiter_AllAllDecisionPass.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Decisions(self):  # type: ()->Array[ActionStateArbiter_CategoryCategoryDecision]
        return (lambda n: Array(ActionStateArbiter_CategoryCategoryDecision, n))(self._node.at("Decisions"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStateArbiter(HelperObject):
    schema_name = "ActionStateArbiter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStateArbiter
        return ActionStateArbiter(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStateArbiter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStateArbiter
        return ActionStateArbiter(entlib.make_node(ActionStateArbiter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AllAll(self):  # type: ()->ActionStateArbiter_AllAllDecisionPass
        return ActionStateArbiter_AllAllDecisionPass(self._node.at("AllAll"))
    @property
    def AllCategory(self):  # type: ()->ActionStateArbiter_AllCategoryDecisionPass
        return ActionStateArbiter_AllCategoryDecisionPass(self._node.at("AllCategory"))
    @property
    def AllState(self):  # type: ()->ActionStateArbiter_AllStateDecisionPass
        return ActionStateArbiter_AllStateDecisionPass(self._node.at("AllState"))
    @property
    def CategoryAll(self):  # type: ()->ActionStateArbiter_CategoryAllDecisionPass
        return ActionStateArbiter_CategoryAllDecisionPass(self._node.at("CategoryAll"))
    @property
    def CategoryCategory(self):  # type: ()->ActionStateArbiter_CategoryCategoryDecisionPass
        return ActionStateArbiter_CategoryCategoryDecisionPass(self._node.at("CategoryCategory"))
    @property
    def CategoryNeedingRelay(self):  # type: ()->PrimArray[ActorCategory]
        return (lambda n: PrimArray(ActorCategory, n))(self._node.at("CategoryNeedingRelay"))
    @CategoryNeedingRelay.setter
    def CategoryNeedingRelay(self, val): self.CategoryNeedingRelay.set(val)
    @property
    def CategoryOrder(self):  # type: ()->ActionStateArbiter_CategoryOrderPass
        return ActionStateArbiter_CategoryOrderPass(self._node.at("CategoryOrder"))
    @property
    def CategoryState(self):  # type: ()->ActionStateArbiter_CategoryStateDecisionPass
        return ActionStateArbiter_CategoryStateDecisionPass(self._node.at("CategoryState"))
    @property
    def Pair(self):  # type: ()->ActionStateArbiter_PairDecisionPass
        return ActionStateArbiter_PairDecisionPass(self._node.at("Pair"))
    @property
    def StateAll(self):  # type: ()->ActionStateArbiter_StateAllDecisionPass
        return ActionStateArbiter_StateAllDecisionPass(self._node.at("StateAll"))
    @property
    def StateCategory(self):  # type: ()->ActionStateArbiter_StateCategoryDecisionPass
        return ActionStateArbiter_StateCategoryDecisionPass(self._node.at("StateCategory"))
    @property
    def StateOrder(self):  # type: ()->ActionStateArbiter_StateOrderPass
        return ActionStateArbiter_StateOrderPass(self._node.at("StateOrder"))
    @property
    def StateState(self):  # type: ()->ActionStateArbiter_StateStateDecisionPass
        return ActionStateArbiter_StateStateDecisionPass(self._node.at("StateState"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionStackFilter(HelperObject):
    schema_name = "ActionStackFilter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStackFilter
        return ActionStackFilter(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStackFilter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStackFilter
        return ActionStackFilter(entlib.make_node(ActionStackFilter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class ActionStackFilterRide(HelperObject):
    schema_name = "ActionStackFilterRide"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionStackFilterRide
        return ActionStackFilterRide(entlib.load_node_file(sourcefile, entlib.get_schema(ActionStackFilterRide.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionStackFilterRide
        return ActionStackFilterRide(entlib.make_node(ActionStackFilterRide.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActionStackFilter
        return ActionStackFilter(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionShakeOffInputs(HelperObject):
    schema_name = "ActionShakeOffInputs"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionShakeOffInputs
        return ActionShakeOffInputs(entlib.load_node_file(sourcefile, entlib.get_schema(ActionShakeOffInputs.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionShakeOffInputs
        return ActionShakeOffInputs(entlib.make_node(ActionShakeOffInputs.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def TryEjectAllBiters(self):  # type: ()->Bool
        return Bool(self._node.at("TryEjectAllBiters"))
    @TryEjectAllBiters.setter
    def TryEjectAllBiters(self, val): self.TryEjectAllBiters.set(val)
    @property
    def UseRandomDirection(self):  # type: ()->Bool
        return Bool(self._node.at("UseRandomDirection"))
    @UseRandomDirection.setter
    def UseRandomDirection(self, val): self.UseRandomDirection.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionShakeOff(HelperObject):
    schema_name = "ActionShakeOff"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionShakeOff
        return ActionShakeOff(entlib.load_node_file(sourcefile, entlib.get_schema(ActionShakeOff.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionShakeOff
        return ActionShakeOff(entlib.make_node(ActionShakeOff.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Inputs(self):  # type: ()->ActionShakeOffInputs
        return ActionShakeOffInputs(self._node.at("Inputs"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class ActionModeEnum(Enum):
    noaction = "noaction"
    attack = "attack"
    attackjump = "attackjump"
    attackunmount = "attackunmount"
    attackcharged = "attackcharged"
    attackpush = "attackpush"
    attackuppercut = "attackuppercut"
    attackjumpuppercut = "attackjumpuppercut"
    attackjumponto = "attackjumponto"
    bite = "bite"
    stun = "stun"
    collapse = "collapse"
    throw_ = "throw"
    respawn = "respawn"
    incarnate = "incarnate"
    incarnated = "incarnated"
    hit = "hit"
    hitwall = "hitwall"
    hitjump = "hitjump"
    landing = "landing"
    landingfail = "landingfail"
    landingcatapult = "landingcatapult"
    landingrecover = "landingrecover"
    landingdamage = "landingdamage"
    landingdying = "landingdying"
    landingtree = "landingtree"
    jumpmount = "jumpmount"
    fallin = "fallin"
    landingmount = "landingmount"
    soul = "soul"
    mountreception = "mountreception"
    changeridingspot = "changeridingspot"
    goingtomountstate = "goingtomountstate"
    mount = "mount"
    unmount = "unmount"
    flap = "flap"
    flystop = "flystop"
    flapfast = "flapfast"
    turn = "turn"
    turnfromspeed0 = "turnfromspeed0"
    turnfromspeed1 = "turnfromspeed1"
    turnfromspeed2 = "turnfromspeed2"
    turnfromspeed3 = "turnfromspeed3"
    jump = "jump"
    jumpoff = "jumpoff"
    doublejump = "doublejump"
    regenerate = "regenerate"
    drift = "drift"
    wait = "wait"
    chosen = "chosen"
    revive = "revive"
    revivemaskeffect = "revivemaskeffect"
    shakeoff = "shakeoff"
    convert = "convert"
    drop = "drop"
    landingdrop = "landingdrop"
    dropoff = "dropoff"
    start = "start"
    reachspeed3 = "reachspeed3"
    strafe = "strafe"
    strafeturn = "strafeturn"
    slide = "slide"
    slope = "slope"
    forceagainstslope = "forceagainstslope"
    patinate = "patinate"
    climb = "climb"
    call = "call"
    callanswer = "callanswer"
    scream = "scream"
    taunt = "taunt"
    sink = "sink"
    shoot = "shoot"
    reload = "reload"
    stop = "stop"
    rise = "rise"
    centrifugal = "centrifugal"
    climbedgehead = "climbedgehead"
    climbedgehips = "climbedgehips"
    climbedgefoot = "climbedgefoot"
    jumpedge = "jumpedge"
    catapult = "catapult"
    sleep = "sleep"
    head = "head"
    chest = "chest"
    ascendpurgatory = "ascendpurgatory"
    purgatory = "purgatory"
    stung = "stung"
    riderstance = "riderstance"
    drawweapon = "drawweapon"
    levitate = "levitate"
    levitatemove = "levitatemove"
    aim = "aim"
    aimcharge = "aimcharge"
    aimcharged = "aimcharged"
    aimflow = "aimflow"
    shootcharged = "shootcharged"
    shootchargedlight = "shootchargedlight"
    shootchargedmedium = "shootchargedmedium"
    shootchargedbig = "shootchargedbig"
    emptyshoot = "emptyshoot"
    attackstomp = "attackstomp"
    requestwait = "requestwait"
    requestheal = "requestheal"
    quadstandupin = "quadstandupin"
    standupin = "standupin"
    diguptreasure = "diguptreasure"
    swimin = "swimin"
    swimlanding = "swimlanding"
    duck = "duck"
    recover = "recover"
    happy = "happy"
    underground = "underground"
    spawn = "spawn"
    unspawn = "unspawn"
    dance = "dance"
    askstaffguide = "askstaffguide"
    hintfull = "hintfull"
    hintlight = "hintlight"
    hintnone = "hintnone"
    hatching = "hatching"
    dying = "dying"
    followerorder = "followerorder"
    ultimateattack = "ultimateattack"
    ultimateattacked = "ultimateattacked"
    parry = "parry"
    romlookat = "romlookat"
    emoteshame = "emoteshame"
    emotecrazy = "emotecrazy"
    emotetaunt = "emotetaunt"
    emoteproud = "emoteproud"
    emotemenace = "emotemenace"
    emotehello = "emotehello"
    emoteimpatience = "emoteimpatience"
    ActionMode_COUNT = "ActionMode_COUNT"


class ActionMode(Primitive[ActionModeEnum]):  # Enum
    def __init__(self, node):
        super(ActionMode, self).__init__(ActionModeEnum, node)
    schema_name = "ActionMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> ActionMode
        return ActionMode(node)
    def set(self, val):  # type: (ActionModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class InGameCameraParams(HelperObject):
    schema_name = "InGameCameraParams"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InGameCameraParams
        return InGameCameraParams(entlib.load_node_file(sourcefile, entlib.get_schema(InGameCameraParams.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InGameCameraParams
        return InGameCameraParams(entlib.make_node(InGameCameraParams.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActivationDelay(self):  # type: ()->Float
        return Float(self._node.at("ActivationDelay"))
    @ActivationDelay.setter
    def ActivationDelay(self, val): self.ActivationDelay.set(val)
    @property
    def AnimAction(self):  # type: ()->ActionMode
        return ActionMode(self._node.at("AnimAction"))
    @AnimAction.setter
    def AnimAction(self, val): self.AnimAction.set(val)
    @property
    def AnimTag(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("AnimTag"))
    @AnimTag.setter
    def AnimTag(self, val): self.AnimTag.set(val)
    @property
    def AnticipationCameraSightTime(self):  # type: ()->Float
        return Float(self._node.at("AnticipationCameraSightTime"))
    @AnticipationCameraSightTime.setter
    def AnticipationCameraSightTime(self, val): self.AnticipationCameraSightTime.set(val)
    @property
    def AnticipationForceReset(self):  # type: ()->Bool
        return Bool(self._node.at("AnticipationForceReset"))
    @AnticipationForceReset.setter
    def AnticipationForceReset(self, val): self.AnticipationForceReset.set(val)
    @property
    def AnticipationMaxPitch(self):  # type: ()->Float
        return Float(self._node.at("AnticipationMaxPitch"))
    @AnticipationMaxPitch.setter
    def AnticipationMaxPitch(self, val): self.AnticipationMaxPitch.set(val)
    @property
    def AnticipationMaxYaw(self):  # type: ()->Float
        return Float(self._node.at("AnticipationMaxYaw"))
    @AnticipationMaxYaw.setter
    def AnticipationMaxYaw(self, val): self.AnticipationMaxYaw.set(val)
    @property
    def AnticipationNoMoveLock(self):  # type: ()->Bool
        return Bool(self._node.at("AnticipationNoMoveLock"))
    @AnticipationNoMoveLock.setter
    def AnticipationNoMoveLock(self, val): self.AnticipationNoMoveLock.set(val)
    @property
    def AnticipationPitchAngleMax(self):  # type: ()->Float
        return Float(self._node.at("AnticipationPitchAngleMax"))
    @AnticipationPitchAngleMax.setter
    def AnticipationPitchAngleMax(self, val): self.AnticipationPitchAngleMax.set(val)
    @property
    def AnticipationPitchAngleMin(self):  # type: ()->Float
        return Float(self._node.at("AnticipationPitchAngleMin"))
    @AnticipationPitchAngleMin.setter
    def AnticipationPitchAngleMin(self, val): self.AnticipationPitchAngleMin.set(val)
    @property
    def AnticipationSmooth(self):  # type: ()->Float
        return Float(self._node.at("AnticipationSmooth"))
    @AnticipationSmooth.setter
    def AnticipationSmooth(self, val): self.AnticipationSmooth.set(val)
    @property
    def AnticipationYawAngleMax(self):  # type: ()->Float
        return Float(self._node.at("AnticipationYawAngleMax"))
    @AnticipationYawAngleMax.setter
    def AnticipationYawAngleMax(self, val): self.AnticipationYawAngleMax.set(val)
    @property
    def AnticipationYawAngleMin(self):  # type: ()->Float
        return Float(self._node.at("AnticipationYawAngleMin"))
    @AnticipationYawAngleMin.setter
    def AnticipationYawAngleMin(self, val): self.AnticipationYawAngleMin.set(val)
    @property
    def AnticipationZSmooth(self):  # type: ()->Float
        return Float(self._node.at("AnticipationZSmooth"))
    @AnticipationZSmooth.setter
    def AnticipationZSmooth(self, val): self.AnticipationZSmooth.set(val)
    @property
    def AntipationYawSpeedForce(self):  # type: ()->Float
        return Float(self._node.at("AntipationYawSpeedForce"))
    @AntipationYawSpeedForce.setter
    def AntipationYawSpeedForce(self, val): self.AntipationYawSpeedForce.set(val)
    @property
    def AntipationYawSpeedForceSmooth(self):  # type: ()->Float
        return Float(self._node.at("AntipationYawSpeedForceSmooth"))
    @AntipationYawSpeedForceSmooth.setter
    def AntipationYawSpeedForceSmooth(self, val): self.AntipationYawSpeedForceSmooth.set(val)
    @property
    def AutoRotate(self):  # type: ()->AutoRotationType
        return AutoRotationType(self._node.at("AutoRotate"))
    @AutoRotate.setter
    def AutoRotate(self, val): self.AutoRotate.set(val)
    @property
    def AutoRotateIdealPitch(self):  # type: ()->Float
        return Float(self._node.at("AutoRotateIdealPitch"))
    @AutoRotateIdealPitch.setter
    def AutoRotateIdealPitch(self, val): self.AutoRotateIdealPitch.set(val)
    @property
    def AutoRotatePitchMaxSpeed(self):  # type: ()->Float
        return Float(self._node.at("AutoRotatePitchMaxSpeed"))
    @AutoRotatePitchMaxSpeed.setter
    def AutoRotatePitchMaxSpeed(self, val): self.AutoRotatePitchMaxSpeed.set(val)
    @property
    def AutoRotatePitchMinAngle(self):  # type: ()->Float
        return Float(self._node.at("AutoRotatePitchMinAngle"))
    @AutoRotatePitchMinAngle.setter
    def AutoRotatePitchMinAngle(self, val): self.AutoRotatePitchMinAngle.set(val)
    @property
    def AutoRotatePitchSpeedSmooth(self):  # type: ()->Float
        return Float(self._node.at("AutoRotatePitchSpeedSmooth"))
    @AutoRotatePitchSpeedSmooth.setter
    def AutoRotatePitchSpeedSmooth(self, val): self.AutoRotatePitchSpeedSmooth.set(val)
    @property
    def AutoRotateRollFactor(self):  # type: ()->Float
        return Float(self._node.at("AutoRotateRollFactor"))
    @AutoRotateRollFactor.setter
    def AutoRotateRollFactor(self, val): self.AutoRotateRollFactor.set(val)
    @property
    def AutoRotateUnlockPitchDelta(self):  # type: ()->Float
        return Float(self._node.at("AutoRotateUnlockPitchDelta"))
    @AutoRotateUnlockPitchDelta.setter
    def AutoRotateUnlockPitchDelta(self, val): self.AutoRotateUnlockPitchDelta.set(val)
    @property
    def AutoRotateUnlockYawDelta(self):  # type: ()->Float
        return Float(self._node.at("AutoRotateUnlockYawDelta"))
    @AutoRotateUnlockYawDelta.setter
    def AutoRotateUnlockYawDelta(self, val): self.AutoRotateUnlockYawDelta.set(val)
    @property
    def AutoRotateYawMaxSpeed(self):  # type: ()->Float
        return Float(self._node.at("AutoRotateYawMaxSpeed"))
    @AutoRotateYawMaxSpeed.setter
    def AutoRotateYawMaxSpeed(self, val): self.AutoRotateYawMaxSpeed.set(val)
    @property
    def AutoRotateYawMinAngle(self):  # type: ()->Float
        return Float(self._node.at("AutoRotateYawMinAngle"))
    @AutoRotateYawMinAngle.setter
    def AutoRotateYawMinAngle(self, val): self.AutoRotateYawMinAngle.set(val)
    @property
    def AutoRotateYawMinSpeed(self):  # type: ()->Float
        return Float(self._node.at("AutoRotateYawMinSpeed"))
    @AutoRotateYawMinSpeed.setter
    def AutoRotateYawMinSpeed(self, val): self.AutoRotateYawMinSpeed.set(val)
    @property
    def AutoRotateYawSpeedSmooth(self):  # type: ()->Float
        return Float(self._node.at("AutoRotateYawSpeedSmooth"))
    @AutoRotateYawSpeedSmooth.setter
    def AutoRotateYawSpeedSmooth(self, val): self.AutoRotateYawSpeedSmooth.set(val)
    @property
    def CameraType(self):  # type: ()->CameraType
        return CameraType(self._node.at("CameraType"))
    @CameraType.setter
    def CameraType(self, val): self.CameraType.set(val)
    @property
    def CollisionBackToPosSpeed(self):  # type: ()->Float
        return Float(self._node.at("CollisionBackToPosSpeed"))
    @CollisionBackToPosSpeed.setter
    def CollisionBackToPosSpeed(self, val): self.CollisionBackToPosSpeed.set(val)
    @property
    def CollisionCorrectionSpeed(self):  # type: ()->Float
        return Float(self._node.at("CollisionCorrectionSpeed"))
    @CollisionCorrectionSpeed.setter
    def CollisionCorrectionSpeed(self, val): self.CollisionCorrectionSpeed.set(val)
    @property
    def CollisionWantedNearPlane(self):  # type: ()->Float
        return Float(self._node.at("CollisionWantedNearPlane"))
    @CollisionWantedNearPlane.setter
    def CollisionWantedNearPlane(self, val): self.CollisionWantedNearPlane.set(val)
    @property
    def CollisionZOffset(self):  # type: ()->Float
        return Float(self._node.at("CollisionZOffset"))
    @CollisionZOffset.setter
    def CollisionZOffset(self, val): self.CollisionZOffset.set(val)
    @property
    def CollisionZOffsetMaxRadius(self):  # type: ()->Float
        return Float(self._node.at("CollisionZOffsetMaxRadius"))
    @CollisionZOffsetMaxRadius.setter
    def CollisionZOffsetMaxRadius(self, val): self.CollisionZOffsetMaxRadius.set(val)
    @property
    def CollisionZOffsetSmooth(self):  # type: ()->Float
        return Float(self._node.at("CollisionZOffsetSmooth"))
    @CollisionZOffsetSmooth.setter
    def CollisionZOffsetSmooth(self, val): self.CollisionZOffsetSmooth.set(val)
    @property
    def DOFEnabled(self):  # type: ()->Bool
        return Bool(self._node.at("DOFEnabled"))
    @DOFEnabled.setter
    def DOFEnabled(self, val): self.DOFEnabled.set(val)
    @property
    def DOFFarStart(self):  # type: ()->Float
        return Float(self._node.at("DOFFarStart"))
    @DOFFarStart.setter
    def DOFFarStart(self, val): self.DOFFarStart.set(val)
    @property
    def DOFFarStop(self):  # type: ()->Float
        return Float(self._node.at("DOFFarStop"))
    @DOFFarStop.setter
    def DOFFarStop(self, val): self.DOFFarStop.set(val)
    @property
    def DOFMultiplier(self):  # type: ()->Float
        return Float(self._node.at("DOFMultiplier"))
    @DOFMultiplier.setter
    def DOFMultiplier(self, val): self.DOFMultiplier.set(val)
    @property
    def DOFNearStart(self):  # type: ()->Float
        return Float(self._node.at("DOFNearStart"))
    @DOFNearStart.setter
    def DOFNearStart(self, val): self.DOFNearStart.set(val)
    @property
    def DOFNearStop(self):  # type: ()->Float
        return Float(self._node.at("DOFNearStop"))
    @DOFNearStop.setter
    def DOFNearStop(self, val): self.DOFNearStop.set(val)
    @property
    def DecenteringPositionX(self):  # type: ()->Float
        return Float(self._node.at("DecenteringPositionX"))
    @DecenteringPositionX.setter
    def DecenteringPositionX(self, val): self.DecenteringPositionX.set(val)
    @property
    def DecenteringPositionY(self):  # type: ()->Float
        return Float(self._node.at("DecenteringPositionY"))
    @DecenteringPositionY.setter
    def DecenteringPositionY(self, val): self.DecenteringPositionY.set(val)
    @property
    def DecenteringPositionZ(self):  # type: ()->Float
        return Float(self._node.at("DecenteringPositionZ"))
    @DecenteringPositionZ.setter
    def DecenteringPositionZ(self, val): self.DecenteringPositionZ.set(val)
    @property
    def DistanceModifierRamp(self):  # type: ()->Float
        return Float(self._node.at("DistanceModifierRamp"))
    @DistanceModifierRamp.setter
    def DistanceModifierRamp(self, val): self.DistanceModifierRamp.set(val)
    @property
    def DodgeLatenessSmooth(self):  # type: ()->Float
        return Float(self._node.at("DodgeLatenessSmooth"))
    @DodgeLatenessSmooth.setter
    def DodgeLatenessSmooth(self, val): self.DodgeLatenessSmooth.set(val)
    @property
    def DodgeLatenessSmoothThreshold(self):  # type: ()->Float
        return Float(self._node.at("DodgeLatenessSmoothThreshold"))
    @DodgeLatenessSmoothThreshold.setter
    def DodgeLatenessSmoothThreshold(self, val): self.DodgeLatenessSmoothThreshold.set(val)
    @property
    def FOV(self):  # type: ()->Float
        return Float(self._node.at("FOV"))
    @FOV.setter
    def FOV(self, val): self.FOV.set(val)
    @property
    def FOVRamp(self):  # type: ()->Float
        return Float(self._node.at("FOVRamp"))
    @FOVRamp.setter
    def FOVRamp(self, val): self.FOVRamp.set(val)
    @property
    def FightDistanceOffset(self):  # type: ()->Float
        return Float(self._node.at("FightDistanceOffset"))
    @FightDistanceOffset.setter
    def FightDistanceOffset(self, val): self.FightDistanceOffset.set(val)
    @property
    def FightDistanceOffsetSpeed(self):  # type: ()->Float
        return Float(self._node.at("FightDistanceOffsetSpeed"))
    @FightDistanceOffsetSpeed.setter
    def FightDistanceOffsetSpeed(self, val): self.FightDistanceOffsetSpeed.set(val)
    @property
    def FightRotationDuration(self):  # type: ()->Float
        return Float(self._node.at("FightRotationDuration"))
    @FightRotationDuration.setter
    def FightRotationDuration(self, val): self.FightRotationDuration.set(val)
    @property
    def FightRotationInDuration(self):  # type: ()->Float
        return Float(self._node.at("FightRotationInDuration"))
    @FightRotationInDuration.setter
    def FightRotationInDuration(self, val): self.FightRotationInDuration.set(val)
    @property
    def FightRotationOutDuration(self):  # type: ()->Float
        return Float(self._node.at("FightRotationOutDuration"))
    @FightRotationOutDuration.setter
    def FightRotationOutDuration(self, val): self.FightRotationOutDuration.set(val)
    @property
    def FightRotationSpeed(self):  # type: ()->Float
        return Float(self._node.at("FightRotationSpeed"))
    @FightRotationSpeed.setter
    def FightRotationSpeed(self, val): self.FightRotationSpeed.set(val)
    @property
    def FightSpeedRationImpactCoeff(self):  # type: ()->Float
        return Float(self._node.at("FightSpeedRationImpactCoeff"))
    @FightSpeedRationImpactCoeff.setter
    def FightSpeedRationImpactCoeff(self, val): self.FightSpeedRationImpactCoeff.set(val)
    @property
    def JoyAccelerationBoostChangingSideH(self):  # type: ()->Float
        return Float(self._node.at("JoyAccelerationBoostChangingSideH"))
    @JoyAccelerationBoostChangingSideH.setter
    def JoyAccelerationBoostChangingSideH(self, val): self.JoyAccelerationBoostChangingSideH.set(val)
    @property
    def JoyAccelerationBoostChangingSideV(self):  # type: ()->Float
        return Float(self._node.at("JoyAccelerationBoostChangingSideV"))
    @JoyAccelerationBoostChangingSideV.setter
    def JoyAccelerationBoostChangingSideV(self, val): self.JoyAccelerationBoostChangingSideV.set(val)
    @property
    def JoyAccelerationH(self):  # type: ()->Float
        return Float(self._node.at("JoyAccelerationH"))
    @JoyAccelerationH.setter
    def JoyAccelerationH(self, val): self.JoyAccelerationH.set(val)
    @property
    def JoyAccelerationV(self):  # type: ()->Float
        return Float(self._node.at("JoyAccelerationV"))
    @JoyAccelerationV.setter
    def JoyAccelerationV(self, val): self.JoyAccelerationV.set(val)
    @property
    def JoyDecelerationH(self):  # type: ()->Float
        return Float(self._node.at("JoyDecelerationH"))
    @JoyDecelerationH.setter
    def JoyDecelerationH(self, val): self.JoyDecelerationH.set(val)
    @property
    def JoyDecelerationV(self):  # type: ()->Float
        return Float(self._node.at("JoyDecelerationV"))
    @JoyDecelerationV.setter
    def JoyDecelerationV(self, val): self.JoyDecelerationV.set(val)
    @property
    def JoyRotationScaleConverterH(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("JoyRotationScaleConverterH"))
    @property
    def JoyRotationScaleConverterV(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("JoyRotationScaleConverterV"))
    @property
    def JoySpeedFactor(self):  # type: ()->Float
        return Float(self._node.at("JoySpeedFactor"))
    @JoySpeedFactor.setter
    def JoySpeedFactor(self, val): self.JoySpeedFactor.set(val)
    @property
    def JoySpeedMaxH(self):  # type: ()->Float
        return Float(self._node.at("JoySpeedMaxH"))
    @JoySpeedMaxH.setter
    def JoySpeedMaxH(self, val): self.JoySpeedMaxH.set(val)
    @property
    def JoySpeedMaxV(self):  # type: ()->Float
        return Float(self._node.at("JoySpeedMaxV"))
    @JoySpeedMaxV.setter
    def JoySpeedMaxV(self, val): self.JoySpeedMaxV.set(val)
    @property
    def JumpEnable(self):  # type: ()->Bool
        return Bool(self._node.at("JumpEnable"))
    @JumpEnable.setter
    def JumpEnable(self, val): self.JumpEnable.set(val)
    @property
    def LockDecenteringDuration(self):  # type: ()->Float
        return Float(self._node.at("LockDecenteringDuration"))
    @LockDecenteringDuration.setter
    def LockDecenteringDuration(self, val): self.LockDecenteringDuration.set(val)
    @property
    def LockDistSpeed(self):  # type: ()->Float
        return Float(self._node.at("LockDistSpeed"))
    @LockDistSpeed.setter
    def LockDistSpeed(self, val): self.LockDistSpeed.set(val)
    @property
    def LockEndTransitionThreshold(self):  # type: ()->Float
        return Float(self._node.at("LockEndTransitionThreshold"))
    @LockEndTransitionThreshold.setter
    def LockEndTransitionThreshold(self, val): self.LockEndTransitionThreshold.set(val)
    @property
    def LockLowSpeedDist(self):  # type: ()->Float
        return Float(self._node.at("LockLowSpeedDist"))
    @LockLowSpeedDist.setter
    def LockLowSpeedDist(self, val): self.LockLowSpeedDist.set(val)
    @property
    def LockMaxDecentering(self):  # type: ()->Float
        return Float(self._node.at("LockMaxDecentering"))
    @LockMaxDecentering.setter
    def LockMaxDecentering(self, val): self.LockMaxDecentering.set(val)
    @property
    def LockMaxDist(self):  # type: ()->Float
        return Float(self._node.at("LockMaxDist"))
    @LockMaxDist.setter
    def LockMaxDist(self, val): self.LockMaxDist.set(val)
    @property
    def LockMinCameraDist(self):  # type: ()->Float
        return Float(self._node.at("LockMinCameraDist"))
    @LockMinCameraDist.setter
    def LockMinCameraDist(self, val): self.LockMinCameraDist.set(val)
    @property
    def LockOffsetTransitionSmooth(self):  # type: ()->Float
        return Float(self._node.at("LockOffsetTransitionSmooth"))
    @LockOffsetTransitionSmooth.setter
    def LockOffsetTransitionSmooth(self, val): self.LockOffsetTransitionSmooth.set(val)
    @property
    def LockPitchSpeed(self):  # type: ()->Float
        return Float(self._node.at("LockPitchSpeed"))
    @LockPitchSpeed.setter
    def LockPitchSpeed(self, val): self.LockPitchSpeed.set(val)
    @property
    def LockPitchSpeedClose(self):  # type: ()->Float
        return Float(self._node.at("LockPitchSpeedClose"))
    @LockPitchSpeedClose.setter
    def LockPitchSpeedClose(self, val): self.LockPitchSpeedClose.set(val)
    @property
    def LockSizeRatioThreshold(self):  # type: ()->Float
        return Float(self._node.at("LockSizeRatioThreshold"))
    @LockSizeRatioThreshold.setter
    def LockSizeRatioThreshold(self, val): self.LockSizeRatioThreshold.set(val)
    @property
    def LockTransitionSmooth(self):  # type: ()->Float
        return Float(self._node.at("LockTransitionSmooth"))
    @LockTransitionSmooth.setter
    def LockTransitionSmooth(self, val): self.LockTransitionSmooth.set(val)
    @property
    def LockTriggerDist(self):  # type: ()->Float
        return Float(self._node.at("LockTriggerDist"))
    @LockTriggerDist.setter
    def LockTriggerDist(self, val): self.LockTriggerDist.set(val)
    @property
    def LockYawSpeed(self):  # type: ()->Float
        return Float(self._node.at("LockYawSpeed"))
    @LockYawSpeed.setter
    def LockYawSpeed(self, val): self.LockYawSpeed.set(val)
    @property
    def LockYawSpeedClose(self):  # type: ()->Float
        return Float(self._node.at("LockYawSpeedClose"))
    @LockYawSpeedClose.setter
    def LockYawSpeedClose(self, val): self.LockYawSpeedClose.set(val)
    @property
    def NearPlane(self):  # type: ()->Float
        return Float(self._node.at("NearPlane"))
    @NearPlane.setter
    def NearPlane(self, val): self.NearPlane.set(val)
    @property
    def PitchToFOV(self):  # type: ()->Float
        return Float(self._node.at("PitchToFOV"))
    @PitchToFOV.setter
    def PitchToFOV(self, val): self.PitchToFOV.set(val)
    @property
    def SpacePitchOffset(self):  # type: ()->Float
        return Float(self._node.at("SpacePitchOffset"))
    @SpacePitchOffset.setter
    def SpacePitchOffset(self, val): self.SpacePitchOffset.set(val)
    @property
    def SpeedToDistanceModifier(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("SpeedToDistanceModifier"))
    @property
    def SpeedToFOV(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("SpeedToFOV"))
    @property
    def TargetBrutalStopSmoothThreshold(self):  # type: ()->Float
        return Float(self._node.at("TargetBrutalStopSmoothThreshold"))
    @TargetBrutalStopSmoothThreshold.setter
    def TargetBrutalStopSmoothThreshold(self, val): self.TargetBrutalStopSmoothThreshold.set(val)
    @property
    def TargetDeadZoneRadius(self):  # type: ()->Float
        return Float(self._node.at("TargetDeadZoneRadius"))
    @TargetDeadZoneRadius.setter
    def TargetDeadZoneRadius(self, val): self.TargetDeadZoneRadius.set(val)
    @property
    def TargetDistance(self):  # type: ()->Float
        return Float(self._node.at("TargetDistance"))
    @TargetDistance.setter
    def TargetDistance(self, val): self.TargetDistance.set(val)
    @property
    def TargetJumpSmooth(self):  # type: ()->Float
        return Float(self._node.at("TargetJumpSmooth"))
    @TargetJumpSmooth.setter
    def TargetJumpSmooth(self, val): self.TargetJumpSmooth.set(val)
    @property
    def TargetMaxSpeed(self):  # type: ()->Float
        return Float(self._node.at("TargetMaxSpeed"))
    @TargetMaxSpeed.setter
    def TargetMaxSpeed(self, val): self.TargetMaxSpeed.set(val)
    @property
    def TargetMinSmooth(self):  # type: ()->Float
        return Float(self._node.at("TargetMinSmooth"))
    @TargetMinSmooth.setter
    def TargetMinSmooth(self, val): self.TargetMinSmooth.set(val)
    @property
    def TargetOffsetX(self):  # type: ()->Float
        return Float(self._node.at("TargetOffsetX"))
    @TargetOffsetX.setter
    def TargetOffsetX(self, val): self.TargetOffsetX.set(val)
    @property
    def TargetOffsetY(self):  # type: ()->Float
        return Float(self._node.at("TargetOffsetY"))
    @TargetOffsetY.setter
    def TargetOffsetY(self, val): self.TargetOffsetY.set(val)
    @property
    def TargetOffsetZ(self):  # type: ()->Float
        return Float(self._node.at("TargetOffsetZ"))
    @TargetOffsetZ.setter
    def TargetOffsetZ(self, val): self.TargetOffsetZ.set(val)
    @property
    def TargetXOffsetFromYawForce(self):  # type: ()->Float
        return Float(self._node.at("TargetXOffsetFromYawForce"))
    @TargetXOffsetFromYawForce.setter
    def TargetXOffsetFromYawForce(self, val): self.TargetXOffsetFromYawForce.set(val)
    @property
    def TargetXOffsetFromYawSmooth(self):  # type: ()->Float
        return Float(self._node.at("TargetXOffsetFromYawSmooth"))
    @TargetXOffsetFromYawSmooth.setter
    def TargetXOffsetFromYawSmooth(self, val): self.TargetXOffsetFromYawSmooth.set(val)
    @property
    def TargetZOffsetFromPitchForce(self):  # type: ()->Float
        return Float(self._node.at("TargetZOffsetFromPitchForce"))
    @TargetZOffsetFromPitchForce.setter
    def TargetZOffsetFromPitchForce(self, val): self.TargetZOffsetFromPitchForce.set(val)
    @property
    def TargetZOffsetFromPitchSmooth(self):  # type: ()->Float
        return Float(self._node.at("TargetZOffsetFromPitchSmooth"))
    @TargetZOffsetFromPitchSmooth.setter
    def TargetZOffsetFromPitchSmooth(self, val): self.TargetZOffsetFromPitchSmooth.set(val)
    @property
    def UseSpeedToFOV(self):  # type: ()->Bool
        return Bool(self._node.at("UseSpeedToFOV"))
    @UseSpeedToFOV.setter
    def UseSpeedToFOV(self, val): self.UseSpeedToFOV.set(val)
    @property
    def WorldZOffset(self):  # type: ()->Float
        return Float(self._node.at("WorldZOffset"))
    @WorldZOffset.setter
    def WorldZOffset(self, val): self.WorldZOffset.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def defaultParamsRequired(self):  # type: ()->Bool
        return Bool(self._node.at("defaultParamsRequired"))
    @defaultParamsRequired.setter
    def defaultParamsRequired(self, val): self.defaultParamsRequired.set(val)
    pass


from EntityLibPy import Node

class InGameCameraObservationParams(HelperObject):
    schema_name = "InGameCameraObservationParams"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InGameCameraObservationParams
        return InGameCameraObservationParams(entlib.load_node_file(sourcefile, entlib.get_schema(InGameCameraObservationParams.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InGameCameraObservationParams
        return InGameCameraObservationParams(entlib.make_node(InGameCameraObservationParams.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def aim(self):  # type: ()->InGameCameraParams
        return InGameCameraParams(self._node.at("aim"))
    @property
    def fps(self):  # type: ()->InGameCameraParams
        return InGameCameraParams(self._node.at("fps"))
    @property
    def lock(self):  # type: ()->InGameCameraParams
        return InGameCameraParams(self._node.at("lock"))
    @property
    def motionconstraint(self):  # type: ()->InGameCameraParams
        return InGameCameraParams(self._node.at("motionconstraint"))
    @property
    def purgatory(self):  # type: ()->InGameCameraParams
        return InGameCameraParams(self._node.at("purgatory"))
    @property
    def shoulder(self):  # type: ()->InGameCameraParams
        return InGameCameraParams(self._node.at("shoulder"))
    @property
    def thirdperson(self):  # type: ()->InGameCameraParams
        return InGameCameraParams(self._node.at("thirdperson"))
    @property
    def zoom(self):  # type: ()->InGameCameraParams
        return InGameCameraParams(self._node.at("zoom"))
    pass


from EntityLibPy import Node

class InGameCameraData(HelperObject):
    schema_name = "InGameCameraData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InGameCameraData
        return InGameCameraData(entlib.load_node_file(sourcefile, entlib.get_schema(InGameCameraData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InGameCameraData
        return InGameCameraData(entlib.make_node(InGameCameraData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def cinematic(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("cinematic"))
    @property
    def clamber(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("clamber"))
    @property
    def crouch(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("crouch"))
    @property
    def dive(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("dive"))
    @property
    def fall(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("fall"))
    @property
    def fight(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("fight"))
    @property
    def fly(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("fly"))
    @property
    def prone(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("prone"))
    @property
    def ridden(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("ridden"))
    @property
    def riddenfly(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("riddenfly"))
    @property
    def ride(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("ride"))
    @property
    def soundEvents(self):  # type: ()->Array[CameraSoundEvent]
        return (lambda n: Array(CameraSoundEvent, n))(self._node.at("soundEvents"))
    @property
    def standup(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("standup"))
    @property
    def swim(self):  # type: ()->InGameCameraObservationParams
        return InGameCameraObservationParams(self._node.at("swim"))
    pass


from EntityLibPy import Node

class BoidParams(HelperObject):
    schema_name = "BoidParams"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BoidParams
        return BoidParams(entlib.load_node_file(sourcefile, entlib.get_schema(BoidParams.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BoidParams
        return BoidParams(entlib.make_node(BoidParams.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Acceleration(self):  # type: ()->Float
        return Float(self._node.at("Acceleration"))
    @Acceleration.setter
    def Acceleration(self, val): self.Acceleration.set(val)
    @property
    def Action(self):  # type: ()->ActionMode
        return ActionMode(self._node.at("Action"))
    @Action.setter
    def Action(self, val): self.Action.set(val)
    @property
    def ActionSecondary(self):  # type: ()->ActionMode
        return ActionMode(self._node.at("ActionSecondary"))
    @ActionSecondary.setter
    def ActionSecondary(self, val): self.ActionSecondary.set(val)
    @property
    def AlignmentDistance(self):  # type: ()->Float
        return Float(self._node.at("AlignmentDistance"))
    @AlignmentDistance.setter
    def AlignmentDistance(self, val): self.AlignmentDistance.set(val)
    @property
    def AlignmentStrength(self):  # type: ()->Float
        return Float(self._node.at("AlignmentStrength"))
    @AlignmentStrength.setter
    def AlignmentStrength(self, val): self.AlignmentStrength.set(val)
    @property
    def AllowMerge(self):  # type: ()->Bool
        return Bool(self._node.at("AllowMerge"))
    @AllowMerge.setter
    def AllowMerge(self, val): self.AllowMerge.set(val)
    @property
    def AngularSlerpCoeff(self):  # type: ()->Float
        return Float(self._node.at("AngularSlerpCoeff"))
    @AngularSlerpCoeff.setter
    def AngularSlerpCoeff(self, val): self.AngularSlerpCoeff.set(val)
    @property
    def AngularSpeedMax(self):  # type: ()->Float
        return Float(self._node.at("AngularSpeedMax"))
    @AngularSpeedMax.setter
    def AngularSpeedMax(self, val): self.AngularSpeedMax.set(val)
    @property
    def AnimFromStart(self):  # type: ()->Bool
        return Bool(self._node.at("AnimFromStart"))
    @AnimFromStart.setter
    def AnimFromStart(self, val): self.AnimFromStart.set(val)
    @property
    def BlockProcess(self):  # type: ()->Bool
        return Bool(self._node.at("BlockProcess"))
    @BlockProcess.setter
    def BlockProcess(self, val): self.BlockProcess.set(val)
    @property
    def ClampVerticalAngle(self):  # type: ()->Bool
        return Bool(self._node.at("ClampVerticalAngle"))
    @ClampVerticalAngle.setter
    def ClampVerticalAngle(self, val): self.ClampVerticalAngle.set(val)
    @property
    def CohesionStrength(self):  # type: ()->Float
        return Float(self._node.at("CohesionStrength"))
    @CohesionStrength.setter
    def CohesionStrength(self, val): self.CohesionStrength.set(val)
    @property
    def DragForce(self):  # type: ()->Float
        return Float(self._node.at("DragForce"))
    @DragForce.setter
    def DragForce(self, val): self.DragForce.set(val)
    @property
    def EntityDistance(self):  # type: ()->Float
        return Float(self._node.at("EntityDistance"))
    @EntityDistance.setter
    def EntityDistance(self, val): self.EntityDistance.set(val)
    @property
    def FlapBehavior(self):  # type: ()->Bool
        return Bool(self._node.at("FlapBehavior"))
    @FlapBehavior.setter
    def FlapBehavior(self, val): self.FlapBehavior.set(val)
    @property
    def FlattenZFactorLeaves(self):  # type: ()->Float
        return Float(self._node.at("FlattenZFactorLeaves"))
    @FlattenZFactorLeaves.setter
    def FlattenZFactorLeaves(self, val): self.FlattenZFactorLeaves.set(val)
    @property
    def FlattenZFactorRoots(self):  # type: ()->Float
        return Float(self._node.at("FlattenZFactorRoots"))
    @FlattenZFactorRoots.setter
    def FlattenZFactorRoots(self, val): self.FlattenZFactorRoots.set(val)
    @property
    def FollowEmitterStrength(self):  # type: ()->Float
        return Float(self._node.at("FollowEmitterStrength"))
    @FollowEmitterStrength.setter
    def FollowEmitterStrength(self, val): self.FollowEmitterStrength.set(val)
    @property
    def GoalMode(self):  # type: ()->BoidGoalMode
        return BoidGoalMode(self._node.at("GoalMode"))
    @GoalMode.setter
    def GoalMode(self, val): self.GoalMode.set(val)
    @property
    def GroundRepulse(self):  # type: ()->Bool
        return Bool(self._node.at("GroundRepulse"))
    @GroundRepulse.setter
    def GroundRepulse(self, val): self.GroundRepulse.set(val)
    @property
    def GroundRepulseHeight(self):  # type: ()->Float
        return Float(self._node.at("GroundRepulseHeight"))
    @GroundRepulseHeight.setter
    def GroundRepulseHeight(self, val): self.GroundRepulseHeight.set(val)
    @property
    def GroundRepulseStrength(self):  # type: ()->Float
        return Float(self._node.at("GroundRepulseStrength"))
    @GroundRepulseStrength.setter
    def GroundRepulseStrength(self, val): self.GroundRepulseStrength.set(val)
    @property
    def InitialInertiaFactor(self):  # type: ()->Float
        return Float(self._node.at("InitialInertiaFactor"))
    @InitialInertiaFactor.setter
    def InitialInertiaFactor(self, val): self.InitialInertiaFactor.set(val)
    @property
    def InitialInertiaVerticalFactor(self):  # type: ()->Float
        return Float(self._node.at("InitialInertiaVerticalFactor"))
    @InitialInertiaVerticalFactor.setter
    def InitialInertiaVerticalFactor(self, val): self.InitialInertiaVerticalFactor.set(val)
    @property
    def LightBrightness(self):  # type: ()->Float
        return Float(self._node.at("LightBrightness"))
    @LightBrightness.setter
    def LightBrightness(self, val): self.LightBrightness.set(val)
    @property
    def LightColor(self):  # type: ()->Color
        return Color(self._node.at("LightColor"))
    @LightColor.setter
    def LightColor(self, val): self.LightColor.set(val)
    @property
    def Locomotion(self):  # type: ()->LocomotionMode
        return LocomotionMode(self._node.at("Locomotion"))
    @Locomotion.setter
    def Locomotion(self, val): self.Locomotion.set(val)
    @property
    def MaxVerticalAngle(self):  # type: ()->Float
        return Float(self._node.at("MaxVerticalAngle"))
    @MaxVerticalAngle.setter
    def MaxVerticalAngle(self, val): self.MaxVerticalAngle.set(val)
    @property
    def MaxVerticalAngleVariation(self):  # type: ()->Float
        return Float(self._node.at("MaxVerticalAngleVariation"))
    @MaxVerticalAngleVariation.setter
    def MaxVerticalAngleVariation(self, val): self.MaxVerticalAngleVariation.set(val)
    @property
    def NbMaxNewChildren(self):  # type: ()->Int
        return Int(self._node.at("NbMaxNewChildren"))
    @NbMaxNewChildren.setter
    def NbMaxNewChildren(self, val): self.NbMaxNewChildren.set(val)
    @property
    def OnGround(self):  # type: ()->Bool
        return Bool(self._node.at("OnGround"))
    @OnGround.setter
    def OnGround(self, val): self.OnGround.set(val)
    @property
    def RepulsionStrength(self):  # type: ()->Float
        return Float(self._node.at("RepulsionStrength"))
    @RepulsionStrength.setter
    def RepulsionStrength(self, val): self.RepulsionStrength.set(val)
    @property
    def RotateBendFactor(self):  # type: ()->Float
        return Float(self._node.at("RotateBendFactor"))
    @RotateBendFactor.setter
    def RotateBendFactor(self, val): self.RotateBendFactor.set(val)
    @property
    def SightZ(self):  # type: ()->Bool
        return Bool(self._node.at("SightZ"))
    @SightZ.setter
    def SightZ(self, val): self.SightZ.set(val)
    @property
    def SpeedMaxData(self):  # type: ()->Array[BoidSpeedMaxData]
        return (lambda n: Array(BoidSpeedMaxData, n))(self._node.at("SpeedMaxData"))
    @property
    def SpeedMode(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("SpeedMode"))
    @SpeedMode.setter
    def SpeedMode(self, val): self.SpeedMode.set(val)
    @property
    def SpeedRandomMultiplier(self):  # type: ()->Float
        return Float(self._node.at("SpeedRandomMultiplier"))
    @SpeedRandomMultiplier.setter
    def SpeedRandomMultiplier(self, val): self.SpeedRandomMultiplier.set(val)
    @property
    def StyleMode(self):  # type: ()->StyleMode
        return StyleMode(self._node.at("StyleMode"))
    @StyleMode.setter
    def StyleMode(self, val): self.StyleMode.set(val)
    @property
    def UpdateForceFactor(self):  # type: ()->Float
        return Float(self._node.at("UpdateForceFactor"))
    @UpdateForceFactor.setter
    def UpdateForceFactor(self, val): self.UpdateForceFactor.set(val)
    @property
    def UpdateInertiaFactor(self):  # type: ()->Float
        return Float(self._node.at("UpdateInertiaFactor"))
    @UpdateInertiaFactor.setter
    def UpdateInertiaFactor(self, val): self.UpdateInertiaFactor.set(val)
    @property
    def VerticalMasterPositionOffset(self):  # type: ()->Float
        return Float(self._node.at("VerticalMasterPositionOffset"))
    @VerticalMasterPositionOffset.setter
    def VerticalMasterPositionOffset(self, val): self.VerticalMasterPositionOffset.set(val)
    @property
    def VisibilityStateFrameDelay(self):  # type: ()->Int
        return Int(self._node.at("VisibilityStateFrameDelay"))
    @VisibilityStateFrameDelay.setter
    def VisibilityStateFrameDelay(self, val): self.VisibilityStateFrameDelay.set(val)
    @property
    def Visible(self):  # type: ()->Bool
        return Bool(self._node.at("Visible"))
    @Visible.setter
    def Visible(self, val): self.Visible.set(val)
    @property
    def VisualScaleMultiplierAtStartup(self):  # type: ()->Float
        return Float(self._node.at("VisualScaleMultiplierAtStartup"))
    @VisualScaleMultiplierAtStartup.setter
    def VisualScaleMultiplierAtStartup(self, val): self.VisualScaleMultiplierAtStartup.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def _name(self):  # type: ()->String
        return String(self._node.at("_name"))
    @_name.setter
    def _name(self, val): self._name.set(val)
    pass


from EntityLibPy import Node

class AnimationModelComponentInput_ActionMode(HelperObject):

    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def engaged(self):  # type: ()->Bool
        return Bool(self._node.at("engaged"))
    @engaged.setter
    def engaged(self, val): self.engaged.set(val)
    @property
    def val(self):  # type: ()->ActionMode
        return ActionMode(self._node.at("val"))
    @val.setter
    def val(self, val): self.val.set(val)
    pass


from EntityLibPy import Node

class AnimationModelComponentInput(HelperObject):
    schema_name = "AnimationModelComponentInput"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationModelComponentInput
        return AnimationModelComponentInput(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationModelComponentInput.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationModelComponentInput
        return AnimationModelComponentInput(entlib.make_node(AnimationModelComponentInput.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActionMode(self):  # type: ()->AnimationModelComponentInput_ActionMode
        return AnimationModelComponentInput_ActionMode(self._node.at("ActionMode"))
    @property
    def AdditionnalTag(self):  # type: ()->AdditionnalTag
        return AdditionnalTag(self._node.at("AdditionnalTag"))
    @property
    def AnimTag(self):  # type: ()->AnimationModelComponentInput_AnimTag
        return AnimationModelComponentInput_AnimTag(self._node.at("AnimTag"))
    @property
    def AttitudeMode(self):  # type: ()->AnimationModelComponentInput_AttitudeMode
        return AnimationModelComponentInput_AttitudeMode(self._node.at("AttitudeMode"))
    @property
    def CarryMode(self):  # type: ()->AnimationModelComponentInput_CarryMode
        return AnimationModelComponentInput_CarryMode(self._node.at("CarryMode"))
    @property
    def ForceBlendIn(self):  # type: ()->ForceBlendIn
        return ForceBlendIn(self._node.at("ForceBlendIn"))
    @property
    def ForceBlendInReachRequired(self):  # type: ()->ForceBlendInReachRequired
        return ForceBlendInReachRequired(self._node.at("ForceBlendInReachRequired"))
    @property
    def LocomotionMode(self):  # type: ()->AnimationModelComponentInput_LocomotionMode
        return AnimationModelComponentInput_LocomotionMode(self._node.at("LocomotionMode"))
    @property
    def PlayRatio(self):  # type: ()->PlayRatio
        return PlayRatio(self._node.at("PlayRatio"))
    @property
    def SpeedMode(self):  # type: ()->AnimationModelComponentInput_SpeedMode
        return AnimationModelComponentInput_SpeedMode(self._node.at("SpeedMode"))
    @property
    def SpeedModeMax(self):  # type: ()->SpeedModeMax
        return SpeedModeMax(self._node.at("SpeedModeMax"))
    @property
    def StyleMode(self):  # type: ()->AnimationModelComponentInput_StyleMode
        return AnimationModelComponentInput_StyleMode(self._node.at("StyleMode"))
    @property
    def Super(self):  # type: ()->ComponentInput
        return ComponentInput(self._node.at("Super"))
    @property
    def VariantAllowed(self):  # type: ()->VariantAllowed
        return VariantAllowed(self._node.at("VariantAllowed"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnimTags(HelperObject):
    schema_name = "AnimTags"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimTags
        return AnimTags(entlib.load_node_file(sourcefile, entlib.get_schema(AnimTags.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimTags
        return AnimTags(entlib.make_node(AnimTags.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActionMode(self):  # type: ()->ActionMode
        return ActionMode(self._node.at("ActionMode"))
    @ActionMode.setter
    def ActionMode(self, val): self.ActionMode.set(val)
    @property
    def AnimAdditionalTag(self):  # type: ()->AnimAdditionalTag
        return AnimAdditionalTag(self._node.at("AnimAdditionalTag"))
    @AnimAdditionalTag.setter
    def AnimAdditionalTag(self, val): self.AnimAdditionalTag.set(val)
    @property
    def AnimTag(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("AnimTag"))
    @AnimTag.setter
    def AnimTag(self, val): self.AnimTag.set(val)
    @property
    def AttitudeMode(self):  # type: ()->AttitudeMode
        return AttitudeMode(self._node.at("AttitudeMode"))
    @AttitudeMode.setter
    def AttitudeMode(self, val): self.AttitudeMode.set(val)
    @property
    def CarryMode(self):  # type: ()->CarryMode
        return CarryMode(self._node.at("CarryMode"))
    @CarryMode.setter
    def CarryMode(self, val): self.CarryMode.set(val)
    @property
    def LocomotionMode(self):  # type: ()->LocomotionMode
        return LocomotionMode(self._node.at("LocomotionMode"))
    @LocomotionMode.setter
    def LocomotionMode(self, val): self.LocomotionMode.set(val)
    @property
    def PlayRatio(self):  # type: ()->Float
        return Float(self._node.at("PlayRatio"))
    @PlayRatio.setter
    def PlayRatio(self, val): self.PlayRatio.set(val)
    @property
    def SpeedMode(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("SpeedMode"))
    @SpeedMode.setter
    def SpeedMode(self, val): self.SpeedMode.set(val)
    @property
    def StyleMode(self):  # type: ()->StyleMode
        return StyleMode(self._node.at("StyleMode"))
    @StyleMode.setter
    def StyleMode(self, val): self.StyleMode.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionPlayAnim(HelperObject):
    schema_name = "ActionPlayAnim"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionPlayAnim
        return ActionPlayAnim(entlib.load_node_file(sourcefile, entlib.get_schema(ActionPlayAnim.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionPlayAnim
        return ActionPlayAnim(entlib.make_node(ActionPlayAnim.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActionMode(self):  # type: ()->ActionMode
        return ActionMode(self._node.at("ActionMode"))
    @ActionMode.setter
    def ActionMode(self, val): self.ActionMode.set(val)
    @property
    def AddTag(self):  # type: ()->AnimAdditionalTag
        return AnimAdditionalTag(self._node.at("AddTag"))
    @AddTag.setter
    def AddTag(self, val): self.AddTag.set(val)
    @property
    def AnimTag(self):  # type: ()->AnimTag
        return AnimTag(self._node.at("AnimTag"))
    @AnimTag.setter
    def AnimTag(self, val): self.AnimTag.set(val)
    @property
    def AttitudeMode(self):  # type: ()->AttitudeMode
        return AttitudeMode(self._node.at("AttitudeMode"))
    @AttitudeMode.setter
    def AttitudeMode(self, val): self.AttitudeMode.set(val)
    @property
    def CarryMode(self):  # type: ()->CarryMode
        return CarryMode(self._node.at("CarryMode"))
    @CarryMode.setter
    def CarryMode(self, val): self.CarryMode.set(val)
    @property
    def LocomotionMode(self):  # type: ()->LocomotionMode
        return LocomotionMode(self._node.at("LocomotionMode"))
    @LocomotionMode.setter
    def LocomotionMode(self, val): self.LocomotionMode.set(val)
    @property
    def MaxTime(self):  # type: ()->Float
        return Float(self._node.at("MaxTime"))
    @MaxTime.setter
    def MaxTime(self, val): self.MaxTime.set(val)
    @property
    def SpeedMode(self):  # type: ()->SpeedMode
        return SpeedMode(self._node.at("SpeedMode"))
    @SpeedMode.setter
    def SpeedMode(self, val): self.SpeedMode.set(val)
    @property
    def StyleMode(self):  # type: ()->StyleMode
        return StyleMode(self._node.at("StyleMode"))
    @StyleMode.setter
    def StyleMode(self, val): self.StyleMode.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def exitRequired(self):  # type: ()->Bool
        return Bool(self._node.at("exitRequired"))
    @exitRequired.setter
    def exitRequired(self, val): self.exitRequired.set(val)
    pass


from EntityLibPy import Node

class ActionEmote(HelperObject):
    schema_name = "ActionEmote"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionEmote
        return ActionEmote(entlib.load_node_file(sourcefile, entlib.get_schema(ActionEmote.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionEmote
        return ActionEmote(entlib.make_node(ActionEmote.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AnimAction(self):  # type: ()->ActionMode
        return ActionMode(self._node.at("AnimAction"))
    @AnimAction.setter
    def AnimAction(self, val): self.AnimAction.set(val)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionAimProjectile(HelperObject):
    schema_name = "ActionAimProjectile"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionAimProjectile
        return ActionAimProjectile(entlib.load_node_file(sourcefile, entlib.get_schema(ActionAimProjectile.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionAimProjectile
        return ActionAimProjectile(entlib.make_node(ActionAimProjectile.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def actionMode(self):  # type: ()->ActionMode
        return ActionMode(self._node.at("actionMode"))
    @actionMode.setter
    def actionMode(self, val): self.actionMode.set(val)
    pass


from EntityLibPy import Node

class ActionAttack_AttackOutputs(HelperObject):
    schema_name = "ActionAttack::AttackOutputs"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionAttack_AttackOutputs
        return ActionAttack_AttackOutputs(entlib.load_node_file(sourcefile, entlib.get_schema(ActionAttack_AttackOutputs.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionAttack_AttackOutputs
        return ActionAttack_AttackOutputs(entlib.make_node(ActionAttack_AttackOutputs.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AnimTags(self):  # type: ()->AnimTags
        return AnimTags(self._node.at("AnimTags"))
    @property
    def Direction(self):  # type: ()->Vector3
        return Vector3(self._node.at("Direction"))
    @Direction.setter
    def Direction(self, val): self.Direction.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActionAttack(HelperObject):
    schema_name = "ActionAttack"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActionAttack
        return ActionAttack(entlib.load_node_file(sourcefile, entlib.get_schema(ActionAttack.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActionAttack
        return ActionAttack(entlib.make_node(ActionAttack.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Outputs(self):  # type: ()->ActionAttack_AttackOutputs
        return ActionAttack_AttackOutputs(self._node.at("Outputs"))
    @property
    def Super(self):  # type: ()->ActorState
        return ActorState(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AbilityData(HelperObject):
    schema_name = "AbilityData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AbilityData
        return AbilityData(entlib.load_node_file(sourcefile, entlib.get_schema(AbilityData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AbilityData
        return AbilityData(entlib.make_node(AbilityData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def abilities(self):  # type: ()->PrimArray[ActorAbility]
        return (lambda n: PrimArray(ActorAbility, n))(self._node.at("abilities"))
    @abilities.setter
    def abilities(self, val): self.abilities.set(val)
    pass


from EntityLibPy import Node

class ActorGD(HelperObject):
    schema_name = "ActorGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorGD
        return ActorGD(entlib.load_node_file(sourcefile, entlib.get_schema(ActorGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorGD
        return ActorGD(entlib.make_node(ActorGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Archetype(self):  # type: ()->Archetype
        return Archetype(self._node.at("Archetype"))
    @Archetype.setter
    def Archetype(self, val): self.Archetype.set(val)
    @property
    def ClassStyleTag(self):  # type: ()->StyleMode
        return StyleMode(self._node.at("ClassStyleTag"))
    @ClassStyleTag.setter
    def ClassStyleTag(self, val): self.ClassStyleTag.set(val)
    @property
    def FactionName(self):  # type: ()->String
        return String(self._node.at("FactionName"))
    @FactionName.setter
    def FactionName(self, val): self.FactionName.set(val)
    @property
    def Icon(self):  # type: ()->String
        return String(self._node.at("Icon"))
    @Icon.setter
    def Icon(self, val): self.Icon.set(val)
    @property
    def InSpiritWorld(self):  # type: ()->Bool
        return Bool(self._node.at("InSpiritWorld"))
    @InSpiritWorld.setter
    def InSpiritWorld(self, val): self.InSpiritWorld.set(val)
    @property
    def Specie(self):  # type: ()->Specie
        return Specie(self._node.at("Specie"))
    @Specie.setter
    def Specie(self, val): self.Specie.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def Weapon(self):  # type: ()->Bool
        return Bool(self._node.at("Weapon"))
    @Weapon.setter
    def Weapon(self, val): self.Weapon.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def abilityData(self):  # type: ()->AbilityData
        return AbilityData(self._node.at("abilityData"))
    @property
    def attackData(self):  # type: ()->AttackData
        return AttackData(self._node.at("attackData"))
    @property
    def lifeAndDamageData(self):  # type: ()->LifeAndDamageData
        return LifeAndDamageData(self._node.at("lifeAndDamageData"))
    @property
    def projectileData(self):  # type: ()->ProjectileData
        return ProjectileData(self._node.at("projectileData"))
    @property
    def radius(self):  # type: ()->Float
        return Float(self._node.at("radius"))
    @radius.setter
    def radius(self, val): self.radius.set(val)
    @property
    def shootData(self):  # type: ()->ShootData
        return ShootData(self._node.at("shootData"))
    @property
    def stunData(self):  # type: ()->StunData
        return StunData(self._node.at("stunData"))
    @property
    def volume(self):  # type: ()->Float
        return Float(self._node.at("volume"))
    @volume.setter
    def volume(self, val): self.volume.set(val)
    pass


from EntityLibPy import Node

class ProjectileGD(HelperObject):
    schema_name = "ProjectileGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ProjectileGD
        return ProjectileGD(entlib.load_node_file(sourcefile, entlib.get_schema(ProjectileGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ProjectileGD
        return ProjectileGD(entlib.make_node(ProjectileGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Super(self):  # type: ()->ActorGD
        return ActorGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class CreatureGD(HelperObject):
    schema_name = "CreatureGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CreatureGD
        return CreatureGD(entlib.load_node_file(sourcefile, entlib.get_schema(CreatureGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CreatureGD
        return CreatureGD(entlib.make_node(CreatureGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DisableLookAt(self):  # type: ()->Bool
        return Bool(self._node.at("DisableLookAt"))
    @DisableLookAt.setter
    def DisableLookAt(self, val): self.DisableLookAt.set(val)
    @property
    def DivePitchAngleMax(self):  # type: ()->Float
        return Float(self._node.at("DivePitchAngleMax"))
    @DivePitchAngleMax.setter
    def DivePitchAngleMax(self, val): self.DivePitchAngleMax.set(val)
    @property
    def DivePitchAngleMin(self):  # type: ()->Float
        return Float(self._node.at("DivePitchAngleMin"))
    @DivePitchAngleMin.setter
    def DivePitchAngleMin(self, val): self.DivePitchAngleMin.set(val)
    @property
    def FlyPitchAngleMax(self):  # type: ()->Float
        return Float(self._node.at("FlyPitchAngleMax"))
    @FlyPitchAngleMax.setter
    def FlyPitchAngleMax(self, val): self.FlyPitchAngleMax.set(val)
    @property
    def FlyPitchAngleMin(self):  # type: ()->Float
        return Float(self._node.at("FlyPitchAngleMin"))
    @FlyPitchAngleMin.setter
    def FlyPitchAngleMin(self, val): self.FlyPitchAngleMin.set(val)
    @property
    def IsBig(self):  # type: ()->Bool
        return Bool(self._node.at("IsBig"))
    @IsBig.setter
    def IsBig(self, val): self.IsBig.set(val)
    @property
    def IsDivinity(self):  # type: ()->Bool
        return Bool(self._node.at("IsDivinity"))
    @IsDivinity.setter
    def IsDivinity(self, val): self.IsDivinity.set(val)
    @property
    def IsGuardian(self):  # type: ()->Bool
        return Bool(self._node.at("IsGuardian"))
    @IsGuardian.setter
    def IsGuardian(self, val): self.IsGuardian.set(val)
    @property
    def IsStaff(self):  # type: ()->Bool
        return Bool(self._node.at("IsStaff"))
    @IsStaff.setter
    def IsStaff(self, val): self.IsStaff.set(val)
    @property
    def SpawnSoulIfNoEnemy(self):  # type: ()->Bool
        return Bool(self._node.at("SpawnSoulIfNoEnemy"))
    @SpawnSoulIfNoEnemy.setter
    def SpawnSoulIfNoEnemy(self, val): self.SpawnSoulIfNoEnemy.set(val)
    @property
    def SpeedFastMinDuration(self):  # type: ()->SpeedFastMinDuration
        return SpeedFastMinDuration(self._node.at("SpeedFastMinDuration"))
    @property
    def Super(self):  # type: ()->ActorGD
        return ActorGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def biteData(self):  # type: ()->BiteData
        return BiteData(self._node.at("biteData"))
    @property
    def dangerousnessData(self):  # type: ()->CreatureDangerousness
        return CreatureDangerousness(self._node.at("dangerousnessData"))
    @property
    def fusionData(self):  # type: ()->FusionData
        return FusionData(self._node.at("fusionData"))
    @property
    def interactData(self):  # type: ()->InteractData
        return InteractData(self._node.at("interactData"))
    @property
    def mountData(self):  # type: ()->MountData
        return MountData(self._node.at("mountData"))
    @property
    def revivedData(self):  # type: ()->RevivedData
        return RevivedData(self._node.at("revivedData"))
    pass


from EntityLibPy import Node

class ClothGD(HelperObject):
    schema_name = "ClothGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ClothGD
        return ClothGD(entlib.load_node_file(sourcefile, entlib.get_schema(ClothGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ClothGD
        return ClothGD(entlib.make_node(ClothGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BodyEventsPath(self):  # type: ()->String
        return String(self._node.at("BodyEventsPath"))
    @BodyEventsPath.setter
    def BodyEventsPath(self, val): self.BodyEventsPath.set(val)
    @property
    def BodyNamePath(self):  # type: ()->String
        return String(self._node.at("BodyNamePath"))
    @BodyNamePath.setter
    def BodyNamePath(self, val): self.BodyNamePath.set(val)
    @property
    def SoundBanks(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("SoundBanks"))
    @SoundBanks.setter
    def SoundBanks(self, val): self.SoundBanks.set(val)
    @property
    def SoundEventMappingRules(self):  # type: ()->SoundEventMapping
        return SoundEventMapping(self._node.at("SoundEventMappingRules"))
    @property
    def Super(self):  # type: ()->ActorGD
        return ActorGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class AaModeEnum(Enum):
    Fxaa = "Fxaa"
    Smaa = "Smaa"
    None_ = "None"
    AaMode_Count = "AaMode_Count"


class AaMode(Primitive[AaModeEnum]):  # Enum
    def __init__(self, node):
        super(AaMode, self).__init__(AaModeEnum, node)
    schema_name = "AaMode"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> AaMode
        return AaMode(node)
    def set(self, val):  # type: (AaModeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class RenderManager_RenderConfig(HelperObject):
    schema_name = "RenderManager::RenderConfig"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RenderManager_RenderConfig
        return RenderManager_RenderConfig(entlib.load_node_file(sourcefile, entlib.get_schema(RenderManager_RenderConfig.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RenderManager_RenderConfig
        return RenderManager_RenderConfig(entlib.make_node(RenderManager_RenderConfig.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AaMode(self):  # type: ()->AaMode
        return AaMode(self._node.at("AaMode"))
    @AaMode.setter
    def AaMode(self, val): self.AaMode.set(val)
    @property
    def ClusteredLighting(self):  # type: ()->Int
        return Int(self._node.at("ClusteredLighting"))
    @ClusteredLighting.setter
    def ClusteredLighting(self, val): self.ClusteredLighting.set(val)
    @property
    def DisplacementMapSize(self):  # type: ()->Int
        return Int(self._node.at("DisplacementMapSize"))
    @DisplacementMapSize.setter
    def DisplacementMapSize(self, val): self.DisplacementMapSize.set(val)
    @property
    def EnableAsyncPipelineCreation(self):  # type: ()->Int
        return Int(self._node.at("EnableAsyncPipelineCreation"))
    @EnableAsyncPipelineCreation.setter
    def EnableAsyncPipelineCreation(self, val): self.EnableAsyncPipelineCreation.set(val)
    @property
    def EnableColorCorrection(self):  # type: ()->Int
        return Int(self._node.at("EnableColorCorrection"))
    @EnableColorCorrection.setter
    def EnableColorCorrection(self, val): self.EnableColorCorrection.set(val)
    @property
    def EnableComputeForDeferredLighting(self):  # type: ()->Int
        return Int(self._node.at("EnableComputeForDeferredLighting"))
    @EnableComputeForDeferredLighting.setter
    def EnableComputeForDeferredLighting(self, val): self.EnableComputeForDeferredLighting.set(val)
    @property
    def EnableComputeForUnderWater(self):  # type: ()->Int
        return Int(self._node.at("EnableComputeForUnderWater"))
    @EnableComputeForUnderWater.setter
    def EnableComputeForUnderWater(self, val): self.EnableComputeForUnderWater.set(val)
    @property
    def EnableDepthOfField(self):  # type: ()->Int
        return Int(self._node.at("EnableDepthOfField"))
    @EnableDepthOfField.setter
    def EnableDepthOfField(self, val): self.EnableDepthOfField.set(val)
    @property
    def EnableLensFlare(self):  # type: ()->Int
        return Int(self._node.at("EnableLensFlare"))
    @EnableLensFlare.setter
    def EnableLensFlare(self, val): self.EnableLensFlare.set(val)
    @property
    def EnableMotionBlur(self):  # type: ()->Int
        return Int(self._node.at("EnableMotionBlur"))
    @EnableMotionBlur.setter
    def EnableMotionBlur(self, val): self.EnableMotionBlur.set(val)
    @property
    def EnableNonBlockingDrawUpdates(self):  # type: ()->Int
        return Int(self._node.at("EnableNonBlockingDrawUpdates"))
    @EnableNonBlockingDrawUpdates.setter
    def EnableNonBlockingDrawUpdates(self, val): self.EnableNonBlockingDrawUpdates.set(val)
    @property
    def EnableSSAO(self):  # type: ()->Int
        return Int(self._node.at("EnableSSAO"))
    @EnableSSAO.setter
    def EnableSSAO(self, val): self.EnableSSAO.set(val)
    @property
    def EnableSSR(self):  # type: ()->Int
        return Int(self._node.at("EnableSSR"))
    @EnableSSR.setter
    def EnableSSR(self, val): self.EnableSSR.set(val)
    @property
    def EnableSSSS(self):  # type: ()->Int
        return Int(self._node.at("EnableSSSS"))
    @EnableSSSS.setter
    def EnableSSSS(self, val): self.EnableSSSS.set(val)
    @property
    def EnableTonemapping(self):  # type: ()->Int
        return Int(self._node.at("EnableTonemapping"))
    @EnableTonemapping.setter
    def EnableTonemapping(self, val): self.EnableTonemapping.set(val)
    @property
    def EnableUnderwaterPostEffect(self):  # type: ()->Int
        return Int(self._node.at("EnableUnderwaterPostEffect"))
    @EnableUnderwaterPostEffect.setter
    def EnableUnderwaterPostEffect(self, val): self.EnableUnderwaterPostEffect.set(val)
    @property
    def GlobalLODBias(self):  # type: ()->Float
        return Float(self._node.at("GlobalLODBias"))
    @GlobalLODBias.setter
    def GlobalLODBias(self, val): self.GlobalLODBias.set(val)
    @property
    def GlobalLODScale(self):  # type: ()->Float
        return Float(self._node.at("GlobalLODScale"))
    @GlobalLODScale.setter
    def GlobalLODScale(self, val): self.GlobalLODScale.set(val)
    @property
    def LODDecimationFactor(self):  # type: ()->Float
        return Float(self._node.at("LODDecimationFactor"))
    @LODDecimationFactor.setter
    def LODDecimationFactor(self, val): self.LODDecimationFactor.set(val)
    @property
    def MaxActiveShadowLights(self):  # type: ()->Int
        return Int(self._node.at("MaxActiveShadowLights"))
    @MaxActiveShadowLights.setter
    def MaxActiveShadowLights(self, val): self.MaxActiveShadowLights.set(val)
    @property
    def MinTriangleSize(self):  # type: ()->Float
        return Float(self._node.at("MinTriangleSize"))
    @MinTriangleSize.setter
    def MinTriangleSize(self, val): self.MinTriangleSize.set(val)
    @property
    def ParticleLigthingAtlasSize(self):  # type: ()->Int
        return Int(self._node.at("ParticleLigthingAtlasSize"))
    @ParticleLigthingAtlasSize.setter
    def ParticleLigthingAtlasSize(self, val): self.ParticleLigthingAtlasSize.set(val)
    @property
    def PlanarReflectionsDownsample(self):  # type: ()->Int
        return Int(self._node.at("PlanarReflectionsDownsample"))
    @PlanarReflectionsDownsample.setter
    def PlanarReflectionsDownsample(self, val): self.PlanarReflectionsDownsample.set(val)
    @property
    def Quality(self):  # type: ()->Int
        return Int(self._node.at("Quality"))
    @Quality.setter
    def Quality(self, val): self.Quality.set(val)
    @property
    def QualityDepthOfField(self):  # type: ()->Int
        return Int(self._node.at("QualityDepthOfField"))
    @QualityDepthOfField.setter
    def QualityDepthOfField(self, val): self.QualityDepthOfField.set(val)
    @property
    def RippleMapSize(self):  # type: ()->Int
        return Int(self._node.at("RippleMapSize"))
    @RippleMapSize.setter
    def RippleMapSize(self, val): self.RippleMapSize.set(val)
    @property
    def SamplesSSAO(self):  # type: ()->Int
        return Int(self._node.at("SamplesSSAO"))
    @SamplesSSAO.setter
    def SamplesSSAO(self, val): self.SamplesSSAO.set(val)
    @property
    def SamplesSSSS(self):  # type: ()->Int
        return Int(self._node.at("SamplesSSSS"))
    @SamplesSSSS.setter
    def SamplesSSSS(self, val): self.SamplesSSSS.set(val)
    @property
    def ShadowLODScale(self):  # type: ()->Float
        return Float(self._node.at("ShadowLODScale"))
    @ShadowLODScale.setter
    def ShadowLODScale(self, val): self.ShadowLODScale.set(val)
    @property
    def ShadowMapSize(self):  # type: ()->Int
        return Int(self._node.at("ShadowMapSize"))
    @ShadowMapSize.setter
    def ShadowMapSize(self, val): self.ShadowMapSize.set(val)
    @property
    def TerrainAlbedoMapBlendAreaRatio(self):  # type: ()->Float
        return Float(self._node.at("TerrainAlbedoMapBlendAreaRatio"))
    @TerrainAlbedoMapBlendAreaRatio.setter
    def TerrainAlbedoMapBlendAreaRatio(self, val): self.TerrainAlbedoMapBlendAreaRatio.set(val)
    @property
    def TerrainAlbedoMapExtent(self):  # type: ()->Float
        return Float(self._node.at("TerrainAlbedoMapExtent"))
    @TerrainAlbedoMapExtent.setter
    def TerrainAlbedoMapExtent(self, val): self.TerrainAlbedoMapExtent.set(val)
    @property
    def UseHiZBufferForClusteredLighting(self):  # type: ()->Int
        return Int(self._node.at("UseHiZBufferForClusteredLighting"))
    @UseHiZBufferForClusteredLighting.setter
    def UseHiZBufferForClusteredLighting(self, val): self.UseHiZBufferForClusteredLighting.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class RenderManager(HelperObject):
    schema_name = "RenderManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RenderManager
        return RenderManager(entlib.load_node_file(sourcefile, entlib.get_schema(RenderManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RenderManager
        return RenderManager(entlib.make_node(RenderManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DecalMeshPath(self):  # type: ()->String
        return String(self._node.at("DecalMeshPath"))
    @DecalMeshPath.setter
    def DecalMeshPath(self, val): self.DecalMeshPath.set(val)
    @property
    def DisableMoveDrawOrigin(self):  # type: ()->Bool
        return Bool(self._node.at("DisableMoveDrawOrigin"))
    @DisableMoveDrawOrigin.setter
    def DisableMoveDrawOrigin(self, val): self.DisableMoveDrawOrigin.set(val)
    @property
    def DoubleSizeIn4K(self):  # type: ()->Bool
        return Bool(self._node.at("DoubleSizeIn4K"))
    @DoubleSizeIn4K.setter
    def DoubleSizeIn4K(self, val): self.DoubleSizeIn4K.set(val)
    @property
    def EnableFade(self):  # type: ()->Bool
        return Bool(self._node.at("EnableFade"))
    @EnableFade.setter
    def EnableFade(self, val): self.EnableFade.set(val)
    @property
    def EnableLODTransitions(self):  # type: ()->Bool
        return Bool(self._node.at("EnableLODTransitions"))
    @EnableLODTransitions.setter
    def EnableLODTransitions(self, val): self.EnableLODTransitions.set(val)
    @property
    def FloatPrecisionThreshold(self):  # type: ()->Float
        return Float(self._node.at("FloatPrecisionThreshold"))
    @FloatPrecisionThreshold.setter
    def FloatPrecisionThreshold(self, val): self.FloatPrecisionThreshold.set(val)
    @property
    def Fullscreen(self):  # type: ()->Bool
        return Bool(self._node.at("Fullscreen"))
    @Fullscreen.setter
    def Fullscreen(self, val): self.Fullscreen.set(val)
    @property
    def Global(self):  # type: ()->RenderManager_RenderConfig
        return RenderManager_RenderConfig(self._node.at("Global"))
    @property
    def ImGuiFontScale(self):  # type: ()->Int
        return Int(self._node.at("ImGuiFontScale"))
    @ImGuiFontScale.setter
    def ImGuiFontScale(self, val): self.ImGuiFontScale.set(val)
    @property
    def LODTransitionDuration(self):  # type: ()->Float
        return Float(self._node.at("LODTransitionDuration"))
    @LODTransitionDuration.setter
    def LODTransitionDuration(self, val): self.LODTransitionDuration.set(val)
    @property
    def MotionBlurHeightFactorFromSpeed(self):  # type: ()->ScaleConverter
        return ScaleConverter(self._node.at("MotionBlurHeightFactorFromSpeed"))
    @property
    def PC(self):  # type: ()->RenderManager_RenderConfig
        return RenderManager_RenderConfig(self._node.at("PC"))
    @property
    def PS4(self):  # type: ()->RenderManager_RenderConfig
        return RenderManager_RenderConfig(self._node.at("PS4"))
    @property
    def PS4Neo(self):  # type: ()->RenderManager_RenderConfig
        return RenderManager_RenderConfig(self._node.at("PS4Neo"))
    @property
    def PS5(self):  # type: ()->RenderManager_RenderConfig
        return RenderManager_RenderConfig(self._node.at("PS5"))
    @property
    def RenderToWindow(self):  # type: ()->Bool
        return Bool(self._node.at("RenderToWindow"))
    @RenderToWindow.setter
    def RenderToWindow(self, val): self.RenderToWindow.set(val)
    @property
    def ResolutionX(self):  # type: ()->Int
        return Int(self._node.at("ResolutionX"))
    @ResolutionX.setter
    def ResolutionX(self, val): self.ResolutionX.set(val)
    @property
    def ResolutionY(self):  # type: ()->Int
        return Int(self._node.at("ResolutionY"))
    @ResolutionY.setter
    def ResolutionY(self, val): self.ResolutionY.set(val)
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def VSync(self):  # type: ()->Int
        return Int(self._node.at("VSync"))
    @VSync.setter
    def VSync(self, val): self.VSync.set(val)
    @property
    def WindowPositionX(self):  # type: ()->Int
        return Int(self._node.at("WindowPositionX"))
    @WindowPositionX.setter
    def WindowPositionX(self, val): self.WindowPositionX.set(val)
    @property
    def WindowPositionY(self):  # type: ()->Int
        return Int(self._node.at("WindowPositionY"))
    @WindowPositionY.setter
    def WindowPositionY(self, val): self.WindowPositionY.set(val)
    @property
    def WindowSizeX(self):  # type: ()->Int
        return Int(self._node.at("WindowSizeX"))
    @WindowSizeX.setter
    def WindowSizeX(self, val): self.WindowSizeX.set(val)
    @property
    def WindowSizeY(self):  # type: ()->Int
        return Int(self._node.at("WindowSizeY"))
    @WindowSizeY.setter
    def WindowSizeY(self, val): self.WindowSizeY.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
class AIOrderTypeEnum(Enum):
    AIOrderType_None = "AIOrderType_None"
    follow = "follow"
    attack = "attack"
    stay = "stay"
    heal = "heal"
    transhumance = "transhumance"
    changemode = "changemode"
    readytoattack = "readytoattack"
    AIOrderType_COUNT = "AIOrderType_COUNT"


class AIOrderType(Primitive[AIOrderTypeEnum]):  # Enum
    def __init__(self, node):
        super(AIOrderType, self).__init__(AIOrderTypeEnum, node)
    schema_name = "AIOrderType"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> AIOrderType
        return AIOrderType(node)
    def set(self, val):  # type: (AIOrderTypeEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class AIContextSlot(HelperObject):
    schema_name = "AIContextSlot"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AIContextSlot
        return AIContextSlot(entlib.load_node_file(sourcefile, entlib.get_schema(AIContextSlot.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AIContextSlot
        return AIContextSlot(entlib.make_node(AIContextSlot.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Count(self):  # type: ()->Int
        return Int(self._node.at("Count"))
    @Count.setter
    def Count(self, val): self.Count.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AIContextGD(HelperObject):
    schema_name = "AIContextGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AIContextGD
        return AIContextGD(entlib.load_node_file(sourcefile, entlib.get_schema(AIContextGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AIContextGD
        return AIContextGD(entlib.make_node(AIContextGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FollowAccelerationCoeff(self):  # type: ()->Float
        return Float(self._node.at("FollowAccelerationCoeff"))
    @FollowAccelerationCoeff.setter
    def FollowAccelerationCoeff(self, val): self.FollowAccelerationCoeff.set(val)
    @property
    def FollowCanStopMaxStateDuration(self):  # type: ()->Float
        return Float(self._node.at("FollowCanStopMaxStateDuration"))
    @FollowCanStopMaxStateDuration.setter
    def FollowCanStopMaxStateDuration(self, val): self.FollowCanStopMaxStateDuration.set(val)
    @property
    def FollowCanStopMaxTimeInExpandedZone(self):  # type: ()->Float
        return Float(self._node.at("FollowCanStopMaxTimeInExpandedZone"))
    @FollowCanStopMaxTimeInExpandedZone.setter
    def FollowCanStopMaxTimeInExpandedZone(self, val): self.FollowCanStopMaxTimeInExpandedZone.set(val)
    @property
    def FollowDecelerationCoeff(self):  # type: ()->Float
        return Float(self._node.at("FollowDecelerationCoeff"))
    @FollowDecelerationCoeff.setter
    def FollowDecelerationCoeff(self, val): self.FollowDecelerationCoeff.set(val)
    @property
    def FollowDeltaAngleTarget(self):  # type: ()->Float
        return Float(self._node.at("FollowDeltaAngleTarget"))
    @FollowDeltaAngleTarget.setter
    def FollowDeltaAngleTarget(self, val): self.FollowDeltaAngleTarget.set(val)
    @property
    def FollowHotspotRadius(self):  # type: ()->Float
        return Float(self._node.at("FollowHotspotRadius"))
    @FollowHotspotRadius.setter
    def FollowHotspotRadius(self, val): self.FollowHotspotRadius.set(val)
    @property
    def FollowHotspotSpace(self):  # type: ()->Float
        return Float(self._node.at("FollowHotspotSpace"))
    @FollowHotspotSpace.setter
    def FollowHotspotSpace(self, val): self.FollowHotspotSpace.set(val)
    @property
    def FollowRandomSpeedZoneInBeginCoeffMax(self):  # type: ()->Float
        return Float(self._node.at("FollowRandomSpeedZoneInBeginCoeffMax"))
    @FollowRandomSpeedZoneInBeginCoeffMax.setter
    def FollowRandomSpeedZoneInBeginCoeffMax(self, val): self.FollowRandomSpeedZoneInBeginCoeffMax.set(val)
    @property
    def FollowRandomSpeedZoneInBeginCoeffMin(self):  # type: ()->Float
        return Float(self._node.at("FollowRandomSpeedZoneInBeginCoeffMin"))
    @FollowRandomSpeedZoneInBeginCoeffMin.setter
    def FollowRandomSpeedZoneInBeginCoeffMin(self, val): self.FollowRandomSpeedZoneInBeginCoeffMin.set(val)
    @property
    def FollowRandomSpeedZoneInEndCoeffMax(self):  # type: ()->Float
        return Float(self._node.at("FollowRandomSpeedZoneInEndCoeffMax"))
    @FollowRandomSpeedZoneInEndCoeffMax.setter
    def FollowRandomSpeedZoneInEndCoeffMax(self, val): self.FollowRandomSpeedZoneInEndCoeffMax.set(val)
    @property
    def FollowRandomSpeedZoneInEndCoeffMin(self):  # type: ()->Float
        return Float(self._node.at("FollowRandomSpeedZoneInEndCoeffMin"))
    @FollowRandomSpeedZoneInEndCoeffMin.setter
    def FollowRandomSpeedZoneInEndCoeffMin(self, val): self.FollowRandomSpeedZoneInEndCoeffMin.set(val)
    @property
    def FollowRandomSynchroDelayMax(self):  # type: ()->Float
        return Float(self._node.at("FollowRandomSynchroDelayMax"))
    @FollowRandomSynchroDelayMax.setter
    def FollowRandomSynchroDelayMax(self, val): self.FollowRandomSynchroDelayMax.set(val)
    @property
    def FollowRandomSynchroDelayMin(self):  # type: ()->Float
        return Float(self._node.at("FollowRandomSynchroDelayMin"))
    @FollowRandomSynchroDelayMin.setter
    def FollowRandomSynchroDelayMin(self, val): self.FollowRandomSynchroDelayMin.set(val)
    @property
    def FollowSpeedChangeThreshold(self):  # type: ()->Float
        return Float(self._node.at("FollowSpeedChangeThreshold"))
    @FollowSpeedChangeThreshold.setter
    def FollowSpeedChangeThreshold(self, val): self.FollowSpeedChangeThreshold.set(val)
    @property
    def FollowSpeedZoneInBegin(self):  # type: ()->Float
        return Float(self._node.at("FollowSpeedZoneInBegin"))
    @FollowSpeedZoneInBegin.setter
    def FollowSpeedZoneInBegin(self, val): self.FollowSpeedZoneInBegin.set(val)
    @property
    def FollowSpeedZoneInEnd(self):  # type: ()->Float
        return Float(self._node.at("FollowSpeedZoneInEnd"))
    @FollowSpeedZoneInEnd.setter
    def FollowSpeedZoneInEnd(self, val): self.FollowSpeedZoneInEnd.set(val)
    @property
    def FollowSpeedZoneOutEnd(self):  # type: ()->Float
        return Float(self._node.at("FollowSpeedZoneOutEnd"))
    @FollowSpeedZoneOutEnd.setter
    def FollowSpeedZoneOutEnd(self, val): self.FollowSpeedZoneOutEnd.set(val)
    @property
    def FollowTargetDistRadiusFactor(self):  # type: ()->Float
        return Float(self._node.at("FollowTargetDistRadiusFactor"))
    @FollowTargetDistRadiusFactor.setter
    def FollowTargetDistRadiusFactor(self, val): self.FollowTargetDistRadiusFactor.set(val)
    @property
    def Super(self):  # type: ()->ComponentGD
        return ComponentGD(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def attackCircleRadius(self):  # type: ()->Float
        return Float(self._node.at("attackCircleRadius"))
    @attackCircleRadius.setter
    def attackCircleRadius(self, val): self.attackCircleRadius.set(val)
    @property
    def distanceBetweenCreatures(self):  # type: ()->Float
        return Float(self._node.at("distanceBetweenCreatures"))
    @distanceBetweenCreatures.setter
    def distanceBetweenCreatures(self, val): self.distanceBetweenCreatures.set(val)
    @property
    def distantReachCircleRadius(self):  # type: ()->Float
        return Float(self._node.at("distantReachCircleRadius"))
    @distantReachCircleRadius.setter
    def distantReachCircleRadius(self, val): self.distantReachCircleRadius.set(val)
    @property
    def followCircleRadius(self):  # type: ()->Float
        return Float(self._node.at("followCircleRadius"))
    @followCircleRadius.setter
    def followCircleRadius(self, val): self.followCircleRadius.set(val)
    @property
    def lockTargetCircleRadius(self):  # type: ()->Float
        return Float(self._node.at("lockTargetCircleRadius"))
    @lockTargetCircleRadius.setter
    def lockTargetCircleRadius(self, val): self.lockTargetCircleRadius.set(val)
    @property
    def slots(self):  # type: ()->Array[AIContextSlot]
        return (lambda n: Array(AIContextSlot, n))(self._node.at("slots"))
    pass


from EntityLibPy import Node

class AIAggroInitAndDecValue(HelperObject):
    schema_name = "AIAggroInitAndDecValue"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AIAggroInitAndDecValue
        return AIAggroInitAndDecValue(entlib.load_node_file(sourcefile, entlib.get_schema(AIAggroInitAndDecValue.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AIAggroInitAndDecValue
        return AIAggroInitAndDecValue(entlib.make_node(AIAggroInitAndDecValue.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def DecrementValue(self):  # type: ()->Int
        return Int(self._node.at("DecrementValue"))
    @DecrementValue.setter
    def DecrementValue(self, val): self.DecrementValue.set(val)
    @property
    def InitValue(self):  # type: ()->Int
        return Int(self._node.at("InitValue"))
    @InitValue.setter
    def InitValue(self, val): self.InitValue.set(val)
    @property
    def MaxValue(self):  # type: ()->Int
        return Int(self._node.at("MaxValue"))
    @MaxValue.setter
    def MaxValue(self, val): self.MaxValue.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AIKnowledgeManager(HelperObject):
    schema_name = "AIKnowledgeManager"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AIKnowledgeManager
        return AIKnowledgeManager(entlib.load_node_file(sourcefile, entlib.get_schema(AIKnowledgeManager.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AIKnowledgeManager
        return AIKnowledgeManager(entlib.make_node(AIKnowledgeManager.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AggroValues(self):  # type: ()->Array[AIAggroInitAndDecValue]
        return (lambda n: Array(AIAggroInitAndDecValue, n))(self._node.at("AggroValues"))
    @property
    def OrderPriorities(self):  # type: ()->Map[AIOrderTypeEnum, Int]
        return (lambda n: Map(AIOrderTypeEnum, Int, n))(self._node.at("OrderPriorities"))
    @property
    def Super(self):  # type: ()->Manager
        return Manager(self._node.at("Super"))
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ActorStateStack(HelperObject):
    schema_name = "ActorStateStack"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ActorStateStack
        return ActorStateStack(entlib.load_node_file(sourcefile, entlib.get_schema(ActorStateStack.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ActorStateStack
        return ActorStateStack(entlib.make_node(ActorStateStack.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class AnalyticsFPS(HelperObject):
    schema_name = "AnalyticsFPS"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnalyticsFPS
        return AnalyticsFPS(entlib.load_node_file(sourcefile, entlib.get_schema(AnalyticsFPS.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnalyticsFPS
        return AnalyticsFPS(entlib.make_node(AnalyticsFPS.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Interval(self):  # type: ()->Float
        return Float(self._node.at("Interval"))
    @Interval.setter
    def Interval(self, val): self.Interval.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AnalyticsInGameViewer(HelperObject):
    schema_name = "AnalyticsInGameViewer"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnalyticsInGameViewer
        return AnalyticsInGameViewer(entlib.load_node_file(sourcefile, entlib.get_schema(AnalyticsInGameViewer.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnalyticsInGameViewer
        return AnalyticsInGameViewer(entlib.make_node(AnalyticsInGameViewer.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class AnalyticsObserverInterface(HelperObject):
    schema_name = "AnalyticsObserverInterface"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnalyticsObserverInterface
        return AnalyticsObserverInterface(entlib.load_node_file(sourcefile, entlib.get_schema(AnalyticsObserverInterface.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnalyticsObserverInterface
        return AnalyticsObserverInterface(entlib.make_node(AnalyticsObserverInterface.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class AnimationGDData(HelperObject):
    schema_name = "AnimationGDData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationGDData
        return AnimationGDData(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationGDData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationGDData
        return AnimationGDData(entlib.make_node(AnimationGDData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def animationDatabasePath(self):  # type: ()->String
        return String(self._node.at("animationDatabasePath"))
    @animationDatabasePath.setter
    def animationDatabasePath(self, val): self.animationDatabasePath.set(val)
    @property
    def skeletonPath(self):  # type: ()->String
        return String(self._node.at("skeletonPath"))
    @skeletonPath.setter
    def skeletonPath(self, val): self.skeletonPath.set(val)
    pass


from EntityLibPy import Node

class AnimationTreeConstraintsGD_BendSoundEventData(HelperObject):
    schema_name = "AnimationTreeConstraintsGD::BendSoundEventData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AnimationTreeConstraintsGD_BendSoundEventData
        return AnimationTreeConstraintsGD_BendSoundEventData(entlib.load_node_file(sourcefile, entlib.get_schema(AnimationTreeConstraintsGD_BendSoundEventData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AnimationTreeConstraintsGD_BendSoundEventData
        return AnimationTreeConstraintsGD_BendSoundEventData(entlib.make_node(AnimationTreeConstraintsGD_BendSoundEventData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def BendStartEventName(self):  # type: ()->String
        return String(self._node.at("BendStartEventName"))
    @BendStartEventName.setter
    def BendStartEventName(self, val): self.BendStartEventName.set(val)
    @property
    def CatapultStartEventName(self):  # type: ()->String
        return String(self._node.at("CatapultStartEventName"))
    @CatapultStartEventName.setter
    def CatapultStartEventName(self, val): self.CatapultStartEventName.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class AudioEventData(HelperObject):
    schema_name = "AudioEventData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->AudioEventData
        return AudioEventData(entlib.load_node_file(sourcefile, entlib.get_schema(AudioEventData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->AudioEventData
        return AudioEventData(entlib.make_node(AudioEventData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ID(self):  # type: ()->Int
        return Int(self._node.at("ID"))
    @ID.setter
    def ID(self, val): self.ID.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Range(self):  # type: ()->Float
        return Float(self._node.at("Range"))
    @Range.setter
    def Range(self, val): self.Range.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class BehaviorPesto(HelperObject):
    schema_name = "BehaviorPesto"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->BehaviorPesto
        return BehaviorPesto(entlib.load_node_file(sourcefile, entlib.get_schema(BehaviorPesto.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->BehaviorPesto
        return BehaviorPesto(entlib.make_node(BehaviorPesto.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class CheatCodeReplication(HelperObject):
    schema_name = "CheatCodeReplication"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CheatCodeReplication
        return CheatCodeReplication(entlib.load_node_file(sourcefile, entlib.get_schema(CheatCodeReplication.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CheatCodeReplication
        return CheatCodeReplication(entlib.make_node(CheatCodeReplication.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class ClassRef(HelperObject):
    schema_name = "ClassRef"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ClassRef
        return ClassRef(entlib.load_node_file(sourcefile, entlib.get_schema(ClassRef.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ClassRef
        return ClassRef(entlib.make_node(ClassRef.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class ClimbData(HelperObject):
    schema_name = "ClimbData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ClimbData
        return ClimbData(entlib.load_node_file(sourcefile, entlib.get_schema(ClimbData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ClimbData
        return ClimbData(entlib.make_node(ClimbData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def climbTreeSelectionAngle(self):  # type: ()->Float
        return Float(self._node.at("climbTreeSelectionAngle"))
    @climbTreeSelectionAngle.setter
    def climbTreeSelectionAngle(self, val): self.climbTreeSelectionAngle.set(val)
    @property
    def climbTreeSelectionBlindAngle(self):  # type: ()->Float
        return Float(self._node.at("climbTreeSelectionBlindAngle"))
    @climbTreeSelectionBlindAngle.setter
    def climbTreeSelectionBlindAngle(self, val): self.climbTreeSelectionBlindAngle.set(val)
    @property
    def climbTreeSelectionDistance(self):  # type: ()->Float
        return Float(self._node.at("climbTreeSelectionDistance"))
    @climbTreeSelectionDistance.setter
    def climbTreeSelectionDistance(self, val): self.climbTreeSelectionDistance.set(val)
    @property
    def climbTreeSelectionOffset(self):  # type: ()->Float
        return Float(self._node.at("climbTreeSelectionOffset"))
    @climbTreeSelectionOffset.setter
    def climbTreeSelectionOffset(self, val): self.climbTreeSelectionOffset.set(val)
    pass


from EntityLibPy import Node

class CloudsGenerator(HelperObject):
    schema_name = "CloudsGenerator"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->CloudsGenerator
        return CloudsGenerator(entlib.load_node_file(sourcefile, entlib.get_schema(CloudsGenerator.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->CloudsGenerator
        return CloudsGenerator(entlib.make_node(CloudsGenerator.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ApearanceDuration(self):  # type: ()->Float
        return Float(self._node.at("ApearanceDuration"))
    @ApearanceDuration.setter
    def ApearanceDuration(self, val): self.ApearanceDuration.set(val)
    @property
    def ApearanceDurationRandom(self):  # type: ()->Float
        return Float(self._node.at("ApearanceDurationRandom"))
    @ApearanceDurationRandom.setter
    def ApearanceDurationRandom(self, val): self.ApearanceDurationRandom.set(val)
    @property
    def CloudSize(self):  # type: ()->Float
        return Float(self._node.at("CloudSize"))
    @CloudSize.setter
    def CloudSize(self, val): self.CloudSize.set(val)
    @property
    def CloudSizeRandom(self):  # type: ()->Float
        return Float(self._node.at("CloudSizeRandom"))
    @CloudSizeRandom.setter
    def CloudSizeRandom(self, val): self.CloudSizeRandom.set(val)
    @property
    def CloudSpeedMultiplier(self):  # type: ()->Float
        return Float(self._node.at("CloudSpeedMultiplier"))
    @CloudSpeedMultiplier.setter
    def CloudSpeedMultiplier(self, val): self.CloudSpeedMultiplier.set(val)
    @property
    def CloudStrength(self):  # type: ()->Float
        return Float(self._node.at("CloudStrength"))
    @CloudStrength.setter
    def CloudStrength(self, val): self.CloudStrength.set(val)
    @property
    def CloudsCoverageDensity(self):  # type: ()->Float
        return Float(self._node.at("CloudsCoverageDensity"))
    @CloudsCoverageDensity.setter
    def CloudsCoverageDensity(self, val): self.CloudsCoverageDensity.set(val)
    @property
    def DisapearanceDuration(self):  # type: ()->Float
        return Float(self._node.at("DisapearanceDuration"))
    @DisapearanceDuration.setter
    def DisapearanceDuration(self, val): self.DisapearanceDuration.set(val)
    @property
    def DisapearanceDurationRandom(self):  # type: ()->Float
        return Float(self._node.at("DisapearanceDurationRandom"))
    @DisapearanceDurationRandom.setter
    def DisapearanceDurationRandom(self, val): self.DisapearanceDurationRandom.set(val)
    @property
    def LifeDuration(self):  # type: ()->Float
        return Float(self._node.at("LifeDuration"))
    @LifeDuration.setter
    def LifeDuration(self, val): self.LifeDuration.set(val)
    @property
    def LifeDurationRandom(self):  # type: ()->Float
        return Float(self._node.at("LifeDurationRandom"))
    @LifeDurationRandom.setter
    def LifeDurationRandom(self, val): self.LifeDurationRandom.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class ConditionalRigidityAttribute_ActorStateName(HelperObject):
    schema_name = "ConditionalRigidityAttribute::ActorStateName"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ConditionalRigidityAttribute_ActorStateName
        return ConditionalRigidityAttribute_ActorStateName(entlib.load_node_file(sourcefile, entlib.get_schema(ConditionalRigidityAttribute_ActorStateName.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ConditionalRigidityAttribute_ActorStateName
        return ConditionalRigidityAttribute_ActorStateName(entlib.make_node(ConditionalRigidityAttribute_ActorStateName.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ActionName(self):  # type: ()->String
        return String(self._node.at("ActionName"))
    @ActionName.setter
    def ActionName(self, val): self.ActionName.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityArchive_MetaData(HelperObject):
    schema_name = "EntityArchive::MetaData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityArchive_MetaData
        return EntityArchive_MetaData(entlib.load_node_file(sourcefile, entlib.get_schema(EntityArchive_MetaData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityArchive_MetaData
        return EntityArchive_MetaData(entlib.make_node(EntityArchive_MetaData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def RawDataPath(self):  # type: ()->String
        return String(self._node.at("RawDataPath"))
    @RawDataPath.setter
    def RawDataPath(self, val): self.RawDataPath.set(val)
    @property
    def Version(self):  # type: ()->Int
        return Int(self._node.at("Version"))
    @Version.setter
    def Version(self, val): self.Version.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class EntityGD(HelperObject):
    schema_name = "EntityGD"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityGD
        return EntityGD(entlib.load_node_file(sourcefile, entlib.get_schema(EntityGD.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityGD
        return EntityGD(entlib.make_node(EntityGD.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def components(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("components"))
    @components.setter
    def components(self, val): self.components.set(val)
    pass


from EntityLibPy import Node

class EntityGDRef(HelperObject):
    schema_name = "EntityGDRef"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->EntityGDRef
        return EntityGDRef(entlib.load_node_file(sourcefile, entlib.get_schema(EntityGDRef.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->EntityGDRef
        return EntityGDRef(entlib.make_node(EntityGDRef.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def hash(self):  # type: ()->String
        return String(self._node.at("hash"))
    @hash.setter
    def hash(self, val): self.hash.set(val)
    pass


from EntityLibPy import Node

class FadeEffect(HelperObject):
    schema_name = "FadeEffect"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FadeEffect
        return FadeEffect(entlib.load_node_file(sourcefile, entlib.get_schema(FadeEffect.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FadeEffect
        return FadeEffect(entlib.make_node(FadeEffect.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def affectVisibilityProperty(self):  # type: ()->Bool
        return Bool(self._node.at("affectVisibilityProperty"))
    @affectVisibilityProperty.setter
    def affectVisibilityProperty(self, val): self.affectVisibilityProperty.set(val)
    @property
    def delay(self):  # type: ()->Float
        return Float(self._node.at("delay"))
    @delay.setter
    def delay(self, val): self.delay.set(val)
    @property
    def destinationAlpha(self):  # type: ()->Float
        return Float(self._node.at("destinationAlpha"))
    @destinationAlpha.setter
    def destinationAlpha(self, val): self.destinationAlpha.set(val)
    @property
    def duration(self):  # type: ()->Float
        return Float(self._node.at("duration"))
    @duration.setter
    def duration(self, val): self.duration.set(val)
    @property
    def infiniteDuration(self):  # type: ()->Bool
        return Bool(self._node.at("infiniteDuration"))
    @infiniteDuration.setter
    def infiniteDuration(self, val): self.infiniteDuration.set(val)
    @property
    def sourceAlpha(self):  # type: ()->Float
        return Float(self._node.at("sourceAlpha"))
    @sourceAlpha.setter
    def sourceAlpha(self, val): self.sourceAlpha.set(val)
    pass


from EntityLibPy import Node

class FlyingPathParameters(HelperObject):
    schema_name = "FlyingPathParameters"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->FlyingPathParameters
        return FlyingPathParameters(entlib.load_node_file(sourcefile, entlib.get_schema(FlyingPathParameters.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->FlyingPathParameters
        return FlyingPathParameters(entlib.make_node(FlyingPathParameters.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def FlyOverOffset(self):  # type: ()->Float
        return Float(self._node.at("FlyOverOffset"))
    @FlyOverOffset.setter
    def FlyOverOffset(self, val): self.FlyOverOffset.set(val)
    @property
    def FlyUpOverCharge(self):  # type: ()->Float
        return Float(self._node.at("FlyUpOverCharge"))
    @FlyUpOverCharge.setter
    def FlyUpOverCharge(self, val): self.FlyUpOverCharge.set(val)
    @property
    def FlyerRadius(self):  # type: ()->Float
        return Float(self._node.at("FlyerRadius"))
    @FlyerRadius.setter
    def FlyerRadius(self, val): self.FlyerRadius.set(val)
    @property
    def PreferredFlyDown(self):  # type: ()->Float
        return Float(self._node.at("PreferredFlyDown"))
    @PreferredFlyDown.setter
    def PreferredFlyDown(self, val): self.PreferredFlyDown.set(val)
    @property
    def PreferredFlyUp(self):  # type: ()->Float
        return Float(self._node.at("PreferredFlyUp"))
    @PreferredFlyUp.setter
    def PreferredFlyUp(self, val): self.PreferredFlyUp.set(val)
    @property
    def SizeLayerMask(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("SizeLayerMask"))
    @SizeLayerMask.setter
    def SizeLayerMask(self, val): self.SizeLayerMask.set(val)
    @property
    def SmoothFinalPhase(self):  # type: ()->Bool
        return Bool(self._node.at("SmoothFinalPhase"))
    @SmoothFinalPhase.setter
    def SmoothFinalPhase(self, val): self.SmoothFinalPhase.set(val)
    @property
    def SmoothHeightChanges(self):  # type: ()->Bool
        return Bool(self._node.at("SmoothHeightChanges"))
    @SmoothHeightChanges.setter
    def SmoothHeightChanges(self, val): self.SmoothHeightChanges.set(val)
    @property
    def SmoothLookahead(self):  # type: ()->Float
        return Float(self._node.at("SmoothLookahead"))
    @SmoothLookahead.setter
    def SmoothLookahead(self, val): self.SmoothLookahead.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class GRC(HelperObject):
    schema_name = "GRC"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GRC
        return GRC(entlib.load_node_file(sourcefile, entlib.get_schema(GRC.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GRC
        return GRC(entlib.make_node(GRC.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class GVoxelVolumeCollection(HelperObject):
    schema_name = "GVoxelVolumeCollection"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->GVoxelVolumeCollection
        return GVoxelVolumeCollection(entlib.load_node_file(sourcefile, entlib.get_schema(GVoxelVolumeCollection.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->GVoxelVolumeCollection
        return GVoxelVolumeCollection(entlib.make_node(GVoxelVolumeCollection.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class Game_Voxel(HelperObject):
    schema_name = "Game::Voxel"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Game_Voxel
        return Game_Voxel(entlib.load_node_file(sourcefile, entlib.get_schema(Game_Voxel.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Game_Voxel
        return Game_Voxel(entlib.make_node(Game_Voxel.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def NeighboursMask(self):  # type: ()->Int
        return Int(self._node.at("NeighboursMask"))
    @NeighboursMask.setter
    def NeighboursMask(self, val): self.NeighboursMask.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class IMatchMakerApi(HelperObject):
    schema_name = "IMatchMakerApi"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->IMatchMakerApi
        return IMatchMakerApi(entlib.load_node_file(sourcefile, entlib.get_schema(IMatchMakerApi.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->IMatchMakerApi
        return IMatchMakerApi(entlib.make_node(IMatchMakerApi.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class IOnlineApi(HelperObject):
    schema_name = "IOnlineApi"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->IOnlineApi
        return IOnlineApi(entlib.load_node_file(sourcefile, entlib.get_schema(IOnlineApi.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->IOnlineApi
        return IOnlineApi(entlib.make_node(IOnlineApi.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class InputController(HelperObject):
    schema_name = "InputController"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->InputController
        return InputController(entlib.load_node_file(sourcefile, entlib.get_schema(InputController.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->InputController
        return InputController(entlib.make_node(InputController.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node
Matrix22 = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node
Matrix32 = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class MeshNavigationBehavior(HelperObject):
    schema_name = "MeshNavigationBehavior"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->MeshNavigationBehavior
        return MeshNavigationBehavior(entlib.load_node_file(sourcefile, entlib.get_schema(MeshNavigationBehavior.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->MeshNavigationBehavior
        return MeshNavigationBehavior(entlib.make_node(MeshNavigationBehavior.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class NetRoot(HelperObject):
    schema_name = "NetRoot"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->NetRoot
        return NetRoot(entlib.load_node_file(sourcefile, entlib.get_schema(NetRoot.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->NetRoot
        return NetRoot(entlib.make_node(NetRoot.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class OutfitFadeParameter(HelperObject):
    schema_name = "OutfitFadeParameter"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->OutfitFadeParameter
        return OutfitFadeParameter(entlib.load_node_file(sourcefile, entlib.get_schema(OutfitFadeParameter.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->OutfitFadeParameter
        return OutfitFadeParameter(entlib.make_node(OutfitFadeParameter.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Delay(self):  # type: ()->Float
        return Float(self._node.at("Delay"))
    @Delay.setter
    def Delay(self, val): self.Delay.set(val)
    @property
    def Emissive(self):  # type: ()->Bool
        return Bool(self._node.at("Emissive"))
    @Emissive.setter
    def Emissive(self, val): self.Emissive.set(val)
    @property
    def Enabled(self):  # type: ()->Bool
        return Bool(self._node.at("Enabled"))
    @Enabled.setter
    def Enabled(self, val): self.Enabled.set(val)
    @property
    def FadeBodyPiece(self):  # type: ()->Bool
        return Bool(self._node.at("FadeBodyPiece"))
    @FadeBodyPiece.setter
    def FadeBodyPiece(self, val): self.FadeBodyPiece.set(val)
    @property
    def Time(self):  # type: ()->Float
        return Float(self._node.at("Time"))
    @Time.setter
    def Time(self, val): self.Time.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Outfits(HelperObject):
    schema_name = "Outfits"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Outfits
        return Outfits(entlib.load_node_file(sourcefile, entlib.get_schema(Outfits.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Outfits
        return Outfits(entlib.make_node(Outfits.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Flying(self):  # type: ()->String
        return String(self._node.at("Flying"))
    @Flying.setter
    def Flying(self, val): self.Flying.set(val)
    @property
    def Normal(self):  # type: ()->String
        return String(self._node.at("Normal"))
    @Normal.setter
    def Normal(self, val): self.Normal.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class OwnershipModule(HelperObject):
    schema_name = "OwnershipModule"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->OwnershipModule
        return OwnershipModule(entlib.load_node_file(sourcefile, entlib.get_schema(OwnershipModule.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->OwnershipModule
        return OwnershipModule(entlib.make_node(OwnershipModule.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node
class Pasta_Easing_CurveEnum(Enum):
    Linear = "Linear"
    EaseInSin = "EaseInSin"
    EaseInQuad = "EaseInQuad"
    EaseInCubic = "EaseInCubic"
    EaseInQuart = "EaseInQuart"
    EaseInQuint = "EaseInQuint"
    EaseInExp = "EaseInExp"
    EaseOutSin = "EaseOutSin"
    EaseOutQuad = "EaseOutQuad"
    EaseOutCubic = "EaseOutCubic"
    EaseOutQuart = "EaseOutQuart"
    EaseOutQuint = "EaseOutQuint"
    EaseOutExp = "EaseOutExp"
    EaseInoutSin = "EaseInoutSin"
    EaseInoutQuad = "EaseInoutQuad"
    EaseInoutCubic = "EaseInoutCubic"
    EaseInoutQuart = "EaseInoutQuart"
    EaseInoutQuint = "EaseInoutQuint"
    EaseInoutExp = "EaseInoutExp"
    EaseInCirc = "EaseInCirc"
    EaseOutCirc = "EaseOutCirc"
    EaseInoutCirc = "EaseInoutCirc"
    EaseOutElastic = "EaseOutElastic"
    Count = "Count"


class Pasta_Easing_Curve(Primitive[Pasta_Easing_CurveEnum]):  # Enum
    def __init__(self, node):
        super(Pasta_Easing_Curve, self).__init__(Pasta_Easing_CurveEnum, node)
    schema_name = "Pasta::Easing::Curve"
    def __call__(self, node):  # type: (EntityLibPy.Node) -> Pasta_Easing_Curve
        return Pasta_Easing_Curve(node)
    def set(self, val):  # type: (Pasta_Easing_CurveEnum) -> None
        return self._node.set_string(val.value)
    def get(self):  # type: () -> T
        return self._item_type(self._node.value)


from EntityLibPy import Node

class PathPosition(HelperObject):
    schema_name = "PathPosition"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PathPosition
        return PathPosition(entlib.load_node_file(sourcefile, entlib.get_schema(PathPosition.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PathPosition
        return PathPosition(entlib.make_node(PathPosition.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Ratio(self):  # type: ()->Float
        return Float(self._node.at("Ratio"))
    @Ratio.setter
    def Ratio(self, val): self.Ratio.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PhysicsNetworker(HelperObject):
    schema_name = "PhysicsNetworker"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PhysicsNetworker
        return PhysicsNetworker(entlib.load_node_file(sourcefile, entlib.get_schema(PhysicsNetworker.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PhysicsNetworker
        return PhysicsNetworker(entlib.make_node(PhysicsNetworker.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class PlayerManagerDebugger(HelperObject):
    schema_name = "PlayerManagerDebugger"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PlayerManagerDebugger
        return PlayerManagerDebugger(entlib.load_node_file(sourcefile, entlib.get_schema(PlayerManagerDebugger.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PlayerManagerDebugger
        return PlayerManagerDebugger(entlib.make_node(PlayerManagerDebugger.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def SaveServerURL(self):  # type: ()->String
        return String(self._node.at("SaveServerURL"))
    @SaveServerURL.setter
    def SaveServerURL(self, val): self.SaveServerURL.set(val)
    @property
    def SelectionSpeed(self):  # type: ()->Float
        return Float(self._node.at("SelectionSpeed"))
    @SelectionSpeed.setter
    def SelectionSpeed(self, val): self.SelectionSpeed.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class PointCloud(HelperObject):
    schema_name = "PointCloud"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->PointCloud
        return PointCloud(entlib.load_node_file(sourcefile, entlib.get_schema(PointCloud.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->PointCloud
        return PointCloud(entlib.make_node(PointCloud.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class RagdollSetupData(HelperObject):
    schema_name = "RagdollSetupData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->RagdollSetupData
        return RagdollSetupData(entlib.load_node_file(sourcefile, entlib.get_schema(RagdollSetupData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->RagdollSetupData
        return RagdollSetupData(entlib.make_node(RagdollSetupData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    @property
    def blend(self):  # type: ()->Float
        return Float(self._node.at("blend"))
    @blend.setter
    def blend(self, val): self.blend.set(val)
    @property
    def inertiaFactor(self):  # type: ()->Float
        return Float(self._node.at("inertiaFactor"))
    @inertiaFactor.setter
    def inertiaFactor(self, val): self.inertiaFactor.set(val)
    @property
    def jointsRigidity(self):  # type: ()->Float
        return Float(self._node.at("jointsRigidity"))
    @jointsRigidity.setter
    def jointsRigidity(self, val): self.jointsRigidity.set(val)
    pass


from EntityLibPy import Node

class ReplicaReplay(HelperObject):
    schema_name = "ReplicaReplay"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->ReplicaReplay
        return ReplicaReplay(entlib.load_node_file(sourcefile, entlib.get_schema(ReplicaReplay.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->ReplicaReplay
        return ReplicaReplay(entlib.make_node(ReplicaReplay.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class SceneNode(HelperObject):
    schema_name = "SceneNode"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SceneNode
        return SceneNode(entlib.load_node_file(sourcefile, entlib.get_schema(SceneNode.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SceneNode
        return SceneNode(entlib.make_node(SceneNode.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class SceneNodeGraph(HelperObject):
    schema_name = "SceneNodeGraph"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SceneNodeGraph
        return SceneNodeGraph(entlib.load_node_file(sourcefile, entlib.get_schema(SceneNodeGraph.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SceneNodeGraph
        return SceneNodeGraph(entlib.make_node(SceneNodeGraph.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class Sensor(HelperObject):
    schema_name = "Sensor"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Sensor
        return Sensor(entlib.load_node_file(sourcefile, entlib.get_schema(Sensor.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Sensor
        return Sensor(entlib.make_node(Sensor.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class SmallActorSpawnRuleExchangeData(HelperObject):
    schema_name = "SmallActorSpawnRuleExchangeData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->SmallActorSpawnRuleExchangeData
        return SmallActorSpawnRuleExchangeData(entlib.load_node_file(sourcefile, entlib.get_schema(SmallActorSpawnRuleExchangeData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->SmallActorSpawnRuleExchangeData
        return SmallActorSpawnRuleExchangeData(entlib.make_node(SmallActorSpawnRuleExchangeData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AudioEventName(self):  # type: ()->String
        return String(self._node.at("AudioEventName"))
    @AudioEventName.setter
    def AudioEventName(self, val): self.AudioEventName.set(val)
    @property
    def AudioEventSoundBank(self):  # type: ()->String
        return String(self._node.at("AudioEventSoundBank"))
    @AudioEventSoundBank.setter
    def AudioEventSoundBank(self, val): self.AudioEventSoundBank.set(val)
    @property
    def IsValid(self):  # type: ()->Bool
        return Bool(self._node.at("IsValid"))
    @IsValid.setter
    def IsValid(self, val): self.IsValid.set(val)
    @property
    def RuleIndex(self):  # type: ()->Int
        return Int(self._node.at("RuleIndex"))
    @RuleIndex.setter
    def RuleIndex(self, val): self.RuleIndex.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node
StringHash = String
from EntityLibPy import Node

class TagInfo(HelperObject):
    schema_name = "TagInfo"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TagInfo
        return TagInfo(entlib.load_node_file(sourcefile, entlib.get_schema(TagInfo.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TagInfo
        return TagInfo(entlib.make_node(TagInfo.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def AudioWeight(self):  # type: ()->Int
        return Int(self._node.at("AudioWeight"))
    @AudioWeight.setter
    def AudioWeight(self, val): self.AudioWeight.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class Team_PlayerData(HelperObject):
    schema_name = "Team::PlayerData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Team_PlayerData
        return Team_PlayerData(entlib.load_node_file(sourcefile, entlib.get_schema(Team_PlayerData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Team_PlayerData
        return Team_PlayerData(entlib.make_node(Team_PlayerData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def PlayerID(self):  # type: ()->Int
        return Int(self._node.at("PlayerID"))
    @PlayerID.setter
    def PlayerID(self, val): self.PlayerID.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class TextureGroundTypeMap(HelperObject):
    schema_name = "TextureGroundTypeMap"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TextureGroundTypeMap
        return TextureGroundTypeMap(entlib.load_node_file(sourcefile, entlib.get_schema(TextureGroundTypeMap.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TextureGroundTypeMap
        return TextureGroundTypeMap(entlib.make_node(TextureGroundTypeMap.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class TextureHeightMap(HelperObject):
    schema_name = "TextureHeightMap"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->TextureHeightMap
        return TextureHeightMap(entlib.load_node_file(sourcefile, entlib.get_schema(TextureHeightMap.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->TextureHeightMap
        return TextureHeightMap(entlib.make_node(TextureHeightMap.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node

class Timer(HelperObject):
    schema_name = "Timer"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->Timer
        return Timer(entlib.load_node_file(sourcefile, entlib.get_schema(Timer.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->Timer
        return Timer(entlib.make_node(Timer.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass


from EntityLibPy import Node
Vector3i = (lambda n: PrimArray(Float, n))
from EntityLibPy import Node

class VegetationResourceData(HelperObject):
    schema_name = "VegetationResourceData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VegetationResourceData
        return VegetationResourceData(entlib.load_node_file(sourcefile, entlib.get_schema(VegetationResourceData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VegetationResourceData
        return VegetationResourceData(entlib.make_node(VegetationResourceData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GRCPath(self):  # type: ()->String
        return String(self._node.at("GRCPath"))
    @GRCPath.setter
    def GRCPath(self, val): self.GRCPath.set(val)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def Tags(self):  # type: ()->PrimitiveSet[str]
        return (lambda n: PrimitiveSet(str, n))(self._node.at("Tags"))
    @property
    def VisibilityDistanceCategory(self):  # type: ()->String
        return String(self._node.at("VisibilityDistanceCategory"))
    @VisibilityDistanceCategory.setter
    def VisibilityDistanceCategory(self, val): self.VisibilityDistanceCategory.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VegetationVisibilityDistanceCategory(HelperObject):
    schema_name = "VegetationVisibilityDistanceCategory"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VegetationVisibilityDistanceCategory
        return VegetationVisibilityDistanceCategory(entlib.load_node_file(sourcefile, entlib.get_schema(VegetationVisibilityDistanceCategory.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VegetationVisibilityDistanceCategory
        return VegetationVisibilityDistanceCategory(entlib.make_node(VegetationVisibilityDistanceCategory.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def Name(self):  # type: ()->String
        return String(self._node.at("Name"))
    @Name.setter
    def Name(self, val): self.Name.set(val)
    @property
    def VisibilityDistance(self):  # type: ()->Float
        return Float(self._node.at("VisibilityDistance"))
    @VisibilityDistance.setter
    def VisibilityDistance(self, val): self.VisibilityDistance.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class VisualResourceBuildData(HelperObject):
    schema_name = "VisualResourceBuildData"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->VisualResourceBuildData
        return VisualResourceBuildData(entlib.load_node_file(sourcefile, entlib.get_schema(VisualResourceBuildData.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->VisualResourceBuildData
        return VisualResourceBuildData(entlib.make_node(VisualResourceBuildData.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def GRCs(self):  # type: ()->PrimArray[String]
        return (lambda n: PrimArray(String, n))(self._node.at("GRCs"))
    @GRCs.setter
    def GRCs(self, val): self.GRCs.set(val)
    @property
    def LODs(self):  # type: ()->PrimArray[Int]
        return (lambda n: PrimArray(Int, n))(self._node.at("LODs"))
    @LODs.setter
    def LODs(self, val): self.LODs.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class sBiomeSFXResult(HelperObject):
    schema_name = "sBiomeSFXResult"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sBiomeSFXResult
        return sBiomeSFXResult(entlib.load_node_file(sourcefile, entlib.get_schema(sBiomeSFXResult.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sBiomeSFXResult
        return sBiomeSFXResult(entlib.make_node(sBiomeSFXResult.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ID(self):  # type: ()->Int
        return Int(self._node.at("ID"))
    @ID.setter
    def ID(self, val): self.ID.set(val)
    @property
    def Weight(self):  # type: ()->Float
        return Float(self._node.at("Weight"))
    @Weight.setter
    def Weight(self, val): self.Weight.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class sBiomeSoundResult(HelperObject):
    schema_name = "sBiomeSoundResult"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sBiomeSoundResult
        return sBiomeSoundResult(entlib.load_node_file(sourcefile, entlib.get_schema(sBiomeSoundResult.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sBiomeSoundResult
        return sBiomeSoundResult(entlib.make_node(sBiomeSoundResult.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    @property
    def ID(self):  # type: ()->Int
        return Int(self._node.at("ID"))
    @ID.setter
    def ID(self, val): self.ID.set(val)
    @property
    def Weight(self):  # type: ()->Float
        return Float(self._node.at("Weight"))
    @Weight.setter
    def Weight(self, val): self.Weight.set(val)
    @property
    def _comment(self):  # type: ()->String
        return String(self._node.at("_comment"))
    @_comment.setter
    def _comment(self, val): self._comment.set(val)
    pass


from EntityLibPy import Node

class sJointMotorDesc(HelperObject):
    schema_name = "sJointMotorDesc"
    @staticmethod
    def load(entlib, sourcefile):  # type: (EntityLib, str)->sJointMotorDesc
        return sJointMotorDesc(entlib.load_node_file(sourcefile, entlib.get_schema(sJointMotorDesc.schema_name)))
    @staticmethod
    def create(entlib):  # type: (EntityLib)->sJointMotorDesc
        return sJointMotorDesc(entlib.make_node(sJointMotorDesc.schema_name))
    def save(self, destfile):
        self.node.save_node(destfile)
    pass



