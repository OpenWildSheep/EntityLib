// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CAMERA_WILDRPC_H_
#define FLATBUFFERS_GENERATED_CAMERA_WILDRPC_H_

#include "flatbuffers/flatbuffers.h"

#include "Result_generated.h"
#include "WildRPC_generated.h"

namespace WildRPC {

struct Camera;
struct CameraBuilder;

struct Camera FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CameraBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ORIENTATION = 6
  };
  const WildRPC::Position *position() const {
    return GetStruct<const WildRPC::Position *>(VT_POSITION);
  }
  const WildRPC::Quat *orientation() const {
    return GetStruct<const WildRPC::Quat *>(VT_ORIENTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<WildRPC::Position>(verifier, VT_POSITION) &&
           VerifyField<WildRPC::Quat>(verifier, VT_ORIENTATION) &&
           verifier.EndTable();
  }
};

struct CameraBuilder {
  typedef Camera Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const WildRPC::Position *position) {
    fbb_.AddStruct(Camera::VT_POSITION, position);
  }
  void add_orientation(const WildRPC::Quat *orientation) {
    fbb_.AddStruct(Camera::VT_ORIENTATION, orientation);
  }
  explicit CameraBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CameraBuilder &operator=(const CameraBuilder &);
  flatbuffers::Offset<Camera> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Camera>(end);
    return o;
  }
};

inline flatbuffers::Offset<Camera> CreateCamera(
    flatbuffers::FlatBufferBuilder &_fbb,
    const WildRPC::Position *position = 0,
    const WildRPC::Quat *orientation = 0) {
  CameraBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline const WildRPC::Camera *GetCamera(const void *buf) {
  return flatbuffers::GetRoot<WildRPC::Camera>(buf);
}

inline const WildRPC::Camera *GetSizePrefixedCamera(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WildRPC::Camera>(buf);
}

inline bool VerifyCameraBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WildRPC::Camera>(nullptr);
}

inline bool VerifySizePrefixedCameraBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WildRPC::Camera>(nullptr);
}

inline void FinishCameraBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Camera> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCameraBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Camera> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WildRPC

#endif  // FLATBUFFERS_GENERATED_CAMERA_WILDRPC_H_
