// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BOOLEAN_WILDRPC_H_
#define FLATBUFFERS_GENERATED_BOOLEAN_WILDRPC_H_

#include "flatbuffers/flatbuffers.h"

namespace WildRPC {

struct Boolean;
struct BooleanBuilder;
struct BooleanT;

struct BooleanT : public flatbuffers::NativeTable {
  typedef Boolean TableType;
  bool value = false;
};

struct Boolean FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BooleanT NativeTableType;
  typedef BooleanBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool mutate_value(bool _value) {
    return SetField<uint8_t>(VT_VALUE, static_cast<uint8_t>(_value), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
  BooleanT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BooleanT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Boolean> Pack(flatbuffers::FlatBufferBuilder &_fbb, const BooleanT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BooleanBuilder {
  typedef Boolean Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(Boolean::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit BooleanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Boolean> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Boolean>(end);
    return o;
  }
};

inline flatbuffers::Offset<Boolean> CreateBoolean(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool value = false) {
  BooleanBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

flatbuffers::Offset<Boolean> CreateBoolean(flatbuffers::FlatBufferBuilder &_fbb, const BooleanT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BooleanT *Boolean::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BooleanT>(new BooleanT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Boolean::UnPackTo(BooleanT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); _o->value = _e; }
}

inline flatbuffers::Offset<Boolean> Boolean::Pack(flatbuffers::FlatBufferBuilder &_fbb, const BooleanT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBoolean(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Boolean> CreateBoolean(flatbuffers::FlatBufferBuilder &_fbb, const BooleanT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const BooleanT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value;
  return WildRPC::CreateBoolean(
      _fbb,
      _value);
}

inline const WildRPC::Boolean *GetBoolean(const void *buf) {
  return flatbuffers::GetRoot<WildRPC::Boolean>(buf);
}

inline const WildRPC::Boolean *GetSizePrefixedBoolean(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WildRPC::Boolean>(buf);
}

inline Boolean *GetMutableBoolean(void *buf) {
  return flatbuffers::GetMutableRoot<Boolean>(buf);
}

inline bool VerifyBooleanBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WildRPC::Boolean>(nullptr);
}

inline bool VerifySizePrefixedBooleanBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WildRPC::Boolean>(nullptr);
}

inline void FinishBooleanBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Boolean> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBooleanBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Boolean> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WildRPC::BooleanT> UnPackBoolean(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WildRPC::BooleanT>(GetBoolean(buf)->UnPack(res));
}

inline std::unique_ptr<WildRPC::BooleanT> UnPackSizePrefixedBoolean(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WildRPC::BooleanT>(GetSizePrefixedBoolean(buf)->UnPack(res));
}

}  // namespace WildRPC

#endif  // FLATBUFFERS_GENERATED_BOOLEAN_WILDRPC_H_
