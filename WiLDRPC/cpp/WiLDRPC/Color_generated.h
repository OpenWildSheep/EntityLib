// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COLOR_WILDRPC_H_
#define FLATBUFFERS_GENERATED_COLOR_WILDRPC_H_

#include "flatbuffers/flatbuffers.h"

namespace WildRPC {

struct Color;
struct ColorBuilder;

struct Color FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ColorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_R = 4,
    VT_G = 6,
    VT_B = 8,
    VT_A = 10
  };
  float r() const {
    return GetField<float>(VT_R, 0.0f);
  }
  float g() const {
    return GetField<float>(VT_G, 0.0f);
  }
  float b() const {
    return GetField<float>(VT_B, 0.0f);
  }
  float a() const {
    return GetField<float>(VT_A, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_R) &&
           VerifyField<float>(verifier, VT_G) &&
           VerifyField<float>(verifier, VT_B) &&
           VerifyField<float>(verifier, VT_A) &&
           verifier.EndTable();
  }
};

struct ColorBuilder {
  typedef Color Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_r(float r) {
    fbb_.AddElement<float>(Color::VT_R, r, 0.0f);
  }
  void add_g(float g) {
    fbb_.AddElement<float>(Color::VT_G, g, 0.0f);
  }
  void add_b(float b) {
    fbb_.AddElement<float>(Color::VT_B, b, 0.0f);
  }
  void add_a(float a) {
    fbb_.AddElement<float>(Color::VT_A, a, 0.0f);
  }
  explicit ColorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Color> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Color>(end);
    return o;
  }
};

inline flatbuffers::Offset<Color> CreateColor(
    flatbuffers::FlatBufferBuilder &_fbb,
    float r = 0.0f,
    float g = 0.0f,
    float b = 0.0f,
    float a = 0.0f) {
  ColorBuilder builder_(_fbb);
  builder_.add_a(a);
  builder_.add_b(b);
  builder_.add_g(g);
  builder_.add_r(r);
  return builder_.Finish();
}

inline const WildRPC::Color *GetColor(const void *buf) {
  return flatbuffers::GetRoot<WildRPC::Color>(buf);
}

inline const WildRPC::Color *GetSizePrefixedColor(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WildRPC::Color>(buf);
}

inline bool VerifyColorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WildRPC::Color>(nullptr);
}

inline bool VerifySizePrefixedColorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WildRPC::Color>(nullptr);
}

inline void FinishColorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Color> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedColorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Color> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WildRPC

#endif  // FLATBUFFERS_GENERATED_COLOR_WILDRPC_H_
