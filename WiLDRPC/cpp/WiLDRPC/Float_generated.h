// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLOAT_WILDRPC_H_
#define FLATBUFFERS_GENERATED_FLOAT_WILDRPC_H_

#include "flatbuffers/flatbuffers.h"

namespace WildRPC {

struct Float;
struct FloatBuilder;

struct Float FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FloatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct FloatBuilder {
  typedef Float Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(Float::VT_VALUE, value, 0.0f);
  }
  explicit FloatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FloatBuilder &operator=(const FloatBuilder &);
  flatbuffers::Offset<Float> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Float>(end);
    return o;
  }
};

inline flatbuffers::Offset<Float> CreateFloat(
    flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f) {
  FloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline const WildRPC::Float *GetFloat(const void *buf) {
  return flatbuffers::GetRoot<WildRPC::Float>(buf);
}

inline const WildRPC::Float *GetSizePrefixedFloat(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WildRPC::Float>(buf);
}

inline bool VerifyFloatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WildRPC::Float>(nullptr);
}

inline bool VerifySizePrefixedFloatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WildRPC::Float>(nullptr);
}

inline void FinishFloatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Float> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFloatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Float> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WildRPC

#endif  // FLATBUFFERS_GENERATED_FLOAT_WILDRPC_H_
