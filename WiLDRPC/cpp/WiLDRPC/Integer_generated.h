// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTEGER_WILDRPC_H_
#define FLATBUFFERS_GENERATED_INTEGER_WILDRPC_H_

#include "flatbuffers/flatbuffers.h"

namespace WildRPC {

struct Integer;
struct IntegerBuilder;
struct IntegerT;

struct IntegerT : public flatbuffers::NativeTable {
  typedef Integer TableType;
  int32_t value = 0;
};

struct Integer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef IntegerT NativeTableType;
  typedef IntegerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool mutate_value(int32_t _value) {
    return SetField<int32_t>(VT_VALUE, _value, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
  IntegerT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(IntegerT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Integer> Pack(flatbuffers::FlatBufferBuilder &_fbb, const IntegerT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct IntegerBuilder {
  typedef Integer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(Integer::VT_VALUE, value, 0);
  }
  explicit IntegerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Integer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Integer>(end);
    return o;
  }
};

inline flatbuffers::Offset<Integer> CreateInteger(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0) {
  IntegerBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

flatbuffers::Offset<Integer> CreateInteger(flatbuffers::FlatBufferBuilder &_fbb, const IntegerT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline IntegerT *Integer::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<IntegerT>(new IntegerT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Integer::UnPackTo(IntegerT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); _o->value = _e; }
}

inline flatbuffers::Offset<Integer> Integer::Pack(flatbuffers::FlatBufferBuilder &_fbb, const IntegerT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInteger(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Integer> CreateInteger(flatbuffers::FlatBufferBuilder &_fbb, const IntegerT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const IntegerT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value;
  return WildRPC::CreateInteger(
      _fbb,
      _value);
}

inline const WildRPC::Integer *GetInteger(const void *buf) {
  return flatbuffers::GetRoot<WildRPC::Integer>(buf);
}

inline const WildRPC::Integer *GetSizePrefixedInteger(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WildRPC::Integer>(buf);
}

inline Integer *GetMutableInteger(void *buf) {
  return flatbuffers::GetMutableRoot<Integer>(buf);
}

inline bool VerifyIntegerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WildRPC::Integer>(nullptr);
}

inline bool VerifySizePrefixedIntegerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WildRPC::Integer>(nullptr);
}

inline void FinishIntegerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Integer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIntegerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Integer> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WildRPC::IntegerT> UnPackInteger(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WildRPC::IntegerT>(GetInteger(buf)->UnPack(res));
}

inline std::unique_ptr<WildRPC::IntegerT> UnPackSizePrefixedInteger(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WildRPC::IntegerT>(GetSizePrefixedInteger(buf)->UnPack(res));
}

}  // namespace WildRPC

#endif  // FLATBUFFERS_GENERATED_INTEGER_WILDRPC_H_
