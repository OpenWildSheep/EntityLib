// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_QUAT_WILDRPC_H_
#define FLATBUFFERS_GENERATED_QUAT_WILDRPC_H_

#include "flatbuffers/flatbuffers.h"

namespace WildRPC {

struct Quat;
struct QuatBuilder;
struct QuatT;

struct QuatT : public flatbuffers::NativeTable {
  typedef Quat TableType;
  float x = 0.0f;
  float y = 0.0f;
  float z = 0.0f;
  float w = 0.0f;
};

struct Quat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QuatT NativeTableType;
  typedef QuatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8,
    VT_W = 10
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  bool mutate_x(float _x) {
    return SetField<float>(VT_X, _x, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool mutate_y(float _y) {
    return SetField<float>(VT_Y, _y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool mutate_z(float _z) {
    return SetField<float>(VT_Z, _z, 0.0f);
  }
  float w() const {
    return GetField<float>(VT_W, 0.0f);
  }
  bool mutate_w(float _w) {
    return SetField<float>(VT_W, _w, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_Z) &&
           VerifyField<float>(verifier, VT_W) &&
           verifier.EndTable();
  }
  QuatT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(QuatT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Quat> Pack(flatbuffers::FlatBufferBuilder &_fbb, const QuatT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct QuatBuilder {
  typedef Quat Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Quat::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Quat::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(Quat::VT_Z, z, 0.0f);
  }
  void add_w(float w) {
    fbb_.AddElement<float>(Quat::VT_W, w, 0.0f);
  }
  explicit QuatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Quat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Quat>(end);
    return o;
  }
};

inline flatbuffers::Offset<Quat> CreateQuat(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    float w = 0.0f) {
  QuatBuilder builder_(_fbb);
  builder_.add_w(w);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

flatbuffers::Offset<Quat> CreateQuat(flatbuffers::FlatBufferBuilder &_fbb, const QuatT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline QuatT *Quat::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<QuatT>(new QuatT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Quat::UnPackTo(QuatT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); _o->y = _e; }
  { auto _e = z(); _o->z = _e; }
  { auto _e = w(); _o->w = _e; }
}

inline flatbuffers::Offset<Quat> Quat::Pack(flatbuffers::FlatBufferBuilder &_fbb, const QuatT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateQuat(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Quat> CreateQuat(flatbuffers::FlatBufferBuilder &_fbb, const QuatT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const QuatT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y;
  auto _z = _o->z;
  auto _w = _o->w;
  return WildRPC::CreateQuat(
      _fbb,
      _x,
      _y,
      _z,
      _w);
}

inline const WildRPC::Quat *GetQuat(const void *buf) {
  return flatbuffers::GetRoot<WildRPC::Quat>(buf);
}

inline const WildRPC::Quat *GetSizePrefixedQuat(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WildRPC::Quat>(buf);
}

inline Quat *GetMutableQuat(void *buf) {
  return flatbuffers::GetMutableRoot<Quat>(buf);
}

inline bool VerifyQuatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WildRPC::Quat>(nullptr);
}

inline bool VerifySizePrefixedQuatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WildRPC::Quat>(nullptr);
}

inline void FinishQuatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Quat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedQuatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Quat> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WildRPC::QuatT> UnPackQuat(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WildRPC::QuatT>(GetQuat(buf)->UnPack(res));
}

inline std::unique_ptr<WildRPC::QuatT> UnPackSizePrefixedQuat(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WildRPC::QuatT>(GetSizePrefixedQuat(buf)->UnPack(res));
}

}  // namespace WildRPC

#endif  // FLATBUFFERS_GENERATED_QUAT_WILDRPC_H_
