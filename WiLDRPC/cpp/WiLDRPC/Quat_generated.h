// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_QUAT_WILDRPC_H_
#define FLATBUFFERS_GENERATED_QUAT_WILDRPC_H_

#include "flatbuffers/flatbuffers.h"

namespace WildRPC {

struct Quat;
struct QuatBuilder;

struct Quat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QuatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8,
    VT_W = 10
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  float w() const {
    return GetField<float>(VT_W, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_Z) &&
           VerifyField<float>(verifier, VT_W) &&
           verifier.EndTable();
  }
};

struct QuatBuilder {
  typedef Quat Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Quat::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Quat::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(Quat::VT_Z, z, 0.0f);
  }
  void add_w(float w) {
    fbb_.AddElement<float>(Quat::VT_W, w, 0.0f);
  }
  explicit QuatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Quat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Quat>(end);
    return o;
  }
};

inline flatbuffers::Offset<Quat> CreateQuat(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    float w = 0.0f) {
  QuatBuilder builder_(_fbb);
  builder_.add_w(w);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const WildRPC::Quat *GetQuat(const void *buf) {
  return flatbuffers::GetRoot<WildRPC::Quat>(buf);
}

inline const WildRPC::Quat *GetSizePrefixedQuat(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WildRPC::Quat>(buf);
}

inline bool VerifyQuatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WildRPC::Quat>(nullptr);
}

inline bool VerifySizePrefixedQuatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WildRPC::Quat>(nullptr);
}

inline void FinishQuatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Quat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedQuatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Quat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WildRPC

#endif  // FLATBUFFERS_GENERATED_QUAT_WILDRPC_H_
