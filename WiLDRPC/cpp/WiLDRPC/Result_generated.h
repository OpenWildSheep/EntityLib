// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESULT_WILDRPC_H_
#define FLATBUFFERS_GENERATED_RESULT_WILDRPC_H_

#include "flatbuffers/flatbuffers.h"

namespace WildRPC {

struct Result;
struct ResultBuilder;

struct Result FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4
  };
  int32_t result() const {
    return GetField<int32_t>(VT_RESULT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct ResultBuilder {
  typedef Result Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(int32_t result) {
    fbb_.AddElement<int32_t>(Result::VT_RESULT, result, 0);
  }
  explicit ResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResultBuilder &operator=(const ResultBuilder &);
  flatbuffers::Offset<Result> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Result>(end);
    return o;
  }
};

inline flatbuffers::Offset<Result> CreateResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t result = 0) {
  ResultBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

inline const WildRPC::Result *GetResult(const void *buf) {
  return flatbuffers::GetRoot<WildRPC::Result>(buf);
}

inline const WildRPC::Result *GetSizePrefixedResult(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WildRPC::Result>(buf);
}

inline bool VerifyResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WildRPC::Result>(nullptr);
}

inline bool VerifySizePrefixedResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WildRPC::Result>(nullptr);
}

inline void FinishResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Result> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WildRPC::Result> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WildRPC

#endif  // FLATBUFFERS_GENERATED_RESULT_WILDRPC_H_
