# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WildRPC

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RPCHeader(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RPCHeader()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRPCHeader(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RPCHeader
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RPCHeader
    def ManagerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RPCHeader
    def MethodName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RPCHeader
    def ParameterTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # RPCHeader
    def ParameterTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # RPCHeader
    def ParameterTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RPCHeader
    def ParameterTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # RPCHeader
    def ResultTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # RPCHeader
    def ResultTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # RPCHeader
    def ResultTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RPCHeader
    def ResultTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Start(builder): builder.StartObject(4)
def RPCHeaderStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddManagerName(builder, managerName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(managerName), 0)
def RPCHeaderAddManagerName(builder, managerName):
    """This method is deprecated. Please switch to AddManagerName."""
    return AddManagerName(builder, managerName)
def AddMethodName(builder, methodName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(methodName), 0)
def RPCHeaderAddMethodName(builder, methodName):
    """This method is deprecated. Please switch to AddMethodName."""
    return AddMethodName(builder, methodName)
def AddParameterTypes(builder, parameterTypes): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parameterTypes), 0)
def RPCHeaderAddParameterTypes(builder, parameterTypes):
    """This method is deprecated. Please switch to AddParameterTypes."""
    return AddParameterTypes(builder, parameterTypes)
def StartParameterTypesVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def RPCHeaderStartParameterTypesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartParameterTypesVector(builder, numElems)
def AddResultTypes(builder, resultTypes): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(resultTypes), 0)
def RPCHeaderAddResultTypes(builder, resultTypes):
    """This method is deprecated. Please switch to AddResultTypes."""
    return AddResultTypes(builder, resultTypes)
def StartResultTypesVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def RPCHeaderStartResultTypesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartResultTypesVector(builder, numElems)
def End(builder): return builder.EndObject()
def RPCHeaderEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
try:
    from typing import List
except:
    pass

class RPCHeaderT(object):

    # RPCHeaderT
    def __init__(self):
        self.managerName = None  # type: str
        self.methodName = None  # type: str
        self.parameterTypes = None  # type: List[int]
        self.resultTypes = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rPCHeader = RPCHeader()
        rPCHeader.Init(buf, pos)
        return cls.InitFromObj(rPCHeader)

    @classmethod
    def InitFromObj(cls, rPCHeader):
        x = RPCHeaderT()
        x._UnPack(rPCHeader)
        return x

    # RPCHeaderT
    def _UnPack(self, rPCHeader):
        if rPCHeader is None:
            return
        self.managerName = rPCHeader.ManagerName()
        self.methodName = rPCHeader.MethodName()
        if not rPCHeader.ParameterTypesIsNone():
            if np is None:
                self.parameterTypes = []
                for i in range(rPCHeader.ParameterTypesLength()):
                    self.parameterTypes.append(rPCHeader.ParameterTypes(i))
            else:
                self.parameterTypes = rPCHeader.ParameterTypesAsNumpy()
        if not rPCHeader.ResultTypesIsNone():
            if np is None:
                self.resultTypes = []
                for i in range(rPCHeader.ResultTypesLength()):
                    self.resultTypes.append(rPCHeader.ResultTypes(i))
            else:
                self.resultTypes = rPCHeader.ResultTypesAsNumpy()

    # RPCHeaderT
    def Pack(self, builder):
        if self.managerName is not None:
            managerName = builder.CreateString(self.managerName)
        if self.methodName is not None:
            methodName = builder.CreateString(self.methodName)
        if self.parameterTypes is not None:
            if np is not None and type(self.parameterTypes) is np.ndarray:
                parameterTypes = builder.CreateNumpyVector(self.parameterTypes)
            else:
                StartParameterTypesVector(builder, len(self.parameterTypes))
                for i in reversed(range(len(self.parameterTypes))):
                    builder.PrependUint16(self.parameterTypes[i])
                parameterTypes = builder.EndVector()
        if self.resultTypes is not None:
            if np is not None and type(self.resultTypes) is np.ndarray:
                resultTypes = builder.CreateNumpyVector(self.resultTypes)
            else:
                StartResultTypesVector(builder, len(self.resultTypes))
                for i in reversed(range(len(self.resultTypes))):
                    builder.PrependUint16(self.resultTypes[i])
                resultTypes = builder.EndVector()
        Start(builder)
        if self.managerName is not None:
            AddManagerName(builder, managerName)
        if self.methodName is not None:
            AddMethodName(builder, methodName)
        if self.parameterTypes is not None:
            AddParameterTypes(builder, parameterTypes)
        if self.resultTypes is not None:
            AddResultTypes(builder, resultTypes)
        rPCHeader = End(builder)
        return rPCHeader
