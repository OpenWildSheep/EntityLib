# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WildRPC

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class String(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = String()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsString(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # String
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # String
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(1)
def StringStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def StringAddValue(builder, value):
    """This method is deprecated. Please switch to AddValue."""
    return AddValue(builder, value)
def End(builder): return builder.EndObject()
def StringEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class StringT(object):

    # StringT
    def __init__(self):
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        string = String()
        string.Init(buf, pos)
        return cls.InitFromObj(string)

    @classmethod
    def InitFromObj(cls, string):
        x = StringT()
        x._UnPack(string)
        return x

    # StringT
    def _UnPack(self, string):
        if string is None:
            return
        self.value = string.Value()

    # StringT
    def Pack(self, builder):
        if self.value is not None:
            value = builder.CreateString(self.value)
        Start(builder)
        if self.value is not None:
            AddValue(builder, value)
        string = End(builder)
        return string
