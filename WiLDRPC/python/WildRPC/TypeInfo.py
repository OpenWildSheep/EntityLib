# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WildRPC

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypeInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 2

    # TypeInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypeInfo
    def ContainerType(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # TypeInfo
    def ElementType(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(1))

def CreateTypeInfo(builder, containerType, elementType):
    builder.Prep(1, 2)
    builder.PrependUint8(elementType)
    builder.PrependUint8(containerType)
    return builder.Offset()


class TypeInfoT(object):

    # TypeInfoT
    def __init__(self):
        self.containerType = 0  # type: int
        self.elementType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typeInfo = TypeInfo()
        typeInfo.Init(buf, pos)
        return cls.InitFromObj(typeInfo)

    @classmethod
    def InitFromObj(cls, typeInfo):
        x = TypeInfoT()
        x._UnPack(typeInfo)
        return x

    # TypeInfoT
    def _UnPack(self, typeInfo):
        if typeInfo is None:
            return
        self.containerType = typeInfo.ContainerType()
        self.elementType = typeInfo.ElementType()

    # TypeInfoT
    def Pack(self, builder):
        return CreateTypeInfo(builder, self.containerType, self.elementType)
