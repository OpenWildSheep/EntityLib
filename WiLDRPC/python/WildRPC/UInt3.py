# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WildRPC

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UInt3(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UInt3()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUInt3(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UInt3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UInt3
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UInt3
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UInt3
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(3)
def UInt3Start(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddX(builder, x): builder.PrependUint32Slot(0, x, 0)
def UInt3AddX(builder, x):
    """This method is deprecated. Please switch to AddX."""
    return AddX(builder, x)
def AddY(builder, y): builder.PrependUint32Slot(1, y, 0)
def UInt3AddY(builder, y):
    """This method is deprecated. Please switch to AddY."""
    return AddY(builder, y)
def AddZ(builder, z): builder.PrependUint32Slot(2, z, 0)
def UInt3AddZ(builder, z):
    """This method is deprecated. Please switch to AddZ."""
    return AddZ(builder, z)
def End(builder): return builder.EndObject()
def UInt3End(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class UInt3T(object):

    # UInt3T
    def __init__(self):
        self.x = 0  # type: int
        self.y = 0  # type: int
        self.z = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uInt3 = UInt3()
        uInt3.Init(buf, pos)
        return cls.InitFromObj(uInt3)

    @classmethod
    def InitFromObj(cls, uInt3):
        x = UInt3T()
        x._UnPack(uInt3)
        return x

    # UInt3T
    def _UnPack(self, uInt3):
        if uInt3 is None:
            return
        self.x = uInt3.X()
        self.y = uInt3.Y()
        self.z = uInt3.Z()

    # UInt3T
    def Pack(self, builder):
        Start(builder)
        AddX(builder, self.x)
        AddY(builder, self.y)
        AddZ(builder, self.z)
        uInt3 = End(builder)
        return uInt3
