# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WildRPC

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vector3(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vector3()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVector3(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Vector3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vector3
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vector3
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Vector3
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(3)
def Vector3Start(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddX(builder, x): builder.PrependFloat32Slot(0, x, 0.0)
def Vector3AddX(builder, x):
    """This method is deprecated. Please switch to AddX."""
    return AddX(builder, x)
def AddY(builder, y): builder.PrependFloat32Slot(1, y, 0.0)
def Vector3AddY(builder, y):
    """This method is deprecated. Please switch to AddY."""
    return AddY(builder, y)
def AddZ(builder, z): builder.PrependFloat32Slot(2, z, 0.0)
def Vector3AddZ(builder, z):
    """This method is deprecated. Please switch to AddZ."""
    return AddZ(builder, z)
def End(builder): return builder.EndObject()
def Vector3End(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class Vector3T(object):

    # Vector3T
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vector3 = Vector3()
        vector3.Init(buf, pos)
        return cls.InitFromObj(vector3)

    @classmethod
    def InitFromObj(cls, vector3):
        x = Vector3T()
        x._UnPack(vector3)
        return x

    # Vector3T
    def _UnPack(self, vector3):
        if vector3 is None:
            return
        self.x = vector3.X()
        self.y = vector3.Y()
        self.z = vector3.Z()

    # Vector3T
    def Pack(self, builder):
        Start(builder)
        AddX(builder, self.x)
        AddY(builder, self.y)
        AddZ(builder, self.z)
        vector3 = End(builder)
        return vector3
