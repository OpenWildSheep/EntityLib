# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BoneWeight(object):
    __slots__ = ['_tab']

    # BoneWeight
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoneWeight
    def BoneIndex(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # BoneWeight
    def Weight(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateBoneWeight(builder, boneIndex, weight):
    builder.Prep(4, 8)
    builder.PrependFloat32(weight)
    builder.PrependUint32(boneIndex)
    return builder.Offset()


class BoneWeightT(object):

    # BoneWeightT
    def __init__(self):
        self.boneIndex = 0  # type: int
        self.weight = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boneWeight = BoneWeight()
        boneWeight.Init(buf, pos)
        return cls.InitFromObj(boneWeight)

    @classmethod
    def InitFromObj(cls, boneWeight):
        x = BoneWeightT()
        x._UnPack(boneWeight)
        return x

    # BoneWeightT
    def _UnPack(self, boneWeight):
        if boneWeight is None:
            return
        self.boneIndex = boneWeight.BoneIndex()
        self.weight = boneWeight.Weight()

    # BoneWeightT
    def Pack(self, builder):
        return CreateBoneWeight(builder, self.boneIndex, self.weight)
