# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Float4Channel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFloat4Channel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Float4Channel()
        x.Init(buf, n + offset)
        return x

    # Float4Channel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Float4Channel
    def Triangles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from WBIN.UInt3 import UInt3
            obj = UInt3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Float4Channel
    def TrianglesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Float4Channel
    def TrianglesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Float4Channel
    def VertexData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from WBIN.Float4 import Float4
            obj = Float4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Float4Channel
    def VertexDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Float4Channel
    def VertexDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Float4ChannelStart(builder): builder.StartObject(2)
def Float4ChannelAddTriangles(builder, triangles): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(triangles), 0)
def Float4ChannelStartTrianglesVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def Float4ChannelAddVertexData(builder, vertexData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(vertexData), 0)
def Float4ChannelStartVertexDataVector(builder, numElems): return builder.StartVector(16, numElems, 4)
def Float4ChannelEnd(builder): return builder.EndObject()

import WBIN.Float4
import WBIN.UInt3
try:
    from typing import List
except:
    pass

class Float4ChannelT(object):

    # Float4ChannelT
    def __init__(self):
        self.triangles = None  # type: List[WBIN.UInt3.UInt3T]
        self.vertexData = None  # type: List[WBIN.Float4.Float4T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        float4Channel = Float4Channel()
        float4Channel.Init(buf, pos)
        return cls.InitFromObj(float4Channel)

    @classmethod
    def InitFromObj(cls, float4Channel):
        x = Float4ChannelT()
        x._UnPack(float4Channel)
        return x

    # Float4ChannelT
    def _UnPack(self, float4Channel):
        if float4Channel is None:
            return
        if not float4Channel.TrianglesIsNone():
            self.triangles = []
            for i in range(float4Channel.TrianglesLength()):
                if float4Channel.Triangles(i) is None:
                    self.triangles.append(None)
                else:
                    uInt3_ = WBIN.UInt3.UInt3T.InitFromObj(float4Channel.Triangles(i))
                    self.triangles.append(uInt3_)
        if not float4Channel.VertexDataIsNone():
            self.vertexData = []
            for i in range(float4Channel.VertexDataLength()):
                if float4Channel.VertexData(i) is None:
                    self.vertexData.append(None)
                else:
                    float4_ = WBIN.Float4.Float4T.InitFromObj(float4Channel.VertexData(i))
                    self.vertexData.append(float4_)

    # Float4ChannelT
    def Pack(self, builder):
        if self.triangles is not None:
            Float4ChannelStartTrianglesVector(builder, len(self.triangles))
            for i in reversed(range(len(self.triangles))):
                self.triangles[i].Pack(builder)
            triangles = builder.EndVector(len(self.triangles))
        if self.vertexData is not None:
            Float4ChannelStartVertexDataVector(builder, len(self.vertexData))
            for i in reversed(range(len(self.vertexData))):
                self.vertexData[i].Pack(builder)
            vertexData = builder.EndVector(len(self.vertexData))
        Float4ChannelStart(builder)
        if self.triangles is not None:
            Float4ChannelAddTriangles(builder, triangles)
        if self.vertexData is not None:
            Float4ChannelAddVertexData(builder, vertexData)
        float4Channel = Float4ChannelEnd(builder)
        return float4Channel
