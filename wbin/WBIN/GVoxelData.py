# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GVoxelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGVoxelData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GVoxelData()
        x.Init(buf, n + offset)
        return x

    # GVoxelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GVoxelData
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def GVoxelDataStart(builder): builder.StartObject(1)
def GVoxelDataAddData(builder, data): builder.PrependInt32Slot(0, data, 0)
def GVoxelDataEnd(builder): return builder.EndObject()


class GVoxelDataT(object):

    # GVoxelDataT
    def __init__(self):
        self.data = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gVoxelData = GVoxelData()
        gVoxelData.Init(buf, pos)
        return cls.InitFromObj(gVoxelData)

    @classmethod
    def InitFromObj(cls, gVoxelData):
        x = GVoxelDataT()
        x._UnPack(gVoxelData)
        return x

    # GVoxelDataT
    def _UnPack(self, gVoxelData):
        if gVoxelData is None:
            return
        self.data = gVoxelData.Data()

    # GVoxelDataT
    def Pack(self, builder):
        GVoxelDataStart(builder)
        GVoxelDataAddData(builder, self.data)
        gVoxelData = GVoxelDataEnd(builder)
        return gVoxelData
