# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TagList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTagList(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TagList()
        x.Init(buf, n + offset)
        return x

    # TagList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TagList
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def TagListStart(builder): builder.StartObject(1)
def TagListAddTag(builder, tag): builder.PrependInt32Slot(0, tag, 0)
def TagListEnd(builder): return builder.EndObject()


class TagListT(object):

    # TagListT
    def __init__(self):
        self.tag = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tagList = TagList()
        tagList.Init(buf, pos)
        return cls.InitFromObj(tagList)

    @classmethod
    def InitFromObj(cls, tagList):
        x = TagListT()
        x._UnPack(tagList)
        return x

    # TagListT
    def _UnPack(self, tagList):
        if tagList is None:
            return
        self.tag = tagList.Tag()

    # TagListT
    def Pack(self, builder):
        TagListStart(builder)
        TagListAddTag(builder, self.tag)
        tagList = TagListEnd(builder)
        return tagList
