# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Thumb(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsThumb(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Thumb()
        x.Init(buf, n + offset)
        return x

    # Thumb
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Thumb
    def Aabb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.AABB import AABB
            obj = AABB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Thumb
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Thumb
    def Color(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from WBIN.Float3 import Float3
            obj = Float3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Thumb
    def ColorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Thumb
    def ColorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Thumb
    def SourceFileInf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.SourceFileInf import SourceFileInf
            obj = SourceFileInf()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ThumbStart(builder): builder.StartObject(4)
def ThumbAddAabb(builder, aabb): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(aabb), 0)
def ThumbAddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def ThumbAddColor(builder, color): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def ThumbStartColorVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def ThumbAddSourceFileInf(builder, sourceFileInf): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sourceFileInf), 0)
def ThumbEnd(builder): return builder.EndObject()

import WBIN.AABB
import WBIN.Float3
import WBIN.Float3Channel
import WBIN.SourceFileInf
try:
    from typing import List, Optional
except:
    pass

class ThumbT(object):

    # ThumbT
    def __init__(self):
        self.aabb = None  # type: Optional[WBIN.AABB.AABBT]
        self.position = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.color = None  # type: List[WBIN.Float3.Float3T]
        self.sourceFileInf = None  # type: Optional[WBIN.SourceFileInf.SourceFileInfT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        thumb = Thumb()
        thumb.Init(buf, pos)
        return cls.InitFromObj(thumb)

    @classmethod
    def InitFromObj(cls, thumb):
        x = ThumbT()
        x._UnPack(thumb)
        return x

    # ThumbT
    def _UnPack(self, thumb):
        if thumb is None:
            return
        if thumb.Aabb() is not None:
            self.aabb = WBIN.AABB.AABBT.InitFromObj(thumb.Aabb())
        if thumb.Position() is not None:
            self.position = WBIN.Float3Channel.Float3ChannelT.InitFromObj(thumb.Position())
        if not thumb.ColorIsNone():
            self.color = []
            for i in range(thumb.ColorLength()):
                if thumb.Color(i) is None:
                    self.color.append(None)
                else:
                    float3_ = WBIN.Float3.Float3T.InitFromObj(thumb.Color(i))
                    self.color.append(float3_)
        if thumb.SourceFileInf() is not None:
            self.sourceFileInf = WBIN.SourceFileInf.SourceFileInfT.InitFromObj(thumb.SourceFileInf())

    # ThumbT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.color is not None:
            ThumbStartColorVector(builder, len(self.color))
            for i in reversed(range(len(self.color))):
                self.color[i].Pack(builder)
            color = builder.EndVector(len(self.color))
        if self.sourceFileInf is not None:
            sourceFileInf = self.sourceFileInf.Pack(builder)
        ThumbStart(builder)
        if self.aabb is not None:
            aabb = self.aabb.Pack(builder)
            ThumbAddAabb(builder, aabb)
        if self.position is not None:
            ThumbAddPosition(builder, position)
        if self.color is not None:
            ThumbAddColor(builder, color)
        if self.sourceFileInf is not None:
            ThumbAddSourceFileInf(builder, sourceFileInf)
        thumb = ThumbEnd(builder)
        return thumb
