// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WAREASDF_WBIN_H_
#define FLATBUFFERS_GENERATED_WAREASDF_WBIN_H_

#include "flatbuffers/flatbuffers.h"

#include "wbin_generated.h"

namespace WBIN {

struct AreaSDF;
struct AreaSDFBuilder;
struct AreaSDFT;

enum ByteSize : int8_t {
  ByteSize_SHORT = 1,
  ByteSize_HALF = 2,
  ByteSize_FLOAT = 4,
  ByteSize_DOUBLE = 8,
  ByteSize_MIN = ByteSize_SHORT,
  ByteSize_MAX = ByteSize_DOUBLE
};

inline const ByteSize (&EnumValuesByteSize())[4] {
  static const ByteSize values[] = {
    ByteSize_SHORT,
    ByteSize_HALF,
    ByteSize_FLOAT,
    ByteSize_DOUBLE
  };
  return values;
}

inline const char * const *EnumNamesByteSize() {
  static const char * const names[9] = {
    "SHORT",
    "HALF",
    "",
    "FLOAT",
    "",
    "",
    "",
    "DOUBLE",
    nullptr
  };
  return names;
}

inline const char *EnumNameByteSize(ByteSize e) {
  if (flatbuffers::IsOutRange(e, ByteSize_SHORT, ByteSize_DOUBLE)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(ByteSize_SHORT);
  return EnumNamesByteSize()[index];
}

struct AreaSDFT : public flatbuffers::NativeTable {
  typedef AreaSDF TableType;
  std::vector<int8_t> value{};
  WBIN::ByteSize valueByteSize = WBIN::ByteSize_FLOAT;
  std::unique_ptr<WBIN::UInt3> resolution{};
  std::unique_ptr<WBIN::Float3> originOffset{};
  float voxelSize = 0.0f;
};

struct AreaSDF FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AreaSDFT NativeTableType;
  typedef AreaSDFBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_VALUEBYTESIZE = 6,
    VT_RESOLUTION = 8,
    VT_ORIGINOFFSET = 10,
    VT_VOXELSIZE = 12
  };
  const flatbuffers::Vector<int8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  flatbuffers::Vector<int8_t> *mutable_value() {
    return GetPointer<flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  WBIN::ByteSize valueByteSize() const {
    return static_cast<WBIN::ByteSize>(GetField<int8_t>(VT_VALUEBYTESIZE, 4));
  }
  bool mutate_valueByteSize(WBIN::ByteSize _valueByteSize) {
    return SetField<int8_t>(VT_VALUEBYTESIZE, static_cast<int8_t>(_valueByteSize), 4);
  }
  const WBIN::UInt3 *resolution() const {
    return GetStruct<const WBIN::UInt3 *>(VT_RESOLUTION);
  }
  WBIN::UInt3 *mutable_resolution() {
    return GetStruct<WBIN::UInt3 *>(VT_RESOLUTION);
  }
  const WBIN::Float3 *originOffset() const {
    return GetStruct<const WBIN::Float3 *>(VT_ORIGINOFFSET);
  }
  WBIN::Float3 *mutable_originOffset() {
    return GetStruct<WBIN::Float3 *>(VT_ORIGINOFFSET);
  }
  float voxelSize() const {
    return GetField<float>(VT_VOXELSIZE, 0.0f);
  }
  bool mutate_voxelSize(float _voxelSize) {
    return SetField<float>(VT_VOXELSIZE, _voxelSize, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           VerifyField<int8_t>(verifier, VT_VALUEBYTESIZE) &&
           VerifyFieldRequired<WBIN::UInt3>(verifier, VT_RESOLUTION) &&
           VerifyFieldRequired<WBIN::Float3>(verifier, VT_ORIGINOFFSET) &&
           VerifyField<float>(verifier, VT_VOXELSIZE) &&
           verifier.EndTable();
  }
  AreaSDFT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AreaSDFT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AreaSDF> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AreaSDFT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AreaSDFBuilder {
  typedef AreaSDF Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int8_t>> value) {
    fbb_.AddOffset(AreaSDF::VT_VALUE, value);
  }
  void add_valueByteSize(WBIN::ByteSize valueByteSize) {
    fbb_.AddElement<int8_t>(AreaSDF::VT_VALUEBYTESIZE, static_cast<int8_t>(valueByteSize), 4);
  }
  void add_resolution(const WBIN::UInt3 *resolution) {
    fbb_.AddStruct(AreaSDF::VT_RESOLUTION, resolution);
  }
  void add_originOffset(const WBIN::Float3 *originOffset) {
    fbb_.AddStruct(AreaSDF::VT_ORIGINOFFSET, originOffset);
  }
  void add_voxelSize(float voxelSize) {
    fbb_.AddElement<float>(AreaSDF::VT_VOXELSIZE, voxelSize, 0.0f);
  }
  explicit AreaSDFBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AreaSDF> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AreaSDF>(end);
    fbb_.Required(o, AreaSDF::VT_VALUE);
    fbb_.Required(o, AreaSDF::VT_RESOLUTION);
    fbb_.Required(o, AreaSDF::VT_ORIGINOFFSET);
    return o;
  }
};

inline flatbuffers::Offset<AreaSDF> CreateAreaSDF(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> value = 0,
    WBIN::ByteSize valueByteSize = WBIN::ByteSize_FLOAT,
    const WBIN::UInt3 *resolution = 0,
    const WBIN::Float3 *originOffset = 0,
    float voxelSize = 0.0f) {
  AreaSDFBuilder builder_(_fbb);
  builder_.add_voxelSize(voxelSize);
  builder_.add_originOffset(originOffset);
  builder_.add_resolution(resolution);
  builder_.add_value(value);
  builder_.add_valueByteSize(valueByteSize);
  return builder_.Finish();
}

inline flatbuffers::Offset<AreaSDF> CreateAreaSDFDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *value = nullptr,
    WBIN::ByteSize valueByteSize = WBIN::ByteSize_FLOAT,
    const WBIN::UInt3 *resolution = 0,
    const WBIN::Float3 *originOffset = 0,
    float voxelSize = 0.0f) {
  auto value__ = value ? _fbb.CreateVector<int8_t>(*value) : 0;
  return WBIN::CreateAreaSDF(
      _fbb,
      value__,
      valueByteSize,
      resolution,
      originOffset,
      voxelSize);
}

flatbuffers::Offset<AreaSDF> CreateAreaSDF(flatbuffers::FlatBufferBuilder &_fbb, const AreaSDFT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AreaSDFT *AreaSDF::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AreaSDFT>(new AreaSDFT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AreaSDF::UnPackTo(AreaSDFT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); if (_e) { _o->value.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->value.begin()); } }
  { auto _e = valueByteSize(); _o->valueByteSize = _e; }
  { auto _e = resolution(); if (_e) _o->resolution = std::unique_ptr<WBIN::UInt3>(new WBIN::UInt3(*_e)); }
  { auto _e = originOffset(); if (_e) _o->originOffset = std::unique_ptr<WBIN::Float3>(new WBIN::Float3(*_e)); }
  { auto _e = voxelSize(); _o->voxelSize = _e; }
}

inline flatbuffers::Offset<AreaSDF> AreaSDF::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AreaSDFT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAreaSDF(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AreaSDF> CreateAreaSDF(flatbuffers::FlatBufferBuilder &_fbb, const AreaSDFT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AreaSDFT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _fbb.CreateVector(_o->value);
  auto _valueByteSize = _o->valueByteSize;
  auto _resolution = _o->resolution ? _o->resolution.get() : 0;
  auto _originOffset = _o->originOffset ? _o->originOffset.get() : 0;
  auto _voxelSize = _o->voxelSize;
  return WBIN::CreateAreaSDF(
      _fbb,
      _value,
      _valueByteSize,
      _resolution,
      _originOffset,
      _voxelSize);
}

inline const WBIN::AreaSDF *GetAreaSDF(const void *buf) {
  return flatbuffers::GetRoot<WBIN::AreaSDF>(buf);
}

inline const WBIN::AreaSDF *GetSizePrefixedAreaSDF(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WBIN::AreaSDF>(buf);
}

inline AreaSDF *GetMutableAreaSDF(void *buf) {
  return flatbuffers::GetMutableRoot<AreaSDF>(buf);
}

inline bool VerifyAreaSDFBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WBIN::AreaSDF>(nullptr);
}

inline bool VerifySizePrefixedAreaSDFBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WBIN::AreaSDF>(nullptr);
}

inline void FinishAreaSDFBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::AreaSDF> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAreaSDFBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::AreaSDF> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WBIN::AreaSDFT> UnPackAreaSDF(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::AreaSDFT>(GetAreaSDF(buf)->UnPack(res));
}

inline std::unique_ptr<WBIN::AreaSDFT> UnPackSizePrefixedAreaSDF(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::AreaSDFT>(GetSizePrefixedAreaSDF(buf)->UnPack(res));
}

}  // namespace WBIN

#endif  // FLATBUFFERS_GENERATED_WAREASDF_WBIN_H_
