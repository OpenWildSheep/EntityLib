// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WBP_WBIN_H_
#define FLATBUFFERS_GENERATED_WBP_WBIN_H_

#include "flatbuffers/flatbuffers.h"

#include "wbin_generated.h"

namespace WBIN {

struct BiomePatch;
struct BiomePatchBuilder;
struct BiomePatchT;

struct BiomePatchT : public flatbuffers::NativeTable {
  typedef BiomePatch TableType;
  std::unique_ptr<WBIN::AABB> aabb{};
  std::unique_ptr<WBIN::Float3ChannelT> position{};
  std::unique_ptr<WBIN::SourceFileInfT> sourceFileInf{};
  std::vector<WBIN::Bool3> edgeVisibility{};
};

struct BiomePatch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BiomePatchT NativeTableType;
  typedef BiomePatchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AABB = 4,
    VT_POSITION = 6,
    VT_SOURCEFILEINF = 8,
    VT_EDGEVISIBILITY = 10
  };
  const WBIN::AABB *aabb() const {
    return GetStruct<const WBIN::AABB *>(VT_AABB);
  }
  WBIN::AABB *mutable_aabb() {
    return GetStruct<WBIN::AABB *>(VT_AABB);
  }
  const WBIN::Float3Channel *position() const {
    return GetPointer<const WBIN::Float3Channel *>(VT_POSITION);
  }
  WBIN::Float3Channel *mutable_position() {
    return GetPointer<WBIN::Float3Channel *>(VT_POSITION);
  }
  const WBIN::SourceFileInf *sourceFileInf() const {
    return GetPointer<const WBIN::SourceFileInf *>(VT_SOURCEFILEINF);
  }
  WBIN::SourceFileInf *mutable_sourceFileInf() {
    return GetPointer<WBIN::SourceFileInf *>(VT_SOURCEFILEINF);
  }
  const flatbuffers::Vector<const WBIN::Bool3 *> *edgeVisibility() const {
    return GetPointer<const flatbuffers::Vector<const WBIN::Bool3 *> *>(VT_EDGEVISIBILITY);
  }
  flatbuffers::Vector<const WBIN::Bool3 *> *mutable_edgeVisibility() {
    return GetPointer<flatbuffers::Vector<const WBIN::Bool3 *> *>(VT_EDGEVISIBILITY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<WBIN::AABB>(verifier, VT_AABB) &&
           VerifyOffsetRequired(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_SOURCEFILEINF) &&
           verifier.VerifyTable(sourceFileInf()) &&
           VerifyOffset(verifier, VT_EDGEVISIBILITY) &&
           verifier.VerifyVector(edgeVisibility()) &&
           verifier.EndTable();
  }
  BiomePatchT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BiomePatchT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<BiomePatch> Pack(flatbuffers::FlatBufferBuilder &_fbb, const BiomePatchT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BiomePatchBuilder {
  typedef BiomePatch Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_aabb(const WBIN::AABB *aabb) {
    fbb_.AddStruct(BiomePatch::VT_AABB, aabb);
  }
  void add_position(flatbuffers::Offset<WBIN::Float3Channel> position) {
    fbb_.AddOffset(BiomePatch::VT_POSITION, position);
  }
  void add_sourceFileInf(flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf) {
    fbb_.AddOffset(BiomePatch::VT_SOURCEFILEINF, sourceFileInf);
  }
  void add_edgeVisibility(flatbuffers::Offset<flatbuffers::Vector<const WBIN::Bool3 *>> edgeVisibility) {
    fbb_.AddOffset(BiomePatch::VT_EDGEVISIBILITY, edgeVisibility);
  }
  explicit BiomePatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<BiomePatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BiomePatch>(end);
    fbb_.Required(o, BiomePatch::VT_POSITION);
    return o;
  }
};

inline flatbuffers::Offset<BiomePatch> CreateBiomePatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    const WBIN::AABB *aabb = 0,
    flatbuffers::Offset<WBIN::Float3Channel> position = 0,
    flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf = 0,
    flatbuffers::Offset<flatbuffers::Vector<const WBIN::Bool3 *>> edgeVisibility = 0) {
  BiomePatchBuilder builder_(_fbb);
  builder_.add_edgeVisibility(edgeVisibility);
  builder_.add_sourceFileInf(sourceFileInf);
  builder_.add_position(position);
  builder_.add_aabb(aabb);
  return builder_.Finish();
}

inline flatbuffers::Offset<BiomePatch> CreateBiomePatchDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const WBIN::AABB *aabb = 0,
    flatbuffers::Offset<WBIN::Float3Channel> position = 0,
    flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf = 0,
    const std::vector<WBIN::Bool3> *edgeVisibility = nullptr) {
  auto edgeVisibility__ = edgeVisibility ? _fbb.CreateVectorOfStructs<WBIN::Bool3>(*edgeVisibility) : 0;
  return WBIN::CreateBiomePatch(
      _fbb,
      aabb,
      position,
      sourceFileInf,
      edgeVisibility__);
}

flatbuffers::Offset<BiomePatch> CreateBiomePatch(flatbuffers::FlatBufferBuilder &_fbb, const BiomePatchT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BiomePatchT *BiomePatch::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BiomePatchT>(new BiomePatchT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void BiomePatch::UnPackTo(BiomePatchT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = aabb(); if (_e) _o->aabb = std::unique_ptr<WBIN::AABB>(new WBIN::AABB(*_e)); }
  { auto _e = position(); if (_e) _o->position = std::unique_ptr<WBIN::Float3ChannelT>(_e->UnPack(_resolver)); }
  { auto _e = sourceFileInf(); if (_e) _o->sourceFileInf = std::unique_ptr<WBIN::SourceFileInfT>(_e->UnPack(_resolver)); }
  { auto _e = edgeVisibility(); if (_e) { _o->edgeVisibility.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->edgeVisibility[_i] = *_e->Get(_i); } } }
}

inline flatbuffers::Offset<BiomePatch> BiomePatch::Pack(flatbuffers::FlatBufferBuilder &_fbb, const BiomePatchT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBiomePatch(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<BiomePatch> CreateBiomePatch(flatbuffers::FlatBufferBuilder &_fbb, const BiomePatchT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const BiomePatchT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _aabb = _o->aabb ? _o->aabb.get() : 0;
  auto _position = _o->position ? CreateFloat3Channel(_fbb, _o->position.get(), _rehasher) : 0;
  auto _sourceFileInf = _o->sourceFileInf ? CreateSourceFileInf(_fbb, _o->sourceFileInf.get(), _rehasher) : 0;
  auto _edgeVisibility = _o->edgeVisibility.size() ? _fbb.CreateVectorOfStructs(_o->edgeVisibility) : 0;
  return WBIN::CreateBiomePatch(
      _fbb,
      _aabb,
      _position,
      _sourceFileInf,
      _edgeVisibility);
}

inline const WBIN::BiomePatch *GetBiomePatch(const void *buf) {
  return flatbuffers::GetRoot<WBIN::BiomePatch>(buf);
}

inline const WBIN::BiomePatch *GetSizePrefixedBiomePatch(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WBIN::BiomePatch>(buf);
}

inline BiomePatch *GetMutableBiomePatch(void *buf) {
  return flatbuffers::GetMutableRoot<BiomePatch>(buf);
}

inline bool VerifyBiomePatchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WBIN::BiomePatch>(nullptr);
}

inline bool VerifySizePrefixedBiomePatchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WBIN::BiomePatch>(nullptr);
}

inline void FinishBiomePatchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::BiomePatch> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBiomePatchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::BiomePatch> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WBIN::BiomePatchT> UnPackBiomePatch(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::BiomePatchT>(GetBiomePatch(buf)->UnPack(res));
}

inline std::unique_ptr<WBIN::BiomePatchT> UnPackSizePrefixedBiomePatch(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::BiomePatchT>(GetSizePrefixedBiomePatch(buf)->UnPack(res));
}

}  // namespace WBIN

#endif  // FLATBUFFERS_GENERATED_WBP_WBIN_H_
