// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WBS_WBIN_H_
#define FLATBUFFERS_GENERATED_WBS_WBIN_H_

#include "flatbuffers/flatbuffers.h"

#include "wbin_generated.h"

namespace WBIN {

struct TargetShape;
struct TargetShapeBuilder;
struct TargetShapeT;

struct BlendShape;
struct BlendShapeBuilder;
struct BlendShapeT;

struct TargetShapeT : public flatbuffers::NativeTable {
  typedef TargetShape TableType;
  std::string name{};
  std::vector<WBIN::Float3> vertexData{};
};

struct TargetShape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TargetShapeT NativeTableType;
  typedef TargetShapeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VERTEXDATA = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<const WBIN::Float3 *> *vertexData() const {
    return GetPointer<const flatbuffers::Vector<const WBIN::Float3 *> *>(VT_VERTEXDATA);
  }
  flatbuffers::Vector<const WBIN::Float3 *> *mutable_vertexData() {
    return GetPointer<flatbuffers::Vector<const WBIN::Float3 *> *>(VT_VERTEXDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VERTEXDATA) &&
           verifier.VerifyVector(vertexData()) &&
           verifier.EndTable();
  }
  TargetShapeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TargetShapeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TargetShape> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TargetShapeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TargetShapeBuilder {
  typedef TargetShape Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TargetShape::VT_NAME, name);
  }
  void add_vertexData(flatbuffers::Offset<flatbuffers::Vector<const WBIN::Float3 *>> vertexData) {
    fbb_.AddOffset(TargetShape::VT_VERTEXDATA, vertexData);
  }
  explicit TargetShapeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TargetShape> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TargetShape>(end);
    return o;
  }
};

inline flatbuffers::Offset<TargetShape> CreateTargetShape(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<const WBIN::Float3 *>> vertexData = 0) {
  TargetShapeBuilder builder_(_fbb);
  builder_.add_vertexData(vertexData);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<TargetShape> CreateTargetShapeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<WBIN::Float3> *vertexData = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto vertexData__ = vertexData ? _fbb.CreateVectorOfStructs<WBIN::Float3>(*vertexData) : 0;
  return WBIN::CreateTargetShape(
      _fbb,
      name__,
      vertexData__);
}

flatbuffers::Offset<TargetShape> CreateTargetShape(flatbuffers::FlatBufferBuilder &_fbb, const TargetShapeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct BlendShapeT : public flatbuffers::NativeTable {
  typedef BlendShape TableType;
  std::vector<std::unique_ptr<WBIN::TargetShapeT>> targetShapes{};
};

struct BlendShape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BlendShapeT NativeTableType;
  typedef BlendShapeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TARGETSHAPES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<WBIN::TargetShape>> *targetShapes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<WBIN::TargetShape>> *>(VT_TARGETSHAPES);
  }
  flatbuffers::Vector<flatbuffers::Offset<WBIN::TargetShape>> *mutable_targetShapes() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<WBIN::TargetShape>> *>(VT_TARGETSHAPES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TARGETSHAPES) &&
           verifier.VerifyVector(targetShapes()) &&
           verifier.VerifyVectorOfTables(targetShapes()) &&
           verifier.EndTable();
  }
  BlendShapeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BlendShapeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<BlendShape> Pack(flatbuffers::FlatBufferBuilder &_fbb, const BlendShapeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BlendShapeBuilder {
  typedef BlendShape Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_targetShapes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WBIN::TargetShape>>> targetShapes) {
    fbb_.AddOffset(BlendShape::VT_TARGETSHAPES, targetShapes);
  }
  explicit BlendShapeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<BlendShape> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BlendShape>(end);
    return o;
  }
};

inline flatbuffers::Offset<BlendShape> CreateBlendShape(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WBIN::TargetShape>>> targetShapes = 0) {
  BlendShapeBuilder builder_(_fbb);
  builder_.add_targetShapes(targetShapes);
  return builder_.Finish();
}

inline flatbuffers::Offset<BlendShape> CreateBlendShapeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<WBIN::TargetShape>> *targetShapes = nullptr) {
  auto targetShapes__ = targetShapes ? _fbb.CreateVector<flatbuffers::Offset<WBIN::TargetShape>>(*targetShapes) : 0;
  return WBIN::CreateBlendShape(
      _fbb,
      targetShapes__);
}

flatbuffers::Offset<BlendShape> CreateBlendShape(flatbuffers::FlatBufferBuilder &_fbb, const BlendShapeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TargetShapeT *TargetShape::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TargetShapeT>(new TargetShapeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TargetShape::UnPackTo(TargetShapeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = vertexData(); if (_e) { _o->vertexData.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->vertexData[_i] = *_e->Get(_i); } } }
}

inline flatbuffers::Offset<TargetShape> TargetShape::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TargetShapeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTargetShape(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TargetShape> CreateTargetShape(flatbuffers::FlatBufferBuilder &_fbb, const TargetShapeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TargetShapeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _vertexData = _o->vertexData.size() ? _fbb.CreateVectorOfStructs(_o->vertexData) : 0;
  return WBIN::CreateTargetShape(
      _fbb,
      _name,
      _vertexData);
}

inline BlendShapeT *BlendShape::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BlendShapeT>(new BlendShapeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void BlendShape::UnPackTo(BlendShapeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = targetShapes(); if (_e) { _o->targetShapes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->targetShapes[_i] = std::unique_ptr<WBIN::TargetShapeT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<BlendShape> BlendShape::Pack(flatbuffers::FlatBufferBuilder &_fbb, const BlendShapeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBlendShape(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<BlendShape> CreateBlendShape(flatbuffers::FlatBufferBuilder &_fbb, const BlendShapeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const BlendShapeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _targetShapes = _o->targetShapes.size() ? _fbb.CreateVector<flatbuffers::Offset<WBIN::TargetShape>> (_o->targetShapes.size(), [](size_t i, _VectorArgs *__va) { return CreateTargetShape(*__va->__fbb, __va->__o->targetShapes[i].get(), __va->__rehasher); }, &_va ) : 0;
  return WBIN::CreateBlendShape(
      _fbb,
      _targetShapes);
}

inline const WBIN::BlendShape *GetBlendShape(const void *buf) {
  return flatbuffers::GetRoot<WBIN::BlendShape>(buf);
}

inline const WBIN::BlendShape *GetSizePrefixedBlendShape(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WBIN::BlendShape>(buf);
}

inline BlendShape *GetMutableBlendShape(void *buf) {
  return flatbuffers::GetMutableRoot<BlendShape>(buf);
}

inline bool VerifyBlendShapeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WBIN::BlendShape>(nullptr);
}

inline bool VerifySizePrefixedBlendShapeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WBIN::BlendShape>(nullptr);
}

inline void FinishBlendShapeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::BlendShape> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBlendShapeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::BlendShape> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WBIN::BlendShapeT> UnPackBlendShape(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::BlendShapeT>(GetBlendShape(buf)->UnPack(res));
}

inline std::unique_ptr<WBIN::BlendShapeT> UnPackSizePrefixedBlendShape(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::BlendShapeT>(GetSizePrefixedBlendShape(buf)->UnPack(res));
}

}  // namespace WBIN

#endif  // FLATBUFFERS_GENERATED_WBS_WBIN_H_
