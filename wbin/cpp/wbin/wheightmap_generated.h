// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WHEIGHTMAP_WBIN_H_
#define FLATBUFFERS_GENERATED_WHEIGHTMAP_WBIN_H_

#include "flatbuffers/flatbuffers.h"

#include "wbin_generated.h"

namespace WBIN {

struct HeightMapLayer;

struct HeightMapPixel;
struct HeightMapPixelBuilder;
struct HeightMapPixelT;

struct HeightMap;
struct HeightMapBuilder;
struct HeightMapT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) HeightMapLayer FLATBUFFERS_FINAL_CLASS {
 private:
  WBIN::Float3 normal_;
  float height_;
  uint8_t physicsmaterialid_;
  int8_t padding0__;  int16_t padding1__;

 public:
  HeightMapLayer()
      : normal_(),
        height_(0),
        physicsmaterialid_(0),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  HeightMapLayer(const WBIN::Float3 &_normal, float _height, uint8_t _physicsmaterialid)
      : normal_(_normal),
        height_(flatbuffers::EndianScalar(_height)),
        physicsmaterialid_(flatbuffers::EndianScalar(_physicsmaterialid)),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  const WBIN::Float3 &normal() const {
    return normal_;
  }
  WBIN::Float3 &mutable_normal() {
    return normal_;
  }
  float height() const {
    return flatbuffers::EndianScalar(height_);
  }
  void mutate_height(float _height) {
    flatbuffers::WriteScalar(&height_, _height);
  }
  uint8_t physicsmaterialid() const {
    return flatbuffers::EndianScalar(physicsmaterialid_);
  }
  void mutate_physicsmaterialid(uint8_t _physicsmaterialid) {
    flatbuffers::WriteScalar(&physicsmaterialid_, _physicsmaterialid);
  }
};
FLATBUFFERS_STRUCT_END(HeightMapLayer, 20);

struct HeightMapPixelT : public flatbuffers::NativeTable {
  typedef HeightMapPixel TableType;
  std::vector<WBIN::HeightMapLayer> layers{};
};

struct HeightMapPixel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HeightMapPixelT NativeTableType;
  typedef HeightMapPixelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LAYERS = 4
  };
  const flatbuffers::Vector<const WBIN::HeightMapLayer *> *layers() const {
    return GetPointer<const flatbuffers::Vector<const WBIN::HeightMapLayer *> *>(VT_LAYERS);
  }
  flatbuffers::Vector<const WBIN::HeightMapLayer *> *mutable_layers() {
    return GetPointer<flatbuffers::Vector<const WBIN::HeightMapLayer *> *>(VT_LAYERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_LAYERS) &&
           verifier.VerifyVector(layers()) &&
           verifier.EndTable();
  }
  HeightMapPixelT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HeightMapPixelT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<HeightMapPixel> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HeightMapPixelT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HeightMapPixelBuilder {
  typedef HeightMapPixel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_layers(flatbuffers::Offset<flatbuffers::Vector<const WBIN::HeightMapLayer *>> layers) {
    fbb_.AddOffset(HeightMapPixel::VT_LAYERS, layers);
  }
  explicit HeightMapPixelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HeightMapPixel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HeightMapPixel>(end);
    fbb_.Required(o, HeightMapPixel::VT_LAYERS);
    return o;
  }
};

inline flatbuffers::Offset<HeightMapPixel> CreateHeightMapPixel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const WBIN::HeightMapLayer *>> layers = 0) {
  HeightMapPixelBuilder builder_(_fbb);
  builder_.add_layers(layers);
  return builder_.Finish();
}

inline flatbuffers::Offset<HeightMapPixel> CreateHeightMapPixelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<WBIN::HeightMapLayer> *layers = nullptr) {
  auto layers__ = layers ? _fbb.CreateVectorOfStructs<WBIN::HeightMapLayer>(*layers) : 0;
  return WBIN::CreateHeightMapPixel(
      _fbb,
      layers__);
}

flatbuffers::Offset<HeightMapPixel> CreateHeightMapPixel(flatbuffers::FlatBufferBuilder &_fbb, const HeightMapPixelT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct HeightMapT : public flatbuffers::NativeTable {
  typedef HeightMap TableType;
  uint32_t xmin = 0;
  uint32_t xmax = 0;
  uint32_t ymin = 0;
  uint32_t ymax = 0;
  uint32_t width = 0;
  uint32_t height = 0;
  std::vector<std::unique_ptr<WBIN::HeightMapPixelT>> pixels{};
};

struct HeightMap FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HeightMapT NativeTableType;
  typedef HeightMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_XMIN = 4,
    VT_XMAX = 6,
    VT_YMIN = 8,
    VT_YMAX = 10,
    VT_WIDTH = 12,
    VT_HEIGHT = 14,
    VT_PIXELS = 16
  };
  uint32_t xmin() const {
    return GetField<uint32_t>(VT_XMIN, 0);
  }
  bool mutate_xmin(uint32_t _xmin) {
    return SetField<uint32_t>(VT_XMIN, _xmin, 0);
  }
  uint32_t xmax() const {
    return GetField<uint32_t>(VT_XMAX, 0);
  }
  bool mutate_xmax(uint32_t _xmax) {
    return SetField<uint32_t>(VT_XMAX, _xmax, 0);
  }
  uint32_t ymin() const {
    return GetField<uint32_t>(VT_YMIN, 0);
  }
  bool mutate_ymin(uint32_t _ymin) {
    return SetField<uint32_t>(VT_YMIN, _ymin, 0);
  }
  uint32_t ymax() const {
    return GetField<uint32_t>(VT_YMAX, 0);
  }
  bool mutate_ymax(uint32_t _ymax) {
    return SetField<uint32_t>(VT_YMAX, _ymax, 0);
  }
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  bool mutate_width(uint32_t _width) {
    return SetField<uint32_t>(VT_WIDTH, _width, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  bool mutate_height(uint32_t _height) {
    return SetField<uint32_t>(VT_HEIGHT, _height, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<WBIN::HeightMapPixel>> *pixels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<WBIN::HeightMapPixel>> *>(VT_PIXELS);
  }
  flatbuffers::Vector<flatbuffers::Offset<WBIN::HeightMapPixel>> *mutable_pixels() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<WBIN::HeightMapPixel>> *>(VT_PIXELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_XMIN) &&
           VerifyField<uint32_t>(verifier, VT_XMAX) &&
           VerifyField<uint32_t>(verifier, VT_YMIN) &&
           VerifyField<uint32_t>(verifier, VT_YMAX) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT) &&
           VerifyOffsetRequired(verifier, VT_PIXELS) &&
           verifier.VerifyVector(pixels()) &&
           verifier.VerifyVectorOfTables(pixels()) &&
           verifier.EndTable();
  }
  HeightMapT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HeightMapT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<HeightMap> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HeightMapT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HeightMapBuilder {
  typedef HeightMap Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_xmin(uint32_t xmin) {
    fbb_.AddElement<uint32_t>(HeightMap::VT_XMIN, xmin, 0);
  }
  void add_xmax(uint32_t xmax) {
    fbb_.AddElement<uint32_t>(HeightMap::VT_XMAX, xmax, 0);
  }
  void add_ymin(uint32_t ymin) {
    fbb_.AddElement<uint32_t>(HeightMap::VT_YMIN, ymin, 0);
  }
  void add_ymax(uint32_t ymax) {
    fbb_.AddElement<uint32_t>(HeightMap::VT_YMAX, ymax, 0);
  }
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(HeightMap::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(HeightMap::VT_HEIGHT, height, 0);
  }
  void add_pixels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WBIN::HeightMapPixel>>> pixels) {
    fbb_.AddOffset(HeightMap::VT_PIXELS, pixels);
  }
  explicit HeightMapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HeightMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HeightMap>(end);
    fbb_.Required(o, HeightMap::VT_PIXELS);
    return o;
  }
};

inline flatbuffers::Offset<HeightMap> CreateHeightMap(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t xmin = 0,
    uint32_t xmax = 0,
    uint32_t ymin = 0,
    uint32_t ymax = 0,
    uint32_t width = 0,
    uint32_t height = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WBIN::HeightMapPixel>>> pixels = 0) {
  HeightMapBuilder builder_(_fbb);
  builder_.add_pixels(pixels);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_ymax(ymax);
  builder_.add_ymin(ymin);
  builder_.add_xmax(xmax);
  builder_.add_xmin(xmin);
  return builder_.Finish();
}

inline flatbuffers::Offset<HeightMap> CreateHeightMapDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t xmin = 0,
    uint32_t xmax = 0,
    uint32_t ymin = 0,
    uint32_t ymax = 0,
    uint32_t width = 0,
    uint32_t height = 0,
    const std::vector<flatbuffers::Offset<WBIN::HeightMapPixel>> *pixels = nullptr) {
  auto pixels__ = pixels ? _fbb.CreateVector<flatbuffers::Offset<WBIN::HeightMapPixel>>(*pixels) : 0;
  return WBIN::CreateHeightMap(
      _fbb,
      xmin,
      xmax,
      ymin,
      ymax,
      width,
      height,
      pixels__);
}

flatbuffers::Offset<HeightMap> CreateHeightMap(flatbuffers::FlatBufferBuilder &_fbb, const HeightMapT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HeightMapPixelT *HeightMapPixel::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HeightMapPixelT>(new HeightMapPixelT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HeightMapPixel::UnPackTo(HeightMapPixelT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = layers(); if (_e) { _o->layers.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->layers[_i] = *_e->Get(_i); } } }
}

inline flatbuffers::Offset<HeightMapPixel> HeightMapPixel::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HeightMapPixelT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHeightMapPixel(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<HeightMapPixel> CreateHeightMapPixel(flatbuffers::FlatBufferBuilder &_fbb, const HeightMapPixelT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HeightMapPixelT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _layers = _fbb.CreateVectorOfStructs(_o->layers);
  return WBIN::CreateHeightMapPixel(
      _fbb,
      _layers);
}

inline HeightMapT *HeightMap::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HeightMapT>(new HeightMapT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HeightMap::UnPackTo(HeightMapT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = xmin(); _o->xmin = _e; }
  { auto _e = xmax(); _o->xmax = _e; }
  { auto _e = ymin(); _o->ymin = _e; }
  { auto _e = ymax(); _o->ymax = _e; }
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
  { auto _e = pixels(); if (_e) { _o->pixels.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->pixels[_i] = std::unique_ptr<WBIN::HeightMapPixelT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<HeightMap> HeightMap::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HeightMapT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHeightMap(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<HeightMap> CreateHeightMap(flatbuffers::FlatBufferBuilder &_fbb, const HeightMapT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HeightMapT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _xmin = _o->xmin;
  auto _xmax = _o->xmax;
  auto _ymin = _o->ymin;
  auto _ymax = _o->ymax;
  auto _width = _o->width;
  auto _height = _o->height;
  auto _pixels = _fbb.CreateVector<flatbuffers::Offset<WBIN::HeightMapPixel>> (_o->pixels.size(), [](size_t i, _VectorArgs *__va) { return CreateHeightMapPixel(*__va->__fbb, __va->__o->pixels[i].get(), __va->__rehasher); }, &_va );
  return WBIN::CreateHeightMap(
      _fbb,
      _xmin,
      _xmax,
      _ymin,
      _ymax,
      _width,
      _height,
      _pixels);
}

inline const WBIN::HeightMap *GetHeightMap(const void *buf) {
  return flatbuffers::GetRoot<WBIN::HeightMap>(buf);
}

inline const WBIN::HeightMap *GetSizePrefixedHeightMap(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WBIN::HeightMap>(buf);
}

inline HeightMap *GetMutableHeightMap(void *buf) {
  return flatbuffers::GetMutableRoot<HeightMap>(buf);
}

inline bool VerifyHeightMapBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WBIN::HeightMap>(nullptr);
}

inline bool VerifySizePrefixedHeightMapBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WBIN::HeightMap>(nullptr);
}

inline void FinishHeightMapBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::HeightMap> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHeightMapBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::HeightMap> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WBIN::HeightMapT> UnPackHeightMap(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::HeightMapT>(GetHeightMap(buf)->UnPack(res));
}

inline std::unique_ptr<WBIN::HeightMapT> UnPackSizePrefixedHeightMap(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::HeightMapT>(GetSizePrefixedHeightMap(buf)->UnPack(res));
}

}  // namespace WBIN

#endif  // FLATBUFFERS_GENERATED_WHEIGHTMAP_WBIN_H_
