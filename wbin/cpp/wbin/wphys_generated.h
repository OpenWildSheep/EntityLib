// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WPHYS_WBIN_H_
#define FLATBUFFERS_GENERATED_WPHYS_WBIN_H_

#include "flatbuffers/flatbuffers.h"

#include "wbin_generated.h"

namespace WBIN {

struct Phys;
struct PhysBuilder;
struct PhysT;

struct PhysT : public flatbuffers::NativeTable {
  typedef Phys TableType;
  std::unique_ptr<WBIN::AABB> aabb{};
  std::unique_ptr<WBIN::Float3ChannelT> position{};
  std::vector<uint32_t> materials{};
  std::unique_ptr<WBIN::SkinT> skin{};
  std::unique_ptr<WBIN::SourceFileInfT> sourceFileInf{};
  std::vector<WBIN::Bool3> edgeVisibility{};
};

struct Phys FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PhysT NativeTableType;
  typedef PhysBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AABB = 4,
    VT_POSITION = 6,
    VT_MATERIALS = 8,
    VT_SKIN = 10,
    VT_SOURCEFILEINF = 12,
    VT_EDGEVISIBILITY = 14
  };
  const WBIN::AABB *aabb() const {
    return GetStruct<const WBIN::AABB *>(VT_AABB);
  }
  WBIN::AABB *mutable_aabb() {
    return GetStruct<WBIN::AABB *>(VT_AABB);
  }
  const WBIN::Float3Channel *position() const {
    return GetPointer<const WBIN::Float3Channel *>(VT_POSITION);
  }
  WBIN::Float3Channel *mutable_position() {
    return GetPointer<WBIN::Float3Channel *>(VT_POSITION);
  }
  const flatbuffers::Vector<uint32_t> *materials() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_MATERIALS);
  }
  flatbuffers::Vector<uint32_t> *mutable_materials() {
    return GetPointer<flatbuffers::Vector<uint32_t> *>(VT_MATERIALS);
  }
  const WBIN::Skin *skin() const {
    return GetPointer<const WBIN::Skin *>(VT_SKIN);
  }
  WBIN::Skin *mutable_skin() {
    return GetPointer<WBIN::Skin *>(VT_SKIN);
  }
  const WBIN::SourceFileInf *sourceFileInf() const {
    return GetPointer<const WBIN::SourceFileInf *>(VT_SOURCEFILEINF);
  }
  WBIN::SourceFileInf *mutable_sourceFileInf() {
    return GetPointer<WBIN::SourceFileInf *>(VT_SOURCEFILEINF);
  }
  const flatbuffers::Vector<const WBIN::Bool3 *> *edgeVisibility() const {
    return GetPointer<const flatbuffers::Vector<const WBIN::Bool3 *> *>(VT_EDGEVISIBILITY);
  }
  flatbuffers::Vector<const WBIN::Bool3 *> *mutable_edgeVisibility() {
    return GetPointer<flatbuffers::Vector<const WBIN::Bool3 *> *>(VT_EDGEVISIBILITY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<WBIN::AABB>(verifier, VT_AABB) &&
           VerifyOffsetRequired(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_MATERIALS) &&
           verifier.VerifyVector(materials()) &&
           VerifyOffset(verifier, VT_SKIN) &&
           verifier.VerifyTable(skin()) &&
           VerifyOffset(verifier, VT_SOURCEFILEINF) &&
           verifier.VerifyTable(sourceFileInf()) &&
           VerifyOffset(verifier, VT_EDGEVISIBILITY) &&
           verifier.VerifyVector(edgeVisibility()) &&
           verifier.EndTable();
  }
  PhysT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PhysT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Phys> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PhysT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PhysBuilder {
  typedef Phys Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_aabb(const WBIN::AABB *aabb) {
    fbb_.AddStruct(Phys::VT_AABB, aabb);
  }
  void add_position(flatbuffers::Offset<WBIN::Float3Channel> position) {
    fbb_.AddOffset(Phys::VT_POSITION, position);
  }
  void add_materials(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> materials) {
    fbb_.AddOffset(Phys::VT_MATERIALS, materials);
  }
  void add_skin(flatbuffers::Offset<WBIN::Skin> skin) {
    fbb_.AddOffset(Phys::VT_SKIN, skin);
  }
  void add_sourceFileInf(flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf) {
    fbb_.AddOffset(Phys::VT_SOURCEFILEINF, sourceFileInf);
  }
  void add_edgeVisibility(flatbuffers::Offset<flatbuffers::Vector<const WBIN::Bool3 *>> edgeVisibility) {
    fbb_.AddOffset(Phys::VT_EDGEVISIBILITY, edgeVisibility);
  }
  explicit PhysBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Phys> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Phys>(end);
    fbb_.Required(o, Phys::VT_POSITION);
    return o;
  }
};

inline flatbuffers::Offset<Phys> CreatePhys(
    flatbuffers::FlatBufferBuilder &_fbb,
    const WBIN::AABB *aabb = 0,
    flatbuffers::Offset<WBIN::Float3Channel> position = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> materials = 0,
    flatbuffers::Offset<WBIN::Skin> skin = 0,
    flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf = 0,
    flatbuffers::Offset<flatbuffers::Vector<const WBIN::Bool3 *>> edgeVisibility = 0) {
  PhysBuilder builder_(_fbb);
  builder_.add_edgeVisibility(edgeVisibility);
  builder_.add_sourceFileInf(sourceFileInf);
  builder_.add_skin(skin);
  builder_.add_materials(materials);
  builder_.add_position(position);
  builder_.add_aabb(aabb);
  return builder_.Finish();
}

inline flatbuffers::Offset<Phys> CreatePhysDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const WBIN::AABB *aabb = 0,
    flatbuffers::Offset<WBIN::Float3Channel> position = 0,
    const std::vector<uint32_t> *materials = nullptr,
    flatbuffers::Offset<WBIN::Skin> skin = 0,
    flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf = 0,
    const std::vector<WBIN::Bool3> *edgeVisibility = nullptr) {
  auto materials__ = materials ? _fbb.CreateVector<uint32_t>(*materials) : 0;
  auto edgeVisibility__ = edgeVisibility ? _fbb.CreateVectorOfStructs<WBIN::Bool3>(*edgeVisibility) : 0;
  return WBIN::CreatePhys(
      _fbb,
      aabb,
      position,
      materials__,
      skin,
      sourceFileInf,
      edgeVisibility__);
}

flatbuffers::Offset<Phys> CreatePhys(flatbuffers::FlatBufferBuilder &_fbb, const PhysT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PhysT *Phys::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PhysT>(new PhysT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Phys::UnPackTo(PhysT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = aabb(); if (_e) _o->aabb = std::unique_ptr<WBIN::AABB>(new WBIN::AABB(*_e)); }
  { auto _e = position(); if (_e) _o->position = std::unique_ptr<WBIN::Float3ChannelT>(_e->UnPack(_resolver)); }
  { auto _e = materials(); if (_e) { _o->materials.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->materials[_i] = _e->Get(_i); } } }
  { auto _e = skin(); if (_e) _o->skin = std::unique_ptr<WBIN::SkinT>(_e->UnPack(_resolver)); }
  { auto _e = sourceFileInf(); if (_e) _o->sourceFileInf = std::unique_ptr<WBIN::SourceFileInfT>(_e->UnPack(_resolver)); }
  { auto _e = edgeVisibility(); if (_e) { _o->edgeVisibility.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->edgeVisibility[_i] = *_e->Get(_i); } } }
}

inline flatbuffers::Offset<Phys> Phys::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PhysT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePhys(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Phys> CreatePhys(flatbuffers::FlatBufferBuilder &_fbb, const PhysT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PhysT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _aabb = _o->aabb ? _o->aabb.get() : 0;
  auto _position = _o->position ? CreateFloat3Channel(_fbb, _o->position.get(), _rehasher) : 0;
  auto _materials = _o->materials.size() ? _fbb.CreateVector(_o->materials) : 0;
  auto _skin = _o->skin ? CreateSkin(_fbb, _o->skin.get(), _rehasher) : 0;
  auto _sourceFileInf = _o->sourceFileInf ? CreateSourceFileInf(_fbb, _o->sourceFileInf.get(), _rehasher) : 0;
  auto _edgeVisibility = _o->edgeVisibility.size() ? _fbb.CreateVectorOfStructs(_o->edgeVisibility) : 0;
  return WBIN::CreatePhys(
      _fbb,
      _aabb,
      _position,
      _materials,
      _skin,
      _sourceFileInf,
      _edgeVisibility);
}

inline const WBIN::Phys *GetPhys(const void *buf) {
  return flatbuffers::GetRoot<WBIN::Phys>(buf);
}

inline const WBIN::Phys *GetSizePrefixedPhys(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WBIN::Phys>(buf);
}

inline Phys *GetMutablePhys(void *buf) {
  return flatbuffers::GetMutableRoot<Phys>(buf);
}

inline bool VerifyPhysBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WBIN::Phys>(nullptr);
}

inline bool VerifySizePrefixedPhysBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WBIN::Phys>(nullptr);
}

inline void FinishPhysBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::Phys> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPhysBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::Phys> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WBIN::PhysT> UnPackPhys(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::PhysT>(GetPhys(buf)->UnPack(res));
}

inline std::unique_ptr<WBIN::PhysT> UnPackSizePrefixedPhys(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::PhysT>(GetSizePrefixedPhys(buf)->UnPack(res));
}

}  // namespace WBIN

#endif  // FLATBUFFERS_GENERATED_WPHYS_WBIN_H_
