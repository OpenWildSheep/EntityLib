// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WPVT_WBIN_H_
#define FLATBUFFERS_GENERATED_WPVT_WBIN_H_

#include "flatbuffers/flatbuffers.h"

#include "wbin_generated.h"

namespace WBIN {

struct Pivot;

struct PivotSkeleton;
struct PivotSkeletonBuilder;
struct PivotSkeletonT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Pivot FLATBUFFERS_FINAL_CLASS {
 private:
  WBIN::Float3 position_;
  WBIN::Float3 direction_;
  uint32_t parent_;
  uint32_t depth_;
  float bend_factor_;
  WBIN::Float2 growth_progress_range_;

 public:
  Pivot()
      : position_(),
        direction_(),
        parent_(0),
        depth_(0),
        bend_factor_(0),
        growth_progress_range_() {
  }
  Pivot(const WBIN::Float3 &_position, const WBIN::Float3 &_direction, uint32_t _parent, uint32_t _depth, float _bend_factor, const WBIN::Float2 &_growth_progress_range)
      : position_(_position),
        direction_(_direction),
        parent_(flatbuffers::EndianScalar(_parent)),
        depth_(flatbuffers::EndianScalar(_depth)),
        bend_factor_(flatbuffers::EndianScalar(_bend_factor)),
        growth_progress_range_(_growth_progress_range) {
  }
  const WBIN::Float3 &position() const {
    return position_;
  }
  WBIN::Float3 &mutable_position() {
    return position_;
  }
  const WBIN::Float3 &direction() const {
    return direction_;
  }
  WBIN::Float3 &mutable_direction() {
    return direction_;
  }
  uint32_t parent() const {
    return flatbuffers::EndianScalar(parent_);
  }
  void mutate_parent(uint32_t _parent) {
    flatbuffers::WriteScalar(&parent_, _parent);
  }
  uint32_t depth() const {
    return flatbuffers::EndianScalar(depth_);
  }
  void mutate_depth(uint32_t _depth) {
    flatbuffers::WriteScalar(&depth_, _depth);
  }
  float bend_factor() const {
    return flatbuffers::EndianScalar(bend_factor_);
  }
  void mutate_bend_factor(float _bend_factor) {
    flatbuffers::WriteScalar(&bend_factor_, _bend_factor);
  }
  const WBIN::Float2 &growth_progress_range() const {
    return growth_progress_range_;
  }
  WBIN::Float2 &mutable_growth_progress_range() {
    return growth_progress_range_;
  }
};
FLATBUFFERS_STRUCT_END(Pivot, 44);

struct PivotSkeletonT : public flatbuffers::NativeTable {
  typedef PivotSkeleton TableType;
  std::vector<WBIN::Pivot> pivots{};
};

struct PivotSkeleton FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PivotSkeletonT NativeTableType;
  typedef PivotSkeletonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIVOTS = 4
  };
  const flatbuffers::Vector<const WBIN::Pivot *> *pivots() const {
    return GetPointer<const flatbuffers::Vector<const WBIN::Pivot *> *>(VT_PIVOTS);
  }
  flatbuffers::Vector<const WBIN::Pivot *> *mutable_pivots() {
    return GetPointer<flatbuffers::Vector<const WBIN::Pivot *> *>(VT_PIVOTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_PIVOTS) &&
           verifier.VerifyVector(pivots()) &&
           verifier.EndTable();
  }
  PivotSkeletonT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PivotSkeletonT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PivotSkeleton> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PivotSkeletonT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PivotSkeletonBuilder {
  typedef PivotSkeleton Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pivots(flatbuffers::Offset<flatbuffers::Vector<const WBIN::Pivot *>> pivots) {
    fbb_.AddOffset(PivotSkeleton::VT_PIVOTS, pivots);
  }
  explicit PivotSkeletonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PivotSkeleton> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PivotSkeleton>(end);
    fbb_.Required(o, PivotSkeleton::VT_PIVOTS);
    return o;
  }
};

inline flatbuffers::Offset<PivotSkeleton> CreatePivotSkeleton(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const WBIN::Pivot *>> pivots = 0) {
  PivotSkeletonBuilder builder_(_fbb);
  builder_.add_pivots(pivots);
  return builder_.Finish();
}

inline flatbuffers::Offset<PivotSkeleton> CreatePivotSkeletonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<WBIN::Pivot> *pivots = nullptr) {
  auto pivots__ = pivots ? _fbb.CreateVectorOfStructs<WBIN::Pivot>(*pivots) : 0;
  return WBIN::CreatePivotSkeleton(
      _fbb,
      pivots__);
}

flatbuffers::Offset<PivotSkeleton> CreatePivotSkeleton(flatbuffers::FlatBufferBuilder &_fbb, const PivotSkeletonT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PivotSkeletonT *PivotSkeleton::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PivotSkeletonT>(new PivotSkeletonT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PivotSkeleton::UnPackTo(PivotSkeletonT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pivots(); if (_e) { _o->pivots.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->pivots[_i] = *_e->Get(_i); } } }
}

inline flatbuffers::Offset<PivotSkeleton> PivotSkeleton::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PivotSkeletonT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePivotSkeleton(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PivotSkeleton> CreatePivotSkeleton(flatbuffers::FlatBufferBuilder &_fbb, const PivotSkeletonT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PivotSkeletonT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pivots = _fbb.CreateVectorOfStructs(_o->pivots);
  return WBIN::CreatePivotSkeleton(
      _fbb,
      _pivots);
}

inline const WBIN::PivotSkeleton *GetPivotSkeleton(const void *buf) {
  return flatbuffers::GetRoot<WBIN::PivotSkeleton>(buf);
}

inline const WBIN::PivotSkeleton *GetSizePrefixedPivotSkeleton(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WBIN::PivotSkeleton>(buf);
}

inline PivotSkeleton *GetMutablePivotSkeleton(void *buf) {
  return flatbuffers::GetMutableRoot<PivotSkeleton>(buf);
}

inline bool VerifyPivotSkeletonBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WBIN::PivotSkeleton>(nullptr);
}

inline bool VerifySizePrefixedPivotSkeletonBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WBIN::PivotSkeleton>(nullptr);
}

inline void FinishPivotSkeletonBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::PivotSkeleton> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPivotSkeletonBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::PivotSkeleton> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WBIN::PivotSkeletonT> UnPackPivotSkeleton(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::PivotSkeletonT>(GetPivotSkeleton(buf)->UnPack(res));
}

inline std::unique_ptr<WBIN::PivotSkeletonT> UnPackSizePrefixedPivotSkeleton(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::PivotSkeletonT>(GetSizePrefixedPivotSkeleton(buf)->UnPack(res));
}

}  // namespace WBIN

#endif  // FLATBUFFERS_GENERATED_WPVT_WBIN_H_
