// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WTSO_WBIN_H_
#define FLATBUFFERS_GENERATED_WTSO_WBIN_H_

#include "flatbuffers/flatbuffers.h"

#include "wbin_generated.h"

namespace WBIN {

struct TSO;
struct TSOBuilder;
struct TSOT;

struct TSOT : public flatbuffers::NativeTable {
  typedef TSO TableType;
  std::unique_ptr<WBIN::Float3ChannelT> position;
  TSOT() {
  }
};

struct TSO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TSOT NativeTableType;
  typedef TSOBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4
  };
  const WBIN::Float3Channel *position() const {
    return GetPointer<const WBIN::Float3Channel *>(VT_POSITION);
  }
  WBIN::Float3Channel *mutable_position() {
    return GetPointer<WBIN::Float3Channel *>(VT_POSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           verifier.EndTable();
  }
  TSOT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TSOT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TSO> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TSOT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TSOBuilder {
  typedef TSO Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(flatbuffers::Offset<WBIN::Float3Channel> position) {
    fbb_.AddOffset(TSO::VT_POSITION, position);
  }
  explicit TSOBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TSOBuilder &operator=(const TSOBuilder &);
  flatbuffers::Offset<TSO> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TSO>(end);
    fbb_.Required(o, TSO::VT_POSITION);
    return o;
  }
};

inline flatbuffers::Offset<TSO> CreateTSO(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<WBIN::Float3Channel> position = 0) {
  TSOBuilder builder_(_fbb);
  builder_.add_position(position);
  return builder_.Finish();
}

flatbuffers::Offset<TSO> CreateTSO(flatbuffers::FlatBufferBuilder &_fbb, const TSOT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TSOT *TSO::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<WBIN::TSOT> _o = std::unique_ptr<WBIN::TSOT>(new TSOT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TSO::UnPackTo(TSOT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = position(); if (_e) _o->position = std::unique_ptr<WBIN::Float3ChannelT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<TSO> TSO::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TSOT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTSO(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TSO> CreateTSO(flatbuffers::FlatBufferBuilder &_fbb, const TSOT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TSOT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _position = _o->position ? CreateFloat3Channel(_fbb, _o->position.get(), _rehasher) : 0;
  return WBIN::CreateTSO(
      _fbb,
      _position);
}

inline const WBIN::TSO *GetTSO(const void *buf) {
  return flatbuffers::GetRoot<WBIN::TSO>(buf);
}

inline const WBIN::TSO *GetSizePrefixedTSO(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WBIN::TSO>(buf);
}

inline TSO *GetMutableTSO(void *buf) {
  return flatbuffers::GetMutableRoot<TSO>(buf);
}

inline bool VerifyTSOBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WBIN::TSO>(nullptr);
}

inline bool VerifySizePrefixedTSOBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WBIN::TSO>(nullptr);
}

inline void FinishTSOBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::TSO> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTSOBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::TSO> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WBIN::TSOT> UnPackTSO(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::TSOT>(GetTSO(buf)->UnPack(res));
}

inline std::unique_ptr<WBIN::TSOT> UnPackSizePrefixedTSO(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::TSOT>(GetSizePrefixedTSO(buf)->UnPack(res));
}

}  // namespace WBIN

#endif  // FLATBUFFERS_GENERATED_WTSO_WBIN_H_
