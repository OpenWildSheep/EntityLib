// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WVIS_WBIN_H_
#define FLATBUFFERS_GENERATED_WVIS_WBIN_H_

#include "flatbuffers/flatbuffers.h"

#include "wbin_generated.h"

namespace WBIN {

struct MaterialRef;
struct MaterialRefBuilder;
struct MaterialRefT;

struct Vis;
struct VisBuilder;
struct VisT;

struct MaterialRefT : public flatbuffers::NativeTable {
  typedef MaterialRef TableType;
  std::string matName;
  std::string matLuaSource;
  std::string matLuaTemplate;
  std::string diffuseTexPath;
  std::string normalTexPath;
  std::string roughTexMapPath;
  std::string cavityTexMapPath;
  std::string metalTexMapPath;
  std::string translucencyTexPath;
  std::string opacityTexPath;
  MaterialRefT() {
  }
};

struct MaterialRef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MaterialRefT NativeTableType;
  typedef MaterialRefBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MATNAME = 4,
    VT_MATLUASOURCE = 6,
    VT_MATLUATEMPLATE = 8,
    VT_DIFFUSETEXPATH = 10,
    VT_NORMALTEXPATH = 12,
    VT_ROUGHTEXMAPPATH = 14,
    VT_CAVITYTEXMAPPATH = 16,
    VT_METALTEXMAPPATH = 18,
    VT_TRANSLUCENCYTEXPATH = 20,
    VT_OPACITYTEXPATH = 22
  };
  const flatbuffers::String *matName() const {
    return GetPointer<const flatbuffers::String *>(VT_MATNAME);
  }
  flatbuffers::String *mutable_matName() {
    return GetPointer<flatbuffers::String *>(VT_MATNAME);
  }
  const flatbuffers::String *matLuaSource() const {
    return GetPointer<const flatbuffers::String *>(VT_MATLUASOURCE);
  }
  flatbuffers::String *mutable_matLuaSource() {
    return GetPointer<flatbuffers::String *>(VT_MATLUASOURCE);
  }
  const flatbuffers::String *matLuaTemplate() const {
    return GetPointer<const flatbuffers::String *>(VT_MATLUATEMPLATE);
  }
  flatbuffers::String *mutable_matLuaTemplate() {
    return GetPointer<flatbuffers::String *>(VT_MATLUATEMPLATE);
  }
  const flatbuffers::String *diffuseTexPath() const {
    return GetPointer<const flatbuffers::String *>(VT_DIFFUSETEXPATH);
  }
  flatbuffers::String *mutable_diffuseTexPath() {
    return GetPointer<flatbuffers::String *>(VT_DIFFUSETEXPATH);
  }
  const flatbuffers::String *normalTexPath() const {
    return GetPointer<const flatbuffers::String *>(VT_NORMALTEXPATH);
  }
  flatbuffers::String *mutable_normalTexPath() {
    return GetPointer<flatbuffers::String *>(VT_NORMALTEXPATH);
  }
  const flatbuffers::String *roughTexMapPath() const {
    return GetPointer<const flatbuffers::String *>(VT_ROUGHTEXMAPPATH);
  }
  flatbuffers::String *mutable_roughTexMapPath() {
    return GetPointer<flatbuffers::String *>(VT_ROUGHTEXMAPPATH);
  }
  const flatbuffers::String *cavityTexMapPath() const {
    return GetPointer<const flatbuffers::String *>(VT_CAVITYTEXMAPPATH);
  }
  flatbuffers::String *mutable_cavityTexMapPath() {
    return GetPointer<flatbuffers::String *>(VT_CAVITYTEXMAPPATH);
  }
  const flatbuffers::String *metalTexMapPath() const {
    return GetPointer<const flatbuffers::String *>(VT_METALTEXMAPPATH);
  }
  flatbuffers::String *mutable_metalTexMapPath() {
    return GetPointer<flatbuffers::String *>(VT_METALTEXMAPPATH);
  }
  const flatbuffers::String *translucencyTexPath() const {
    return GetPointer<const flatbuffers::String *>(VT_TRANSLUCENCYTEXPATH);
  }
  flatbuffers::String *mutable_translucencyTexPath() {
    return GetPointer<flatbuffers::String *>(VT_TRANSLUCENCYTEXPATH);
  }
  const flatbuffers::String *opacityTexPath() const {
    return GetPointer<const flatbuffers::String *>(VT_OPACITYTEXPATH);
  }
  flatbuffers::String *mutable_opacityTexPath() {
    return GetPointer<flatbuffers::String *>(VT_OPACITYTEXPATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MATNAME) &&
           verifier.VerifyString(matName()) &&
           VerifyOffset(verifier, VT_MATLUASOURCE) &&
           verifier.VerifyString(matLuaSource()) &&
           VerifyOffset(verifier, VT_MATLUATEMPLATE) &&
           verifier.VerifyString(matLuaTemplate()) &&
           VerifyOffset(verifier, VT_DIFFUSETEXPATH) &&
           verifier.VerifyString(diffuseTexPath()) &&
           VerifyOffset(verifier, VT_NORMALTEXPATH) &&
           verifier.VerifyString(normalTexPath()) &&
           VerifyOffset(verifier, VT_ROUGHTEXMAPPATH) &&
           verifier.VerifyString(roughTexMapPath()) &&
           VerifyOffset(verifier, VT_CAVITYTEXMAPPATH) &&
           verifier.VerifyString(cavityTexMapPath()) &&
           VerifyOffset(verifier, VT_METALTEXMAPPATH) &&
           verifier.VerifyString(metalTexMapPath()) &&
           VerifyOffset(verifier, VT_TRANSLUCENCYTEXPATH) &&
           verifier.VerifyString(translucencyTexPath()) &&
           VerifyOffset(verifier, VT_OPACITYTEXPATH) &&
           verifier.VerifyString(opacityTexPath()) &&
           verifier.EndTable();
  }
  MaterialRefT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MaterialRefT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MaterialRef> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MaterialRefT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MaterialRefBuilder {
  typedef MaterialRef Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_matName(flatbuffers::Offset<flatbuffers::String> matName) {
    fbb_.AddOffset(MaterialRef::VT_MATNAME, matName);
  }
  void add_matLuaSource(flatbuffers::Offset<flatbuffers::String> matLuaSource) {
    fbb_.AddOffset(MaterialRef::VT_MATLUASOURCE, matLuaSource);
  }
  void add_matLuaTemplate(flatbuffers::Offset<flatbuffers::String> matLuaTemplate) {
    fbb_.AddOffset(MaterialRef::VT_MATLUATEMPLATE, matLuaTemplate);
  }
  void add_diffuseTexPath(flatbuffers::Offset<flatbuffers::String> diffuseTexPath) {
    fbb_.AddOffset(MaterialRef::VT_DIFFUSETEXPATH, diffuseTexPath);
  }
  void add_normalTexPath(flatbuffers::Offset<flatbuffers::String> normalTexPath) {
    fbb_.AddOffset(MaterialRef::VT_NORMALTEXPATH, normalTexPath);
  }
  void add_roughTexMapPath(flatbuffers::Offset<flatbuffers::String> roughTexMapPath) {
    fbb_.AddOffset(MaterialRef::VT_ROUGHTEXMAPPATH, roughTexMapPath);
  }
  void add_cavityTexMapPath(flatbuffers::Offset<flatbuffers::String> cavityTexMapPath) {
    fbb_.AddOffset(MaterialRef::VT_CAVITYTEXMAPPATH, cavityTexMapPath);
  }
  void add_metalTexMapPath(flatbuffers::Offset<flatbuffers::String> metalTexMapPath) {
    fbb_.AddOffset(MaterialRef::VT_METALTEXMAPPATH, metalTexMapPath);
  }
  void add_translucencyTexPath(flatbuffers::Offset<flatbuffers::String> translucencyTexPath) {
    fbb_.AddOffset(MaterialRef::VT_TRANSLUCENCYTEXPATH, translucencyTexPath);
  }
  void add_opacityTexPath(flatbuffers::Offset<flatbuffers::String> opacityTexPath) {
    fbb_.AddOffset(MaterialRef::VT_OPACITYTEXPATH, opacityTexPath);
  }
  explicit MaterialRefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialRefBuilder &operator=(const MaterialRefBuilder &);
  flatbuffers::Offset<MaterialRef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MaterialRef>(end);
    return o;
  }
};

inline flatbuffers::Offset<MaterialRef> CreateMaterialRef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> matName = 0,
    flatbuffers::Offset<flatbuffers::String> matLuaSource = 0,
    flatbuffers::Offset<flatbuffers::String> matLuaTemplate = 0,
    flatbuffers::Offset<flatbuffers::String> diffuseTexPath = 0,
    flatbuffers::Offset<flatbuffers::String> normalTexPath = 0,
    flatbuffers::Offset<flatbuffers::String> roughTexMapPath = 0,
    flatbuffers::Offset<flatbuffers::String> cavityTexMapPath = 0,
    flatbuffers::Offset<flatbuffers::String> metalTexMapPath = 0,
    flatbuffers::Offset<flatbuffers::String> translucencyTexPath = 0,
    flatbuffers::Offset<flatbuffers::String> opacityTexPath = 0) {
  MaterialRefBuilder builder_(_fbb);
  builder_.add_opacityTexPath(opacityTexPath);
  builder_.add_translucencyTexPath(translucencyTexPath);
  builder_.add_metalTexMapPath(metalTexMapPath);
  builder_.add_cavityTexMapPath(cavityTexMapPath);
  builder_.add_roughTexMapPath(roughTexMapPath);
  builder_.add_normalTexPath(normalTexPath);
  builder_.add_diffuseTexPath(diffuseTexPath);
  builder_.add_matLuaTemplate(matLuaTemplate);
  builder_.add_matLuaSource(matLuaSource);
  builder_.add_matName(matName);
  return builder_.Finish();
}

inline flatbuffers::Offset<MaterialRef> CreateMaterialRefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *matName = nullptr,
    const char *matLuaSource = nullptr,
    const char *matLuaTemplate = nullptr,
    const char *diffuseTexPath = nullptr,
    const char *normalTexPath = nullptr,
    const char *roughTexMapPath = nullptr,
    const char *cavityTexMapPath = nullptr,
    const char *metalTexMapPath = nullptr,
    const char *translucencyTexPath = nullptr,
    const char *opacityTexPath = nullptr) {
  auto matName__ = matName ? _fbb.CreateString(matName) : 0;
  auto matLuaSource__ = matLuaSource ? _fbb.CreateString(matLuaSource) : 0;
  auto matLuaTemplate__ = matLuaTemplate ? _fbb.CreateString(matLuaTemplate) : 0;
  auto diffuseTexPath__ = diffuseTexPath ? _fbb.CreateString(diffuseTexPath) : 0;
  auto normalTexPath__ = normalTexPath ? _fbb.CreateString(normalTexPath) : 0;
  auto roughTexMapPath__ = roughTexMapPath ? _fbb.CreateString(roughTexMapPath) : 0;
  auto cavityTexMapPath__ = cavityTexMapPath ? _fbb.CreateString(cavityTexMapPath) : 0;
  auto metalTexMapPath__ = metalTexMapPath ? _fbb.CreateString(metalTexMapPath) : 0;
  auto translucencyTexPath__ = translucencyTexPath ? _fbb.CreateString(translucencyTexPath) : 0;
  auto opacityTexPath__ = opacityTexPath ? _fbb.CreateString(opacityTexPath) : 0;
  return WBIN::CreateMaterialRef(
      _fbb,
      matName__,
      matLuaSource__,
      matLuaTemplate__,
      diffuseTexPath__,
      normalTexPath__,
      roughTexMapPath__,
      cavityTexMapPath__,
      metalTexMapPath__,
      translucencyTexPath__,
      opacityTexPath__);
}

flatbuffers::Offset<MaterialRef> CreateMaterialRef(flatbuffers::FlatBufferBuilder &_fbb, const MaterialRefT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct VisT : public flatbuffers::NativeTable {
  typedef Vis TableType;
  std::unique_ptr<WBIN::AABB> aabb;
  std::unique_ptr<WBIN::Float3ChannelT> position;
  std::unique_ptr<WBIN::Float3ChannelT> normal;
  std::unique_ptr<WBIN::Float4ChannelT> color;
  std::vector<std::unique_ptr<WBIN::Float3ChannelT>> texcoord;
  std::vector<std::unique_ptr<WBIN::MaterialRefT>> materialBank;
  std::vector<uint32_t> materials;
  std::unique_ptr<WBIN::SkinT> skin;
  std::unique_ptr<WBIN::SourceFileInfT> sourceFileInf;
  VisT() {
  }
};

struct Vis FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VisT NativeTableType;
  typedef VisBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AABB = 4,
    VT_POSITION = 6,
    VT_NORMAL = 8,
    VT_COLOR = 10,
    VT_TEXCOORD = 12,
    VT_MATERIALBANK = 14,
    VT_MATERIALS = 16,
    VT_SKIN = 18,
    VT_SOURCEFILEINF = 20
  };
  const WBIN::AABB *aabb() const {
    return GetStruct<const WBIN::AABB *>(VT_AABB);
  }
  WBIN::AABB *mutable_aabb() {
    return GetStruct<WBIN::AABB *>(VT_AABB);
  }
  const WBIN::Float3Channel *position() const {
    return GetPointer<const WBIN::Float3Channel *>(VT_POSITION);
  }
  WBIN::Float3Channel *mutable_position() {
    return GetPointer<WBIN::Float3Channel *>(VT_POSITION);
  }
  const WBIN::Float3Channel *normal() const {
    return GetPointer<const WBIN::Float3Channel *>(VT_NORMAL);
  }
  WBIN::Float3Channel *mutable_normal() {
    return GetPointer<WBIN::Float3Channel *>(VT_NORMAL);
  }
  const WBIN::Float4Channel *color() const {
    return GetPointer<const WBIN::Float4Channel *>(VT_COLOR);
  }
  WBIN::Float4Channel *mutable_color() {
    return GetPointer<WBIN::Float4Channel *>(VT_COLOR);
  }
  const flatbuffers::Vector<flatbuffers::Offset<WBIN::Float3Channel>> *texcoord() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<WBIN::Float3Channel>> *>(VT_TEXCOORD);
  }
  flatbuffers::Vector<flatbuffers::Offset<WBIN::Float3Channel>> *mutable_texcoord() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<WBIN::Float3Channel>> *>(VT_TEXCOORD);
  }
  const flatbuffers::Vector<flatbuffers::Offset<WBIN::MaterialRef>> *materialBank() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<WBIN::MaterialRef>> *>(VT_MATERIALBANK);
  }
  flatbuffers::Vector<flatbuffers::Offset<WBIN::MaterialRef>> *mutable_materialBank() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<WBIN::MaterialRef>> *>(VT_MATERIALBANK);
  }
  const flatbuffers::Vector<uint32_t> *materials() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_MATERIALS);
  }
  flatbuffers::Vector<uint32_t> *mutable_materials() {
    return GetPointer<flatbuffers::Vector<uint32_t> *>(VT_MATERIALS);
  }
  const WBIN::Skin *skin() const {
    return GetPointer<const WBIN::Skin *>(VT_SKIN);
  }
  WBIN::Skin *mutable_skin() {
    return GetPointer<WBIN::Skin *>(VT_SKIN);
  }
  const WBIN::SourceFileInf *sourceFileInf() const {
    return GetPointer<const WBIN::SourceFileInf *>(VT_SOURCEFILEINF);
  }
  WBIN::SourceFileInf *mutable_sourceFileInf() {
    return GetPointer<WBIN::SourceFileInf *>(VT_SOURCEFILEINF);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<WBIN::AABB>(verifier, VT_AABB) &&
           VerifyOffsetRequired(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_NORMAL) &&
           verifier.VerifyTable(normal()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyOffset(verifier, VT_TEXCOORD) &&
           verifier.VerifyVector(texcoord()) &&
           verifier.VerifyVectorOfTables(texcoord()) &&
           VerifyOffsetRequired(verifier, VT_MATERIALBANK) &&
           verifier.VerifyVector(materialBank()) &&
           verifier.VerifyVectorOfTables(materialBank()) &&
           VerifyOffsetRequired(verifier, VT_MATERIALS) &&
           verifier.VerifyVector(materials()) &&
           VerifyOffset(verifier, VT_SKIN) &&
           verifier.VerifyTable(skin()) &&
           VerifyOffsetRequired(verifier, VT_SOURCEFILEINF) &&
           verifier.VerifyTable(sourceFileInf()) &&
           verifier.EndTable();
  }
  VisT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VisT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Vis> Pack(flatbuffers::FlatBufferBuilder &_fbb, const VisT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VisBuilder {
  typedef Vis Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_aabb(const WBIN::AABB *aabb) {
    fbb_.AddStruct(Vis::VT_AABB, aabb);
  }
  void add_position(flatbuffers::Offset<WBIN::Float3Channel> position) {
    fbb_.AddOffset(Vis::VT_POSITION, position);
  }
  void add_normal(flatbuffers::Offset<WBIN::Float3Channel> normal) {
    fbb_.AddOffset(Vis::VT_NORMAL, normal);
  }
  void add_color(flatbuffers::Offset<WBIN::Float4Channel> color) {
    fbb_.AddOffset(Vis::VT_COLOR, color);
  }
  void add_texcoord(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WBIN::Float3Channel>>> texcoord) {
    fbb_.AddOffset(Vis::VT_TEXCOORD, texcoord);
  }
  void add_materialBank(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WBIN::MaterialRef>>> materialBank) {
    fbb_.AddOffset(Vis::VT_MATERIALBANK, materialBank);
  }
  void add_materials(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> materials) {
    fbb_.AddOffset(Vis::VT_MATERIALS, materials);
  }
  void add_skin(flatbuffers::Offset<WBIN::Skin> skin) {
    fbb_.AddOffset(Vis::VT_SKIN, skin);
  }
  void add_sourceFileInf(flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf) {
    fbb_.AddOffset(Vis::VT_SOURCEFILEINF, sourceFileInf);
  }
  explicit VisBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VisBuilder &operator=(const VisBuilder &);
  flatbuffers::Offset<Vis> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Vis>(end);
    fbb_.Required(o, Vis::VT_POSITION);
    fbb_.Required(o, Vis::VT_MATERIALBANK);
    fbb_.Required(o, Vis::VT_MATERIALS);
    fbb_.Required(o, Vis::VT_SOURCEFILEINF);
    return o;
  }
};

inline flatbuffers::Offset<Vis> CreateVis(
    flatbuffers::FlatBufferBuilder &_fbb,
    const WBIN::AABB *aabb = 0,
    flatbuffers::Offset<WBIN::Float3Channel> position = 0,
    flatbuffers::Offset<WBIN::Float3Channel> normal = 0,
    flatbuffers::Offset<WBIN::Float4Channel> color = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WBIN::Float3Channel>>> texcoord = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WBIN::MaterialRef>>> materialBank = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> materials = 0,
    flatbuffers::Offset<WBIN::Skin> skin = 0,
    flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf = 0) {
  VisBuilder builder_(_fbb);
  builder_.add_sourceFileInf(sourceFileInf);
  builder_.add_skin(skin);
  builder_.add_materials(materials);
  builder_.add_materialBank(materialBank);
  builder_.add_texcoord(texcoord);
  builder_.add_color(color);
  builder_.add_normal(normal);
  builder_.add_position(position);
  builder_.add_aabb(aabb);
  return builder_.Finish();
}

inline flatbuffers::Offset<Vis> CreateVisDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const WBIN::AABB *aabb = 0,
    flatbuffers::Offset<WBIN::Float3Channel> position = 0,
    flatbuffers::Offset<WBIN::Float3Channel> normal = 0,
    flatbuffers::Offset<WBIN::Float4Channel> color = 0,
    const std::vector<flatbuffers::Offset<WBIN::Float3Channel>> *texcoord = nullptr,
    const std::vector<flatbuffers::Offset<WBIN::MaterialRef>> *materialBank = nullptr,
    const std::vector<uint32_t> *materials = nullptr,
    flatbuffers::Offset<WBIN::Skin> skin = 0,
    flatbuffers::Offset<WBIN::SourceFileInf> sourceFileInf = 0) {
  auto texcoord__ = texcoord ? _fbb.CreateVector<flatbuffers::Offset<WBIN::Float3Channel>>(*texcoord) : 0;
  auto materialBank__ = materialBank ? _fbb.CreateVector<flatbuffers::Offset<WBIN::MaterialRef>>(*materialBank) : 0;
  auto materials__ = materials ? _fbb.CreateVector<uint32_t>(*materials) : 0;
  return WBIN::CreateVis(
      _fbb,
      aabb,
      position,
      normal,
      color,
      texcoord__,
      materialBank__,
      materials__,
      skin,
      sourceFileInf);
}

flatbuffers::Offset<Vis> CreateVis(flatbuffers::FlatBufferBuilder &_fbb, const VisT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MaterialRefT *MaterialRef::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<WBIN::MaterialRefT> _o = std::unique_ptr<WBIN::MaterialRefT>(new MaterialRefT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MaterialRef::UnPackTo(MaterialRefT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = matName(); if (_e) _o->matName = _e->str(); }
  { auto _e = matLuaSource(); if (_e) _o->matLuaSource = _e->str(); }
  { auto _e = matLuaTemplate(); if (_e) _o->matLuaTemplate = _e->str(); }
  { auto _e = diffuseTexPath(); if (_e) _o->diffuseTexPath = _e->str(); }
  { auto _e = normalTexPath(); if (_e) _o->normalTexPath = _e->str(); }
  { auto _e = roughTexMapPath(); if (_e) _o->roughTexMapPath = _e->str(); }
  { auto _e = cavityTexMapPath(); if (_e) _o->cavityTexMapPath = _e->str(); }
  { auto _e = metalTexMapPath(); if (_e) _o->metalTexMapPath = _e->str(); }
  { auto _e = translucencyTexPath(); if (_e) _o->translucencyTexPath = _e->str(); }
  { auto _e = opacityTexPath(); if (_e) _o->opacityTexPath = _e->str(); }
}

inline flatbuffers::Offset<MaterialRef> MaterialRef::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MaterialRefT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMaterialRef(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MaterialRef> CreateMaterialRef(flatbuffers::FlatBufferBuilder &_fbb, const MaterialRefT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MaterialRefT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _matName = _o->matName.empty() ? 0 : _fbb.CreateString(_o->matName);
  auto _matLuaSource = _o->matLuaSource.empty() ? 0 : _fbb.CreateString(_o->matLuaSource);
  auto _matLuaTemplate = _o->matLuaTemplate.empty() ? 0 : _fbb.CreateString(_o->matLuaTemplate);
  auto _diffuseTexPath = _o->diffuseTexPath.empty() ? 0 : _fbb.CreateString(_o->diffuseTexPath);
  auto _normalTexPath = _o->normalTexPath.empty() ? 0 : _fbb.CreateString(_o->normalTexPath);
  auto _roughTexMapPath = _o->roughTexMapPath.empty() ? 0 : _fbb.CreateString(_o->roughTexMapPath);
  auto _cavityTexMapPath = _o->cavityTexMapPath.empty() ? 0 : _fbb.CreateString(_o->cavityTexMapPath);
  auto _metalTexMapPath = _o->metalTexMapPath.empty() ? 0 : _fbb.CreateString(_o->metalTexMapPath);
  auto _translucencyTexPath = _o->translucencyTexPath.empty() ? 0 : _fbb.CreateString(_o->translucencyTexPath);
  auto _opacityTexPath = _o->opacityTexPath.empty() ? 0 : _fbb.CreateString(_o->opacityTexPath);
  return WBIN::CreateMaterialRef(
      _fbb,
      _matName,
      _matLuaSource,
      _matLuaTemplate,
      _diffuseTexPath,
      _normalTexPath,
      _roughTexMapPath,
      _cavityTexMapPath,
      _metalTexMapPath,
      _translucencyTexPath,
      _opacityTexPath);
}

inline VisT *Vis::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<WBIN::VisT> _o = std::unique_ptr<WBIN::VisT>(new VisT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Vis::UnPackTo(VisT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = aabb(); if (_e) _o->aabb = std::unique_ptr<WBIN::AABB>(new WBIN::AABB(*_e)); }
  { auto _e = position(); if (_e) _o->position = std::unique_ptr<WBIN::Float3ChannelT>(_e->UnPack(_resolver)); }
  { auto _e = normal(); if (_e) _o->normal = std::unique_ptr<WBIN::Float3ChannelT>(_e->UnPack(_resolver)); }
  { auto _e = color(); if (_e) _o->color = std::unique_ptr<WBIN::Float4ChannelT>(_e->UnPack(_resolver)); }
  { auto _e = texcoord(); if (_e) { _o->texcoord.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->texcoord[_i] = std::unique_ptr<WBIN::Float3ChannelT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = materialBank(); if (_e) { _o->materialBank.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->materialBank[_i] = std::unique_ptr<WBIN::MaterialRefT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = materials(); if (_e) { _o->materials.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->materials[_i] = _e->Get(_i); } } }
  { auto _e = skin(); if (_e) _o->skin = std::unique_ptr<WBIN::SkinT>(_e->UnPack(_resolver)); }
  { auto _e = sourceFileInf(); if (_e) _o->sourceFileInf = std::unique_ptr<WBIN::SourceFileInfT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<Vis> Vis::Pack(flatbuffers::FlatBufferBuilder &_fbb, const VisT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVis(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Vis> CreateVis(flatbuffers::FlatBufferBuilder &_fbb, const VisT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const VisT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _aabb = _o->aabb ? _o->aabb.get() : 0;
  auto _position = _o->position ? CreateFloat3Channel(_fbb, _o->position.get(), _rehasher) : 0;
  auto _normal = _o->normal ? CreateFloat3Channel(_fbb, _o->normal.get(), _rehasher) : 0;
  auto _color = _o->color ? CreateFloat4Channel(_fbb, _o->color.get(), _rehasher) : 0;
  auto _texcoord = _o->texcoord.size() ? _fbb.CreateVector<flatbuffers::Offset<WBIN::Float3Channel>> (_o->texcoord.size(), [](size_t i, _VectorArgs *__va) { return CreateFloat3Channel(*__va->__fbb, __va->__o->texcoord[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _materialBank = _fbb.CreateVector<flatbuffers::Offset<WBIN::MaterialRef>> (_o->materialBank.size(), [](size_t i, _VectorArgs *__va) { return CreateMaterialRef(*__va->__fbb, __va->__o->materialBank[i].get(), __va->__rehasher); }, &_va );
  auto _materials = _fbb.CreateVector(_o->materials);
  auto _skin = _o->skin ? CreateSkin(_fbb, _o->skin.get(), _rehasher) : 0;
  auto _sourceFileInf = _o->sourceFileInf ? CreateSourceFileInf(_fbb, _o->sourceFileInf.get(), _rehasher) : 0;
  return WBIN::CreateVis(
      _fbb,
      _aabb,
      _position,
      _normal,
      _color,
      _texcoord,
      _materialBank,
      _materials,
      _skin,
      _sourceFileInf);
}

inline const WBIN::Vis *GetVis(const void *buf) {
  return flatbuffers::GetRoot<WBIN::Vis>(buf);
}

inline const WBIN::Vis *GetSizePrefixedVis(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WBIN::Vis>(buf);
}

inline Vis *GetMutableVis(void *buf) {
  return flatbuffers::GetMutableRoot<Vis>(buf);
}

inline bool VerifyVisBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WBIN::Vis>(nullptr);
}

inline bool VerifySizePrefixedVisBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WBIN::Vis>(nullptr);
}

inline void FinishVisBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::Vis> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVisBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WBIN::Vis> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<WBIN::VisT> UnPackVis(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::VisT>(GetVis(buf)->UnPack(res));
}

inline std::unique_ptr<WBIN::VisT> UnPackSizePrefixedVis(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<WBIN::VisT>(GetSizePrefixedVis(buf)->UnPack(res));
}

}  // namespace WBIN

#endif  // FLATBUFFERS_GENERATED_WVIS_WBIN_H_
