# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MAX

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Keyframe(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Keyframe()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKeyframe(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Keyframe
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Keyframe
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Keyframe
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Keyframe
    def TanIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Keyframe
    def TanOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Keyframe
    def TanTypeIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 7

    # Keyframe
    def TanTypeOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 7

def Start(builder): builder.StartObject(6)
def KeyframeStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddTime(builder, time): builder.PrependFloat32Slot(0, time, 0.0)
def KeyframeAddTime(builder, time):
    """This method is deprecated. Please switch to AddTime."""
    return AddTime(builder, time)
def AddValue(builder, value): builder.PrependFloat32Slot(1, value, 0.0)
def KeyframeAddValue(builder, value):
    """This method is deprecated. Please switch to AddValue."""
    return AddValue(builder, value)
def AddTanIn(builder, tanIn): builder.PrependFloat32Slot(2, tanIn, 0.0)
def KeyframeAddTanIn(builder, tanIn):
    """This method is deprecated. Please switch to AddTanIn."""
    return AddTanIn(builder, tanIn)
def AddTanOut(builder, tanOut): builder.PrependFloat32Slot(3, tanOut, 0.0)
def KeyframeAddTanOut(builder, tanOut):
    """This method is deprecated. Please switch to AddTanOut."""
    return AddTanOut(builder, tanOut)
def AddTanTypeIn(builder, tanTypeIn): builder.PrependInt8Slot(4, tanTypeIn, 7)
def KeyframeAddTanTypeIn(builder, tanTypeIn):
    """This method is deprecated. Please switch to AddTanTypeIn."""
    return AddTanTypeIn(builder, tanTypeIn)
def AddTanTypeOut(builder, tanTypeOut): builder.PrependInt8Slot(5, tanTypeOut, 7)
def KeyframeAddTanTypeOut(builder, tanTypeOut):
    """This method is deprecated. Please switch to AddTanTypeOut."""
    return AddTanTypeOut(builder, tanTypeOut)
def End(builder): return builder.EndObject()
def KeyframeEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class KeyframeT(object):

    # KeyframeT
    def __init__(self):
        self.time = 0.0  # type: float
        self.value = 0.0  # type: float
        self.tanIn = 0.0  # type: float
        self.tanOut = 0.0  # type: float
        self.tanTypeIn = 7  # type: int
        self.tanTypeOut = 7  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        keyframe = Keyframe()
        keyframe.Init(buf, pos)
        return cls.InitFromObj(keyframe)

    @classmethod
    def InitFromObj(cls, keyframe):
        x = KeyframeT()
        x._UnPack(keyframe)
        return x

    # KeyframeT
    def _UnPack(self, keyframe):
        if keyframe is None:
            return
        self.time = keyframe.Time()
        self.value = keyframe.Value()
        self.tanIn = keyframe.TanIn()
        self.tanOut = keyframe.TanOut()
        self.tanTypeIn = keyframe.TanTypeIn()
        self.tanTypeOut = keyframe.TanTypeOut()

    # KeyframeT
    def Pack(self, builder):
        Start(builder)
        AddTime(builder, self.time)
        AddValue(builder, self.value)
        AddTanIn(builder, self.tanIn)
        AddTanOut(builder, self.tanOut)
        AddTanTypeIn(builder, self.tanTypeIn)
        AddTanTypeOut(builder, self.tanTypeOut)
        keyframe = End(builder)
        return keyframe
