# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Animation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Animation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAnimation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Animation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Animation
    def FrameRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Animation
    def BoneAnimations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.BoneAnimation import BoneAnimation
            obj = BoneAnimation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Animation
    def BoneAnimationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Animation
    def BoneAnimationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def AnimationStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFrameRate(builder, frameRate): builder.PrependFloat32Slot(0, frameRate, 0.0)
def AnimationAddFrameRate(builder, frameRate):
    """This method is deprecated. Please switch to AddFrameRate."""
    return AddFrameRate(builder, frameRate)
def AddBoneAnimations(builder, boneAnimations): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(boneAnimations), 0)
def AnimationAddBoneAnimations(builder, boneAnimations):
    """This method is deprecated. Please switch to AddBoneAnimations."""
    return AddBoneAnimations(builder, boneAnimations)
def StartBoneAnimationsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AnimationStartBoneAnimationsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartBoneAnimationsVector(builder, numElems)
def End(builder): return builder.EndObject()
def AnimationEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.BoneAnimation
try:
    from typing import List
except:
    pass

class AnimationT(object):

    # AnimationT
    def __init__(self):
        self.frameRate = 0.0  # type: float
        self.boneAnimations = None  # type: List[WBIN.BoneAnimation.BoneAnimationT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        animation = Animation()
        animation.Init(buf, pos)
        return cls.InitFromObj(animation)

    @classmethod
    def InitFromObj(cls, animation):
        x = AnimationT()
        x._UnPack(animation)
        return x

    # AnimationT
    def _UnPack(self, animation):
        if animation is None:
            return
        self.frameRate = animation.FrameRate()
        if not animation.BoneAnimationsIsNone():
            self.boneAnimations = []
            for i in range(animation.BoneAnimationsLength()):
                if animation.BoneAnimations(i) is None:
                    self.boneAnimations.append(None)
                else:
                    boneAnimation_ = WBIN.BoneAnimation.BoneAnimationT.InitFromObj(animation.BoneAnimations(i))
                    self.boneAnimations.append(boneAnimation_)

    # AnimationT
    def Pack(self, builder):
        if self.boneAnimations is not None:
            boneAnimationslist = []
            for i in range(len(self.boneAnimations)):
                boneAnimationslist.append(self.boneAnimations[i].Pack(builder))
            StartBoneAnimationsVector(builder, len(self.boneAnimations))
            for i in reversed(range(len(self.boneAnimations))):
                builder.PrependUOffsetTRelative(boneAnimationslist[i])
            boneAnimations = builder.EndVector()
        Start(builder)
        AddFrameRate(builder, self.frameRate)
        if self.boneAnimations is not None:
            AddBoneAnimations(builder, boneAnimations)
        animation = End(builder)
        return animation
