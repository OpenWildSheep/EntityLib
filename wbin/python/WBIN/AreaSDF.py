# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AreaSDF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AreaSDF()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAreaSDF(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AreaSDF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AreaSDF
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AreaSDF
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # AreaSDF
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AreaSDF
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # AreaSDF
    def ValueByteSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 4

    # AreaSDF
    def Resolution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.UInt3 import UInt3
            obj = UInt3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AreaSDF
    def OriginOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.Float3 import Float3
            obj = Float3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AreaSDF
    def VoxelSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(5)
def AreaSDFStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AreaSDFAddValue(builder, value):
    """This method is deprecated. Please switch to AddValue."""
    return AddValue(builder, value)
def StartValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def AreaSDFStartValueVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartValueVector(builder, numElems)
def AddValueByteSize(builder, valueByteSize): builder.PrependInt8Slot(1, valueByteSize, 4)
def AreaSDFAddValueByteSize(builder, valueByteSize):
    """This method is deprecated. Please switch to AddValueByteSize."""
    return AddValueByteSize(builder, valueByteSize)
def AddResolution(builder, resolution): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resolution), 0)
def AreaSDFAddResolution(builder, resolution):
    """This method is deprecated. Please switch to AddResolution."""
    return AddResolution(builder, resolution)
def AddOriginOffset(builder, originOffset): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(originOffset), 0)
def AreaSDFAddOriginOffset(builder, originOffset):
    """This method is deprecated. Please switch to AddOriginOffset."""
    return AddOriginOffset(builder, originOffset)
def AddVoxelSize(builder, voxelSize): builder.PrependFloat32Slot(4, voxelSize, 0.0)
def AreaSDFAddVoxelSize(builder, voxelSize):
    """This method is deprecated. Please switch to AddVoxelSize."""
    return AddVoxelSize(builder, voxelSize)
def End(builder): return builder.EndObject()
def AreaSDFEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Float3
import WBIN.UInt3
try:
    from typing import List, Optional
except:
    pass

class AreaSDFT(object):

    # AreaSDFT
    def __init__(self):
        self.value = None  # type: List[int]
        self.valueByteSize = 4  # type: int
        self.resolution = None  # type: Optional[WBIN.UInt3.UInt3T]
        self.originOffset = None  # type: Optional[WBIN.Float3.Float3T]
        self.voxelSize = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        areaSDF = AreaSDF()
        areaSDF.Init(buf, pos)
        return cls.InitFromObj(areaSDF)

    @classmethod
    def InitFromObj(cls, areaSDF):
        x = AreaSDFT()
        x._UnPack(areaSDF)
        return x

    # AreaSDFT
    def _UnPack(self, areaSDF):
        if areaSDF is None:
            return
        if not areaSDF.ValueIsNone():
            if np is None:
                self.value = []
                for i in range(areaSDF.ValueLength()):
                    self.value.append(areaSDF.Value(i))
            else:
                self.value = areaSDF.ValueAsNumpy()
        self.valueByteSize = areaSDF.ValueByteSize()
        if areaSDF.Resolution() is not None:
            self.resolution = WBIN.UInt3.UInt3T.InitFromObj(areaSDF.Resolution())
        if areaSDF.OriginOffset() is not None:
            self.originOffset = WBIN.Float3.Float3T.InitFromObj(areaSDF.OriginOffset())
        self.voxelSize = areaSDF.VoxelSize()

    # AreaSDFT
    def Pack(self, builder):
        if self.value is not None:
            if np is not None and type(self.value) is np.ndarray:
                value = builder.CreateNumpyVector(self.value)
            else:
                StartValueVector(builder, len(self.value))
                for i in reversed(range(len(self.value))):
                    builder.PrependByte(self.value[i])
                value = builder.EndVector()
        Start(builder)
        if self.value is not None:
            AddValue(builder, value)
        AddValueByteSize(builder, self.valueByteSize)
        if self.resolution is not None:
            resolution = self.resolution.Pack(builder)
            AddResolution(builder, resolution)
        if self.originOffset is not None:
            originOffset = self.originOffset.Pack(builder)
            AddOriginOffset(builder, originOffset)
        AddVoxelSize(builder, self.voxelSize)
        areaSDF = End(builder)
        return areaSDF
