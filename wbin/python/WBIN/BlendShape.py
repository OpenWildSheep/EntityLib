# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BlendShape(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BlendShape()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBlendShape(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BlendShape
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BlendShape
    def TargetShapes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.TargetShape import TargetShape
            obj = TargetShape()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BlendShape
    def TargetShapesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BlendShape
    def TargetShapesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def BlendShapeStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddTargetShapes(builder, targetShapes): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(targetShapes), 0)
def BlendShapeAddTargetShapes(builder, targetShapes):
    """This method is deprecated. Please switch to AddTargetShapes."""
    return AddTargetShapes(builder, targetShapes)
def StartTargetShapesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BlendShapeStartTargetShapesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTargetShapesVector(builder, numElems)
def End(builder): return builder.EndObject()
def BlendShapeEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.TargetShape
try:
    from typing import List
except:
    pass

class BlendShapeT(object):

    # BlendShapeT
    def __init__(self):
        self.targetShapes = None  # type: List[WBIN.TargetShape.TargetShapeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        blendShape = BlendShape()
        blendShape.Init(buf, pos)
        return cls.InitFromObj(blendShape)

    @classmethod
    def InitFromObj(cls, blendShape):
        x = BlendShapeT()
        x._UnPack(blendShape)
        return x

    # BlendShapeT
    def _UnPack(self, blendShape):
        if blendShape is None:
            return
        if not blendShape.TargetShapesIsNone():
            self.targetShapes = []
            for i in range(blendShape.TargetShapesLength()):
                if blendShape.TargetShapes(i) is None:
                    self.targetShapes.append(None)
                else:
                    targetShape_ = WBIN.TargetShape.TargetShapeT.InitFromObj(blendShape.TargetShapes(i))
                    self.targetShapes.append(targetShape_)

    # BlendShapeT
    def Pack(self, builder):
        if self.targetShapes is not None:
            targetShapeslist = []
            for i in range(len(self.targetShapes)):
                targetShapeslist.append(self.targetShapes[i].Pack(builder))
            StartTargetShapesVector(builder, len(self.targetShapes))
            for i in reversed(range(len(self.targetShapes))):
                builder.PrependUOffsetTRelative(targetShapeslist[i])
            targetShapes = builder.EndVector()
        Start(builder)
        if self.targetShapes is not None:
            AddTargetShapes(builder, targetShapes)
        blendShape = End(builder)
        return blendShape
