# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BlendShapeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BlendShapeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBlendShapeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BlendShapeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BlendShapeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(1)
def BlendShapeDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def BlendShapeDataAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def End(builder): return builder.EndObject()
def BlendShapeDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class BlendShapeDataT(object):

    # BlendShapeDataT
    def __init__(self):
        self.name = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        blendShapeData = BlendShapeData()
        blendShapeData.Init(buf, pos)
        return cls.InitFromObj(blendShapeData)

    @classmethod
    def InitFromObj(cls, blendShapeData):
        x = BlendShapeDataT()
        x._UnPack(blendShapeData)
        return x

    # BlendShapeDataT
    def _UnPack(self, blendShapeData):
        if blendShapeData is None:
            return
        self.name = blendShapeData.Name()

    # BlendShapeDataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        Start(builder)
        if self.name is not None:
            AddName(builder, name)
        blendShapeData = End(builder)
        return blendShapeData
