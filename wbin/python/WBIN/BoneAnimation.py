# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BoneAnimation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoneAnimation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoneAnimation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BoneAnimation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoneAnimation
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BoneAnimation
    def Translations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from WBIN.Float3 import Float3
            obj = Float3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoneAnimation
    def TranslationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BoneAnimation
    def TranslationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # BoneAnimation
    def Orientations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from WBIN.Float4 import Float4
            obj = Float4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoneAnimation
    def OrientationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BoneAnimation
    def OrientationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # BoneAnimation
    def Scales(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from WBIN.Float3 import Float3
            obj = Float3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoneAnimation
    def ScalesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BoneAnimation
    def ScalesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Start(builder): builder.StartObject(4)
def BoneAnimationStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def BoneAnimationAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def AddTranslations(builder, translations): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(translations), 0)
def BoneAnimationAddTranslations(builder, translations):
    """This method is deprecated. Please switch to AddTranslations."""
    return AddTranslations(builder, translations)
def StartTranslationsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def BoneAnimationStartTranslationsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTranslationsVector(builder, numElems)
def AddOrientations(builder, orientations): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orientations), 0)
def BoneAnimationAddOrientations(builder, orientations):
    """This method is deprecated. Please switch to AddOrientations."""
    return AddOrientations(builder, orientations)
def StartOrientationsVector(builder, numElems): return builder.StartVector(16, numElems, 4)
def BoneAnimationStartOrientationsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartOrientationsVector(builder, numElems)
def AddScales(builder, scales): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scales), 0)
def BoneAnimationAddScales(builder, scales):
    """This method is deprecated. Please switch to AddScales."""
    return AddScales(builder, scales)
def StartScalesVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def BoneAnimationStartScalesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartScalesVector(builder, numElems)
def End(builder): return builder.EndObject()
def BoneAnimationEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Float3
import WBIN.Float4
try:
    from typing import List
except:
    pass

class BoneAnimationT(object):

    # BoneAnimationT
    def __init__(self):
        self.name = None  # type: str
        self.translations = None  # type: List[WBIN.Float3.Float3T]
        self.orientations = None  # type: List[WBIN.Float4.Float4T]
        self.scales = None  # type: List[WBIN.Float3.Float3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boneAnimation = BoneAnimation()
        boneAnimation.Init(buf, pos)
        return cls.InitFromObj(boneAnimation)

    @classmethod
    def InitFromObj(cls, boneAnimation):
        x = BoneAnimationT()
        x._UnPack(boneAnimation)
        return x

    # BoneAnimationT
    def _UnPack(self, boneAnimation):
        if boneAnimation is None:
            return
        self.name = boneAnimation.Name()
        if not boneAnimation.TranslationsIsNone():
            self.translations = []
            for i in range(boneAnimation.TranslationsLength()):
                if boneAnimation.Translations(i) is None:
                    self.translations.append(None)
                else:
                    float3_ = WBIN.Float3.Float3T.InitFromObj(boneAnimation.Translations(i))
                    self.translations.append(float3_)
        if not boneAnimation.OrientationsIsNone():
            self.orientations = []
            for i in range(boneAnimation.OrientationsLength()):
                if boneAnimation.Orientations(i) is None:
                    self.orientations.append(None)
                else:
                    float4_ = WBIN.Float4.Float4T.InitFromObj(boneAnimation.Orientations(i))
                    self.orientations.append(float4_)
        if not boneAnimation.ScalesIsNone():
            self.scales = []
            for i in range(boneAnimation.ScalesLength()):
                if boneAnimation.Scales(i) is None:
                    self.scales.append(None)
                else:
                    float3_ = WBIN.Float3.Float3T.InitFromObj(boneAnimation.Scales(i))
                    self.scales.append(float3_)

    # BoneAnimationT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.translations is not None:
            StartTranslationsVector(builder, len(self.translations))
            for i in reversed(range(len(self.translations))):
                self.translations[i].Pack(builder)
            translations = builder.EndVector()
        if self.orientations is not None:
            StartOrientationsVector(builder, len(self.orientations))
            for i in reversed(range(len(self.orientations))):
                self.orientations[i].Pack(builder)
            orientations = builder.EndVector()
        if self.scales is not None:
            StartScalesVector(builder, len(self.scales))
            for i in reversed(range(len(self.scales))):
                self.scales[i].Pack(builder)
            scales = builder.EndVector()
        Start(builder)
        if self.name is not None:
            AddName(builder, name)
        if self.translations is not None:
            AddTranslations(builder, translations)
        if self.orientations is not None:
            AddOrientations(builder, orientations)
        if self.scales is not None:
            AddScales(builder, scales)
        boneAnimation = End(builder)
        return boneAnimation
