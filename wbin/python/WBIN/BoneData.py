# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoneData
    def ParentBoneIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BoneData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(2)
def BoneDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddParentBoneIndex(builder, parentBoneIndex): builder.PrependInt32Slot(0, parentBoneIndex, 0)
def BoneDataAddParentBoneIndex(builder, parentBoneIndex):
    """This method is deprecated. Please switch to AddParentBoneIndex."""
    return AddParentBoneIndex(builder, parentBoneIndex)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def BoneDataAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def End(builder): return builder.EndObject()
def BoneDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class BoneDataT(object):

    # BoneDataT
    def __init__(self):
        self.parentBoneIndex = 0  # type: int
        self.name = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boneData = BoneData()
        boneData.Init(buf, pos)
        return cls.InitFromObj(boneData)

    @classmethod
    def InitFromObj(cls, boneData):
        x = BoneDataT()
        x._UnPack(boneData)
        return x

    # BoneDataT
    def _UnPack(self, boneData):
        if boneData is None:
            return
        self.parentBoneIndex = boneData.ParentBoneIndex()
        self.name = boneData.Name()

    # BoneDataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        Start(builder)
        AddParentBoneIndex(builder, self.parentBoneIndex)
        if self.name is not None:
            AddName(builder, name)
        boneData = End(builder)
        return boneData
