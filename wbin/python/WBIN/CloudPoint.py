# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CloudPoint(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 52

    # CloudPoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CloudPoint
    def NameIndex(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # CloudPoint
    def Matrix(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 4)
        return obj


def CreateCloudPoint(builder, nameIndex, matrix_values):
    builder.Prep(4, 52)
    builder.Prep(4, 48)
    for _idx0 in range(12 , 0, -1):
        builder.PrependFloat32(matrix_values[_idx0-1])
    builder.Pad(2)
    builder.PrependUint16(nameIndex)
    return builder.Offset()

import WBIN.Matrix43
try:
    from typing import Optional
except:
    pass

class CloudPointT(object):

    # CloudPointT
    def __init__(self):
        self.nameIndex = 0  # type: int
        self.matrix = None  # type: Optional[WBIN.Matrix43.Matrix43T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cloudPoint = CloudPoint()
        cloudPoint.Init(buf, pos)
        return cls.InitFromObj(cloudPoint)

    @classmethod
    def InitFromObj(cls, cloudPoint):
        x = CloudPointT()
        x._UnPack(cloudPoint)
        return x

    # CloudPointT
    def _UnPack(self, cloudPoint):
        if cloudPoint is None:
            return
        self.nameIndex = cloudPoint.NameIndex()
        if cloudPoint.Matrix(WBIN.Matrix43.Matrix43()) is not None:
            self.matrix = WBIN.Matrix43.Matrix43T.InitFromObj(cloudPoint.Matrix(WBIN.Matrix43.Matrix43()))

    # CloudPointT
    def Pack(self, builder):
        return CreateCloudPoint(builder, self.nameIndex, self.matrix.values)
