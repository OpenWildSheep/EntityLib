# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CloudPoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CloudPoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCloudPoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CloudPoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CloudPoint
    def NameIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # CloudPoint
    def Matrix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.Matrix43 import Matrix43
            obj = Matrix43()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(2)
def CloudPointStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddNameIndex(builder, nameIndex): builder.PrependUint16Slot(0, nameIndex, 0)
def CloudPointAddNameIndex(builder, nameIndex):
    """This method is deprecated. Please switch to AddNameIndex."""
    return AddNameIndex(builder, nameIndex)
def AddMatrix(builder, matrix): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(matrix), 0)
def CloudPointAddMatrix(builder, matrix):
    """This method is deprecated. Please switch to AddMatrix."""
    return AddMatrix(builder, matrix)
def End(builder): return builder.EndObject()
def CloudPointEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Matrix43
try:
    from typing import Optional
except:
    pass

class CloudPointT(object):

    # CloudPointT
    def __init__(self):
        self.nameIndex = 0  # type: int
        self.matrix = None  # type: Optional[WBIN.Matrix43.Matrix43T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cloudPoint = CloudPoint()
        cloudPoint.Init(buf, pos)
        return cls.InitFromObj(cloudPoint)

    @classmethod
    def InitFromObj(cls, cloudPoint):
        x = CloudPointT()
        x._UnPack(cloudPoint)
        return x

    # CloudPointT
    def _UnPack(self, cloudPoint):
        if cloudPoint is None:
            return
        self.nameIndex = cloudPoint.NameIndex()
        if cloudPoint.Matrix() is not None:
            self.matrix = WBIN.Matrix43.Matrix43T.InitFromObj(cloudPoint.Matrix())

    # CloudPointT
    def Pack(self, builder):
        Start(builder)
        AddNameIndex(builder, self.nameIndex)
        if self.matrix is not None:
            matrix = self.matrix.Pack(builder)
            AddMatrix(builder, matrix)
        cloudPoint = End(builder)
        return cloudPoint
