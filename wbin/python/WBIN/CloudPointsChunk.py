# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CloudPointsChunk(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CloudPointsChunk()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCloudPointsChunk(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CloudPointsChunk
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CloudPointsChunk
    def Coords(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.Int3 import Int3
            obj = Int3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CloudPointsChunk
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 52
            from WBIN.CloudPoint import CloudPoint
            obj = CloudPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CloudPointsChunk
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CloudPointsChunk
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def CloudPointsChunkStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCoords(builder, coords): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(coords), 0)
def CloudPointsChunkAddCoords(builder, coords):
    """This method is deprecated. Please switch to AddCoords."""
    return AddCoords(builder, coords)
def AddPoints(builder, points): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)
def CloudPointsChunkAddPoints(builder, points):
    """This method is deprecated. Please switch to AddPoints."""
    return AddPoints(builder, points)
def StartPointsVector(builder, numElems): return builder.StartVector(52, numElems, 4)
def CloudPointsChunkStartPointsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPointsVector(builder, numElems)
def End(builder): return builder.EndObject()
def CloudPointsChunkEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.CloudPoint
import WBIN.Int3
try:
    from typing import List, Optional
except:
    pass

class CloudPointsChunkT(object):

    # CloudPointsChunkT
    def __init__(self):
        self.coords = None  # type: Optional[WBIN.Int3.Int3T]
        self.points = None  # type: List[WBIN.CloudPoint.CloudPointT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cloudPointsChunk = CloudPointsChunk()
        cloudPointsChunk.Init(buf, pos)
        return cls.InitFromObj(cloudPointsChunk)

    @classmethod
    def InitFromObj(cls, cloudPointsChunk):
        x = CloudPointsChunkT()
        x._UnPack(cloudPointsChunk)
        return x

    # CloudPointsChunkT
    def _UnPack(self, cloudPointsChunk):
        if cloudPointsChunk is None:
            return
        if cloudPointsChunk.Coords() is not None:
            self.coords = WBIN.Int3.Int3T.InitFromObj(cloudPointsChunk.Coords())
        if not cloudPointsChunk.PointsIsNone():
            self.points = []
            for i in range(cloudPointsChunk.PointsLength()):
                if cloudPointsChunk.Points(i) is None:
                    self.points.append(None)
                else:
                    cloudPoint_ = WBIN.CloudPoint.CloudPointT.InitFromObj(cloudPointsChunk.Points(i))
                    self.points.append(cloudPoint_)

    # CloudPointsChunkT
    def Pack(self, builder):
        if self.points is not None:
            StartPointsVector(builder, len(self.points))
            for i in reversed(range(len(self.points))):
                self.points[i].Pack(builder)
            points = builder.EndVector()
        Start(builder)
        if self.coords is not None:
            coords = self.coords.Pack(builder)
            AddCoords(builder, coords)
        if self.points is not None:
            AddPoints(builder, points)
        cloudPointsChunk = End(builder)
        return cloudPointsChunk
