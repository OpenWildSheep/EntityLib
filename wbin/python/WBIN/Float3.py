# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Float3(object):
    __slots__ = ['_tab']

    # Float3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Float3
    def X(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Float3
    def Y(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Float3
    def Z(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateFloat3(builder, x, y, z):
    builder.Prep(4, 12)
    builder.PrependFloat32(z)
    builder.PrependFloat32(y)
    builder.PrependFloat32(x)
    return builder.Offset()


class Float3T(object):

    # Float3T
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        float3 = Float3()
        float3.Init(buf, pos)
        return cls.InitFromObj(float3)

    @classmethod
    def InitFromObj(cls, float3):
        x = Float3T()
        x._UnPack(float3)
        return x

    # Float3T
    def _UnPack(self, float3):
        if float3 is None:
            return
        self.x = float3.X()
        self.y = float3.Y()
        self.z = float3.Z()

    # Float3T
    def Pack(self, builder):
        return CreateFloat3(builder, self.x, self.y, self.z)
