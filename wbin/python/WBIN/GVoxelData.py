# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GVoxelData(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 4

    # GVoxelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GVoxelData
    def Data(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))

def CreateGVoxelData(builder, data):
    builder.Prep(4, 4)
    builder.PrependInt32(data)
    return builder.Offset()


class GVoxelDataT(object):

    # GVoxelDataT
    def __init__(self):
        self.data = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gVoxelData = GVoxelData()
        gVoxelData.Init(buf, pos)
        return cls.InitFromObj(gVoxelData)

    @classmethod
    def InitFromObj(cls, gVoxelData):
        x = GVoxelDataT()
        x._UnPack(gVoxelData)
        return x

    # GVoxelDataT
    def _UnPack(self, gVoxelData):
        if gVoxelData is None:
            return
        self.data = gVoxelData.Data()

    # GVoxelDataT
    def Pack(self, builder):
        return CreateGVoxelData(builder, self.data)
