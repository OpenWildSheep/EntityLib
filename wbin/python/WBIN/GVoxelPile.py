# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GVoxelPile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GVoxelPile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGVoxelPile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GVoxelPile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GVoxelPile
    def NbEmptyVoxels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GVoxelPile
    def Voxels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from WBIN.GVoxelData import GVoxelData
            obj = GVoxelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GVoxelPile
    def VoxelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GVoxelPile
    def VoxelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def GVoxelPileStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddNbEmptyVoxels(builder, nbEmptyVoxels): builder.PrependInt32Slot(0, nbEmptyVoxels, 0)
def GVoxelPileAddNbEmptyVoxels(builder, nbEmptyVoxels):
    """This method is deprecated. Please switch to AddNbEmptyVoxels."""
    return AddNbEmptyVoxels(builder, nbEmptyVoxels)
def AddVoxels(builder, voxels): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(voxels), 0)
def GVoxelPileAddVoxels(builder, voxels):
    """This method is deprecated. Please switch to AddVoxels."""
    return AddVoxels(builder, voxels)
def StartVoxelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GVoxelPileStartVoxelsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartVoxelsVector(builder, numElems)
def End(builder): return builder.EndObject()
def GVoxelPileEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.GVoxelData
try:
    from typing import List
except:
    pass

class GVoxelPileT(object):

    # GVoxelPileT
    def __init__(self):
        self.nbEmptyVoxels = 0  # type: int
        self.voxels = None  # type: List[WBIN.GVoxelData.GVoxelDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gVoxelPile = GVoxelPile()
        gVoxelPile.Init(buf, pos)
        return cls.InitFromObj(gVoxelPile)

    @classmethod
    def InitFromObj(cls, gVoxelPile):
        x = GVoxelPileT()
        x._UnPack(gVoxelPile)
        return x

    # GVoxelPileT
    def _UnPack(self, gVoxelPile):
        if gVoxelPile is None:
            return
        self.nbEmptyVoxels = gVoxelPile.NbEmptyVoxels()
        if not gVoxelPile.VoxelsIsNone():
            self.voxels = []
            for i in range(gVoxelPile.VoxelsLength()):
                if gVoxelPile.Voxels(i) is None:
                    self.voxels.append(None)
                else:
                    gVoxelData_ = WBIN.GVoxelData.GVoxelDataT.InitFromObj(gVoxelPile.Voxels(i))
                    self.voxels.append(gVoxelData_)

    # GVoxelPileT
    def Pack(self, builder):
        if self.voxels is not None:
            StartVoxelsVector(builder, len(self.voxels))
            for i in reversed(range(len(self.voxels))):
                self.voxels[i].Pack(builder)
            voxels = builder.EndVector()
        Start(builder)
        AddNbEmptyVoxels(builder, self.nbEmptyVoxels)
        if self.voxels is not None:
            AddVoxels(builder, voxels)
        gVoxelPile = End(builder)
        return gVoxelPile
