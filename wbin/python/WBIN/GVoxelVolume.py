# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GVoxelVolume(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGVoxelVolume(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GVoxelVolume()
        x.Init(buf, n + offset)
        return x

    # GVoxelVolume
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GVoxelVolume
    def Columns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.GVoxelColumn import GVoxelColumn
            obj = GVoxelColumn()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GVoxelVolume
    def ColumnsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GVoxelVolume
    def ColumnsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def GVoxelVolumeStart(builder): builder.StartObject(1)
def GVoxelVolumeAddColumns(builder, columns): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(columns), 0)
def GVoxelVolumeStartColumnsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GVoxelVolumeEnd(builder): return builder.EndObject()

import WBIN.GVoxelColumn
try:
    from typing import List
except:
    pass

class GVoxelVolumeT(object):

    # GVoxelVolumeT
    def __init__(self):
        self.columns = None  # type: List[WBIN.GVoxelColumn.GVoxelColumnT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gVoxelVolume = GVoxelVolume()
        gVoxelVolume.Init(buf, pos)
        return cls.InitFromObj(gVoxelVolume)

    @classmethod
    def InitFromObj(cls, gVoxelVolume):
        x = GVoxelVolumeT()
        x._UnPack(gVoxelVolume)
        return x

    # GVoxelVolumeT
    def _UnPack(self, gVoxelVolume):
        if gVoxelVolume is None:
            return
        if not gVoxelVolume.ColumnsIsNone():
            self.columns = []
            for i in range(gVoxelVolume.ColumnsLength()):
                if gVoxelVolume.Columns(i) is None:
                    self.columns.append(None)
                else:
                    gVoxelColumn_ = WBIN.GVoxelColumn.GVoxelColumnT.InitFromObj(gVoxelVolume.Columns(i))
                    self.columns.append(gVoxelColumn_)

    # GVoxelVolumeT
    def Pack(self, builder):
        if self.columns is not None:
            columnslist = []
            for i in range(len(self.columns)):
                columnslist.append(self.columns[i].Pack(builder))
            GVoxelVolumeStartColumnsVector(builder, len(self.columns))
            for i in reversed(range(len(self.columns))):
                builder.PrependUOffsetTRelative(columnslist[i])
            columns = builder.EndVector(len(self.columns))
        GVoxelVolumeStart(builder)
        if self.columns is not None:
            GVoxelVolumeAddColumns(builder, columns)
        gVoxelVolume = GVoxelVolumeEnd(builder)
        return gVoxelVolume
