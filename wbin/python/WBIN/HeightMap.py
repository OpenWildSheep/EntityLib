# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HeightMap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HeightMap()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeightMap(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HeightMap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeightMap
    def Xmin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Xmax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Ymin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Ymax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Pixels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.HeightMapPixel import HeightMapPixel
            obj = HeightMapPixel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HeightMap
    def PixelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HeightMap
    def PixelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def Start(builder): builder.StartObject(7)
def HeightMapStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddXmin(builder, xmin): builder.PrependUint32Slot(0, xmin, 0)
def HeightMapAddXmin(builder, xmin):
    """This method is deprecated. Please switch to AddXmin."""
    return AddXmin(builder, xmin)
def AddXmax(builder, xmax): builder.PrependUint32Slot(1, xmax, 0)
def HeightMapAddXmax(builder, xmax):
    """This method is deprecated. Please switch to AddXmax."""
    return AddXmax(builder, xmax)
def AddYmin(builder, ymin): builder.PrependUint32Slot(2, ymin, 0)
def HeightMapAddYmin(builder, ymin):
    """This method is deprecated. Please switch to AddYmin."""
    return AddYmin(builder, ymin)
def AddYmax(builder, ymax): builder.PrependUint32Slot(3, ymax, 0)
def HeightMapAddYmax(builder, ymax):
    """This method is deprecated. Please switch to AddYmax."""
    return AddYmax(builder, ymax)
def AddWidth(builder, width): builder.PrependUint32Slot(4, width, 0)
def HeightMapAddWidth(builder, width):
    """This method is deprecated. Please switch to AddWidth."""
    return AddWidth(builder, width)
def AddHeight(builder, height): builder.PrependUint32Slot(5, height, 0)
def HeightMapAddHeight(builder, height):
    """This method is deprecated. Please switch to AddHeight."""
    return AddHeight(builder, height)
def AddPixels(builder, pixels): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(pixels), 0)
def HeightMapAddPixels(builder, pixels):
    """This method is deprecated. Please switch to AddPixels."""
    return AddPixels(builder, pixels)
def StartPixelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HeightMapStartPixelsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPixelsVector(builder, numElems)
def End(builder): return builder.EndObject()
def HeightMapEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.HeightMapPixel
try:
    from typing import List
except:
    pass

class HeightMapT(object):

    # HeightMapT
    def __init__(self):
        self.xmin = 0  # type: int
        self.xmax = 0  # type: int
        self.ymin = 0  # type: int
        self.ymax = 0  # type: int
        self.width = 0  # type: int
        self.height = 0  # type: int
        self.pixels = None  # type: List[WBIN.HeightMapPixel.HeightMapPixelT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        heightMap = HeightMap()
        heightMap.Init(buf, pos)
        return cls.InitFromObj(heightMap)

    @classmethod
    def InitFromObj(cls, heightMap):
        x = HeightMapT()
        x._UnPack(heightMap)
        return x

    # HeightMapT
    def _UnPack(self, heightMap):
        if heightMap is None:
            return
        self.xmin = heightMap.Xmin()
        self.xmax = heightMap.Xmax()
        self.ymin = heightMap.Ymin()
        self.ymax = heightMap.Ymax()
        self.width = heightMap.Width()
        self.height = heightMap.Height()
        if not heightMap.PixelsIsNone():
            self.pixels = []
            for i in range(heightMap.PixelsLength()):
                if heightMap.Pixels(i) is None:
                    self.pixels.append(None)
                else:
                    heightMapPixel_ = WBIN.HeightMapPixel.HeightMapPixelT.InitFromObj(heightMap.Pixels(i))
                    self.pixels.append(heightMapPixel_)

    # HeightMapT
    def Pack(self, builder):
        if self.pixels is not None:
            pixelslist = []
            for i in range(len(self.pixels)):
                pixelslist.append(self.pixels[i].Pack(builder))
            StartPixelsVector(builder, len(self.pixels))
            for i in reversed(range(len(self.pixels))):
                builder.PrependUOffsetTRelative(pixelslist[i])
            pixels = builder.EndVector()
        Start(builder)
        AddXmin(builder, self.xmin)
        AddXmax(builder, self.xmax)
        AddYmin(builder, self.ymin)
        AddYmax(builder, self.ymax)
        AddWidth(builder, self.width)
        AddHeight(builder, self.height)
        if self.pixels is not None:
            AddPixels(builder, pixels)
        heightMap = End(builder)
        return heightMap
