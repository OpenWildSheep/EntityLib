# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HeightMap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HeightMap()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeightMap(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HeightMap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeightMap
    def XMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def XMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def YMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def YMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HeightMap
    def Pixels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.HeightMapPixel import HeightMapPixel
            obj = HeightMapPixel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HeightMap
    def PixelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HeightMap
    def PixelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # HeightMap
    def PixelMeterSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.Float2 import Float2
            obj = Float2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(8)
def HeightMapStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddXMin(builder, xMin): builder.PrependUint32Slot(0, xMin, 0)
def HeightMapAddXMin(builder, xMin):
    """This method is deprecated. Please switch to AddXMin."""
    return AddXMin(builder, xMin)
def AddXMax(builder, xMax): builder.PrependUint32Slot(1, xMax, 0)
def HeightMapAddXMax(builder, xMax):
    """This method is deprecated. Please switch to AddXMax."""
    return AddXMax(builder, xMax)
def AddYMin(builder, yMin): builder.PrependUint32Slot(2, yMin, 0)
def HeightMapAddYMin(builder, yMin):
    """This method is deprecated. Please switch to AddYMin."""
    return AddYMin(builder, yMin)
def AddYMax(builder, yMax): builder.PrependUint32Slot(3, yMax, 0)
def HeightMapAddYMax(builder, yMax):
    """This method is deprecated. Please switch to AddYMax."""
    return AddYMax(builder, yMax)
def AddWidth(builder, width): builder.PrependUint32Slot(4, width, 0)
def HeightMapAddWidth(builder, width):
    """This method is deprecated. Please switch to AddWidth."""
    return AddWidth(builder, width)
def AddHeight(builder, height): builder.PrependUint32Slot(5, height, 0)
def HeightMapAddHeight(builder, height):
    """This method is deprecated. Please switch to AddHeight."""
    return AddHeight(builder, height)
def AddPixels(builder, pixels): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(pixels), 0)
def HeightMapAddPixels(builder, pixels):
    """This method is deprecated. Please switch to AddPixels."""
    return AddPixels(builder, pixels)
def StartPixelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HeightMapStartPixelsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPixelsVector(builder, numElems)
def AddPixelMeterSize(builder, pixelMeterSize): builder.PrependStructSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(pixelMeterSize), 0)
def HeightMapAddPixelMeterSize(builder, pixelMeterSize):
    """This method is deprecated. Please switch to AddPixelMeterSize."""
    return AddPixelMeterSize(builder, pixelMeterSize)
def End(builder): return builder.EndObject()
def HeightMapEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Float2
import WBIN.HeightMapPixel
try:
    from typing import List, Optional
except:
    pass

class HeightMapT(object):

    # HeightMapT
    def __init__(self):
        self.xMin = 0  # type: int
        self.xMax = 0  # type: int
        self.yMin = 0  # type: int
        self.yMax = 0  # type: int
        self.width = 0  # type: int
        self.height = 0  # type: int
        self.pixels = None  # type: List[WBIN.HeightMapPixel.HeightMapPixelT]
        self.pixelMeterSize = None  # type: Optional[WBIN.Float2.Float2T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        heightMap = HeightMap()
        heightMap.Init(buf, pos)
        return cls.InitFromObj(heightMap)

    @classmethod
    def InitFromObj(cls, heightMap):
        x = HeightMapT()
        x._UnPack(heightMap)
        return x

    # HeightMapT
    def _UnPack(self, heightMap):
        if heightMap is None:
            return
        self.xMin = heightMap.XMin()
        self.xMax = heightMap.XMax()
        self.yMin = heightMap.YMin()
        self.yMax = heightMap.YMax()
        self.width = heightMap.Width()
        self.height = heightMap.Height()
        if not heightMap.PixelsIsNone():
            self.pixels = []
            for i in range(heightMap.PixelsLength()):
                if heightMap.Pixels(i) is None:
                    self.pixels.append(None)
                else:
                    heightMapPixel_ = WBIN.HeightMapPixel.HeightMapPixelT.InitFromObj(heightMap.Pixels(i))
                    self.pixels.append(heightMapPixel_)
        if heightMap.PixelMeterSize() is not None:
            self.pixelMeterSize = WBIN.Float2.Float2T.InitFromObj(heightMap.PixelMeterSize())

    # HeightMapT
    def Pack(self, builder):
        if self.pixels is not None:
            pixelslist = []
            for i in range(len(self.pixels)):
                pixelslist.append(self.pixels[i].Pack(builder))
            StartPixelsVector(builder, len(self.pixels))
            for i in reversed(range(len(self.pixels))):
                builder.PrependUOffsetTRelative(pixelslist[i])
            pixels = builder.EndVector()
        Start(builder)
        AddXMin(builder, self.xMin)
        AddXMax(builder, self.xMax)
        AddYMin(builder, self.yMin)
        AddYMax(builder, self.yMax)
        AddWidth(builder, self.width)
        AddHeight(builder, self.height)
        if self.pixels is not None:
            AddPixels(builder, pixels)
        if self.pixelMeterSize is not None:
            pixelMeterSize = self.pixelMeterSize.Pack(builder)
            AddPixelMeterSize(builder, pixelMeterSize)
        heightMap = End(builder)
        return heightMap
