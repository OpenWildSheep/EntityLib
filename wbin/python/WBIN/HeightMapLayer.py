# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HeightMapLayer(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 12

    # HeightMapLayer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeightMapLayer
    def NormalX(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # HeightMapLayer
    def NormalY(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    # HeightMapLayer
    def Height(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # HeightMapLayer
    def Physicsmaterialid(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateHeightMapLayer(builder, normalX, normalY, height, physicsmaterialid):
    builder.Prep(4, 12)
    builder.Pad(3)
    builder.PrependUint8(physicsmaterialid)
    builder.PrependFloat32(height)
    builder.PrependUint16(normalY)
    builder.PrependUint16(normalX)
    return builder.Offset()


class HeightMapLayerT(object):

    # HeightMapLayerT
    def __init__(self):
        self.normalX = 0  # type: int
        self.normalY = 0  # type: int
        self.height = 0.0  # type: float
        self.physicsmaterialid = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        heightMapLayer = HeightMapLayer()
        heightMapLayer.Init(buf, pos)
        return cls.InitFromObj(heightMapLayer)

    @classmethod
    def InitFromObj(cls, heightMapLayer):
        x = HeightMapLayerT()
        x._UnPack(heightMapLayer)
        return x

    # HeightMapLayerT
    def _UnPack(self, heightMapLayer):
        if heightMapLayer is None:
            return
        self.normalX = heightMapLayer.NormalX()
        self.normalY = heightMapLayer.NormalY()
        self.height = heightMapLayer.Height()
        self.physicsmaterialid = heightMapLayer.Physicsmaterialid()

    # HeightMapLayerT
    def Pack(self, builder):
        return CreateHeightMapLayer(builder, self.normalX, self.normalY, self.height, self.physicsmaterialid)
