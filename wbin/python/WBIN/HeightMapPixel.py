# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HeightMapPixel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HeightMapPixel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeightMapPixel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HeightMapPixel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeightMapPixel
    def Layers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 20
            from WBIN.HeightMapLayer import HeightMapLayer
            obj = HeightMapLayer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HeightMapPixel
    def LayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HeightMapPixel
    def LayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def HeightMapPixelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddLayers(builder, layers): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(layers), 0)
def HeightMapPixelAddLayers(builder, layers):
    """This method is deprecated. Please switch to AddLayers."""
    return AddLayers(builder, layers)
def StartLayersVector(builder, numElems): return builder.StartVector(20, numElems, 4)
def HeightMapPixelStartLayersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartLayersVector(builder, numElems)
def End(builder): return builder.EndObject()
def HeightMapPixelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.HeightMapLayer
try:
    from typing import List
except:
    pass

class HeightMapPixelT(object):

    # HeightMapPixelT
    def __init__(self):
        self.layers = None  # type: List[WBIN.HeightMapLayer.HeightMapLayerT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        heightMapPixel = HeightMapPixel()
        heightMapPixel.Init(buf, pos)
        return cls.InitFromObj(heightMapPixel)

    @classmethod
    def InitFromObj(cls, heightMapPixel):
        x = HeightMapPixelT()
        x._UnPack(heightMapPixel)
        return x

    # HeightMapPixelT
    def _UnPack(self, heightMapPixel):
        if heightMapPixel is None:
            return
        if not heightMapPixel.LayersIsNone():
            self.layers = []
            for i in range(heightMapPixel.LayersLength()):
                if heightMapPixel.Layers(i) is None:
                    self.layers.append(None)
                else:
                    heightMapLayer_ = WBIN.HeightMapLayer.HeightMapLayerT.InitFromObj(heightMapPixel.Layers(i))
                    self.layers.append(heightMapLayer_)

    # HeightMapPixelT
    def Pack(self, builder):
        if self.layers is not None:
            StartLayersVector(builder, len(self.layers))
            for i in reversed(range(len(self.layers))):
                self.layers[i].Pack(builder)
            layers = builder.EndVector()
        Start(builder)
        if self.layers is not None:
            AddLayers(builder, layers)
        heightMapPixel = End(builder)
        return heightMapPixel
