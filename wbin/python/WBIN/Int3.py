# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Int3(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 12

    # Int3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Int3
    def X(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Int3
    def Y(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Int3
    def Z(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateInt3(builder, x, y, z):
    builder.Prep(4, 12)
    builder.PrependInt32(z)
    builder.PrependInt32(y)
    builder.PrependInt32(x)
    return builder.Offset()


class Int3T(object):

    # Int3T
    def __init__(self):
        self.x = 0  # type: int
        self.y = 0  # type: int
        self.z = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        int3 = Int3()
        int3.Init(buf, pos)
        return cls.InitFromObj(int3)

    @classmethod
    def InitFromObj(cls, int3):
        x = Int3T()
        x._UnPack(int3)
        return x

    # Int3T
    def _UnPack(self, int3):
        if int3 is None:
            return
        self.x = int3.X()
        self.y = int3.Y()
        self.z = int3.Z()

    # Int3T
    def Pack(self, builder):
        return CreateInt3(builder, self.x, self.y, self.z)
