# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MaterialRef(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MaterialRef()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMaterialRef(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MaterialRef
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MaterialRef
    def MatName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def MatLuaSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def MatLuaTemplate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def DiffuseTexPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def NormalTexPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def RoughTexMapPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def CavityTexMapPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def MetalTexMapPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def TranslucencyTexPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialRef
    def OpacityTexPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(10)
def MaterialRefStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddMatName(builder, matName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(matName), 0)
def MaterialRefAddMatName(builder, matName):
    """This method is deprecated. Please switch to AddMatName."""
    return AddMatName(builder, matName)
def AddMatLuaSource(builder, matLuaSource): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(matLuaSource), 0)
def MaterialRefAddMatLuaSource(builder, matLuaSource):
    """This method is deprecated. Please switch to AddMatLuaSource."""
    return AddMatLuaSource(builder, matLuaSource)
def AddMatLuaTemplate(builder, matLuaTemplate): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(matLuaTemplate), 0)
def MaterialRefAddMatLuaTemplate(builder, matLuaTemplate):
    """This method is deprecated. Please switch to AddMatLuaTemplate."""
    return AddMatLuaTemplate(builder, matLuaTemplate)
def AddDiffuseTexPath(builder, diffuseTexPath): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(diffuseTexPath), 0)
def MaterialRefAddDiffuseTexPath(builder, diffuseTexPath):
    """This method is deprecated. Please switch to AddDiffuseTexPath."""
    return AddDiffuseTexPath(builder, diffuseTexPath)
def AddNormalTexPath(builder, normalTexPath): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(normalTexPath), 0)
def MaterialRefAddNormalTexPath(builder, normalTexPath):
    """This method is deprecated. Please switch to AddNormalTexPath."""
    return AddNormalTexPath(builder, normalTexPath)
def AddRoughTexMapPath(builder, roughTexMapPath): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(roughTexMapPath), 0)
def MaterialRefAddRoughTexMapPath(builder, roughTexMapPath):
    """This method is deprecated. Please switch to AddRoughTexMapPath."""
    return AddRoughTexMapPath(builder, roughTexMapPath)
def AddCavityTexMapPath(builder, cavityTexMapPath): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cavityTexMapPath), 0)
def MaterialRefAddCavityTexMapPath(builder, cavityTexMapPath):
    """This method is deprecated. Please switch to AddCavityTexMapPath."""
    return AddCavityTexMapPath(builder, cavityTexMapPath)
def AddMetalTexMapPath(builder, metalTexMapPath): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(metalTexMapPath), 0)
def MaterialRefAddMetalTexMapPath(builder, metalTexMapPath):
    """This method is deprecated. Please switch to AddMetalTexMapPath."""
    return AddMetalTexMapPath(builder, metalTexMapPath)
def AddTranslucencyTexPath(builder, translucencyTexPath): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(translucencyTexPath), 0)
def MaterialRefAddTranslucencyTexPath(builder, translucencyTexPath):
    """This method is deprecated. Please switch to AddTranslucencyTexPath."""
    return AddTranslucencyTexPath(builder, translucencyTexPath)
def AddOpacityTexPath(builder, opacityTexPath): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(opacityTexPath), 0)
def MaterialRefAddOpacityTexPath(builder, opacityTexPath):
    """This method is deprecated. Please switch to AddOpacityTexPath."""
    return AddOpacityTexPath(builder, opacityTexPath)
def End(builder): return builder.EndObject()
def MaterialRefEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class MaterialRefT(object):

    # MaterialRefT
    def __init__(self):
        self.matName = None  # type: str
        self.matLuaSource = None  # type: str
        self.matLuaTemplate = None  # type: str
        self.diffuseTexPath = None  # type: str
        self.normalTexPath = None  # type: str
        self.roughTexMapPath = None  # type: str
        self.cavityTexMapPath = None  # type: str
        self.metalTexMapPath = None  # type: str
        self.translucencyTexPath = None  # type: str
        self.opacityTexPath = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        materialRef = MaterialRef()
        materialRef.Init(buf, pos)
        return cls.InitFromObj(materialRef)

    @classmethod
    def InitFromObj(cls, materialRef):
        x = MaterialRefT()
        x._UnPack(materialRef)
        return x

    # MaterialRefT
    def _UnPack(self, materialRef):
        if materialRef is None:
            return
        self.matName = materialRef.MatName()
        self.matLuaSource = materialRef.MatLuaSource()
        self.matLuaTemplate = materialRef.MatLuaTemplate()
        self.diffuseTexPath = materialRef.DiffuseTexPath()
        self.normalTexPath = materialRef.NormalTexPath()
        self.roughTexMapPath = materialRef.RoughTexMapPath()
        self.cavityTexMapPath = materialRef.CavityTexMapPath()
        self.metalTexMapPath = materialRef.MetalTexMapPath()
        self.translucencyTexPath = materialRef.TranslucencyTexPath()
        self.opacityTexPath = materialRef.OpacityTexPath()

    # MaterialRefT
    def Pack(self, builder):
        if self.matName is not None:
            matName = builder.CreateString(self.matName)
        if self.matLuaSource is not None:
            matLuaSource = builder.CreateString(self.matLuaSource)
        if self.matLuaTemplate is not None:
            matLuaTemplate = builder.CreateString(self.matLuaTemplate)
        if self.diffuseTexPath is not None:
            diffuseTexPath = builder.CreateString(self.diffuseTexPath)
        if self.normalTexPath is not None:
            normalTexPath = builder.CreateString(self.normalTexPath)
        if self.roughTexMapPath is not None:
            roughTexMapPath = builder.CreateString(self.roughTexMapPath)
        if self.cavityTexMapPath is not None:
            cavityTexMapPath = builder.CreateString(self.cavityTexMapPath)
        if self.metalTexMapPath is not None:
            metalTexMapPath = builder.CreateString(self.metalTexMapPath)
        if self.translucencyTexPath is not None:
            translucencyTexPath = builder.CreateString(self.translucencyTexPath)
        if self.opacityTexPath is not None:
            opacityTexPath = builder.CreateString(self.opacityTexPath)
        Start(builder)
        if self.matName is not None:
            AddMatName(builder, matName)
        if self.matLuaSource is not None:
            AddMatLuaSource(builder, matLuaSource)
        if self.matLuaTemplate is not None:
            AddMatLuaTemplate(builder, matLuaTemplate)
        if self.diffuseTexPath is not None:
            AddDiffuseTexPath(builder, diffuseTexPath)
        if self.normalTexPath is not None:
            AddNormalTexPath(builder, normalTexPath)
        if self.roughTexMapPath is not None:
            AddRoughTexMapPath(builder, roughTexMapPath)
        if self.cavityTexMapPath is not None:
            AddCavityTexMapPath(builder, cavityTexMapPath)
        if self.metalTexMapPath is not None:
            AddMetalTexMapPath(builder, metalTexMapPath)
        if self.translucencyTexPath is not None:
            AddTranslucencyTexPath(builder, translucencyTexPath)
        if self.opacityTexPath is not None:
            AddOpacityTexPath(builder, opacityTexPath)
        materialRef = End(builder)
        return materialRef
