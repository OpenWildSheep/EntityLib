# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Matrix43(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 48

    # Matrix43
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Matrix43
    def Values(self): return [self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0 + i * 4)) for i in range(12)]
    # Matrix43
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(0))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Matrix43
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(0))
        return o == 0


def CreateMatrix43(builder, values):
    builder.Prep(4, 48)
    for _idx0 in range(12 , 0, -1):
        builder.PrependFloat32(values[_idx0-1])
    return builder.Offset()

try:
    from typing import List
except:
    pass

class Matrix43T(object):

    # Matrix43T
    def __init__(self):
        self.values = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        matrix43 = Matrix43()
        matrix43.Init(buf, pos)
        return cls.InitFromObj(matrix43)

    @classmethod
    def InitFromObj(cls, matrix43):
        x = Matrix43T()
        x._UnPack(matrix43)
        return x

    # Matrix43T
    def _UnPack(self, matrix43):
        if matrix43 is None:
            return
        if not matrix43.ValuesIsNone():
            if np is None:
                self.values = []
                for i in range(matrix43.ValuesLength()):
                    self.values.append(matrix43.Values(i))
            else:
                self.values = matrix43.ValuesAsNumpy()

    # Matrix43T
    def Pack(self, builder):
        return CreateMatrix43(builder, self.values)
