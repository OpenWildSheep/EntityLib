# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Matrix44(object):
    __slots__ = ['_tab']

    # Matrix44
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Matrix44
    def Values(self): return [self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0 + i * 4)) for i in range(16)]
    # Matrix44
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(0))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Matrix44
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(0))
        return o == 0


def CreateMatrix44(builder, values):
    builder.Prep(4, 64)
    for _idx0 in range(16 , 0, -1):
        builder.PrependFloat32(values[_idx0-1])
    return builder.Offset()

try:
    from typing import List
except:
    pass

class Matrix44T(object):

    # Matrix44T
    def __init__(self):
        self.values = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        matrix44 = Matrix44()
        matrix44.Init(buf, pos)
        return cls.InitFromObj(matrix44)

    @classmethod
    def InitFromObj(cls, matrix44):
        x = Matrix44T()
        x._UnPack(matrix44)
        return x

    # Matrix44T
    def _UnPack(self, matrix44):
        if matrix44 is None:
            return
        if not matrix44.ValuesIsNone():
            if np is None:
                self.values = []
                for i in range(matrix44.ValuesLength()):
                    self.values.append(matrix44.Values(i))
            else:
                self.values = matrix44.ValuesAsNumpy()

    # Matrix44T
    def Pack(self, builder):
        return CreateMatrix44(builder, self.values)
