# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Mesh(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Mesh()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMesh(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Mesh
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Mesh
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(1)
def MeshStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def MeshAddPosition(builder, position):
    """This method is deprecated. Please switch to AddPosition."""
    return AddPosition(builder, position)
def End(builder): return builder.EndObject()
def MeshEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Float3Channel
try:
    from typing import Optional
except:
    pass

class MeshT(object):

    # MeshT
    def __init__(self):
        self.position = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mesh = Mesh()
        mesh.Init(buf, pos)
        return cls.InitFromObj(mesh)

    @classmethod
    def InitFromObj(cls, mesh):
        x = MeshT()
        x._UnPack(mesh)
        return x

    # MeshT
    def _UnPack(self, mesh):
        if mesh is None:
            return
        if mesh.Position() is not None:
            self.position = WBIN.Float3Channel.Float3ChannelT.InitFromObj(mesh.Position())

    # MeshT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        Start(builder)
        if self.position is not None:
            AddPosition(builder, position)
        mesh = End(builder)
        return mesh
