# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PCloud(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PCloud()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPCloud(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PCloud
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PCloud
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PCloud
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PCloud
    def Texcoord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PCloud
    def SourceFileInf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.SourceFileInf import SourceFileInf
            obj = SourceFileInf()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(4)
def PCloudStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def PCloudAddPosition(builder, position):
    """This method is deprecated. Please switch to AddPosition."""
    return AddPosition(builder, position)
def AddColor(builder, color): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def PCloudAddColor(builder, color):
    """This method is deprecated. Please switch to AddColor."""
    return AddColor(builder, color)
def AddTexcoord(builder, texcoord): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(texcoord), 0)
def PCloudAddTexcoord(builder, texcoord):
    """This method is deprecated. Please switch to AddTexcoord."""
    return AddTexcoord(builder, texcoord)
def AddSourceFileInf(builder, sourceFileInf): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sourceFileInf), 0)
def PCloudAddSourceFileInf(builder, sourceFileInf):
    """This method is deprecated. Please switch to AddSourceFileInf."""
    return AddSourceFileInf(builder, sourceFileInf)
def End(builder): return builder.EndObject()
def PCloudEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Float3Channel
import WBIN.SourceFileInf
try:
    from typing import Optional
except:
    pass

class PCloudT(object):

    # PCloudT
    def __init__(self):
        self.position = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.color = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.texcoord = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.sourceFileInf = None  # type: Optional[WBIN.SourceFileInf.SourceFileInfT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pCloud = PCloud()
        pCloud.Init(buf, pos)
        return cls.InitFromObj(pCloud)

    @classmethod
    def InitFromObj(cls, pCloud):
        x = PCloudT()
        x._UnPack(pCloud)
        return x

    # PCloudT
    def _UnPack(self, pCloud):
        if pCloud is None:
            return
        if pCloud.Position() is not None:
            self.position = WBIN.Float3Channel.Float3ChannelT.InitFromObj(pCloud.Position())
        if pCloud.Color() is not None:
            self.color = WBIN.Float3Channel.Float3ChannelT.InitFromObj(pCloud.Color())
        if pCloud.Texcoord() is not None:
            self.texcoord = WBIN.Float3Channel.Float3ChannelT.InitFromObj(pCloud.Texcoord())
        if pCloud.SourceFileInf() is not None:
            self.sourceFileInf = WBIN.SourceFileInf.SourceFileInfT.InitFromObj(pCloud.SourceFileInf())

    # PCloudT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.color is not None:
            color = self.color.Pack(builder)
        if self.texcoord is not None:
            texcoord = self.texcoord.Pack(builder)
        if self.sourceFileInf is not None:
            sourceFileInf = self.sourceFileInf.Pack(builder)
        Start(builder)
        if self.position is not None:
            AddPosition(builder, position)
        if self.color is not None:
            AddColor(builder, color)
        if self.texcoord is not None:
            AddTexcoord(builder, texcoord)
        if self.sourceFileInf is not None:
            AddSourceFileInf(builder, sourceFileInf)
        pCloud = End(builder)
        return pCloud
