# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Phys(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Phys()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPhys(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Phys
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Phys
    def Aabb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.AABB import AABB
            obj = AABB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Phys
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Phys
    def EdgeVisibility(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 3
            from WBIN.Bool3 import Bool3
            obj = Bool3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Phys
    def EdgeVisibilityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Phys
    def EdgeVisibilityIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Phys
    def Materials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Phys
    def MaterialsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Phys
    def MaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Phys
    def MaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Phys
    def Skin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Skin import Skin
            obj = Skin()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Phys
    def SourceFileInf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.SourceFileInf import SourceFileInf
            obj = SourceFileInf()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(6)
def PhysStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddAabb(builder, aabb): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(aabb), 0)
def PhysAddAabb(builder, aabb):
    """This method is deprecated. Please switch to AddAabb."""
    return AddAabb(builder, aabb)
def AddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def PhysAddPosition(builder, position):
    """This method is deprecated. Please switch to AddPosition."""
    return AddPosition(builder, position)
def AddEdgeVisibility(builder, edgeVisibility): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(edgeVisibility), 0)
def PhysAddEdgeVisibility(builder, edgeVisibility):
    """This method is deprecated. Please switch to AddEdgeVisibility."""
    return AddEdgeVisibility(builder, edgeVisibility)
def StartEdgeVisibilityVector(builder, numElems): return builder.StartVector(3, numElems, 1)
def PhysStartEdgeVisibilityVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEdgeVisibilityVector(builder, numElems)
def AddMaterials(builder, materials): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(materials), 0)
def PhysAddMaterials(builder, materials):
    """This method is deprecated. Please switch to AddMaterials."""
    return AddMaterials(builder, materials)
def StartMaterialsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PhysStartMaterialsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMaterialsVector(builder, numElems)
def AddSkin(builder, skin): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(skin), 0)
def PhysAddSkin(builder, skin):
    """This method is deprecated. Please switch to AddSkin."""
    return AddSkin(builder, skin)
def AddSourceFileInf(builder, sourceFileInf): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sourceFileInf), 0)
def PhysAddSourceFileInf(builder, sourceFileInf):
    """This method is deprecated. Please switch to AddSourceFileInf."""
    return AddSourceFileInf(builder, sourceFileInf)
def End(builder): return builder.EndObject()
def PhysEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.AABB
import WBIN.Bool3
import WBIN.Float3Channel
import WBIN.Skin
import WBIN.SourceFileInf
try:
    from typing import List, Optional
except:
    pass

class PhysT(object):

    # PhysT
    def __init__(self):
        self.aabb = None  # type: Optional[WBIN.AABB.AABBT]
        self.position = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.edgeVisibility = None  # type: List[WBIN.Bool3.Bool3T]
        self.materials = None  # type: List[int]
        self.skin = None  # type: Optional[WBIN.Skin.SkinT]
        self.sourceFileInf = None  # type: Optional[WBIN.SourceFileInf.SourceFileInfT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        phys = Phys()
        phys.Init(buf, pos)
        return cls.InitFromObj(phys)

    @classmethod
    def InitFromObj(cls, phys):
        x = PhysT()
        x._UnPack(phys)
        return x

    # PhysT
    def _UnPack(self, phys):
        if phys is None:
            return
        if phys.Aabb() is not None:
            self.aabb = WBIN.AABB.AABBT.InitFromObj(phys.Aabb())
        if phys.Position() is not None:
            self.position = WBIN.Float3Channel.Float3ChannelT.InitFromObj(phys.Position())
        if not phys.EdgeVisibilityIsNone():
            self.edgeVisibility = []
            for i in range(phys.EdgeVisibilityLength()):
                if phys.EdgeVisibility(i) is None:
                    self.edgeVisibility.append(None)
                else:
                    bool3_ = WBIN.Bool3.Bool3T.InitFromObj(phys.EdgeVisibility(i))
                    self.edgeVisibility.append(bool3_)
        if not phys.MaterialsIsNone():
            if np is None:
                self.materials = []
                for i in range(phys.MaterialsLength()):
                    self.materials.append(phys.Materials(i))
            else:
                self.materials = phys.MaterialsAsNumpy()
        if phys.Skin() is not None:
            self.skin = WBIN.Skin.SkinT.InitFromObj(phys.Skin())
        if phys.SourceFileInf() is not None:
            self.sourceFileInf = WBIN.SourceFileInf.SourceFileInfT.InitFromObj(phys.SourceFileInf())

    # PhysT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.edgeVisibility is not None:
            StartEdgeVisibilityVector(builder, len(self.edgeVisibility))
            for i in reversed(range(len(self.edgeVisibility))):
                self.edgeVisibility[i].Pack(builder)
            edgeVisibility = builder.EndVector()
        if self.materials is not None:
            if np is not None and type(self.materials) is np.ndarray:
                materials = builder.CreateNumpyVector(self.materials)
            else:
                StartMaterialsVector(builder, len(self.materials))
                for i in reversed(range(len(self.materials))):
                    builder.PrependUint32(self.materials[i])
                materials = builder.EndVector()
        if self.skin is not None:
            skin = self.skin.Pack(builder)
        if self.sourceFileInf is not None:
            sourceFileInf = self.sourceFileInf.Pack(builder)
        Start(builder)
        if self.aabb is not None:
            aabb = self.aabb.Pack(builder)
            AddAabb(builder, aabb)
        if self.position is not None:
            AddPosition(builder, position)
        if self.edgeVisibility is not None:
            AddEdgeVisibility(builder, edgeVisibility)
        if self.materials is not None:
            AddMaterials(builder, materials)
        if self.skin is not None:
            AddSkin(builder, skin)
        if self.sourceFileInf is not None:
            AddSourceFileInf(builder, sourceFileInf)
        phys = End(builder)
        return phys
