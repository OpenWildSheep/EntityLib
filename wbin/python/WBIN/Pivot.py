# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Pivot(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 44

    # Pivot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Pivot
    def Position(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 0)
        return obj

    # Pivot
    def Direction(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 12)
        return obj

    # Pivot
    def Parent(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # Pivot
    def Depth(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))
    # Pivot
    def BendFactor(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))
    # Pivot
    def GrowthProgressRange(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 36)
        return obj


def CreatePivot(builder, position_x, position_y, position_z, direction_x, direction_y, direction_z, parent, depth, bendFactor, growth_progress_range_x, growth_progress_range_y):
    builder.Prep(4, 44)
    builder.Prep(4, 8)
    builder.PrependFloat32(growth_progress_range_y)
    builder.PrependFloat32(growth_progress_range_x)
    builder.PrependFloat32(bendFactor)
    builder.PrependUint32(depth)
    builder.PrependUint32(parent)
    builder.Prep(4, 12)
    builder.PrependFloat32(direction_z)
    builder.PrependFloat32(direction_y)
    builder.PrependFloat32(direction_x)
    builder.Prep(4, 12)
    builder.PrependFloat32(position_z)
    builder.PrependFloat32(position_y)
    builder.PrependFloat32(position_x)
    return builder.Offset()

import WBIN.Float2
import WBIN.Float3
try:
    from typing import Optional
except:
    pass

class PivotT(object):

    # PivotT
    def __init__(self):
        self.position = None  # type: Optional[WBIN.Float3.Float3T]
        self.direction = None  # type: Optional[WBIN.Float3.Float3T]
        self.parent = 0  # type: int
        self.depth = 0  # type: int
        self.bendFactor = 0.0  # type: float
        self.growthProgressRange = None  # type: Optional[WBIN.Float2.Float2T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pivot = Pivot()
        pivot.Init(buf, pos)
        return cls.InitFromObj(pivot)

    @classmethod
    def InitFromObj(cls, pivot):
        x = PivotT()
        x._UnPack(pivot)
        return x

    # PivotT
    def _UnPack(self, pivot):
        if pivot is None:
            return
        if pivot.Position(WBIN.Float3.Float3()) is not None:
            self.position = WBIN.Float3.Float3T.InitFromObj(pivot.Position(WBIN.Float3.Float3()))
        if pivot.Direction(WBIN.Float3.Float3()) is not None:
            self.direction = WBIN.Float3.Float3T.InitFromObj(pivot.Direction(WBIN.Float3.Float3()))
        self.parent = pivot.Parent()
        self.depth = pivot.Depth()
        self.bendFactor = pivot.BendFactor()
        if pivot.GrowthProgressRange(WBIN.Float2.Float2()) is not None:
            self.growthProgressRange = WBIN.Float2.Float2T.InitFromObj(pivot.GrowthProgressRange(WBIN.Float2.Float2()))

    # PivotT
    def Pack(self, builder):
        return CreatePivot(builder, self.position.x, self.position.y, self.position.z, self.direction.x, self.direction.y, self.direction.z, self.parent, self.depth, self.bendFactor, self.growth_progress_range.x, self.growth_progress_range.y)
