# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PivotDebugInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 4

    # PivotDebugInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PivotDebugInfo
    def Length(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))

def CreatePivotDebugInfo(builder, length):
    builder.Prep(4, 4)
    builder.PrependFloat32(length)
    return builder.Offset()


class PivotDebugInfoT(object):

    # PivotDebugInfoT
    def __init__(self):
        self.length = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pivotDebugInfo = PivotDebugInfo()
        pivotDebugInfo.Init(buf, pos)
        return cls.InitFromObj(pivotDebugInfo)

    @classmethod
    def InitFromObj(cls, pivotDebugInfo):
        x = PivotDebugInfoT()
        x._UnPack(pivotDebugInfo)
        return x

    # PivotDebugInfoT
    def _UnPack(self, pivotDebugInfo):
        if pivotDebugInfo is None:
            return
        self.length = pivotDebugInfo.Length()

    # PivotDebugInfoT
    def Pack(self, builder):
        return CreatePivotDebugInfo(builder, self.length)
