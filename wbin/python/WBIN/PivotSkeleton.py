# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PivotSkeleton(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PivotSkeleton()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPivotSkeleton(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PivotSkeleton
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PivotSkeleton
    def Pivots(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 44
            from WBIN.Pivot import Pivot
            obj = Pivot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PivotSkeleton
    def PivotsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PivotSkeleton
    def PivotsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # PivotSkeleton
    def DebugInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from WBIN.PivotDebugInfo import PivotDebugInfo
            obj = PivotDebugInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PivotSkeleton
    def DebugInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PivotSkeleton
    def DebugInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def PivotSkeletonStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddPivots(builder, pivots): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pivots), 0)
def PivotSkeletonAddPivots(builder, pivots):
    """This method is deprecated. Please switch to AddPivots."""
    return AddPivots(builder, pivots)
def StartPivotsVector(builder, numElems): return builder.StartVector(44, numElems, 4)
def PivotSkeletonStartPivotsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPivotsVector(builder, numElems)
def AddDebugInfo(builder, debugInfo): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(debugInfo), 0)
def PivotSkeletonAddDebugInfo(builder, debugInfo):
    """This method is deprecated. Please switch to AddDebugInfo."""
    return AddDebugInfo(builder, debugInfo)
def StartDebugInfoVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PivotSkeletonStartDebugInfoVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDebugInfoVector(builder, numElems)
def End(builder): return builder.EndObject()
def PivotSkeletonEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Pivot
import WBIN.PivotDebugInfo
try:
    from typing import List
except:
    pass

class PivotSkeletonT(object):

    # PivotSkeletonT
    def __init__(self):
        self.pivots = None  # type: List[WBIN.Pivot.PivotT]
        self.debugInfo = None  # type: List[WBIN.PivotDebugInfo.PivotDebugInfoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pivotSkeleton = PivotSkeleton()
        pivotSkeleton.Init(buf, pos)
        return cls.InitFromObj(pivotSkeleton)

    @classmethod
    def InitFromObj(cls, pivotSkeleton):
        x = PivotSkeletonT()
        x._UnPack(pivotSkeleton)
        return x

    # PivotSkeletonT
    def _UnPack(self, pivotSkeleton):
        if pivotSkeleton is None:
            return
        if not pivotSkeleton.PivotsIsNone():
            self.pivots = []
            for i in range(pivotSkeleton.PivotsLength()):
                if pivotSkeleton.Pivots(i) is None:
                    self.pivots.append(None)
                else:
                    pivot_ = WBIN.Pivot.PivotT.InitFromObj(pivotSkeleton.Pivots(i))
                    self.pivots.append(pivot_)
        if not pivotSkeleton.DebugInfoIsNone():
            self.debugInfo = []
            for i in range(pivotSkeleton.DebugInfoLength()):
                if pivotSkeleton.DebugInfo(i) is None:
                    self.debugInfo.append(None)
                else:
                    pivotDebugInfo_ = WBIN.PivotDebugInfo.PivotDebugInfoT.InitFromObj(pivotSkeleton.DebugInfo(i))
                    self.debugInfo.append(pivotDebugInfo_)

    # PivotSkeletonT
    def Pack(self, builder):
        if self.pivots is not None:
            StartPivotsVector(builder, len(self.pivots))
            for i in reversed(range(len(self.pivots))):
                self.pivots[i].Pack(builder)
            pivots = builder.EndVector()
        if self.debugInfo is not None:
            StartDebugInfoVector(builder, len(self.debugInfo))
            for i in reversed(range(len(self.debugInfo))):
                self.debugInfo[i].Pack(builder)
            debugInfo = builder.EndVector()
        Start(builder)
        if self.pivots is not None:
            AddPivots(builder, pivots)
        if self.debugInfo is not None:
            AddDebugInfo(builder, debugInfo)
        pivotSkeleton = End(builder)
        return pivotSkeleton
