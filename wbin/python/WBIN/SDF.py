# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SDF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SDF()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSDF(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SDF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SDF
    def ValuesType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SDF
    def Values(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # SDF
    def Resolution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.UInt3 import UInt3
            obj = UInt3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SDF
    def OriginOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.Float3 import Float3
            obj = Float3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SDF
    def VoxelSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # SDF
    def BoundingVolume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.AABB import AABB
            obj = AABB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(6)
def SDFStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddValuesType(builder, valuesType): builder.PrependUint8Slot(0, valuesType, 0)
def SDFAddValuesType(builder, valuesType):
    """This method is deprecated. Please switch to AddValuesType."""
    return AddValuesType(builder, valuesType)
def AddValues(builder, values): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)
def SDFAddValues(builder, values):
    """This method is deprecated. Please switch to AddValues."""
    return AddValues(builder, values)
def AddResolution(builder, resolution): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resolution), 0)
def SDFAddResolution(builder, resolution):
    """This method is deprecated. Please switch to AddResolution."""
    return AddResolution(builder, resolution)
def AddOriginOffset(builder, originOffset): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(originOffset), 0)
def SDFAddOriginOffset(builder, originOffset):
    """This method is deprecated. Please switch to AddOriginOffset."""
    return AddOriginOffset(builder, originOffset)
def AddVoxelSize(builder, voxelSize): builder.PrependFloat32Slot(4, voxelSize, 1.0)
def SDFAddVoxelSize(builder, voxelSize):
    """This method is deprecated. Please switch to AddVoxelSize."""
    return AddVoxelSize(builder, voxelSize)
def AddBoundingVolume(builder, boundingVolume): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(boundingVolume), 0)
def SDFAddBoundingVolume(builder, boundingVolume):
    """This method is deprecated. Please switch to AddBoundingVolume."""
    return AddBoundingVolume(builder, boundingVolume)
def End(builder): return builder.EndObject()
def SDFEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.AABB
import WBIN.Float3
import WBIN.SDFValues
import WBIN.UInt3
import WBIN.doubleval
import WBIN.floatval
import WBIN.shortval
try:
    from typing import Optional, Union
except:
    pass

class SDFT(object):

    # SDFT
    def __init__(self):
        self.valuesType = 0  # type: int
        self.values = None  # type: Union[None, WBIN.shortval.shortvalT, WBIN.floatval.floatvalT, WBIN.doubleval.doublevalT]
        self.resolution = None  # type: Optional[WBIN.UInt3.UInt3T]
        self.originOffset = None  # type: Optional[WBIN.Float3.Float3T]
        self.voxelSize = 1.0  # type: float
        self.boundingVolume = None  # type: Optional[WBIN.AABB.AABBT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sDF = SDF()
        sDF.Init(buf, pos)
        return cls.InitFromObj(sDF)

    @classmethod
    def InitFromObj(cls, sDF):
        x = SDFT()
        x._UnPack(sDF)
        return x

    # SDFT
    def _UnPack(self, sDF):
        if sDF is None:
            return
        self.valuesType = sDF.ValuesType()
        self.values = WBIN.SDFValues.SDFValuesCreator(self.valuesType, sDF.Values())
        if sDF.Resolution() is not None:
            self.resolution = WBIN.UInt3.UInt3T.InitFromObj(sDF.Resolution())
        if sDF.OriginOffset() is not None:
            self.originOffset = WBIN.Float3.Float3T.InitFromObj(sDF.OriginOffset())
        self.voxelSize = sDF.VoxelSize()
        if sDF.BoundingVolume() is not None:
            self.boundingVolume = WBIN.AABB.AABBT.InitFromObj(sDF.BoundingVolume())

    # SDFT
    def Pack(self, builder):
        if self.values is not None:
            values = self.values.Pack(builder)
        Start(builder)
        AddValuesType(builder, self.valuesType)
        if self.values is not None:
            AddValues(builder, values)
        if self.resolution is not None:
            resolution = self.resolution.Pack(builder)
            AddResolution(builder, resolution)
        if self.originOffset is not None:
            originOffset = self.originOffset.Pack(builder)
            AddOriginOffset(builder, originOffset)
        AddVoxelSize(builder, self.voxelSize)
        if self.boundingVolume is not None:
            boundingVolume = self.boundingVolume.Pack(builder)
            AddBoundingVolume(builder, boundingVolume)
        sDF = End(builder)
        return sDF
