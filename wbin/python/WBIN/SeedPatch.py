# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SeedPatch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSeedPatch(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeedPatch()
        x.Init(buf, n + offset)
        return x

    # SeedPatch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SeedPatch
    def Aabb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.AABB import AABB
            obj = AABB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SeedPatch
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SeedPatch
    def EdgeVisibility(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 3
            from WBIN.Bool3 import Bool3
            obj = Bool3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SeedPatch
    def EdgeVisibilityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeedPatch
    def EdgeVisibilityIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # SeedPatch
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SeedPatch
    def SourceFileInf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.SourceFileInf import SourceFileInf
            obj = SourceFileInf()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SeedPatchStart(builder): builder.StartObject(5)
def SeedPatchAddAabb(builder, aabb): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(aabb), 0)
def SeedPatchAddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def SeedPatchAddEdgeVisibility(builder, edgeVisibility): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(edgeVisibility), 0)
def SeedPatchStartEdgeVisibilityVector(builder, numElems): return builder.StartVector(3, numElems, 1)
def SeedPatchAddColor(builder, color): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def SeedPatchAddSourceFileInf(builder, sourceFileInf): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(sourceFileInf), 0)
def SeedPatchEnd(builder): return builder.EndObject()

import WBIN.AABB
import WBIN.Bool3
import WBIN.Float3Channel
import WBIN.SourceFileInf
try:
    from typing import List, Optional
except:
    pass

class SeedPatchT(object):

    # SeedPatchT
    def __init__(self):
        self.aabb = None  # type: Optional[WBIN.AABB.AABBT]
        self.position = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.edgeVisibility = None  # type: List[WBIN.Bool3.Bool3T]
        self.color = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.sourceFileInf = None  # type: Optional[WBIN.SourceFileInf.SourceFileInfT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        seedPatch = SeedPatch()
        seedPatch.Init(buf, pos)
        return cls.InitFromObj(seedPatch)

    @classmethod
    def InitFromObj(cls, seedPatch):
        x = SeedPatchT()
        x._UnPack(seedPatch)
        return x

    # SeedPatchT
    def _UnPack(self, seedPatch):
        if seedPatch is None:
            return
        if seedPatch.Aabb() is not None:
            self.aabb = WBIN.AABB.AABBT.InitFromObj(seedPatch.Aabb())
        if seedPatch.Position() is not None:
            self.position = WBIN.Float3Channel.Float3ChannelT.InitFromObj(seedPatch.Position())
        if not seedPatch.EdgeVisibilityIsNone():
            self.edgeVisibility = []
            for i in range(seedPatch.EdgeVisibilityLength()):
                if seedPatch.EdgeVisibility(i) is None:
                    self.edgeVisibility.append(None)
                else:
                    bool3_ = WBIN.Bool3.Bool3T.InitFromObj(seedPatch.EdgeVisibility(i))
                    self.edgeVisibility.append(bool3_)
        if seedPatch.Color() is not None:
            self.color = WBIN.Float3Channel.Float3ChannelT.InitFromObj(seedPatch.Color())
        if seedPatch.SourceFileInf() is not None:
            self.sourceFileInf = WBIN.SourceFileInf.SourceFileInfT.InitFromObj(seedPatch.SourceFileInf())

    # SeedPatchT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.edgeVisibility is not None:
            SeedPatchStartEdgeVisibilityVector(builder, len(self.edgeVisibility))
            for i in reversed(range(len(self.edgeVisibility))):
                self.edgeVisibility[i].Pack(builder)
            edgeVisibility = builder.EndVector(len(self.edgeVisibility))
        if self.color is not None:
            color = self.color.Pack(builder)
        if self.sourceFileInf is not None:
            sourceFileInf = self.sourceFileInf.Pack(builder)
        SeedPatchStart(builder)
        if self.aabb is not None:
            aabb = self.aabb.Pack(builder)
            SeedPatchAddAabb(builder, aabb)
        if self.position is not None:
            SeedPatchAddPosition(builder, position)
        if self.edgeVisibility is not None:
            SeedPatchAddEdgeVisibility(builder, edgeVisibility)
        if self.color is not None:
            SeedPatchAddColor(builder, color)
        if self.sourceFileInf is not None:
            SeedPatchAddSourceFileInf(builder, sourceFileInf)
        seedPatch = SeedPatchEnd(builder)
        return seedPatch
