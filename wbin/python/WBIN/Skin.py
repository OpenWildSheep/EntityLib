# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Skin(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Skin()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSkin(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Skin
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Skin
    def VertexBoneWeights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.VertexBoneWeight import VertexBoneWeight
            obj = VertexBoneWeight()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Skin
    def VertexBoneWeightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Skin
    def VertexBoneWeightsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Skin
    def BindPose(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 64
            from WBIN.BoneMatrix import BoneMatrix
            obj = BoneMatrix()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Skin
    def BindPoseLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Skin
    def BindPoseIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def SkinStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddVertexBoneWeights(builder, vertexBoneWeights): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vertexBoneWeights), 0)
def SkinAddVertexBoneWeights(builder, vertexBoneWeights):
    """This method is deprecated. Please switch to AddVertexBoneWeights."""
    return AddVertexBoneWeights(builder, vertexBoneWeights)
def StartVertexBoneWeightsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SkinStartVertexBoneWeightsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartVertexBoneWeightsVector(builder, numElems)
def AddBindPose(builder, bindPose): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bindPose), 0)
def SkinAddBindPose(builder, bindPose):
    """This method is deprecated. Please switch to AddBindPose."""
    return AddBindPose(builder, bindPose)
def StartBindPoseVector(builder, numElems): return builder.StartVector(64, numElems, 4)
def SkinStartBindPoseVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartBindPoseVector(builder, numElems)
def End(builder): return builder.EndObject()
def SkinEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.BoneMatrix
import WBIN.VertexBoneWeight
try:
    from typing import List
except:
    pass

class SkinT(object):

    # SkinT
    def __init__(self):
        self.vertexBoneWeights = None  # type: List[WBIN.VertexBoneWeight.VertexBoneWeightT]
        self.bindPose = None  # type: List[WBIN.BoneMatrix.BoneMatrixT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        skin = Skin()
        skin.Init(buf, pos)
        return cls.InitFromObj(skin)

    @classmethod
    def InitFromObj(cls, skin):
        x = SkinT()
        x._UnPack(skin)
        return x

    # SkinT
    def _UnPack(self, skin):
        if skin is None:
            return
        if not skin.VertexBoneWeightsIsNone():
            self.vertexBoneWeights = []
            for i in range(skin.VertexBoneWeightsLength()):
                if skin.VertexBoneWeights(i) is None:
                    self.vertexBoneWeights.append(None)
                else:
                    vertexBoneWeight_ = WBIN.VertexBoneWeight.VertexBoneWeightT.InitFromObj(skin.VertexBoneWeights(i))
                    self.vertexBoneWeights.append(vertexBoneWeight_)
        if not skin.BindPoseIsNone():
            self.bindPose = []
            for i in range(skin.BindPoseLength()):
                if skin.BindPose(i) is None:
                    self.bindPose.append(None)
                else:
                    boneMatrix_ = WBIN.BoneMatrix.BoneMatrixT.InitFromObj(skin.BindPose(i))
                    self.bindPose.append(boneMatrix_)

    # SkinT
    def Pack(self, builder):
        if self.vertexBoneWeights is not None:
            vertexBoneWeightslist = []
            for i in range(len(self.vertexBoneWeights)):
                vertexBoneWeightslist.append(self.vertexBoneWeights[i].Pack(builder))
            StartVertexBoneWeightsVector(builder, len(self.vertexBoneWeights))
            for i in reversed(range(len(self.vertexBoneWeights))):
                builder.PrependUOffsetTRelative(vertexBoneWeightslist[i])
            vertexBoneWeights = builder.EndVector()
        if self.bindPose is not None:
            StartBindPoseVector(builder, len(self.bindPose))
            for i in reversed(range(len(self.bindPose))):
                self.bindPose[i].Pack(builder)
            bindPose = builder.EndVector()
        Start(builder)
        if self.vertexBoneWeights is not None:
            AddVertexBoneWeights(builder, vertexBoneWeights)
        if self.bindPose is not None:
            AddBindPose(builder, bindPose)
        skin = End(builder)
        return skin
