# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Stamp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Stamp()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStamp(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Stamp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Stamp
    def Shape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.AABB import AABB
            obj = AABB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stamp
    def Matrix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.Matrix44 import Matrix44
            obj = Matrix44()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stamp
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Stamp
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Stamp
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Stamp
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def Start(builder): builder.StartObject(3)
def StampStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddShape(builder, shape): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)
def StampAddShape(builder, shape):
    """This method is deprecated. Please switch to AddShape."""
    return AddShape(builder, shape)
def AddMatrix(builder, matrix): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(matrix), 0)
def StampAddMatrix(builder, matrix):
    """This method is deprecated. Please switch to AddMatrix."""
    return AddMatrix(builder, matrix)
def AddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def StampAddTags(builder, tags):
    """This method is deprecated. Please switch to AddTags."""
    return AddTags(builder, tags)
def StartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StampStartTagsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTagsVector(builder, numElems)
def End(builder): return builder.EndObject()
def StampEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.AABB
import WBIN.Matrix44
try:
    from typing import List, Optional
except:
    pass

class StampT(object):

    # StampT
    def __init__(self):
        self.shape = None  # type: Optional[WBIN.AABB.AABBT]
        self.matrix = None  # type: Optional[WBIN.Matrix44.Matrix44T]
        self.tags = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stamp = Stamp()
        stamp.Init(buf, pos)
        return cls.InitFromObj(stamp)

    @classmethod
    def InitFromObj(cls, stamp):
        x = StampT()
        x._UnPack(stamp)
        return x

    # StampT
    def _UnPack(self, stamp):
        if stamp is None:
            return
        if stamp.Shape() is not None:
            self.shape = WBIN.AABB.AABBT.InitFromObj(stamp.Shape())
        if stamp.Matrix() is not None:
            self.matrix = WBIN.Matrix44.Matrix44T.InitFromObj(stamp.Matrix())
        if not stamp.TagsIsNone():
            if np is None:
                self.tags = []
                for i in range(stamp.TagsLength()):
                    self.tags.append(stamp.Tags(i))
            else:
                self.tags = stamp.TagsAsNumpy()

    # StampT
    def Pack(self, builder):
        if self.tags is not None:
            if np is not None and type(self.tags) is np.ndarray:
                tags = builder.CreateNumpyVector(self.tags)
            else:
                StartTagsVector(builder, len(self.tags))
                for i in reversed(range(len(self.tags))):
                    builder.PrependInt32(self.tags[i])
                tags = builder.EndVector()
        Start(builder)
        if self.shape is not None:
            shape = self.shape.Pack(builder)
            AddShape(builder, shape)
        if self.matrix is not None:
            matrix = self.matrix.Pack(builder)
            AddMatrix(builder, matrix)
        if self.tags is not None:
            AddTags(builder, tags)
        stamp = End(builder)
        return stamp
