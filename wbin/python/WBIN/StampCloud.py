# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StampCloud(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StampCloud()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStampCloud(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StampCloud
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StampCloud
    def Stamps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.Stamp import Stamp
            obj = Stamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StampCloud
    def StampsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StampCloud
    def StampsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StampCloud
    def BoundingBox(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.AABB import AABB
            obj = AABB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(2)
def StampCloudStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddStamps(builder, stamps): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stamps), 0)
def StampCloudAddStamps(builder, stamps):
    """This method is deprecated. Please switch to AddStamps."""
    return AddStamps(builder, stamps)
def StartStampsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StampCloudStartStampsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStampsVector(builder, numElems)
def AddBoundingBox(builder, boundingBox): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(boundingBox), 0)
def StampCloudAddBoundingBox(builder, boundingBox):
    """This method is deprecated. Please switch to AddBoundingBox."""
    return AddBoundingBox(builder, boundingBox)
def End(builder): return builder.EndObject()
def StampCloudEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.AABB
import WBIN.Stamp
try:
    from typing import List, Optional
except:
    pass

class StampCloudT(object):

    # StampCloudT
    def __init__(self):
        self.stamps = None  # type: List[WBIN.Stamp.StampT]
        self.boundingBox = None  # type: Optional[WBIN.AABB.AABBT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stampCloud = StampCloud()
        stampCloud.Init(buf, pos)
        return cls.InitFromObj(stampCloud)

    @classmethod
    def InitFromObj(cls, stampCloud):
        x = StampCloudT()
        x._UnPack(stampCloud)
        return x

    # StampCloudT
    def _UnPack(self, stampCloud):
        if stampCloud is None:
            return
        if not stampCloud.StampsIsNone():
            self.stamps = []
            for i in range(stampCloud.StampsLength()):
                if stampCloud.Stamps(i) is None:
                    self.stamps.append(None)
                else:
                    stamp_ = WBIN.Stamp.StampT.InitFromObj(stampCloud.Stamps(i))
                    self.stamps.append(stamp_)
        if stampCloud.BoundingBox() is not None:
            self.boundingBox = WBIN.AABB.AABBT.InitFromObj(stampCloud.BoundingBox())

    # StampCloudT
    def Pack(self, builder):
        if self.stamps is not None:
            stampslist = []
            for i in range(len(self.stamps)):
                stampslist.append(self.stamps[i].Pack(builder))
            StartStampsVector(builder, len(self.stamps))
            for i in reversed(range(len(self.stamps))):
                builder.PrependUOffsetTRelative(stampslist[i])
            stamps = builder.EndVector()
        Start(builder)
        if self.stamps is not None:
            AddStamps(builder, stamps)
        if self.boundingBox is not None:
            boundingBox = self.boundingBox.Pack(builder)
            AddBoundingBox(builder, boundingBox)
        stampCloud = End(builder)
        return stampCloud
