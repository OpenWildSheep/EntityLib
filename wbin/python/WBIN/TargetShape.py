# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TargetShape(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TargetShape()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTargetShape(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TargetShape
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TargetShape
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TargetShape
    def VertexData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from WBIN.Float3 import Float3
            obj = Float3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TargetShape
    def VertexDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TargetShape
    def VertexDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def TargetShapeStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def TargetShapeAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def AddVertexData(builder, vertexData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(vertexData), 0)
def TargetShapeAddVertexData(builder, vertexData):
    """This method is deprecated. Please switch to AddVertexData."""
    return AddVertexData(builder, vertexData)
def StartVertexDataVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def TargetShapeStartVertexDataVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartVertexDataVector(builder, numElems)
def End(builder): return builder.EndObject()
def TargetShapeEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Float3
try:
    from typing import List
except:
    pass

class TargetShapeT(object):

    # TargetShapeT
    def __init__(self):
        self.name = None  # type: str
        self.vertexData = None  # type: List[WBIN.Float3.Float3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        targetShape = TargetShape()
        targetShape.Init(buf, pos)
        return cls.InitFromObj(targetShape)

    @classmethod
    def InitFromObj(cls, targetShape):
        x = TargetShapeT()
        x._UnPack(targetShape)
        return x

    # TargetShapeT
    def _UnPack(self, targetShape):
        if targetShape is None:
            return
        self.name = targetShape.Name()
        if not targetShape.VertexDataIsNone():
            self.vertexData = []
            for i in range(targetShape.VertexDataLength()):
                if targetShape.VertexData(i) is None:
                    self.vertexData.append(None)
                else:
                    float3_ = WBIN.Float3.Float3T.InitFromObj(targetShape.VertexData(i))
                    self.vertexData.append(float3_)

    # TargetShapeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.vertexData is not None:
            StartVertexDataVector(builder, len(self.vertexData))
            for i in reversed(range(len(self.vertexData))):
                self.vertexData[i].Pack(builder)
            vertexData = builder.EndVector()
        Start(builder)
        if self.name is not None:
            AddName(builder, name)
        if self.vertexData is not None:
            AddVertexData(builder, vertexData)
        targetShape = End(builder)
        return targetShape
