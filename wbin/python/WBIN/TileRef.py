# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TileRef(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TileRef()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTileRef(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TileRef
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TileRef
    def Coordinates(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.UInt2 import UInt2
            obj = UInt2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TileRef
    def Path(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(2)
def TileRefStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCoordinates(builder, coordinates): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(coordinates), 0)
def TileRefAddCoordinates(builder, coordinates):
    """This method is deprecated. Please switch to AddCoordinates."""
    return AddCoordinates(builder, coordinates)
def AddPath(builder, path): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)
def TileRefAddPath(builder, path):
    """This method is deprecated. Please switch to AddPath."""
    return AddPath(builder, path)
def End(builder): return builder.EndObject()
def TileRefEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.UInt2
try:
    from typing import Optional
except:
    pass

class TileRefT(object):

    # TileRefT
    def __init__(self):
        self.coordinates = None  # type: Optional[WBIN.UInt2.UInt2T]
        self.path = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tileRef = TileRef()
        tileRef.Init(buf, pos)
        return cls.InitFromObj(tileRef)

    @classmethod
    def InitFromObj(cls, tileRef):
        x = TileRefT()
        x._UnPack(tileRef)
        return x

    # TileRefT
    def _UnPack(self, tileRef):
        if tileRef is None:
            return
        if tileRef.Coordinates() is not None:
            self.coordinates = WBIN.UInt2.UInt2T.InitFromObj(tileRef.Coordinates())
        self.path = tileRef.Path()

    # TileRefT
    def Pack(self, builder):
        if self.path is not None:
            path = builder.CreateString(self.path)
        Start(builder)
        if self.coordinates is not None:
            coordinates = self.coordinates.Pack(builder)
            AddCoordinates(builder, coordinates)
        if self.path is not None:
            AddPath(builder, path)
        tileRef = End(builder)
        return tileRef
