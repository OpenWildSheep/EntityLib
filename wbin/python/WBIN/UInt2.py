# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UInt2(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # UInt2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UInt2
    def X(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # UInt2
    def Y(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateUInt2(builder, x, y):
    builder.Prep(4, 8)
    builder.PrependUint32(y)
    builder.PrependUint32(x)
    return builder.Offset()


class UInt2T(object):

    # UInt2T
    def __init__(self):
        self.x = 0  # type: int
        self.y = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uInt2 = UInt2()
        uInt2.Init(buf, pos)
        return cls.InitFromObj(uInt2)

    @classmethod
    def InitFromObj(cls, uInt2):
        x = UInt2T()
        x._UnPack(uInt2)
        return x

    # UInt2T
    def _UnPack(self, uInt2):
        if uInt2 is None:
            return
        self.x = uInt2.X()
        self.y = uInt2.Y()

    # UInt2T
    def Pack(self, builder):
        return CreateUInt2(builder, self.x, self.y)
