# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UInt3(object):
    __slots__ = ['_tab']

    # UInt3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UInt3
    def X(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # UInt3
    def Y(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # UInt3
    def Z(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateUInt3(builder, x, y, z):
    builder.Prep(4, 12)
    builder.PrependUint32(z)
    builder.PrependUint32(y)
    builder.PrependUint32(x)
    return builder.Offset()


class UInt3T(object):

    # UInt3T
    def __init__(self):
        self.x = 0  # type: int
        self.y = 0  # type: int
        self.z = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uInt3 = UInt3()
        uInt3.Init(buf, pos)
        return cls.InitFromObj(uInt3)

    @classmethod
    def InitFromObj(cls, uInt3):
        x = UInt3T()
        x._UnPack(uInt3)
        return x

    # UInt3T
    def _UnPack(self, uInt3):
        if uInt3 is None:
            return
        self.x = uInt3.X()
        self.y = uInt3.Y()
        self.z = uInt3.Z()

    # UInt3T
    def Pack(self, builder):
        return CreateUInt3(builder, self.x, self.y, self.z)
