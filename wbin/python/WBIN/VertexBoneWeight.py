# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VertexBoneWeight(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVertexBoneWeight(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VertexBoneWeight()
        x.Init(buf, n + offset)
        return x

    # VertexBoneWeight
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VertexBoneWeight
    def BoneWeight(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from WBIN.BoneWeight import BoneWeight
            obj = BoneWeight()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VertexBoneWeight
    def BoneWeightLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VertexBoneWeight
    def BoneWeightIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def VertexBoneWeightStart(builder): builder.StartObject(1)
def VertexBoneWeightAddBoneWeight(builder, boneWeight): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(boneWeight), 0)
def VertexBoneWeightStartBoneWeightVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def VertexBoneWeightEnd(builder): return builder.EndObject()

import WBIN.BoneWeight
try:
    from typing import List
except:
    pass

class VertexBoneWeightT(object):

    # VertexBoneWeightT
    def __init__(self):
        self.boneWeight = None  # type: List[WBIN.BoneWeight.BoneWeightT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vertexBoneWeight = VertexBoneWeight()
        vertexBoneWeight.Init(buf, pos)
        return cls.InitFromObj(vertexBoneWeight)

    @classmethod
    def InitFromObj(cls, vertexBoneWeight):
        x = VertexBoneWeightT()
        x._UnPack(vertexBoneWeight)
        return x

    # VertexBoneWeightT
    def _UnPack(self, vertexBoneWeight):
        if vertexBoneWeight is None:
            return
        if not vertexBoneWeight.BoneWeightIsNone():
            self.boneWeight = []
            for i in range(vertexBoneWeight.BoneWeightLength()):
                if vertexBoneWeight.BoneWeight(i) is None:
                    self.boneWeight.append(None)
                else:
                    boneWeight_ = WBIN.BoneWeight.BoneWeightT.InitFromObj(vertexBoneWeight.BoneWeight(i))
                    self.boneWeight.append(boneWeight_)

    # VertexBoneWeightT
    def Pack(self, builder):
        if self.boneWeight is not None:
            VertexBoneWeightStartBoneWeightVector(builder, len(self.boneWeight))
            for i in reversed(range(len(self.boneWeight))):
                self.boneWeight[i].Pack(builder)
            boneWeight = builder.EndVector(len(self.boneWeight))
        VertexBoneWeightStart(builder)
        if self.boneWeight is not None:
            VertexBoneWeightAddBoneWeight(builder, boneWeight)
        vertexBoneWeight = VertexBoneWeightEnd(builder)
        return vertexBoneWeight
