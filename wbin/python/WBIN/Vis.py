# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vis(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVis(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vis()
        x.Init(buf, n + offset)
        return x

    # Vis
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vis
    def Aabb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from WBIN.AABB import AABB
            obj = AABB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Vis
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Vis
    def Normal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Vis
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float4Channel import Float4Channel
            obj = Float4Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Vis
    def Texcoord(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Vis
    def TexcoordLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Vis
    def TexcoordIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Vis
    def MaterialBank(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from WBIN.MaterialRef import MaterialRef
            obj = MaterialRef()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Vis
    def MaterialBankLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Vis
    def MaterialBankIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Vis
    def Materials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Vis
    def MaterialsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Vis
    def MaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Vis
    def MaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Vis
    def Skin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Skin import Skin
            obj = Skin()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Vis
    def SourceFileInf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.SourceFileInf import SourceFileInf
            obj = SourceFileInf()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VisStart(builder): builder.StartObject(9)
def VisAddAabb(builder, aabb): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(aabb), 0)
def VisAddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def VisAddNormal(builder, normal): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(normal), 0)
def VisAddColor(builder, color): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def VisAddTexcoord(builder, texcoord): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(texcoord), 0)
def VisStartTexcoordVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VisAddMaterialBank(builder, materialBank): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(materialBank), 0)
def VisStartMaterialBankVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VisAddMaterials(builder, materials): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(materials), 0)
def VisStartMaterialsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VisAddSkin(builder, skin): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(skin), 0)
def VisAddSourceFileInf(builder, sourceFileInf): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(sourceFileInf), 0)
def VisEnd(builder): return builder.EndObject()

import WBIN.AABB
import WBIN.Float3Channel
import WBIN.Float4Channel
import WBIN.MaterialRef
import WBIN.Skin
import WBIN.SourceFileInf
try:
    from typing import List, Optional
except:
    pass

class VisT(object):

    # VisT
    def __init__(self):
        self.aabb = None  # type: Optional[WBIN.AABB.AABBT]
        self.position = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.normal = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.color = None  # type: Optional[WBIN.Float4Channel.Float4ChannelT]
        self.texcoord = None  # type: List[WBIN.Float3Channel.Float3ChannelT]
        self.materialBank = None  # type: List[WBIN.MaterialRef.MaterialRefT]
        self.materials = None  # type: List[int]
        self.skin = None  # type: Optional[WBIN.Skin.SkinT]
        self.sourceFileInf = None  # type: Optional[WBIN.SourceFileInf.SourceFileInfT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vis = Vis()
        vis.Init(buf, pos)
        return cls.InitFromObj(vis)

    @classmethod
    def InitFromObj(cls, vis):
        x = VisT()
        x._UnPack(vis)
        return x

    # VisT
    def _UnPack(self, vis):
        if vis is None:
            return
        if vis.Aabb() is not None:
            self.aabb = WBIN.AABB.AABBT.InitFromObj(vis.Aabb())
        if vis.Position() is not None:
            self.position = WBIN.Float3Channel.Float3ChannelT.InitFromObj(vis.Position())
        if vis.Normal() is not None:
            self.normal = WBIN.Float3Channel.Float3ChannelT.InitFromObj(vis.Normal())
        if vis.Color() is not None:
            self.color = WBIN.Float4Channel.Float4ChannelT.InitFromObj(vis.Color())
        if not vis.TexcoordIsNone():
            self.texcoord = []
            for i in range(vis.TexcoordLength()):
                if vis.Texcoord(i) is None:
                    self.texcoord.append(None)
                else:
                    float3Channel_ = WBIN.Float3Channel.Float3ChannelT.InitFromObj(vis.Texcoord(i))
                    self.texcoord.append(float3Channel_)
        if not vis.MaterialBankIsNone():
            self.materialBank = []
            for i in range(vis.MaterialBankLength()):
                if vis.MaterialBank(i) is None:
                    self.materialBank.append(None)
                else:
                    materialRef_ = WBIN.MaterialRef.MaterialRefT.InitFromObj(vis.MaterialBank(i))
                    self.materialBank.append(materialRef_)
        if not vis.MaterialsIsNone():
            if np is None:
                self.materials = []
                for i in range(vis.MaterialsLength()):
                    self.materials.append(vis.Materials(i))
            else:
                self.materials = vis.MaterialsAsNumpy()
        if vis.Skin() is not None:
            self.skin = WBIN.Skin.SkinT.InitFromObj(vis.Skin())
        if vis.SourceFileInf() is not None:
            self.sourceFileInf = WBIN.SourceFileInf.SourceFileInfT.InitFromObj(vis.SourceFileInf())

    # VisT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.normal is not None:
            normal = self.normal.Pack(builder)
        if self.color is not None:
            color = self.color.Pack(builder)
        if self.texcoord is not None:
            texcoordlist = []
            for i in range(len(self.texcoord)):
                texcoordlist.append(self.texcoord[i].Pack(builder))
            VisStartTexcoordVector(builder, len(self.texcoord))
            for i in reversed(range(len(self.texcoord))):
                builder.PrependUOffsetTRelative(texcoordlist[i])
            texcoord = builder.EndVector(len(self.texcoord))
        if self.materialBank is not None:
            materialBanklist = []
            for i in range(len(self.materialBank)):
                materialBanklist.append(self.materialBank[i].Pack(builder))
            VisStartMaterialBankVector(builder, len(self.materialBank))
            for i in reversed(range(len(self.materialBank))):
                builder.PrependUOffsetTRelative(materialBanklist[i])
            materialBank = builder.EndVector(len(self.materialBank))
        if self.materials is not None:
            if np is not None and type(self.materials) is np.ndarray:
                materials = builder.CreateNumpyVector(self.materials)
            else:
                VisStartMaterialsVector(builder, len(self.materials))
                for i in reversed(range(len(self.materials))):
                    builder.PrependUint32(self.materials[i])
                materials = builder.EndVector(len(self.materials))
        if self.skin is not None:
            skin = self.skin.Pack(builder)
        if self.sourceFileInf is not None:
            sourceFileInf = self.sourceFileInf.Pack(builder)
        VisStart(builder)
        if self.aabb is not None:
            aabb = self.aabb.Pack(builder)
            VisAddAabb(builder, aabb)
        if self.position is not None:
            VisAddPosition(builder, position)
        if self.normal is not None:
            VisAddNormal(builder, normal)
        if self.color is not None:
            VisAddColor(builder, color)
        if self.texcoord is not None:
            VisAddTexcoord(builder, texcoord)
        if self.materialBank is not None:
            VisAddMaterialBank(builder, materialBank)
        if self.materials is not None:
            VisAddMaterials(builder, materials)
        if self.skin is not None:
            VisAddSkin(builder, skin)
        if self.sourceFileInf is not None:
            VisAddSourceFileInf(builder, sourceFileInf)
        vis = VisEnd(builder)
        return vis
