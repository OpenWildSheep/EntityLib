# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WMmesh(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WMmesh()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWMmesh(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WMmesh
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WMmesh
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from WBIN.Float3Channel import Float3Channel
            obj = Float3Channel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WMmesh
    def Materials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # WMmesh
    def MaterialsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # WMmesh
    def MaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WMmesh
    def MaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def WMmeshStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def WMmeshAddPosition(builder, position):
    """This method is deprecated. Please switch to AddPosition."""
    return AddPosition(builder, position)
def AddMaterials(builder, materials): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(materials), 0)
def WMmeshAddMaterials(builder, materials):
    """This method is deprecated. Please switch to AddMaterials."""
    return AddMaterials(builder, materials)
def StartMaterialsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def WMmeshStartMaterialsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMaterialsVector(builder, numElems)
def End(builder): return builder.EndObject()
def WMmeshEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import WBIN.Float3Channel
try:
    from typing import List, Optional
except:
    pass

class WMmeshT(object):

    # WMmeshT
    def __init__(self):
        self.position = None  # type: Optional[WBIN.Float3Channel.Float3ChannelT]
        self.materials = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        wMmesh = WMmesh()
        wMmesh.Init(buf, pos)
        return cls.InitFromObj(wMmesh)

    @classmethod
    def InitFromObj(cls, wMmesh):
        x = WMmeshT()
        x._UnPack(wMmesh)
        return x

    # WMmeshT
    def _UnPack(self, wMmesh):
        if wMmesh is None:
            return
        if wMmesh.Position() is not None:
            self.position = WBIN.Float3Channel.Float3ChannelT.InitFromObj(wMmesh.Position())
        if not wMmesh.MaterialsIsNone():
            if np is None:
                self.materials = []
                for i in range(wMmesh.MaterialsLength()):
                    self.materials.append(wMmesh.Materials(i))
            else:
                self.materials = wMmesh.MaterialsAsNumpy()

    # WMmeshT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.materials is not None:
            if np is not None and type(self.materials) is np.ndarray:
                materials = builder.CreateNumpyVector(self.materials)
            else:
                StartMaterialsVector(builder, len(self.materials))
                for i in reversed(range(len(self.materials))):
                    builder.PrependUint32(self.materials[i])
                materials = builder.EndVector()
        Start(builder)
        if self.position is not None:
            AddPosition(builder, position)
        if self.materials is not None:
            AddMaterials(builder, materials)
        wMmesh = End(builder)
        return wMmesh
