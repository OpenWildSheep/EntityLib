# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class doubleval(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = doubleval()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdoubleval(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # doubleval
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # doubleval
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # doubleval
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # doubleval
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # doubleval
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def doublevalStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddValues(builder, values): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)
def doublevalAddValues(builder, values):
    """This method is deprecated. Please switch to AddValues."""
    return AddValues(builder, values)
def StartValuesVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def doublevalStartValuesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartValuesVector(builder, numElems)
def End(builder): return builder.EndObject()
def doublevalEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
try:
    from typing import List
except:
    pass

class doublevalT(object):

    # doublevalT
    def __init__(self):
        self.values = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        doubleval = doubleval()
        doubleval.Init(buf, pos)
        return cls.InitFromObj(doubleval)

    @classmethod
    def InitFromObj(cls, doubleval):
        x = doublevalT()
        x._UnPack(doubleval)
        return x

    # doublevalT
    def _UnPack(self, doubleval):
        if doubleval is None:
            return
        if not doubleval.ValuesIsNone():
            if np is None:
                self.values = []
                for i in range(doubleval.ValuesLength()):
                    self.values.append(doubleval.Values(i))
            else:
                self.values = doubleval.ValuesAsNumpy()

    # doublevalT
    def Pack(self, builder):
        if self.values is not None:
            if np is not None and type(self.values) is np.ndarray:
                values = builder.CreateNumpyVector(self.values)
            else:
                StartValuesVector(builder, len(self.values))
                for i in reversed(range(len(self.values))):
                    builder.PrependFloat64(self.values[i])
                values = builder.EndVector()
        Start(builder)
        if self.values is not None:
            AddValues(builder, values)
        doubleval = End(builder)
        return doubleval
