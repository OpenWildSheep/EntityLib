# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WBIN

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class floatval(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = floatval()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsfloatval(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # floatval
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # floatval
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # floatval
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # floatval
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # floatval
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def floatvalStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddValues(builder, values): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)
def floatvalAddValues(builder, values):
    """This method is deprecated. Please switch to AddValues."""
    return AddValues(builder, values)
def StartValuesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def floatvalStartValuesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartValuesVector(builder, numElems)
def End(builder): return builder.EndObject()
def floatvalEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
try:
    from typing import List
except:
    pass

class floatvalT(object):

    # floatvalT
    def __init__(self):
        self.values = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        floatval = floatval()
        floatval.Init(buf, pos)
        return cls.InitFromObj(floatval)

    @classmethod
    def InitFromObj(cls, floatval):
        x = floatvalT()
        x._UnPack(floatval)
        return x

    # floatvalT
    def _UnPack(self, floatval):
        if floatval is None:
            return
        if not floatval.ValuesIsNone():
            if np is None:
                self.values = []
                for i in range(floatval.ValuesLength()):
                    self.values.append(floatval.Values(i))
            else:
                self.values = floatval.ValuesAsNumpy()

    # floatvalT
    def Pack(self, builder):
        if self.values is not None:
            if np is not None and type(self.values) is np.ndarray:
                values = builder.CreateNumpyVector(self.values)
            else:
                StartValuesVector(builder, len(self.values))
                for i in reversed(range(len(self.values))):
                    builder.PrependFloat32(self.values[i])
                values = builder.EndVector()
        Start(builder)
        if self.values is not None:
            AddValues(builder, values)
        floatval = End(builder)
        return floatval
