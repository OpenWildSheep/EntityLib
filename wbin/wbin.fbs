
namespace WBIN;

struct UInt3 
{
	x:uint;
	y:uint;
	z:uint;
}

struct Float3
{
	x:float;
	y:float;
	z:float;
}

struct Float2
{
	x:float;
	y:float;
}

struct Float4
{
	x:float;
	y:float;
	z:float;
	w:float;
}

struct Bool3
{
	x:bool;
	y:bool;
	z:bool;
}

// Bounding Volume
table AABB
{
	min:Float3 (required);
	max:Float3 (required);
}

table FloatMask
{
	triangles:[UInt3] (required);
	vertexData:[float] (required);
}

table Float2Channel
{
	triangles:[UInt3] (required); // One element per triangle
	vertexData:[Float2] (required);
}

// Float channel list, store a float3 per vertex per face
table Float3Channel
{
	triangles:[UInt3] (required); // One element per triangle
	vertexData:[Float3] (required);
}

// Float channel list, store a float4 per vertex per face
table Float4Channel
{
	triangles:[UInt3] (required); // One element per triangle
	vertexData:[Float4] (required);
}

// Material ID list, setting the material ID for each triangle
table Materials
{
	triangleMatIDs:[uint] (required); // One element per triangles, 
}

// Skinning data
struct BoneWeight
{
	boneIndex:uint;
	weight:float;
}

table VertexBoneWeight
{
	boneWeight:[BoneWeight] (required);
}

struct BoneMatrix
{
	matrix4:[float:16];
}

table Skin // used for skinned visual meshes or colliders
{
	vertexBoneWeights:[VertexBoneWeight] (required); //< one per vertex, then per up to 4 bones
	bindPose:[BoneMatrix] (required);
}

// Source file infos
table SourceFileInf
{
	sourceFilePath:string; //Relative to p4 root (Point towards "SourceData")
}
